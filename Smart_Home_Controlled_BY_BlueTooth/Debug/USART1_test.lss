
USART1_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000077fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000023a  00800060  000077fe  00007892  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000059  0080029a  0080029a  00007acc  2**0
                  ALLOC
  3 .stab         0000792c  00000000  00000000  00007acc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002521  00000000  00000000  0000f3f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00011919  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00011ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00011cab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  000140b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0001543c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00016614  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  000167d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00016aca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00017438  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 6f 15 	jmp	0x2ade	; 0x2ade <__vector_1>
       8:	0c 94 9c 15 	jmp	0x2b38	; 0x2b38 <__vector_2>
       c:	0c 94 c9 15 	jmp	0x2b92	; 0x2b92 <__vector_3>
      10:	0c 94 33 28 	jmp	0x5066	; 0x5066 <__vector_4>
      14:	0c 94 06 28 	jmp	0x500c	; 0x500c <__vector_5>
      18:	0c 94 d9 27 	jmp	0x4fb2	; 0x4fb2 <__vector_6>
      1c:	0c 94 52 27 	jmp	0x4ea4	; 0x4ea4 <__vector_7>
      20:	0c 94 7f 27 	jmp	0x4efe	; 0x4efe <__vector_8>
      24:	0c 94 ac 27 	jmp	0x4f58	; 0x4f58 <__vector_9>
      28:	0c 94 f8 26 	jmp	0x4df0	; 0x4df0 <__vector_10>
      2c:	0c 94 25 27 	jmp	0x4e4a	; 0x4e4a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 06 2c 	jmp	0x580c	; 0x580c <__vector_13>
      38:	0c 94 88 2b 	jmp	0x5710	; 0x5710 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 c9 08 	jmp	0x1192	; 0x1192 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	f7 e7       	ldi	r31, 0x77	; 119
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 39       	cpi	r26, 0x9A	; 154
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa e9       	ldi	r26, 0x9A	; 154
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3f       	cpi	r26, 0xF3	; 243
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <main>
      8a:	0c 94 fd 3b 	jmp	0x77fa	; 0x77fa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c6 3b 	jmp	0x778c	; 0x778c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e5       	ldi	r26, 0x56	; 86
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e2 3b 	jmp	0x77c4	; 0x77c4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d2 3b 	jmp	0x77a4	; 0x77a4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ee 3b 	jmp	0x77dc	; 0x77dc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d2 3b 	jmp	0x77a4	; 0x77a4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ee 3b 	jmp	0x77dc	; 0x77dc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c6 3b 	jmp	0x778c	; 0x778c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e5       	ldi	r24, 0x56	; 86
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e2 3b 	jmp	0x77c4	; 0x77c4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ce 3b 	jmp	0x779c	; 0x779c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e5       	ldi	r22, 0x56	; 86
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ea 3b 	jmp	0x77d4	; 0x77d4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 d2 3b 	jmp	0x77a4	; 0x77a4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ee 3b 	jmp	0x77dc	; 0x77dc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 d2 3b 	jmp	0x77a4	; 0x77a4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ee 3b 	jmp	0x77dc	; 0x77dc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 d2 3b 	jmp	0x77a4	; 0x77a4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ee 3b 	jmp	0x77dc	; 0x77dc <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d6 3b 	jmp	0x77ac	; 0x77ac <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 f2 3b 	jmp	0x77e4	; 0x77e4 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 ce 3b 	jmp	0x779c	; 0x779c <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 ea 3b 	jmp	0x77d4	; 0x77d4 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e2 5a       	subi	r30, 0xA2	; 162
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_voidInit>:
static u8 * ADC_pu8ChannelNum = NULL;
static u8 ADC_u8ChannelSize ;
static void (*Global_vChainCallBackFunc)() = NULL;
static u16 * ADC_pu16ChannelReading = NULL;
void ADC_voidInit()
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	ADMUX &= MASK_AREF;
     e36:	a7 e2       	ldi	r26, 0x27	; 39
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e7 e2       	ldi	r30, 0x27	; 39
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	8f 73       	andi	r24, 0x3F	; 63
     e42:	8c 93       	st	X, r24
	ADMUX |= ADC_REF_VOLT<<ADMUX_REFS0;
     e44:	a7 e2       	ldi	r26, 0x27	; 39
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e7 e2       	ldi	r30, 0x27	; 39
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	80 64       	ori	r24, 0x40	; 64
     e50:	8c 93       	st	X, r24
#if ADC_ADJUST_BIT == LEFT_ADJUST
	SET_BIT(ADMUX,ADMUX_ADLAR);
     e52:	a7 e2       	ldi	r26, 0x27	; 39
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e7 e2       	ldi	r30, 0x27	; 39
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	80 62       	ori	r24, 0x20	; 32
     e5e:	8c 93       	st	X, r24
#elif ADC_ADJUST_BIT == RIGHT_ADJUST
	CLR_BIT(ADMUX,ADMUX_ADLAR);
#else
#error "Wrong in choosing configuration of ADC_ADJUST_BIT "
#endif
	ADCSRA &= MASK_CLK_RATE;
     e60:	a6 e2       	ldi	r26, 0x26	; 38
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e6 e2       	ldi	r30, 0x26	; 38
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	88 7f       	andi	r24, 0xF8	; 248
     e6c:	8c 93       	st	X, r24
	ADCSRA |= ADC_CLK_RATE<<ADCSRA_ADPS0;
     e6e:	a6 e2       	ldi	r26, 0x26	; 38
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e6 e2       	ldi	r30, 0x26	; 38
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	86 60       	ori	r24, 0x06	; 6
     e7a:	8c 93       	st	X, r24
	SFIOR &= MASK_AUTO_TRIGGER;
	SFIOR |= ADC_AUTO_TRIGGER_SRC << SFIOR_ADTS0;

	SET_BIT(ADCSRA,ADCSRA_ADSC);
#elif ADC_AUTO_TRIGGER_MODE == DISABLE
	CLR_BIT(ADCSRA,ADCSRA_ADATE);
     e7c:	a6 e2       	ldi	r26, 0x26	; 38
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e6 e2       	ldi	r30, 0x26	; 38
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	8f 7d       	andi	r24, 0xDF	; 223
     e88:	8c 93       	st	X, r24
#else
#error "Wrong in choosing configuration of ADC_AUTO_TRIGGER_MODE "
#endif
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     e8a:	a6 e2       	ldi	r26, 0x26	; 38
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e6 e2       	ldi	r30, 0x26	; 38
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	80 68       	ori	r24, 0x80	; 128
     e96:	8c 93       	st	X, r24
}
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <ADC_u8StartSingleConvPoll>:
// Synch applay Busy Flag For reenterrant
u8 ADC_u8StartSingleConvPoll(u8 Copy_u8Channel,u16 *Copy_pu16Read)
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	28 97       	sbiw	r28, 0x08	; 8
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	f8 94       	cli
     eac:	de bf       	out	0x3e, r29	; 62
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	cd bf       	out	0x3d, r28	; 61
     eb2:	8e 83       	std	Y+6, r24	; 0x06
     eb4:	78 87       	std	Y+8, r23	; 0x08
     eb6:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = OK;
     eb8:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Counter = 0;
     eba:	19 82       	std	Y+1, r1	; 0x01
     ebc:	1a 82       	std	Y+2, r1	; 0x02
     ebe:	1b 82       	std	Y+3, r1	; 0x03
     ec0:	1c 82       	std	Y+4, r1	; 0x04
	if(Global_u8BusyFlag==IDLE)
     ec2:	80 91 9a 02 	lds	r24, 0x029A
     ec6:	88 23       	and	r24, r24
     ec8:	09 f0       	breq	.+2      	; 0xecc <ADC_u8StartSingleConvPoll+0x2e>
     eca:	6e c0       	rjmp	.+220    	; 0xfa8 <ADC_u8StartSingleConvPoll+0x10a>
	{
		Global_u8BusyFlag = BUSY;
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	80 93 9a 02 	sts	0x029A, r24
		if(Copy_pu16Read != NULL)
     ed2:	8f 81       	ldd	r24, Y+7	; 0x07
     ed4:	98 85       	ldd	r25, Y+8	; 0x08
     ed6:	00 97       	sbiw	r24, 0x00	; 0
     ed8:	09 f4       	brne	.+2      	; 0xedc <ADC_u8StartSingleConvPoll+0x3e>
     eda:	63 c0       	rjmp	.+198    	; 0xfa2 <ADC_u8StartSingleConvPoll+0x104>
		{
				if(Copy_u8Channel<=MAX_OPTION_CHANNEL)
     edc:	8e 81       	ldd	r24, Y+6	; 0x06
     ede:	80 32       	cpi	r24, 0x20	; 32
     ee0:	08 f0       	brcs	.+2      	; 0xee4 <ADC_u8StartSingleConvPoll+0x46>
     ee2:	5c c0       	rjmp	.+184    	; 0xf9c <ADC_u8StartSingleConvPoll+0xfe>
				{
					ADMUX &= MASK_CHANNEL;
     ee4:	a7 e2       	ldi	r26, 0x27	; 39
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e7 e2       	ldi	r30, 0x27	; 39
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	80 7e       	andi	r24, 0xE0	; 224
     ef0:	8c 93       	st	X, r24
					ADMUX |= Copy_u8Channel<<ADMUX_MUX0;
     ef2:	a7 e2       	ldi	r26, 0x27	; 39
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e7 e2       	ldi	r30, 0x27	; 39
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	90 81       	ld	r25, Z
     efc:	8e 81       	ldd	r24, Y+6	; 0x06
     efe:	89 2b       	or	r24, r25
     f00:	8c 93       	st	X, r24
					SET_BIT(ADCSRA,ADCSRA_ADSC);
     f02:	a6 e2       	ldi	r26, 0x26	; 38
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e6 e2       	ldi	r30, 0x26	; 38
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	80 64       	ori	r24, 0x40	; 64
     f0e:	8c 93       	st	X, r24
     f10:	0b c0       	rjmp	.+22     	; 0xf28 <ADC_u8StartSingleConvPoll+0x8a>
					while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0)&&(Local_u32Counter<ADC_U32_TIMEOUT))
					{
						Local_u32Counter++;
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	9a 81       	ldd	r25, Y+2	; 0x02
     f16:	ab 81       	ldd	r26, Y+3	; 0x03
     f18:	bc 81       	ldd	r27, Y+4	; 0x04
     f1a:	01 96       	adiw	r24, 0x01	; 1
     f1c:	a1 1d       	adc	r26, r1
     f1e:	b1 1d       	adc	r27, r1
     f20:	89 83       	std	Y+1, r24	; 0x01
     f22:	9a 83       	std	Y+2, r25	; 0x02
     f24:	ab 83       	std	Y+3, r26	; 0x03
     f26:	bc 83       	std	Y+4, r27	; 0x04
				if(Copy_u8Channel<=MAX_OPTION_CHANNEL)
				{
					ADMUX &= MASK_CHANNEL;
					ADMUX |= Copy_u8Channel<<ADMUX_MUX0;
					SET_BIT(ADCSRA,ADCSRA_ADSC);
					while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0)&&(Local_u32Counter<ADC_U32_TIMEOUT))
     f28:	e6 e2       	ldi	r30, 0x26	; 38
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	82 95       	swap	r24
     f30:	8f 70       	andi	r24, 0x0F	; 15
     f32:	88 2f       	mov	r24, r24
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	81 70       	andi	r24, 0x01	; 1
     f38:	90 70       	andi	r25, 0x00	; 0
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	61 f4       	brne	.+24     	; 0xf56 <ADC_u8StartSingleConvPoll+0xb8>
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	9a 81       	ldd	r25, Y+2	; 0x02
     f42:	ab 81       	ldd	r26, Y+3	; 0x03
     f44:	bc 81       	ldd	r27, Y+4	; 0x04
     f46:	80 35       	cpi	r24, 0x50	; 80
     f48:	23 ec       	ldi	r18, 0xC3	; 195
     f4a:	92 07       	cpc	r25, r18
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	a2 07       	cpc	r26, r18
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	b2 07       	cpc	r27, r18
     f54:	f0 f2       	brcs	.-68     	; 0xf12 <ADC_u8StartSingleConvPoll+0x74>
					{
						Local_u32Counter++;
					}
					if(Local_u32Counter==ADC_U32_TIMEOUT)
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	9a 81       	ldd	r25, Y+2	; 0x02
     f5a:	ab 81       	ldd	r26, Y+3	; 0x03
     f5c:	bc 81       	ldd	r27, Y+4	; 0x04
     f5e:	80 35       	cpi	r24, 0x50	; 80
     f60:	23 ec       	ldi	r18, 0xC3	; 195
     f62:	92 07       	cpc	r25, r18
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	a2 07       	cpc	r26, r18
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	b2 07       	cpc	r27, r18
     f6c:	19 f4       	brne	.+6      	; 0xf74 <ADC_u8StartSingleConvPoll+0xd6>
					{
						Local_u8ErrorState = NOTOK;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	8d 83       	std	Y+5, r24	; 0x05
     f72:	1c c0       	rjmp	.+56     	; 0xfac <ADC_u8StartSingleConvPoll+0x10e>
					}
					else{

						CLR_BIT(ADCSRA,ADCSRA_ADIF);
     f74:	a6 e2       	ldi	r26, 0x26	; 38
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e6 e2       	ldi	r30, 0x26	; 38
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	8f 7e       	andi	r24, 0xEF	; 239
     f80:	8c 93       	st	X, r24
						if(ADC_ADJUST_BIT == LEFT_ADJUST)
							*Copy_pu16Read = ADC_REG>>8;
     f82:	e4 e2       	ldi	r30, 0x24	; 36
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	91 81       	ldd	r25, Z+1	; 0x01
     f8a:	89 2f       	mov	r24, r25
     f8c:	99 27       	eor	r25, r25
     f8e:	ef 81       	ldd	r30, Y+7	; 0x07
     f90:	f8 85       	ldd	r31, Y+8	; 0x08
     f92:	91 83       	std	Z+1, r25	; 0x01
     f94:	80 83       	st	Z, r24
						else if(ADC_ADJUST_BIT == RIGHT_ADJUST)
							*Copy_pu16Read = ADC_REG;
						Global_u8BusyFlag = IDLE;
     f96:	10 92 9a 02 	sts	0x029A, r1
     f9a:	08 c0       	rjmp	.+16     	; 0xfac <ADC_u8StartSingleConvPoll+0x10e>
					}
				}
				else
					Local_u8ErrorState = NOTOK;
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	8d 83       	std	Y+5, r24	; 0x05
     fa0:	05 c0       	rjmp	.+10     	; 0xfac <ADC_u8StartSingleConvPoll+0x10e>
			}
			else
				Local_u8ErrorState = NULL_POINTER;
     fa2:	82 e0       	ldi	r24, 0x02	; 2
     fa4:	8d 83       	std	Y+5, r24	; 0x05
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <ADC_u8StartSingleConvPoll+0x10e>
	}
	else
		Local_u8ErrorState = BUSY_FUNC;
     fa8:	83 e0       	ldi	r24, 0x03	; 3
     faa:	8d 83       	std	Y+5, r24	; 0x05
	return Local_u8ErrorState;
     fac:	8d 81       	ldd	r24, Y+5	; 0x05
}
     fae:	28 96       	adiw	r28, 0x08	; 8
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	08 95       	ret

00000fc0 <ADC_u8StartSingleConvInt>:

u8 ADC_u8StartSingleConvInt(u8 Copy_u8Channel,u16 *Copy_pu16Read,void (*Notifiction)())
{
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	00 d0       	rcall	.+0      	; 0xfc6 <ADC_u8StartSingleConvInt+0x6>
     fc6:	00 d0       	rcall	.+0      	; 0xfc8 <ADC_u8StartSingleConvInt+0x8>
     fc8:	00 d0       	rcall	.+0      	; 0xfca <ADC_u8StartSingleConvInt+0xa>
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	8a 83       	std	Y+2, r24	; 0x02
     fd0:	7c 83       	std	Y+4, r23	; 0x04
     fd2:	6b 83       	std	Y+3, r22	; 0x03
     fd4:	5e 83       	std	Y+6, r21	; 0x06
     fd6:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = OK;
     fd8:	19 82       	std	Y+1, r1	; 0x01
	if(Global_u8BusyFlag==IDLE)
     fda:	80 91 9a 02 	lds	r24, 0x029A
     fde:	88 23       	and	r24, r24
     fe0:	09 f0       	breq	.+2      	; 0xfe4 <ADC_u8StartSingleConvInt+0x24>
     fe2:	40 c0       	rjmp	.+128    	; 0x1064 <ADC_u8StartSingleConvInt+0xa4>
	{
		Global_u8BusyFlag = BUSY;
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	80 93 9a 02 	sts	0x029A, r24
		ADC_u8DirectionOfConvFunc = SINGLE_CONVERISION;
     fea:	10 92 9f 02 	sts	0x029F, r1
		if((Copy_pu16Read != NULL)||(Notifiction != NULL))
     fee:	8b 81       	ldd	r24, Y+3	; 0x03
     ff0:	9c 81       	ldd	r25, Y+4	; 0x04
     ff2:	00 97       	sbiw	r24, 0x00	; 0
     ff4:	21 f4       	brne	.+8      	; 0xffe <ADC_u8StartSingleConvInt+0x3e>
     ff6:	8d 81       	ldd	r24, Y+5	; 0x05
     ff8:	9e 81       	ldd	r25, Y+6	; 0x06
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	81 f1       	breq	.+96     	; 0x105e <ADC_u8StartSingleConvInt+0x9e>
		{

				if(Copy_u8Channel<=MAX_OPTION_CHANNEL)
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	80 32       	cpi	r24, 0x20	; 32
    1002:	50 f5       	brcc	.+84     	; 0x1058 <ADC_u8StartSingleConvInt+0x98>
				{
					ADMUX &= MASK_CHANNEL;
    1004:	a7 e2       	ldi	r26, 0x27	; 39
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e7 e2       	ldi	r30, 0x27	; 39
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	80 7e       	andi	r24, 0xE0	; 224
    1010:	8c 93       	st	X, r24
					ADMUX |= Copy_u8Channel<<ADMUX_MUX0;
    1012:	a7 e2       	ldi	r26, 0x27	; 39
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e7 e2       	ldi	r30, 0x27	; 39
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	90 81       	ld	r25, Z
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	89 2b       	or	r24, r25
    1020:	8c 93       	st	X, r24
					Global_vCallBackFunc = Notifiction;
    1022:	8d 81       	ldd	r24, Y+5	; 0x05
    1024:	9e 81       	ldd	r25, Y+6	; 0x06
    1026:	90 93 9c 02 	sts	0x029C, r25
    102a:	80 93 9b 02 	sts	0x029B, r24
					Global_pu8Read = Copy_pu16Read;
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	9c 81       	ldd	r25, Y+4	; 0x04
    1032:	90 93 9e 02 	sts	0x029E, r25
    1036:	80 93 9d 02 	sts	0x029D, r24
					SET_BIT(ADCSRA,ADCSRA_ADSC);
    103a:	a6 e2       	ldi	r26, 0x26	; 38
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e6 e2       	ldi	r30, 0x26	; 38
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	80 64       	ori	r24, 0x40	; 64
    1046:	8c 93       	st	X, r24
					SET_BIT(ADCSRA,ADCSRA_ADIE);
    1048:	a6 e2       	ldi	r26, 0x26	; 38
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e6 e2       	ldi	r30, 0x26	; 38
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	88 60       	ori	r24, 0x08	; 8
    1054:	8c 93       	st	X, r24
    1056:	08 c0       	rjmp	.+16     	; 0x1068 <ADC_u8StartSingleConvInt+0xa8>
				}
				else
					Local_u8ErrorState = NOTOK;
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	89 83       	std	Y+1, r24	; 0x01
    105c:	05 c0       	rjmp	.+10     	; 0x1068 <ADC_u8StartSingleConvInt+0xa8>
		}
		else
			Local_u8ErrorState = NULL_POINTER;
    105e:	82 e0       	ldi	r24, 0x02	; 2
    1060:	89 83       	std	Y+1, r24	; 0x01
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <ADC_u8StartSingleConvInt+0xa8>
	}
	else
		Local_u8ErrorState = BUSY_FUNC;
    1064:	83 e0       	ldi	r24, 0x03	; 3
    1066:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    1068:	89 81       	ldd	r24, Y+1	; 0x01
}
    106a:	26 96       	adiw	r28, 0x06	; 6
    106c:	0f b6       	in	r0, 0x3f	; 63
    106e:	f8 94       	cli
    1070:	de bf       	out	0x3e, r29	; 62
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	cd bf       	out	0x3d, r28	; 61
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	08 95       	ret

0000107c <ADC_u8StartChainConvAsynch>:
u8 ADC_u8StartChainConvAsynch(ADC_Chain *Copy_Chain)
{
    107c:	df 93       	push	r29
    107e:	cf 93       	push	r28
    1080:	00 d0       	rcall	.+0      	; 0x1082 <ADC_u8StartChainConvAsynch+0x6>
    1082:	0f 92       	push	r0
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	9b 83       	std	Y+3, r25	; 0x03
    108a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    108c:	19 82       	std	Y+1, r1	; 0x01
	if(Global_u8BusyFlag==IDLE)
    108e:	80 91 9a 02 	lds	r24, 0x029A
    1092:	88 23       	and	r24, r24
    1094:	09 f0       	breq	.+2      	; 0x1098 <ADC_u8StartChainConvAsynch+0x1c>
    1096:	74 c0       	rjmp	.+232    	; 0x1180 <ADC_u8StartChainConvAsynch+0x104>
	{
		Global_u8BusyFlag = BUSY;
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	80 93 9a 02 	sts	0x029A, r24
		ADC_u8DirectionOfConvFunc = CHAIN_CONVERISION;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	80 93 9f 02 	sts	0x029F, r24
		if((Copy_Chain->ChainId != NULL)||(Copy_Chain->Notifction != NULL)||(Copy_Chain->Result != NULL))
    10a4:	ea 81       	ldd	r30, Y+2	; 0x02
    10a6:	fb 81       	ldd	r31, Y+3	; 0x03
    10a8:	80 81       	ld	r24, Z
    10aa:	91 81       	ldd	r25, Z+1	; 0x01
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	69 f4       	brne	.+26     	; 0x10ca <ADC_u8StartChainConvAsynch+0x4e>
    10b0:	ea 81       	ldd	r30, Y+2	; 0x02
    10b2:	fb 81       	ldd	r31, Y+3	; 0x03
    10b4:	83 81       	ldd	r24, Z+3	; 0x03
    10b6:	94 81       	ldd	r25, Z+4	; 0x04
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	39 f4       	brne	.+14     	; 0x10ca <ADC_u8StartChainConvAsynch+0x4e>
    10bc:	ea 81       	ldd	r30, Y+2	; 0x02
    10be:	fb 81       	ldd	r31, Y+3	; 0x03
    10c0:	85 81       	ldd	r24, Z+5	; 0x05
    10c2:	96 81       	ldd	r25, Z+6	; 0x06
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	09 f4       	brne	.+2      	; 0x10ca <ADC_u8StartChainConvAsynch+0x4e>
    10c8:	58 c0       	rjmp	.+176    	; 0x117a <ADC_u8StartChainConvAsynch+0xfe>
		{
			if(Copy_Chain->ChainId[ADC_u8ChainIndex]<=MAX_OPTION_CHANNEL)
    10ca:	ea 81       	ldd	r30, Y+2	; 0x02
    10cc:	fb 81       	ldd	r31, Y+3	; 0x03
    10ce:	20 81       	ld	r18, Z
    10d0:	31 81       	ldd	r19, Z+1	; 0x01
    10d2:	80 91 a0 02 	lds	r24, 0x02A0
    10d6:	88 2f       	mov	r24, r24
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	f9 01       	movw	r30, r18
    10dc:	e8 0f       	add	r30, r24
    10de:	f9 1f       	adc	r31, r25
    10e0:	80 81       	ld	r24, Z
    10e2:	80 32       	cpi	r24, 0x20	; 32
    10e4:	08 f0       	brcs	.+2      	; 0x10e8 <ADC_u8StartChainConvAsynch+0x6c>
    10e6:	46 c0       	rjmp	.+140    	; 0x1174 <ADC_u8StartChainConvAsynch+0xf8>
			{
				ADMUX &= MASK_CHANNEL;
    10e8:	a7 e2       	ldi	r26, 0x27	; 39
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e7 e2       	ldi	r30, 0x27	; 39
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	80 7e       	andi	r24, 0xE0	; 224
    10f4:	8c 93       	st	X, r24
				ADMUX |= Copy_Chain->ChainId[ADC_u8ChainIndex]<<ADMUX_MUX0;
    10f6:	a7 e2       	ldi	r26, 0x27	; 39
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e7 e2       	ldi	r30, 0x27	; 39
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	40 81       	ld	r20, Z
    1100:	ea 81       	ldd	r30, Y+2	; 0x02
    1102:	fb 81       	ldd	r31, Y+3	; 0x03
    1104:	20 81       	ld	r18, Z
    1106:	31 81       	ldd	r19, Z+1	; 0x01
    1108:	80 91 a0 02 	lds	r24, 0x02A0
    110c:	88 2f       	mov	r24, r24
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	f9 01       	movw	r30, r18
    1112:	e8 0f       	add	r30, r24
    1114:	f9 1f       	adc	r31, r25
    1116:	80 81       	ld	r24, Z
    1118:	84 2b       	or	r24, r20
    111a:	8c 93       	st	X, r24
				ADC_pu8ChannelNum = Copy_Chain->ChainId;
    111c:	ea 81       	ldd	r30, Y+2	; 0x02
    111e:	fb 81       	ldd	r31, Y+3	; 0x03
    1120:	80 81       	ld	r24, Z
    1122:	91 81       	ldd	r25, Z+1	; 0x01
    1124:	90 93 a2 02 	sts	0x02A2, r25
    1128:	80 93 a1 02 	sts	0x02A1, r24
				Global_vChainCallBackFunc = Copy_Chain->Notifction;
    112c:	ea 81       	ldd	r30, Y+2	; 0x02
    112e:	fb 81       	ldd	r31, Y+3	; 0x03
    1130:	83 81       	ldd	r24, Z+3	; 0x03
    1132:	94 81       	ldd	r25, Z+4	; 0x04
    1134:	90 93 a4 02 	sts	0x02A4, r25
    1138:	80 93 a3 02 	sts	0x02A3, r24
				ADC_pu16ChannelReading = Copy_Chain->Result;
    113c:	ea 81       	ldd	r30, Y+2	; 0x02
    113e:	fb 81       	ldd	r31, Y+3	; 0x03
    1140:	85 81       	ldd	r24, Z+5	; 0x05
    1142:	96 81       	ldd	r25, Z+6	; 0x06
    1144:	90 93 a6 02 	sts	0x02A6, r25
    1148:	80 93 a5 02 	sts	0x02A5, r24
				ADC_u8ChannelSize = Copy_Chain->ChannelSize;
    114c:	ea 81       	ldd	r30, Y+2	; 0x02
    114e:	fb 81       	ldd	r31, Y+3	; 0x03
    1150:	82 81       	ldd	r24, Z+2	; 0x02
    1152:	80 93 a7 02 	sts	0x02A7, r24
				SET_BIT(ADCSRA,ADCSRA_ADSC);
    1156:	a6 e2       	ldi	r26, 0x26	; 38
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e6 e2       	ldi	r30, 0x26	; 38
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	80 64       	ori	r24, 0x40	; 64
    1162:	8c 93       	st	X, r24
				SET_BIT(ADCSRA,ADCSRA_ADIE);
    1164:	a6 e2       	ldi	r26, 0x26	; 38
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e6 e2       	ldi	r30, 0x26	; 38
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	88 60       	ori	r24, 0x08	; 8
    1170:	8c 93       	st	X, r24
    1172:	08 c0       	rjmp	.+16     	; 0x1184 <ADC_u8StartChainConvAsynch+0x108>
			}
			else
				Local_u8ErrorState = NOTOK;
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	89 83       	std	Y+1, r24	; 0x01
    1178:	05 c0       	rjmp	.+10     	; 0x1184 <ADC_u8StartChainConvAsynch+0x108>
		}
		else
			Local_u8ErrorState = NULL_POINTER;
    117a:	82 e0       	ldi	r24, 0x02	; 2
    117c:	89 83       	std	Y+1, r24	; 0x01
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <ADC_u8StartChainConvAsynch+0x108>
	}
	else
		Local_u8ErrorState = BUSY_FUNC;
    1180:	83 e0       	ldi	r24, 0x03	; 3
    1182:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    1184:	89 81       	ldd	r24, Y+1	; 0x01

}
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <__vector_16>:
void __vector_16 (void)	__attribute__((signal));
void __vector_16 (void)
{
    1192:	1f 92       	push	r1
    1194:	0f 92       	push	r0
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	0f 92       	push	r0
    119a:	11 24       	eor	r1, r1
    119c:	2f 93       	push	r18
    119e:	3f 93       	push	r19
    11a0:	4f 93       	push	r20
    11a2:	5f 93       	push	r21
    11a4:	6f 93       	push	r22
    11a6:	7f 93       	push	r23
    11a8:	8f 93       	push	r24
    11aa:	9f 93       	push	r25
    11ac:	af 93       	push	r26
    11ae:	bf 93       	push	r27
    11b0:	ef 93       	push	r30
    11b2:	ff 93       	push	r31
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8DirectionOfConvFunc == SINGLE_CONVERISION)
    11bc:	80 91 9f 02 	lds	r24, 0x029F
    11c0:	88 23       	and	r24, r24
    11c2:	d9 f4       	brne	.+54     	; 0x11fa <__vector_16+0x68>
	{
		if(ADC_ADJUST_BIT == LEFT_ADJUST)
			*Global_pu8Read = ADC_REG>>8;
    11c4:	a0 91 9d 02 	lds	r26, 0x029D
    11c8:	b0 91 9e 02 	lds	r27, 0x029E
    11cc:	e4 e2       	ldi	r30, 0x24	; 36
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	91 81       	ldd	r25, Z+1	; 0x01
    11d4:	89 2f       	mov	r24, r25
    11d6:	99 27       	eor	r25, r25
    11d8:	8d 93       	st	X+, r24
    11da:	9c 93       	st	X, r25
		else if(ADC_ADJUST_BIT == RIGHT_ADJUST)
			*Global_pu8Read = ADC_REG;

		Global_u8BusyFlag = IDLE;
    11dc:	10 92 9a 02 	sts	0x029A, r1

		Global_vCallBackFunc();
    11e0:	e0 91 9b 02 	lds	r30, 0x029B
    11e4:	f0 91 9c 02 	lds	r31, 0x029C
    11e8:	09 95       	icall

		CLR_BIT(ADCSRA,ADCSRA_ADIE);
    11ea:	a6 e2       	ldi	r26, 0x26	; 38
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	e6 e2       	ldi	r30, 0x26	; 38
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	87 7f       	andi	r24, 0xF7	; 247
    11f6:	8c 93       	st	X, r24
    11f8:	51 c0       	rjmp	.+162    	; 0x129c <__vector_16+0x10a>
	}
	else if(ADC_u8DirectionOfConvFunc == CHAIN_CONVERISION)
    11fa:	80 91 9f 02 	lds	r24, 0x029F
    11fe:	81 30       	cpi	r24, 0x01	; 1
    1200:	09 f0       	breq	.+2      	; 0x1204 <__vector_16+0x72>
    1202:	4c c0       	rjmp	.+152    	; 0x129c <__vector_16+0x10a>
	{
		if(ADC_ADJUST_BIT == LEFT_ADJUST)
			ADC_pu16ChannelReading[ADC_u8ChainIndex] = ADC_REG>>8;
    1204:	20 91 a5 02 	lds	r18, 0x02A5
    1208:	30 91 a6 02 	lds	r19, 0x02A6
    120c:	80 91 a0 02 	lds	r24, 0x02A0
    1210:	88 2f       	mov	r24, r24
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	d9 01       	movw	r26, r18
    121a:	a8 0f       	add	r26, r24
    121c:	b9 1f       	adc	r27, r25
    121e:	e4 e2       	ldi	r30, 0x24	; 36
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	91 81       	ldd	r25, Z+1	; 0x01
    1226:	89 2f       	mov	r24, r25
    1228:	99 27       	eor	r25, r25
    122a:	11 96       	adiw	r26, 0x01	; 1
    122c:	9c 93       	st	X, r25
    122e:	8e 93       	st	-X, r24
		else if(ADC_ADJUST_BIT == RIGHT_ADJUST)
			ADC_pu16ChannelReading[ADC_u8ChainIndex] = ADC_REG;

		ADC_u8ChainIndex++;
    1230:	80 91 a0 02 	lds	r24, 0x02A0
    1234:	8f 5f       	subi	r24, 0xFF	; 255
    1236:	80 93 a0 02 	sts	0x02A0, r24
		if(ADC_u8ChainIndex==ADC_u8ChannelSize)
    123a:	90 91 a0 02 	lds	r25, 0x02A0
    123e:	80 91 a7 02 	lds	r24, 0x02A7
    1242:	98 17       	cp	r25, r24
    1244:	51 f4       	brne	.+20     	; 0x125a <__vector_16+0xc8>
		{
			Global_u8BusyFlag = IDLE;
    1246:	10 92 9a 02 	sts	0x029A, r1

			Global_vChainCallBackFunc();
    124a:	e0 91 a3 02 	lds	r30, 0x02A3
    124e:	f0 91 a4 02 	lds	r31, 0x02A4
    1252:	09 95       	icall

			//CLR_BIT(ADCSRA,ADCSRA_ADIE);

			ADC_u8ChainIndex = 0;
    1254:	10 92 a0 02 	sts	0x02A0, r1
    1258:	21 c0       	rjmp	.+66     	; 0x129c <__vector_16+0x10a>
		}
		else
		{
			ADMUX &= MASK_CHANNEL;
    125a:	a7 e2       	ldi	r26, 0x27	; 39
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e7 e2       	ldi	r30, 0x27	; 39
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	80 7e       	andi	r24, 0xE0	; 224
    1266:	8c 93       	st	X, r24
			ADMUX |= ADC_pu8ChannelNum[ADC_u8ChainIndex]<<ADMUX_MUX0;
    1268:	a7 e2       	ldi	r26, 0x27	; 39
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e7 e2       	ldi	r30, 0x27	; 39
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	40 81       	ld	r20, Z
    1272:	20 91 a1 02 	lds	r18, 0x02A1
    1276:	30 91 a2 02 	lds	r19, 0x02A2
    127a:	80 91 a0 02 	lds	r24, 0x02A0
    127e:	88 2f       	mov	r24, r24
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	f9 01       	movw	r30, r18
    1284:	e8 0f       	add	r30, r24
    1286:	f9 1f       	adc	r31, r25
    1288:	80 81       	ld	r24, Z
    128a:	84 2b       	or	r24, r20
    128c:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADSC);
    128e:	a6 e2       	ldi	r26, 0x26	; 38
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	e6 e2       	ldi	r30, 0x26	; 38
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	80 64       	ori	r24, 0x40	; 64
    129a:	8c 93       	st	X, r24
		}

	}
}
    129c:	cf 91       	pop	r28
    129e:	df 91       	pop	r29
    12a0:	ff 91       	pop	r31
    12a2:	ef 91       	pop	r30
    12a4:	bf 91       	pop	r27
    12a6:	af 91       	pop	r26
    12a8:	9f 91       	pop	r25
    12aa:	8f 91       	pop	r24
    12ac:	7f 91       	pop	r23
    12ae:	6f 91       	pop	r22
    12b0:	5f 91       	pop	r21
    12b2:	4f 91       	pop	r20
    12b4:	3f 91       	pop	r19
    12b6:	2f 91       	pop	r18
    12b8:	0f 90       	pop	r0
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	0f 90       	pop	r0
    12be:	1f 90       	pop	r1
    12c0:	18 95       	reti

000012c2 <CLCD_voidSendCommand>:
#include "../HAL/CLCD_interface.h"
#include "../HAL/CLCD_private.h"

static u8 iniIsFinich=0;
void CLCD_voidSendCommand(u8 Copy_u8Command)//math
{
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	ac 97       	sbiw	r28, 0x2c	; 44
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	f8 94       	cli
    12d0:	de bf       	out	0x3e, r29	; 62
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	cd bf       	out	0x3d, r28	; 61
    12d6:	8c a7       	std	Y+44, r24	; 0x2c
	/*PIN SET  send pulse (E) */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_HIGH);
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_LOW);
#elif CLCD_CHIOCE_MODE==_4_BIT_MODE
	u8 Local_u8Mask = 0b11110000;
    12d8:	80 ef       	ldi	r24, 0xF0	; 240
    12da:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_PIN_LOW);
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	40 e0       	ldi	r20, 0x00	; 0
    12e2:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
	/*PIN RW SET LOW  */
//	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_PIN_LOW);
	/*PORT SET COMMAND*/
	Local_u8Mask &= Copy_u8Command;
    12e6:	9b a5       	ldd	r25, Y+43	; 0x2b
    12e8:	8c a5       	ldd	r24, Y+44	; 0x2c
    12ea:	89 23       	and	r24, r25
    12ec:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPortValue(CLCD_DATA_PORT, Local_u8Mask);
    12ee:	82 e0       	ldi	r24, 0x02	; 2
    12f0:	6b a5       	ldd	r22, Y+43	; 0x2b
    12f2:	0e 94 43 11 	call	0x2286	; 0x2286 <DIO_u8SetPortValue>
	/*PIN SET  send pulse (E) */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_HIGH);
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	62 e0       	ldi	r22, 0x02	; 2
    12fa:	41 e0       	ldi	r20, 0x01	; 1
    12fc:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	a0 e0       	ldi	r26, 0x00	; 0
    1306:	b0 e4       	ldi	r27, 0x40	; 64
    1308:	8f a3       	std	Y+39, r24	; 0x27
    130a:	98 a7       	std	Y+40, r25	; 0x28
    130c:	a9 a7       	std	Y+41, r26	; 0x29
    130e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1310:	6f a1       	ldd	r22, Y+39	; 0x27
    1312:	78 a5       	ldd	r23, Y+40	; 0x28
    1314:	89 a5       	ldd	r24, Y+41	; 0x29
    1316:	9a a5       	ldd	r25, Y+42	; 0x2a
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	4a ef       	ldi	r20, 0xFA	; 250
    131e:	54 e4       	ldi	r21, 0x44	; 68
    1320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1324:	dc 01       	movw	r26, r24
    1326:	cb 01       	movw	r24, r22
    1328:	8b a3       	std	Y+35, r24	; 0x23
    132a:	9c a3       	std	Y+36, r25	; 0x24
    132c:	ad a3       	std	Y+37, r26	; 0x25
    132e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1330:	6b a1       	ldd	r22, Y+35	; 0x23
    1332:	7c a1       	ldd	r23, Y+36	; 0x24
    1334:	8d a1       	ldd	r24, Y+37	; 0x25
    1336:	9e a1       	ldd	r25, Y+38	; 0x26
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	40 e8       	ldi	r20, 0x80	; 128
    133e:	5f e3       	ldi	r21, 0x3F	; 63
    1340:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1344:	88 23       	and	r24, r24
    1346:	2c f4       	brge	.+10     	; 0x1352 <CLCD_voidSendCommand+0x90>
		__ticks = 1;
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	9a a3       	std	Y+34, r25	; 0x22
    134e:	89 a3       	std	Y+33, r24	; 0x21
    1350:	3f c0       	rjmp	.+126    	; 0x13d0 <CLCD_voidSendCommand+0x10e>
	else if (__tmp > 65535)
    1352:	6b a1       	ldd	r22, Y+35	; 0x23
    1354:	7c a1       	ldd	r23, Y+36	; 0x24
    1356:	8d a1       	ldd	r24, Y+37	; 0x25
    1358:	9e a1       	ldd	r25, Y+38	; 0x26
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	3f ef       	ldi	r19, 0xFF	; 255
    135e:	4f e7       	ldi	r20, 0x7F	; 127
    1360:	57 e4       	ldi	r21, 0x47	; 71
    1362:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1366:	18 16       	cp	r1, r24
    1368:	4c f5       	brge	.+82     	; 0x13bc <CLCD_voidSendCommand+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    136a:	6f a1       	ldd	r22, Y+39	; 0x27
    136c:	78 a5       	ldd	r23, Y+40	; 0x28
    136e:	89 a5       	ldd	r24, Y+41	; 0x29
    1370:	9a a5       	ldd	r25, Y+42	; 0x2a
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	40 e2       	ldi	r20, 0x20	; 32
    1378:	51 e4       	ldi	r21, 0x41	; 65
    137a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    137e:	dc 01       	movw	r26, r24
    1380:	cb 01       	movw	r24, r22
    1382:	bc 01       	movw	r22, r24
    1384:	cd 01       	movw	r24, r26
    1386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    138a:	dc 01       	movw	r26, r24
    138c:	cb 01       	movw	r24, r22
    138e:	9a a3       	std	Y+34, r25	; 0x22
    1390:	89 a3       	std	Y+33, r24	; 0x21
    1392:	0f c0       	rjmp	.+30     	; 0x13b2 <CLCD_voidSendCommand+0xf0>
    1394:	88 ec       	ldi	r24, 0xC8	; 200
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	98 a3       	std	Y+32, r25	; 0x20
    139a:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    139c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    139e:	98 a1       	ldd	r25, Y+32	; 0x20
    13a0:	01 97       	sbiw	r24, 0x01	; 1
    13a2:	f1 f7       	brne	.-4      	; 0x13a0 <CLCD_voidSendCommand+0xde>
    13a4:	98 a3       	std	Y+32, r25	; 0x20
    13a6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13a8:	89 a1       	ldd	r24, Y+33	; 0x21
    13aa:	9a a1       	ldd	r25, Y+34	; 0x22
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	9a a3       	std	Y+34, r25	; 0x22
    13b0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b2:	89 a1       	ldd	r24, Y+33	; 0x21
    13b4:	9a a1       	ldd	r25, Y+34	; 0x22
    13b6:	00 97       	sbiw	r24, 0x00	; 0
    13b8:	69 f7       	brne	.-38     	; 0x1394 <CLCD_voidSendCommand+0xd2>
    13ba:	14 c0       	rjmp	.+40     	; 0x13e4 <CLCD_voidSendCommand+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13bc:	6b a1       	ldd	r22, Y+35	; 0x23
    13be:	7c a1       	ldd	r23, Y+36	; 0x24
    13c0:	8d a1       	ldd	r24, Y+37	; 0x25
    13c2:	9e a1       	ldd	r25, Y+38	; 0x26
    13c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c8:	dc 01       	movw	r26, r24
    13ca:	cb 01       	movw	r24, r22
    13cc:	9a a3       	std	Y+34, r25	; 0x22
    13ce:	89 a3       	std	Y+33, r24	; 0x21
    13d0:	89 a1       	ldd	r24, Y+33	; 0x21
    13d2:	9a a1       	ldd	r25, Y+34	; 0x22
    13d4:	9e 8f       	std	Y+30, r25	; 0x1e
    13d6:	8d 8f       	std	Y+29, r24	; 0x1d
    13d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	f1 f7       	brne	.-4      	; 0x13dc <CLCD_voidSendCommand+0x11a>
    13e0:	9e 8f       	std	Y+30, r25	; 0x1e
    13e2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	62 e0       	ldi	r22, 0x02	; 2
    13e8:	40 e0       	ldi	r20, 0x00	; 0
    13ea:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
	if(iniIsFinich)
    13ee:	80 91 a8 02 	lds	r24, 0x02A8
    13f2:	88 23       	and	r24, r24
    13f4:	09 f4       	brne	.+2      	; 0x13f8 <CLCD_voidSendCommand+0x136>
    13f6:	8c c0       	rjmp	.+280    	; 0x1510 <CLCD_voidSendCommand+0x24e>
	{
		Local_u8Mask = 0b11110000;
    13f8:	80 ef       	ldi	r24, 0xF0	; 240
    13fa:	8b a7       	std	Y+43, r24	; 0x2b
		Local_u8Mask = ~(Local_u8Mask) & Copy_u8Command;
    13fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    13fe:	98 2f       	mov	r25, r24
    1400:	90 95       	com	r25
    1402:	8c a5       	ldd	r24, Y+44	; 0x2c
    1404:	89 23       	and	r24, r25
    1406:	8b a7       	std	Y+43, r24	; 0x2b
		DIO_u8SetPortValue(CLCD_DATA_PORT, (Local_u8Mask << 4));
    1408:	8b a5       	ldd	r24, Y+43	; 0x2b
    140a:	98 2f       	mov	r25, r24
    140c:	92 95       	swap	r25
    140e:	90 7f       	andi	r25, 0xF0	; 240
    1410:	82 e0       	ldi	r24, 0x02	; 2
    1412:	69 2f       	mov	r22, r25
    1414:	0e 94 43 11 	call	0x2286	; 0x2286 <DIO_u8SetPortValue>
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_HIGH);
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	62 e0       	ldi	r22, 0x02	; 2
    141c:	41 e0       	ldi	r20, 0x01	; 1
    141e:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	a0 e0       	ldi	r26, 0x00	; 0
    1428:	b0 e4       	ldi	r27, 0x40	; 64
    142a:	89 8f       	std	Y+25, r24	; 0x19
    142c:	9a 8f       	std	Y+26, r25	; 0x1a
    142e:	ab 8f       	std	Y+27, r26	; 0x1b
    1430:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1432:	69 8d       	ldd	r22, Y+25	; 0x19
    1434:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1436:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1438:	9c 8d       	ldd	r25, Y+28	; 0x1c
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	4a ef       	ldi	r20, 0xFA	; 250
    1440:	54 e4       	ldi	r21, 0x44	; 68
    1442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	8d 8b       	std	Y+21, r24	; 0x15
    144c:	9e 8b       	std	Y+22, r25	; 0x16
    144e:	af 8b       	std	Y+23, r26	; 0x17
    1450:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1452:	6d 89       	ldd	r22, Y+21	; 0x15
    1454:	7e 89       	ldd	r23, Y+22	; 0x16
    1456:	8f 89       	ldd	r24, Y+23	; 0x17
    1458:	98 8d       	ldd	r25, Y+24	; 0x18
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	40 e8       	ldi	r20, 0x80	; 128
    1460:	5f e3       	ldi	r21, 0x3F	; 63
    1462:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1466:	88 23       	and	r24, r24
    1468:	2c f4       	brge	.+10     	; 0x1474 <CLCD_voidSendCommand+0x1b2>
		__ticks = 1;
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	9c 8b       	std	Y+20, r25	; 0x14
    1470:	8b 8b       	std	Y+19, r24	; 0x13
    1472:	3f c0       	rjmp	.+126    	; 0x14f2 <CLCD_voidSendCommand+0x230>
	else if (__tmp > 65535)
    1474:	6d 89       	ldd	r22, Y+21	; 0x15
    1476:	7e 89       	ldd	r23, Y+22	; 0x16
    1478:	8f 89       	ldd	r24, Y+23	; 0x17
    147a:	98 8d       	ldd	r25, Y+24	; 0x18
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	3f ef       	ldi	r19, 0xFF	; 255
    1480:	4f e7       	ldi	r20, 0x7F	; 127
    1482:	57 e4       	ldi	r21, 0x47	; 71
    1484:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1488:	18 16       	cp	r1, r24
    148a:	4c f5       	brge	.+82     	; 0x14de <CLCD_voidSendCommand+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    148c:	69 8d       	ldd	r22, Y+25	; 0x19
    148e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1490:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1492:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 e2       	ldi	r20, 0x20	; 32
    149a:	51 e4       	ldi	r21, 0x41	; 65
    149c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	bc 01       	movw	r22, r24
    14a6:	cd 01       	movw	r24, r26
    14a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	9c 8b       	std	Y+20, r25	; 0x14
    14b2:	8b 8b       	std	Y+19, r24	; 0x13
    14b4:	0f c0       	rjmp	.+30     	; 0x14d4 <CLCD_voidSendCommand+0x212>
    14b6:	88 ec       	ldi	r24, 0xC8	; 200
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	9a 8b       	std	Y+18, r25	; 0x12
    14bc:	89 8b       	std	Y+17, r24	; 0x11
    14be:	89 89       	ldd	r24, Y+17	; 0x11
    14c0:	9a 89       	ldd	r25, Y+18	; 0x12
    14c2:	01 97       	sbiw	r24, 0x01	; 1
    14c4:	f1 f7       	brne	.-4      	; 0x14c2 <CLCD_voidSendCommand+0x200>
    14c6:	9a 8b       	std	Y+18, r25	; 0x12
    14c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ca:	8b 89       	ldd	r24, Y+19	; 0x13
    14cc:	9c 89       	ldd	r25, Y+20	; 0x14
    14ce:	01 97       	sbiw	r24, 0x01	; 1
    14d0:	9c 8b       	std	Y+20, r25	; 0x14
    14d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d4:	8b 89       	ldd	r24, Y+19	; 0x13
    14d6:	9c 89       	ldd	r25, Y+20	; 0x14
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	69 f7       	brne	.-38     	; 0x14b6 <CLCD_voidSendCommand+0x1f4>
    14dc:	14 c0       	rjmp	.+40     	; 0x1506 <CLCD_voidSendCommand+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14de:	6d 89       	ldd	r22, Y+21	; 0x15
    14e0:	7e 89       	ldd	r23, Y+22	; 0x16
    14e2:	8f 89       	ldd	r24, Y+23	; 0x17
    14e4:	98 8d       	ldd	r25, Y+24	; 0x18
    14e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	9c 8b       	std	Y+20, r25	; 0x14
    14f0:	8b 8b       	std	Y+19, r24	; 0x13
    14f2:	8b 89       	ldd	r24, Y+19	; 0x13
    14f4:	9c 89       	ldd	r25, Y+20	; 0x14
    14f6:	98 8b       	std	Y+16, r25	; 0x10
    14f8:	8f 87       	std	Y+15, r24	; 0x0f
    14fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    14fc:	98 89       	ldd	r25, Y+16	; 0x10
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    1500:	f1 f7       	brne	.-4      	; 0x14fe <CLCD_voidSendCommand+0x23c>
    1502:	98 8b       	std	Y+16, r25	; 0x10
    1504:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	62 e0       	ldi	r22, 0x02	; 2
    150a:	40 e0       	ldi	r20, 0x00	; 0
    150c:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	a0 e0       	ldi	r26, 0x00	; 0
    1516:	b0 e4       	ldi	r27, 0x40	; 64
    1518:	8b 87       	std	Y+11, r24	; 0x0b
    151a:	9c 87       	std	Y+12, r25	; 0x0c
    151c:	ad 87       	std	Y+13, r26	; 0x0d
    151e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1520:	6b 85       	ldd	r22, Y+11	; 0x0b
    1522:	7c 85       	ldd	r23, Y+12	; 0x0c
    1524:	8d 85       	ldd	r24, Y+13	; 0x0d
    1526:	9e 85       	ldd	r25, Y+14	; 0x0e
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	4a ef       	ldi	r20, 0xFA	; 250
    152e:	54 e4       	ldi	r21, 0x44	; 68
    1530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	8f 83       	std	Y+7, r24	; 0x07
    153a:	98 87       	std	Y+8, r25	; 0x08
    153c:	a9 87       	std	Y+9, r26	; 0x09
    153e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1540:	6f 81       	ldd	r22, Y+7	; 0x07
    1542:	78 85       	ldd	r23, Y+8	; 0x08
    1544:	89 85       	ldd	r24, Y+9	; 0x09
    1546:	9a 85       	ldd	r25, Y+10	; 0x0a
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	40 e8       	ldi	r20, 0x80	; 128
    154e:	5f e3       	ldi	r21, 0x3F	; 63
    1550:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1554:	88 23       	and	r24, r24
    1556:	2c f4       	brge	.+10     	; 0x1562 <CLCD_voidSendCommand+0x2a0>
		__ticks = 1;
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	9e 83       	std	Y+6, r25	; 0x06
    155e:	8d 83       	std	Y+5, r24	; 0x05
    1560:	3f c0       	rjmp	.+126    	; 0x15e0 <CLCD_voidSendCommand+0x31e>
	else if (__tmp > 65535)
    1562:	6f 81       	ldd	r22, Y+7	; 0x07
    1564:	78 85       	ldd	r23, Y+8	; 0x08
    1566:	89 85       	ldd	r24, Y+9	; 0x09
    1568:	9a 85       	ldd	r25, Y+10	; 0x0a
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	3f ef       	ldi	r19, 0xFF	; 255
    156e:	4f e7       	ldi	r20, 0x7F	; 127
    1570:	57 e4       	ldi	r21, 0x47	; 71
    1572:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1576:	18 16       	cp	r1, r24
    1578:	4c f5       	brge	.+82     	; 0x15cc <CLCD_voidSendCommand+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    157a:	6b 85       	ldd	r22, Y+11	; 0x0b
    157c:	7c 85       	ldd	r23, Y+12	; 0x0c
    157e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1580:	9e 85       	ldd	r25, Y+14	; 0x0e
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	40 e2       	ldi	r20, 0x20	; 32
    1588:	51 e4       	ldi	r21, 0x41	; 65
    158a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	bc 01       	movw	r22, r24
    1594:	cd 01       	movw	r24, r26
    1596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	9e 83       	std	Y+6, r25	; 0x06
    15a0:	8d 83       	std	Y+5, r24	; 0x05
    15a2:	0f c0       	rjmp	.+30     	; 0x15c2 <CLCD_voidSendCommand+0x300>
    15a4:	88 ec       	ldi	r24, 0xC8	; 200
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	9c 83       	std	Y+4, r25	; 0x04
    15aa:	8b 83       	std	Y+3, r24	; 0x03
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	9c 81       	ldd	r25, Y+4	; 0x04
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	f1 f7       	brne	.-4      	; 0x15b0 <CLCD_voidSendCommand+0x2ee>
    15b4:	9c 83       	std	Y+4, r25	; 0x04
    15b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ba:	9e 81       	ldd	r25, Y+6	; 0x06
    15bc:	01 97       	sbiw	r24, 0x01	; 1
    15be:	9e 83       	std	Y+6, r25	; 0x06
    15c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c2:	8d 81       	ldd	r24, Y+5	; 0x05
    15c4:	9e 81       	ldd	r25, Y+6	; 0x06
    15c6:	00 97       	sbiw	r24, 0x00	; 0
    15c8:	69 f7       	brne	.-38     	; 0x15a4 <CLCD_voidSendCommand+0x2e2>
    15ca:	14 c0       	rjmp	.+40     	; 0x15f4 <CLCD_voidSendCommand+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15cc:	6f 81       	ldd	r22, Y+7	; 0x07
    15ce:	78 85       	ldd	r23, Y+8	; 0x08
    15d0:	89 85       	ldd	r24, Y+9	; 0x09
    15d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	9e 83       	std	Y+6, r25	; 0x06
    15de:	8d 83       	std	Y+5, r24	; 0x05
    15e0:	8d 81       	ldd	r24, Y+5	; 0x05
    15e2:	9e 81       	ldd	r25, Y+6	; 0x06
    15e4:	9a 83       	std	Y+2, r25	; 0x02
    15e6:	89 83       	std	Y+1, r24	; 0x01
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	9a 81       	ldd	r25, Y+2	; 0x02
    15ec:	01 97       	sbiw	r24, 0x01	; 1
    15ee:	f1 f7       	brne	.-4      	; 0x15ec <CLCD_voidSendCommand+0x32a>
    15f0:	9a 83       	std	Y+2, r25	; 0x02
    15f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
#else
#error "In correct cconfigrtion of LCD_MODE"
#endif

}
    15f4:	ac 96       	adiw	r28, 0x2c	; 44
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	de bf       	out	0x3e, r29	; 62
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	cd bf       	out	0x3d, r28	; 61
    1600:	cf 91       	pop	r28
    1602:	df 91       	pop	r29
    1604:	08 95       	ret

00001606 <CLCD_Read_BF_AC>:
u8 CLCD_Read_BF_AC() {
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	00 d0       	rcall	.+0      	; 0x160c <CLCD_Read_BF_AC+0x6>
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Address = 0;
    1610:	1a 82       	std	Y+2, r1	; 0x02
	/*PIN RS SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_PIN_LOW);
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	60 e0       	ldi	r22, 0x00	; 0
    1616:	40 e0       	ldi	r20, 0x00	; 0
    1618:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
	/*PIN RW SET HIGH  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_PIN_HIGH);
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	61 e0       	ldi	r22, 0x01	; 1
    1620:	41 e0       	ldi	r20, 0x01	; 1
    1622:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
	/*PIN SET  send pulse (E) */
	for (u8 i = 0; i < 7; i++) {
    1626:	19 82       	std	Y+1, r1	; 0x01
    1628:	1c c0       	rjmp	.+56     	; 0x1662 <CLCD_Read_BF_AC+0x5c>
		DIO_u8GetPinValue(CLCD_DATA_PORT, i, &Local_u8Address);
    162a:	9e 01       	movw	r18, r28
    162c:	2e 5f       	subi	r18, 0xFE	; 254
    162e:	3f 4f       	sbci	r19, 0xFF	; 255
    1630:	82 e0       	ldi	r24, 0x02	; 2
    1632:	69 81       	ldd	r22, Y+1	; 0x01
    1634:	a9 01       	movw	r20, r18
    1636:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8GetPinValue>
		Local_u8Address += Local_u8Address << i;
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	28 2f       	mov	r18, r24
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	88 2f       	mov	r24, r24
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	a9 01       	movw	r20, r18
    1648:	02 c0       	rjmp	.+4      	; 0x164e <CLCD_Read_BF_AC+0x48>
    164a:	44 0f       	add	r20, r20
    164c:	55 1f       	adc	r21, r21
    164e:	8a 95       	dec	r24
    1650:	e2 f7       	brpl	.-8      	; 0x164a <CLCD_Read_BF_AC+0x44>
    1652:	ca 01       	movw	r24, r20
    1654:	98 2f       	mov	r25, r24
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	89 0f       	add	r24, r25
    165a:	8a 83       	std	Y+2, r24	; 0x02
	/*PIN RS SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_PIN_LOW);
	/*PIN RW SET HIGH  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_PIN_HIGH);
	/*PIN SET  send pulse (E) */
	for (u8 i = 0; i < 7; i++) {
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	8f 5f       	subi	r24, 0xFF	; 255
    1660:	89 83       	std	Y+1, r24	; 0x01
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	87 30       	cpi	r24, 0x07	; 7
    1666:	08 f3       	brcs	.-62     	; 0x162a <CLCD_Read_BF_AC+0x24>
		DIO_u8GetPinValue(CLCD_DATA_PORT, i, &Local_u8Address);
		Local_u8Address += Local_u8Address << i;
	}
	return Local_u8Address;
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
}
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	08 95       	ret

00001674 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	ac 97       	sbiw	r28, 0x2c	; 44
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	de bf       	out	0x3e, r29	; 62
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	cd bf       	out	0x3d, r28	; 61
    1688:	8c a7       	std	Y+44, r24	; 0x2c
	if (Local_u8Address > 0x0f)
		CLCD_voidSendCommand(0x0C);
	else
		CLCD_voidSendCommand(0x06);
#elif CLCD_CHIOCE_MODE==_4_BIT_MODE
	u8 Local_u8Mask = 0b11110000;
    168a:	80 ef       	ldi	r24, 0xF0	; 240
    168c:	8b a7       	std	Y+43, r24	; 0x2b
	/*PIN RS SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_PIN_HIGH);
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	60 e0       	ldi	r22, 0x00	; 0
    1692:	41 e0       	ldi	r20, 0x01	; 1
    1694:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
	/*PIN RW SET LOW  */
	//DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_PIN_LOW);
	/*PORT SET COMMAND*/
	Local_u8Mask &= Copy_u8Data;
    1698:	9b a5       	ldd	r25, Y+43	; 0x2b
    169a:	8c a5       	ldd	r24, Y+44	; 0x2c
    169c:	89 23       	and	r24, r25
    169e:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Mask);
    16a0:	82 e0       	ldi	r24, 0x02	; 2
    16a2:	6b a5       	ldd	r22, Y+43	; 0x2b
    16a4:	0e 94 43 11 	call	0x2286	; 0x2286 <DIO_u8SetPortValue>
	/*PIN SET send pulse (E) */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_HIGH);
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	62 e0       	ldi	r22, 0x02	; 2
    16ac:	41 e0       	ldi	r20, 0x01	; 1
    16ae:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	a0 e0       	ldi	r26, 0x00	; 0
    16b8:	b0 e4       	ldi	r27, 0x40	; 64
    16ba:	8f a3       	std	Y+39, r24	; 0x27
    16bc:	98 a7       	std	Y+40, r25	; 0x28
    16be:	a9 a7       	std	Y+41, r26	; 0x29
    16c0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16c2:	6f a1       	ldd	r22, Y+39	; 0x27
    16c4:	78 a5       	ldd	r23, Y+40	; 0x28
    16c6:	89 a5       	ldd	r24, Y+41	; 0x29
    16c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	4a ef       	ldi	r20, 0xFA	; 250
    16d0:	54 e4       	ldi	r21, 0x44	; 68
    16d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d6:	dc 01       	movw	r26, r24
    16d8:	cb 01       	movw	r24, r22
    16da:	8b a3       	std	Y+35, r24	; 0x23
    16dc:	9c a3       	std	Y+36, r25	; 0x24
    16de:	ad a3       	std	Y+37, r26	; 0x25
    16e0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16e2:	6b a1       	ldd	r22, Y+35	; 0x23
    16e4:	7c a1       	ldd	r23, Y+36	; 0x24
    16e6:	8d a1       	ldd	r24, Y+37	; 0x25
    16e8:	9e a1       	ldd	r25, Y+38	; 0x26
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	40 e8       	ldi	r20, 0x80	; 128
    16f0:	5f e3       	ldi	r21, 0x3F	; 63
    16f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16f6:	88 23       	and	r24, r24
    16f8:	2c f4       	brge	.+10     	; 0x1704 <CLCD_voidSendData+0x90>
		__ticks = 1;
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	9a a3       	std	Y+34, r25	; 0x22
    1700:	89 a3       	std	Y+33, r24	; 0x21
    1702:	3f c0       	rjmp	.+126    	; 0x1782 <CLCD_voidSendData+0x10e>
	else if (__tmp > 65535)
    1704:	6b a1       	ldd	r22, Y+35	; 0x23
    1706:	7c a1       	ldd	r23, Y+36	; 0x24
    1708:	8d a1       	ldd	r24, Y+37	; 0x25
    170a:	9e a1       	ldd	r25, Y+38	; 0x26
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	3f ef       	ldi	r19, 0xFF	; 255
    1710:	4f e7       	ldi	r20, 0x7F	; 127
    1712:	57 e4       	ldi	r21, 0x47	; 71
    1714:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1718:	18 16       	cp	r1, r24
    171a:	4c f5       	brge	.+82     	; 0x176e <CLCD_voidSendData+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    171c:	6f a1       	ldd	r22, Y+39	; 0x27
    171e:	78 a5       	ldd	r23, Y+40	; 0x28
    1720:	89 a5       	ldd	r24, Y+41	; 0x29
    1722:	9a a5       	ldd	r25, Y+42	; 0x2a
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	40 e2       	ldi	r20, 0x20	; 32
    172a:	51 e4       	ldi	r21, 0x41	; 65
    172c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	bc 01       	movw	r22, r24
    1736:	cd 01       	movw	r24, r26
    1738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	9a a3       	std	Y+34, r25	; 0x22
    1742:	89 a3       	std	Y+33, r24	; 0x21
    1744:	0f c0       	rjmp	.+30     	; 0x1764 <CLCD_voidSendData+0xf0>
    1746:	88 ec       	ldi	r24, 0xC8	; 200
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	98 a3       	std	Y+32, r25	; 0x20
    174c:	8f 8f       	std	Y+31, r24	; 0x1f
    174e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1750:	98 a1       	ldd	r25, Y+32	; 0x20
    1752:	01 97       	sbiw	r24, 0x01	; 1
    1754:	f1 f7       	brne	.-4      	; 0x1752 <CLCD_voidSendData+0xde>
    1756:	98 a3       	std	Y+32, r25	; 0x20
    1758:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    175a:	89 a1       	ldd	r24, Y+33	; 0x21
    175c:	9a a1       	ldd	r25, Y+34	; 0x22
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	9a a3       	std	Y+34, r25	; 0x22
    1762:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1764:	89 a1       	ldd	r24, Y+33	; 0x21
    1766:	9a a1       	ldd	r25, Y+34	; 0x22
    1768:	00 97       	sbiw	r24, 0x00	; 0
    176a:	69 f7       	brne	.-38     	; 0x1746 <CLCD_voidSendData+0xd2>
    176c:	14 c0       	rjmp	.+40     	; 0x1796 <CLCD_voidSendData+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    176e:	6b a1       	ldd	r22, Y+35	; 0x23
    1770:	7c a1       	ldd	r23, Y+36	; 0x24
    1772:	8d a1       	ldd	r24, Y+37	; 0x25
    1774:	9e a1       	ldd	r25, Y+38	; 0x26
    1776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	9a a3       	std	Y+34, r25	; 0x22
    1780:	89 a3       	std	Y+33, r24	; 0x21
    1782:	89 a1       	ldd	r24, Y+33	; 0x21
    1784:	9a a1       	ldd	r25, Y+34	; 0x22
    1786:	9e 8f       	std	Y+30, r25	; 0x1e
    1788:	8d 8f       	std	Y+29, r24	; 0x1d
    178a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    178c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    178e:	01 97       	sbiw	r24, 0x01	; 1
    1790:	f1 f7       	brne	.-4      	; 0x178e <CLCD_voidSendData+0x11a>
    1792:	9e 8f       	std	Y+30, r25	; 0x1e
    1794:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	62 e0       	ldi	r22, 0x02	; 2
    179a:	40 e0       	ldi	r20, 0x00	; 0
    179c:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
	Local_u8Mask=0b11110000;
    17a0:	80 ef       	ldi	r24, 0xF0	; 240
    17a2:	8b a7       	std	Y+43, r24	; 0x2b
	Local_u8Mask = ~(Local_u8Mask) & Copy_u8Data;
    17a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    17a6:	98 2f       	mov	r25, r24
    17a8:	90 95       	com	r25
    17aa:	8c a5       	ldd	r24, Y+44	; 0x2c
    17ac:	89 23       	and	r24, r25
    17ae:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPortValue(CLCD_DATA_PORT, (Local_u8Mask << 4));
    17b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    17b2:	98 2f       	mov	r25, r24
    17b4:	92 95       	swap	r25
    17b6:	90 7f       	andi	r25, 0xF0	; 240
    17b8:	82 e0       	ldi	r24, 0x02	; 2
    17ba:	69 2f       	mov	r22, r25
    17bc:	0e 94 43 11 	call	0x2286	; 0x2286 <DIO_u8SetPortValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_HIGH);
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	62 e0       	ldi	r22, 0x02	; 2
    17c4:	41 e0       	ldi	r20, 0x01	; 1
    17c6:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	a0 e0       	ldi	r26, 0x00	; 0
    17d0:	b0 e4       	ldi	r27, 0x40	; 64
    17d2:	89 8f       	std	Y+25, r24	; 0x19
    17d4:	9a 8f       	std	Y+26, r25	; 0x1a
    17d6:	ab 8f       	std	Y+27, r26	; 0x1b
    17d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17da:	69 8d       	ldd	r22, Y+25	; 0x19
    17dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	4a ef       	ldi	r20, 0xFA	; 250
    17e8:	54 e4       	ldi	r21, 0x44	; 68
    17ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	8d 8b       	std	Y+21, r24	; 0x15
    17f4:	9e 8b       	std	Y+22, r25	; 0x16
    17f6:	af 8b       	std	Y+23, r26	; 0x17
    17f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17fa:	6d 89       	ldd	r22, Y+21	; 0x15
    17fc:	7e 89       	ldd	r23, Y+22	; 0x16
    17fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1800:	98 8d       	ldd	r25, Y+24	; 0x18
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	40 e8       	ldi	r20, 0x80	; 128
    1808:	5f e3       	ldi	r21, 0x3F	; 63
    180a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    180e:	88 23       	and	r24, r24
    1810:	2c f4       	brge	.+10     	; 0x181c <CLCD_voidSendData+0x1a8>
		__ticks = 1;
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	9c 8b       	std	Y+20, r25	; 0x14
    1818:	8b 8b       	std	Y+19, r24	; 0x13
    181a:	3f c0       	rjmp	.+126    	; 0x189a <CLCD_voidSendData+0x226>
	else if (__tmp > 65535)
    181c:	6d 89       	ldd	r22, Y+21	; 0x15
    181e:	7e 89       	ldd	r23, Y+22	; 0x16
    1820:	8f 89       	ldd	r24, Y+23	; 0x17
    1822:	98 8d       	ldd	r25, Y+24	; 0x18
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	3f ef       	ldi	r19, 0xFF	; 255
    1828:	4f e7       	ldi	r20, 0x7F	; 127
    182a:	57 e4       	ldi	r21, 0x47	; 71
    182c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1830:	18 16       	cp	r1, r24
    1832:	4c f5       	brge	.+82     	; 0x1886 <CLCD_voidSendData+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1834:	69 8d       	ldd	r22, Y+25	; 0x19
    1836:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1838:	8b 8d       	ldd	r24, Y+27	; 0x1b
    183a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	40 e2       	ldi	r20, 0x20	; 32
    1842:	51 e4       	ldi	r21, 0x41	; 65
    1844:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1848:	dc 01       	movw	r26, r24
    184a:	cb 01       	movw	r24, r22
    184c:	bc 01       	movw	r22, r24
    184e:	cd 01       	movw	r24, r26
    1850:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	9c 8b       	std	Y+20, r25	; 0x14
    185a:	8b 8b       	std	Y+19, r24	; 0x13
    185c:	0f c0       	rjmp	.+30     	; 0x187c <CLCD_voidSendData+0x208>
    185e:	88 ec       	ldi	r24, 0xC8	; 200
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	9a 8b       	std	Y+18, r25	; 0x12
    1864:	89 8b       	std	Y+17, r24	; 0x11
    1866:	89 89       	ldd	r24, Y+17	; 0x11
    1868:	9a 89       	ldd	r25, Y+18	; 0x12
    186a:	01 97       	sbiw	r24, 0x01	; 1
    186c:	f1 f7       	brne	.-4      	; 0x186a <CLCD_voidSendData+0x1f6>
    186e:	9a 8b       	std	Y+18, r25	; 0x12
    1870:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1872:	8b 89       	ldd	r24, Y+19	; 0x13
    1874:	9c 89       	ldd	r25, Y+20	; 0x14
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	9c 8b       	std	Y+20, r25	; 0x14
    187a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    187c:	8b 89       	ldd	r24, Y+19	; 0x13
    187e:	9c 89       	ldd	r25, Y+20	; 0x14
    1880:	00 97       	sbiw	r24, 0x00	; 0
    1882:	69 f7       	brne	.-38     	; 0x185e <CLCD_voidSendData+0x1ea>
    1884:	14 c0       	rjmp	.+40     	; 0x18ae <CLCD_voidSendData+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1886:	6d 89       	ldd	r22, Y+21	; 0x15
    1888:	7e 89       	ldd	r23, Y+22	; 0x16
    188a:	8f 89       	ldd	r24, Y+23	; 0x17
    188c:	98 8d       	ldd	r25, Y+24	; 0x18
    188e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	9c 8b       	std	Y+20, r25	; 0x14
    1898:	8b 8b       	std	Y+19, r24	; 0x13
    189a:	8b 89       	ldd	r24, Y+19	; 0x13
    189c:	9c 89       	ldd	r25, Y+20	; 0x14
    189e:	98 8b       	std	Y+16, r25	; 0x10
    18a0:	8f 87       	std	Y+15, r24	; 0x0f
    18a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    18a4:	98 89       	ldd	r25, Y+16	; 0x10
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	f1 f7       	brne	.-4      	; 0x18a6 <CLCD_voidSendData+0x232>
    18aa:	98 8b       	std	Y+16, r25	; 0x10
    18ac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	62 e0       	ldi	r22, 0x02	; 2
    18b2:	40 e0       	ldi	r20, 0x00	; 0
    18b4:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	a0 e0       	ldi	r26, 0x00	; 0
    18be:	b0 e4       	ldi	r27, 0x40	; 64
    18c0:	8b 87       	std	Y+11, r24	; 0x0b
    18c2:	9c 87       	std	Y+12, r25	; 0x0c
    18c4:	ad 87       	std	Y+13, r26	; 0x0d
    18c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    18cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	4a ef       	ldi	r20, 0xFA	; 250
    18d6:	54 e4       	ldi	r21, 0x44	; 68
    18d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	8f 83       	std	Y+7, r24	; 0x07
    18e2:	98 87       	std	Y+8, r25	; 0x08
    18e4:	a9 87       	std	Y+9, r26	; 0x09
    18e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18e8:	6f 81       	ldd	r22, Y+7	; 0x07
    18ea:	78 85       	ldd	r23, Y+8	; 0x08
    18ec:	89 85       	ldd	r24, Y+9	; 0x09
    18ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	40 e8       	ldi	r20, 0x80	; 128
    18f6:	5f e3       	ldi	r21, 0x3F	; 63
    18f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18fc:	88 23       	and	r24, r24
    18fe:	2c f4       	brge	.+10     	; 0x190a <CLCD_voidSendData+0x296>
		__ticks = 1;
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	9e 83       	std	Y+6, r25	; 0x06
    1906:	8d 83       	std	Y+5, r24	; 0x05
    1908:	3f c0       	rjmp	.+126    	; 0x1988 <CLCD_voidSendData+0x314>
	else if (__tmp > 65535)
    190a:	6f 81       	ldd	r22, Y+7	; 0x07
    190c:	78 85       	ldd	r23, Y+8	; 0x08
    190e:	89 85       	ldd	r24, Y+9	; 0x09
    1910:	9a 85       	ldd	r25, Y+10	; 0x0a
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	3f ef       	ldi	r19, 0xFF	; 255
    1916:	4f e7       	ldi	r20, 0x7F	; 127
    1918:	57 e4       	ldi	r21, 0x47	; 71
    191a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    191e:	18 16       	cp	r1, r24
    1920:	4c f5       	brge	.+82     	; 0x1974 <CLCD_voidSendData+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1922:	6b 85       	ldd	r22, Y+11	; 0x0b
    1924:	7c 85       	ldd	r23, Y+12	; 0x0c
    1926:	8d 85       	ldd	r24, Y+13	; 0x0d
    1928:	9e 85       	ldd	r25, Y+14	; 0x0e
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	40 e2       	ldi	r20, 0x20	; 32
    1930:	51 e4       	ldi	r21, 0x41	; 65
    1932:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	bc 01       	movw	r22, r24
    193c:	cd 01       	movw	r24, r26
    193e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	9e 83       	std	Y+6, r25	; 0x06
    1948:	8d 83       	std	Y+5, r24	; 0x05
    194a:	0f c0       	rjmp	.+30     	; 0x196a <CLCD_voidSendData+0x2f6>
    194c:	88 ec       	ldi	r24, 0xC8	; 200
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	9c 83       	std	Y+4, r25	; 0x04
    1952:	8b 83       	std	Y+3, r24	; 0x03
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	9c 81       	ldd	r25, Y+4	; 0x04
    1958:	01 97       	sbiw	r24, 0x01	; 1
    195a:	f1 f7       	brne	.-4      	; 0x1958 <CLCD_voidSendData+0x2e4>
    195c:	9c 83       	std	Y+4, r25	; 0x04
    195e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1960:	8d 81       	ldd	r24, Y+5	; 0x05
    1962:	9e 81       	ldd	r25, Y+6	; 0x06
    1964:	01 97       	sbiw	r24, 0x01	; 1
    1966:	9e 83       	std	Y+6, r25	; 0x06
    1968:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    196a:	8d 81       	ldd	r24, Y+5	; 0x05
    196c:	9e 81       	ldd	r25, Y+6	; 0x06
    196e:	00 97       	sbiw	r24, 0x00	; 0
    1970:	69 f7       	brne	.-38     	; 0x194c <CLCD_voidSendData+0x2d8>
    1972:	14 c0       	rjmp	.+40     	; 0x199c <CLCD_voidSendData+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1974:	6f 81       	ldd	r22, Y+7	; 0x07
    1976:	78 85       	ldd	r23, Y+8	; 0x08
    1978:	89 85       	ldd	r24, Y+9	; 0x09
    197a:	9a 85       	ldd	r25, Y+10	; 0x0a
    197c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	9e 83       	std	Y+6, r25	; 0x06
    1986:	8d 83       	std	Y+5, r24	; 0x05
    1988:	8d 81       	ldd	r24, Y+5	; 0x05
    198a:	9e 81       	ldd	r25, Y+6	; 0x06
    198c:	9a 83       	std	Y+2, r25	; 0x02
    198e:	89 83       	std	Y+1, r24	; 0x01
    1990:	89 81       	ldd	r24, Y+1	; 0x01
    1992:	9a 81       	ldd	r25, Y+2	; 0x02
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	f1 f7       	brne	.-4      	; 0x1994 <CLCD_voidSendData+0x320>
    1998:	9a 83       	std	Y+2, r25	; 0x02
    199a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	CLCD_voidSendCommand(0x06);
    199c:	86 e0       	ldi	r24, 0x06	; 6
    199e:	0e 94 61 09 	call	0x12c2	; 0x12c2 <CLCD_voidSendCommand>
#else
#error "In correct cconfigrtion of LCD_MODE"
#endif
}
    19a2:	ac 96       	adiw	r28, 0x2c	; 44
    19a4:	0f b6       	in	r0, 0x3f	; 63
    19a6:	f8 94       	cli
    19a8:	de bf       	out	0x3e, r29	; 62
    19aa:	0f be       	out	0x3f, r0	; 63
    19ac:	cd bf       	out	0x3d, r28	; 61
    19ae:	cf 91       	pop	r28
    19b0:	df 91       	pop	r29
    19b2:	08 95       	ret

000019b4 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    19b4:	df 93       	push	r29
    19b6:	cf 93       	push	r28
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62
    19bc:	e8 97       	sbiw	r28, 0x38	; 56
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	f8 94       	cli
    19c2:	de bf       	out	0x3e, r29	; 62
    19c4:	0f be       	out	0x3f, r0	; 63
    19c6:	cd bf       	out	0x3d, r28	; 61
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	a0 e2       	ldi	r26, 0x20	; 32
    19ce:	b2 e4       	ldi	r27, 0x42	; 66
    19d0:	8d ab       	std	Y+53, r24	; 0x35
    19d2:	9e ab       	std	Y+54, r25	; 0x36
    19d4:	af ab       	std	Y+55, r26	; 0x37
    19d6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19d8:	6d a9       	ldd	r22, Y+53	; 0x35
    19da:	7e a9       	ldd	r23, Y+54	; 0x36
    19dc:	8f a9       	ldd	r24, Y+55	; 0x37
    19de:	98 ad       	ldd	r25, Y+56	; 0x38
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	4a ef       	ldi	r20, 0xFA	; 250
    19e6:	54 e4       	ldi	r21, 0x44	; 68
    19e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	89 ab       	std	Y+49, r24	; 0x31
    19f2:	9a ab       	std	Y+50, r25	; 0x32
    19f4:	ab ab       	std	Y+51, r26	; 0x33
    19f6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19f8:	69 a9       	ldd	r22, Y+49	; 0x31
    19fa:	7a a9       	ldd	r23, Y+50	; 0x32
    19fc:	8b a9       	ldd	r24, Y+51	; 0x33
    19fe:	9c a9       	ldd	r25, Y+52	; 0x34
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	40 e8       	ldi	r20, 0x80	; 128
    1a06:	5f e3       	ldi	r21, 0x3F	; 63
    1a08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a0c:	88 23       	and	r24, r24
    1a0e:	2c f4       	brge	.+10     	; 0x1a1a <CLCD_voidInit+0x66>
		__ticks = 1;
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	98 ab       	std	Y+48, r25	; 0x30
    1a16:	8f a7       	std	Y+47, r24	; 0x2f
    1a18:	3f c0       	rjmp	.+126    	; 0x1a98 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1a1a:	69 a9       	ldd	r22, Y+49	; 0x31
    1a1c:	7a a9       	ldd	r23, Y+50	; 0x32
    1a1e:	8b a9       	ldd	r24, Y+51	; 0x33
    1a20:	9c a9       	ldd	r25, Y+52	; 0x34
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	3f ef       	ldi	r19, 0xFF	; 255
    1a26:	4f e7       	ldi	r20, 0x7F	; 127
    1a28:	57 e4       	ldi	r21, 0x47	; 71
    1a2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a2e:	18 16       	cp	r1, r24
    1a30:	4c f5       	brge	.+82     	; 0x1a84 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a32:	6d a9       	ldd	r22, Y+53	; 0x35
    1a34:	7e a9       	ldd	r23, Y+54	; 0x36
    1a36:	8f a9       	ldd	r24, Y+55	; 0x37
    1a38:	98 ad       	ldd	r25, Y+56	; 0x38
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	40 e2       	ldi	r20, 0x20	; 32
    1a40:	51 e4       	ldi	r21, 0x41	; 65
    1a42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	bc 01       	movw	r22, r24
    1a4c:	cd 01       	movw	r24, r26
    1a4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	98 ab       	std	Y+48, r25	; 0x30
    1a58:	8f a7       	std	Y+47, r24	; 0x2f
    1a5a:	0f c0       	rjmp	.+30     	; 0x1a7a <CLCD_voidInit+0xc6>
    1a5c:	88 ec       	ldi	r24, 0xC8	; 200
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	9e a7       	std	Y+46, r25	; 0x2e
    1a62:	8d a7       	std	Y+45, r24	; 0x2d
    1a64:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a66:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a68:	01 97       	sbiw	r24, 0x01	; 1
    1a6a:	f1 f7       	brne	.-4      	; 0x1a68 <CLCD_voidInit+0xb4>
    1a6c:	9e a7       	std	Y+46, r25	; 0x2e
    1a6e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a70:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a72:	98 a9       	ldd	r25, Y+48	; 0x30
    1a74:	01 97       	sbiw	r24, 0x01	; 1
    1a76:	98 ab       	std	Y+48, r25	; 0x30
    1a78:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a7c:	98 a9       	ldd	r25, Y+48	; 0x30
    1a7e:	00 97       	sbiw	r24, 0x00	; 0
    1a80:	69 f7       	brne	.-38     	; 0x1a5c <CLCD_voidInit+0xa8>
    1a82:	14 c0       	rjmp	.+40     	; 0x1aac <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a84:	69 a9       	ldd	r22, Y+49	; 0x31
    1a86:	7a a9       	ldd	r23, Y+50	; 0x32
    1a88:	8b a9       	ldd	r24, Y+51	; 0x33
    1a8a:	9c a9       	ldd	r25, Y+52	; 0x34
    1a8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	98 ab       	std	Y+48, r25	; 0x30
    1a96:	8f a7       	std	Y+47, r24	; 0x2f
    1a98:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a9a:	98 a9       	ldd	r25, Y+48	; 0x30
    1a9c:	9c a7       	std	Y+44, r25	; 0x2c
    1a9e:	8b a7       	std	Y+43, r24	; 0x2b
    1aa0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1aa2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	f1 f7       	brne	.-4      	; 0x1aa4 <CLCD_voidInit+0xf0>
    1aa8:	9c a7       	std	Y+44, r25	; 0x2c
    1aaa:	8b a7       	std	Y+43, r24	; 0x2b
	CLCD_voidSendCommand(0b00000001);
#elif CLCD_CHIOCE_MODE==_4_BIT_MODE
	/*WAIT FOR MORE THEN 30 MS*/
	_delay_ms(40);
	/*function set command: Set Bit 5 */
	CLCD_voidSendCommand(0b00100000);
    1aac:	80 e2       	ldi	r24, 0x20	; 32
    1aae:	0e 94 61 09 	call	0x12c2	; 0x12c2 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(0b00100000);
    1ab2:	80 e2       	ldi	r24, 0x20	; 32
    1ab4:	0e 94 61 09 	call	0x12c2	; 0x12c2 <CLCD_voidSendCommand>

	/*function set command:(7_Bit) N --> Lines,(6_Bit) F --> 5*8 font */
	CLCD_voidSendCommand(0b10000000);
    1ab8:	80 e8       	ldi	r24, 0x80	; 128
    1aba:	0e 94 61 09 	call	0x12c2	; 0x12c2 <CLCD_voidSendCommand>
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	a0 e8       	ldi	r26, 0x80	; 128
    1ac4:	bf e3       	ldi	r27, 0x3F	; 63
    1ac6:	8f a3       	std	Y+39, r24	; 0x27
    1ac8:	98 a7       	std	Y+40, r25	; 0x28
    1aca:	a9 a7       	std	Y+41, r26	; 0x29
    1acc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ace:	6f a1       	ldd	r22, Y+39	; 0x27
    1ad0:	78 a5       	ldd	r23, Y+40	; 0x28
    1ad2:	89 a5       	ldd	r24, Y+41	; 0x29
    1ad4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	4a ef       	ldi	r20, 0xFA	; 250
    1adc:	54 e4       	ldi	r21, 0x44	; 68
    1ade:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	8b a3       	std	Y+35, r24	; 0x23
    1ae8:	9c a3       	std	Y+36, r25	; 0x24
    1aea:	ad a3       	std	Y+37, r26	; 0x25
    1aec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1aee:	6b a1       	ldd	r22, Y+35	; 0x23
    1af0:	7c a1       	ldd	r23, Y+36	; 0x24
    1af2:	8d a1       	ldd	r24, Y+37	; 0x25
    1af4:	9e a1       	ldd	r25, Y+38	; 0x26
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	40 e8       	ldi	r20, 0x80	; 128
    1afc:	5f e3       	ldi	r21, 0x3F	; 63
    1afe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b02:	88 23       	and	r24, r24
    1b04:	2c f4       	brge	.+10     	; 0x1b10 <CLCD_voidInit+0x15c>
		__ticks = 1;
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	9a a3       	std	Y+34, r25	; 0x22
    1b0c:	89 a3       	std	Y+33, r24	; 0x21
    1b0e:	3f c0       	rjmp	.+126    	; 0x1b8e <CLCD_voidInit+0x1da>
	else if (__tmp > 65535)
    1b10:	6b a1       	ldd	r22, Y+35	; 0x23
    1b12:	7c a1       	ldd	r23, Y+36	; 0x24
    1b14:	8d a1       	ldd	r24, Y+37	; 0x25
    1b16:	9e a1       	ldd	r25, Y+38	; 0x26
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	3f ef       	ldi	r19, 0xFF	; 255
    1b1c:	4f e7       	ldi	r20, 0x7F	; 127
    1b1e:	57 e4       	ldi	r21, 0x47	; 71
    1b20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b24:	18 16       	cp	r1, r24
    1b26:	4c f5       	brge	.+82     	; 0x1b7a <CLCD_voidInit+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b28:	6f a1       	ldd	r22, Y+39	; 0x27
    1b2a:	78 a5       	ldd	r23, Y+40	; 0x28
    1b2c:	89 a5       	ldd	r24, Y+41	; 0x29
    1b2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	40 e2       	ldi	r20, 0x20	; 32
    1b36:	51 e4       	ldi	r21, 0x41	; 65
    1b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	bc 01       	movw	r22, r24
    1b42:	cd 01       	movw	r24, r26
    1b44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	9a a3       	std	Y+34, r25	; 0x22
    1b4e:	89 a3       	std	Y+33, r24	; 0x21
    1b50:	0f c0       	rjmp	.+30     	; 0x1b70 <CLCD_voidInit+0x1bc>
    1b52:	88 ec       	ldi	r24, 0xC8	; 200
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	98 a3       	std	Y+32, r25	; 0x20
    1b58:	8f 8f       	std	Y+31, r24	; 0x1f
    1b5a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b5c:	98 a1       	ldd	r25, Y+32	; 0x20
    1b5e:	01 97       	sbiw	r24, 0x01	; 1
    1b60:	f1 f7       	brne	.-4      	; 0x1b5e <CLCD_voidInit+0x1aa>
    1b62:	98 a3       	std	Y+32, r25	; 0x20
    1b64:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b66:	89 a1       	ldd	r24, Y+33	; 0x21
    1b68:	9a a1       	ldd	r25, Y+34	; 0x22
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	9a a3       	std	Y+34, r25	; 0x22
    1b6e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b70:	89 a1       	ldd	r24, Y+33	; 0x21
    1b72:	9a a1       	ldd	r25, Y+34	; 0x22
    1b74:	00 97       	sbiw	r24, 0x00	; 0
    1b76:	69 f7       	brne	.-38     	; 0x1b52 <CLCD_voidInit+0x19e>
    1b78:	14 c0       	rjmp	.+40     	; 0x1ba2 <CLCD_voidInit+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b7a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b7c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b7e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b80:	9e a1       	ldd	r25, Y+38	; 0x26
    1b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	9a a3       	std	Y+34, r25	; 0x22
    1b8c:	89 a3       	std	Y+33, r24	; 0x21
    1b8e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b90:	9a a1       	ldd	r25, Y+34	; 0x22
    1b92:	9e 8f       	std	Y+30, r25	; 0x1e
    1b94:	8d 8f       	std	Y+29, r24	; 0x1d
    1b96:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b98:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b9a:	01 97       	sbiw	r24, 0x01	; 1
    1b9c:	f1 f7       	brne	.-4      	; 0x1b9a <CLCD_voidInit+0x1e6>
    1b9e:	9e 8f       	std	Y+30, r25	; 0x1e
    1ba0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	CLCD_voidSendCommand(0b0000);
    1ba2:	80 e0       	ldi	r24, 0x00	; 0
    1ba4:	0e 94 61 09 	call	0x12c2	; 0x12c2 <CLCD_voidSendCommand>
	/*Display No/00f ctrl  */
	/*Set Bit 7 ,(6_Bit) D --> display enable ,C --> disable cursor ,B --> no blink cursor*/
	CLCD_voidSendCommand(0b11000000);
    1ba8:	80 ec       	ldi	r24, 0xC0	; 192
    1baa:	0e 94 61 09 	call	0x12c2	; 0x12c2 <CLCD_voidSendCommand>
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	a0 e8       	ldi	r26, 0x80	; 128
    1bb4:	bf e3       	ldi	r27, 0x3F	; 63
    1bb6:	89 8f       	std	Y+25, r24	; 0x19
    1bb8:	9a 8f       	std	Y+26, r25	; 0x1a
    1bba:	ab 8f       	std	Y+27, r26	; 0x1b
    1bbc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bbe:	69 8d       	ldd	r22, Y+25	; 0x19
    1bc0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	4a ef       	ldi	r20, 0xFA	; 250
    1bcc:	54 e4       	ldi	r21, 0x44	; 68
    1bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	8d 8b       	std	Y+21, r24	; 0x15
    1bd8:	9e 8b       	std	Y+22, r25	; 0x16
    1bda:	af 8b       	std	Y+23, r26	; 0x17
    1bdc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bde:	6d 89       	ldd	r22, Y+21	; 0x15
    1be0:	7e 89       	ldd	r23, Y+22	; 0x16
    1be2:	8f 89       	ldd	r24, Y+23	; 0x17
    1be4:	98 8d       	ldd	r25, Y+24	; 0x18
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	40 e8       	ldi	r20, 0x80	; 128
    1bec:	5f e3       	ldi	r21, 0x3F	; 63
    1bee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bf2:	88 23       	and	r24, r24
    1bf4:	2c f4       	brge	.+10     	; 0x1c00 <CLCD_voidInit+0x24c>
		__ticks = 1;
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	9c 8b       	std	Y+20, r25	; 0x14
    1bfc:	8b 8b       	std	Y+19, r24	; 0x13
    1bfe:	3f c0       	rjmp	.+126    	; 0x1c7e <CLCD_voidInit+0x2ca>
	else if (__tmp > 65535)
    1c00:	6d 89       	ldd	r22, Y+21	; 0x15
    1c02:	7e 89       	ldd	r23, Y+22	; 0x16
    1c04:	8f 89       	ldd	r24, Y+23	; 0x17
    1c06:	98 8d       	ldd	r25, Y+24	; 0x18
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	3f ef       	ldi	r19, 0xFF	; 255
    1c0c:	4f e7       	ldi	r20, 0x7F	; 127
    1c0e:	57 e4       	ldi	r21, 0x47	; 71
    1c10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c14:	18 16       	cp	r1, r24
    1c16:	4c f5       	brge	.+82     	; 0x1c6a <CLCD_voidInit+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c18:	69 8d       	ldd	r22, Y+25	; 0x19
    1c1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	40 e2       	ldi	r20, 0x20	; 32
    1c26:	51 e4       	ldi	r21, 0x41	; 65
    1c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	bc 01       	movw	r22, r24
    1c32:	cd 01       	movw	r24, r26
    1c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	9c 8b       	std	Y+20, r25	; 0x14
    1c3e:	8b 8b       	std	Y+19, r24	; 0x13
    1c40:	0f c0       	rjmp	.+30     	; 0x1c60 <CLCD_voidInit+0x2ac>
    1c42:	88 ec       	ldi	r24, 0xC8	; 200
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	9a 8b       	std	Y+18, r25	; 0x12
    1c48:	89 8b       	std	Y+17, r24	; 0x11
    1c4a:	89 89       	ldd	r24, Y+17	; 0x11
    1c4c:	9a 89       	ldd	r25, Y+18	; 0x12
    1c4e:	01 97       	sbiw	r24, 0x01	; 1
    1c50:	f1 f7       	brne	.-4      	; 0x1c4e <CLCD_voidInit+0x29a>
    1c52:	9a 8b       	std	Y+18, r25	; 0x12
    1c54:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c56:	8b 89       	ldd	r24, Y+19	; 0x13
    1c58:	9c 89       	ldd	r25, Y+20	; 0x14
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	9c 8b       	std	Y+20, r25	; 0x14
    1c5e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c60:	8b 89       	ldd	r24, Y+19	; 0x13
    1c62:	9c 89       	ldd	r25, Y+20	; 0x14
    1c64:	00 97       	sbiw	r24, 0x00	; 0
    1c66:	69 f7       	brne	.-38     	; 0x1c42 <CLCD_voidInit+0x28e>
    1c68:	14 c0       	rjmp	.+40     	; 0x1c92 <CLCD_voidInit+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c70:	98 8d       	ldd	r25, Y+24	; 0x18
    1c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	9c 8b       	std	Y+20, r25	; 0x14
    1c7c:	8b 8b       	std	Y+19, r24	; 0x13
    1c7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c80:	9c 89       	ldd	r25, Y+20	; 0x14
    1c82:	98 8b       	std	Y+16, r25	; 0x10
    1c84:	8f 87       	std	Y+15, r24	; 0x0f
    1c86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c88:	98 89       	ldd	r25, Y+16	; 0x10
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	f1 f7       	brne	.-4      	; 0x1c8a <CLCD_voidInit+0x2d6>
    1c8e:	98 8b       	std	Y+16, r25	; 0x10
    1c90:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLCD_voidSendCommand(0b0000);
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	0e 94 61 09 	call	0x12c2	; 0x12c2 <CLCD_voidSendCommand>
	/*Display Clear */
	CLCD_voidSendCommand(0b00010000);
    1c98:	80 e1       	ldi	r24, 0x10	; 16
    1c9a:	0e 94 61 09 	call	0x12c2	; 0x12c2 <CLCD_voidSendCommand>
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	a0 e0       	ldi	r26, 0x00	; 0
    1ca4:	b0 e4       	ldi	r27, 0x40	; 64
    1ca6:	8b 87       	std	Y+11, r24	; 0x0b
    1ca8:	9c 87       	std	Y+12, r25	; 0x0c
    1caa:	ad 87       	std	Y+13, r26	; 0x0d
    1cac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	4a ef       	ldi	r20, 0xFA	; 250
    1cbc:	54 e4       	ldi	r21, 0x44	; 68
    1cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	8f 83       	std	Y+7, r24	; 0x07
    1cc8:	98 87       	std	Y+8, r25	; 0x08
    1cca:	a9 87       	std	Y+9, r26	; 0x09
    1ccc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cce:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd0:	78 85       	ldd	r23, Y+8	; 0x08
    1cd2:	89 85       	ldd	r24, Y+9	; 0x09
    1cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	40 e8       	ldi	r20, 0x80	; 128
    1cdc:	5f e3       	ldi	r21, 0x3F	; 63
    1cde:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ce2:	88 23       	and	r24, r24
    1ce4:	2c f4       	brge	.+10     	; 0x1cf0 <CLCD_voidInit+0x33c>
		__ticks = 1;
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	9e 83       	std	Y+6, r25	; 0x06
    1cec:	8d 83       	std	Y+5, r24	; 0x05
    1cee:	3f c0       	rjmp	.+126    	; 0x1d6e <CLCD_voidInit+0x3ba>
	else if (__tmp > 65535)
    1cf0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf2:	78 85       	ldd	r23, Y+8	; 0x08
    1cf4:	89 85       	ldd	r24, Y+9	; 0x09
    1cf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	3f ef       	ldi	r19, 0xFF	; 255
    1cfc:	4f e7       	ldi	r20, 0x7F	; 127
    1cfe:	57 e4       	ldi	r21, 0x47	; 71
    1d00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d04:	18 16       	cp	r1, r24
    1d06:	4c f5       	brge	.+82     	; 0x1d5a <CLCD_voidInit+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	40 e2       	ldi	r20, 0x20	; 32
    1d16:	51 e4       	ldi	r21, 0x41	; 65
    1d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	bc 01       	movw	r22, r24
    1d22:	cd 01       	movw	r24, r26
    1d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	9e 83       	std	Y+6, r25	; 0x06
    1d2e:	8d 83       	std	Y+5, r24	; 0x05
    1d30:	0f c0       	rjmp	.+30     	; 0x1d50 <CLCD_voidInit+0x39c>
    1d32:	88 ec       	ldi	r24, 0xC8	; 200
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	9c 83       	std	Y+4, r25	; 0x04
    1d38:	8b 83       	std	Y+3, r24	; 0x03
    1d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	f1 f7       	brne	.-4      	; 0x1d3e <CLCD_voidInit+0x38a>
    1d42:	9c 83       	std	Y+4, r25	; 0x04
    1d44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d46:	8d 81       	ldd	r24, Y+5	; 0x05
    1d48:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	9e 83       	std	Y+6, r25	; 0x06
    1d4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d50:	8d 81       	ldd	r24, Y+5	; 0x05
    1d52:	9e 81       	ldd	r25, Y+6	; 0x06
    1d54:	00 97       	sbiw	r24, 0x00	; 0
    1d56:	69 f7       	brne	.-38     	; 0x1d32 <CLCD_voidInit+0x37e>
    1d58:	14 c0       	rjmp	.+40     	; 0x1d82 <CLCD_voidInit+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d5c:	78 85       	ldd	r23, Y+8	; 0x08
    1d5e:	89 85       	ldd	r24, Y+9	; 0x09
    1d60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	9e 83       	std	Y+6, r25	; 0x06
    1d6c:	8d 83       	std	Y+5, r24	; 0x05
    1d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d70:	9e 81       	ldd	r25, Y+6	; 0x06
    1d72:	9a 83       	std	Y+2, r25	; 0x02
    1d74:	89 83       	std	Y+1, r24	; 0x01
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	f1 f7       	brne	.-4      	; 0x1d7a <CLCD_voidInit+0x3c6>
    1d7e:	9a 83       	std	Y+2, r25	; 0x02
    1d80:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	iniIsFinich=1;
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	80 93 a8 02 	sts	0x02A8, r24
#else
#error "In correct cconfigrtion of LCD_MODE"
#endif
}
    1d88:	e8 96       	adiw	r28, 0x38	; 56
    1d8a:	0f b6       	in	r0, 0x3f	; 63
    1d8c:	f8 94       	cli
    1d8e:	de bf       	out	0x3e, r29	; 62
    1d90:	0f be       	out	0x3f, r0	; 63
    1d92:	cd bf       	out	0x3d, r28	; 61
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	08 95       	ret

00001d9a <CLCD_voidSendString>:
void CLCD_voidSendString(const char* Copy_pcString)//char ASCII Value Constant not allow the func to change the sent string
{
    1d9a:	df 93       	push	r29
    1d9c:	cf 93       	push	r28
    1d9e:	00 d0       	rcall	.+0      	; 0x1da0 <CLCD_voidSendString+0x6>
    1da0:	0f 92       	push	r0
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
    1da6:	9b 83       	std	Y+3, r25	; 0x03
    1da8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8cnt=0;
    1daa:	19 82       	std	Y+1, r1	; 0x01
    1dac:	0e c0       	rjmp	.+28     	; 0x1dca <CLCD_voidSendString+0x30>
	while(Copy_pcString[Local_u8cnt]!='\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8cnt]);
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	28 2f       	mov	r18, r24
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	8a 81       	ldd	r24, Y+2	; 0x02
    1db6:	9b 81       	ldd	r25, Y+3	; 0x03
    1db8:	fc 01       	movw	r30, r24
    1dba:	e2 0f       	add	r30, r18
    1dbc:	f3 1f       	adc	r31, r19
    1dbe:	80 81       	ld	r24, Z
    1dc0:	0e 94 3a 0b 	call	0x1674	; 0x1674 <CLCD_voidSendData>
		Local_u8cnt++;
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
    1dc6:	8f 5f       	subi	r24, 0xFF	; 255
    1dc8:	89 83       	std	Y+1, r24	; 0x01
#endif
}
void CLCD_voidSendString(const char* Copy_pcString)//char ASCII Value Constant not allow the func to change the sent string
{
	u8 Local_u8cnt=0;
	while(Copy_pcString[Local_u8cnt]!='\0')
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
    1dcc:	28 2f       	mov	r18, r24
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd2:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd4:	fc 01       	movw	r30, r24
    1dd6:	e2 0f       	add	r30, r18
    1dd8:	f3 1f       	adc	r31, r19
    1dda:	80 81       	ld	r24, Z
    1ddc:	88 23       	and	r24, r24
    1dde:	39 f7       	brne	.-50     	; 0x1dae <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8cnt]);
		Local_u8cnt++;
	}
}
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	cf 91       	pop	r28
    1de8:	df 91       	pop	r29
    1dea:	08 95       	ret

00001dec <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1dec:	df 93       	push	r29
    1dee:	cf 93       	push	r28
    1df0:	00 d0       	rcall	.+0      	; 0x1df2 <CLCD_voidGoToXY+0x6>
    1df2:	0f 92       	push	r0
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
    1df8:	8a 83       	std	Y+2, r24	; 0x02
    1dfa:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	88 23       	and	r24, r24
    1e00:	51 f4       	brne	.+20     	; 0x1e16 <CLCD_voidGoToXY+0x2a>
	{
		if (Copy_u8YPos > 15) {
    1e02:	8b 81       	ldd	r24, Y+3	; 0x03
    1e04:	80 31       	cpi	r24, 0x10	; 16
    1e06:	20 f0       	brcs	.+8      	; 0x1e10 <CLCD_voidGoToXY+0x24>
			Local_u8Address = 0x40 + Copy_u8YPos;
    1e08:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0a:	80 5c       	subi	r24, 0xC0	; 192
    1e0c:	89 83       	std	Y+1, r24	; 0x01
    1e0e:	09 c0       	rjmp	.+18     	; 0x1e22 <CLCD_voidGoToXY+0x36>
		} else {
			Local_u8Address = Copy_u8YPos;
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	89 83       	std	Y+1, r24	; 0x01
    1e14:	06 c0       	rjmp	.+12     	; 0x1e22 <CLCD_voidGoToXY+0x36>
		}
	}
	else if(Copy_u8XPos==1)
    1e16:	8a 81       	ldd	r24, Y+2	; 0x02
    1e18:	81 30       	cpi	r24, 0x01	; 1
    1e1a:	19 f4       	brne	.+6      	; 0x1e22 <CLCD_voidGoToXY+0x36>
	{
		Local_u8Address=0x40+Copy_u8YPos;
    1e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1e:	80 5c       	subi	r24, 0xC0	; 192
    1e20:	89 83       	std	Y+1, r24	; 0x01
	}
	//put command from data sheet
	CLCD_voidSendCommand(Local_u8Address+128);
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
    1e24:	80 58       	subi	r24, 0x80	; 128
    1e26:	0e 94 61 09 	call	0x12c2	; 0x12c2 <CLCD_voidSendCommand>
}
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	0f 90       	pop	r0
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	08 95       	ret

00001e36 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNmber,u8 Copy_u8XPos,u8 Copy_u8Ypos)
{
    1e36:	df 93       	push	r29
    1e38:	cf 93       	push	r28
    1e3a:	cd b7       	in	r28, 0x3d	; 61
    1e3c:	de b7       	in	r29, 0x3e	; 62
    1e3e:	27 97       	sbiw	r28, 0x07	; 7
    1e40:	0f b6       	in	r0, 0x3f	; 63
    1e42:	f8 94       	cli
    1e44:	de bf       	out	0x3e, r29	; 62
    1e46:	0f be       	out	0x3f, r0	; 63
    1e48:	cd bf       	out	0x3d, r28	; 61
    1e4a:	9c 83       	std	Y+4, r25	; 0x04
    1e4c:	8b 83       	std	Y+3, r24	; 0x03
    1e4e:	6d 83       	std	Y+5, r22	; 0x05
    1e50:	4e 83       	std	Y+6, r20	; 0x06
    1e52:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress=0;
    1e54:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8iterator;
	/*Calculate the CGRAM address whose each block is 8 bytes */
	Local_u8CGRAMAddress= Copy_u8PatternNmber*8;
    1e56:	8d 81       	ldd	r24, Y+5	; 0x05
    1e58:	88 2f       	mov	r24, r24
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	88 0f       	add	r24, r24
    1e5e:	99 1f       	adc	r25, r25
    1e60:	88 0f       	add	r24, r24
    1e62:	99 1f       	adc	r25, r25
    1e64:	88 0f       	add	r24, r24
    1e66:	99 1f       	adc	r25, r25
    1e68:	8a 83       	std	Y+2, r24	; 0x02

	/*Send CGRAM address command to LCD, with setting bit 6 , clear bit 7 */
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
    1e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6c:	80 5c       	subi	r24, 0xC0	; 192
    1e6e:	0e 94 61 09 	call	0x12c2	; 0x12c2 <CLCD_voidSendCommand>

	/*Write the pattern into CGRAM */
	for(Local_u8iterator=0;Local_u8iterator<8;Local_u8iterator++)
    1e72:	19 82       	std	Y+1, r1	; 0x01
    1e74:	0e c0       	rjmp	.+28     	; 0x1e92 <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8iterator]);
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	28 2f       	mov	r18, r24
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e80:	fc 01       	movw	r30, r24
    1e82:	e2 0f       	add	r30, r18
    1e84:	f3 1f       	adc	r31, r19
    1e86:	80 81       	ld	r24, Z
    1e88:	0e 94 3a 0b 	call	0x1674	; 0x1674 <CLCD_voidSendData>

	/*Send CGRAM address command to LCD, with setting bit 6 , clear bit 7 */
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/*Write the pattern into CGRAM */
	for(Local_u8iterator=0;Local_u8iterator<8;Local_u8iterator++)
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	8f 5f       	subi	r24, 0xFF	; 255
    1e90:	89 83       	std	Y+1, r24	; 0x01
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	88 30       	cpi	r24, 0x08	; 8
    1e96:	78 f3       	brcs	.-34     	; 0x1e76 <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8iterator]);
	}
	/* Go back to DDRAM to display the pattern */
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8Ypos);
    1e98:	8e 81       	ldd	r24, Y+6	; 0x06
    1e9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e9c:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <CLCD_voidGoToXY>

	/* Display the pattern written  in the CGRAM */
	CLCD_voidSendData(Copy_u8PatternNmber);
    1ea0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea2:	0e 94 3a 0b 	call	0x1674	; 0x1674 <CLCD_voidSendData>

}
    1ea6:	27 96       	adiw	r28, 0x07	; 7
    1ea8:	0f b6       	in	r0, 0x3f	; 63
    1eaa:	f8 94       	cli
    1eac:	de bf       	out	0x3e, r29	; 62
    1eae:	0f be       	out	0x3f, r0	; 63
    1eb0:	cd bf       	out	0x3d, r28	; 61
    1eb2:	cf 91       	pop	r28
    1eb4:	df 91       	pop	r29
    1eb6:	08 95       	ret

00001eb8 <CLCD_voidWriteNumber>:

void CLCD_voidWriteNumber(u32 Copy_u32Number)
{
    1eb8:	df 93       	push	r29
    1eba:	cf 93       	push	r28
    1ebc:	00 d0       	rcall	.+0      	; 0x1ebe <CLCD_voidWriteNumber+0x6>
    1ebe:	00 d0       	rcall	.+0      	; 0x1ec0 <CLCD_voidWriteNumber+0x8>
    1ec0:	00 d0       	rcall	.+0      	; 0x1ec2 <CLCD_voidWriteNumber+0xa>
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	6b 83       	std	Y+3, r22	; 0x03
    1ec8:	7c 83       	std	Y+4, r23	; 0x04
    1eca:	8d 83       	std	Y+5, r24	; 0x05
    1ecc:	9e 83       	std	Y+6, r25	; 0x06

	u8 Max_Digits = Num_length(Copy_u32Number);
    1ece:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed2:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <Num_length>
    1ed6:	8a 83       	std	Y+2, r24	; 0x02
	for (s8 i = Max_Digits; i > 0; i--) {
    1ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eda:	89 83       	std	Y+1, r24	; 0x01
    1edc:	2c c0       	rjmp	.+88     	; 0x1f36 <CLCD_voidWriteNumber+0x7e>
		CLCD_voidSendData((Copy_u32Number / Multi_N_10(i - 1)) + '0');
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
    1ee0:	81 50       	subi	r24, 0x01	; 1
    1ee2:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <Multi_N_10>
    1ee6:	9c 01       	movw	r18, r24
    1ee8:	40 e0       	ldi	r20, 0x00	; 0
    1eea:	50 e0       	ldi	r21, 0x00	; 0
    1eec:	8b 81       	ldd	r24, Y+3	; 0x03
    1eee:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef0:	ad 81       	ldd	r26, Y+5	; 0x05
    1ef2:	be 81       	ldd	r27, Y+6	; 0x06
    1ef4:	bc 01       	movw	r22, r24
    1ef6:	cd 01       	movw	r24, r26
    1ef8:	0e 94 a4 3b 	call	0x7748	; 0x7748 <__udivmodsi4>
    1efc:	da 01       	movw	r26, r20
    1efe:	c9 01       	movw	r24, r18
    1f00:	80 5d       	subi	r24, 0xD0	; 208
    1f02:	0e 94 3a 0b 	call	0x1674	; 0x1674 <CLCD_voidSendData>
		Copy_u32Number = (Copy_u32Number % Multi_N_10(i - 1));
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	81 50       	subi	r24, 0x01	; 1
    1f0a:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <Multi_N_10>
    1f0e:	9c 01       	movw	r18, r24
    1f10:	40 e0       	ldi	r20, 0x00	; 0
    1f12:	50 e0       	ldi	r21, 0x00	; 0
    1f14:	8b 81       	ldd	r24, Y+3	; 0x03
    1f16:	9c 81       	ldd	r25, Y+4	; 0x04
    1f18:	ad 81       	ldd	r26, Y+5	; 0x05
    1f1a:	be 81       	ldd	r27, Y+6	; 0x06
    1f1c:	bc 01       	movw	r22, r24
    1f1e:	cd 01       	movw	r24, r26
    1f20:	0e 94 a4 3b 	call	0x7748	; 0x7748 <__udivmodsi4>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	8b 83       	std	Y+3, r24	; 0x03
    1f2a:	9c 83       	std	Y+4, r25	; 0x04
    1f2c:	ad 83       	std	Y+5, r26	; 0x05
    1f2e:	be 83       	std	Y+6, r27	; 0x06

void CLCD_voidWriteNumber(u32 Copy_u32Number)
{

	u8 Max_Digits = Num_length(Copy_u32Number);
	for (s8 i = Max_Digits; i > 0; i--) {
    1f30:	89 81       	ldd	r24, Y+1	; 0x01
    1f32:	81 50       	subi	r24, 0x01	; 1
    1f34:	89 83       	std	Y+1, r24	; 0x01
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
    1f38:	18 16       	cp	r1, r24
    1f3a:	8c f2       	brlt	.-94     	; 0x1ede <CLCD_voidWriteNumber+0x26>
		CLCD_voidSendData((Copy_u32Number / Multi_N_10(i - 1)) + '0');
		Copy_u32Number = (Copy_u32Number % Multi_N_10(i - 1));
	}
}
    1f3c:	26 96       	adiw	r28, 0x06	; 6
    1f3e:	0f b6       	in	r0, 0x3f	; 63
    1f40:	f8 94       	cli
    1f42:	de bf       	out	0x3e, r29	; 62
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	cd bf       	out	0x3d, r28	; 61
    1f48:	cf 91       	pop	r28
    1f4a:	df 91       	pop	r29
    1f4c:	08 95       	ret

00001f4e <Num_length>:


static u8 Num_length(u16 num) {
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	00 d0       	rcall	.+0      	; 0x1f54 <Num_length+0x6>
    1f54:	00 d0       	rcall	.+0      	; 0x1f56 <Num_length+0x8>
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
    1f5a:	9b 83       	std	Y+3, r25	; 0x03
    1f5c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Cnt = 0;
    1f5e:	19 82       	std	Y+1, r1	; 0x01
	if(num == 0)
    1f60:	8a 81       	ldd	r24, Y+2	; 0x02
    1f62:	9b 81       	ldd	r25, Y+3	; 0x03
    1f64:	00 97       	sbiw	r24, 0x00	; 0
    1f66:	81 f4       	brne	.+32     	; 0x1f88 <Num_length+0x3a>
		return 1;
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	8c 83       	std	Y+4, r24	; 0x04
    1f6c:	13 c0       	rjmp	.+38     	; 0x1f94 <Num_length+0x46>
	while (num != 0) {
		num /= 10;
    1f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f70:	9b 81       	ldd	r25, Y+3	; 0x03
    1f72:	2a e0       	ldi	r18, 0x0A	; 10
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	b9 01       	movw	r22, r18
    1f78:	0e 94 90 3b 	call	0x7720	; 0x7720 <__udivmodhi4>
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	9b 83       	std	Y+3, r25	; 0x03
    1f80:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8Cnt++;
    1f82:	89 81       	ldd	r24, Y+1	; 0x01
    1f84:	8f 5f       	subi	r24, 0xFF	; 255
    1f86:	89 83       	std	Y+1, r24	; 0x01

static u8 Num_length(u16 num) {
	u8 Local_u8Cnt = 0;
	if(num == 0)
		return 1;
	while (num != 0) {
    1f88:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f8c:	00 97       	sbiw	r24, 0x00	; 0
    1f8e:	79 f7       	brne	.-34     	; 0x1f6e <Num_length+0x20>
		num /= 10;
		Local_u8Cnt++;
	}
	return Local_u8Cnt;
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	8c 83       	std	Y+4, r24	; 0x04
    1f94:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1f96:	0f 90       	pop	r0
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	0f 90       	pop	r0
    1f9e:	cf 91       	pop	r28
    1fa0:	df 91       	pop	r29
    1fa2:	08 95       	ret

00001fa4 <Multi_N_10>:
static u16 Multi_N_10(u8 N) {
    1fa4:	df 93       	push	r29
    1fa6:	cf 93       	push	r28
    1fa8:	00 d0       	rcall	.+0      	; 0x1faa <Multi_N_10+0x6>
    1faa:	00 d0       	rcall	.+0      	; 0x1fac <Multi_N_10+0x8>
    1fac:	cd b7       	in	r28, 0x3d	; 61
    1fae:	de b7       	in	r29, 0x3e	; 62
    1fb0:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8Cnt;
	u16 p = 1;
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	9a 83       	std	Y+2, r25	; 0x02
    1fb8:	89 83       	std	Y+1, r24	; 0x01
	for (Local_u8Cnt = 0; Local_u8Cnt < N; Local_u8Cnt++)
    1fba:	1b 82       	std	Y+3, r1	; 0x03
    1fbc:	11 c0       	rjmp	.+34     	; 0x1fe0 <Multi_N_10+0x3c>
		p *= 10;
    1fbe:	89 81       	ldd	r24, Y+1	; 0x01
    1fc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc2:	9c 01       	movw	r18, r24
    1fc4:	22 0f       	add	r18, r18
    1fc6:	33 1f       	adc	r19, r19
    1fc8:	c9 01       	movw	r24, r18
    1fca:	88 0f       	add	r24, r24
    1fcc:	99 1f       	adc	r25, r25
    1fce:	88 0f       	add	r24, r24
    1fd0:	99 1f       	adc	r25, r25
    1fd2:	82 0f       	add	r24, r18
    1fd4:	93 1f       	adc	r25, r19
    1fd6:	9a 83       	std	Y+2, r25	; 0x02
    1fd8:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8Cnt;
}
static u16 Multi_N_10(u8 N) {
	u8 Local_u8Cnt;
	u16 p = 1;
	for (Local_u8Cnt = 0; Local_u8Cnt < N; Local_u8Cnt++)
    1fda:	8b 81       	ldd	r24, Y+3	; 0x03
    1fdc:	8f 5f       	subi	r24, 0xFF	; 255
    1fde:	8b 83       	std	Y+3, r24	; 0x03
    1fe0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe4:	98 17       	cp	r25, r24
    1fe6:	58 f3       	brcs	.-42     	; 0x1fbe <Multi_N_10+0x1a>
		p *= 10;
	return p;
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	cf 91       	pop	r28
    1ff6:	df 91       	pop	r29
    1ff8:	08 95       	ret

00001ffa <DAC_voidSetAnalogValue>:
#include "../HAL/DAC_interface.h"
#include "../HAL/DAC_config.h"
#include "../HAL/DAC_private.h"

void DAC_voidSetAnalogValue(u8 Copy_u8Port,u16 Copy_u16Value_mV)
{
    1ffa:	df 93       	push	r29
    1ffc:	cf 93       	push	r28
    1ffe:	00 d0       	rcall	.+0      	; 0x2000 <DAC_voidSetAnalogValue+0x6>
    2000:	0f 92       	push	r0
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
    2006:	89 83       	std	Y+1, r24	; 0x01
    2008:	7b 83       	std	Y+3, r23	; 0x03
    200a:	6a 83       	std	Y+2, r22	; 0x02
	DIO_u8SetPortValue(Copy_u8Port,(u8)((u16)((Copy_u16Value_mV*255UL)/5000UL)));
    200c:	8a 81       	ldd	r24, Y+2	; 0x02
    200e:	9b 81       	ldd	r25, Y+3	; 0x03
    2010:	cc 01       	movw	r24, r24
    2012:	a0 e0       	ldi	r26, 0x00	; 0
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	2f ef       	ldi	r18, 0xFF	; 255
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	40 e0       	ldi	r20, 0x00	; 0
    201c:	50 e0       	ldi	r21, 0x00	; 0
    201e:	bc 01       	movw	r22, r24
    2020:	cd 01       	movw	r24, r26
    2022:	0e 94 71 3b 	call	0x76e2	; 0x76e2 <__mulsi3>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	28 e8       	ldi	r18, 0x88	; 136
    202c:	33 e1       	ldi	r19, 0x13	; 19
    202e:	40 e0       	ldi	r20, 0x00	; 0
    2030:	50 e0       	ldi	r21, 0x00	; 0
    2032:	bc 01       	movw	r22, r24
    2034:	cd 01       	movw	r24, r26
    2036:	0e 94 a4 3b 	call	0x7748	; 0x7748 <__udivmodsi4>
    203a:	da 01       	movw	r26, r20
    203c:	c9 01       	movw	r24, r18
    203e:	98 2f       	mov	r25, r24
    2040:	89 81       	ldd	r24, Y+1	; 0x01
    2042:	69 2f       	mov	r22, r25
    2044:	0e 94 43 11 	call	0x2286	; 0x2286 <DIO_u8SetPortValue>
}
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	cf 91       	pop	r28
    2050:	df 91       	pop	r29
    2052:	08 95       	ret

00002054 <DIO_u8SetPinValue>:
#include "../MCAL/DIO_config.h"
#include "../MCAL/DIO_interface.h"
#include "../MCAL/DIO_register.h"

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
    2054:	df 93       	push	r29
    2056:	cf 93       	push	r28
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
    205c:	28 97       	sbiw	r28, 0x08	; 8
    205e:	0f b6       	in	r0, 0x3f	; 63
    2060:	f8 94       	cli
    2062:	de bf       	out	0x3e, r29	; 62
    2064:	0f be       	out	0x3f, r0	; 63
    2066:	cd bf       	out	0x3d, r28	; 61
    2068:	8a 83       	std	Y+2, r24	; 0x02
    206a:	6b 83       	std	Y+3, r22	; 0x03
    206c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    206e:	19 82       	std	Y+1, r1	; 0x01
	if(DIO_PIN_HIGH==Copy_u8Value)
    2070:	8c 81       	ldd	r24, Y+4	; 0x04
    2072:	81 30       	cpi	r24, 0x01	; 1
    2074:	09 f0       	breq	.+2      	; 0x2078 <DIO_u8SetPinValue+0x24>
    2076:	79 c0       	rjmp	.+242    	; 0x216a <DIO_u8SetPinValue+0x116>
	{
		if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    2078:	8b 81       	ldd	r24, Y+3	; 0x03
    207a:	88 30       	cpi	r24, 0x08	; 8
    207c:	08 f0       	brcs	.+2      	; 0x2080 <DIO_u8SetPinValue+0x2c>
    207e:	72 c0       	rjmp	.+228    	; 0x2164 <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
    2080:	8a 81       	ldd	r24, Y+2	; 0x02
    2082:	28 2f       	mov	r18, r24
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	38 87       	std	Y+8, r19	; 0x08
    2088:	2f 83       	std	Y+7, r18	; 0x07
    208a:	8f 81       	ldd	r24, Y+7	; 0x07
    208c:	98 85       	ldd	r25, Y+8	; 0x08
    208e:	81 30       	cpi	r24, 0x01	; 1
    2090:	91 05       	cpc	r25, r1
    2092:	49 f1       	breq	.+82     	; 0x20e6 <DIO_u8SetPinValue+0x92>
    2094:	2f 81       	ldd	r18, Y+7	; 0x07
    2096:	38 85       	ldd	r19, Y+8	; 0x08
    2098:	22 30       	cpi	r18, 0x02	; 2
    209a:	31 05       	cpc	r19, r1
    209c:	2c f4       	brge	.+10     	; 0x20a8 <DIO_u8SetPinValue+0x54>
    209e:	8f 81       	ldd	r24, Y+7	; 0x07
    20a0:	98 85       	ldd	r25, Y+8	; 0x08
    20a2:	00 97       	sbiw	r24, 0x00	; 0
    20a4:	61 f0       	breq	.+24     	; 0x20be <DIO_u8SetPinValue+0x6a>
    20a6:	5b c0       	rjmp	.+182    	; 0x215e <DIO_u8SetPinValue+0x10a>
    20a8:	2f 81       	ldd	r18, Y+7	; 0x07
    20aa:	38 85       	ldd	r19, Y+8	; 0x08
    20ac:	22 30       	cpi	r18, 0x02	; 2
    20ae:	31 05       	cpc	r19, r1
    20b0:	71 f1       	breq	.+92     	; 0x210e <DIO_u8SetPinValue+0xba>
    20b2:	8f 81       	ldd	r24, Y+7	; 0x07
    20b4:	98 85       	ldd	r25, Y+8	; 0x08
    20b6:	83 30       	cpi	r24, 0x03	; 3
    20b8:	91 05       	cpc	r25, r1
    20ba:	e9 f1       	breq	.+122    	; 0x2136 <DIO_u8SetPinValue+0xe2>
    20bc:	50 c0       	rjmp	.+160    	; 0x215e <DIO_u8SetPinValue+0x10a>
			{
				case DIO_PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
    20be:	ab e3       	ldi	r26, 0x3B	; 59
    20c0:	b0 e0       	ldi	r27, 0x00	; 0
    20c2:	eb e3       	ldi	r30, 0x3B	; 59
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	48 2f       	mov	r20, r24
    20ca:	8b 81       	ldd	r24, Y+3	; 0x03
    20cc:	28 2f       	mov	r18, r24
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	02 2e       	mov	r0, r18
    20d6:	02 c0       	rjmp	.+4      	; 0x20dc <DIO_u8SetPinValue+0x88>
    20d8:	88 0f       	add	r24, r24
    20da:	99 1f       	adc	r25, r25
    20dc:	0a 94       	dec	r0
    20de:	e2 f7       	brpl	.-8      	; 0x20d8 <DIO_u8SetPinValue+0x84>
    20e0:	84 2b       	or	r24, r20
    20e2:	8c 93       	st	X, r24
    20e4:	c6 c0       	rjmp	.+396    	; 0x2272 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
    20e6:	a8 e3       	ldi	r26, 0x38	; 56
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	e8 e3       	ldi	r30, 0x38	; 56
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	80 81       	ld	r24, Z
    20f0:	48 2f       	mov	r20, r24
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	28 2f       	mov	r18, r24
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	02 2e       	mov	r0, r18
    20fe:	02 c0       	rjmp	.+4      	; 0x2104 <DIO_u8SetPinValue+0xb0>
    2100:	88 0f       	add	r24, r24
    2102:	99 1f       	adc	r25, r25
    2104:	0a 94       	dec	r0
    2106:	e2 f7       	brpl	.-8      	; 0x2100 <DIO_u8SetPinValue+0xac>
    2108:	84 2b       	or	r24, r20
    210a:	8c 93       	st	X, r24
    210c:	b2 c0       	rjmp	.+356    	; 0x2272 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
    210e:	a5 e3       	ldi	r26, 0x35	; 53
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	e5 e3       	ldi	r30, 0x35	; 53
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	48 2f       	mov	r20, r24
    211a:	8b 81       	ldd	r24, Y+3	; 0x03
    211c:	28 2f       	mov	r18, r24
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	02 2e       	mov	r0, r18
    2126:	02 c0       	rjmp	.+4      	; 0x212c <DIO_u8SetPinValue+0xd8>
    2128:	88 0f       	add	r24, r24
    212a:	99 1f       	adc	r25, r25
    212c:	0a 94       	dec	r0
    212e:	e2 f7       	brpl	.-8      	; 0x2128 <DIO_u8SetPinValue+0xd4>
    2130:	84 2b       	or	r24, r20
    2132:	8c 93       	st	X, r24
    2134:	9e c0       	rjmp	.+316    	; 0x2272 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
    2136:	a2 e3       	ldi	r26, 0x32	; 50
    2138:	b0 e0       	ldi	r27, 0x00	; 0
    213a:	e2 e3       	ldi	r30, 0x32	; 50
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	48 2f       	mov	r20, r24
    2142:	8b 81       	ldd	r24, Y+3	; 0x03
    2144:	28 2f       	mov	r18, r24
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	02 2e       	mov	r0, r18
    214e:	02 c0       	rjmp	.+4      	; 0x2154 <DIO_u8SetPinValue+0x100>
    2150:	88 0f       	add	r24, r24
    2152:	99 1f       	adc	r25, r25
    2154:	0a 94       	dec	r0
    2156:	e2 f7       	brpl	.-8      	; 0x2150 <DIO_u8SetPinValue+0xfc>
    2158:	84 2b       	or	r24, r20
    215a:	8c 93       	st	X, r24
    215c:	8a c0       	rjmp	.+276    	; 0x2272 <DIO_u8SetPinValue+0x21e>
				default: Local_u8ErrorState=1;				
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	89 83       	std	Y+1, r24	; 0x01
    2162:	87 c0       	rjmp	.+270    	; 0x2272 <DIO_u8SetPinValue+0x21e>
			}
		}
		else
			Local_u8ErrorState=1;
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	89 83       	std	Y+1, r24	; 0x01
    2168:	84 c0       	rjmp	.+264    	; 0x2272 <DIO_u8SetPinValue+0x21e>
	}
	else if(DIO_PIN_LOW==Copy_u8Value)
    216a:	8c 81       	ldd	r24, Y+4	; 0x04
    216c:	88 23       	and	r24, r24
    216e:	09 f0       	breq	.+2      	; 0x2172 <DIO_u8SetPinValue+0x11e>
    2170:	7e c0       	rjmp	.+252    	; 0x226e <DIO_u8SetPinValue+0x21a>
	{
		if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    2172:	8b 81       	ldd	r24, Y+3	; 0x03
    2174:	88 30       	cpi	r24, 0x08	; 8
    2176:	08 f0       	brcs	.+2      	; 0x217a <DIO_u8SetPinValue+0x126>
    2178:	77 c0       	rjmp	.+238    	; 0x2268 <DIO_u8SetPinValue+0x214>
		{
			switch(Copy_u8Port)
    217a:	8a 81       	ldd	r24, Y+2	; 0x02
    217c:	28 2f       	mov	r18, r24
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	3e 83       	std	Y+6, r19	; 0x06
    2182:	2d 83       	std	Y+5, r18	; 0x05
    2184:	8d 81       	ldd	r24, Y+5	; 0x05
    2186:	9e 81       	ldd	r25, Y+6	; 0x06
    2188:	81 30       	cpi	r24, 0x01	; 1
    218a:	91 05       	cpc	r25, r1
    218c:	59 f1       	breq	.+86     	; 0x21e4 <DIO_u8SetPinValue+0x190>
    218e:	2d 81       	ldd	r18, Y+5	; 0x05
    2190:	3e 81       	ldd	r19, Y+6	; 0x06
    2192:	22 30       	cpi	r18, 0x02	; 2
    2194:	31 05       	cpc	r19, r1
    2196:	2c f4       	brge	.+10     	; 0x21a2 <DIO_u8SetPinValue+0x14e>
    2198:	8d 81       	ldd	r24, Y+5	; 0x05
    219a:	9e 81       	ldd	r25, Y+6	; 0x06
    219c:	00 97       	sbiw	r24, 0x00	; 0
    219e:	69 f0       	breq	.+26     	; 0x21ba <DIO_u8SetPinValue+0x166>
    21a0:	60 c0       	rjmp	.+192    	; 0x2262 <DIO_u8SetPinValue+0x20e>
    21a2:	2d 81       	ldd	r18, Y+5	; 0x05
    21a4:	3e 81       	ldd	r19, Y+6	; 0x06
    21a6:	22 30       	cpi	r18, 0x02	; 2
    21a8:	31 05       	cpc	r19, r1
    21aa:	89 f1       	breq	.+98     	; 0x220e <DIO_u8SetPinValue+0x1ba>
    21ac:	8d 81       	ldd	r24, Y+5	; 0x05
    21ae:	9e 81       	ldd	r25, Y+6	; 0x06
    21b0:	83 30       	cpi	r24, 0x03	; 3
    21b2:	91 05       	cpc	r25, r1
    21b4:	09 f4       	brne	.+2      	; 0x21b8 <DIO_u8SetPinValue+0x164>
    21b6:	40 c0       	rjmp	.+128    	; 0x2238 <DIO_u8SetPinValue+0x1e4>
    21b8:	54 c0       	rjmp	.+168    	; 0x2262 <DIO_u8SetPinValue+0x20e>
			{
				case DIO_PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
    21ba:	ab e3       	ldi	r26, 0x3B	; 59
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	eb e3       	ldi	r30, 0x3B	; 59
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	48 2f       	mov	r20, r24
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
    21c8:	28 2f       	mov	r18, r24
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	02 2e       	mov	r0, r18
    21d2:	02 c0       	rjmp	.+4      	; 0x21d8 <DIO_u8SetPinValue+0x184>
    21d4:	88 0f       	add	r24, r24
    21d6:	99 1f       	adc	r25, r25
    21d8:	0a 94       	dec	r0
    21da:	e2 f7       	brpl	.-8      	; 0x21d4 <DIO_u8SetPinValue+0x180>
    21dc:	80 95       	com	r24
    21de:	84 23       	and	r24, r20
    21e0:	8c 93       	st	X, r24
    21e2:	47 c0       	rjmp	.+142    	; 0x2272 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
    21e4:	a8 e3       	ldi	r26, 0x38	; 56
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	e8 e3       	ldi	r30, 0x38	; 56
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	80 81       	ld	r24, Z
    21ee:	48 2f       	mov	r20, r24
    21f0:	8b 81       	ldd	r24, Y+3	; 0x03
    21f2:	28 2f       	mov	r18, r24
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	02 2e       	mov	r0, r18
    21fc:	02 c0       	rjmp	.+4      	; 0x2202 <DIO_u8SetPinValue+0x1ae>
    21fe:	88 0f       	add	r24, r24
    2200:	99 1f       	adc	r25, r25
    2202:	0a 94       	dec	r0
    2204:	e2 f7       	brpl	.-8      	; 0x21fe <DIO_u8SetPinValue+0x1aa>
    2206:	80 95       	com	r24
    2208:	84 23       	and	r24, r20
    220a:	8c 93       	st	X, r24
    220c:	32 c0       	rjmp	.+100    	; 0x2272 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
    220e:	a5 e3       	ldi	r26, 0x35	; 53
    2210:	b0 e0       	ldi	r27, 0x00	; 0
    2212:	e5 e3       	ldi	r30, 0x35	; 53
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	80 81       	ld	r24, Z
    2218:	48 2f       	mov	r20, r24
    221a:	8b 81       	ldd	r24, Y+3	; 0x03
    221c:	28 2f       	mov	r18, r24
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	02 2e       	mov	r0, r18
    2226:	02 c0       	rjmp	.+4      	; 0x222c <DIO_u8SetPinValue+0x1d8>
    2228:	88 0f       	add	r24, r24
    222a:	99 1f       	adc	r25, r25
    222c:	0a 94       	dec	r0
    222e:	e2 f7       	brpl	.-8      	; 0x2228 <DIO_u8SetPinValue+0x1d4>
    2230:	80 95       	com	r24
    2232:	84 23       	and	r24, r20
    2234:	8c 93       	st	X, r24
    2236:	1d c0       	rjmp	.+58     	; 0x2272 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
    2238:	a2 e3       	ldi	r26, 0x32	; 50
    223a:	b0 e0       	ldi	r27, 0x00	; 0
    223c:	e2 e3       	ldi	r30, 0x32	; 50
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	48 2f       	mov	r20, r24
    2244:	8b 81       	ldd	r24, Y+3	; 0x03
    2246:	28 2f       	mov	r18, r24
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	02 2e       	mov	r0, r18
    2250:	02 c0       	rjmp	.+4      	; 0x2256 <DIO_u8SetPinValue+0x202>
    2252:	88 0f       	add	r24, r24
    2254:	99 1f       	adc	r25, r25
    2256:	0a 94       	dec	r0
    2258:	e2 f7       	brpl	.-8      	; 0x2252 <DIO_u8SetPinValue+0x1fe>
    225a:	80 95       	com	r24
    225c:	84 23       	and	r24, r20
    225e:	8c 93       	st	X, r24
    2260:	08 c0       	rjmp	.+16     	; 0x2272 <DIO_u8SetPinValue+0x21e>
				default: Local_u8ErrorState=1;	
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	89 83       	std	Y+1, r24	; 0x01
    2266:	05 c0       	rjmp	.+10     	; 0x2272 <DIO_u8SetPinValue+0x21e>
			}
		}
		else
			Local_u8ErrorState=1;	
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	89 83       	std	Y+1, r24	; 0x01
    226c:	02 c0       	rjmp	.+4      	; 0x2272 <DIO_u8SetPinValue+0x21e>
	}
	else
		Local_u8ErrorState=1;	
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2272:	89 81       	ldd	r24, Y+1	; 0x01
}
    2274:	28 96       	adiw	r28, 0x08	; 8
    2276:	0f b6       	in	r0, 0x3f	; 63
    2278:	f8 94       	cli
    227a:	de bf       	out	0x3e, r29	; 62
    227c:	0f be       	out	0x3f, r0	; 63
    227e:	cd bf       	out	0x3d, r28	; 61
    2280:	cf 91       	pop	r28
    2282:	df 91       	pop	r29
    2284:	08 95       	ret

00002286 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    2286:	df 93       	push	r29
    2288:	cf 93       	push	r28
    228a:	00 d0       	rcall	.+0      	; 0x228c <DIO_u8SetPortValue+0x6>
    228c:	00 d0       	rcall	.+0      	; 0x228e <DIO_u8SetPortValue+0x8>
    228e:	0f 92       	push	r0
    2290:	cd b7       	in	r28, 0x3d	; 61
    2292:	de b7       	in	r29, 0x3e	; 62
    2294:	8a 83       	std	Y+2, r24	; 0x02
    2296:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    2298:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port<=7)
    229a:	8a 81       	ldd	r24, Y+2	; 0x02
    229c:	88 30       	cpi	r24, 0x08	; 8
    229e:	b0 f5       	brcc	.+108    	; 0x230c <DIO_u8SetPortValue+0x86>
	{
		switch(Copy_u8Port)
    22a0:	8a 81       	ldd	r24, Y+2	; 0x02
    22a2:	28 2f       	mov	r18, r24
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	3d 83       	std	Y+5, r19	; 0x05
    22a8:	2c 83       	std	Y+4, r18	; 0x04
    22aa:	8c 81       	ldd	r24, Y+4	; 0x04
    22ac:	9d 81       	ldd	r25, Y+5	; 0x05
    22ae:	81 30       	cpi	r24, 0x01	; 1
    22b0:	91 05       	cpc	r25, r1
    22b2:	d1 f0       	breq	.+52     	; 0x22e8 <DIO_u8SetPortValue+0x62>
    22b4:	2c 81       	ldd	r18, Y+4	; 0x04
    22b6:	3d 81       	ldd	r19, Y+5	; 0x05
    22b8:	22 30       	cpi	r18, 0x02	; 2
    22ba:	31 05       	cpc	r19, r1
    22bc:	2c f4       	brge	.+10     	; 0x22c8 <DIO_u8SetPortValue+0x42>
    22be:	8c 81       	ldd	r24, Y+4	; 0x04
    22c0:	9d 81       	ldd	r25, Y+5	; 0x05
    22c2:	00 97       	sbiw	r24, 0x00	; 0
    22c4:	61 f0       	breq	.+24     	; 0x22de <DIO_u8SetPortValue+0x58>
    22c6:	1f c0       	rjmp	.+62     	; 0x2306 <DIO_u8SetPortValue+0x80>
    22c8:	2c 81       	ldd	r18, Y+4	; 0x04
    22ca:	3d 81       	ldd	r19, Y+5	; 0x05
    22cc:	22 30       	cpi	r18, 0x02	; 2
    22ce:	31 05       	cpc	r19, r1
    22d0:	81 f0       	breq	.+32     	; 0x22f2 <DIO_u8SetPortValue+0x6c>
    22d2:	8c 81       	ldd	r24, Y+4	; 0x04
    22d4:	9d 81       	ldd	r25, Y+5	; 0x05
    22d6:	83 30       	cpi	r24, 0x03	; 3
    22d8:	91 05       	cpc	r25, r1
    22da:	81 f0       	breq	.+32     	; 0x22fc <DIO_u8SetPortValue+0x76>
    22dc:	14 c0       	rjmp	.+40     	; 0x2306 <DIO_u8SetPortValue+0x80>
		{
			case DIO_PORTA:PORTA=Copy_u8Value;break;
    22de:	eb e3       	ldi	r30, 0x3B	; 59
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	8b 81       	ldd	r24, Y+3	; 0x03
    22e4:	80 83       	st	Z, r24
    22e6:	14 c0       	rjmp	.+40     	; 0x2310 <DIO_u8SetPortValue+0x8a>
			case DIO_PORTB:PORTB=Copy_u8Value;break;
    22e8:	e8 e3       	ldi	r30, 0x38	; 56
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	8b 81       	ldd	r24, Y+3	; 0x03
    22ee:	80 83       	st	Z, r24
    22f0:	0f c0       	rjmp	.+30     	; 0x2310 <DIO_u8SetPortValue+0x8a>
			case DIO_PORTC:PORTC=Copy_u8Value;break;
    22f2:	e5 e3       	ldi	r30, 0x35	; 53
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	8b 81       	ldd	r24, Y+3	; 0x03
    22f8:	80 83       	st	Z, r24
    22fa:	0a c0       	rjmp	.+20     	; 0x2310 <DIO_u8SetPortValue+0x8a>
			case DIO_PORTD:PORTD=Copy_u8Value;break;
    22fc:	e2 e3       	ldi	r30, 0x32	; 50
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	8b 81       	ldd	r24, Y+3	; 0x03
    2302:	80 83       	st	Z, r24
    2304:	05 c0       	rjmp	.+10     	; 0x2310 <DIO_u8SetPortValue+0x8a>
			default: Local_u8ErrorState=1;
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	89 83       	std	Y+1, r24	; 0x01
    230a:	02 c0       	rjmp	.+4      	; 0x2310 <DIO_u8SetPortValue+0x8a>
		}
	}
	else
		Local_u8ErrorState = NOTOK;
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2310:	89 81       	ldd	r24, Y+1	; 0x01
}
    2312:	0f 90       	pop	r0
    2314:	0f 90       	pop	r0
    2316:	0f 90       	pop	r0
    2318:	0f 90       	pop	r0
    231a:	0f 90       	pop	r0
    231c:	cf 91       	pop	r28
    231e:	df 91       	pop	r29
    2320:	08 95       	ret

00002322 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 *Copy_pu8Value)
{
    2322:	df 93       	push	r29
    2324:	cf 93       	push	r28
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
    232a:	27 97       	sbiw	r28, 0x07	; 7
    232c:	0f b6       	in	r0, 0x3f	; 63
    232e:	f8 94       	cli
    2330:	de bf       	out	0x3e, r29	; 62
    2332:	0f be       	out	0x3f, r0	; 63
    2334:	cd bf       	out	0x3d, r28	; 61
    2336:	8a 83       	std	Y+2, r24	; 0x02
    2338:	6b 83       	std	Y+3, r22	; 0x03
    233a:	5d 83       	std	Y+5, r21	; 0x05
    233c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    233e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value!=NULL)
    2340:	8c 81       	ldd	r24, Y+4	; 0x04
    2342:	9d 81       	ldd	r25, Y+5	; 0x05
    2344:	00 97       	sbiw	r24, 0x00	; 0
    2346:	09 f4       	brne	.+2      	; 0x234a <DIO_u8GetPinValue+0x28>
    2348:	7b c0       	rjmp	.+246    	; 0x2440 <DIO_u8GetPinValue+0x11e>
	{


		if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    234a:	8b 81       	ldd	r24, Y+3	; 0x03
    234c:	88 30       	cpi	r24, 0x08	; 8
    234e:	08 f0       	brcs	.+2      	; 0x2352 <DIO_u8GetPinValue+0x30>
    2350:	74 c0       	rjmp	.+232    	; 0x243a <DIO_u8GetPinValue+0x118>
		{
			switch(Copy_u8Port)
    2352:	8a 81       	ldd	r24, Y+2	; 0x02
    2354:	28 2f       	mov	r18, r24
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	3f 83       	std	Y+7, r19	; 0x07
    235a:	2e 83       	std	Y+6, r18	; 0x06
    235c:	4e 81       	ldd	r20, Y+6	; 0x06
    235e:	5f 81       	ldd	r21, Y+7	; 0x07
    2360:	41 30       	cpi	r20, 0x01	; 1
    2362:	51 05       	cpc	r21, r1
    2364:	59 f1       	breq	.+86     	; 0x23bc <DIO_u8GetPinValue+0x9a>
    2366:	8e 81       	ldd	r24, Y+6	; 0x06
    2368:	9f 81       	ldd	r25, Y+7	; 0x07
    236a:	82 30       	cpi	r24, 0x02	; 2
    236c:	91 05       	cpc	r25, r1
    236e:	34 f4       	brge	.+12     	; 0x237c <DIO_u8GetPinValue+0x5a>
    2370:	2e 81       	ldd	r18, Y+6	; 0x06
    2372:	3f 81       	ldd	r19, Y+7	; 0x07
    2374:	21 15       	cp	r18, r1
    2376:	31 05       	cpc	r19, r1
    2378:	69 f0       	breq	.+26     	; 0x2394 <DIO_u8GetPinValue+0x72>
    237a:	5c c0       	rjmp	.+184    	; 0x2434 <DIO_u8GetPinValue+0x112>
    237c:	4e 81       	ldd	r20, Y+6	; 0x06
    237e:	5f 81       	ldd	r21, Y+7	; 0x07
    2380:	42 30       	cpi	r20, 0x02	; 2
    2382:	51 05       	cpc	r21, r1
    2384:	79 f1       	breq	.+94     	; 0x23e4 <DIO_u8GetPinValue+0xc2>
    2386:	8e 81       	ldd	r24, Y+6	; 0x06
    2388:	9f 81       	ldd	r25, Y+7	; 0x07
    238a:	83 30       	cpi	r24, 0x03	; 3
    238c:	91 05       	cpc	r25, r1
    238e:	09 f4       	brne	.+2      	; 0x2392 <DIO_u8GetPinValue+0x70>
    2390:	3d c0       	rjmp	.+122    	; 0x240c <DIO_u8GetPinValue+0xea>
    2392:	50 c0       	rjmp	.+160    	; 0x2434 <DIO_u8GetPinValue+0x112>
			{
				case DIO_PORTA:*Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin);break;
    2394:	e9 e3       	ldi	r30, 0x39	; 57
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	80 81       	ld	r24, Z
    239a:	28 2f       	mov	r18, r24
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	8b 81       	ldd	r24, Y+3	; 0x03
    23a0:	88 2f       	mov	r24, r24
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	a9 01       	movw	r20, r18
    23a6:	02 c0       	rjmp	.+4      	; 0x23ac <DIO_u8GetPinValue+0x8a>
    23a8:	55 95       	asr	r21
    23aa:	47 95       	ror	r20
    23ac:	8a 95       	dec	r24
    23ae:	e2 f7       	brpl	.-8      	; 0x23a8 <DIO_u8GetPinValue+0x86>
    23b0:	ca 01       	movw	r24, r20
    23b2:	81 70       	andi	r24, 0x01	; 1
    23b4:	ec 81       	ldd	r30, Y+4	; 0x04
    23b6:	fd 81       	ldd	r31, Y+5	; 0x05
    23b8:	80 83       	st	Z, r24
    23ba:	44 c0       	rjmp	.+136    	; 0x2444 <DIO_u8GetPinValue+0x122>
				case DIO_PORTB:*Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin);break;
    23bc:	e6 e3       	ldi	r30, 0x36	; 54
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	80 81       	ld	r24, Z
    23c2:	28 2f       	mov	r18, r24
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	8b 81       	ldd	r24, Y+3	; 0x03
    23c8:	88 2f       	mov	r24, r24
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	a9 01       	movw	r20, r18
    23ce:	02 c0       	rjmp	.+4      	; 0x23d4 <DIO_u8GetPinValue+0xb2>
    23d0:	55 95       	asr	r21
    23d2:	47 95       	ror	r20
    23d4:	8a 95       	dec	r24
    23d6:	e2 f7       	brpl	.-8      	; 0x23d0 <DIO_u8GetPinValue+0xae>
    23d8:	ca 01       	movw	r24, r20
    23da:	81 70       	andi	r24, 0x01	; 1
    23dc:	ec 81       	ldd	r30, Y+4	; 0x04
    23de:	fd 81       	ldd	r31, Y+5	; 0x05
    23e0:	80 83       	st	Z, r24
    23e2:	30 c0       	rjmp	.+96     	; 0x2444 <DIO_u8GetPinValue+0x122>
				case DIO_PORTC:*Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin);break;
    23e4:	e3 e3       	ldi	r30, 0x33	; 51
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	80 81       	ld	r24, Z
    23ea:	28 2f       	mov	r18, r24
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	8b 81       	ldd	r24, Y+3	; 0x03
    23f0:	88 2f       	mov	r24, r24
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	a9 01       	movw	r20, r18
    23f6:	02 c0       	rjmp	.+4      	; 0x23fc <DIO_u8GetPinValue+0xda>
    23f8:	55 95       	asr	r21
    23fa:	47 95       	ror	r20
    23fc:	8a 95       	dec	r24
    23fe:	e2 f7       	brpl	.-8      	; 0x23f8 <DIO_u8GetPinValue+0xd6>
    2400:	ca 01       	movw	r24, r20
    2402:	81 70       	andi	r24, 0x01	; 1
    2404:	ec 81       	ldd	r30, Y+4	; 0x04
    2406:	fd 81       	ldd	r31, Y+5	; 0x05
    2408:	80 83       	st	Z, r24
    240a:	1c c0       	rjmp	.+56     	; 0x2444 <DIO_u8GetPinValue+0x122>
				case DIO_PORTD:*Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin);break;
    240c:	e0 e3       	ldi	r30, 0x30	; 48
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	80 81       	ld	r24, Z
    2412:	28 2f       	mov	r18, r24
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	8b 81       	ldd	r24, Y+3	; 0x03
    2418:	88 2f       	mov	r24, r24
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	a9 01       	movw	r20, r18
    241e:	02 c0       	rjmp	.+4      	; 0x2424 <DIO_u8GetPinValue+0x102>
    2420:	55 95       	asr	r21
    2422:	47 95       	ror	r20
    2424:	8a 95       	dec	r24
    2426:	e2 f7       	brpl	.-8      	; 0x2420 <DIO_u8GetPinValue+0xfe>
    2428:	ca 01       	movw	r24, r20
    242a:	81 70       	andi	r24, 0x01	; 1
    242c:	ec 81       	ldd	r30, Y+4	; 0x04
    242e:	fd 81       	ldd	r31, Y+5	; 0x05
    2430:	80 83       	st	Z, r24
    2432:	08 c0       	rjmp	.+16     	; 0x2444 <DIO_u8GetPinValue+0x122>
				default: Local_u8ErrorState=1;
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	89 83       	std	Y+1, r24	; 0x01
    2438:	05 c0       	rjmp	.+10     	; 0x2444 <DIO_u8GetPinValue+0x122>
			}
		}
		else
			Local_u8ErrorState=1;
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	89 83       	std	Y+1, r24	; 0x01
    243e:	02 c0       	rjmp	.+4      	; 0x2444 <DIO_u8GetPinValue+0x122>
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    2440:	82 e0       	ldi	r24, 0x02	; 2
    2442:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2444:	89 81       	ldd	r24, Y+1	; 0x01
}
    2446:	27 96       	adiw	r28, 0x07	; 7
    2448:	0f b6       	in	r0, 0x3f	; 63
    244a:	f8 94       	cli
    244c:	de bf       	out	0x3e, r29	; 62
    244e:	0f be       	out	0x3f, r0	; 63
    2450:	cd bf       	out	0x3d, r28	; 61
    2452:	cf 91       	pop	r28
    2454:	df 91       	pop	r29
    2456:	08 95       	ret

00002458 <DIO_u8TogglePinValue>:
u8 DIO_u8TogglePinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
{
    2458:	df 93       	push	r29
    245a:	cf 93       	push	r28
    245c:	00 d0       	rcall	.+0      	; 0x245e <DIO_u8TogglePinValue+0x6>
    245e:	00 d0       	rcall	.+0      	; 0x2460 <DIO_u8TogglePinValue+0x8>
    2460:	0f 92       	push	r0
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
    2466:	8a 83       	std	Y+2, r24	; 0x02
    2468:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    246a:	19 82       	std	Y+1, r1	; 0x01
	if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    246c:	8b 81       	ldd	r24, Y+3	; 0x03
    246e:	88 30       	cpi	r24, 0x08	; 8
    2470:	08 f0       	brcs	.+2      	; 0x2474 <DIO_u8TogglePinValue+0x1c>
    2472:	72 c0       	rjmp	.+228    	; 0x2558 <DIO_u8TogglePinValue+0x100>
	{
		switch(Copy_u8Port)
    2474:	8a 81       	ldd	r24, Y+2	; 0x02
    2476:	28 2f       	mov	r18, r24
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	3d 83       	std	Y+5, r19	; 0x05
    247c:	2c 83       	std	Y+4, r18	; 0x04
    247e:	8c 81       	ldd	r24, Y+4	; 0x04
    2480:	9d 81       	ldd	r25, Y+5	; 0x05
    2482:	81 30       	cpi	r24, 0x01	; 1
    2484:	91 05       	cpc	r25, r1
    2486:	49 f1       	breq	.+82     	; 0x24da <DIO_u8TogglePinValue+0x82>
    2488:	2c 81       	ldd	r18, Y+4	; 0x04
    248a:	3d 81       	ldd	r19, Y+5	; 0x05
    248c:	22 30       	cpi	r18, 0x02	; 2
    248e:	31 05       	cpc	r19, r1
    2490:	2c f4       	brge	.+10     	; 0x249c <DIO_u8TogglePinValue+0x44>
    2492:	8c 81       	ldd	r24, Y+4	; 0x04
    2494:	9d 81       	ldd	r25, Y+5	; 0x05
    2496:	00 97       	sbiw	r24, 0x00	; 0
    2498:	61 f0       	breq	.+24     	; 0x24b2 <DIO_u8TogglePinValue+0x5a>
    249a:	5b c0       	rjmp	.+182    	; 0x2552 <DIO_u8TogglePinValue+0xfa>
    249c:	2c 81       	ldd	r18, Y+4	; 0x04
    249e:	3d 81       	ldd	r19, Y+5	; 0x05
    24a0:	22 30       	cpi	r18, 0x02	; 2
    24a2:	31 05       	cpc	r19, r1
    24a4:	71 f1       	breq	.+92     	; 0x2502 <DIO_u8TogglePinValue+0xaa>
    24a6:	8c 81       	ldd	r24, Y+4	; 0x04
    24a8:	9d 81       	ldd	r25, Y+5	; 0x05
    24aa:	83 30       	cpi	r24, 0x03	; 3
    24ac:	91 05       	cpc	r25, r1
    24ae:	e9 f1       	breq	.+122    	; 0x252a <DIO_u8TogglePinValue+0xd2>
    24b0:	50 c0       	rjmp	.+160    	; 0x2552 <DIO_u8TogglePinValue+0xfa>
		{
			case DIO_PORTA:TOG_BIT(PORTA,Copy_u8Pin);break;
    24b2:	ab e3       	ldi	r26, 0x3B	; 59
    24b4:	b0 e0       	ldi	r27, 0x00	; 0
    24b6:	eb e3       	ldi	r30, 0x3B	; 59
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	80 81       	ld	r24, Z
    24bc:	48 2f       	mov	r20, r24
    24be:	8b 81       	ldd	r24, Y+3	; 0x03
    24c0:	28 2f       	mov	r18, r24
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	02 2e       	mov	r0, r18
    24ca:	02 c0       	rjmp	.+4      	; 0x24d0 <DIO_u8TogglePinValue+0x78>
    24cc:	88 0f       	add	r24, r24
    24ce:	99 1f       	adc	r25, r25
    24d0:	0a 94       	dec	r0
    24d2:	e2 f7       	brpl	.-8      	; 0x24cc <DIO_u8TogglePinValue+0x74>
    24d4:	84 27       	eor	r24, r20
    24d6:	8c 93       	st	X, r24
    24d8:	41 c0       	rjmp	.+130    	; 0x255c <DIO_u8TogglePinValue+0x104>
			case DIO_PORTB:TOG_BIT(PORTB,Copy_u8Pin);break;
    24da:	a8 e3       	ldi	r26, 0x38	; 56
    24dc:	b0 e0       	ldi	r27, 0x00	; 0
    24de:	e8 e3       	ldi	r30, 0x38	; 56
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	80 81       	ld	r24, Z
    24e4:	48 2f       	mov	r20, r24
    24e6:	8b 81       	ldd	r24, Y+3	; 0x03
    24e8:	28 2f       	mov	r18, r24
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	02 2e       	mov	r0, r18
    24f2:	02 c0       	rjmp	.+4      	; 0x24f8 <DIO_u8TogglePinValue+0xa0>
    24f4:	88 0f       	add	r24, r24
    24f6:	99 1f       	adc	r25, r25
    24f8:	0a 94       	dec	r0
    24fa:	e2 f7       	brpl	.-8      	; 0x24f4 <DIO_u8TogglePinValue+0x9c>
    24fc:	84 27       	eor	r24, r20
    24fe:	8c 93       	st	X, r24
    2500:	2d c0       	rjmp	.+90     	; 0x255c <DIO_u8TogglePinValue+0x104>
			case DIO_PORTC:TOG_BIT(PORTC,Copy_u8Pin);break;
    2502:	a5 e3       	ldi	r26, 0x35	; 53
    2504:	b0 e0       	ldi	r27, 0x00	; 0
    2506:	e5 e3       	ldi	r30, 0x35	; 53
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	80 81       	ld	r24, Z
    250c:	48 2f       	mov	r20, r24
    250e:	8b 81       	ldd	r24, Y+3	; 0x03
    2510:	28 2f       	mov	r18, r24
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	02 2e       	mov	r0, r18
    251a:	02 c0       	rjmp	.+4      	; 0x2520 <DIO_u8TogglePinValue+0xc8>
    251c:	88 0f       	add	r24, r24
    251e:	99 1f       	adc	r25, r25
    2520:	0a 94       	dec	r0
    2522:	e2 f7       	brpl	.-8      	; 0x251c <DIO_u8TogglePinValue+0xc4>
    2524:	84 27       	eor	r24, r20
    2526:	8c 93       	st	X, r24
    2528:	19 c0       	rjmp	.+50     	; 0x255c <DIO_u8TogglePinValue+0x104>
			case DIO_PORTD:TOG_BIT(PORTD,Copy_u8Pin);break;
    252a:	a2 e3       	ldi	r26, 0x32	; 50
    252c:	b0 e0       	ldi	r27, 0x00	; 0
    252e:	e2 e3       	ldi	r30, 0x32	; 50
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	80 81       	ld	r24, Z
    2534:	48 2f       	mov	r20, r24
    2536:	8b 81       	ldd	r24, Y+3	; 0x03
    2538:	28 2f       	mov	r18, r24
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	02 2e       	mov	r0, r18
    2542:	02 c0       	rjmp	.+4      	; 0x2548 <DIO_u8TogglePinValue+0xf0>
    2544:	88 0f       	add	r24, r24
    2546:	99 1f       	adc	r25, r25
    2548:	0a 94       	dec	r0
    254a:	e2 f7       	brpl	.-8      	; 0x2544 <DIO_u8TogglePinValue+0xec>
    254c:	84 27       	eor	r24, r20
    254e:	8c 93       	st	X, r24
    2550:	05 c0       	rjmp	.+10     	; 0x255c <DIO_u8TogglePinValue+0x104>
			default: Local_u8ErrorState=1;
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	89 83       	std	Y+1, r24	; 0x01
    2556:	02 c0       	rjmp	.+4      	; 0x255c <DIO_u8TogglePinValue+0x104>
		}
	}
	else
		Local_u8ErrorState=1;
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    255c:	89 81       	ldd	r24, Y+1	; 0x01
}
    255e:	0f 90       	pop	r0
    2560:	0f 90       	pop	r0
    2562:	0f 90       	pop	r0
    2564:	0f 90       	pop	r0
    2566:	0f 90       	pop	r0
    2568:	cf 91       	pop	r28
    256a:	df 91       	pop	r29
    256c:	08 95       	ret

0000256e <DIO_u8SetLowNibbleValue>:

u8 DIO_u8SetLowNibbleValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    256e:	df 93       	push	r29
    2570:	cf 93       	push	r28
    2572:	00 d0       	rcall	.+0      	; 0x2574 <DIO_u8SetLowNibbleValue+0x6>
    2574:	00 d0       	rcall	.+0      	; 0x2576 <DIO_u8SetLowNibbleValue+0x8>
    2576:	0f 92       	push	r0
    2578:	cd b7       	in	r28, 0x3d	; 61
    257a:	de b7       	in	r29, 0x3e	; 62
    257c:	8a 83       	std	Y+2, r24	; 0x02
    257e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    2580:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port<=DIO_PORTD){
    2582:	8a 81       	ldd	r24, Y+2	; 0x02
    2584:	84 30       	cpi	r24, 0x04	; 4
    2586:	08 f0       	brcs	.+2      	; 0x258a <DIO_u8SetLowNibbleValue+0x1c>
    2588:	62 c0       	rjmp	.+196    	; 0x264e <DIO_u8SetLowNibbleValue+0xe0>
		switch(Copy_u8Port)
    258a:	8a 81       	ldd	r24, Y+2	; 0x02
    258c:	28 2f       	mov	r18, r24
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	3d 83       	std	Y+5, r19	; 0x05
    2592:	2c 83       	std	Y+4, r18	; 0x04
    2594:	8c 81       	ldd	r24, Y+4	; 0x04
    2596:	9d 81       	ldd	r25, Y+5	; 0x05
    2598:	81 30       	cpi	r24, 0x01	; 1
    259a:	91 05       	cpc	r25, r1
    259c:	29 f1       	breq	.+74     	; 0x25e8 <DIO_u8SetLowNibbleValue+0x7a>
    259e:	2c 81       	ldd	r18, Y+4	; 0x04
    25a0:	3d 81       	ldd	r19, Y+5	; 0x05
    25a2:	22 30       	cpi	r18, 0x02	; 2
    25a4:	31 05       	cpc	r19, r1
    25a6:	2c f4       	brge	.+10     	; 0x25b2 <DIO_u8SetLowNibbleValue+0x44>
    25a8:	8c 81       	ldd	r24, Y+4	; 0x04
    25aa:	9d 81       	ldd	r25, Y+5	; 0x05
    25ac:	00 97       	sbiw	r24, 0x00	; 0
    25ae:	61 f0       	breq	.+24     	; 0x25c8 <DIO_u8SetLowNibbleValue+0x5a>
    25b0:	4b c0       	rjmp	.+150    	; 0x2648 <DIO_u8SetLowNibbleValue+0xda>
    25b2:	2c 81       	ldd	r18, Y+4	; 0x04
    25b4:	3d 81       	ldd	r19, Y+5	; 0x05
    25b6:	22 30       	cpi	r18, 0x02	; 2
    25b8:	31 05       	cpc	r19, r1
    25ba:	31 f1       	breq	.+76     	; 0x2608 <DIO_u8SetLowNibbleValue+0x9a>
    25bc:	8c 81       	ldd	r24, Y+4	; 0x04
    25be:	9d 81       	ldd	r25, Y+5	; 0x05
    25c0:	83 30       	cpi	r24, 0x03	; 3
    25c2:	91 05       	cpc	r25, r1
    25c4:	89 f1       	breq	.+98     	; 0x2628 <DIO_u8SetLowNibbleValue+0xba>
    25c6:	40 c0       	rjmp	.+128    	; 0x2648 <DIO_u8SetLowNibbleValue+0xda>
		{
			case DIO_PORTA:PORTA&=DIO_LOWNIBBLE_MASK;PORTA|=Copy_u8Value;break;
    25c8:	ab e3       	ldi	r26, 0x3B	; 59
    25ca:	b0 e0       	ldi	r27, 0x00	; 0
    25cc:	eb e3       	ldi	r30, 0x3B	; 59
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	80 81       	ld	r24, Z
    25d2:	80 7f       	andi	r24, 0xF0	; 240
    25d4:	8c 93       	st	X, r24
    25d6:	ab e3       	ldi	r26, 0x3B	; 59
    25d8:	b0 e0       	ldi	r27, 0x00	; 0
    25da:	eb e3       	ldi	r30, 0x3B	; 59
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	90 81       	ld	r25, Z
    25e0:	8b 81       	ldd	r24, Y+3	; 0x03
    25e2:	89 2b       	or	r24, r25
    25e4:	8c 93       	st	X, r24
    25e6:	35 c0       	rjmp	.+106    	; 0x2652 <DIO_u8SetLowNibbleValue+0xe4>
			case DIO_PORTB:PORTB&=DIO_LOWNIBBLE_MASK;PORTB|=Copy_u8Value;break;
    25e8:	a8 e3       	ldi	r26, 0x38	; 56
    25ea:	b0 e0       	ldi	r27, 0x00	; 0
    25ec:	e8 e3       	ldi	r30, 0x38	; 56
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	80 81       	ld	r24, Z
    25f2:	80 7f       	andi	r24, 0xF0	; 240
    25f4:	8c 93       	st	X, r24
    25f6:	a8 e3       	ldi	r26, 0x38	; 56
    25f8:	b0 e0       	ldi	r27, 0x00	; 0
    25fa:	e8 e3       	ldi	r30, 0x38	; 56
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	90 81       	ld	r25, Z
    2600:	8b 81       	ldd	r24, Y+3	; 0x03
    2602:	89 2b       	or	r24, r25
    2604:	8c 93       	st	X, r24
    2606:	25 c0       	rjmp	.+74     	; 0x2652 <DIO_u8SetLowNibbleValue+0xe4>
			case DIO_PORTC:PORTC&=DIO_LOWNIBBLE_MASK;PORTC|=Copy_u8Value;break;
    2608:	a5 e3       	ldi	r26, 0x35	; 53
    260a:	b0 e0       	ldi	r27, 0x00	; 0
    260c:	e5 e3       	ldi	r30, 0x35	; 53
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	80 81       	ld	r24, Z
    2612:	80 7f       	andi	r24, 0xF0	; 240
    2614:	8c 93       	st	X, r24
    2616:	a5 e3       	ldi	r26, 0x35	; 53
    2618:	b0 e0       	ldi	r27, 0x00	; 0
    261a:	e5 e3       	ldi	r30, 0x35	; 53
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	90 81       	ld	r25, Z
    2620:	8b 81       	ldd	r24, Y+3	; 0x03
    2622:	89 2b       	or	r24, r25
    2624:	8c 93       	st	X, r24
    2626:	15 c0       	rjmp	.+42     	; 0x2652 <DIO_u8SetLowNibbleValue+0xe4>
			case DIO_PORTD:PORTD&=DIO_LOWNIBBLE_MASK;PORTD|=Copy_u8Value;break;
    2628:	a2 e3       	ldi	r26, 0x32	; 50
    262a:	b0 e0       	ldi	r27, 0x00	; 0
    262c:	e2 e3       	ldi	r30, 0x32	; 50
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	80 81       	ld	r24, Z
    2632:	80 7f       	andi	r24, 0xF0	; 240
    2634:	8c 93       	st	X, r24
    2636:	a2 e3       	ldi	r26, 0x32	; 50
    2638:	b0 e0       	ldi	r27, 0x00	; 0
    263a:	e2 e3       	ldi	r30, 0x32	; 50
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	90 81       	ld	r25, Z
    2640:	8b 81       	ldd	r24, Y+3	; 0x03
    2642:	89 2b       	or	r24, r25
    2644:	8c 93       	st	X, r24
    2646:	05 c0       	rjmp	.+10     	; 0x2652 <DIO_u8SetLowNibbleValue+0xe4>
			default: Local_u8ErrorState=1;
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	89 83       	std	Y+1, r24	; 0x01
    264c:	02 c0       	rjmp	.+4      	; 0x2652 <DIO_u8SetLowNibbleValue+0xe4>
		}
	}
	else
		Local_u8ErrorState=1;
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2652:	89 81       	ldd	r24, Y+1	; 0x01
}
    2654:	0f 90       	pop	r0
    2656:	0f 90       	pop	r0
    2658:	0f 90       	pop	r0
    265a:	0f 90       	pop	r0
    265c:	0f 90       	pop	r0
    265e:	cf 91       	pop	r28
    2660:	df 91       	pop	r29
    2662:	08 95       	ret

00002664 <DIO_u8SetHighNibbleValue>:
u8 DIO_u8SetHighNibbleValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    2664:	df 93       	push	r29
    2666:	cf 93       	push	r28
    2668:	00 d0       	rcall	.+0      	; 0x266a <DIO_u8SetHighNibbleValue+0x6>
    266a:	00 d0       	rcall	.+0      	; 0x266c <DIO_u8SetHighNibbleValue+0x8>
    266c:	0f 92       	push	r0
    266e:	cd b7       	in	r28, 0x3d	; 61
    2670:	de b7       	in	r29, 0x3e	; 62
    2672:	8a 83       	std	Y+2, r24	; 0x02
    2674:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    2676:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port<=DIO_PORTD){
    2678:	8a 81       	ldd	r24, Y+2	; 0x02
    267a:	84 30       	cpi	r24, 0x04	; 4
    267c:	08 f0       	brcs	.+2      	; 0x2680 <DIO_u8SetHighNibbleValue+0x1c>
    267e:	87 c0       	rjmp	.+270    	; 0x278e <DIO_u8SetHighNibbleValue+0x12a>
		switch(Copy_u8Port)
    2680:	8a 81       	ldd	r24, Y+2	; 0x02
    2682:	28 2f       	mov	r18, r24
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	3d 83       	std	Y+5, r19	; 0x05
    2688:	2c 83       	std	Y+4, r18	; 0x04
    268a:	8c 81       	ldd	r24, Y+4	; 0x04
    268c:	9d 81       	ldd	r25, Y+5	; 0x05
    268e:	81 30       	cpi	r24, 0x01	; 1
    2690:	91 05       	cpc	r25, r1
    2692:	79 f1       	breq	.+94     	; 0x26f2 <DIO_u8SetHighNibbleValue+0x8e>
    2694:	2c 81       	ldd	r18, Y+4	; 0x04
    2696:	3d 81       	ldd	r19, Y+5	; 0x05
    2698:	22 30       	cpi	r18, 0x02	; 2
    269a:	31 05       	cpc	r19, r1
    269c:	2c f4       	brge	.+10     	; 0x26a8 <DIO_u8SetHighNibbleValue+0x44>
    269e:	8c 81       	ldd	r24, Y+4	; 0x04
    26a0:	9d 81       	ldd	r25, Y+5	; 0x05
    26a2:	00 97       	sbiw	r24, 0x00	; 0
    26a4:	69 f0       	breq	.+26     	; 0x26c0 <DIO_u8SetHighNibbleValue+0x5c>
    26a6:	70 c0       	rjmp	.+224    	; 0x2788 <DIO_u8SetHighNibbleValue+0x124>
    26a8:	2c 81       	ldd	r18, Y+4	; 0x04
    26aa:	3d 81       	ldd	r19, Y+5	; 0x05
    26ac:	22 30       	cpi	r18, 0x02	; 2
    26ae:	31 05       	cpc	r19, r1
    26b0:	c9 f1       	breq	.+114    	; 0x2724 <DIO_u8SetHighNibbleValue+0xc0>
    26b2:	8c 81       	ldd	r24, Y+4	; 0x04
    26b4:	9d 81       	ldd	r25, Y+5	; 0x05
    26b6:	83 30       	cpi	r24, 0x03	; 3
    26b8:	91 05       	cpc	r25, r1
    26ba:	09 f4       	brne	.+2      	; 0x26be <DIO_u8SetHighNibbleValue+0x5a>
    26bc:	4c c0       	rjmp	.+152    	; 0x2756 <DIO_u8SetHighNibbleValue+0xf2>
    26be:	64 c0       	rjmp	.+200    	; 0x2788 <DIO_u8SetHighNibbleValue+0x124>
		{
			case DIO_PORTA:PORTA &= DIO_HIGHNIBBLE_MASK;PORTA |= (Copy_u8Value<<4);break;
    26c0:	ab e3       	ldi	r26, 0x3B	; 59
    26c2:	b0 e0       	ldi	r27, 0x00	; 0
    26c4:	eb e3       	ldi	r30, 0x3B	; 59
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	80 81       	ld	r24, Z
    26ca:	8f 70       	andi	r24, 0x0F	; 15
    26cc:	8c 93       	st	X, r24
    26ce:	ab e3       	ldi	r26, 0x3B	; 59
    26d0:	b0 e0       	ldi	r27, 0x00	; 0
    26d2:	eb e3       	ldi	r30, 0x3B	; 59
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	80 81       	ld	r24, Z
    26d8:	28 2f       	mov	r18, r24
    26da:	8b 81       	ldd	r24, Y+3	; 0x03
    26dc:	88 2f       	mov	r24, r24
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	82 95       	swap	r24
    26e2:	92 95       	swap	r25
    26e4:	90 7f       	andi	r25, 0xF0	; 240
    26e6:	98 27       	eor	r25, r24
    26e8:	80 7f       	andi	r24, 0xF0	; 240
    26ea:	98 27       	eor	r25, r24
    26ec:	82 2b       	or	r24, r18
    26ee:	8c 93       	st	X, r24
    26f0:	50 c0       	rjmp	.+160    	; 0x2792 <DIO_u8SetHighNibbleValue+0x12e>
			case DIO_PORTB:PORTB &= DIO_HIGHNIBBLE_MASK;PORTB |= (Copy_u8Value<<4);break;
    26f2:	a8 e3       	ldi	r26, 0x38	; 56
    26f4:	b0 e0       	ldi	r27, 0x00	; 0
    26f6:	e8 e3       	ldi	r30, 0x38	; 56
    26f8:	f0 e0       	ldi	r31, 0x00	; 0
    26fa:	80 81       	ld	r24, Z
    26fc:	8f 70       	andi	r24, 0x0F	; 15
    26fe:	8c 93       	st	X, r24
    2700:	a8 e3       	ldi	r26, 0x38	; 56
    2702:	b0 e0       	ldi	r27, 0x00	; 0
    2704:	e8 e3       	ldi	r30, 0x38	; 56
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	80 81       	ld	r24, Z
    270a:	28 2f       	mov	r18, r24
    270c:	8b 81       	ldd	r24, Y+3	; 0x03
    270e:	88 2f       	mov	r24, r24
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	82 95       	swap	r24
    2714:	92 95       	swap	r25
    2716:	90 7f       	andi	r25, 0xF0	; 240
    2718:	98 27       	eor	r25, r24
    271a:	80 7f       	andi	r24, 0xF0	; 240
    271c:	98 27       	eor	r25, r24
    271e:	82 2b       	or	r24, r18
    2720:	8c 93       	st	X, r24
    2722:	37 c0       	rjmp	.+110    	; 0x2792 <DIO_u8SetHighNibbleValue+0x12e>
			case DIO_PORTC:PORTC &= DIO_HIGHNIBBLE_MASK;PORTC |= (Copy_u8Value<<4);break;
    2724:	a5 e3       	ldi	r26, 0x35	; 53
    2726:	b0 e0       	ldi	r27, 0x00	; 0
    2728:	e5 e3       	ldi	r30, 0x35	; 53
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	80 81       	ld	r24, Z
    272e:	8f 70       	andi	r24, 0x0F	; 15
    2730:	8c 93       	st	X, r24
    2732:	a5 e3       	ldi	r26, 0x35	; 53
    2734:	b0 e0       	ldi	r27, 0x00	; 0
    2736:	e5 e3       	ldi	r30, 0x35	; 53
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	80 81       	ld	r24, Z
    273c:	28 2f       	mov	r18, r24
    273e:	8b 81       	ldd	r24, Y+3	; 0x03
    2740:	88 2f       	mov	r24, r24
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	82 95       	swap	r24
    2746:	92 95       	swap	r25
    2748:	90 7f       	andi	r25, 0xF0	; 240
    274a:	98 27       	eor	r25, r24
    274c:	80 7f       	andi	r24, 0xF0	; 240
    274e:	98 27       	eor	r25, r24
    2750:	82 2b       	or	r24, r18
    2752:	8c 93       	st	X, r24
    2754:	1e c0       	rjmp	.+60     	; 0x2792 <DIO_u8SetHighNibbleValue+0x12e>
			case DIO_PORTD:PORTD &= DIO_HIGHNIBBLE_MASK;PORTD |= (Copy_u8Value<<4);break;
    2756:	a2 e3       	ldi	r26, 0x32	; 50
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	e2 e3       	ldi	r30, 0x32	; 50
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	8f 70       	andi	r24, 0x0F	; 15
    2762:	8c 93       	st	X, r24
    2764:	a2 e3       	ldi	r26, 0x32	; 50
    2766:	b0 e0       	ldi	r27, 0x00	; 0
    2768:	e2 e3       	ldi	r30, 0x32	; 50
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	80 81       	ld	r24, Z
    276e:	28 2f       	mov	r18, r24
    2770:	8b 81       	ldd	r24, Y+3	; 0x03
    2772:	88 2f       	mov	r24, r24
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	82 95       	swap	r24
    2778:	92 95       	swap	r25
    277a:	90 7f       	andi	r25, 0xF0	; 240
    277c:	98 27       	eor	r25, r24
    277e:	80 7f       	andi	r24, 0xF0	; 240
    2780:	98 27       	eor	r25, r24
    2782:	82 2b       	or	r24, r18
    2784:	8c 93       	st	X, r24
    2786:	05 c0       	rjmp	.+10     	; 0x2792 <DIO_u8SetHighNibbleValue+0x12e>
			default: Local_u8ErrorState=1;
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	89 83       	std	Y+1, r24	; 0x01
    278c:	02 c0       	rjmp	.+4      	; 0x2792 <DIO_u8SetHighNibbleValue+0x12e>
		}
	}
	else
		Local_u8ErrorState=1;
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2792:	89 81       	ldd	r24, Y+1	; 0x01
}
    2794:	0f 90       	pop	r0
    2796:	0f 90       	pop	r0
    2798:	0f 90       	pop	r0
    279a:	0f 90       	pop	r0
    279c:	0f 90       	pop	r0
    279e:	cf 91       	pop	r28
    27a0:	df 91       	pop	r29
    27a2:	08 95       	ret

000027a4 <EXTI_voidInt0Init>:

static void (*EXTI_voidCallBack[3])() = {NULL};


void EXTI_voidInt0Init()
{
    27a4:	df 93       	push	r29
    27a6:	cf 93       	push	r28
    27a8:	cd b7       	in	r28, 0x3d	; 61
    27aa:	de b7       	in	r29, 0x3e	; 62
	MCUCR &= MASK_SENCE_INT0;
    27ac:	a5 e5       	ldi	r26, 0x55	; 85
    27ae:	b0 e0       	ldi	r27, 0x00	; 0
    27b0:	e5 e5       	ldi	r30, 0x55	; 85
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	80 81       	ld	r24, Z
    27b6:	8c 7f       	andi	r24, 0xFC	; 252
    27b8:	8c 93       	st	X, r24
	MCUCR |= EXTI0_SENCECONTROL<<MCUCR_ISC00;
    27ba:	a5 e5       	ldi	r26, 0x55	; 85
    27bc:	b0 e0       	ldi	r27, 0x00	; 0
    27be:	e5 e5       	ldi	r30, 0x55	; 85
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	80 81       	ld	r24, Z
    27c4:	83 60       	ori	r24, 0x03	; 3
    27c6:	8c 93       	st	X, r24

	SET_BIT(GICR,GICR_INT0);
    27c8:	ab e5       	ldi	r26, 0x5B	; 91
    27ca:	b0 e0       	ldi	r27, 0x00	; 0
    27cc:	eb e5       	ldi	r30, 0x5B	; 91
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	80 81       	ld	r24, Z
    27d2:	80 64       	ori	r24, 0x40	; 64
    27d4:	8c 93       	st	X, r24
}
    27d6:	cf 91       	pop	r28
    27d8:	df 91       	pop	r29
    27da:	08 95       	ret

000027dc <EXTI_u8Int0CallBack>:

u8 EXTI_u8Int0CallBack(void (*Notification)())
{
    27dc:	df 93       	push	r29
    27de:	cf 93       	push	r28
    27e0:	00 d0       	rcall	.+0      	; 0x27e2 <EXTI_u8Int0CallBack+0x6>
    27e2:	0f 92       	push	r0
    27e4:	cd b7       	in	r28, 0x3d	; 61
    27e6:	de b7       	in	r29, 0x3e	; 62
    27e8:	9b 83       	std	Y+3, r25	; 0x03
    27ea:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    27ec:	19 82       	std	Y+1, r1	; 0x01
	if(Notification != NULL )
    27ee:	8a 81       	ldd	r24, Y+2	; 0x02
    27f0:	9b 81       	ldd	r25, Y+3	; 0x03
    27f2:	00 97       	sbiw	r24, 0x00	; 0
    27f4:	39 f0       	breq	.+14     	; 0x2804 <EXTI_u8Int0CallBack+0x28>
	{
		EXTI_voidCallBack[EXTI0] = Notification;
    27f6:	8a 81       	ldd	r24, Y+2	; 0x02
    27f8:	9b 81       	ldd	r25, Y+3	; 0x03
    27fa:	90 93 aa 02 	sts	0x02AA, r25
    27fe:	80 93 a9 02 	sts	0x02A9, r24
    2802:	02 c0       	rjmp	.+4      	; 0x2808 <EXTI_u8Int0CallBack+0x2c>
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    2804:	82 e0       	ldi	r24, 0x02	; 2
    2806:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2808:	89 81       	ldd	r24, Y+1	; 0x01
}
    280a:	0f 90       	pop	r0
    280c:	0f 90       	pop	r0
    280e:	0f 90       	pop	r0
    2810:	cf 91       	pop	r28
    2812:	df 91       	pop	r29
    2814:	08 95       	ret

00002816 <EXTI_u8Int0ChangeSence>:

u8 EXTI_u8Int0ChangeSence(u8 Copy_u8Sence)
{
    2816:	df 93       	push	r29
    2818:	cf 93       	push	r28
    281a:	00 d0       	rcall	.+0      	; 0x281c <EXTI_u8Int0ChangeSence+0x6>
    281c:	cd b7       	in	r28, 0x3d	; 61
    281e:	de b7       	in	r29, 0x3e	; 62
    2820:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2822:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Sence<=EXTI0_RISING_ADGE)
    2824:	8a 81       	ldd	r24, Y+2	; 0x02
    2826:	84 30       	cpi	r24, 0x04	; 4
    2828:	80 f4       	brcc	.+32     	; 0x284a <EXTI_u8Int0ChangeSence+0x34>
	{
		MCUCR &= MASK_SENCE_INT0;
    282a:	a5 e5       	ldi	r26, 0x55	; 85
    282c:	b0 e0       	ldi	r27, 0x00	; 0
    282e:	e5 e5       	ldi	r30, 0x55	; 85
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	80 81       	ld	r24, Z
    2834:	8c 7f       	andi	r24, 0xFC	; 252
    2836:	8c 93       	st	X, r24
		MCUCR |= Copy_u8Sence<<MCUCR_ISC00;
    2838:	a5 e5       	ldi	r26, 0x55	; 85
    283a:	b0 e0       	ldi	r27, 0x00	; 0
    283c:	e5 e5       	ldi	r30, 0x55	; 85
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	90 81       	ld	r25, Z
    2842:	8a 81       	ldd	r24, Y+2	; 0x02
    2844:	89 2b       	or	r24, r25
    2846:	8c 93       	st	X, r24
    2848:	02 c0       	rjmp	.+4      	; 0x284e <EXTI_u8Int0ChangeSence+0x38>
	}
	else
		Local_u8ErrorState = NOTOK;
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    284e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2850:	0f 90       	pop	r0
    2852:	0f 90       	pop	r0
    2854:	cf 91       	pop	r28
    2856:	df 91       	pop	r29
    2858:	08 95       	ret

0000285a <EXTI_voidInt1Init>:
void EXTI_voidInt1Init()
{
    285a:	df 93       	push	r29
    285c:	cf 93       	push	r28
    285e:	cd b7       	in	r28, 0x3d	; 61
    2860:	de b7       	in	r29, 0x3e	; 62
	MCUCR &= MASK_SENCE_INT1;
    2862:	a5 e5       	ldi	r26, 0x55	; 85
    2864:	b0 e0       	ldi	r27, 0x00	; 0
    2866:	e5 e5       	ldi	r30, 0x55	; 85
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	80 81       	ld	r24, Z
    286c:	83 7f       	andi	r24, 0xF3	; 243
    286e:	8c 93       	st	X, r24
	MCUCR |= EXTI1_SENCECONTROL<<MCUCR_ISC10;
    2870:	a5 e5       	ldi	r26, 0x55	; 85
    2872:	b0 e0       	ldi	r27, 0x00	; 0
    2874:	e5 e5       	ldi	r30, 0x55	; 85
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	80 81       	ld	r24, Z
    287a:	88 60       	ori	r24, 0x08	; 8
    287c:	8c 93       	st	X, r24

	SET_BIT(GICR,GICR_INT1);
    287e:	ab e5       	ldi	r26, 0x5B	; 91
    2880:	b0 e0       	ldi	r27, 0x00	; 0
    2882:	eb e5       	ldi	r30, 0x5B	; 91
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	80 81       	ld	r24, Z
    2888:	80 68       	ori	r24, 0x80	; 128
    288a:	8c 93       	st	X, r24
}
    288c:	cf 91       	pop	r28
    288e:	df 91       	pop	r29
    2890:	08 95       	ret

00002892 <EXTI_u8Int1CallBack>:

u8 EXTI_u8Int1CallBack(void (*Notification)())
{
    2892:	df 93       	push	r29
    2894:	cf 93       	push	r28
    2896:	00 d0       	rcall	.+0      	; 0x2898 <EXTI_u8Int1CallBack+0x6>
    2898:	0f 92       	push	r0
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62
    289e:	9b 83       	std	Y+3, r25	; 0x03
    28a0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    28a2:	19 82       	std	Y+1, r1	; 0x01
	if(Notification != NULL )
    28a4:	8a 81       	ldd	r24, Y+2	; 0x02
    28a6:	9b 81       	ldd	r25, Y+3	; 0x03
    28a8:	00 97       	sbiw	r24, 0x00	; 0
    28aa:	39 f0       	breq	.+14     	; 0x28ba <EXTI_u8Int1CallBack+0x28>
	{
		EXTI_voidCallBack[EXTI1] = Notification;
    28ac:	8a 81       	ldd	r24, Y+2	; 0x02
    28ae:	9b 81       	ldd	r25, Y+3	; 0x03
    28b0:	90 93 ac 02 	sts	0x02AC, r25
    28b4:	80 93 ab 02 	sts	0x02AB, r24
    28b8:	02 c0       	rjmp	.+4      	; 0x28be <EXTI_u8Int1CallBack+0x2c>
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    28ba:	82 e0       	ldi	r24, 0x02	; 2
    28bc:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    28be:	89 81       	ldd	r24, Y+1	; 0x01
}
    28c0:	0f 90       	pop	r0
    28c2:	0f 90       	pop	r0
    28c4:	0f 90       	pop	r0
    28c6:	cf 91       	pop	r28
    28c8:	df 91       	pop	r29
    28ca:	08 95       	ret

000028cc <EXTI_u8Int1ChangeSence>:
u8 EXTI_u8Int1ChangeSence(u8 Copy_u8Sence)
{
    28cc:	df 93       	push	r29
    28ce:	cf 93       	push	r28
    28d0:	00 d0       	rcall	.+0      	; 0x28d2 <EXTI_u8Int1ChangeSence+0x6>
    28d2:	cd b7       	in	r28, 0x3d	; 61
    28d4:	de b7       	in	r29, 0x3e	; 62
    28d6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    28d8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Sence<=EXTI1_RISING_ADGE)
    28da:	8a 81       	ldd	r24, Y+2	; 0x02
    28dc:	84 30       	cpi	r24, 0x04	; 4
    28de:	b8 f4       	brcc	.+46     	; 0x290e <EXTI_u8Int1ChangeSence+0x42>
	{
		MCUCR &= MASK_SENCE_INT1;
    28e0:	a5 e5       	ldi	r26, 0x55	; 85
    28e2:	b0 e0       	ldi	r27, 0x00	; 0
    28e4:	e5 e5       	ldi	r30, 0x55	; 85
    28e6:	f0 e0       	ldi	r31, 0x00	; 0
    28e8:	80 81       	ld	r24, Z
    28ea:	83 7f       	andi	r24, 0xF3	; 243
    28ec:	8c 93       	st	X, r24
		MCUCR |= Copy_u8Sence<<MCUCR_ISC10;
    28ee:	a5 e5       	ldi	r26, 0x55	; 85
    28f0:	b0 e0       	ldi	r27, 0x00	; 0
    28f2:	e5 e5       	ldi	r30, 0x55	; 85
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	80 81       	ld	r24, Z
    28f8:	28 2f       	mov	r18, r24
    28fa:	8a 81       	ldd	r24, Y+2	; 0x02
    28fc:	88 2f       	mov	r24, r24
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	88 0f       	add	r24, r24
    2902:	99 1f       	adc	r25, r25
    2904:	88 0f       	add	r24, r24
    2906:	99 1f       	adc	r25, r25
    2908:	82 2b       	or	r24, r18
    290a:	8c 93       	st	X, r24
    290c:	02 c0       	rjmp	.+4      	; 0x2912 <EXTI_u8Int1ChangeSence+0x46>
	}
	else
		Local_u8ErrorState = NOTOK;
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2912:	89 81       	ldd	r24, Y+1	; 0x01
}
    2914:	0f 90       	pop	r0
    2916:	0f 90       	pop	r0
    2918:	cf 91       	pop	r28
    291a:	df 91       	pop	r29
    291c:	08 95       	ret

0000291e <EXTI_voidInt2Init>:
void EXTI_voidInt2Init()
{
    291e:	df 93       	push	r29
    2920:	cf 93       	push	r28
    2922:	cd b7       	in	r28, 0x3d	; 61
    2924:	de b7       	in	r29, 0x3e	; 62
	MCUCSR &= MASK_SENCE_INT2;
    2926:	a4 e5       	ldi	r26, 0x54	; 84
    2928:	b0 e0       	ldi	r27, 0x00	; 0
    292a:	e4 e5       	ldi	r30, 0x54	; 84
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	80 81       	ld	r24, Z
    2930:	8f 7b       	andi	r24, 0xBF	; 191
    2932:	8c 93       	st	X, r24
	MCUCSR |= EXTI2_SENCECONTROL<<MCUCSR_ISC2;
    2934:	a4 e5       	ldi	r26, 0x54	; 84
    2936:	b0 e0       	ldi	r27, 0x00	; 0
    2938:	e4 e5       	ldi	r30, 0x54	; 84
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	80 81       	ld	r24, Z
    293e:	8c 93       	st	X, r24

	SET_BIT(GICR,GICR_INT2);
    2940:	ab e5       	ldi	r26, 0x5B	; 91
    2942:	b0 e0       	ldi	r27, 0x00	; 0
    2944:	eb e5       	ldi	r30, 0x5B	; 91
    2946:	f0 e0       	ldi	r31, 0x00	; 0
    2948:	80 81       	ld	r24, Z
    294a:	80 62       	ori	r24, 0x20	; 32
    294c:	8c 93       	st	X, r24
}
    294e:	cf 91       	pop	r28
    2950:	df 91       	pop	r29
    2952:	08 95       	ret

00002954 <EXTI_u8Int2CallBack>:

u8 EXTI_u8Int2CallBack(void (*Notification)())
{
    2954:	df 93       	push	r29
    2956:	cf 93       	push	r28
    2958:	00 d0       	rcall	.+0      	; 0x295a <EXTI_u8Int2CallBack+0x6>
    295a:	0f 92       	push	r0
    295c:	cd b7       	in	r28, 0x3d	; 61
    295e:	de b7       	in	r29, 0x3e	; 62
    2960:	9b 83       	std	Y+3, r25	; 0x03
    2962:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2964:	19 82       	std	Y+1, r1	; 0x01
	if(Notification != NULL )
    2966:	8a 81       	ldd	r24, Y+2	; 0x02
    2968:	9b 81       	ldd	r25, Y+3	; 0x03
    296a:	00 97       	sbiw	r24, 0x00	; 0
    296c:	39 f0       	breq	.+14     	; 0x297c <EXTI_u8Int2CallBack+0x28>
	{
		EXTI_voidCallBack[EXTI2] = Notification;
    296e:	8a 81       	ldd	r24, Y+2	; 0x02
    2970:	9b 81       	ldd	r25, Y+3	; 0x03
    2972:	90 93 ae 02 	sts	0x02AE, r25
    2976:	80 93 ad 02 	sts	0x02AD, r24
    297a:	02 c0       	rjmp	.+4      	; 0x2980 <EXTI_u8Int2CallBack+0x2c>
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    297c:	82 e0       	ldi	r24, 0x02	; 2
    297e:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2980:	89 81       	ldd	r24, Y+1	; 0x01
}
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
    2986:	0f 90       	pop	r0
    2988:	cf 91       	pop	r28
    298a:	df 91       	pop	r29
    298c:	08 95       	ret

0000298e <EXTI_u8Int2ChangeSence>:

u8 EXTI_u8Int2ChangeSence(u8 Copy_u8Sence)
{
    298e:	df 93       	push	r29
    2990:	cf 93       	push	r28
    2992:	00 d0       	rcall	.+0      	; 0x2994 <EXTI_u8Int2ChangeSence+0x6>
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
    2998:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    299a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Sence<=EXTI2_RISING_ADGE)
    299c:	8a 81       	ldd	r24, Y+2	; 0x02
    299e:	82 30       	cpi	r24, 0x02	; 2
    29a0:	e0 f4       	brcc	.+56     	; 0x29da <EXTI_u8Int2ChangeSence+0x4c>
	{
		MCUCSR &= MASK_SENCE_INT2;
    29a2:	a4 e5       	ldi	r26, 0x54	; 84
    29a4:	b0 e0       	ldi	r27, 0x00	; 0
    29a6:	e4 e5       	ldi	r30, 0x54	; 84
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	80 81       	ld	r24, Z
    29ac:	8f 7b       	andi	r24, 0xBF	; 191
    29ae:	8c 93       	st	X, r24
		MCUCSR |= Copy_u8Sence<<MCUCSR_ISC2;
    29b0:	a4 e5       	ldi	r26, 0x54	; 84
    29b2:	b0 e0       	ldi	r27, 0x00	; 0
    29b4:	e4 e5       	ldi	r30, 0x54	; 84
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	80 81       	ld	r24, Z
    29ba:	28 2f       	mov	r18, r24
    29bc:	8a 81       	ldd	r24, Y+2	; 0x02
    29be:	88 2f       	mov	r24, r24
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	00 24       	eor	r0, r0
    29c4:	96 95       	lsr	r25
    29c6:	87 95       	ror	r24
    29c8:	07 94       	ror	r0
    29ca:	96 95       	lsr	r25
    29cc:	87 95       	ror	r24
    29ce:	07 94       	ror	r0
    29d0:	98 2f       	mov	r25, r24
    29d2:	80 2d       	mov	r24, r0
    29d4:	82 2b       	or	r24, r18
    29d6:	8c 93       	st	X, r24
    29d8:	02 c0       	rjmp	.+4      	; 0x29de <EXTI_u8Int2ChangeSence+0x50>
	}
	else
		Local_u8ErrorState = NOTOK;
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    29de:	89 81       	ldd	r24, Y+1	; 0x01
}
    29e0:	0f 90       	pop	r0
    29e2:	0f 90       	pop	r0
    29e4:	cf 91       	pop	r28
    29e6:	df 91       	pop	r29
    29e8:	08 95       	ret

000029ea <EXTI_u8IntDisable>:

u8 EXTI_u8IntDisable(u8 Copy_u8IntID)
{
    29ea:	df 93       	push	r29
    29ec:	cf 93       	push	r28
    29ee:	00 d0       	rcall	.+0      	; 0x29f0 <EXTI_u8IntDisable+0x6>
    29f0:	00 d0       	rcall	.+0      	; 0x29f2 <EXTI_u8IntDisable+0x8>
    29f2:	cd b7       	in	r28, 0x3d	; 61
    29f4:	de b7       	in	r29, 0x3e	; 62
    29f6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    29f8:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8IntID)
    29fa:	8a 81       	ldd	r24, Y+2	; 0x02
    29fc:	28 2f       	mov	r18, r24
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	3c 83       	std	Y+4, r19	; 0x04
    2a02:	2b 83       	std	Y+3, r18	; 0x03
    2a04:	8b 81       	ldd	r24, Y+3	; 0x03
    2a06:	9c 81       	ldd	r25, Y+4	; 0x04
    2a08:	81 30       	cpi	r24, 0x01	; 1
    2a0a:	91 05       	cpc	r25, r1
    2a0c:	89 f0       	breq	.+34     	; 0x2a30 <EXTI_u8IntDisable+0x46>
    2a0e:	2b 81       	ldd	r18, Y+3	; 0x03
    2a10:	3c 81       	ldd	r19, Y+4	; 0x04
    2a12:	22 30       	cpi	r18, 0x02	; 2
    2a14:	31 05       	cpc	r19, r1
    2a16:	a1 f0       	breq	.+40     	; 0x2a40 <EXTI_u8IntDisable+0x56>
    2a18:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a1c:	00 97       	sbiw	r24, 0x00	; 0
    2a1e:	c1 f4       	brne	.+48     	; 0x2a50 <EXTI_u8IntDisable+0x66>
	{
	case EXTI0:CLR_BIT(GICR,GICR_INT0);break;
    2a20:	ab e5       	ldi	r26, 0x5B	; 91
    2a22:	b0 e0       	ldi	r27, 0x00	; 0
    2a24:	eb e5       	ldi	r30, 0x5B	; 91
    2a26:	f0 e0       	ldi	r31, 0x00	; 0
    2a28:	80 81       	ld	r24, Z
    2a2a:	8f 7b       	andi	r24, 0xBF	; 191
    2a2c:	8c 93       	st	X, r24
    2a2e:	12 c0       	rjmp	.+36     	; 0x2a54 <EXTI_u8IntDisable+0x6a>
	case EXTI1:CLR_BIT(GICR,GICR_INT1);break;
    2a30:	ab e5       	ldi	r26, 0x5B	; 91
    2a32:	b0 e0       	ldi	r27, 0x00	; 0
    2a34:	eb e5       	ldi	r30, 0x5B	; 91
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	80 81       	ld	r24, Z
    2a3a:	8f 77       	andi	r24, 0x7F	; 127
    2a3c:	8c 93       	st	X, r24
    2a3e:	0a c0       	rjmp	.+20     	; 0x2a54 <EXTI_u8IntDisable+0x6a>
	case EXTI2:CLR_BIT(GICR,GICR_INT2);break;
    2a40:	ab e5       	ldi	r26, 0x5B	; 91
    2a42:	b0 e0       	ldi	r27, 0x00	; 0
    2a44:	eb e5       	ldi	r30, 0x5B	; 91
    2a46:	f0 e0       	ldi	r31, 0x00	; 0
    2a48:	80 81       	ld	r24, Z
    2a4a:	8f 7d       	andi	r24, 0xDF	; 223
    2a4c:	8c 93       	st	X, r24
    2a4e:	02 c0       	rjmp	.+4      	; 0x2a54 <EXTI_u8IntDisable+0x6a>
	default: Local_u8ErrorState = NOTOK;
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2a54:	89 81       	ldd	r24, Y+1	; 0x01

}
    2a56:	0f 90       	pop	r0
    2a58:	0f 90       	pop	r0
    2a5a:	0f 90       	pop	r0
    2a5c:	0f 90       	pop	r0
    2a5e:	cf 91       	pop	r28
    2a60:	df 91       	pop	r29
    2a62:	08 95       	ret

00002a64 <EXTI_u8IntEnable>:
u8 EXTI_u8IntEnable(u8 Copy_u8IntID)
{
    2a64:	df 93       	push	r29
    2a66:	cf 93       	push	r28
    2a68:	00 d0       	rcall	.+0      	; 0x2a6a <EXTI_u8IntEnable+0x6>
    2a6a:	00 d0       	rcall	.+0      	; 0x2a6c <EXTI_u8IntEnable+0x8>
    2a6c:	cd b7       	in	r28, 0x3d	; 61
    2a6e:	de b7       	in	r29, 0x3e	; 62
    2a70:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2a72:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8IntID)
    2a74:	8a 81       	ldd	r24, Y+2	; 0x02
    2a76:	28 2f       	mov	r18, r24
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	3c 83       	std	Y+4, r19	; 0x04
    2a7c:	2b 83       	std	Y+3, r18	; 0x03
    2a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a80:	9c 81       	ldd	r25, Y+4	; 0x04
    2a82:	81 30       	cpi	r24, 0x01	; 1
    2a84:	91 05       	cpc	r25, r1
    2a86:	89 f0       	breq	.+34     	; 0x2aaa <EXTI_u8IntEnable+0x46>
    2a88:	2b 81       	ldd	r18, Y+3	; 0x03
    2a8a:	3c 81       	ldd	r19, Y+4	; 0x04
    2a8c:	22 30       	cpi	r18, 0x02	; 2
    2a8e:	31 05       	cpc	r19, r1
    2a90:	a1 f0       	breq	.+40     	; 0x2aba <EXTI_u8IntEnable+0x56>
    2a92:	8b 81       	ldd	r24, Y+3	; 0x03
    2a94:	9c 81       	ldd	r25, Y+4	; 0x04
    2a96:	00 97       	sbiw	r24, 0x00	; 0
    2a98:	c1 f4       	brne	.+48     	; 0x2aca <EXTI_u8IntEnable+0x66>
	{
	case EXTI0:SET_BIT(GICR,GICR_INT0);break;
    2a9a:	ab e5       	ldi	r26, 0x5B	; 91
    2a9c:	b0 e0       	ldi	r27, 0x00	; 0
    2a9e:	eb e5       	ldi	r30, 0x5B	; 91
    2aa0:	f0 e0       	ldi	r31, 0x00	; 0
    2aa2:	80 81       	ld	r24, Z
    2aa4:	80 64       	ori	r24, 0x40	; 64
    2aa6:	8c 93       	st	X, r24
    2aa8:	12 c0       	rjmp	.+36     	; 0x2ace <EXTI_u8IntEnable+0x6a>
	case EXTI1:SET_BIT(GICR,GICR_INT1);break;
    2aaa:	ab e5       	ldi	r26, 0x5B	; 91
    2aac:	b0 e0       	ldi	r27, 0x00	; 0
    2aae:	eb e5       	ldi	r30, 0x5B	; 91
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	80 81       	ld	r24, Z
    2ab4:	80 68       	ori	r24, 0x80	; 128
    2ab6:	8c 93       	st	X, r24
    2ab8:	0a c0       	rjmp	.+20     	; 0x2ace <EXTI_u8IntEnable+0x6a>
	case EXTI2:SET_BIT(GICR,GICR_INT2);break;
    2aba:	ab e5       	ldi	r26, 0x5B	; 91
    2abc:	b0 e0       	ldi	r27, 0x00	; 0
    2abe:	eb e5       	ldi	r30, 0x5B	; 91
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	80 81       	ld	r24, Z
    2ac4:	80 62       	ori	r24, 0x20	; 32
    2ac6:	8c 93       	st	X, r24
    2ac8:	02 c0       	rjmp	.+4      	; 0x2ace <EXTI_u8IntEnable+0x6a>
	default: Local_u8ErrorState = NOTOK;
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2ace:	89 81       	ldd	r24, Y+1	; 0x01

}
    2ad0:	0f 90       	pop	r0
    2ad2:	0f 90       	pop	r0
    2ad4:	0f 90       	pop	r0
    2ad6:	0f 90       	pop	r0
    2ad8:	cf 91       	pop	r28
    2ada:	df 91       	pop	r29
    2adc:	08 95       	ret

00002ade <__vector_1>:

void __vector_1 (void)	__attribute__((signal));
void __vector_1 (void)
{
    2ade:	1f 92       	push	r1
    2ae0:	0f 92       	push	r0
    2ae2:	0f b6       	in	r0, 0x3f	; 63
    2ae4:	0f 92       	push	r0
    2ae6:	11 24       	eor	r1, r1
    2ae8:	2f 93       	push	r18
    2aea:	3f 93       	push	r19
    2aec:	4f 93       	push	r20
    2aee:	5f 93       	push	r21
    2af0:	6f 93       	push	r22
    2af2:	7f 93       	push	r23
    2af4:	8f 93       	push	r24
    2af6:	9f 93       	push	r25
    2af8:	af 93       	push	r26
    2afa:	bf 93       	push	r27
    2afc:	ef 93       	push	r30
    2afe:	ff 93       	push	r31
    2b00:	df 93       	push	r29
    2b02:	cf 93       	push	r28
    2b04:	cd b7       	in	r28, 0x3d	; 61
    2b06:	de b7       	in	r29, 0x3e	; 62
	EXTI_voidCallBack[EXTI0]();
    2b08:	e0 91 a9 02 	lds	r30, 0x02A9
    2b0c:	f0 91 aa 02 	lds	r31, 0x02AA
    2b10:	09 95       	icall
}
    2b12:	cf 91       	pop	r28
    2b14:	df 91       	pop	r29
    2b16:	ff 91       	pop	r31
    2b18:	ef 91       	pop	r30
    2b1a:	bf 91       	pop	r27
    2b1c:	af 91       	pop	r26
    2b1e:	9f 91       	pop	r25
    2b20:	8f 91       	pop	r24
    2b22:	7f 91       	pop	r23
    2b24:	6f 91       	pop	r22
    2b26:	5f 91       	pop	r21
    2b28:	4f 91       	pop	r20
    2b2a:	3f 91       	pop	r19
    2b2c:	2f 91       	pop	r18
    2b2e:	0f 90       	pop	r0
    2b30:	0f be       	out	0x3f, r0	; 63
    2b32:	0f 90       	pop	r0
    2b34:	1f 90       	pop	r1
    2b36:	18 95       	reti

00002b38 <__vector_2>:

void __vector_2 (void)	__attribute__((signal));
void __vector_2 (void)
{
    2b38:	1f 92       	push	r1
    2b3a:	0f 92       	push	r0
    2b3c:	0f b6       	in	r0, 0x3f	; 63
    2b3e:	0f 92       	push	r0
    2b40:	11 24       	eor	r1, r1
    2b42:	2f 93       	push	r18
    2b44:	3f 93       	push	r19
    2b46:	4f 93       	push	r20
    2b48:	5f 93       	push	r21
    2b4a:	6f 93       	push	r22
    2b4c:	7f 93       	push	r23
    2b4e:	8f 93       	push	r24
    2b50:	9f 93       	push	r25
    2b52:	af 93       	push	r26
    2b54:	bf 93       	push	r27
    2b56:	ef 93       	push	r30
    2b58:	ff 93       	push	r31
    2b5a:	df 93       	push	r29
    2b5c:	cf 93       	push	r28
    2b5e:	cd b7       	in	r28, 0x3d	; 61
    2b60:	de b7       	in	r29, 0x3e	; 62
	EXTI_voidCallBack[EXTI1]();
    2b62:	e0 91 ab 02 	lds	r30, 0x02AB
    2b66:	f0 91 ac 02 	lds	r31, 0x02AC
    2b6a:	09 95       	icall
}
    2b6c:	cf 91       	pop	r28
    2b6e:	df 91       	pop	r29
    2b70:	ff 91       	pop	r31
    2b72:	ef 91       	pop	r30
    2b74:	bf 91       	pop	r27
    2b76:	af 91       	pop	r26
    2b78:	9f 91       	pop	r25
    2b7a:	8f 91       	pop	r24
    2b7c:	7f 91       	pop	r23
    2b7e:	6f 91       	pop	r22
    2b80:	5f 91       	pop	r21
    2b82:	4f 91       	pop	r20
    2b84:	3f 91       	pop	r19
    2b86:	2f 91       	pop	r18
    2b88:	0f 90       	pop	r0
    2b8a:	0f be       	out	0x3f, r0	; 63
    2b8c:	0f 90       	pop	r0
    2b8e:	1f 90       	pop	r1
    2b90:	18 95       	reti

00002b92 <__vector_3>:

void __vector_3 (void)	__attribute__((signal));
void __vector_3 (void)
{
    2b92:	1f 92       	push	r1
    2b94:	0f 92       	push	r0
    2b96:	0f b6       	in	r0, 0x3f	; 63
    2b98:	0f 92       	push	r0
    2b9a:	11 24       	eor	r1, r1
    2b9c:	2f 93       	push	r18
    2b9e:	3f 93       	push	r19
    2ba0:	4f 93       	push	r20
    2ba2:	5f 93       	push	r21
    2ba4:	6f 93       	push	r22
    2ba6:	7f 93       	push	r23
    2ba8:	8f 93       	push	r24
    2baa:	9f 93       	push	r25
    2bac:	af 93       	push	r26
    2bae:	bf 93       	push	r27
    2bb0:	ef 93       	push	r30
    2bb2:	ff 93       	push	r31
    2bb4:	df 93       	push	r29
    2bb6:	cf 93       	push	r28
    2bb8:	cd b7       	in	r28, 0x3d	; 61
    2bba:	de b7       	in	r29, 0x3e	; 62
	EXTI_voidCallBack[EXTI2]();
    2bbc:	e0 91 ad 02 	lds	r30, 0x02AD
    2bc0:	f0 91 ae 02 	lds	r31, 0x02AE
    2bc4:	09 95       	icall
}
    2bc6:	cf 91       	pop	r28
    2bc8:	df 91       	pop	r29
    2bca:	ff 91       	pop	r31
    2bcc:	ef 91       	pop	r30
    2bce:	bf 91       	pop	r27
    2bd0:	af 91       	pop	r26
    2bd2:	9f 91       	pop	r25
    2bd4:	8f 91       	pop	r24
    2bd6:	7f 91       	pop	r23
    2bd8:	6f 91       	pop	r22
    2bda:	5f 91       	pop	r21
    2bdc:	4f 91       	pop	r20
    2bde:	3f 91       	pop	r19
    2be0:	2f 91       	pop	r18
    2be2:	0f 90       	pop	r0
    2be4:	0f be       	out	0x3f, r0	; 63
    2be6:	0f 90       	pop	r0
    2be8:	1f 90       	pop	r1
    2bea:	18 95       	reti

00002bec <GIE_voidEnable>:
#include "../MCAL/GIE_interface.h"
#include "../MCAL/GIE_register.h"


void GIE_voidEnable()
{
    2bec:	df 93       	push	r29
    2bee:	cf 93       	push	r28
    2bf0:	cd b7       	in	r28, 0x3d	; 61
    2bf2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    2bf4:	af e5       	ldi	r26, 0x5F	; 95
    2bf6:	b0 e0       	ldi	r27, 0x00	; 0
    2bf8:	ef e5       	ldi	r30, 0x5F	; 95
    2bfa:	f0 e0       	ldi	r31, 0x00	; 0
    2bfc:	80 81       	ld	r24, Z
    2bfe:	80 68       	ori	r24, 0x80	; 128
    2c00:	8c 93       	st	X, r24
}
    2c02:	cf 91       	pop	r28
    2c04:	df 91       	pop	r29
    2c06:	08 95       	ret

00002c08 <GIE_voidDisable>:

void GIE_voidDisable()
{
    2c08:	df 93       	push	r29
    2c0a:	cf 93       	push	r28
    2c0c:	cd b7       	in	r28, 0x3d	; 61
    2c0e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    2c10:	af e5       	ldi	r26, 0x5F	; 95
    2c12:	b0 e0       	ldi	r27, 0x00	; 0
    2c14:	ef e5       	ldi	r30, 0x5F	; 95
    2c16:	f0 e0       	ldi	r31, 0x00	; 0
    2c18:	80 81       	ld	r24, Z
    2c1a:	8f 77       	andi	r24, 0x7F	; 127
    2c1c:	8c 93       	st	X, r24
}
    2c1e:	cf 91       	pop	r28
    2c20:	df 91       	pop	r29
    2c22:	08 95       	ret

00002c24 <KPD_u8Key_pressed>:
#include "../HAL/KPD_config.h"
#include "../HAL/KPD_interface.h"
#include "../HAL/KPD_private.h"

u8 KPD_u8Key_pressed()
{
    2c24:	df 93       	push	r29
    2c26:	cf 93       	push	r28
    2c28:	00 d0       	rcall	.+0      	; 0x2c2a <KPD_u8Key_pressed+0x6>
    2c2a:	00 d0       	rcall	.+0      	; 0x2c2c <KPD_u8Key_pressed+0x8>
    2c2c:	0f 92       	push	r0
    2c2e:	cd b7       	in	r28, 0x3d	; 61
    2c30:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8RowItrator;
	u8 Local_u8ColItrator;
	u8 Local_u8GetState;
	u8 Local_u8KeyPressed = KPD_NO_PRESSED_KEY;
    2c32:	8f ef       	ldi	r24, 0xFF	; 255
    2c34:	89 83       	std	Y+1, r24	; 0x01
	static u8 Local_u8KPD_ROW_PINS[Max_Rows] = { KPD_ROW_PIN0, KPD_ROW_PIN1,
			KPD_ROW_PIN2, KPD_ROW_PIN3 };
	static u8 Local_u8KPD_COL_PINS[Max_Cols] = { KPD_COL_PIN0, KPD_COL_PIN1,
			KPD_COL_PIN2, KPD_COL_PIN3 };
	static u8 Local_u8KPD_Nums[Max_Rows][Max_Cols] = KPD_u8ARR;
	for (Local_u8ColItrator = 0; Local_u8ColItrator < Max_Cols;
    2c36:	1a 82       	std	Y+2, r1	; 0x02
    2c38:	5e c0       	rjmp	.+188    	; 0x2cf6 <KPD_u8Key_pressed+0xd2>
			Local_u8ColItrator++) {
		DIO_u8SetPinValue(KPD_INPUT_PORT,
    2c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3c:	88 2f       	mov	r24, r24
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	fc 01       	movw	r30, r24
    2c42:	e2 59       	subi	r30, 0x92	; 146
    2c44:	fd 4f       	sbci	r31, 0xFD	; 253
    2c46:	90 81       	ld	r25, Z
    2c48:	82 e0       	ldi	r24, 0x02	; 2
    2c4a:	69 2f       	mov	r22, r25
    2c4c:	40 e0       	ldi	r20, 0x00	; 0
    2c4e:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
				Local_u8KPD_COL_PINS[Local_u8ColItrator], DIO_PIN_LOW);
		/*Read the current Row*/
		for (Local_u8RowItrator = 0; Local_u8RowItrator < Max_Rows;
    2c52:	1b 82       	std	Y+3, r1	; 0x03
    2c54:	3d c0       	rjmp	.+122    	; 0x2cd0 <KPD_u8Key_pressed+0xac>
				Local_u8RowItrator++) {
			DIO_u8GetPinValue(KPD_INPUT_PORT,
    2c56:	8b 81       	ldd	r24, Y+3	; 0x03
    2c58:	88 2f       	mov	r24, r24
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	fc 01       	movw	r30, r24
    2c5e:	ee 58       	subi	r30, 0x8E	; 142
    2c60:	fd 4f       	sbci	r31, 0xFD	; 253
    2c62:	90 81       	ld	r25, Z
    2c64:	9e 01       	movw	r18, r28
    2c66:	2c 5f       	subi	r18, 0xFC	; 252
    2c68:	3f 4f       	sbci	r19, 0xFF	; 255
    2c6a:	82 e0       	ldi	r24, 0x02	; 2
    2c6c:	69 2f       	mov	r22, r25
    2c6e:	a9 01       	movw	r20, r18
    2c70:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8GetPinValue>
					Local_u8KPD_ROW_PINS[Local_u8RowItrator],
					&Local_u8GetState);
			/*chick switch id pressed */
			if (Local_u8GetState == DIO_PIN_LOW) {
    2c74:	8c 81       	ldd	r24, Y+4	; 0x04
    2c76:	88 23       	and	r24, r24
    2c78:	41 f5       	brne	.+80     	; 0x2cca <KPD_u8Key_pressed+0xa6>
				Local_u8KeyPressed =
    2c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7c:	48 2f       	mov	r20, r24
    2c7e:	50 e0       	ldi	r21, 0x00	; 0
    2c80:	8a 81       	ldd	r24, Y+2	; 0x02
    2c82:	28 2f       	mov	r18, r24
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	ca 01       	movw	r24, r20
    2c88:	88 0f       	add	r24, r24
    2c8a:	99 1f       	adc	r25, r25
    2c8c:	88 0f       	add	r24, r24
    2c8e:	99 1f       	adc	r25, r25
    2c90:	82 0f       	add	r24, r18
    2c92:	93 1f       	adc	r25, r19
    2c94:	fc 01       	movw	r30, r24
    2c96:	e2 5a       	subi	r30, 0xA2	; 162
    2c98:	fd 4f       	sbci	r31, 0xFD	; 253
    2c9a:	80 81       	ld	r24, Z
    2c9c:	89 83       	std	Y+1, r24	; 0x01
    2c9e:	0f c0       	rjmp	.+30     	; 0x2cbe <KPD_u8Key_pressed+0x9a>
						Local_u8KPD_Nums[Local_u8RowItrator][Local_u8ColItrator];
				/*polling busy waiting until the key is released*/
				while (Local_u8GetState == DIO_PIN_LOW) {
					DIO_u8GetPinValue(KPD_INPUT_PORT,
    2ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca2:	88 2f       	mov	r24, r24
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	fc 01       	movw	r30, r24
    2ca8:	ee 58       	subi	r30, 0x8E	; 142
    2caa:	fd 4f       	sbci	r31, 0xFD	; 253
    2cac:	90 81       	ld	r25, Z
    2cae:	9e 01       	movw	r18, r28
    2cb0:	2c 5f       	subi	r18, 0xFC	; 252
    2cb2:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb4:	82 e0       	ldi	r24, 0x02	; 2
    2cb6:	69 2f       	mov	r22, r25
    2cb8:	a9 01       	movw	r20, r18
    2cba:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8GetPinValue>
			/*chick switch id pressed */
			if (Local_u8GetState == DIO_PIN_LOW) {
				Local_u8KeyPressed =
						Local_u8KPD_Nums[Local_u8RowItrator][Local_u8ColItrator];
				/*polling busy waiting until the key is released*/
				while (Local_u8GetState == DIO_PIN_LOW) {
    2cbe:	8c 81       	ldd	r24, Y+4	; 0x04
    2cc0:	88 23       	and	r24, r24
    2cc2:	71 f3       	breq	.-36     	; 0x2ca0 <KPD_u8Key_pressed+0x7c>
					DIO_u8GetPinValue(KPD_INPUT_PORT,
							Local_u8KPD_ROW_PINS[Local_u8RowItrator],
							&Local_u8GetState);
				}
				return Local_u8KeyPressed;
    2cc4:	89 81       	ldd	r24, Y+1	; 0x01
    2cc6:	8d 83       	std	Y+5, r24	; 0x05
    2cc8:	1c c0       	rjmp	.+56     	; 0x2d02 <KPD_u8Key_pressed+0xde>
			Local_u8ColItrator++) {
		DIO_u8SetPinValue(KPD_INPUT_PORT,
				Local_u8KPD_COL_PINS[Local_u8ColItrator], DIO_PIN_LOW);
		/*Read the current Row*/
		for (Local_u8RowItrator = 0; Local_u8RowItrator < Max_Rows;
				Local_u8RowItrator++) {
    2cca:	8b 81       	ldd	r24, Y+3	; 0x03
    2ccc:	8f 5f       	subi	r24, 0xFF	; 255
    2cce:	8b 83       	std	Y+3, r24	; 0x03
	for (Local_u8ColItrator = 0; Local_u8ColItrator < Max_Cols;
			Local_u8ColItrator++) {
		DIO_u8SetPinValue(KPD_INPUT_PORT,
				Local_u8KPD_COL_PINS[Local_u8ColItrator], DIO_PIN_LOW);
		/*Read the current Row*/
		for (Local_u8RowItrator = 0; Local_u8RowItrator < Max_Rows;
    2cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd2:	84 30       	cpi	r24, 0x04	; 4
    2cd4:	08 f4       	brcc	.+2      	; 0x2cd8 <KPD_u8Key_pressed+0xb4>
    2cd6:	bf cf       	rjmp	.-130    	; 0x2c56 <KPD_u8Key_pressed+0x32>
							&Local_u8GetState);
				}
				return Local_u8KeyPressed;
			}
		}
		DIO_u8SetPinValue(KPD_INPUT_PORT,
    2cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cda:	88 2f       	mov	r24, r24
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	fc 01       	movw	r30, r24
    2ce0:	e2 59       	subi	r30, 0x92	; 146
    2ce2:	fd 4f       	sbci	r31, 0xFD	; 253
    2ce4:	90 81       	ld	r25, Z
    2ce6:	82 e0       	ldi	r24, 0x02	; 2
    2ce8:	69 2f       	mov	r22, r25
    2cea:	41 e0       	ldi	r20, 0x01	; 1
    2cec:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
			KPD_ROW_PIN2, KPD_ROW_PIN3 };
	static u8 Local_u8KPD_COL_PINS[Max_Cols] = { KPD_COL_PIN0, KPD_COL_PIN1,
			KPD_COL_PIN2, KPD_COL_PIN3 };
	static u8 Local_u8KPD_Nums[Max_Rows][Max_Cols] = KPD_u8ARR;
	for (Local_u8ColItrator = 0; Local_u8ColItrator < Max_Cols;
			Local_u8ColItrator++) {
    2cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf2:	8f 5f       	subi	r24, 0xFF	; 255
    2cf4:	8a 83       	std	Y+2, r24	; 0x02
	static u8 Local_u8KPD_ROW_PINS[Max_Rows] = { KPD_ROW_PIN0, KPD_ROW_PIN1,
			KPD_ROW_PIN2, KPD_ROW_PIN3 };
	static u8 Local_u8KPD_COL_PINS[Max_Cols] = { KPD_COL_PIN0, KPD_COL_PIN1,
			KPD_COL_PIN2, KPD_COL_PIN3 };
	static u8 Local_u8KPD_Nums[Max_Rows][Max_Cols] = KPD_u8ARR;
	for (Local_u8ColItrator = 0; Local_u8ColItrator < Max_Cols;
    2cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf8:	84 30       	cpi	r24, 0x04	; 4
    2cfa:	08 f4       	brcc	.+2      	; 0x2cfe <KPD_u8Key_pressed+0xda>
    2cfc:	9e cf       	rjmp	.-196    	; 0x2c3a <KPD_u8Key_pressed+0x16>
			}
		}
		DIO_u8SetPinValue(KPD_INPUT_PORT,
				Local_u8KPD_COL_PINS[Local_u8ColItrator], DIO_PIN_HIGH);
	}
	return Local_u8KeyPressed;
    2cfe:	89 81       	ldd	r24, Y+1	; 0x01
    2d00:	8d 83       	std	Y+5, r24	; 0x05
    2d02:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2d04:	0f 90       	pop	r0
    2d06:	0f 90       	pop	r0
    2d08:	0f 90       	pop	r0
    2d0a:	0f 90       	pop	r0
    2d0c:	0f 90       	pop	r0
    2d0e:	cf 91       	pop	r28
    2d10:	df 91       	pop	r29
    2d12:	08 95       	ret

00002d14 <LED_u8TurnOn>:
#include "../HAL/LED_private.h"
#include "../HAL/LED_config.h"
#include "../HAL/LED_interface.h"

u8 LED_u8TurnOn(LED_t * Copy_LED)
{
    2d14:	df 93       	push	r29
    2d16:	cf 93       	push	r28
    2d18:	00 d0       	rcall	.+0      	; 0x2d1a <LED_u8TurnOn+0x6>
    2d1a:	0f 92       	push	r0
    2d1c:	cd b7       	in	r28, 0x3d	; 61
    2d1e:	de b7       	in	r29, 0x3e	; 62
    2d20:	9b 83       	std	Y+3, r25	; 0x03
    2d22:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2d24:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_LED->ConnType==LED_SOUCE)
    2d26:	ea 81       	ldd	r30, Y+2	; 0x02
    2d28:	fb 81       	ldd	r31, Y+3	; 0x03
    2d2a:	82 81       	ldd	r24, Z+2	; 0x02
    2d2c:	81 30       	cpi	r24, 0x01	; 1
    2d2e:	59 f4       	brne	.+22     	; 0x2d46 <LED_u8TurnOn+0x32>
	{
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,DIO_PIN_HIGH);
    2d30:	ea 81       	ldd	r30, Y+2	; 0x02
    2d32:	fb 81       	ldd	r31, Y+3	; 0x03
    2d34:	80 81       	ld	r24, Z
    2d36:	ea 81       	ldd	r30, Y+2	; 0x02
    2d38:	fb 81       	ldd	r31, Y+3	; 0x03
    2d3a:	91 81       	ldd	r25, Z+1	; 0x01
    2d3c:	69 2f       	mov	r22, r25
    2d3e:	41 e0       	ldi	r20, 0x01	; 1
    2d40:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
    2d44:	12 c0       	rjmp	.+36     	; 0x2d6a <LED_u8TurnOn+0x56>
	}
	else if(Copy_LED->ConnType==LED_SINK)
    2d46:	ea 81       	ldd	r30, Y+2	; 0x02
    2d48:	fb 81       	ldd	r31, Y+3	; 0x03
    2d4a:	82 81       	ldd	r24, Z+2	; 0x02
    2d4c:	88 23       	and	r24, r24
    2d4e:	59 f4       	brne	.+22     	; 0x2d66 <LED_u8TurnOn+0x52>
	{
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,DIO_PIN_LOW);
    2d50:	ea 81       	ldd	r30, Y+2	; 0x02
    2d52:	fb 81       	ldd	r31, Y+3	; 0x03
    2d54:	80 81       	ld	r24, Z
    2d56:	ea 81       	ldd	r30, Y+2	; 0x02
    2d58:	fb 81       	ldd	r31, Y+3	; 0x03
    2d5a:	91 81       	ldd	r25, Z+1	; 0x01
    2d5c:	69 2f       	mov	r22, r25
    2d5e:	40 e0       	ldi	r20, 0x00	; 0
    2d60:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
    2d64:	02 c0       	rjmp	.+4      	; 0x2d6a <LED_u8TurnOn+0x56>
	}
	else
		Local_u8ErrorState = NOTOK;
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    2d6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d6c:	0f 90       	pop	r0
    2d6e:	0f 90       	pop	r0
    2d70:	0f 90       	pop	r0
    2d72:	cf 91       	pop	r28
    2d74:	df 91       	pop	r29
    2d76:	08 95       	ret

00002d78 <LED_u8TurnOff>:
u8 LED_u8TurnOff(LED_t * Copy_LED)
{
    2d78:	df 93       	push	r29
    2d7a:	cf 93       	push	r28
    2d7c:	00 d0       	rcall	.+0      	; 0x2d7e <LED_u8TurnOff+0x6>
    2d7e:	0f 92       	push	r0
    2d80:	cd b7       	in	r28, 0x3d	; 61
    2d82:	de b7       	in	r29, 0x3e	; 62
    2d84:	9b 83       	std	Y+3, r25	; 0x03
    2d86:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2d88:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_LED->ConnType==LED_SOUCE)
    2d8a:	ea 81       	ldd	r30, Y+2	; 0x02
    2d8c:	fb 81       	ldd	r31, Y+3	; 0x03
    2d8e:	82 81       	ldd	r24, Z+2	; 0x02
    2d90:	81 30       	cpi	r24, 0x01	; 1
    2d92:	59 f4       	brne	.+22     	; 0x2daa <LED_u8TurnOff+0x32>
	{
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,DIO_PIN_LOW);
    2d94:	ea 81       	ldd	r30, Y+2	; 0x02
    2d96:	fb 81       	ldd	r31, Y+3	; 0x03
    2d98:	80 81       	ld	r24, Z
    2d9a:	ea 81       	ldd	r30, Y+2	; 0x02
    2d9c:	fb 81       	ldd	r31, Y+3	; 0x03
    2d9e:	91 81       	ldd	r25, Z+1	; 0x01
    2da0:	69 2f       	mov	r22, r25
    2da2:	40 e0       	ldi	r20, 0x00	; 0
    2da4:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
    2da8:	12 c0       	rjmp	.+36     	; 0x2dce <LED_u8TurnOff+0x56>
	}
	else if(Copy_LED->ConnType==LED_SINK)
    2daa:	ea 81       	ldd	r30, Y+2	; 0x02
    2dac:	fb 81       	ldd	r31, Y+3	; 0x03
    2dae:	82 81       	ldd	r24, Z+2	; 0x02
    2db0:	88 23       	and	r24, r24
    2db2:	59 f4       	brne	.+22     	; 0x2dca <LED_u8TurnOff+0x52>
	{
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,DIO_PIN_HIGH);
    2db4:	ea 81       	ldd	r30, Y+2	; 0x02
    2db6:	fb 81       	ldd	r31, Y+3	; 0x03
    2db8:	80 81       	ld	r24, Z
    2dba:	ea 81       	ldd	r30, Y+2	; 0x02
    2dbc:	fb 81       	ldd	r31, Y+3	; 0x03
    2dbe:	91 81       	ldd	r25, Z+1	; 0x01
    2dc0:	69 2f       	mov	r22, r25
    2dc2:	41 e0       	ldi	r20, 0x01	; 1
    2dc4:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
    2dc8:	02 c0       	rjmp	.+4      	; 0x2dce <LED_u8TurnOff+0x56>
	}
	else
		Local_u8ErrorState = NOTOK;
    2dca:	81 e0       	ldi	r24, 0x01	; 1
    2dcc:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    2dce:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dd0:	0f 90       	pop	r0
    2dd2:	0f 90       	pop	r0
    2dd4:	0f 90       	pop	r0
    2dd6:	cf 91       	pop	r28
    2dd8:	df 91       	pop	r29
    2dda:	08 95       	ret

00002ddc <LED_u8TogLed>:
u8 LED_u8TogLed(LED_t *Copy_LED)
{
    2ddc:	df 93       	push	r29
    2dde:	cf 93       	push	r28
    2de0:	00 d0       	rcall	.+0      	; 0x2de2 <LED_u8TogLed+0x6>
    2de2:	0f 92       	push	r0
    2de4:	cd b7       	in	r28, 0x3d	; 61
    2de6:	de b7       	in	r29, 0x3e	; 62
    2de8:	9b 83       	std	Y+3, r25	; 0x03
    2dea:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2dec:	19 82       	std	Y+1, r1	; 0x01
	static u8 Local_u8State = 0;
	if(Copy_LED->ConnType==LED_SOUCE)
    2dee:	ea 81       	ldd	r30, Y+2	; 0x02
    2df0:	fb 81       	ldd	r31, Y+3	; 0x03
    2df2:	82 81       	ldd	r24, Z+2	; 0x02
    2df4:	81 30       	cpi	r24, 0x01	; 1
    2df6:	99 f4       	brne	.+38     	; 0x2e1e <LED_u8TogLed+0x42>
	{
		TOG_BIT(Local_u8State,0);
    2df8:	90 91 af 02 	lds	r25, 0x02AF
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	89 27       	eor	r24, r25
    2e00:	80 93 af 02 	sts	0x02AF, r24
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,Local_u8State);
    2e04:	ea 81       	ldd	r30, Y+2	; 0x02
    2e06:	fb 81       	ldd	r31, Y+3	; 0x03
    2e08:	80 81       	ld	r24, Z
    2e0a:	ea 81       	ldd	r30, Y+2	; 0x02
    2e0c:	fb 81       	ldd	r31, Y+3	; 0x03
    2e0e:	91 81       	ldd	r25, Z+1	; 0x01
    2e10:	20 91 af 02 	lds	r18, 0x02AF
    2e14:	69 2f       	mov	r22, r25
    2e16:	42 2f       	mov	r20, r18
    2e18:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
    2e1c:	1a c0       	rjmp	.+52     	; 0x2e52 <LED_u8TogLed+0x76>
	}
	else if(Copy_LED->ConnType==LED_SINK)
    2e1e:	ea 81       	ldd	r30, Y+2	; 0x02
    2e20:	fb 81       	ldd	r31, Y+3	; 0x03
    2e22:	82 81       	ldd	r24, Z+2	; 0x02
    2e24:	88 23       	and	r24, r24
    2e26:	99 f4       	brne	.+38     	; 0x2e4e <LED_u8TogLed+0x72>
	{
		TOG_BIT(Local_u8State,0);
    2e28:	90 91 af 02 	lds	r25, 0x02AF
    2e2c:	81 e0       	ldi	r24, 0x01	; 1
    2e2e:	89 27       	eor	r24, r25
    2e30:	80 93 af 02 	sts	0x02AF, r24
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,Local_u8State);
    2e34:	ea 81       	ldd	r30, Y+2	; 0x02
    2e36:	fb 81       	ldd	r31, Y+3	; 0x03
    2e38:	80 81       	ld	r24, Z
    2e3a:	ea 81       	ldd	r30, Y+2	; 0x02
    2e3c:	fb 81       	ldd	r31, Y+3	; 0x03
    2e3e:	91 81       	ldd	r25, Z+1	; 0x01
    2e40:	20 91 af 02 	lds	r18, 0x02AF
    2e44:	69 2f       	mov	r22, r25
    2e46:	42 2f       	mov	r20, r18
    2e48:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
    2e4c:	02 c0       	rjmp	.+4      	; 0x2e52 <LED_u8TogLed+0x76>
	}
	else
		Local_u8ErrorState = NOTOK;
    2e4e:	81 e0       	ldi	r24, 0x01	; 1
    2e50:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    2e52:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e54:	0f 90       	pop	r0
    2e56:	0f 90       	pop	r0
    2e58:	0f 90       	pop	r0
    2e5a:	cf 91       	pop	r28
    2e5c:	df 91       	pop	r29
    2e5e:	08 95       	ret

00002e60 <PORT_voidInit>:
#include "../MCAL/PORT_config.h"
#include "../MCAL/PORT_register.h"
#include "../MCAL/PORT_interface.h"

void PORT_voidInit()
{
    2e60:	df 93       	push	r29
    2e62:	cf 93       	push	r28
    2e64:	cd b7       	in	r28, 0x3d	; 61
    2e66:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;	
    2e68:	ea e3       	ldi	r30, 0x3A	; 58
    2e6a:	f0 e0       	ldi	r31, 0x00	; 0
    2e6c:	87 e0       	ldi	r24, 0x07	; 7
    2e6e:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    2e70:	e7 e3       	ldi	r30, 0x37	; 55
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	89 e0       	ldi	r24, 0x09	; 9
    2e76:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    2e78:	e4 e3       	ldi	r30, 0x34	; 52
    2e7a:	f0 e0       	ldi	r31, 0x00	; 0
    2e7c:	80 ef       	ldi	r24, 0xF0	; 240
    2e7e:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    2e80:	e1 e3       	ldi	r30, 0x31	; 49
    2e82:	f0 e0       	ldi	r31, 0x00	; 0
    2e84:	80 e3       	ldi	r24, 0x30	; 48
    2e86:	80 83       	st	Z, r24
	
	PORTA =PORTA_INIT_VALUE;
    2e88:	eb e3       	ldi	r30, 0x3B	; 59
    2e8a:	f0 e0       	ldi	r31, 0x00	; 0
    2e8c:	80 ec       	ldi	r24, 0xC0	; 192
    2e8e:	80 83       	st	Z, r24
	PORTB =PORTB_INIT_VALUE;
    2e90:	e8 e3       	ldi	r30, 0x38	; 56
    2e92:	f0 e0       	ldi	r31, 0x00	; 0
    2e94:	10 82       	st	Z, r1
	PORTC =PORTC_INIT_VALUE;
    2e96:	e5 e3       	ldi	r30, 0x35	; 53
    2e98:	f0 e0       	ldi	r31, 0x00	; 0
    2e9a:	8f ef       	ldi	r24, 0xFF	; 255
    2e9c:	80 83       	st	Z, r24
	PORTD =PORTD_INIT_VALUE;
    2e9e:	e2 e3       	ldi	r30, 0x32	; 50
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	10 82       	st	Z, r1
	
}
    2ea4:	cf 91       	pop	r28
    2ea6:	df 91       	pop	r29
    2ea8:	08 95       	ret

00002eaa <SERVO_voidInit>:
#include "../HAL/SERVO_private.h"
#include "../HAL/SERVO_config.h"
#include "../HAL/SERVO_interface.h"

void SERVO_voidInit()
{
    2eaa:	df 93       	push	r29
    2eac:	cf 93       	push	r28
    2eae:	cd b7       	in	r28, 0x3d	; 61
    2eb0:	de b7       	in	r29, 0x3e	; 62
    2eb2:	2a 97       	sbiw	r28, 0x0a	; 10
    2eb4:	0f b6       	in	r0, 0x3f	; 63
    2eb6:	f8 94       	cli
    2eb8:	de bf       	out	0x3e, r29	; 62
    2eba:	0f be       	out	0x3f, r0	; 63
    2ebc:	cd bf       	out	0x3d, r28	; 61
	Timer_t t1 = {TIMER1,TIMER1_IC_FAST_PWM,SERVO_CHANNAL_CON,TIMER10_DIV_8,TIMER1A_INT_DISABLE|TIMER1B_INT_DISABLE};
    2ebe:	ce 01       	movw	r24, r28
    2ec0:	01 96       	adiw	r24, 0x01	; 1
    2ec2:	9f 83       	std	Y+7, r25	; 0x07
    2ec4:	8e 83       	std	Y+6, r24	; 0x06
    2ec6:	e3 e8       	ldi	r30, 0x83	; 131
    2ec8:	f2 e0       	ldi	r31, 0x02	; 2
    2eca:	f9 87       	std	Y+9, r31	; 0x09
    2ecc:	e8 87       	std	Y+8, r30	; 0x08
    2ece:	f5 e0       	ldi	r31, 0x05	; 5
    2ed0:	fa 87       	std	Y+10, r31	; 0x0a
    2ed2:	e8 85       	ldd	r30, Y+8	; 0x08
    2ed4:	f9 85       	ldd	r31, Y+9	; 0x09
    2ed6:	00 80       	ld	r0, Z
    2ed8:	88 85       	ldd	r24, Y+8	; 0x08
    2eda:	99 85       	ldd	r25, Y+9	; 0x09
    2edc:	01 96       	adiw	r24, 0x01	; 1
    2ede:	99 87       	std	Y+9, r25	; 0x09
    2ee0:	88 87       	std	Y+8, r24	; 0x08
    2ee2:	ee 81       	ldd	r30, Y+6	; 0x06
    2ee4:	ff 81       	ldd	r31, Y+7	; 0x07
    2ee6:	00 82       	st	Z, r0
    2ee8:	8e 81       	ldd	r24, Y+6	; 0x06
    2eea:	9f 81       	ldd	r25, Y+7	; 0x07
    2eec:	01 96       	adiw	r24, 0x01	; 1
    2eee:	9f 83       	std	Y+7, r25	; 0x07
    2ef0:	8e 83       	std	Y+6, r24	; 0x06
    2ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef4:	91 50       	subi	r25, 0x01	; 1
    2ef6:	9a 87       	std	Y+10, r25	; 0x0a
    2ef8:	ea 85       	ldd	r30, Y+10	; 0x0a
    2efa:	ee 23       	and	r30, r30
    2efc:	51 f7       	brne	.-44     	; 0x2ed2 <SERVO_voidInit+0x28>
	TIMER1_voidSetICR(20000);
    2efe:	80 e2       	ldi	r24, 0x20	; 32
    2f00:	9e e4       	ldi	r25, 0x4E	; 78
    2f02:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <TIMER1_voidSetICR>
	TIMER_voidInit(&t1);
    2f06:	ce 01       	movw	r24, r28
    2f08:	01 96       	adiw	r24, 0x01	; 1
    2f0a:	0e 94 fd 22 	call	0x45fa	; 0x45fa <TIMER_voidInit>
}
    2f0e:	2a 96       	adiw	r28, 0x0a	; 10
    2f10:	0f b6       	in	r0, 0x3f	; 63
    2f12:	f8 94       	cli
    2f14:	de bf       	out	0x3e, r29	; 62
    2f16:	0f be       	out	0x3f, r0	; 63
    2f18:	cd bf       	out	0x3d, r28	; 61
    2f1a:	cf 91       	pop	r28
    2f1c:	df 91       	pop	r29
    2f1e:	08 95       	ret

00002f20 <SERVO_voidSetAngle>:

void SERVO_voidSetAngle(u16 Copy_u16Angle)
{
    2f20:	af 92       	push	r10
    2f22:	bf 92       	push	r11
    2f24:	cf 92       	push	r12
    2f26:	df 92       	push	r13
    2f28:	ef 92       	push	r14
    2f2a:	ff 92       	push	r15
    2f2c:	0f 93       	push	r16
    2f2e:	1f 93       	push	r17
    2f30:	df 93       	push	r29
    2f32:	cf 93       	push	r28
    2f34:	00 d0       	rcall	.+0      	; 0x2f36 <SERVO_voidSetAngle+0x16>
    2f36:	00 d0       	rcall	.+0      	; 0x2f38 <SERVO_voidSetAngle+0x18>
    2f38:	00 d0       	rcall	.+0      	; 0x2f3a <SERVO_voidSetAngle+0x1a>
    2f3a:	cd b7       	in	r28, 0x3d	; 61
    2f3c:	de b7       	in	r29, 0x3e	; 62
    2f3e:	9e 83       	std	Y+6, r25	; 0x06
    2f40:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32Angle=0;
    2f42:	19 82       	std	Y+1, r1	; 0x01
    2f44:	1a 82       	std	Y+2, r1	; 0x02
    2f46:	1b 82       	std	Y+3, r1	; 0x03
    2f48:	1c 82       	std	Y+4, r1	; 0x04
	Local_u32Angle = Map(0,180,750,2499,Copy_u16Angle);
    2f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f4e:	cc 01       	movw	r24, r24
    2f50:	a0 e0       	ldi	r26, 0x00	; 0
    2f52:	b0 e0       	ldi	r27, 0x00	; 0
    2f54:	00 d0       	rcall	.+0      	; 0x2f56 <SERVO_voidSetAngle+0x36>
    2f56:	00 d0       	rcall	.+0      	; 0x2f58 <SERVO_voidSetAngle+0x38>
    2f58:	ed b7       	in	r30, 0x3d	; 61
    2f5a:	fe b7       	in	r31, 0x3e	; 62
    2f5c:	31 96       	adiw	r30, 0x01	; 1
    2f5e:	80 83       	st	Z, r24
    2f60:	91 83       	std	Z+1, r25	; 0x01
    2f62:	a2 83       	std	Z+2, r26	; 0x02
    2f64:	b3 83       	std	Z+3, r27	; 0x03
    2f66:	60 e0       	ldi	r22, 0x00	; 0
    2f68:	70 e0       	ldi	r23, 0x00	; 0
    2f6a:	80 e0       	ldi	r24, 0x00	; 0
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	24 eb       	ldi	r18, 0xB4	; 180
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	40 e0       	ldi	r20, 0x00	; 0
    2f74:	50 e0       	ldi	r21, 0x00	; 0
    2f76:	0f 2e       	mov	r0, r31
    2f78:	fe ee       	ldi	r31, 0xEE	; 238
    2f7a:	ef 2e       	mov	r14, r31
    2f7c:	f2 e0       	ldi	r31, 0x02	; 2
    2f7e:	ff 2e       	mov	r15, r31
    2f80:	f0 e0       	ldi	r31, 0x00	; 0
    2f82:	0f 2f       	mov	r16, r31
    2f84:	f0 e0       	ldi	r31, 0x00	; 0
    2f86:	1f 2f       	mov	r17, r31
    2f88:	f0 2d       	mov	r31, r0
    2f8a:	0f 2e       	mov	r0, r31
    2f8c:	f3 ec       	ldi	r31, 0xC3	; 195
    2f8e:	af 2e       	mov	r10, r31
    2f90:	f9 e0       	ldi	r31, 0x09	; 9
    2f92:	bf 2e       	mov	r11, r31
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	cf 2e       	mov	r12, r31
    2f98:	f0 e0       	ldi	r31, 0x00	; 0
    2f9a:	df 2e       	mov	r13, r31
    2f9c:	f0 2d       	mov	r31, r0
    2f9e:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <Map>
    2fa2:	0f 90       	pop	r0
    2fa4:	0f 90       	pop	r0
    2fa6:	0f 90       	pop	r0
    2fa8:	0f 90       	pop	r0
    2faa:	dc 01       	movw	r26, r24
    2fac:	cb 01       	movw	r24, r22
    2fae:	89 83       	std	Y+1, r24	; 0x01
    2fb0:	9a 83       	std	Y+2, r25	; 0x02
    2fb2:	ab 83       	std	Y+3, r26	; 0x03
    2fb4:	bc 83       	std	Y+4, r27	; 0x04
	if(SERVO_CHANNAL_CON<=3)
	TIMER1_voidSetChannelBCompMatch(Local_u32Angle);
    2fb6:	89 81       	ldd	r24, Y+1	; 0x01
    2fb8:	9a 81       	ldd	r25, Y+2	; 0x02
    2fba:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <TIMER1_voidSetChannelBCompMatch>
	else if(SERVO_CHANNAL_CON<=12)
	TIMER1_voidSetChannelACompMatch(Local_u32Angle);

}
    2fbe:	26 96       	adiw	r28, 0x06	; 6
    2fc0:	0f b6       	in	r0, 0x3f	; 63
    2fc2:	f8 94       	cli
    2fc4:	de bf       	out	0x3e, r29	; 62
    2fc6:	0f be       	out	0x3f, r0	; 63
    2fc8:	cd bf       	out	0x3d, r28	; 61
    2fca:	cf 91       	pop	r28
    2fcc:	df 91       	pop	r29
    2fce:	1f 91       	pop	r17
    2fd0:	0f 91       	pop	r16
    2fd2:	ff 90       	pop	r15
    2fd4:	ef 90       	pop	r14
    2fd6:	df 90       	pop	r13
    2fd8:	cf 90       	pop	r12
    2fda:	bf 90       	pop	r11
    2fdc:	af 90       	pop	r10
    2fde:	08 95       	ret

00002fe0 <Map>:


static u32 Map(u32 InMin,u32 InMax,u32 OutMin,u32 OutMax,u32 InVal)
{
    2fe0:	af 92       	push	r10
    2fe2:	bf 92       	push	r11
    2fe4:	cf 92       	push	r12
    2fe6:	df 92       	push	r13
    2fe8:	ef 92       	push	r14
    2fea:	ff 92       	push	r15
    2fec:	0f 93       	push	r16
    2fee:	1f 93       	push	r17
    2ff0:	df 93       	push	r29
    2ff2:	cf 93       	push	r28
    2ff4:	cd b7       	in	r28, 0x3d	; 61
    2ff6:	de b7       	in	r29, 0x3e	; 62
    2ff8:	64 97       	sbiw	r28, 0x14	; 20
    2ffa:	0f b6       	in	r0, 0x3f	; 63
    2ffc:	f8 94       	cli
    2ffe:	de bf       	out	0x3e, r29	; 62
    3000:	0f be       	out	0x3f, r0	; 63
    3002:	cd bf       	out	0x3d, r28	; 61
    3004:	6d 83       	std	Y+5, r22	; 0x05
    3006:	7e 83       	std	Y+6, r23	; 0x06
    3008:	8f 83       	std	Y+7, r24	; 0x07
    300a:	98 87       	std	Y+8, r25	; 0x08
    300c:	29 87       	std	Y+9, r18	; 0x09
    300e:	3a 87       	std	Y+10, r19	; 0x0a
    3010:	4b 87       	std	Y+11, r20	; 0x0b
    3012:	5c 87       	std	Y+12, r21	; 0x0c
    3014:	ed 86       	std	Y+13, r14	; 0x0d
    3016:	fe 86       	std	Y+14, r15	; 0x0e
    3018:	0f 87       	std	Y+15, r16	; 0x0f
    301a:	18 8b       	std	Y+16, r17	; 0x10
    301c:	a9 8a       	std	Y+17, r10	; 0x11
    301e:	ba 8a       	std	Y+18, r11	; 0x12
    3020:	cb 8a       	std	Y+19, r12	; 0x13
    3022:	dc 8a       	std	Y+20, r13	; 0x14
	u32 Local=0;
    3024:	19 82       	std	Y+1, r1	; 0x01
    3026:	1a 82       	std	Y+2, r1	; 0x02
    3028:	1b 82       	std	Y+3, r1	; 0x03
    302a:	1c 82       	std	Y+4, r1	; 0x04
	Local = (((InVal-InMin)*(OutMax-OutMin))/(InMax-InMin))+OutMin;
    302c:	29 a1       	ldd	r18, Y+33	; 0x21
    302e:	3a a1       	ldd	r19, Y+34	; 0x22
    3030:	4b a1       	ldd	r20, Y+35	; 0x23
    3032:	5c a1       	ldd	r21, Y+36	; 0x24
    3034:	8d 81       	ldd	r24, Y+5	; 0x05
    3036:	9e 81       	ldd	r25, Y+6	; 0x06
    3038:	af 81       	ldd	r26, Y+7	; 0x07
    303a:	b8 85       	ldd	r27, Y+8	; 0x08
    303c:	79 01       	movw	r14, r18
    303e:	8a 01       	movw	r16, r20
    3040:	e8 1a       	sub	r14, r24
    3042:	f9 0a       	sbc	r15, r25
    3044:	0a 0b       	sbc	r16, r26
    3046:	1b 0b       	sbc	r17, r27
    3048:	29 89       	ldd	r18, Y+17	; 0x11
    304a:	3a 89       	ldd	r19, Y+18	; 0x12
    304c:	4b 89       	ldd	r20, Y+19	; 0x13
    304e:	5c 89       	ldd	r21, Y+20	; 0x14
    3050:	8d 85       	ldd	r24, Y+13	; 0x0d
    3052:	9e 85       	ldd	r25, Y+14	; 0x0e
    3054:	af 85       	ldd	r26, Y+15	; 0x0f
    3056:	b8 89       	ldd	r27, Y+16	; 0x10
    3058:	28 1b       	sub	r18, r24
    305a:	39 0b       	sbc	r19, r25
    305c:	4a 0b       	sbc	r20, r26
    305e:	5b 0b       	sbc	r21, r27
    3060:	c8 01       	movw	r24, r16
    3062:	b7 01       	movw	r22, r14
    3064:	0e 94 71 3b 	call	0x76e2	; 0x76e2 <__mulsi3>
    3068:	7b 01       	movw	r14, r22
    306a:	8c 01       	movw	r16, r24
    306c:	29 85       	ldd	r18, Y+9	; 0x09
    306e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3070:	4b 85       	ldd	r20, Y+11	; 0x0b
    3072:	5c 85       	ldd	r21, Y+12	; 0x0c
    3074:	8d 81       	ldd	r24, Y+5	; 0x05
    3076:	9e 81       	ldd	r25, Y+6	; 0x06
    3078:	af 81       	ldd	r26, Y+7	; 0x07
    307a:	b8 85       	ldd	r27, Y+8	; 0x08
    307c:	28 1b       	sub	r18, r24
    307e:	39 0b       	sbc	r19, r25
    3080:	4a 0b       	sbc	r20, r26
    3082:	5b 0b       	sbc	r21, r27
    3084:	c8 01       	movw	r24, r16
    3086:	b7 01       	movw	r22, r14
    3088:	0e 94 a4 3b 	call	0x7748	; 0x7748 <__udivmodsi4>
    308c:	da 01       	movw	r26, r20
    308e:	c9 01       	movw	r24, r18
    3090:	9c 01       	movw	r18, r24
    3092:	ad 01       	movw	r20, r26
    3094:	8d 85       	ldd	r24, Y+13	; 0x0d
    3096:	9e 85       	ldd	r25, Y+14	; 0x0e
    3098:	af 85       	ldd	r26, Y+15	; 0x0f
    309a:	b8 89       	ldd	r27, Y+16	; 0x10
    309c:	82 0f       	add	r24, r18
    309e:	93 1f       	adc	r25, r19
    30a0:	a4 1f       	adc	r26, r20
    30a2:	b5 1f       	adc	r27, r21
    30a4:	89 83       	std	Y+1, r24	; 0x01
    30a6:	9a 83       	std	Y+2, r25	; 0x02
    30a8:	ab 83       	std	Y+3, r26	; 0x03
    30aa:	bc 83       	std	Y+4, r27	; 0x04
	return Local;
    30ac:	89 81       	ldd	r24, Y+1	; 0x01
    30ae:	9a 81       	ldd	r25, Y+2	; 0x02
    30b0:	ab 81       	ldd	r26, Y+3	; 0x03
    30b2:	bc 81       	ldd	r27, Y+4	; 0x04
}
    30b4:	bc 01       	movw	r22, r24
    30b6:	cd 01       	movw	r24, r26
    30b8:	64 96       	adiw	r28, 0x14	; 20
    30ba:	0f b6       	in	r0, 0x3f	; 63
    30bc:	f8 94       	cli
    30be:	de bf       	out	0x3e, r29	; 62
    30c0:	0f be       	out	0x3f, r0	; 63
    30c2:	cd bf       	out	0x3d, r28	; 61
    30c4:	cf 91       	pop	r28
    30c6:	df 91       	pop	r29
    30c8:	1f 91       	pop	r17
    30ca:	0f 91       	pop	r16
    30cc:	ff 90       	pop	r15
    30ce:	ef 90       	pop	r14
    30d0:	df 90       	pop	r13
    30d2:	cf 90       	pop	r12
    30d4:	bf 90       	pop	r11
    30d6:	af 90       	pop	r10
    30d8:	08 95       	ret

000030da <SSD_u8SetNumber>:
#include "../HAL/SSD_private.h"
#include "../HAL/SSD_config.h"
#include "../HAL/SSD_interface.h"

u8 SSD_u8SetNumber(u8 Copy_u8Number,SSD_t *Copy_SSD)
{
    30da:	df 93       	push	r29
    30dc:	cf 93       	push	r28
    30de:	00 d0       	rcall	.+0      	; 0x30e0 <SSD_u8SetNumber+0x6>
    30e0:	00 d0       	rcall	.+0      	; 0x30e2 <SSD_u8SetNumber+0x8>
    30e2:	cd b7       	in	r28, 0x3d	; 61
    30e4:	de b7       	in	r29, 0x3e	; 62
    30e6:	8a 83       	std	Y+2, r24	; 0x02
    30e8:	7c 83       	std	Y+4, r23	; 0x04
    30ea:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState= OK;
    30ec:	19 82       	std	Y+1, r1	; 0x01
	static u8 SSD_Arr[10] = SSD_ARR_OF_NUM;
	if(Copy_SSD->ComType==ANODE)
    30ee:	eb 81       	ldd	r30, Y+3	; 0x03
    30f0:	fc 81       	ldd	r31, Y+4	; 0x04
    30f2:	80 81       	ld	r24, Z
    30f4:	88 23       	and	r24, r24
    30f6:	91 f4       	brne	.+36     	; 0x311c <SSD_u8SetNumber+0x42>
	{
		Local_u8ErrorState = DIO_u8SetPortValue(Copy_SSD->Port,~SSD_Arr[Copy_u8Number]);
    30f8:	eb 81       	ldd	r30, Y+3	; 0x03
    30fa:	fc 81       	ldd	r31, Y+4	; 0x04
    30fc:	21 81       	ldd	r18, Z+1	; 0x01
    30fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3100:	88 2f       	mov	r24, r24
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	fc 01       	movw	r30, r24
    3106:	ea 58       	subi	r30, 0x8A	; 138
    3108:	fd 4f       	sbci	r31, 0xFD	; 253
    310a:	80 81       	ld	r24, Z
    310c:	98 2f       	mov	r25, r24
    310e:	90 95       	com	r25
    3110:	82 2f       	mov	r24, r18
    3112:	69 2f       	mov	r22, r25
    3114:	0e 94 43 11 	call	0x2286	; 0x2286 <DIO_u8SetPortValue>
    3118:	89 83       	std	Y+1, r24	; 0x01
    311a:	17 c0       	rjmp	.+46     	; 0x314a <SSD_u8SetNumber+0x70>
	}
	else if(Copy_SSD->ComType==CATHODE )
    311c:	eb 81       	ldd	r30, Y+3	; 0x03
    311e:	fc 81       	ldd	r31, Y+4	; 0x04
    3120:	80 81       	ld	r24, Z
    3122:	81 30       	cpi	r24, 0x01	; 1
    3124:	81 f4       	brne	.+32     	; 0x3146 <SSD_u8SetNumber+0x6c>
	{
		Local_u8ErrorState = DIO_u8SetPortValue(Copy_SSD->Port,SSD_Arr[Copy_u8Number]);
    3126:	eb 81       	ldd	r30, Y+3	; 0x03
    3128:	fc 81       	ldd	r31, Y+4	; 0x04
    312a:	21 81       	ldd	r18, Z+1	; 0x01
    312c:	8a 81       	ldd	r24, Y+2	; 0x02
    312e:	88 2f       	mov	r24, r24
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	fc 01       	movw	r30, r24
    3134:	ea 58       	subi	r30, 0x8A	; 138
    3136:	fd 4f       	sbci	r31, 0xFD	; 253
    3138:	90 81       	ld	r25, Z
    313a:	82 2f       	mov	r24, r18
    313c:	69 2f       	mov	r22, r25
    313e:	0e 94 43 11 	call	0x2286	; 0x2286 <DIO_u8SetPortValue>
    3142:	89 83       	std	Y+1, r24	; 0x01
    3144:	02 c0       	rjmp	.+4      	; 0x314a <SSD_u8SetNumber+0x70>
	}
	else
		Local_u8ErrorState = NOTOK;
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    314a:	89 81       	ldd	r24, Y+1	; 0x01

}
    314c:	0f 90       	pop	r0
    314e:	0f 90       	pop	r0
    3150:	0f 90       	pop	r0
    3152:	0f 90       	pop	r0
    3154:	cf 91       	pop	r28
    3156:	df 91       	pop	r29
    3158:	08 95       	ret

0000315a <SSD_u8Enable>:
u8 SSD_u8Enable(SSD_t *Copy_SSD)
{
    315a:	df 93       	push	r29
    315c:	cf 93       	push	r28
    315e:	00 d0       	rcall	.+0      	; 0x3160 <SSD_u8Enable+0x6>
    3160:	0f 92       	push	r0
    3162:	cd b7       	in	r28, 0x3d	; 61
    3164:	de b7       	in	r29, 0x3e	; 62
    3166:	9b 83       	std	Y+3, r25	; 0x03
    3168:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState= OK;
    316a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_SSD->ComType==ANODE)
    316c:	ea 81       	ldd	r30, Y+2	; 0x02
    316e:	fb 81       	ldd	r31, Y+3	; 0x03
    3170:	80 81       	ld	r24, Z
    3172:	88 23       	and	r24, r24
    3174:	61 f4       	brne	.+24     	; 0x318e <SSD_u8Enable+0x34>
	{
		Local_u8ErrorState = DIO_u8SetPinValue(Copy_SSD->EnablePort,Copy_SSD->EnablePin,DIO_PIN_HIGH);
    3176:	ea 81       	ldd	r30, Y+2	; 0x02
    3178:	fb 81       	ldd	r31, Y+3	; 0x03
    317a:	82 81       	ldd	r24, Z+2	; 0x02
    317c:	ea 81       	ldd	r30, Y+2	; 0x02
    317e:	fb 81       	ldd	r31, Y+3	; 0x03
    3180:	93 81       	ldd	r25, Z+3	; 0x03
    3182:	69 2f       	mov	r22, r25
    3184:	41 e0       	ldi	r20, 0x01	; 1
    3186:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
    318a:	89 83       	std	Y+1, r24	; 0x01
    318c:	13 c0       	rjmp	.+38     	; 0x31b4 <SSD_u8Enable+0x5a>
	}
	else if(Copy_SSD->ComType==CATHODE )
    318e:	ea 81       	ldd	r30, Y+2	; 0x02
    3190:	fb 81       	ldd	r31, Y+3	; 0x03
    3192:	80 81       	ld	r24, Z
    3194:	81 30       	cpi	r24, 0x01	; 1
    3196:	61 f4       	brne	.+24     	; 0x31b0 <SSD_u8Enable+0x56>
	{
		Local_u8ErrorState = DIO_u8SetPinValue(Copy_SSD->EnablePort,Copy_SSD->EnablePin,DIO_PIN_LOW);
    3198:	ea 81       	ldd	r30, Y+2	; 0x02
    319a:	fb 81       	ldd	r31, Y+3	; 0x03
    319c:	82 81       	ldd	r24, Z+2	; 0x02
    319e:	ea 81       	ldd	r30, Y+2	; 0x02
    31a0:	fb 81       	ldd	r31, Y+3	; 0x03
    31a2:	93 81       	ldd	r25, Z+3	; 0x03
    31a4:	69 2f       	mov	r22, r25
    31a6:	40 e0       	ldi	r20, 0x00	; 0
    31a8:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
    31ac:	89 83       	std	Y+1, r24	; 0x01
    31ae:	02 c0       	rjmp	.+4      	; 0x31b4 <SSD_u8Enable+0x5a>
	}
	else
		Local_u8ErrorState = NOTOK;
    31b0:	81 e0       	ldi	r24, 0x01	; 1
    31b2:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    31b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    31b6:	0f 90       	pop	r0
    31b8:	0f 90       	pop	r0
    31ba:	0f 90       	pop	r0
    31bc:	cf 91       	pop	r28
    31be:	df 91       	pop	r29
    31c0:	08 95       	ret

000031c2 <SSD_u8Disable>:

u8 SSD_u8Disable(SSD_t *Copy_SSD)
{
    31c2:	df 93       	push	r29
    31c4:	cf 93       	push	r28
    31c6:	00 d0       	rcall	.+0      	; 0x31c8 <SSD_u8Disable+0x6>
    31c8:	0f 92       	push	r0
    31ca:	cd b7       	in	r28, 0x3d	; 61
    31cc:	de b7       	in	r29, 0x3e	; 62
    31ce:	9b 83       	std	Y+3, r25	; 0x03
    31d0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState= OK;
    31d2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_SSD->ComType==ANODE)
    31d4:	ea 81       	ldd	r30, Y+2	; 0x02
    31d6:	fb 81       	ldd	r31, Y+3	; 0x03
    31d8:	80 81       	ld	r24, Z
    31da:	88 23       	and	r24, r24
    31dc:	61 f4       	brne	.+24     	; 0x31f6 <SSD_u8Disable+0x34>
	{
		Local_u8ErrorState = DIO_u8SetPinValue(Copy_SSD->EnablePort,Copy_SSD->EnablePin,DIO_PIN_LOW);
    31de:	ea 81       	ldd	r30, Y+2	; 0x02
    31e0:	fb 81       	ldd	r31, Y+3	; 0x03
    31e2:	82 81       	ldd	r24, Z+2	; 0x02
    31e4:	ea 81       	ldd	r30, Y+2	; 0x02
    31e6:	fb 81       	ldd	r31, Y+3	; 0x03
    31e8:	93 81       	ldd	r25, Z+3	; 0x03
    31ea:	69 2f       	mov	r22, r25
    31ec:	40 e0       	ldi	r20, 0x00	; 0
    31ee:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
    31f2:	89 83       	std	Y+1, r24	; 0x01
    31f4:	13 c0       	rjmp	.+38     	; 0x321c <SSD_u8Disable+0x5a>
	}
	else if(Copy_SSD->ComType==CATHODE )
    31f6:	ea 81       	ldd	r30, Y+2	; 0x02
    31f8:	fb 81       	ldd	r31, Y+3	; 0x03
    31fa:	80 81       	ld	r24, Z
    31fc:	81 30       	cpi	r24, 0x01	; 1
    31fe:	61 f4       	brne	.+24     	; 0x3218 <SSD_u8Disable+0x56>
	{
		Local_u8ErrorState = DIO_u8SetPinValue(Copy_SSD->EnablePort,Copy_SSD->EnablePin,DIO_PIN_HIGH);
    3200:	ea 81       	ldd	r30, Y+2	; 0x02
    3202:	fb 81       	ldd	r31, Y+3	; 0x03
    3204:	82 81       	ldd	r24, Z+2	; 0x02
    3206:	ea 81       	ldd	r30, Y+2	; 0x02
    3208:	fb 81       	ldd	r31, Y+3	; 0x03
    320a:	93 81       	ldd	r25, Z+3	; 0x03
    320c:	69 2f       	mov	r22, r25
    320e:	41 e0       	ldi	r20, 0x01	; 1
    3210:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
    3214:	89 83       	std	Y+1, r24	; 0x01
    3216:	02 c0       	rjmp	.+4      	; 0x321c <SSD_u8Disable+0x5a>
	}
	else
		Local_u8ErrorState = NOTOK;
    3218:	81 e0       	ldi	r24, 0x01	; 1
    321a:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    321c:	89 81       	ldd	r24, Y+1	; 0x01
}
    321e:	0f 90       	pop	r0
    3220:	0f 90       	pop	r0
    3222:	0f 90       	pop	r0
    3224:	cf 91       	pop	r28
    3226:	df 91       	pop	r29
    3228:	08 95       	ret

0000322a <STEP_MOTORu8StartFullMode>:
#include "../HAL/STEP_MOTOR_config.h"
#include "../HAL/STEP_MOTOR_private.h"
#include "../HAL/STEP_MOTOR_interface.h"
#include "../HAL/CLCD_interface.h"
u8 STEP_MOTORu8StartFullMode(STEP_t *Copy_pStep)
{
    322a:	df 93       	push	r29
    322c:	cf 93       	push	r28
    322e:	cd b7       	in	r28, 0x3d	; 61
    3230:	de b7       	in	r29, 0x3e	; 62
    3232:	c2 54       	subi	r28, 0x42	; 66
    3234:	d0 40       	sbci	r29, 0x00	; 0
    3236:	0f b6       	in	r0, 0x3f	; 63
    3238:	f8 94       	cli
    323a:	de bf       	out	0x3e, r29	; 62
    323c:	0f be       	out	0x3f, r0	; 63
    323e:	cd bf       	out	0x3d, r28	; 61
    3240:	fe 01       	movw	r30, r28
    3242:	ef 5b       	subi	r30, 0xBF	; 191
    3244:	ff 4f       	sbci	r31, 0xFF	; 255
    3246:	91 83       	std	Z+1, r25	; 0x01
    3248:	80 83       	st	Z, r24
	u8 Local_u8ErrorState = OK;
    324a:	fe 01       	movw	r30, r28
    324c:	e0 5c       	subi	r30, 0xC0	; 192
    324e:	ff 4f       	sbci	r31, 0xFF	; 255
    3250:	10 82       	st	Z, r1
	u16 Local_u16NumOfSteps = (u16)((((f32)Copy_pStep->AngleDegree)/11.2)*64.0);
    3252:	fe 01       	movw	r30, r28
    3254:	ef 5b       	subi	r30, 0xBF	; 191
    3256:	ff 4f       	sbci	r31, 0xFF	; 255
    3258:	01 90       	ld	r0, Z+
    325a:	f0 81       	ld	r31, Z
    325c:	e0 2d       	mov	r30, r0
    325e:	83 81       	ldd	r24, Z+3	; 0x03
    3260:	94 81       	ldd	r25, Z+4	; 0x04
    3262:	cc 01       	movw	r24, r24
    3264:	a0 e0       	ldi	r26, 0x00	; 0
    3266:	b0 e0       	ldi	r27, 0x00	; 0
    3268:	bc 01       	movw	r22, r24
    326a:	cd 01       	movw	r24, r26
    326c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3270:	dc 01       	movw	r26, r24
    3272:	cb 01       	movw	r24, r22
    3274:	bc 01       	movw	r22, r24
    3276:	cd 01       	movw	r24, r26
    3278:	23 e3       	ldi	r18, 0x33	; 51
    327a:	33 e3       	ldi	r19, 0x33	; 51
    327c:	43 e3       	ldi	r20, 0x33	; 51
    327e:	51 e4       	ldi	r21, 0x41	; 65
    3280:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3284:	dc 01       	movw	r26, r24
    3286:	cb 01       	movw	r24, r22
    3288:	bc 01       	movw	r22, r24
    328a:	cd 01       	movw	r24, r26
    328c:	20 e0       	ldi	r18, 0x00	; 0
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	40 e8       	ldi	r20, 0x80	; 128
    3292:	52 e4       	ldi	r21, 0x42	; 66
    3294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3298:	dc 01       	movw	r26, r24
    329a:	cb 01       	movw	r24, r22
    329c:	bc 01       	movw	r22, r24
    329e:	cd 01       	movw	r24, r26
    32a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a4:	dc 01       	movw	r26, r24
    32a6:	cb 01       	movw	r24, r22
    32a8:	9f af       	std	Y+63, r25	; 0x3f
    32aa:	8e af       	std	Y+62, r24	; 0x3e
	u16 Local_u16MaxItration = (Local_u16NumOfSteps/MAX_FULL_STEP );
    32ac:	8e ad       	ldd	r24, Y+62	; 0x3e
    32ae:	9f ad       	ldd	r25, Y+63	; 0x3f
    32b0:	96 95       	lsr	r25
    32b2:	87 95       	ror	r24
    32b4:	96 95       	lsr	r25
    32b6:	87 95       	ror	r24
    32b8:	9d af       	std	Y+61, r25	; 0x3d
    32ba:	8c af       	std	Y+60, r24	; 0x3c
	u16 Local_u16Counter = 0;
    32bc:	1b ae       	std	Y+59, r1	; 0x3b
    32be:	1a ae       	std	Y+58, r1	; 0x3a
	u8 Local_u8ItrateStep = 0;
    32c0:	19 ae       	std	Y+57, r1	; 0x39
	if(STEP_LOWER_NIBBLE == Copy_pStep->Nibble)
    32c2:	fe 01       	movw	r30, r28
    32c4:	ef 5b       	subi	r30, 0xBF	; 191
    32c6:	ff 4f       	sbci	r31, 0xFF	; 255
    32c8:	01 90       	ld	r0, Z+
    32ca:	f0 81       	ld	r31, Z
    32cc:	e0 2d       	mov	r30, r0
    32ce:	81 81       	ldd	r24, Z+1	; 0x01
    32d0:	88 23       	and	r24, r24
    32d2:	09 f0       	breq	.+2      	; 0x32d6 <STEP_MOTORu8StartFullMode+0xac>
    32d4:	5e c1       	rjmp	.+700    	; 0x3592 <STEP_MOTORu8StartFullMode+0x368>
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
    32d6:	fe 01       	movw	r30, r28
    32d8:	ef 5b       	subi	r30, 0xBF	; 191
    32da:	ff 4f       	sbci	r31, 0xFF	; 255
    32dc:	01 90       	ld	r0, Z+
    32de:	f0 81       	ld	r31, Z
    32e0:	e0 2d       	mov	r30, r0
    32e2:	82 81       	ldd	r24, Z+2	; 0x02
    32e4:	88 23       	and	r24, r24
    32e6:	09 f0       	breq	.+2      	; 0x32ea <STEP_MOTORu8StartFullMode+0xc0>
    32e8:	a2 c0       	rjmp	.+324    	; 0x342e <STEP_MOTORu8StartFullMode+0x204>
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    32ea:	1b ae       	std	Y+59, r1	; 0x3b
    32ec:	1a ae       	std	Y+58, r1	; 0x3a
    32ee:	96 c0       	rjmp	.+300    	; 0x341c <STEP_MOTORu8StartFullMode+0x1f2>
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    32f0:	19 ae       	std	Y+57, r1	; 0x39
    32f2:	8b c0       	rjmp	.+278    	; 0x340a <STEP_MOTORu8StartFullMode+0x1e0>
				{
					DIO_u8SetLowNibbleValue(Copy_pStep->Port,(MASK_CW<<Local_u8ItrateStep));
    32f4:	fe 01       	movw	r30, r28
    32f6:	ef 5b       	subi	r30, 0xBF	; 191
    32f8:	ff 4f       	sbci	r31, 0xFF	; 255
    32fa:	01 90       	ld	r0, Z+
    32fc:	f0 81       	ld	r31, Z
    32fe:	e0 2d       	mov	r30, r0
    3300:	40 81       	ld	r20, Z
    3302:	89 ad       	ldd	r24, Y+57	; 0x39
    3304:	28 2f       	mov	r18, r24
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	02 c0       	rjmp	.+4      	; 0x3312 <STEP_MOTORu8StartFullMode+0xe8>
    330e:	88 0f       	add	r24, r24
    3310:	99 1f       	adc	r25, r25
    3312:	2a 95       	dec	r18
    3314:	e2 f7       	brpl	.-8      	; 0x330e <STEP_MOTORu8StartFullMode+0xe4>
    3316:	98 2f       	mov	r25, r24
    3318:	84 2f       	mov	r24, r20
    331a:	69 2f       	mov	r22, r25
    331c:	0e 94 b7 12 	call	0x256e	; 0x256e <DIO_u8SetLowNibbleValue>
    3320:	80 e0       	ldi	r24, 0x00	; 0
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	a0 e0       	ldi	r26, 0x00	; 0
    3326:	b0 e4       	ldi	r27, 0x40	; 64
    3328:	8d ab       	std	Y+53, r24	; 0x35
    332a:	9e ab       	std	Y+54, r25	; 0x36
    332c:	af ab       	std	Y+55, r26	; 0x37
    332e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3330:	6d a9       	ldd	r22, Y+53	; 0x35
    3332:	7e a9       	ldd	r23, Y+54	; 0x36
    3334:	8f a9       	ldd	r24, Y+55	; 0x37
    3336:	98 ad       	ldd	r25, Y+56	; 0x38
    3338:	20 e0       	ldi	r18, 0x00	; 0
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	4a ef       	ldi	r20, 0xFA	; 250
    333e:	54 e4       	ldi	r21, 0x44	; 68
    3340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3344:	dc 01       	movw	r26, r24
    3346:	cb 01       	movw	r24, r22
    3348:	89 ab       	std	Y+49, r24	; 0x31
    334a:	9a ab       	std	Y+50, r25	; 0x32
    334c:	ab ab       	std	Y+51, r26	; 0x33
    334e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3350:	69 a9       	ldd	r22, Y+49	; 0x31
    3352:	7a a9       	ldd	r23, Y+50	; 0x32
    3354:	8b a9       	ldd	r24, Y+51	; 0x33
    3356:	9c a9       	ldd	r25, Y+52	; 0x34
    3358:	20 e0       	ldi	r18, 0x00	; 0
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	40 e8       	ldi	r20, 0x80	; 128
    335e:	5f e3       	ldi	r21, 0x3F	; 63
    3360:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3364:	88 23       	and	r24, r24
    3366:	2c f4       	brge	.+10     	; 0x3372 <STEP_MOTORu8StartFullMode+0x148>
		__ticks = 1;
    3368:	81 e0       	ldi	r24, 0x01	; 1
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	98 ab       	std	Y+48, r25	; 0x30
    336e:	8f a7       	std	Y+47, r24	; 0x2f
    3370:	3f c0       	rjmp	.+126    	; 0x33f0 <STEP_MOTORu8StartFullMode+0x1c6>
	else if (__tmp > 65535)
    3372:	69 a9       	ldd	r22, Y+49	; 0x31
    3374:	7a a9       	ldd	r23, Y+50	; 0x32
    3376:	8b a9       	ldd	r24, Y+51	; 0x33
    3378:	9c a9       	ldd	r25, Y+52	; 0x34
    337a:	20 e0       	ldi	r18, 0x00	; 0
    337c:	3f ef       	ldi	r19, 0xFF	; 255
    337e:	4f e7       	ldi	r20, 0x7F	; 127
    3380:	57 e4       	ldi	r21, 0x47	; 71
    3382:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3386:	18 16       	cp	r1, r24
    3388:	4c f5       	brge	.+82     	; 0x33dc <STEP_MOTORu8StartFullMode+0x1b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    338a:	6d a9       	ldd	r22, Y+53	; 0x35
    338c:	7e a9       	ldd	r23, Y+54	; 0x36
    338e:	8f a9       	ldd	r24, Y+55	; 0x37
    3390:	98 ad       	ldd	r25, Y+56	; 0x38
    3392:	20 e0       	ldi	r18, 0x00	; 0
    3394:	30 e0       	ldi	r19, 0x00	; 0
    3396:	40 e2       	ldi	r20, 0x20	; 32
    3398:	51 e4       	ldi	r21, 0x41	; 65
    339a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    339e:	dc 01       	movw	r26, r24
    33a0:	cb 01       	movw	r24, r22
    33a2:	bc 01       	movw	r22, r24
    33a4:	cd 01       	movw	r24, r26
    33a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33aa:	dc 01       	movw	r26, r24
    33ac:	cb 01       	movw	r24, r22
    33ae:	98 ab       	std	Y+48, r25	; 0x30
    33b0:	8f a7       	std	Y+47, r24	; 0x2f
    33b2:	0f c0       	rjmp	.+30     	; 0x33d2 <STEP_MOTORu8StartFullMode+0x1a8>
    33b4:	88 ec       	ldi	r24, 0xC8	; 200
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	9e a7       	std	Y+46, r25	; 0x2e
    33ba:	8d a7       	std	Y+45, r24	; 0x2d
    33bc:	8d a5       	ldd	r24, Y+45	; 0x2d
    33be:	9e a5       	ldd	r25, Y+46	; 0x2e
    33c0:	01 97       	sbiw	r24, 0x01	; 1
    33c2:	f1 f7       	brne	.-4      	; 0x33c0 <STEP_MOTORu8StartFullMode+0x196>
    33c4:	9e a7       	std	Y+46, r25	; 0x2e
    33c6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    33ca:	98 a9       	ldd	r25, Y+48	; 0x30
    33cc:	01 97       	sbiw	r24, 0x01	; 1
    33ce:	98 ab       	std	Y+48, r25	; 0x30
    33d0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    33d4:	98 a9       	ldd	r25, Y+48	; 0x30
    33d6:	00 97       	sbiw	r24, 0x00	; 0
    33d8:	69 f7       	brne	.-38     	; 0x33b4 <STEP_MOTORu8StartFullMode+0x18a>
    33da:	14 c0       	rjmp	.+40     	; 0x3404 <STEP_MOTORu8StartFullMode+0x1da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33dc:	69 a9       	ldd	r22, Y+49	; 0x31
    33de:	7a a9       	ldd	r23, Y+50	; 0x32
    33e0:	8b a9       	ldd	r24, Y+51	; 0x33
    33e2:	9c a9       	ldd	r25, Y+52	; 0x34
    33e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33e8:	dc 01       	movw	r26, r24
    33ea:	cb 01       	movw	r24, r22
    33ec:	98 ab       	std	Y+48, r25	; 0x30
    33ee:	8f a7       	std	Y+47, r24	; 0x2f
    33f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    33f2:	98 a9       	ldd	r25, Y+48	; 0x30
    33f4:	9c a7       	std	Y+44, r25	; 0x2c
    33f6:	8b a7       	std	Y+43, r24	; 0x2b
    33f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    33fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    33fc:	01 97       	sbiw	r24, 0x01	; 1
    33fe:	f1 f7       	brne	.-4      	; 0x33fc <STEP_MOTORu8StartFullMode+0x1d2>
    3400:	9c a7       	std	Y+44, r25	; 0x2c
    3402:	8b a7       	std	Y+43, r24	; 0x2b
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    3404:	89 ad       	ldd	r24, Y+57	; 0x39
    3406:	8f 5f       	subi	r24, 0xFF	; 255
    3408:	89 af       	std	Y+57, r24	; 0x39
    340a:	89 ad       	ldd	r24, Y+57	; 0x39
    340c:	84 30       	cpi	r24, 0x04	; 4
    340e:	08 f4       	brcc	.+2      	; 0x3412 <STEP_MOTORu8StartFullMode+0x1e8>
    3410:	71 cf       	rjmp	.-286    	; 0x32f4 <STEP_MOTORu8StartFullMode+0xca>
	u8 Local_u8ItrateStep = 0;
	if(STEP_LOWER_NIBBLE == Copy_pStep->Nibble)
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3412:	8a ad       	ldd	r24, Y+58	; 0x3a
    3414:	9b ad       	ldd	r25, Y+59	; 0x3b
    3416:	01 96       	adiw	r24, 0x01	; 1
    3418:	9b af       	std	Y+59, r25	; 0x3b
    341a:	8a af       	std	Y+58, r24	; 0x3a
    341c:	2a ad       	ldd	r18, Y+58	; 0x3a
    341e:	3b ad       	ldd	r19, Y+59	; 0x3b
    3420:	8c ad       	ldd	r24, Y+60	; 0x3c
    3422:	9d ad       	ldd	r25, Y+61	; 0x3d
    3424:	28 17       	cp	r18, r24
    3426:	39 07       	cpc	r19, r25
    3428:	08 f4       	brcc	.+2      	; 0x342c <STEP_MOTORu8StartFullMode+0x202>
    342a:	62 cf       	rjmp	.-316    	; 0x32f0 <STEP_MOTORu8StartFullMode+0xc6>
    342c:	1f c2       	rjmp	.+1086   	; 0x386c <STEP_MOTORu8StartFullMode+0x642>
					DIO_u8SetLowNibbleValue(Copy_pStep->Port,(MASK_CW<<Local_u8ItrateStep));
					_delay_ms(2);
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
    342e:	fe 01       	movw	r30, r28
    3430:	ef 5b       	subi	r30, 0xBF	; 191
    3432:	ff 4f       	sbci	r31, 0xFF	; 255
    3434:	01 90       	ld	r0, Z+
    3436:	f0 81       	ld	r31, Z
    3438:	e0 2d       	mov	r30, r0
    343a:	82 81       	ldd	r24, Z+2	; 0x02
    343c:	81 30       	cpi	r24, 0x01	; 1
    343e:	09 f0       	breq	.+2      	; 0x3442 <STEP_MOTORu8StartFullMode+0x218>
    3440:	a2 c0       	rjmp	.+324    	; 0x3586 <STEP_MOTORu8StartFullMode+0x35c>
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3442:	1b ae       	std	Y+59, r1	; 0x3b
    3444:	1a ae       	std	Y+58, r1	; 0x3a
    3446:	96 c0       	rjmp	.+300    	; 0x3574 <STEP_MOTORu8StartFullMode+0x34a>
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    3448:	19 ae       	std	Y+57, r1	; 0x39
    344a:	8b c0       	rjmp	.+278    	; 0x3562 <STEP_MOTORu8StartFullMode+0x338>
				{
					DIO_u8SetLowNibbleValue(Copy_pStep->Port,(MASK_CCW>>Local_u8ItrateStep));
    344c:	fe 01       	movw	r30, r28
    344e:	ef 5b       	subi	r30, 0xBF	; 191
    3450:	ff 4f       	sbci	r31, 0xFF	; 255
    3452:	01 90       	ld	r0, Z+
    3454:	f0 81       	ld	r31, Z
    3456:	e0 2d       	mov	r30, r0
    3458:	40 81       	ld	r20, Z
    345a:	89 ad       	ldd	r24, Y+57	; 0x39
    345c:	28 2f       	mov	r18, r24
    345e:	30 e0       	ldi	r19, 0x00	; 0
    3460:	88 e0       	ldi	r24, 0x08	; 8
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	02 c0       	rjmp	.+4      	; 0x346a <STEP_MOTORu8StartFullMode+0x240>
    3466:	95 95       	asr	r25
    3468:	87 95       	ror	r24
    346a:	2a 95       	dec	r18
    346c:	e2 f7       	brpl	.-8      	; 0x3466 <STEP_MOTORu8StartFullMode+0x23c>
    346e:	98 2f       	mov	r25, r24
    3470:	84 2f       	mov	r24, r20
    3472:	69 2f       	mov	r22, r25
    3474:	0e 94 b7 12 	call	0x256e	; 0x256e <DIO_u8SetLowNibbleValue>
    3478:	80 e0       	ldi	r24, 0x00	; 0
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	a0 e0       	ldi	r26, 0x00	; 0
    347e:	b0 e4       	ldi	r27, 0x40	; 64
    3480:	8f a3       	std	Y+39, r24	; 0x27
    3482:	98 a7       	std	Y+40, r25	; 0x28
    3484:	a9 a7       	std	Y+41, r26	; 0x29
    3486:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3488:	6f a1       	ldd	r22, Y+39	; 0x27
    348a:	78 a5       	ldd	r23, Y+40	; 0x28
    348c:	89 a5       	ldd	r24, Y+41	; 0x29
    348e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3490:	20 e0       	ldi	r18, 0x00	; 0
    3492:	30 e0       	ldi	r19, 0x00	; 0
    3494:	4a ef       	ldi	r20, 0xFA	; 250
    3496:	54 e4       	ldi	r21, 0x44	; 68
    3498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    349c:	dc 01       	movw	r26, r24
    349e:	cb 01       	movw	r24, r22
    34a0:	8b a3       	std	Y+35, r24	; 0x23
    34a2:	9c a3       	std	Y+36, r25	; 0x24
    34a4:	ad a3       	std	Y+37, r26	; 0x25
    34a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    34a8:	6b a1       	ldd	r22, Y+35	; 0x23
    34aa:	7c a1       	ldd	r23, Y+36	; 0x24
    34ac:	8d a1       	ldd	r24, Y+37	; 0x25
    34ae:	9e a1       	ldd	r25, Y+38	; 0x26
    34b0:	20 e0       	ldi	r18, 0x00	; 0
    34b2:	30 e0       	ldi	r19, 0x00	; 0
    34b4:	40 e8       	ldi	r20, 0x80	; 128
    34b6:	5f e3       	ldi	r21, 0x3F	; 63
    34b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34bc:	88 23       	and	r24, r24
    34be:	2c f4       	brge	.+10     	; 0x34ca <STEP_MOTORu8StartFullMode+0x2a0>
		__ticks = 1;
    34c0:	81 e0       	ldi	r24, 0x01	; 1
    34c2:	90 e0       	ldi	r25, 0x00	; 0
    34c4:	9a a3       	std	Y+34, r25	; 0x22
    34c6:	89 a3       	std	Y+33, r24	; 0x21
    34c8:	3f c0       	rjmp	.+126    	; 0x3548 <STEP_MOTORu8StartFullMode+0x31e>
	else if (__tmp > 65535)
    34ca:	6b a1       	ldd	r22, Y+35	; 0x23
    34cc:	7c a1       	ldd	r23, Y+36	; 0x24
    34ce:	8d a1       	ldd	r24, Y+37	; 0x25
    34d0:	9e a1       	ldd	r25, Y+38	; 0x26
    34d2:	20 e0       	ldi	r18, 0x00	; 0
    34d4:	3f ef       	ldi	r19, 0xFF	; 255
    34d6:	4f e7       	ldi	r20, 0x7F	; 127
    34d8:	57 e4       	ldi	r21, 0x47	; 71
    34da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34de:	18 16       	cp	r1, r24
    34e0:	4c f5       	brge	.+82     	; 0x3534 <STEP_MOTORu8StartFullMode+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34e2:	6f a1       	ldd	r22, Y+39	; 0x27
    34e4:	78 a5       	ldd	r23, Y+40	; 0x28
    34e6:	89 a5       	ldd	r24, Y+41	; 0x29
    34e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    34ea:	20 e0       	ldi	r18, 0x00	; 0
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	40 e2       	ldi	r20, 0x20	; 32
    34f0:	51 e4       	ldi	r21, 0x41	; 65
    34f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f6:	dc 01       	movw	r26, r24
    34f8:	cb 01       	movw	r24, r22
    34fa:	bc 01       	movw	r22, r24
    34fc:	cd 01       	movw	r24, r26
    34fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3502:	dc 01       	movw	r26, r24
    3504:	cb 01       	movw	r24, r22
    3506:	9a a3       	std	Y+34, r25	; 0x22
    3508:	89 a3       	std	Y+33, r24	; 0x21
    350a:	0f c0       	rjmp	.+30     	; 0x352a <STEP_MOTORu8StartFullMode+0x300>
    350c:	88 ec       	ldi	r24, 0xC8	; 200
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	98 a3       	std	Y+32, r25	; 0x20
    3512:	8f 8f       	std	Y+31, r24	; 0x1f
    3514:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3516:	98 a1       	ldd	r25, Y+32	; 0x20
    3518:	01 97       	sbiw	r24, 0x01	; 1
    351a:	f1 f7       	brne	.-4      	; 0x3518 <STEP_MOTORu8StartFullMode+0x2ee>
    351c:	98 a3       	std	Y+32, r25	; 0x20
    351e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3520:	89 a1       	ldd	r24, Y+33	; 0x21
    3522:	9a a1       	ldd	r25, Y+34	; 0x22
    3524:	01 97       	sbiw	r24, 0x01	; 1
    3526:	9a a3       	std	Y+34, r25	; 0x22
    3528:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    352a:	89 a1       	ldd	r24, Y+33	; 0x21
    352c:	9a a1       	ldd	r25, Y+34	; 0x22
    352e:	00 97       	sbiw	r24, 0x00	; 0
    3530:	69 f7       	brne	.-38     	; 0x350c <STEP_MOTORu8StartFullMode+0x2e2>
    3532:	14 c0       	rjmp	.+40     	; 0x355c <STEP_MOTORu8StartFullMode+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3534:	6b a1       	ldd	r22, Y+35	; 0x23
    3536:	7c a1       	ldd	r23, Y+36	; 0x24
    3538:	8d a1       	ldd	r24, Y+37	; 0x25
    353a:	9e a1       	ldd	r25, Y+38	; 0x26
    353c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3540:	dc 01       	movw	r26, r24
    3542:	cb 01       	movw	r24, r22
    3544:	9a a3       	std	Y+34, r25	; 0x22
    3546:	89 a3       	std	Y+33, r24	; 0x21
    3548:	89 a1       	ldd	r24, Y+33	; 0x21
    354a:	9a a1       	ldd	r25, Y+34	; 0x22
    354c:	9e 8f       	std	Y+30, r25	; 0x1e
    354e:	8d 8f       	std	Y+29, r24	; 0x1d
    3550:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3552:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3554:	01 97       	sbiw	r24, 0x01	; 1
    3556:	f1 f7       	brne	.-4      	; 0x3554 <STEP_MOTORu8StartFullMode+0x32a>
    3558:	9e 8f       	std	Y+30, r25	; 0x1e
    355a:	8d 8f       	std	Y+29, r24	; 0x1d
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    355c:	89 ad       	ldd	r24, Y+57	; 0x39
    355e:	8f 5f       	subi	r24, 0xFF	; 255
    3560:	89 af       	std	Y+57, r24	; 0x39
    3562:	89 ad       	ldd	r24, Y+57	; 0x39
    3564:	84 30       	cpi	r24, 0x04	; 4
    3566:	08 f4       	brcc	.+2      	; 0x356a <STEP_MOTORu8StartFullMode+0x340>
    3568:	71 cf       	rjmp	.-286    	; 0x344c <STEP_MOTORu8StartFullMode+0x222>
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    356a:	8a ad       	ldd	r24, Y+58	; 0x3a
    356c:	9b ad       	ldd	r25, Y+59	; 0x3b
    356e:	01 96       	adiw	r24, 0x01	; 1
    3570:	9b af       	std	Y+59, r25	; 0x3b
    3572:	8a af       	std	Y+58, r24	; 0x3a
    3574:	2a ad       	ldd	r18, Y+58	; 0x3a
    3576:	3b ad       	ldd	r19, Y+59	; 0x3b
    3578:	8c ad       	ldd	r24, Y+60	; 0x3c
    357a:	9d ad       	ldd	r25, Y+61	; 0x3d
    357c:	28 17       	cp	r18, r24
    357e:	39 07       	cpc	r19, r25
    3580:	08 f4       	brcc	.+2      	; 0x3584 <STEP_MOTORu8StartFullMode+0x35a>
    3582:	62 cf       	rjmp	.-316    	; 0x3448 <STEP_MOTORu8StartFullMode+0x21e>
    3584:	73 c1       	rjmp	.+742    	; 0x386c <STEP_MOTORu8StartFullMode+0x642>
					_delay_ms(2);
				}
			}
		}
		else
			Local_u8ErrorState = NOTOK;
    3586:	81 e0       	ldi	r24, 0x01	; 1
    3588:	fe 01       	movw	r30, r28
    358a:	e0 5c       	subi	r30, 0xC0	; 192
    358c:	ff 4f       	sbci	r31, 0xFF	; 255
    358e:	80 83       	st	Z, r24
    3590:	6d c1       	rjmp	.+730    	; 0x386c <STEP_MOTORu8StartFullMode+0x642>
	}
	else if(STEP_UPPER_NIBBLE == Copy_pStep->Nibble)
    3592:	fe 01       	movw	r30, r28
    3594:	ef 5b       	subi	r30, 0xBF	; 191
    3596:	ff 4f       	sbci	r31, 0xFF	; 255
    3598:	01 90       	ld	r0, Z+
    359a:	f0 81       	ld	r31, Z
    359c:	e0 2d       	mov	r30, r0
    359e:	81 81       	ldd	r24, Z+1	; 0x01
    35a0:	81 30       	cpi	r24, 0x01	; 1
    35a2:	09 f0       	breq	.+2      	; 0x35a6 <STEP_MOTORu8StartFullMode+0x37c>
    35a4:	5e c1       	rjmp	.+700    	; 0x3862 <STEP_MOTORu8StartFullMode+0x638>
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
    35a6:	fe 01       	movw	r30, r28
    35a8:	ef 5b       	subi	r30, 0xBF	; 191
    35aa:	ff 4f       	sbci	r31, 0xFF	; 255
    35ac:	01 90       	ld	r0, Z+
    35ae:	f0 81       	ld	r31, Z
    35b0:	e0 2d       	mov	r30, r0
    35b2:	82 81       	ldd	r24, Z+2	; 0x02
    35b4:	88 23       	and	r24, r24
    35b6:	09 f0       	breq	.+2      	; 0x35ba <STEP_MOTORu8StartFullMode+0x390>
    35b8:	a2 c0       	rjmp	.+324    	; 0x36fe <STEP_MOTORu8StartFullMode+0x4d4>
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    35ba:	1b ae       	std	Y+59, r1	; 0x3b
    35bc:	1a ae       	std	Y+58, r1	; 0x3a
    35be:	96 c0       	rjmp	.+300    	; 0x36ec <STEP_MOTORu8StartFullMode+0x4c2>
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    35c0:	19 ae       	std	Y+57, r1	; 0x39
    35c2:	8b c0       	rjmp	.+278    	; 0x36da <STEP_MOTORu8StartFullMode+0x4b0>
				{
					DIO_u8SetHighNibbleValue(Copy_pStep->Port,(MASK_CW<<Local_u8ItrateStep));
    35c4:	fe 01       	movw	r30, r28
    35c6:	ef 5b       	subi	r30, 0xBF	; 191
    35c8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ca:	01 90       	ld	r0, Z+
    35cc:	f0 81       	ld	r31, Z
    35ce:	e0 2d       	mov	r30, r0
    35d0:	40 81       	ld	r20, Z
    35d2:	89 ad       	ldd	r24, Y+57	; 0x39
    35d4:	28 2f       	mov	r18, r24
    35d6:	30 e0       	ldi	r19, 0x00	; 0
    35d8:	81 e0       	ldi	r24, 0x01	; 1
    35da:	90 e0       	ldi	r25, 0x00	; 0
    35dc:	02 c0       	rjmp	.+4      	; 0x35e2 <STEP_MOTORu8StartFullMode+0x3b8>
    35de:	88 0f       	add	r24, r24
    35e0:	99 1f       	adc	r25, r25
    35e2:	2a 95       	dec	r18
    35e4:	e2 f7       	brpl	.-8      	; 0x35de <STEP_MOTORu8StartFullMode+0x3b4>
    35e6:	98 2f       	mov	r25, r24
    35e8:	84 2f       	mov	r24, r20
    35ea:	69 2f       	mov	r22, r25
    35ec:	0e 94 32 13 	call	0x2664	; 0x2664 <DIO_u8SetHighNibbleValue>
    35f0:	80 e0       	ldi	r24, 0x00	; 0
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	a0 e0       	ldi	r26, 0x00	; 0
    35f6:	b0 e4       	ldi	r27, 0x40	; 64
    35f8:	89 8f       	std	Y+25, r24	; 0x19
    35fa:	9a 8f       	std	Y+26, r25	; 0x1a
    35fc:	ab 8f       	std	Y+27, r26	; 0x1b
    35fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3600:	69 8d       	ldd	r22, Y+25	; 0x19
    3602:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3604:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3606:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3608:	20 e0       	ldi	r18, 0x00	; 0
    360a:	30 e0       	ldi	r19, 0x00	; 0
    360c:	4a ef       	ldi	r20, 0xFA	; 250
    360e:	54 e4       	ldi	r21, 0x44	; 68
    3610:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3614:	dc 01       	movw	r26, r24
    3616:	cb 01       	movw	r24, r22
    3618:	8d 8b       	std	Y+21, r24	; 0x15
    361a:	9e 8b       	std	Y+22, r25	; 0x16
    361c:	af 8b       	std	Y+23, r26	; 0x17
    361e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3620:	6d 89       	ldd	r22, Y+21	; 0x15
    3622:	7e 89       	ldd	r23, Y+22	; 0x16
    3624:	8f 89       	ldd	r24, Y+23	; 0x17
    3626:	98 8d       	ldd	r25, Y+24	; 0x18
    3628:	20 e0       	ldi	r18, 0x00	; 0
    362a:	30 e0       	ldi	r19, 0x00	; 0
    362c:	40 e8       	ldi	r20, 0x80	; 128
    362e:	5f e3       	ldi	r21, 0x3F	; 63
    3630:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3634:	88 23       	and	r24, r24
    3636:	2c f4       	brge	.+10     	; 0x3642 <STEP_MOTORu8StartFullMode+0x418>
		__ticks = 1;
    3638:	81 e0       	ldi	r24, 0x01	; 1
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	9c 8b       	std	Y+20, r25	; 0x14
    363e:	8b 8b       	std	Y+19, r24	; 0x13
    3640:	3f c0       	rjmp	.+126    	; 0x36c0 <STEP_MOTORu8StartFullMode+0x496>
	else if (__tmp > 65535)
    3642:	6d 89       	ldd	r22, Y+21	; 0x15
    3644:	7e 89       	ldd	r23, Y+22	; 0x16
    3646:	8f 89       	ldd	r24, Y+23	; 0x17
    3648:	98 8d       	ldd	r25, Y+24	; 0x18
    364a:	20 e0       	ldi	r18, 0x00	; 0
    364c:	3f ef       	ldi	r19, 0xFF	; 255
    364e:	4f e7       	ldi	r20, 0x7F	; 127
    3650:	57 e4       	ldi	r21, 0x47	; 71
    3652:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3656:	18 16       	cp	r1, r24
    3658:	4c f5       	brge	.+82     	; 0x36ac <STEP_MOTORu8StartFullMode+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    365a:	69 8d       	ldd	r22, Y+25	; 0x19
    365c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    365e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3660:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3662:	20 e0       	ldi	r18, 0x00	; 0
    3664:	30 e0       	ldi	r19, 0x00	; 0
    3666:	40 e2       	ldi	r20, 0x20	; 32
    3668:	51 e4       	ldi	r21, 0x41	; 65
    366a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    366e:	dc 01       	movw	r26, r24
    3670:	cb 01       	movw	r24, r22
    3672:	bc 01       	movw	r22, r24
    3674:	cd 01       	movw	r24, r26
    3676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    367a:	dc 01       	movw	r26, r24
    367c:	cb 01       	movw	r24, r22
    367e:	9c 8b       	std	Y+20, r25	; 0x14
    3680:	8b 8b       	std	Y+19, r24	; 0x13
    3682:	0f c0       	rjmp	.+30     	; 0x36a2 <STEP_MOTORu8StartFullMode+0x478>
    3684:	88 ec       	ldi	r24, 0xC8	; 200
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	9a 8b       	std	Y+18, r25	; 0x12
    368a:	89 8b       	std	Y+17, r24	; 0x11
    368c:	89 89       	ldd	r24, Y+17	; 0x11
    368e:	9a 89       	ldd	r25, Y+18	; 0x12
    3690:	01 97       	sbiw	r24, 0x01	; 1
    3692:	f1 f7       	brne	.-4      	; 0x3690 <STEP_MOTORu8StartFullMode+0x466>
    3694:	9a 8b       	std	Y+18, r25	; 0x12
    3696:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3698:	8b 89       	ldd	r24, Y+19	; 0x13
    369a:	9c 89       	ldd	r25, Y+20	; 0x14
    369c:	01 97       	sbiw	r24, 0x01	; 1
    369e:	9c 8b       	std	Y+20, r25	; 0x14
    36a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36a2:	8b 89       	ldd	r24, Y+19	; 0x13
    36a4:	9c 89       	ldd	r25, Y+20	; 0x14
    36a6:	00 97       	sbiw	r24, 0x00	; 0
    36a8:	69 f7       	brne	.-38     	; 0x3684 <STEP_MOTORu8StartFullMode+0x45a>
    36aa:	14 c0       	rjmp	.+40     	; 0x36d4 <STEP_MOTORu8StartFullMode+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36ac:	6d 89       	ldd	r22, Y+21	; 0x15
    36ae:	7e 89       	ldd	r23, Y+22	; 0x16
    36b0:	8f 89       	ldd	r24, Y+23	; 0x17
    36b2:	98 8d       	ldd	r25, Y+24	; 0x18
    36b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36b8:	dc 01       	movw	r26, r24
    36ba:	cb 01       	movw	r24, r22
    36bc:	9c 8b       	std	Y+20, r25	; 0x14
    36be:	8b 8b       	std	Y+19, r24	; 0x13
    36c0:	8b 89       	ldd	r24, Y+19	; 0x13
    36c2:	9c 89       	ldd	r25, Y+20	; 0x14
    36c4:	98 8b       	std	Y+16, r25	; 0x10
    36c6:	8f 87       	std	Y+15, r24	; 0x0f
    36c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    36ca:	98 89       	ldd	r25, Y+16	; 0x10
    36cc:	01 97       	sbiw	r24, 0x01	; 1
    36ce:	f1 f7       	brne	.-4      	; 0x36cc <STEP_MOTORu8StartFullMode+0x4a2>
    36d0:	98 8b       	std	Y+16, r25	; 0x10
    36d2:	8f 87       	std	Y+15, r24	; 0x0f
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    36d4:	89 ad       	ldd	r24, Y+57	; 0x39
    36d6:	8f 5f       	subi	r24, 0xFF	; 255
    36d8:	89 af       	std	Y+57, r24	; 0x39
    36da:	89 ad       	ldd	r24, Y+57	; 0x39
    36dc:	84 30       	cpi	r24, 0x04	; 4
    36de:	08 f4       	brcc	.+2      	; 0x36e2 <STEP_MOTORu8StartFullMode+0x4b8>
    36e0:	71 cf       	rjmp	.-286    	; 0x35c4 <STEP_MOTORu8StartFullMode+0x39a>
	}
	else if(STEP_UPPER_NIBBLE == Copy_pStep->Nibble)
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    36e2:	8a ad       	ldd	r24, Y+58	; 0x3a
    36e4:	9b ad       	ldd	r25, Y+59	; 0x3b
    36e6:	01 96       	adiw	r24, 0x01	; 1
    36e8:	9b af       	std	Y+59, r25	; 0x3b
    36ea:	8a af       	std	Y+58, r24	; 0x3a
    36ec:	2a ad       	ldd	r18, Y+58	; 0x3a
    36ee:	3b ad       	ldd	r19, Y+59	; 0x3b
    36f0:	8c ad       	ldd	r24, Y+60	; 0x3c
    36f2:	9d ad       	ldd	r25, Y+61	; 0x3d
    36f4:	28 17       	cp	r18, r24
    36f6:	39 07       	cpc	r19, r25
    36f8:	08 f4       	brcc	.+2      	; 0x36fc <STEP_MOTORu8StartFullMode+0x4d2>
    36fa:	62 cf       	rjmp	.-316    	; 0x35c0 <STEP_MOTORu8StartFullMode+0x396>
    36fc:	b7 c0       	rjmp	.+366    	; 0x386c <STEP_MOTORu8StartFullMode+0x642>
					DIO_u8SetHighNibbleValue(Copy_pStep->Port,(MASK_CW<<Local_u8ItrateStep));
					_delay_ms(2);
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
    36fe:	fe 01       	movw	r30, r28
    3700:	ef 5b       	subi	r30, 0xBF	; 191
    3702:	ff 4f       	sbci	r31, 0xFF	; 255
    3704:	01 90       	ld	r0, Z+
    3706:	f0 81       	ld	r31, Z
    3708:	e0 2d       	mov	r30, r0
    370a:	82 81       	ldd	r24, Z+2	; 0x02
    370c:	81 30       	cpi	r24, 0x01	; 1
    370e:	09 f0       	breq	.+2      	; 0x3712 <STEP_MOTORu8StartFullMode+0x4e8>
    3710:	a2 c0       	rjmp	.+324    	; 0x3856 <STEP_MOTORu8StartFullMode+0x62c>
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3712:	1b ae       	std	Y+59, r1	; 0x3b
    3714:	1a ae       	std	Y+58, r1	; 0x3a
    3716:	96 c0       	rjmp	.+300    	; 0x3844 <STEP_MOTORu8StartFullMode+0x61a>
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    3718:	19 ae       	std	Y+57, r1	; 0x39
    371a:	8b c0       	rjmp	.+278    	; 0x3832 <STEP_MOTORu8StartFullMode+0x608>
				{
					DIO_u8SetHighNibbleValue(Copy_pStep->Port,(MASK_CCW>>Local_u8ItrateStep));
    371c:	fe 01       	movw	r30, r28
    371e:	ef 5b       	subi	r30, 0xBF	; 191
    3720:	ff 4f       	sbci	r31, 0xFF	; 255
    3722:	01 90       	ld	r0, Z+
    3724:	f0 81       	ld	r31, Z
    3726:	e0 2d       	mov	r30, r0
    3728:	40 81       	ld	r20, Z
    372a:	89 ad       	ldd	r24, Y+57	; 0x39
    372c:	28 2f       	mov	r18, r24
    372e:	30 e0       	ldi	r19, 0x00	; 0
    3730:	88 e0       	ldi	r24, 0x08	; 8
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	02 c0       	rjmp	.+4      	; 0x373a <STEP_MOTORu8StartFullMode+0x510>
    3736:	95 95       	asr	r25
    3738:	87 95       	ror	r24
    373a:	2a 95       	dec	r18
    373c:	e2 f7       	brpl	.-8      	; 0x3736 <STEP_MOTORu8StartFullMode+0x50c>
    373e:	98 2f       	mov	r25, r24
    3740:	84 2f       	mov	r24, r20
    3742:	69 2f       	mov	r22, r25
    3744:	0e 94 32 13 	call	0x2664	; 0x2664 <DIO_u8SetHighNibbleValue>
    3748:	80 e0       	ldi	r24, 0x00	; 0
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	a0 e0       	ldi	r26, 0x00	; 0
    374e:	b0 e4       	ldi	r27, 0x40	; 64
    3750:	8b 87       	std	Y+11, r24	; 0x0b
    3752:	9c 87       	std	Y+12, r25	; 0x0c
    3754:	ad 87       	std	Y+13, r26	; 0x0d
    3756:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3758:	6b 85       	ldd	r22, Y+11	; 0x0b
    375a:	7c 85       	ldd	r23, Y+12	; 0x0c
    375c:	8d 85       	ldd	r24, Y+13	; 0x0d
    375e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3760:	20 e0       	ldi	r18, 0x00	; 0
    3762:	30 e0       	ldi	r19, 0x00	; 0
    3764:	4a ef       	ldi	r20, 0xFA	; 250
    3766:	54 e4       	ldi	r21, 0x44	; 68
    3768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    376c:	dc 01       	movw	r26, r24
    376e:	cb 01       	movw	r24, r22
    3770:	8f 83       	std	Y+7, r24	; 0x07
    3772:	98 87       	std	Y+8, r25	; 0x08
    3774:	a9 87       	std	Y+9, r26	; 0x09
    3776:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3778:	6f 81       	ldd	r22, Y+7	; 0x07
    377a:	78 85       	ldd	r23, Y+8	; 0x08
    377c:	89 85       	ldd	r24, Y+9	; 0x09
    377e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3780:	20 e0       	ldi	r18, 0x00	; 0
    3782:	30 e0       	ldi	r19, 0x00	; 0
    3784:	40 e8       	ldi	r20, 0x80	; 128
    3786:	5f e3       	ldi	r21, 0x3F	; 63
    3788:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    378c:	88 23       	and	r24, r24
    378e:	2c f4       	brge	.+10     	; 0x379a <STEP_MOTORu8StartFullMode+0x570>
		__ticks = 1;
    3790:	81 e0       	ldi	r24, 0x01	; 1
    3792:	90 e0       	ldi	r25, 0x00	; 0
    3794:	9e 83       	std	Y+6, r25	; 0x06
    3796:	8d 83       	std	Y+5, r24	; 0x05
    3798:	3f c0       	rjmp	.+126    	; 0x3818 <STEP_MOTORu8StartFullMode+0x5ee>
	else if (__tmp > 65535)
    379a:	6f 81       	ldd	r22, Y+7	; 0x07
    379c:	78 85       	ldd	r23, Y+8	; 0x08
    379e:	89 85       	ldd	r24, Y+9	; 0x09
    37a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    37a2:	20 e0       	ldi	r18, 0x00	; 0
    37a4:	3f ef       	ldi	r19, 0xFF	; 255
    37a6:	4f e7       	ldi	r20, 0x7F	; 127
    37a8:	57 e4       	ldi	r21, 0x47	; 71
    37aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37ae:	18 16       	cp	r1, r24
    37b0:	4c f5       	brge	.+82     	; 0x3804 <STEP_MOTORu8StartFullMode+0x5da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    37b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    37b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    37b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    37ba:	20 e0       	ldi	r18, 0x00	; 0
    37bc:	30 e0       	ldi	r19, 0x00	; 0
    37be:	40 e2       	ldi	r20, 0x20	; 32
    37c0:	51 e4       	ldi	r21, 0x41	; 65
    37c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37c6:	dc 01       	movw	r26, r24
    37c8:	cb 01       	movw	r24, r22
    37ca:	bc 01       	movw	r22, r24
    37cc:	cd 01       	movw	r24, r26
    37ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37d2:	dc 01       	movw	r26, r24
    37d4:	cb 01       	movw	r24, r22
    37d6:	9e 83       	std	Y+6, r25	; 0x06
    37d8:	8d 83       	std	Y+5, r24	; 0x05
    37da:	0f c0       	rjmp	.+30     	; 0x37fa <STEP_MOTORu8StartFullMode+0x5d0>
    37dc:	88 ec       	ldi	r24, 0xC8	; 200
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	9c 83       	std	Y+4, r25	; 0x04
    37e2:	8b 83       	std	Y+3, r24	; 0x03
    37e4:	8b 81       	ldd	r24, Y+3	; 0x03
    37e6:	9c 81       	ldd	r25, Y+4	; 0x04
    37e8:	01 97       	sbiw	r24, 0x01	; 1
    37ea:	f1 f7       	brne	.-4      	; 0x37e8 <STEP_MOTORu8StartFullMode+0x5be>
    37ec:	9c 83       	std	Y+4, r25	; 0x04
    37ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37f0:	8d 81       	ldd	r24, Y+5	; 0x05
    37f2:	9e 81       	ldd	r25, Y+6	; 0x06
    37f4:	01 97       	sbiw	r24, 0x01	; 1
    37f6:	9e 83       	std	Y+6, r25	; 0x06
    37f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37fa:	8d 81       	ldd	r24, Y+5	; 0x05
    37fc:	9e 81       	ldd	r25, Y+6	; 0x06
    37fe:	00 97       	sbiw	r24, 0x00	; 0
    3800:	69 f7       	brne	.-38     	; 0x37dc <STEP_MOTORu8StartFullMode+0x5b2>
    3802:	14 c0       	rjmp	.+40     	; 0x382c <STEP_MOTORu8StartFullMode+0x602>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3804:	6f 81       	ldd	r22, Y+7	; 0x07
    3806:	78 85       	ldd	r23, Y+8	; 0x08
    3808:	89 85       	ldd	r24, Y+9	; 0x09
    380a:	9a 85       	ldd	r25, Y+10	; 0x0a
    380c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3810:	dc 01       	movw	r26, r24
    3812:	cb 01       	movw	r24, r22
    3814:	9e 83       	std	Y+6, r25	; 0x06
    3816:	8d 83       	std	Y+5, r24	; 0x05
    3818:	8d 81       	ldd	r24, Y+5	; 0x05
    381a:	9e 81       	ldd	r25, Y+6	; 0x06
    381c:	9a 83       	std	Y+2, r25	; 0x02
    381e:	89 83       	std	Y+1, r24	; 0x01
    3820:	89 81       	ldd	r24, Y+1	; 0x01
    3822:	9a 81       	ldd	r25, Y+2	; 0x02
    3824:	01 97       	sbiw	r24, 0x01	; 1
    3826:	f1 f7       	brne	.-4      	; 0x3824 <STEP_MOTORu8StartFullMode+0x5fa>
    3828:	9a 83       	std	Y+2, r25	; 0x02
    382a:	89 83       	std	Y+1, r24	; 0x01
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    382c:	89 ad       	ldd	r24, Y+57	; 0x39
    382e:	8f 5f       	subi	r24, 0xFF	; 255
    3830:	89 af       	std	Y+57, r24	; 0x39
    3832:	89 ad       	ldd	r24, Y+57	; 0x39
    3834:	84 30       	cpi	r24, 0x04	; 4
    3836:	08 f4       	brcc	.+2      	; 0x383a <STEP_MOTORu8StartFullMode+0x610>
    3838:	71 cf       	rjmp	.-286    	; 0x371c <STEP_MOTORu8StartFullMode+0x4f2>
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    383a:	8a ad       	ldd	r24, Y+58	; 0x3a
    383c:	9b ad       	ldd	r25, Y+59	; 0x3b
    383e:	01 96       	adiw	r24, 0x01	; 1
    3840:	9b af       	std	Y+59, r25	; 0x3b
    3842:	8a af       	std	Y+58, r24	; 0x3a
    3844:	2a ad       	ldd	r18, Y+58	; 0x3a
    3846:	3b ad       	ldd	r19, Y+59	; 0x3b
    3848:	8c ad       	ldd	r24, Y+60	; 0x3c
    384a:	9d ad       	ldd	r25, Y+61	; 0x3d
    384c:	28 17       	cp	r18, r24
    384e:	39 07       	cpc	r19, r25
    3850:	08 f4       	brcc	.+2      	; 0x3854 <STEP_MOTORu8StartFullMode+0x62a>
    3852:	62 cf       	rjmp	.-316    	; 0x3718 <STEP_MOTORu8StartFullMode+0x4ee>
    3854:	0b c0       	rjmp	.+22     	; 0x386c <STEP_MOTORu8StartFullMode+0x642>
					_delay_ms(2);
				}
			}
		}
		else
			Local_u8ErrorState = NOTOK;
    3856:	81 e0       	ldi	r24, 0x01	; 1
    3858:	fe 01       	movw	r30, r28
    385a:	e0 5c       	subi	r30, 0xC0	; 192
    385c:	ff 4f       	sbci	r31, 0xFF	; 255
    385e:	80 83       	st	Z, r24
    3860:	05 c0       	rjmp	.+10     	; 0x386c <STEP_MOTORu8StartFullMode+0x642>
	}
	else
		Local_u8ErrorState = NOTOK;
    3862:	81 e0       	ldi	r24, 0x01	; 1
    3864:	fe 01       	movw	r30, r28
    3866:	e0 5c       	subi	r30, 0xC0	; 192
    3868:	ff 4f       	sbci	r31, 0xFF	; 255
    386a:	80 83       	st	Z, r24
	return Local_u8ErrorState;
    386c:	fe 01       	movw	r30, r28
    386e:	e0 5c       	subi	r30, 0xC0	; 192
    3870:	ff 4f       	sbci	r31, 0xFF	; 255
    3872:	80 81       	ld	r24, Z
}
    3874:	ce 5b       	subi	r28, 0xBE	; 190
    3876:	df 4f       	sbci	r29, 0xFF	; 255
    3878:	0f b6       	in	r0, 0x3f	; 63
    387a:	f8 94       	cli
    387c:	de bf       	out	0x3e, r29	; 62
    387e:	0f be       	out	0x3f, r0	; 63
    3880:	cd bf       	out	0x3d, r28	; 61
    3882:	cf 91       	pop	r28
    3884:	df 91       	pop	r29
    3886:	08 95       	ret

00003888 <STEP_MOTORu8StartHalfMode>:

u8 STEP_MOTORu8StartHalfMode(STEP_t *Copy_pStep)
{
    3888:	df 93       	push	r29
    388a:	cf 93       	push	r28
    388c:	cd b7       	in	r28, 0x3d	; 61
    388e:	de b7       	in	r29, 0x3e	; 62
    3890:	c4 54       	subi	r28, 0x44	; 68
    3892:	d0 40       	sbci	r29, 0x00	; 0
    3894:	0f b6       	in	r0, 0x3f	; 63
    3896:	f8 94       	cli
    3898:	de bf       	out	0x3e, r29	; 62
    389a:	0f be       	out	0x3f, r0	; 63
    389c:	cd bf       	out	0x3d, r28	; 61
    389e:	fe 01       	movw	r30, r28
    38a0:	ed 5b       	subi	r30, 0xBD	; 189
    38a2:	ff 4f       	sbci	r31, 0xFF	; 255
    38a4:	91 83       	std	Z+1, r25	; 0x01
    38a6:	80 83       	st	Z, r24
	u8 Local_u8ErrorState = OK;
    38a8:	fe 01       	movw	r30, r28
    38aa:	ee 5b       	subi	r30, 0xBE	; 190
    38ac:	ff 4f       	sbci	r31, 0xFF	; 255
    38ae:	10 82       	st	Z, r1
	u16 Local_u16Counter=0;
    38b0:	fe 01       	movw	r30, r28
    38b2:	e0 5c       	subi	r30, 0xC0	; 192
    38b4:	ff 4f       	sbci	r31, 0xFF	; 255
    38b6:	11 82       	std	Z+1, r1	; 0x01
    38b8:	10 82       	st	Z, r1
	u16 Local_u16NumOfSteps = (u16)((((f32)Copy_pStep->AngleDegree)/5.625)*64.0);
    38ba:	fe 01       	movw	r30, r28
    38bc:	ed 5b       	subi	r30, 0xBD	; 189
    38be:	ff 4f       	sbci	r31, 0xFF	; 255
    38c0:	01 90       	ld	r0, Z+
    38c2:	f0 81       	ld	r31, Z
    38c4:	e0 2d       	mov	r30, r0
    38c6:	83 81       	ldd	r24, Z+3	; 0x03
    38c8:	94 81       	ldd	r25, Z+4	; 0x04
    38ca:	cc 01       	movw	r24, r24
    38cc:	a0 e0       	ldi	r26, 0x00	; 0
    38ce:	b0 e0       	ldi	r27, 0x00	; 0
    38d0:	bc 01       	movw	r22, r24
    38d2:	cd 01       	movw	r24, r26
    38d4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    38d8:	dc 01       	movw	r26, r24
    38da:	cb 01       	movw	r24, r22
    38dc:	bc 01       	movw	r22, r24
    38de:	cd 01       	movw	r24, r26
    38e0:	20 e0       	ldi	r18, 0x00	; 0
    38e2:	30 e0       	ldi	r19, 0x00	; 0
    38e4:	44 eb       	ldi	r20, 0xB4	; 180
    38e6:	50 e4       	ldi	r21, 0x40	; 64
    38e8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    38ec:	dc 01       	movw	r26, r24
    38ee:	cb 01       	movw	r24, r22
    38f0:	bc 01       	movw	r22, r24
    38f2:	cd 01       	movw	r24, r26
    38f4:	20 e0       	ldi	r18, 0x00	; 0
    38f6:	30 e0       	ldi	r19, 0x00	; 0
    38f8:	40 e8       	ldi	r20, 0x80	; 128
    38fa:	52 e4       	ldi	r21, 0x42	; 66
    38fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3900:	dc 01       	movw	r26, r24
    3902:	cb 01       	movw	r24, r22
    3904:	bc 01       	movw	r22, r24
    3906:	cd 01       	movw	r24, r26
    3908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    390c:	dc 01       	movw	r26, r24
    390e:	cb 01       	movw	r24, r22
    3910:	9f af       	std	Y+63, r25	; 0x3f
    3912:	8e af       	std	Y+62, r24	; 0x3e
	u16 Local_u16MaxItration = Local_u16NumOfSteps/8;
    3914:	8e ad       	ldd	r24, Y+62	; 0x3e
    3916:	9f ad       	ldd	r25, Y+63	; 0x3f
    3918:	96 95       	lsr	r25
    391a:	87 95       	ror	r24
    391c:	96 95       	lsr	r25
    391e:	87 95       	ror	r24
    3920:	96 95       	lsr	r25
    3922:	87 95       	ror	r24
    3924:	9d af       	std	Y+61, r25	; 0x3d
    3926:	8c af       	std	Y+60, r24	; 0x3c
	u8 Local_u8ItrateStep = 0,con1,con2 ;
    3928:	1b ae       	std	Y+59, r1	; 0x3b
	if(STEP_LOWER_NIBBLE == Copy_pStep->Nibble)
    392a:	fe 01       	movw	r30, r28
    392c:	ed 5b       	subi	r30, 0xBD	; 189
    392e:	ff 4f       	sbci	r31, 0xFF	; 255
    3930:	01 90       	ld	r0, Z+
    3932:	f0 81       	ld	r31, Z
    3934:	e0 2d       	mov	r30, r0
    3936:	81 81       	ldd	r24, Z+1	; 0x01
    3938:	88 23       	and	r24, r24
    393a:	09 f0       	breq	.+2      	; 0x393e <STEP_MOTORu8StartHalfMode+0xb6>
    393c:	96 c1       	rjmp	.+812    	; 0x3c6a <STEP_MOTORu8StartHalfMode+0x3e2>
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
    393e:	fe 01       	movw	r30, r28
    3940:	ed 5b       	subi	r30, 0xBD	; 189
    3942:	ff 4f       	sbci	r31, 0xFF	; 255
    3944:	01 90       	ld	r0, Z+
    3946:	f0 81       	ld	r31, Z
    3948:	e0 2d       	mov	r30, r0
    394a:	82 81       	ldd	r24, Z+2	; 0x02
    394c:	88 23       	and	r24, r24
    394e:	09 f0       	breq	.+2      	; 0x3952 <STEP_MOTORu8StartHalfMode+0xca>
    3950:	c1 c0       	rjmp	.+386    	; 0x3ad4 <STEP_MOTORu8StartHalfMode+0x24c>
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3952:	fe 01       	movw	r30, r28
    3954:	e0 5c       	subi	r30, 0xC0	; 192
    3956:	ff 4f       	sbci	r31, 0xFF	; 255
    3958:	11 82       	std	Z+1, r1	; 0x01
    395a:	10 82       	st	Z, r1
    395c:	af c0       	rjmp	.+350    	; 0x3abc <STEP_MOTORu8StartHalfMode+0x234>
			{
				con1 = 0x01;
    395e:	81 e0       	ldi	r24, 0x01	; 1
    3960:	8a af       	std	Y+58, r24	; 0x3a
				con2 = 0x03;
    3962:	83 e0       	ldi	r24, 0x03	; 3
    3964:	89 af       	std	Y+57, r24	; 0x39
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3966:	81 e0       	ldi	r24, 0x01	; 1
    3968:	8b af       	std	Y+59, r24	; 0x3b
    396a:	98 c0       	rjmp	.+304    	; 0x3a9c <STEP_MOTORu8StartHalfMode+0x214>
				{

					if(Local_u8ItrateStep%2==1)
    396c:	8b ad       	ldd	r24, Y+59	; 0x3b
    396e:	88 2f       	mov	r24, r24
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	81 70       	andi	r24, 0x01	; 1
    3974:	90 70       	andi	r25, 0x00	; 0
    3976:	88 23       	and	r24, r24
    3978:	71 f0       	breq	.+28     	; 0x3996 <STEP_MOTORu8StartHalfMode+0x10e>
					{
						DIO_u8SetLowNibbleValue(Copy_pStep->Port,con1);
    397a:	fe 01       	movw	r30, r28
    397c:	ed 5b       	subi	r30, 0xBD	; 189
    397e:	ff 4f       	sbci	r31, 0xFF	; 255
    3980:	01 90       	ld	r0, Z+
    3982:	f0 81       	ld	r31, Z
    3984:	e0 2d       	mov	r30, r0
    3986:	80 81       	ld	r24, Z
    3988:	6a ad       	ldd	r22, Y+58	; 0x3a
    398a:	0e 94 b7 12 	call	0x256e	; 0x256e <DIO_u8SetLowNibbleValue>
						con1<<=1;
    398e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3990:	88 0f       	add	r24, r24
    3992:	8a af       	std	Y+58, r24	; 0x3a
    3994:	0e c0       	rjmp	.+28     	; 0x39b2 <STEP_MOTORu8StartHalfMode+0x12a>
					}
					else
					{
						DIO_u8SetLowNibbleValue(Copy_pStep->Port,con2);
    3996:	fe 01       	movw	r30, r28
    3998:	ed 5b       	subi	r30, 0xBD	; 189
    399a:	ff 4f       	sbci	r31, 0xFF	; 255
    399c:	01 90       	ld	r0, Z+
    399e:	f0 81       	ld	r31, Z
    39a0:	e0 2d       	mov	r30, r0
    39a2:	80 81       	ld	r24, Z
    39a4:	69 ad       	ldd	r22, Y+57	; 0x39
    39a6:	0e 94 b7 12 	call	0x256e	; 0x256e <DIO_u8SetLowNibbleValue>
						con2 = RotateLeftLowNibble(con2);
    39aa:	89 ad       	ldd	r24, Y+57	; 0x39
    39ac:	0e 94 3a 20 	call	0x4074	; 0x4074 <RotateLeftLowNibble>
    39b0:	89 af       	std	Y+57, r24	; 0x39
    39b2:	80 e0       	ldi	r24, 0x00	; 0
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	a0 e0       	ldi	r26, 0x00	; 0
    39b8:	b0 e4       	ldi	r27, 0x40	; 64
    39ba:	8d ab       	std	Y+53, r24	; 0x35
    39bc:	9e ab       	std	Y+54, r25	; 0x36
    39be:	af ab       	std	Y+55, r26	; 0x37
    39c0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39c2:	6d a9       	ldd	r22, Y+53	; 0x35
    39c4:	7e a9       	ldd	r23, Y+54	; 0x36
    39c6:	8f a9       	ldd	r24, Y+55	; 0x37
    39c8:	98 ad       	ldd	r25, Y+56	; 0x38
    39ca:	20 e0       	ldi	r18, 0x00	; 0
    39cc:	30 e0       	ldi	r19, 0x00	; 0
    39ce:	4a ef       	ldi	r20, 0xFA	; 250
    39d0:	54 e4       	ldi	r21, 0x44	; 68
    39d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39d6:	dc 01       	movw	r26, r24
    39d8:	cb 01       	movw	r24, r22
    39da:	89 ab       	std	Y+49, r24	; 0x31
    39dc:	9a ab       	std	Y+50, r25	; 0x32
    39de:	ab ab       	std	Y+51, r26	; 0x33
    39e0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    39e2:	69 a9       	ldd	r22, Y+49	; 0x31
    39e4:	7a a9       	ldd	r23, Y+50	; 0x32
    39e6:	8b a9       	ldd	r24, Y+51	; 0x33
    39e8:	9c a9       	ldd	r25, Y+52	; 0x34
    39ea:	20 e0       	ldi	r18, 0x00	; 0
    39ec:	30 e0       	ldi	r19, 0x00	; 0
    39ee:	40 e8       	ldi	r20, 0x80	; 128
    39f0:	5f e3       	ldi	r21, 0x3F	; 63
    39f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39f6:	88 23       	and	r24, r24
    39f8:	2c f4       	brge	.+10     	; 0x3a04 <STEP_MOTORu8StartHalfMode+0x17c>
		__ticks = 1;
    39fa:	81 e0       	ldi	r24, 0x01	; 1
    39fc:	90 e0       	ldi	r25, 0x00	; 0
    39fe:	98 ab       	std	Y+48, r25	; 0x30
    3a00:	8f a7       	std	Y+47, r24	; 0x2f
    3a02:	3f c0       	rjmp	.+126    	; 0x3a82 <STEP_MOTORu8StartHalfMode+0x1fa>
	else if (__tmp > 65535)
    3a04:	69 a9       	ldd	r22, Y+49	; 0x31
    3a06:	7a a9       	ldd	r23, Y+50	; 0x32
    3a08:	8b a9       	ldd	r24, Y+51	; 0x33
    3a0a:	9c a9       	ldd	r25, Y+52	; 0x34
    3a0c:	20 e0       	ldi	r18, 0x00	; 0
    3a0e:	3f ef       	ldi	r19, 0xFF	; 255
    3a10:	4f e7       	ldi	r20, 0x7F	; 127
    3a12:	57 e4       	ldi	r21, 0x47	; 71
    3a14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a18:	18 16       	cp	r1, r24
    3a1a:	4c f5       	brge	.+82     	; 0x3a6e <STEP_MOTORu8StartHalfMode+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a1c:	6d a9       	ldd	r22, Y+53	; 0x35
    3a1e:	7e a9       	ldd	r23, Y+54	; 0x36
    3a20:	8f a9       	ldd	r24, Y+55	; 0x37
    3a22:	98 ad       	ldd	r25, Y+56	; 0x38
    3a24:	20 e0       	ldi	r18, 0x00	; 0
    3a26:	30 e0       	ldi	r19, 0x00	; 0
    3a28:	40 e2       	ldi	r20, 0x20	; 32
    3a2a:	51 e4       	ldi	r21, 0x41	; 65
    3a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a30:	dc 01       	movw	r26, r24
    3a32:	cb 01       	movw	r24, r22
    3a34:	bc 01       	movw	r22, r24
    3a36:	cd 01       	movw	r24, r26
    3a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a3c:	dc 01       	movw	r26, r24
    3a3e:	cb 01       	movw	r24, r22
    3a40:	98 ab       	std	Y+48, r25	; 0x30
    3a42:	8f a7       	std	Y+47, r24	; 0x2f
    3a44:	0f c0       	rjmp	.+30     	; 0x3a64 <STEP_MOTORu8StartHalfMode+0x1dc>
    3a46:	88 ec       	ldi	r24, 0xC8	; 200
    3a48:	90 e0       	ldi	r25, 0x00	; 0
    3a4a:	9e a7       	std	Y+46, r25	; 0x2e
    3a4c:	8d a7       	std	Y+45, r24	; 0x2d
    3a4e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3a50:	9e a5       	ldd	r25, Y+46	; 0x2e
    3a52:	01 97       	sbiw	r24, 0x01	; 1
    3a54:	f1 f7       	brne	.-4      	; 0x3a52 <STEP_MOTORu8StartHalfMode+0x1ca>
    3a56:	9e a7       	std	Y+46, r25	; 0x2e
    3a58:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a5c:	98 a9       	ldd	r25, Y+48	; 0x30
    3a5e:	01 97       	sbiw	r24, 0x01	; 1
    3a60:	98 ab       	std	Y+48, r25	; 0x30
    3a62:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a64:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a66:	98 a9       	ldd	r25, Y+48	; 0x30
    3a68:	00 97       	sbiw	r24, 0x00	; 0
    3a6a:	69 f7       	brne	.-38     	; 0x3a46 <STEP_MOTORu8StartHalfMode+0x1be>
    3a6c:	14 c0       	rjmp	.+40     	; 0x3a96 <STEP_MOTORu8StartHalfMode+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a6e:	69 a9       	ldd	r22, Y+49	; 0x31
    3a70:	7a a9       	ldd	r23, Y+50	; 0x32
    3a72:	8b a9       	ldd	r24, Y+51	; 0x33
    3a74:	9c a9       	ldd	r25, Y+52	; 0x34
    3a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a7a:	dc 01       	movw	r26, r24
    3a7c:	cb 01       	movw	r24, r22
    3a7e:	98 ab       	std	Y+48, r25	; 0x30
    3a80:	8f a7       	std	Y+47, r24	; 0x2f
    3a82:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a84:	98 a9       	ldd	r25, Y+48	; 0x30
    3a86:	9c a7       	std	Y+44, r25	; 0x2c
    3a88:	8b a7       	std	Y+43, r24	; 0x2b
    3a8a:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a8c:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a8e:	01 97       	sbiw	r24, 0x01	; 1
    3a90:	f1 f7       	brne	.-4      	; 0x3a8e <STEP_MOTORu8StartHalfMode+0x206>
    3a92:	9c a7       	std	Y+44, r25	; 0x2c
    3a94:	8b a7       	std	Y+43, r24	; 0x2b

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				con1 = 0x01;
				con2 = 0x03;
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3a96:	8b ad       	ldd	r24, Y+59	; 0x3b
    3a98:	8f 5f       	subi	r24, 0xFF	; 255
    3a9a:	8b af       	std	Y+59, r24	; 0x3b
    3a9c:	8b ad       	ldd	r24, Y+59	; 0x3b
    3a9e:	89 30       	cpi	r24, 0x09	; 9
    3aa0:	08 f4       	brcc	.+2      	; 0x3aa4 <STEP_MOTORu8StartHalfMode+0x21c>
    3aa2:	64 cf       	rjmp	.-312    	; 0x396c <STEP_MOTORu8StartHalfMode+0xe4>
	if(STEP_LOWER_NIBBLE == Copy_pStep->Nibble)
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3aa4:	de 01       	movw	r26, r28
    3aa6:	a0 5c       	subi	r26, 0xC0	; 192
    3aa8:	bf 4f       	sbci	r27, 0xFF	; 255
    3aaa:	fe 01       	movw	r30, r28
    3aac:	e0 5c       	subi	r30, 0xC0	; 192
    3aae:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab0:	80 81       	ld	r24, Z
    3ab2:	91 81       	ldd	r25, Z+1	; 0x01
    3ab4:	01 96       	adiw	r24, 0x01	; 1
    3ab6:	11 96       	adiw	r26, 0x01	; 1
    3ab8:	9c 93       	st	X, r25
    3aba:	8e 93       	st	-X, r24
    3abc:	fe 01       	movw	r30, r28
    3abe:	e0 5c       	subi	r30, 0xC0	; 192
    3ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac2:	20 81       	ld	r18, Z
    3ac4:	31 81       	ldd	r19, Z+1	; 0x01
    3ac6:	8c ad       	ldd	r24, Y+60	; 0x3c
    3ac8:	9d ad       	ldd	r25, Y+61	; 0x3d
    3aca:	28 17       	cp	r18, r24
    3acc:	39 07       	cpc	r19, r25
    3ace:	08 f4       	brcc	.+2      	; 0x3ad2 <STEP_MOTORu8StartHalfMode+0x24a>
    3ad0:	46 cf       	rjmp	.-372    	; 0x395e <STEP_MOTORu8StartHalfMode+0xd6>
    3ad2:	82 c2       	rjmp	.+1284   	; 0x3fd8 <STEP_MOTORu8StartHalfMode+0x750>
					}
					_delay_ms(2);
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
    3ad4:	fe 01       	movw	r30, r28
    3ad6:	ed 5b       	subi	r30, 0xBD	; 189
    3ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    3ada:	01 90       	ld	r0, Z+
    3adc:	f0 81       	ld	r31, Z
    3ade:	e0 2d       	mov	r30, r0
    3ae0:	82 81       	ldd	r24, Z+2	; 0x02
    3ae2:	81 30       	cpi	r24, 0x01	; 1
    3ae4:	09 f0       	breq	.+2      	; 0x3ae8 <STEP_MOTORu8StartHalfMode+0x260>
    3ae6:	78 c2       	rjmp	.+1264   	; 0x3fd8 <STEP_MOTORu8StartHalfMode+0x750>
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3ae8:	fe 01       	movw	r30, r28
    3aea:	e0 5c       	subi	r30, 0xC0	; 192
    3aec:	ff 4f       	sbci	r31, 0xFF	; 255
    3aee:	11 82       	std	Z+1, r1	; 0x01
    3af0:	10 82       	st	Z, r1
    3af2:	af c0       	rjmp	.+350    	; 0x3c52 <STEP_MOTORu8StartHalfMode+0x3ca>
			{
				con1 = 0x08;
    3af4:	88 e0       	ldi	r24, 0x08	; 8
    3af6:	8a af       	std	Y+58, r24	; 0x3a
				con2 = 0x0c;
    3af8:	8c e0       	ldi	r24, 0x0C	; 12
    3afa:	89 af       	std	Y+57, r24	; 0x39
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3afc:	81 e0       	ldi	r24, 0x01	; 1
    3afe:	8b af       	std	Y+59, r24	; 0x3b
    3b00:	98 c0       	rjmp	.+304    	; 0x3c32 <STEP_MOTORu8StartHalfMode+0x3aa>
				{

					if(Local_u8ItrateStep%2==1)
    3b02:	8b ad       	ldd	r24, Y+59	; 0x3b
    3b04:	88 2f       	mov	r24, r24
    3b06:	90 e0       	ldi	r25, 0x00	; 0
    3b08:	81 70       	andi	r24, 0x01	; 1
    3b0a:	90 70       	andi	r25, 0x00	; 0
    3b0c:	88 23       	and	r24, r24
    3b0e:	71 f0       	breq	.+28     	; 0x3b2c <STEP_MOTORu8StartHalfMode+0x2a4>
					{
						DIO_u8SetLowNibbleValue(Copy_pStep->Port,con1);
    3b10:	fe 01       	movw	r30, r28
    3b12:	ed 5b       	subi	r30, 0xBD	; 189
    3b14:	ff 4f       	sbci	r31, 0xFF	; 255
    3b16:	01 90       	ld	r0, Z+
    3b18:	f0 81       	ld	r31, Z
    3b1a:	e0 2d       	mov	r30, r0
    3b1c:	80 81       	ld	r24, Z
    3b1e:	6a ad       	ldd	r22, Y+58	; 0x3a
    3b20:	0e 94 b7 12 	call	0x256e	; 0x256e <DIO_u8SetLowNibbleValue>
						con1>>=1;
    3b24:	8a ad       	ldd	r24, Y+58	; 0x3a
    3b26:	86 95       	lsr	r24
    3b28:	8a af       	std	Y+58, r24	; 0x3a
    3b2a:	0e c0       	rjmp	.+28     	; 0x3b48 <STEP_MOTORu8StartHalfMode+0x2c0>
					}
					else
					{
						DIO_u8SetLowNibbleValue(Copy_pStep->Port,con2);
    3b2c:	fe 01       	movw	r30, r28
    3b2e:	ed 5b       	subi	r30, 0xBD	; 189
    3b30:	ff 4f       	sbci	r31, 0xFF	; 255
    3b32:	01 90       	ld	r0, Z+
    3b34:	f0 81       	ld	r31, Z
    3b36:	e0 2d       	mov	r30, r0
    3b38:	80 81       	ld	r24, Z
    3b3a:	69 ad       	ldd	r22, Y+57	; 0x39
    3b3c:	0e 94 b7 12 	call	0x256e	; 0x256e <DIO_u8SetLowNibbleValue>
						con2 = RotateRightLowNibble(con2);
    3b40:	89 ad       	ldd	r24, Y+57	; 0x39
    3b42:	0e 94 1d 20 	call	0x403a	; 0x403a <RotateRightLowNibble>
    3b46:	89 af       	std	Y+57, r24	; 0x39
    3b48:	80 e0       	ldi	r24, 0x00	; 0
    3b4a:	90 e0       	ldi	r25, 0x00	; 0
    3b4c:	a0 e0       	ldi	r26, 0x00	; 0
    3b4e:	b0 e4       	ldi	r27, 0x40	; 64
    3b50:	8f a3       	std	Y+39, r24	; 0x27
    3b52:	98 a7       	std	Y+40, r25	; 0x28
    3b54:	a9 a7       	std	Y+41, r26	; 0x29
    3b56:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b58:	6f a1       	ldd	r22, Y+39	; 0x27
    3b5a:	78 a5       	ldd	r23, Y+40	; 0x28
    3b5c:	89 a5       	ldd	r24, Y+41	; 0x29
    3b5e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b60:	20 e0       	ldi	r18, 0x00	; 0
    3b62:	30 e0       	ldi	r19, 0x00	; 0
    3b64:	4a ef       	ldi	r20, 0xFA	; 250
    3b66:	54 e4       	ldi	r21, 0x44	; 68
    3b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b6c:	dc 01       	movw	r26, r24
    3b6e:	cb 01       	movw	r24, r22
    3b70:	8b a3       	std	Y+35, r24	; 0x23
    3b72:	9c a3       	std	Y+36, r25	; 0x24
    3b74:	ad a3       	std	Y+37, r26	; 0x25
    3b76:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3b78:	6b a1       	ldd	r22, Y+35	; 0x23
    3b7a:	7c a1       	ldd	r23, Y+36	; 0x24
    3b7c:	8d a1       	ldd	r24, Y+37	; 0x25
    3b7e:	9e a1       	ldd	r25, Y+38	; 0x26
    3b80:	20 e0       	ldi	r18, 0x00	; 0
    3b82:	30 e0       	ldi	r19, 0x00	; 0
    3b84:	40 e8       	ldi	r20, 0x80	; 128
    3b86:	5f e3       	ldi	r21, 0x3F	; 63
    3b88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b8c:	88 23       	and	r24, r24
    3b8e:	2c f4       	brge	.+10     	; 0x3b9a <STEP_MOTORu8StartHalfMode+0x312>
		__ticks = 1;
    3b90:	81 e0       	ldi	r24, 0x01	; 1
    3b92:	90 e0       	ldi	r25, 0x00	; 0
    3b94:	9a a3       	std	Y+34, r25	; 0x22
    3b96:	89 a3       	std	Y+33, r24	; 0x21
    3b98:	3f c0       	rjmp	.+126    	; 0x3c18 <STEP_MOTORu8StartHalfMode+0x390>
	else if (__tmp > 65535)
    3b9a:	6b a1       	ldd	r22, Y+35	; 0x23
    3b9c:	7c a1       	ldd	r23, Y+36	; 0x24
    3b9e:	8d a1       	ldd	r24, Y+37	; 0x25
    3ba0:	9e a1       	ldd	r25, Y+38	; 0x26
    3ba2:	20 e0       	ldi	r18, 0x00	; 0
    3ba4:	3f ef       	ldi	r19, 0xFF	; 255
    3ba6:	4f e7       	ldi	r20, 0x7F	; 127
    3ba8:	57 e4       	ldi	r21, 0x47	; 71
    3baa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bae:	18 16       	cp	r1, r24
    3bb0:	4c f5       	brge	.+82     	; 0x3c04 <STEP_MOTORu8StartHalfMode+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bb2:	6f a1       	ldd	r22, Y+39	; 0x27
    3bb4:	78 a5       	ldd	r23, Y+40	; 0x28
    3bb6:	89 a5       	ldd	r24, Y+41	; 0x29
    3bb8:	9a a5       	ldd	r25, Y+42	; 0x2a
    3bba:	20 e0       	ldi	r18, 0x00	; 0
    3bbc:	30 e0       	ldi	r19, 0x00	; 0
    3bbe:	40 e2       	ldi	r20, 0x20	; 32
    3bc0:	51 e4       	ldi	r21, 0x41	; 65
    3bc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bc6:	dc 01       	movw	r26, r24
    3bc8:	cb 01       	movw	r24, r22
    3bca:	bc 01       	movw	r22, r24
    3bcc:	cd 01       	movw	r24, r26
    3bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bd2:	dc 01       	movw	r26, r24
    3bd4:	cb 01       	movw	r24, r22
    3bd6:	9a a3       	std	Y+34, r25	; 0x22
    3bd8:	89 a3       	std	Y+33, r24	; 0x21
    3bda:	0f c0       	rjmp	.+30     	; 0x3bfa <STEP_MOTORu8StartHalfMode+0x372>
    3bdc:	88 ec       	ldi	r24, 0xC8	; 200
    3bde:	90 e0       	ldi	r25, 0x00	; 0
    3be0:	98 a3       	std	Y+32, r25	; 0x20
    3be2:	8f 8f       	std	Y+31, r24	; 0x1f
    3be4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3be6:	98 a1       	ldd	r25, Y+32	; 0x20
    3be8:	01 97       	sbiw	r24, 0x01	; 1
    3bea:	f1 f7       	brne	.-4      	; 0x3be8 <STEP_MOTORu8StartHalfMode+0x360>
    3bec:	98 a3       	std	Y+32, r25	; 0x20
    3bee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bf0:	89 a1       	ldd	r24, Y+33	; 0x21
    3bf2:	9a a1       	ldd	r25, Y+34	; 0x22
    3bf4:	01 97       	sbiw	r24, 0x01	; 1
    3bf6:	9a a3       	std	Y+34, r25	; 0x22
    3bf8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bfa:	89 a1       	ldd	r24, Y+33	; 0x21
    3bfc:	9a a1       	ldd	r25, Y+34	; 0x22
    3bfe:	00 97       	sbiw	r24, 0x00	; 0
    3c00:	69 f7       	brne	.-38     	; 0x3bdc <STEP_MOTORu8StartHalfMode+0x354>
    3c02:	14 c0       	rjmp	.+40     	; 0x3c2c <STEP_MOTORu8StartHalfMode+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c04:	6b a1       	ldd	r22, Y+35	; 0x23
    3c06:	7c a1       	ldd	r23, Y+36	; 0x24
    3c08:	8d a1       	ldd	r24, Y+37	; 0x25
    3c0a:	9e a1       	ldd	r25, Y+38	; 0x26
    3c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c10:	dc 01       	movw	r26, r24
    3c12:	cb 01       	movw	r24, r22
    3c14:	9a a3       	std	Y+34, r25	; 0x22
    3c16:	89 a3       	std	Y+33, r24	; 0x21
    3c18:	89 a1       	ldd	r24, Y+33	; 0x21
    3c1a:	9a a1       	ldd	r25, Y+34	; 0x22
    3c1c:	9e 8f       	std	Y+30, r25	; 0x1e
    3c1e:	8d 8f       	std	Y+29, r24	; 0x1d
    3c20:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c22:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c24:	01 97       	sbiw	r24, 0x01	; 1
    3c26:	f1 f7       	brne	.-4      	; 0x3c24 <STEP_MOTORu8StartHalfMode+0x39c>
    3c28:	9e 8f       	std	Y+30, r25	; 0x1e
    3c2a:	8d 8f       	std	Y+29, r24	; 0x1d

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				con1 = 0x08;
				con2 = 0x0c;
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3c2c:	8b ad       	ldd	r24, Y+59	; 0x3b
    3c2e:	8f 5f       	subi	r24, 0xFF	; 255
    3c30:	8b af       	std	Y+59, r24	; 0x3b
    3c32:	8b ad       	ldd	r24, Y+59	; 0x3b
    3c34:	89 30       	cpi	r24, 0x09	; 9
    3c36:	08 f4       	brcc	.+2      	; 0x3c3a <STEP_MOTORu8StartHalfMode+0x3b2>
    3c38:	64 cf       	rjmp	.-312    	; 0x3b02 <STEP_MOTORu8StartHalfMode+0x27a>
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3c3a:	de 01       	movw	r26, r28
    3c3c:	a0 5c       	subi	r26, 0xC0	; 192
    3c3e:	bf 4f       	sbci	r27, 0xFF	; 255
    3c40:	fe 01       	movw	r30, r28
    3c42:	e0 5c       	subi	r30, 0xC0	; 192
    3c44:	ff 4f       	sbci	r31, 0xFF	; 255
    3c46:	80 81       	ld	r24, Z
    3c48:	91 81       	ldd	r25, Z+1	; 0x01
    3c4a:	01 96       	adiw	r24, 0x01	; 1
    3c4c:	11 96       	adiw	r26, 0x01	; 1
    3c4e:	9c 93       	st	X, r25
    3c50:	8e 93       	st	-X, r24
    3c52:	fe 01       	movw	r30, r28
    3c54:	e0 5c       	subi	r30, 0xC0	; 192
    3c56:	ff 4f       	sbci	r31, 0xFF	; 255
    3c58:	20 81       	ld	r18, Z
    3c5a:	31 81       	ldd	r19, Z+1	; 0x01
    3c5c:	8c ad       	ldd	r24, Y+60	; 0x3c
    3c5e:	9d ad       	ldd	r25, Y+61	; 0x3d
    3c60:	28 17       	cp	r18, r24
    3c62:	39 07       	cpc	r19, r25
    3c64:	08 f4       	brcc	.+2      	; 0x3c68 <STEP_MOTORu8StartHalfMode+0x3e0>
    3c66:	46 cf       	rjmp	.-372    	; 0x3af4 <STEP_MOTORu8StartHalfMode+0x26c>
    3c68:	b7 c1       	rjmp	.+878    	; 0x3fd8 <STEP_MOTORu8StartHalfMode+0x750>
				}
			}
		}

	}
	else if(STEP_UPPER_NIBBLE == Copy_pStep->Nibble)
    3c6a:	fe 01       	movw	r30, r28
    3c6c:	ed 5b       	subi	r30, 0xBD	; 189
    3c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c70:	01 90       	ld	r0, Z+
    3c72:	f0 81       	ld	r31, Z
    3c74:	e0 2d       	mov	r30, r0
    3c76:	81 81       	ldd	r24, Z+1	; 0x01
    3c78:	81 30       	cpi	r24, 0x01	; 1
    3c7a:	09 f0       	breq	.+2      	; 0x3c7e <STEP_MOTORu8StartHalfMode+0x3f6>
    3c7c:	a8 c1       	rjmp	.+848    	; 0x3fce <STEP_MOTORu8StartHalfMode+0x746>
	{

		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
    3c7e:	fe 01       	movw	r30, r28
    3c80:	ed 5b       	subi	r30, 0xBD	; 189
    3c82:	ff 4f       	sbci	r31, 0xFF	; 255
    3c84:	01 90       	ld	r0, Z+
    3c86:	f0 81       	ld	r31, Z
    3c88:	e0 2d       	mov	r30, r0
    3c8a:	82 81       	ldd	r24, Z+2	; 0x02
    3c8c:	88 23       	and	r24, r24
    3c8e:	09 f0       	breq	.+2      	; 0x3c92 <STEP_MOTORu8StartHalfMode+0x40a>
    3c90:	cd c0       	rjmp	.+410    	; 0x3e2c <STEP_MOTORu8StartHalfMode+0x5a4>
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3c92:	fe 01       	movw	r30, r28
    3c94:	e0 5c       	subi	r30, 0xC0	; 192
    3c96:	ff 4f       	sbci	r31, 0xFF	; 255
    3c98:	11 82       	std	Z+1, r1	; 0x01
    3c9a:	10 82       	st	Z, r1
    3c9c:	bb c0       	rjmp	.+374    	; 0x3e14 <STEP_MOTORu8StartHalfMode+0x58c>
			{
				con1 = 0x01;
    3c9e:	81 e0       	ldi	r24, 0x01	; 1
    3ca0:	8a af       	std	Y+58, r24	; 0x3a
				con2 = 0x03;
    3ca2:	83 e0       	ldi	r24, 0x03	; 3
    3ca4:	89 af       	std	Y+57, r24	; 0x39
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3ca6:	81 e0       	ldi	r24, 0x01	; 1
    3ca8:	8b af       	std	Y+59, r24	; 0x3b
    3caa:	a4 c0       	rjmp	.+328    	; 0x3df4 <STEP_MOTORu8StartHalfMode+0x56c>
				{

					if(Local_u8ItrateStep%2==1)
    3cac:	8b ad       	ldd	r24, Y+59	; 0x3b
    3cae:	88 2f       	mov	r24, r24
    3cb0:	90 e0       	ldi	r25, 0x00	; 0
    3cb2:	81 70       	andi	r24, 0x01	; 1
    3cb4:	90 70       	andi	r25, 0x00	; 0
    3cb6:	88 23       	and	r24, r24
    3cb8:	71 f0       	breq	.+28     	; 0x3cd6 <STEP_MOTORu8StartHalfMode+0x44e>
					{
						DIO_u8SetHighNibbleValue(Copy_pStep->Port,con1);
    3cba:	fe 01       	movw	r30, r28
    3cbc:	ed 5b       	subi	r30, 0xBD	; 189
    3cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc0:	01 90       	ld	r0, Z+
    3cc2:	f0 81       	ld	r31, Z
    3cc4:	e0 2d       	mov	r30, r0
    3cc6:	80 81       	ld	r24, Z
    3cc8:	6a ad       	ldd	r22, Y+58	; 0x3a
    3cca:	0e 94 32 13 	call	0x2664	; 0x2664 <DIO_u8SetHighNibbleValue>
						con1<<=1;
    3cce:	8a ad       	ldd	r24, Y+58	; 0x3a
    3cd0:	88 0f       	add	r24, r24
    3cd2:	8a af       	std	Y+58, r24	; 0x3a
    3cd4:	1a c0       	rjmp	.+52     	; 0x3d0a <STEP_MOTORu8StartHalfMode+0x482>
					}
					else
					{
						DIO_u8SetHighNibbleValue(Copy_pStep->Port,con2);
    3cd6:	fe 01       	movw	r30, r28
    3cd8:	ed 5b       	subi	r30, 0xBD	; 189
    3cda:	ff 4f       	sbci	r31, 0xFF	; 255
    3cdc:	01 90       	ld	r0, Z+
    3cde:	f0 81       	ld	r31, Z
    3ce0:	e0 2d       	mov	r30, r0
    3ce2:	80 81       	ld	r24, Z
    3ce4:	69 ad       	ldd	r22, Y+57	; 0x39
    3ce6:	0e 94 32 13 	call	0x2664	; 0x2664 <DIO_u8SetHighNibbleValue>
						CLCD_voidWriteNumber(con2);
    3cea:	89 ad       	ldd	r24, Y+57	; 0x39
    3cec:	88 2f       	mov	r24, r24
    3cee:	90 e0       	ldi	r25, 0x00	; 0
    3cf0:	a0 e0       	ldi	r26, 0x00	; 0
    3cf2:	b0 e0       	ldi	r27, 0x00	; 0
    3cf4:	bc 01       	movw	r22, r24
    3cf6:	cd 01       	movw	r24, r26
    3cf8:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <CLCD_voidWriteNumber>
						CLCD_voidSendData(' ');
    3cfc:	80 e2       	ldi	r24, 0x20	; 32
    3cfe:	0e 94 3a 0b 	call	0x1674	; 0x1674 <CLCD_voidSendData>
						con2 = RotateLeftLowNibble(con2);
    3d02:	89 ad       	ldd	r24, Y+57	; 0x39
    3d04:	0e 94 3a 20 	call	0x4074	; 0x4074 <RotateLeftLowNibble>
    3d08:	89 af       	std	Y+57, r24	; 0x39
    3d0a:	80 e0       	ldi	r24, 0x00	; 0
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	a0 e0       	ldi	r26, 0x00	; 0
    3d10:	b0 e4       	ldi	r27, 0x40	; 64
    3d12:	89 8f       	std	Y+25, r24	; 0x19
    3d14:	9a 8f       	std	Y+26, r25	; 0x1a
    3d16:	ab 8f       	std	Y+27, r26	; 0x1b
    3d18:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d1a:	69 8d       	ldd	r22, Y+25	; 0x19
    3d1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d20:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d22:	20 e0       	ldi	r18, 0x00	; 0
    3d24:	30 e0       	ldi	r19, 0x00	; 0
    3d26:	4a ef       	ldi	r20, 0xFA	; 250
    3d28:	54 e4       	ldi	r21, 0x44	; 68
    3d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d2e:	dc 01       	movw	r26, r24
    3d30:	cb 01       	movw	r24, r22
    3d32:	8d 8b       	std	Y+21, r24	; 0x15
    3d34:	9e 8b       	std	Y+22, r25	; 0x16
    3d36:	af 8b       	std	Y+23, r26	; 0x17
    3d38:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d3a:	6d 89       	ldd	r22, Y+21	; 0x15
    3d3c:	7e 89       	ldd	r23, Y+22	; 0x16
    3d3e:	8f 89       	ldd	r24, Y+23	; 0x17
    3d40:	98 8d       	ldd	r25, Y+24	; 0x18
    3d42:	20 e0       	ldi	r18, 0x00	; 0
    3d44:	30 e0       	ldi	r19, 0x00	; 0
    3d46:	40 e8       	ldi	r20, 0x80	; 128
    3d48:	5f e3       	ldi	r21, 0x3F	; 63
    3d4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d4e:	88 23       	and	r24, r24
    3d50:	2c f4       	brge	.+10     	; 0x3d5c <STEP_MOTORu8StartHalfMode+0x4d4>
		__ticks = 1;
    3d52:	81 e0       	ldi	r24, 0x01	; 1
    3d54:	90 e0       	ldi	r25, 0x00	; 0
    3d56:	9c 8b       	std	Y+20, r25	; 0x14
    3d58:	8b 8b       	std	Y+19, r24	; 0x13
    3d5a:	3f c0       	rjmp	.+126    	; 0x3dda <STEP_MOTORu8StartHalfMode+0x552>
	else if (__tmp > 65535)
    3d5c:	6d 89       	ldd	r22, Y+21	; 0x15
    3d5e:	7e 89       	ldd	r23, Y+22	; 0x16
    3d60:	8f 89       	ldd	r24, Y+23	; 0x17
    3d62:	98 8d       	ldd	r25, Y+24	; 0x18
    3d64:	20 e0       	ldi	r18, 0x00	; 0
    3d66:	3f ef       	ldi	r19, 0xFF	; 255
    3d68:	4f e7       	ldi	r20, 0x7F	; 127
    3d6a:	57 e4       	ldi	r21, 0x47	; 71
    3d6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d70:	18 16       	cp	r1, r24
    3d72:	4c f5       	brge	.+82     	; 0x3dc6 <STEP_MOTORu8StartHalfMode+0x53e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d74:	69 8d       	ldd	r22, Y+25	; 0x19
    3d76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d7c:	20 e0       	ldi	r18, 0x00	; 0
    3d7e:	30 e0       	ldi	r19, 0x00	; 0
    3d80:	40 e2       	ldi	r20, 0x20	; 32
    3d82:	51 e4       	ldi	r21, 0x41	; 65
    3d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d88:	dc 01       	movw	r26, r24
    3d8a:	cb 01       	movw	r24, r22
    3d8c:	bc 01       	movw	r22, r24
    3d8e:	cd 01       	movw	r24, r26
    3d90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d94:	dc 01       	movw	r26, r24
    3d96:	cb 01       	movw	r24, r22
    3d98:	9c 8b       	std	Y+20, r25	; 0x14
    3d9a:	8b 8b       	std	Y+19, r24	; 0x13
    3d9c:	0f c0       	rjmp	.+30     	; 0x3dbc <STEP_MOTORu8StartHalfMode+0x534>
    3d9e:	88 ec       	ldi	r24, 0xC8	; 200
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	9a 8b       	std	Y+18, r25	; 0x12
    3da4:	89 8b       	std	Y+17, r24	; 0x11
    3da6:	89 89       	ldd	r24, Y+17	; 0x11
    3da8:	9a 89       	ldd	r25, Y+18	; 0x12
    3daa:	01 97       	sbiw	r24, 0x01	; 1
    3dac:	f1 f7       	brne	.-4      	; 0x3daa <STEP_MOTORu8StartHalfMode+0x522>
    3dae:	9a 8b       	std	Y+18, r25	; 0x12
    3db0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3db2:	8b 89       	ldd	r24, Y+19	; 0x13
    3db4:	9c 89       	ldd	r25, Y+20	; 0x14
    3db6:	01 97       	sbiw	r24, 0x01	; 1
    3db8:	9c 8b       	std	Y+20, r25	; 0x14
    3dba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dbc:	8b 89       	ldd	r24, Y+19	; 0x13
    3dbe:	9c 89       	ldd	r25, Y+20	; 0x14
    3dc0:	00 97       	sbiw	r24, 0x00	; 0
    3dc2:	69 f7       	brne	.-38     	; 0x3d9e <STEP_MOTORu8StartHalfMode+0x516>
    3dc4:	14 c0       	rjmp	.+40     	; 0x3dee <STEP_MOTORu8StartHalfMode+0x566>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dc6:	6d 89       	ldd	r22, Y+21	; 0x15
    3dc8:	7e 89       	ldd	r23, Y+22	; 0x16
    3dca:	8f 89       	ldd	r24, Y+23	; 0x17
    3dcc:	98 8d       	ldd	r25, Y+24	; 0x18
    3dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dd2:	dc 01       	movw	r26, r24
    3dd4:	cb 01       	movw	r24, r22
    3dd6:	9c 8b       	std	Y+20, r25	; 0x14
    3dd8:	8b 8b       	std	Y+19, r24	; 0x13
    3dda:	8b 89       	ldd	r24, Y+19	; 0x13
    3ddc:	9c 89       	ldd	r25, Y+20	; 0x14
    3dde:	98 8b       	std	Y+16, r25	; 0x10
    3de0:	8f 87       	std	Y+15, r24	; 0x0f
    3de2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3de4:	98 89       	ldd	r25, Y+16	; 0x10
    3de6:	01 97       	sbiw	r24, 0x01	; 1
    3de8:	f1 f7       	brne	.-4      	; 0x3de6 <STEP_MOTORu8StartHalfMode+0x55e>
    3dea:	98 8b       	std	Y+16, r25	; 0x10
    3dec:	8f 87       	std	Y+15, r24	; 0x0f

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				con1 = 0x01;
				con2 = 0x03;
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3dee:	8b ad       	ldd	r24, Y+59	; 0x3b
    3df0:	8f 5f       	subi	r24, 0xFF	; 255
    3df2:	8b af       	std	Y+59, r24	; 0x3b
    3df4:	8b ad       	ldd	r24, Y+59	; 0x3b
    3df6:	89 30       	cpi	r24, 0x09	; 9
    3df8:	08 f4       	brcc	.+2      	; 0x3dfc <STEP_MOTORu8StartHalfMode+0x574>
    3dfa:	58 cf       	rjmp	.-336    	; 0x3cac <STEP_MOTORu8StartHalfMode+0x424>
	{

		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3dfc:	de 01       	movw	r26, r28
    3dfe:	a0 5c       	subi	r26, 0xC0	; 192
    3e00:	bf 4f       	sbci	r27, 0xFF	; 255
    3e02:	fe 01       	movw	r30, r28
    3e04:	e0 5c       	subi	r30, 0xC0	; 192
    3e06:	ff 4f       	sbci	r31, 0xFF	; 255
    3e08:	80 81       	ld	r24, Z
    3e0a:	91 81       	ldd	r25, Z+1	; 0x01
    3e0c:	01 96       	adiw	r24, 0x01	; 1
    3e0e:	11 96       	adiw	r26, 0x01	; 1
    3e10:	9c 93       	st	X, r25
    3e12:	8e 93       	st	-X, r24
    3e14:	fe 01       	movw	r30, r28
    3e16:	e0 5c       	subi	r30, 0xC0	; 192
    3e18:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1a:	20 81       	ld	r18, Z
    3e1c:	31 81       	ldd	r19, Z+1	; 0x01
    3e1e:	8c ad       	ldd	r24, Y+60	; 0x3c
    3e20:	9d ad       	ldd	r25, Y+61	; 0x3d
    3e22:	28 17       	cp	r18, r24
    3e24:	39 07       	cpc	r19, r25
    3e26:	08 f4       	brcc	.+2      	; 0x3e2a <STEP_MOTORu8StartHalfMode+0x5a2>
    3e28:	3a cf       	rjmp	.-396    	; 0x3c9e <STEP_MOTORu8StartHalfMode+0x416>
    3e2a:	d6 c0       	rjmp	.+428    	; 0x3fd8 <STEP_MOTORu8StartHalfMode+0x750>
					}
					_delay_ms(2);
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
    3e2c:	fe 01       	movw	r30, r28
    3e2e:	ed 5b       	subi	r30, 0xBD	; 189
    3e30:	ff 4f       	sbci	r31, 0xFF	; 255
    3e32:	01 90       	ld	r0, Z+
    3e34:	f0 81       	ld	r31, Z
    3e36:	e0 2d       	mov	r30, r0
    3e38:	82 81       	ldd	r24, Z+2	; 0x02
    3e3a:	81 30       	cpi	r24, 0x01	; 1
    3e3c:	09 f0       	breq	.+2      	; 0x3e40 <STEP_MOTORu8StartHalfMode+0x5b8>
    3e3e:	c1 c0       	rjmp	.+386    	; 0x3fc2 <STEP_MOTORu8StartHalfMode+0x73a>
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3e40:	fe 01       	movw	r30, r28
    3e42:	e0 5c       	subi	r30, 0xC0	; 192
    3e44:	ff 4f       	sbci	r31, 0xFF	; 255
    3e46:	11 82       	std	Z+1, r1	; 0x01
    3e48:	10 82       	st	Z, r1
    3e4a:	af c0       	rjmp	.+350    	; 0x3faa <STEP_MOTORu8StartHalfMode+0x722>
			{
				con1 = 0x08;
    3e4c:	88 e0       	ldi	r24, 0x08	; 8
    3e4e:	8a af       	std	Y+58, r24	; 0x3a
				con2 = 0x0c;
    3e50:	8c e0       	ldi	r24, 0x0C	; 12
    3e52:	89 af       	std	Y+57, r24	; 0x39
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3e54:	81 e0       	ldi	r24, 0x01	; 1
    3e56:	8b af       	std	Y+59, r24	; 0x3b
    3e58:	98 c0       	rjmp	.+304    	; 0x3f8a <STEP_MOTORu8StartHalfMode+0x702>
				{

					if(Local_u8ItrateStep%2==1)
    3e5a:	8b ad       	ldd	r24, Y+59	; 0x3b
    3e5c:	88 2f       	mov	r24, r24
    3e5e:	90 e0       	ldi	r25, 0x00	; 0
    3e60:	81 70       	andi	r24, 0x01	; 1
    3e62:	90 70       	andi	r25, 0x00	; 0
    3e64:	88 23       	and	r24, r24
    3e66:	71 f0       	breq	.+28     	; 0x3e84 <STEP_MOTORu8StartHalfMode+0x5fc>
					{
						DIO_u8SetHighNibbleValue(Copy_pStep->Port,con1);
    3e68:	fe 01       	movw	r30, r28
    3e6a:	ed 5b       	subi	r30, 0xBD	; 189
    3e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6e:	01 90       	ld	r0, Z+
    3e70:	f0 81       	ld	r31, Z
    3e72:	e0 2d       	mov	r30, r0
    3e74:	80 81       	ld	r24, Z
    3e76:	6a ad       	ldd	r22, Y+58	; 0x3a
    3e78:	0e 94 32 13 	call	0x2664	; 0x2664 <DIO_u8SetHighNibbleValue>
						con1>>=1;
    3e7c:	8a ad       	ldd	r24, Y+58	; 0x3a
    3e7e:	86 95       	lsr	r24
    3e80:	8a af       	std	Y+58, r24	; 0x3a
    3e82:	0e c0       	rjmp	.+28     	; 0x3ea0 <STEP_MOTORu8StartHalfMode+0x618>
					}
					else
					{
						DIO_u8SetHighNibbleValue(Copy_pStep->Port,con2);
    3e84:	fe 01       	movw	r30, r28
    3e86:	ed 5b       	subi	r30, 0xBD	; 189
    3e88:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8a:	01 90       	ld	r0, Z+
    3e8c:	f0 81       	ld	r31, Z
    3e8e:	e0 2d       	mov	r30, r0
    3e90:	80 81       	ld	r24, Z
    3e92:	69 ad       	ldd	r22, Y+57	; 0x39
    3e94:	0e 94 32 13 	call	0x2664	; 0x2664 <DIO_u8SetHighNibbleValue>
						con2 = RotateRightLowNibble(con2);
    3e98:	89 ad       	ldd	r24, Y+57	; 0x39
    3e9a:	0e 94 1d 20 	call	0x403a	; 0x403a <RotateRightLowNibble>
    3e9e:	89 af       	std	Y+57, r24	; 0x39
    3ea0:	80 e0       	ldi	r24, 0x00	; 0
    3ea2:	90 e0       	ldi	r25, 0x00	; 0
    3ea4:	a0 e0       	ldi	r26, 0x00	; 0
    3ea6:	b0 e4       	ldi	r27, 0x40	; 64
    3ea8:	8b 87       	std	Y+11, r24	; 0x0b
    3eaa:	9c 87       	std	Y+12, r25	; 0x0c
    3eac:	ad 87       	std	Y+13, r26	; 0x0d
    3eae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3eb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3eb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3eb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3eb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3eb8:	20 e0       	ldi	r18, 0x00	; 0
    3eba:	30 e0       	ldi	r19, 0x00	; 0
    3ebc:	4a ef       	ldi	r20, 0xFA	; 250
    3ebe:	54 e4       	ldi	r21, 0x44	; 68
    3ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ec4:	dc 01       	movw	r26, r24
    3ec6:	cb 01       	movw	r24, r22
    3ec8:	8f 83       	std	Y+7, r24	; 0x07
    3eca:	98 87       	std	Y+8, r25	; 0x08
    3ecc:	a9 87       	std	Y+9, r26	; 0x09
    3ece:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ed0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ed2:	78 85       	ldd	r23, Y+8	; 0x08
    3ed4:	89 85       	ldd	r24, Y+9	; 0x09
    3ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ed8:	20 e0       	ldi	r18, 0x00	; 0
    3eda:	30 e0       	ldi	r19, 0x00	; 0
    3edc:	40 e8       	ldi	r20, 0x80	; 128
    3ede:	5f e3       	ldi	r21, 0x3F	; 63
    3ee0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ee4:	88 23       	and	r24, r24
    3ee6:	2c f4       	brge	.+10     	; 0x3ef2 <STEP_MOTORu8StartHalfMode+0x66a>
		__ticks = 1;
    3ee8:	81 e0       	ldi	r24, 0x01	; 1
    3eea:	90 e0       	ldi	r25, 0x00	; 0
    3eec:	9e 83       	std	Y+6, r25	; 0x06
    3eee:	8d 83       	std	Y+5, r24	; 0x05
    3ef0:	3f c0       	rjmp	.+126    	; 0x3f70 <STEP_MOTORu8StartHalfMode+0x6e8>
	else if (__tmp > 65535)
    3ef2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ef4:	78 85       	ldd	r23, Y+8	; 0x08
    3ef6:	89 85       	ldd	r24, Y+9	; 0x09
    3ef8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3efa:	20 e0       	ldi	r18, 0x00	; 0
    3efc:	3f ef       	ldi	r19, 0xFF	; 255
    3efe:	4f e7       	ldi	r20, 0x7F	; 127
    3f00:	57 e4       	ldi	r21, 0x47	; 71
    3f02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f06:	18 16       	cp	r1, r24
    3f08:	4c f5       	brge	.+82     	; 0x3f5c <STEP_MOTORu8StartHalfMode+0x6d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f10:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f12:	20 e0       	ldi	r18, 0x00	; 0
    3f14:	30 e0       	ldi	r19, 0x00	; 0
    3f16:	40 e2       	ldi	r20, 0x20	; 32
    3f18:	51 e4       	ldi	r21, 0x41	; 65
    3f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f1e:	dc 01       	movw	r26, r24
    3f20:	cb 01       	movw	r24, r22
    3f22:	bc 01       	movw	r22, r24
    3f24:	cd 01       	movw	r24, r26
    3f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f2a:	dc 01       	movw	r26, r24
    3f2c:	cb 01       	movw	r24, r22
    3f2e:	9e 83       	std	Y+6, r25	; 0x06
    3f30:	8d 83       	std	Y+5, r24	; 0x05
    3f32:	0f c0       	rjmp	.+30     	; 0x3f52 <STEP_MOTORu8StartHalfMode+0x6ca>
    3f34:	88 ec       	ldi	r24, 0xC8	; 200
    3f36:	90 e0       	ldi	r25, 0x00	; 0
    3f38:	9c 83       	std	Y+4, r25	; 0x04
    3f3a:	8b 83       	std	Y+3, r24	; 0x03
    3f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f3e:	9c 81       	ldd	r25, Y+4	; 0x04
    3f40:	01 97       	sbiw	r24, 0x01	; 1
    3f42:	f1 f7       	brne	.-4      	; 0x3f40 <STEP_MOTORu8StartHalfMode+0x6b8>
    3f44:	9c 83       	std	Y+4, r25	; 0x04
    3f46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f48:	8d 81       	ldd	r24, Y+5	; 0x05
    3f4a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f4c:	01 97       	sbiw	r24, 0x01	; 1
    3f4e:	9e 83       	std	Y+6, r25	; 0x06
    3f50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f52:	8d 81       	ldd	r24, Y+5	; 0x05
    3f54:	9e 81       	ldd	r25, Y+6	; 0x06
    3f56:	00 97       	sbiw	r24, 0x00	; 0
    3f58:	69 f7       	brne	.-38     	; 0x3f34 <STEP_MOTORu8StartHalfMode+0x6ac>
    3f5a:	14 c0       	rjmp	.+40     	; 0x3f84 <STEP_MOTORu8StartHalfMode+0x6fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f5c:	6f 81       	ldd	r22, Y+7	; 0x07
    3f5e:	78 85       	ldd	r23, Y+8	; 0x08
    3f60:	89 85       	ldd	r24, Y+9	; 0x09
    3f62:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f68:	dc 01       	movw	r26, r24
    3f6a:	cb 01       	movw	r24, r22
    3f6c:	9e 83       	std	Y+6, r25	; 0x06
    3f6e:	8d 83       	std	Y+5, r24	; 0x05
    3f70:	8d 81       	ldd	r24, Y+5	; 0x05
    3f72:	9e 81       	ldd	r25, Y+6	; 0x06
    3f74:	9a 83       	std	Y+2, r25	; 0x02
    3f76:	89 83       	std	Y+1, r24	; 0x01
    3f78:	89 81       	ldd	r24, Y+1	; 0x01
    3f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f7c:	01 97       	sbiw	r24, 0x01	; 1
    3f7e:	f1 f7       	brne	.-4      	; 0x3f7c <STEP_MOTORu8StartHalfMode+0x6f4>
    3f80:	9a 83       	std	Y+2, r25	; 0x02
    3f82:	89 83       	std	Y+1, r24	; 0x01

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				con1 = 0x08;
				con2 = 0x0c;
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3f84:	8b ad       	ldd	r24, Y+59	; 0x3b
    3f86:	8f 5f       	subi	r24, 0xFF	; 255
    3f88:	8b af       	std	Y+59, r24	; 0x3b
    3f8a:	8b ad       	ldd	r24, Y+59	; 0x3b
    3f8c:	89 30       	cpi	r24, 0x09	; 9
    3f8e:	08 f4       	brcc	.+2      	; 0x3f92 <STEP_MOTORu8StartHalfMode+0x70a>
    3f90:	64 cf       	rjmp	.-312    	; 0x3e5a <STEP_MOTORu8StartHalfMode+0x5d2>
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3f92:	de 01       	movw	r26, r28
    3f94:	a0 5c       	subi	r26, 0xC0	; 192
    3f96:	bf 4f       	sbci	r27, 0xFF	; 255
    3f98:	fe 01       	movw	r30, r28
    3f9a:	e0 5c       	subi	r30, 0xC0	; 192
    3f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9e:	80 81       	ld	r24, Z
    3fa0:	91 81       	ldd	r25, Z+1	; 0x01
    3fa2:	01 96       	adiw	r24, 0x01	; 1
    3fa4:	11 96       	adiw	r26, 0x01	; 1
    3fa6:	9c 93       	st	X, r25
    3fa8:	8e 93       	st	-X, r24
    3faa:	fe 01       	movw	r30, r28
    3fac:	e0 5c       	subi	r30, 0xC0	; 192
    3fae:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb0:	20 81       	ld	r18, Z
    3fb2:	31 81       	ldd	r19, Z+1	; 0x01
    3fb4:	8c ad       	ldd	r24, Y+60	; 0x3c
    3fb6:	9d ad       	ldd	r25, Y+61	; 0x3d
    3fb8:	28 17       	cp	r18, r24
    3fba:	39 07       	cpc	r19, r25
    3fbc:	08 f4       	brcc	.+2      	; 0x3fc0 <STEP_MOTORu8StartHalfMode+0x738>
    3fbe:	46 cf       	rjmp	.-372    	; 0x3e4c <STEP_MOTORu8StartHalfMode+0x5c4>
    3fc0:	0b c0       	rjmp	.+22     	; 0x3fd8 <STEP_MOTORu8StartHalfMode+0x750>
					_delay_ms(2);
				}
			}
		}
		else
			Local_u8ErrorState = NOTOK;
    3fc2:	fe 01       	movw	r30, r28
    3fc4:	ee 5b       	subi	r30, 0xBE	; 190
    3fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc8:	81 e0       	ldi	r24, 0x01	; 1
    3fca:	80 83       	st	Z, r24
    3fcc:	05 c0       	rjmp	.+10     	; 0x3fd8 <STEP_MOTORu8StartHalfMode+0x750>
	}
	else
		Local_u8ErrorState = NOTOK;
    3fce:	fe 01       	movw	r30, r28
    3fd0:	ee 5b       	subi	r30, 0xBE	; 190
    3fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd4:	81 e0       	ldi	r24, 0x01	; 1
    3fd6:	80 83       	st	Z, r24
	return Local_u8ErrorState;
    3fd8:	fe 01       	movw	r30, r28
    3fda:	ee 5b       	subi	r30, 0xBE	; 190
    3fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fde:	80 81       	ld	r24, Z
}
    3fe0:	cc 5b       	subi	r28, 0xBC	; 188
    3fe2:	df 4f       	sbci	r29, 0xFF	; 255
    3fe4:	0f b6       	in	r0, 0x3f	; 63
    3fe6:	f8 94       	cli
    3fe8:	de bf       	out	0x3e, r29	; 62
    3fea:	0f be       	out	0x3f, r0	; 63
    3fec:	cd bf       	out	0x3d, r28	; 61
    3fee:	cf 91       	pop	r28
    3ff0:	df 91       	pop	r29
    3ff2:	08 95       	ret

00003ff4 <STEP_MOTORvStop>:

void STEP_MOTORvStop(STEP_t *Copy_pStep)
{
    3ff4:	df 93       	push	r29
    3ff6:	cf 93       	push	r28
    3ff8:	00 d0       	rcall	.+0      	; 0x3ffa <STEP_MOTORvStop+0x6>
    3ffa:	cd b7       	in	r28, 0x3d	; 61
    3ffc:	de b7       	in	r29, 0x3e	; 62
    3ffe:	9a 83       	std	Y+2, r25	; 0x02
    4000:	89 83       	std	Y+1, r24	; 0x01
	if(STEP_LOWER_NIBBLE == Copy_pStep->Nibble)
    4002:	e9 81       	ldd	r30, Y+1	; 0x01
    4004:	fa 81       	ldd	r31, Y+2	; 0x02
    4006:	81 81       	ldd	r24, Z+1	; 0x01
    4008:	88 23       	and	r24, r24
    400a:	39 f4       	brne	.+14     	; 0x401a <STEP_MOTORvStop+0x26>
	{
		DIO_u8SetLowNibbleValue(Copy_pStep->Port,0);
    400c:	e9 81       	ldd	r30, Y+1	; 0x01
    400e:	fa 81       	ldd	r31, Y+2	; 0x02
    4010:	80 81       	ld	r24, Z
    4012:	60 e0       	ldi	r22, 0x00	; 0
    4014:	0e 94 b7 12 	call	0x256e	; 0x256e <DIO_u8SetLowNibbleValue>
    4018:	0b c0       	rjmp	.+22     	; 0x4030 <STEP_MOTORvStop+0x3c>
	}
	else if(STEP_UPPER_NIBBLE == Copy_pStep->Nibble)
    401a:	e9 81       	ldd	r30, Y+1	; 0x01
    401c:	fa 81       	ldd	r31, Y+2	; 0x02
    401e:	81 81       	ldd	r24, Z+1	; 0x01
    4020:	81 30       	cpi	r24, 0x01	; 1
    4022:	31 f4       	brne	.+12     	; 0x4030 <STEP_MOTORvStop+0x3c>
	{
		DIO_u8SetHighNibbleValue(Copy_pStep->Port,0);
    4024:	e9 81       	ldd	r30, Y+1	; 0x01
    4026:	fa 81       	ldd	r31, Y+2	; 0x02
    4028:	80 81       	ld	r24, Z
    402a:	60 e0       	ldi	r22, 0x00	; 0
    402c:	0e 94 32 13 	call	0x2664	; 0x2664 <DIO_u8SetHighNibbleValue>
	}
}
    4030:	0f 90       	pop	r0
    4032:	0f 90       	pop	r0
    4034:	cf 91       	pop	r28
    4036:	df 91       	pop	r29
    4038:	08 95       	ret

0000403a <RotateRightLowNibble>:


static u8 RotateRightLowNibble(u8 Val)
{
    403a:	df 93       	push	r29
    403c:	cf 93       	push	r28
    403e:	00 d0       	rcall	.+0      	; 0x4040 <RotateRightLowNibble+0x6>
    4040:	cd b7       	in	r28, 0x3d	; 61
    4042:	de b7       	in	r29, 0x3e	; 62
    4044:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_xVal = 0;
    4046:	19 82       	std	Y+1, r1	; 0x01
	Local_xVal = GET_BIT(Val,0);
    4048:	8a 81       	ldd	r24, Y+2	; 0x02
    404a:	81 70       	andi	r24, 0x01	; 1
    404c:	89 83       	std	Y+1, r24	; 0x01
	Val>>=1;
    404e:	8a 81       	ldd	r24, Y+2	; 0x02
    4050:	86 95       	lsr	r24
    4052:	8a 83       	std	Y+2, r24	; 0x02
	Local_xVal?SET_BIT(Val,3):CLR_BIT(Val,3);
    4054:	89 81       	ldd	r24, Y+1	; 0x01
    4056:	88 23       	and	r24, r24
    4058:	21 f0       	breq	.+8      	; 0x4062 <RotateRightLowNibble+0x28>
    405a:	8a 81       	ldd	r24, Y+2	; 0x02
    405c:	88 60       	ori	r24, 0x08	; 8
    405e:	8a 83       	std	Y+2, r24	; 0x02
    4060:	03 c0       	rjmp	.+6      	; 0x4068 <RotateRightLowNibble+0x2e>
    4062:	8a 81       	ldd	r24, Y+2	; 0x02
    4064:	87 7f       	andi	r24, 0xF7	; 247
    4066:	8a 83       	std	Y+2, r24	; 0x02
	return Val;
    4068:	8a 81       	ldd	r24, Y+2	; 0x02
}
    406a:	0f 90       	pop	r0
    406c:	0f 90       	pop	r0
    406e:	cf 91       	pop	r28
    4070:	df 91       	pop	r29
    4072:	08 95       	ret

00004074 <RotateLeftLowNibble>:

static u8 RotateLeftLowNibble(u8 Val)
{
    4074:	df 93       	push	r29
    4076:	cf 93       	push	r28
    4078:	00 d0       	rcall	.+0      	; 0x407a <RotateLeftLowNibble+0x6>
    407a:	cd b7       	in	r28, 0x3d	; 61
    407c:	de b7       	in	r29, 0x3e	; 62
    407e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_xVal = 0;
    4080:	19 82       	std	Y+1, r1	; 0x01
	Local_xVal = GET_BIT(Val,3);
    4082:	8a 81       	ldd	r24, Y+2	; 0x02
    4084:	86 95       	lsr	r24
    4086:	86 95       	lsr	r24
    4088:	86 95       	lsr	r24
    408a:	81 70       	andi	r24, 0x01	; 1
    408c:	89 83       	std	Y+1, r24	; 0x01
	Val<<=1;
    408e:	8a 81       	ldd	r24, Y+2	; 0x02
    4090:	88 0f       	add	r24, r24
    4092:	8a 83       	std	Y+2, r24	; 0x02
	Local_xVal?SET_BIT(Val,0):CLR_BIT(Val,0);
    4094:	89 81       	ldd	r24, Y+1	; 0x01
    4096:	88 23       	and	r24, r24
    4098:	21 f0       	breq	.+8      	; 0x40a2 <RotateLeftLowNibble+0x2e>
    409a:	8a 81       	ldd	r24, Y+2	; 0x02
    409c:	81 60       	ori	r24, 0x01	; 1
    409e:	8a 83       	std	Y+2, r24	; 0x02
    40a0:	03 c0       	rjmp	.+6      	; 0x40a8 <RotateLeftLowNibble+0x34>
    40a2:	8a 81       	ldd	r24, Y+2	; 0x02
    40a4:	8e 7f       	andi	r24, 0xFE	; 254
    40a6:	8a 83       	std	Y+2, r24	; 0x02
	return Val;
    40a8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    40aa:	0f 90       	pop	r0
    40ac:	0f 90       	pop	r0
    40ae:	cf 91       	pop	r28
    40b0:	df 91       	pop	r29
    40b2:	08 95       	ret

000040b4 <SW_u8GetState>:
 * 			Copy_SW     : Full with Port,Pin,SelfType,switch function
 * 			Copy_u8State: return State of switch as (0) Pressed , (1) Not pressed
 * use for: Get Switch by delay debouncing of switch as (0) Pressed , (1) Not pressed
 *  */
u8 SW_u8GetState(SW_t* Copy_SW,u8 *Copy_u8State)
{
    40b4:	df 93       	push	r29
    40b6:	cf 93       	push	r28
    40b8:	cd b7       	in	r28, 0x3d	; 61
    40ba:	de b7       	in	r29, 0x3e	; 62
    40bc:	a1 97       	sbiw	r28, 0x21	; 33
    40be:	0f b6       	in	r0, 0x3f	; 63
    40c0:	f8 94       	cli
    40c2:	de bf       	out	0x3e, r29	; 62
    40c4:	0f be       	out	0x3f, r0	; 63
    40c6:	cd bf       	out	0x3d, r28	; 61
    40c8:	9f 8f       	std	Y+31, r25	; 0x1f
    40ca:	8e 8f       	std	Y+30, r24	; 0x1e
    40cc:	79 a3       	std	Y+33, r23	; 0x21
    40ce:	68 a3       	std	Y+32, r22	; 0x20
	u8 Local_u8ErrorState = OK;
    40d0:	1d 8e       	std	Y+29, r1	; 0x1d
	//static u8 pressed_conf_level = 0;
	//static u8 released_conf_level = 0;
	//static u8 pressed = 0;
	//static u8 pressed2 = 0;
	*Copy_u8State = SW_NOT_PRESSED;
    40d2:	e8 a1       	ldd	r30, Y+32	; 0x20
    40d4:	f9 a1       	ldd	r31, Y+33	; 0x21
    40d6:	81 e0       	ldi	r24, 0x01	; 1
    40d8:	80 83       	st	Z, r24
	static u8 Local_u8SwState;
	if(Copy_SW->Pulltype == SW_PULL_UP)
    40da:	ee 8d       	ldd	r30, Y+30	; 0x1e
    40dc:	ff 8d       	ldd	r31, Y+31	; 0x1f
    40de:	82 81       	ldd	r24, Z+2	; 0x02
    40e0:	88 23       	and	r24, r24
    40e2:	09 f0       	breq	.+2      	; 0x40e6 <SW_u8GetState+0x32>
    40e4:	c3 c0       	rjmp	.+390    	; 0x426c <SW_u8GetState+0x1b8>
	{
		if(Copy_SW->SelfLockType == SW_SELF_LOCK)
    40e6:	ee 8d       	ldd	r30, Y+30	; 0x1e
    40e8:	ff 8d       	ldd	r31, Y+31	; 0x1f
    40ea:	83 81       	ldd	r24, Z+3	; 0x03
    40ec:	81 30       	cpi	r24, 0x01	; 1
    40ee:	09 f0       	breq	.+2      	; 0x40f2 <SW_u8GetState+0x3e>
    40f0:	9c c0       	rjmp	.+312    	; 0x422a <SW_u8GetState+0x176>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    40f2:	ee 8d       	ldd	r30, Y+30	; 0x1e
    40f4:	ff 8d       	ldd	r31, Y+31	; 0x1f
    40f6:	80 81       	ld	r24, Z
    40f8:	ee 8d       	ldd	r30, Y+30	; 0x1e
    40fa:	ff 8d       	ldd	r31, Y+31	; 0x1f
    40fc:	91 81       	ldd	r25, Z+1	; 0x01
    40fe:	20 eb       	ldi	r18, 0xB0	; 176
    4100:	32 e0       	ldi	r19, 0x02	; 2
    4102:	69 2f       	mov	r22, r25
    4104:	a9 01       	movw	r20, r18
    4106:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8GetPinValue>
			if(Local_u8SwState == DIO_PIN_LOW)
    410a:	80 91 b0 02 	lds	r24, 0x02B0
    410e:	88 23       	and	r24, r24
    4110:	09 f0       	breq	.+2      	; 0x4114 <SW_u8GetState+0x60>
    4112:	6d c1       	rjmp	.+730    	; 0x43ee <SW_u8GetState+0x33a>
    4114:	80 e0       	ldi	r24, 0x00	; 0
    4116:	90 e0       	ldi	r25, 0x00	; 0
    4118:	a6 e1       	ldi	r26, 0x16	; 22
    411a:	b3 e4       	ldi	r27, 0x43	; 67
    411c:	89 8f       	std	Y+25, r24	; 0x19
    411e:	9a 8f       	std	Y+26, r25	; 0x1a
    4120:	ab 8f       	std	Y+27, r26	; 0x1b
    4122:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4124:	69 8d       	ldd	r22, Y+25	; 0x19
    4126:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4128:	8b 8d       	ldd	r24, Y+27	; 0x1b
    412a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    412c:	20 e0       	ldi	r18, 0x00	; 0
    412e:	30 e0       	ldi	r19, 0x00	; 0
    4130:	4a ef       	ldi	r20, 0xFA	; 250
    4132:	54 e4       	ldi	r21, 0x44	; 68
    4134:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4138:	dc 01       	movw	r26, r24
    413a:	cb 01       	movw	r24, r22
    413c:	8d 8b       	std	Y+21, r24	; 0x15
    413e:	9e 8b       	std	Y+22, r25	; 0x16
    4140:	af 8b       	std	Y+23, r26	; 0x17
    4142:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4144:	6d 89       	ldd	r22, Y+21	; 0x15
    4146:	7e 89       	ldd	r23, Y+22	; 0x16
    4148:	8f 89       	ldd	r24, Y+23	; 0x17
    414a:	98 8d       	ldd	r25, Y+24	; 0x18
    414c:	20 e0       	ldi	r18, 0x00	; 0
    414e:	30 e0       	ldi	r19, 0x00	; 0
    4150:	40 e8       	ldi	r20, 0x80	; 128
    4152:	5f e3       	ldi	r21, 0x3F	; 63
    4154:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4158:	88 23       	and	r24, r24
    415a:	2c f4       	brge	.+10     	; 0x4166 <SW_u8GetState+0xb2>
		__ticks = 1;
    415c:	81 e0       	ldi	r24, 0x01	; 1
    415e:	90 e0       	ldi	r25, 0x00	; 0
    4160:	9c 8b       	std	Y+20, r25	; 0x14
    4162:	8b 8b       	std	Y+19, r24	; 0x13
    4164:	3f c0       	rjmp	.+126    	; 0x41e4 <SW_u8GetState+0x130>
	else if (__tmp > 65535)
    4166:	6d 89       	ldd	r22, Y+21	; 0x15
    4168:	7e 89       	ldd	r23, Y+22	; 0x16
    416a:	8f 89       	ldd	r24, Y+23	; 0x17
    416c:	98 8d       	ldd	r25, Y+24	; 0x18
    416e:	20 e0       	ldi	r18, 0x00	; 0
    4170:	3f ef       	ldi	r19, 0xFF	; 255
    4172:	4f e7       	ldi	r20, 0x7F	; 127
    4174:	57 e4       	ldi	r21, 0x47	; 71
    4176:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    417a:	18 16       	cp	r1, r24
    417c:	4c f5       	brge	.+82     	; 0x41d0 <SW_u8GetState+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    417e:	69 8d       	ldd	r22, Y+25	; 0x19
    4180:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4182:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4184:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4186:	20 e0       	ldi	r18, 0x00	; 0
    4188:	30 e0       	ldi	r19, 0x00	; 0
    418a:	40 e2       	ldi	r20, 0x20	; 32
    418c:	51 e4       	ldi	r21, 0x41	; 65
    418e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4192:	dc 01       	movw	r26, r24
    4194:	cb 01       	movw	r24, r22
    4196:	bc 01       	movw	r22, r24
    4198:	cd 01       	movw	r24, r26
    419a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    419e:	dc 01       	movw	r26, r24
    41a0:	cb 01       	movw	r24, r22
    41a2:	9c 8b       	std	Y+20, r25	; 0x14
    41a4:	8b 8b       	std	Y+19, r24	; 0x13
    41a6:	0f c0       	rjmp	.+30     	; 0x41c6 <SW_u8GetState+0x112>
    41a8:	88 ec       	ldi	r24, 0xC8	; 200
    41aa:	90 e0       	ldi	r25, 0x00	; 0
    41ac:	9a 8b       	std	Y+18, r25	; 0x12
    41ae:	89 8b       	std	Y+17, r24	; 0x11
    41b0:	89 89       	ldd	r24, Y+17	; 0x11
    41b2:	9a 89       	ldd	r25, Y+18	; 0x12
    41b4:	01 97       	sbiw	r24, 0x01	; 1
    41b6:	f1 f7       	brne	.-4      	; 0x41b4 <SW_u8GetState+0x100>
    41b8:	9a 8b       	std	Y+18, r25	; 0x12
    41ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41bc:	8b 89       	ldd	r24, Y+19	; 0x13
    41be:	9c 89       	ldd	r25, Y+20	; 0x14
    41c0:	01 97       	sbiw	r24, 0x01	; 1
    41c2:	9c 8b       	std	Y+20, r25	; 0x14
    41c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41c6:	8b 89       	ldd	r24, Y+19	; 0x13
    41c8:	9c 89       	ldd	r25, Y+20	; 0x14
    41ca:	00 97       	sbiw	r24, 0x00	; 0
    41cc:	69 f7       	brne	.-38     	; 0x41a8 <SW_u8GetState+0xf4>
    41ce:	14 c0       	rjmp	.+40     	; 0x41f8 <SW_u8GetState+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41d0:	6d 89       	ldd	r22, Y+21	; 0x15
    41d2:	7e 89       	ldd	r23, Y+22	; 0x16
    41d4:	8f 89       	ldd	r24, Y+23	; 0x17
    41d6:	98 8d       	ldd	r25, Y+24	; 0x18
    41d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41dc:	dc 01       	movw	r26, r24
    41de:	cb 01       	movw	r24, r22
    41e0:	9c 8b       	std	Y+20, r25	; 0x14
    41e2:	8b 8b       	std	Y+19, r24	; 0x13
    41e4:	8b 89       	ldd	r24, Y+19	; 0x13
    41e6:	9c 89       	ldd	r25, Y+20	; 0x14
    41e8:	98 8b       	std	Y+16, r25	; 0x10
    41ea:	8f 87       	std	Y+15, r24	; 0x0f
    41ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    41ee:	98 89       	ldd	r25, Y+16	; 0x10
    41f0:	01 97       	sbiw	r24, 0x01	; 1
    41f2:	f1 f7       	brne	.-4      	; 0x41f0 <SW_u8GetState+0x13c>
    41f4:	98 8b       	std	Y+16, r25	; 0x10
    41f6:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(150);
				DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    41f8:	ee 8d       	ldd	r30, Y+30	; 0x1e
    41fa:	ff 8d       	ldd	r31, Y+31	; 0x1f
    41fc:	80 81       	ld	r24, Z
    41fe:	ee 8d       	ldd	r30, Y+30	; 0x1e
    4200:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4202:	91 81       	ldd	r25, Z+1	; 0x01
    4204:	20 eb       	ldi	r18, 0xB0	; 176
    4206:	32 e0       	ldi	r19, 0x02	; 2
    4208:	69 2f       	mov	r22, r25
    420a:	a9 01       	movw	r20, r18
    420c:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8GetPinValue>
				if(Local_u8SwState == DIO_PIN_LOW )
    4210:	80 91 b0 02 	lds	r24, 0x02B0
    4214:	88 23       	and	r24, r24
    4216:	21 f4       	brne	.+8      	; 0x4220 <SW_u8GetState+0x16c>
				{
					*Copy_u8State = SW_PRESSED;
    4218:	e8 a1       	ldd	r30, Y+32	; 0x20
    421a:	f9 a1       	ldd	r31, Y+33	; 0x21
    421c:	10 82       	st	Z, r1
    421e:	e7 c0       	rjmp	.+462    	; 0x43ee <SW_u8GetState+0x33a>
				}
				else
				{
					*Copy_u8State = SW_NOT_PRESSED;
    4220:	e8 a1       	ldd	r30, Y+32	; 0x20
    4222:	f9 a1       	ldd	r31, Y+33	; 0x21
    4224:	81 e0       	ldi	r24, 0x01	; 1
    4226:	80 83       	st	Z, r24
    4228:	e2 c0       	rjmp	.+452    	; 0x43ee <SW_u8GetState+0x33a>
				}
			}
		}
		else if(Copy_SW->SelfLockType == SW_NOT_SELF_LOCK)
    422a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    422c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    422e:	83 81       	ldd	r24, Z+3	; 0x03
    4230:	88 23       	and	r24, r24
    4232:	c9 f4       	brne	.+50     	; 0x4266 <SW_u8GetState+0x1b2>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,Copy_u8State);
    4234:	ee 8d       	ldd	r30, Y+30	; 0x1e
    4236:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4238:	80 81       	ld	r24, Z
    423a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    423c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    423e:	91 81       	ldd	r25, Z+1	; 0x01
    4240:	28 a1       	ldd	r18, Y+32	; 0x20
    4242:	39 a1       	ldd	r19, Y+33	; 0x21
    4244:	69 2f       	mov	r22, r25
    4246:	a9 01       	movw	r20, r18
    4248:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8GetPinValue>
			if (Local_u8SwState == DIO_PIN_LOW)
    424c:	80 91 b0 02 	lds	r24, 0x02B0
    4250:	88 23       	and	r24, r24
    4252:	21 f4       	brne	.+8      	; 0x425c <SW_u8GetState+0x1a8>
				*Copy_u8State = SW_PRESSED;
    4254:	e8 a1       	ldd	r30, Y+32	; 0x20
    4256:	f9 a1       	ldd	r31, Y+33	; 0x21
    4258:	10 82       	st	Z, r1
    425a:	c9 c0       	rjmp	.+402    	; 0x43ee <SW_u8GetState+0x33a>
			else
				*Copy_u8State = SW_NOT_PRESSED;
    425c:	e8 a1       	ldd	r30, Y+32	; 0x20
    425e:	f9 a1       	ldd	r31, Y+33	; 0x21
    4260:	81 e0       	ldi	r24, 0x01	; 1
    4262:	80 83       	st	Z, r24
    4264:	c4 c0       	rjmp	.+392    	; 0x43ee <SW_u8GetState+0x33a>
		}
		else
			Local_u8ErrorState = NOTOK;
    4266:	81 e0       	ldi	r24, 0x01	; 1
    4268:	8d 8f       	std	Y+29, r24	; 0x1d
    426a:	c1 c0       	rjmp	.+386    	; 0x43ee <SW_u8GetState+0x33a>
	}
	else if(Copy_SW->Pulltype == SW_PULL_DOWN)
    426c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    426e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4270:	82 81       	ldd	r24, Z+2	; 0x02
    4272:	81 30       	cpi	r24, 0x01	; 1
    4274:	09 f0       	breq	.+2      	; 0x4278 <SW_u8GetState+0x1c4>
    4276:	b9 c0       	rjmp	.+370    	; 0x43ea <SW_u8GetState+0x336>
	{

		if(Copy_SW->SelfLockType == SW_SELF_LOCK)
    4278:	ee 8d       	ldd	r30, Y+30	; 0x1e
    427a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    427c:	83 81       	ldd	r24, Z+3	; 0x03
    427e:	81 30       	cpi	r24, 0x01	; 1
    4280:	09 f0       	breq	.+2      	; 0x4284 <SW_u8GetState+0x1d0>
    4282:	97 c0       	rjmp	.+302    	; 0x43b2 <SW_u8GetState+0x2fe>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    4284:	ee 8d       	ldd	r30, Y+30	; 0x1e
    4286:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4288:	80 81       	ld	r24, Z
    428a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    428c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    428e:	91 81       	ldd	r25, Z+1	; 0x01
    4290:	20 eb       	ldi	r18, 0xB0	; 176
    4292:	32 e0       	ldi	r19, 0x02	; 2
    4294:	69 2f       	mov	r22, r25
    4296:	a9 01       	movw	r20, r18
    4298:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8GetPinValue>
			if(Local_u8SwState == DIO_PIN_HIGH)
    429c:	80 91 b0 02 	lds	r24, 0x02B0
    42a0:	81 30       	cpi	r24, 0x01	; 1
    42a2:	09 f0       	breq	.+2      	; 0x42a6 <SW_u8GetState+0x1f2>
    42a4:	a4 c0       	rjmp	.+328    	; 0x43ee <SW_u8GetState+0x33a>
    42a6:	80 e0       	ldi	r24, 0x00	; 0
    42a8:	90 e0       	ldi	r25, 0x00	; 0
    42aa:	a6 e1       	ldi	r26, 0x16	; 22
    42ac:	b3 e4       	ldi	r27, 0x43	; 67
    42ae:	8b 87       	std	Y+11, r24	; 0x0b
    42b0:	9c 87       	std	Y+12, r25	; 0x0c
    42b2:	ad 87       	std	Y+13, r26	; 0x0d
    42b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    42b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    42ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    42bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    42be:	20 e0       	ldi	r18, 0x00	; 0
    42c0:	30 e0       	ldi	r19, 0x00	; 0
    42c2:	4a ef       	ldi	r20, 0xFA	; 250
    42c4:	54 e4       	ldi	r21, 0x44	; 68
    42c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42ca:	dc 01       	movw	r26, r24
    42cc:	cb 01       	movw	r24, r22
    42ce:	8f 83       	std	Y+7, r24	; 0x07
    42d0:	98 87       	std	Y+8, r25	; 0x08
    42d2:	a9 87       	std	Y+9, r26	; 0x09
    42d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    42d6:	6f 81       	ldd	r22, Y+7	; 0x07
    42d8:	78 85       	ldd	r23, Y+8	; 0x08
    42da:	89 85       	ldd	r24, Y+9	; 0x09
    42dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    42de:	20 e0       	ldi	r18, 0x00	; 0
    42e0:	30 e0       	ldi	r19, 0x00	; 0
    42e2:	40 e8       	ldi	r20, 0x80	; 128
    42e4:	5f e3       	ldi	r21, 0x3F	; 63
    42e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42ea:	88 23       	and	r24, r24
    42ec:	2c f4       	brge	.+10     	; 0x42f8 <SW_u8GetState+0x244>
		__ticks = 1;
    42ee:	81 e0       	ldi	r24, 0x01	; 1
    42f0:	90 e0       	ldi	r25, 0x00	; 0
    42f2:	9e 83       	std	Y+6, r25	; 0x06
    42f4:	8d 83       	std	Y+5, r24	; 0x05
    42f6:	3f c0       	rjmp	.+126    	; 0x4376 <SW_u8GetState+0x2c2>
	else if (__tmp > 65535)
    42f8:	6f 81       	ldd	r22, Y+7	; 0x07
    42fa:	78 85       	ldd	r23, Y+8	; 0x08
    42fc:	89 85       	ldd	r24, Y+9	; 0x09
    42fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4300:	20 e0       	ldi	r18, 0x00	; 0
    4302:	3f ef       	ldi	r19, 0xFF	; 255
    4304:	4f e7       	ldi	r20, 0x7F	; 127
    4306:	57 e4       	ldi	r21, 0x47	; 71
    4308:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    430c:	18 16       	cp	r1, r24
    430e:	4c f5       	brge	.+82     	; 0x4362 <SW_u8GetState+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4310:	6b 85       	ldd	r22, Y+11	; 0x0b
    4312:	7c 85       	ldd	r23, Y+12	; 0x0c
    4314:	8d 85       	ldd	r24, Y+13	; 0x0d
    4316:	9e 85       	ldd	r25, Y+14	; 0x0e
    4318:	20 e0       	ldi	r18, 0x00	; 0
    431a:	30 e0       	ldi	r19, 0x00	; 0
    431c:	40 e2       	ldi	r20, 0x20	; 32
    431e:	51 e4       	ldi	r21, 0x41	; 65
    4320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4324:	dc 01       	movw	r26, r24
    4326:	cb 01       	movw	r24, r22
    4328:	bc 01       	movw	r22, r24
    432a:	cd 01       	movw	r24, r26
    432c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4330:	dc 01       	movw	r26, r24
    4332:	cb 01       	movw	r24, r22
    4334:	9e 83       	std	Y+6, r25	; 0x06
    4336:	8d 83       	std	Y+5, r24	; 0x05
    4338:	0f c0       	rjmp	.+30     	; 0x4358 <SW_u8GetState+0x2a4>
    433a:	88 ec       	ldi	r24, 0xC8	; 200
    433c:	90 e0       	ldi	r25, 0x00	; 0
    433e:	9c 83       	std	Y+4, r25	; 0x04
    4340:	8b 83       	std	Y+3, r24	; 0x03
    4342:	8b 81       	ldd	r24, Y+3	; 0x03
    4344:	9c 81       	ldd	r25, Y+4	; 0x04
    4346:	01 97       	sbiw	r24, 0x01	; 1
    4348:	f1 f7       	brne	.-4      	; 0x4346 <SW_u8GetState+0x292>
    434a:	9c 83       	std	Y+4, r25	; 0x04
    434c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    434e:	8d 81       	ldd	r24, Y+5	; 0x05
    4350:	9e 81       	ldd	r25, Y+6	; 0x06
    4352:	01 97       	sbiw	r24, 0x01	; 1
    4354:	9e 83       	std	Y+6, r25	; 0x06
    4356:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4358:	8d 81       	ldd	r24, Y+5	; 0x05
    435a:	9e 81       	ldd	r25, Y+6	; 0x06
    435c:	00 97       	sbiw	r24, 0x00	; 0
    435e:	69 f7       	brne	.-38     	; 0x433a <SW_u8GetState+0x286>
    4360:	14 c0       	rjmp	.+40     	; 0x438a <SW_u8GetState+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4362:	6f 81       	ldd	r22, Y+7	; 0x07
    4364:	78 85       	ldd	r23, Y+8	; 0x08
    4366:	89 85       	ldd	r24, Y+9	; 0x09
    4368:	9a 85       	ldd	r25, Y+10	; 0x0a
    436a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    436e:	dc 01       	movw	r26, r24
    4370:	cb 01       	movw	r24, r22
    4372:	9e 83       	std	Y+6, r25	; 0x06
    4374:	8d 83       	std	Y+5, r24	; 0x05
    4376:	8d 81       	ldd	r24, Y+5	; 0x05
    4378:	9e 81       	ldd	r25, Y+6	; 0x06
    437a:	9a 83       	std	Y+2, r25	; 0x02
    437c:	89 83       	std	Y+1, r24	; 0x01
    437e:	89 81       	ldd	r24, Y+1	; 0x01
    4380:	9a 81       	ldd	r25, Y+2	; 0x02
    4382:	01 97       	sbiw	r24, 0x01	; 1
    4384:	f1 f7       	brne	.-4      	; 0x4382 <SW_u8GetState+0x2ce>
    4386:	9a 83       	std	Y+2, r25	; 0x02
    4388:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(150);
				DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    438a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    438c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    438e:	80 81       	ld	r24, Z
    4390:	ee 8d       	ldd	r30, Y+30	; 0x1e
    4392:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4394:	91 81       	ldd	r25, Z+1	; 0x01
    4396:	20 eb       	ldi	r18, 0xB0	; 176
    4398:	32 e0       	ldi	r19, 0x02	; 2
    439a:	69 2f       	mov	r22, r25
    439c:	a9 01       	movw	r20, r18
    439e:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8GetPinValue>
				if(Local_u8SwState == DIO_PIN_HIGH )
    43a2:	80 91 b0 02 	lds	r24, 0x02B0
    43a6:	81 30       	cpi	r24, 0x01	; 1
    43a8:	11 f5       	brne	.+68     	; 0x43ee <SW_u8GetState+0x33a>
				{
					*Copy_u8State = SW_PRESSED;
    43aa:	e8 a1       	ldd	r30, Y+32	; 0x20
    43ac:	f9 a1       	ldd	r31, Y+33	; 0x21
    43ae:	10 82       	st	Z, r1
    43b0:	1e c0       	rjmp	.+60     	; 0x43ee <SW_u8GetState+0x33a>
				}
			}
		}
		else if(Copy_SW->SelfLockType == SW_NOT_SELF_LOCK)
    43b2:	ee 8d       	ldd	r30, Y+30	; 0x1e
    43b4:	ff 8d       	ldd	r31, Y+31	; 0x1f
    43b6:	83 81       	ldd	r24, Z+3	; 0x03
    43b8:	88 23       	and	r24, r24
    43ba:	a1 f4       	brne	.+40     	; 0x43e4 <SW_u8GetState+0x330>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,Copy_u8State);
    43bc:	ee 8d       	ldd	r30, Y+30	; 0x1e
    43be:	ff 8d       	ldd	r31, Y+31	; 0x1f
    43c0:	80 81       	ld	r24, Z
    43c2:	ee 8d       	ldd	r30, Y+30	; 0x1e
    43c4:	ff 8d       	ldd	r31, Y+31	; 0x1f
    43c6:	91 81       	ldd	r25, Z+1	; 0x01
    43c8:	28 a1       	ldd	r18, Y+32	; 0x20
    43ca:	39 a1       	ldd	r19, Y+33	; 0x21
    43cc:	69 2f       	mov	r22, r25
    43ce:	a9 01       	movw	r20, r18
    43d0:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8GetPinValue>
			if (Local_u8SwState == DIO_PIN_HIGH)
    43d4:	80 91 b0 02 	lds	r24, 0x02B0
    43d8:	81 30       	cpi	r24, 0x01	; 1
    43da:	49 f4       	brne	.+18     	; 0x43ee <SW_u8GetState+0x33a>
				*Copy_u8State = SW_PRESSED;
    43dc:	e8 a1       	ldd	r30, Y+32	; 0x20
    43de:	f9 a1       	ldd	r31, Y+33	; 0x21
    43e0:	10 82       	st	Z, r1
    43e2:	05 c0       	rjmp	.+10     	; 0x43ee <SW_u8GetState+0x33a>
		}
		else
			Local_u8ErrorState = NOTOK;
    43e4:	81 e0       	ldi	r24, 0x01	; 1
    43e6:	8d 8f       	std	Y+29, r24	; 0x1d
    43e8:	02 c0       	rjmp	.+4      	; 0x43ee <SW_u8GetState+0x33a>
	}
	else
		Local_u8ErrorState = NOTOK;
    43ea:	81 e0       	ldi	r24, 0x01	; 1
    43ec:	8d 8f       	std	Y+29, r24	; 0x1d

	return Local_u8ErrorState;
    43ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    43f0:	a1 96       	adiw	r28, 0x21	; 33
    43f2:	0f b6       	in	r0, 0x3f	; 63
    43f4:	f8 94       	cli
    43f6:	de bf       	out	0x3e, r29	; 62
    43f8:	0f be       	out	0x3f, r0	; 63
    43fa:	cd bf       	out	0x3d, r28	; 61
    43fc:	cf 91       	pop	r28
    43fe:	df 91       	pop	r29
    4400:	08 95       	ret

00004402 <SW_u8GetState2>:
 * 			Copy_SW     : Full with Port,Pin,SelfType,switch function
 * 			Copy_u8State: return State of switch as (0) Pressed , (1) Not pressed
 * use for: Get Switch by Function Call Back i.e (switch function )
 *  */
u8 SW_u8GetState2(SW_t* Copy_SW,u8 *Copy_u8State)
{
    4402:	df 93       	push	r29
    4404:	cf 93       	push	r28
    4406:	00 d0       	rcall	.+0      	; 0x4408 <SW_u8GetState2+0x6>
    4408:	00 d0       	rcall	.+0      	; 0x440a <SW_u8GetState2+0x8>
    440a:	0f 92       	push	r0
    440c:	cd b7       	in	r28, 0x3d	; 61
    440e:	de b7       	in	r29, 0x3e	; 62
    4410:	9b 83       	std	Y+3, r25	; 0x03
    4412:	8a 83       	std	Y+2, r24	; 0x02
    4414:	7d 83       	std	Y+5, r23	; 0x05
    4416:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK;
    4418:	19 82       	std	Y+1, r1	; 0x01
	static u8 pressed_conf_level = 0;
	static u8 released_conf_level = 0;
	static u8 pressed = 0;
	*Copy_u8State = SW_NOT_PRESSED;
    441a:	ec 81       	ldd	r30, Y+4	; 0x04
    441c:	fd 81       	ldd	r31, Y+5	; 0x05
    441e:	81 e0       	ldi	r24, 0x01	; 1
    4420:	80 83       	st	Z, r24
	static u8 Local_u8SwState;
	if(Copy_SW->Pulltype == SW_PULL_UP)
    4422:	ea 81       	ldd	r30, Y+2	; 0x02
    4424:	fb 81       	ldd	r31, Y+3	; 0x03
    4426:	82 81       	ldd	r24, Z+2	; 0x02
    4428:	88 23       	and	r24, r24
    442a:	09 f0       	breq	.+2      	; 0x442e <SW_u8GetState2+0x2c>
    442c:	76 c0       	rjmp	.+236    	; 0x451a <SW_u8GetState2+0x118>
	{
		pressed = 0;
    442e:	10 92 b2 02 	sts	0x02B2, r1
		if(Copy_SW->SelfLockType == SW_SELF_LOCK)
    4432:	ea 81       	ldd	r30, Y+2	; 0x02
    4434:	fb 81       	ldd	r31, Y+3	; 0x03
    4436:	83 81       	ldd	r24, Z+3	; 0x03
    4438:	81 30       	cpi	r24, 0x01	; 1
    443a:	09 f0       	breq	.+2      	; 0x443e <SW_u8GetState2+0x3c>
    443c:	4d c0       	rjmp	.+154    	; 0x44d8 <SW_u8GetState2+0xd6>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    443e:	ea 81       	ldd	r30, Y+2	; 0x02
    4440:	fb 81       	ldd	r31, Y+3	; 0x03
    4442:	80 81       	ld	r24, Z
    4444:	ea 81       	ldd	r30, Y+2	; 0x02
    4446:	fb 81       	ldd	r31, Y+3	; 0x03
    4448:	91 81       	ldd	r25, Z+1	; 0x01
    444a:	21 eb       	ldi	r18, 0xB1	; 177
    444c:	32 e0       	ldi	r19, 0x02	; 2
    444e:	69 2f       	mov	r22, r25
    4450:	a9 01       	movw	r20, r18
    4452:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8GetPinValue>
			if(Local_u8SwState == DIO_PIN_LOW)
    4456:	80 91 b1 02 	lds	r24, 0x02B1
    445a:	88 23       	and	r24, r24
    445c:	09 f0       	breq	.+2      	; 0x4460 <SW_u8GetState2+0x5e>
    445e:	c4 c0       	rjmp	.+392    	; 0x45e8 <SW_u8GetState2+0x1e6>
			{
				DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    4460:	ea 81       	ldd	r30, Y+2	; 0x02
    4462:	fb 81       	ldd	r31, Y+3	; 0x03
    4464:	80 81       	ld	r24, Z
    4466:	ea 81       	ldd	r30, Y+2	; 0x02
    4468:	fb 81       	ldd	r31, Y+3	; 0x03
    446a:	91 81       	ldd	r25, Z+1	; 0x01
    446c:	21 eb       	ldi	r18, 0xB1	; 177
    446e:	32 e0       	ldi	r19, 0x02	; 2
    4470:	69 2f       	mov	r22, r25
    4472:	a9 01       	movw	r20, r18
    4474:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8GetPinValue>
				if(Local_u8SwState == DIO_PIN_LOW)
    4478:	80 91 b1 02 	lds	r24, 0x02B1
    447c:	88 23       	and	r24, r24
    447e:	09 f0       	breq	.+2      	; 0x4482 <SW_u8GetState2+0x80>
    4480:	b3 c0       	rjmp	.+358    	; 0x45e8 <SW_u8GetState2+0x1e6>
				{
					pressed_conf_level++;
    4482:	80 91 b4 02 	lds	r24, 0x02B4
    4486:	8f 5f       	subi	r24, 0xFF	; 255
    4488:	80 93 b4 02 	sts	0x02B4, r24
					if(pressed_conf_level>20)
    448c:	80 91 b4 02 	lds	r24, 0x02B4
    4490:	85 31       	cpi	r24, 0x15	; 21
    4492:	98 f0       	brcs	.+38     	; 0x44ba <SW_u8GetState2+0xb8>
					{
						if(pressed==0)
    4494:	80 91 b2 02 	lds	r24, 0x02B2
    4498:	88 23       	and	r24, r24
    449a:	61 f4       	brne	.+24     	; 0x44b4 <SW_u8GetState2+0xb2>
						{
							*Copy_u8State = SW_PRESSED;
    449c:	ec 81       	ldd	r30, Y+4	; 0x04
    449e:	fd 81       	ldd	r31, Y+5	; 0x05
    44a0:	10 82       	st	Z, r1
							Copy_SW->Notification();
    44a2:	ea 81       	ldd	r30, Y+2	; 0x02
    44a4:	fb 81       	ldd	r31, Y+3	; 0x03
    44a6:	04 80       	ldd	r0, Z+4	; 0x04
    44a8:	f5 81       	ldd	r31, Z+5	; 0x05
    44aa:	e0 2d       	mov	r30, r0
    44ac:	09 95       	icall
							pressed=1;
    44ae:	81 e0       	ldi	r24, 0x01	; 1
    44b0:	80 93 b2 02 	sts	0x02B2, r24
						}
						pressed_conf_level=0;
    44b4:	10 92 b4 02 	sts	0x02B4, r1
    44b8:	97 c0       	rjmp	.+302    	; 0x45e8 <SW_u8GetState2+0x1e6>
					}
					else
					{
						released_conf_level++;
    44ba:	80 91 b3 02 	lds	r24, 0x02B3
    44be:	8f 5f       	subi	r24, 0xFF	; 255
    44c0:	80 93 b3 02 	sts	0x02B3, r24
						if(released_conf_level>20)
    44c4:	80 91 b3 02 	lds	r24, 0x02B3
    44c8:	85 31       	cpi	r24, 0x15	; 21
    44ca:	08 f4       	brcc	.+2      	; 0x44ce <SW_u8GetState2+0xcc>
    44cc:	8d c0       	rjmp	.+282    	; 0x45e8 <SW_u8GetState2+0x1e6>
						{
							pressed = 0;
    44ce:	10 92 b2 02 	sts	0x02B2, r1
							released_conf_level = 0;
    44d2:	10 92 b3 02 	sts	0x02B3, r1
    44d6:	88 c0       	rjmp	.+272    	; 0x45e8 <SW_u8GetState2+0x1e6>
						}
					}
				}
			}
		}
		else if(Copy_SW->SelfLockType == SW_NOT_SELF_LOCK)
    44d8:	ea 81       	ldd	r30, Y+2	; 0x02
    44da:	fb 81       	ldd	r31, Y+3	; 0x03
    44dc:	83 81       	ldd	r24, Z+3	; 0x03
    44de:	88 23       	and	r24, r24
    44e0:	c9 f4       	brne	.+50     	; 0x4514 <SW_u8GetState2+0x112>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,Copy_u8State);
    44e2:	ea 81       	ldd	r30, Y+2	; 0x02
    44e4:	fb 81       	ldd	r31, Y+3	; 0x03
    44e6:	80 81       	ld	r24, Z
    44e8:	ea 81       	ldd	r30, Y+2	; 0x02
    44ea:	fb 81       	ldd	r31, Y+3	; 0x03
    44ec:	91 81       	ldd	r25, Z+1	; 0x01
    44ee:	2c 81       	ldd	r18, Y+4	; 0x04
    44f0:	3d 81       	ldd	r19, Y+5	; 0x05
    44f2:	69 2f       	mov	r22, r25
    44f4:	a9 01       	movw	r20, r18
    44f6:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8GetPinValue>
			if (Local_u8SwState == DIO_PIN_LOW)
    44fa:	80 91 b1 02 	lds	r24, 0x02B1
    44fe:	88 23       	and	r24, r24
    4500:	21 f4       	brne	.+8      	; 0x450a <SW_u8GetState2+0x108>
				*Copy_u8State = SW_PRESSED;
    4502:	ec 81       	ldd	r30, Y+4	; 0x04
    4504:	fd 81       	ldd	r31, Y+5	; 0x05
    4506:	10 82       	st	Z, r1
    4508:	6f c0       	rjmp	.+222    	; 0x45e8 <SW_u8GetState2+0x1e6>
			else
				*Copy_u8State = SW_NOT_PRESSED;
    450a:	ec 81       	ldd	r30, Y+4	; 0x04
    450c:	fd 81       	ldd	r31, Y+5	; 0x05
    450e:	81 e0       	ldi	r24, 0x01	; 1
    4510:	80 83       	st	Z, r24
    4512:	6a c0       	rjmp	.+212    	; 0x45e8 <SW_u8GetState2+0x1e6>
		}
		else
			Local_u8ErrorState = NOTOK;
    4514:	81 e0       	ldi	r24, 0x01	; 1
    4516:	89 83       	std	Y+1, r24	; 0x01
    4518:	67 c0       	rjmp	.+206    	; 0x45e8 <SW_u8GetState2+0x1e6>
	}
	else if(Copy_SW->Pulltype == SW_PULL_DOWN)
    451a:	ea 81       	ldd	r30, Y+2	; 0x02
    451c:	fb 81       	ldd	r31, Y+3	; 0x03
    451e:	82 81       	ldd	r24, Z+2	; 0x02
    4520:	81 30       	cpi	r24, 0x01	; 1
    4522:	09 f0       	breq	.+2      	; 0x4526 <SW_u8GetState2+0x124>
    4524:	5f c0       	rjmp	.+190    	; 0x45e4 <SW_u8GetState2+0x1e2>
	{
		pressed = 1;
    4526:	81 e0       	ldi	r24, 0x01	; 1
    4528:	80 93 b2 02 	sts	0x02B2, r24
		if(Copy_SW->SelfLockType == SW_SELF_LOCK)
    452c:	ea 81       	ldd	r30, Y+2	; 0x02
    452e:	fb 81       	ldd	r31, Y+3	; 0x03
    4530:	83 81       	ldd	r24, Z+3	; 0x03
    4532:	81 30       	cpi	r24, 0x01	; 1
    4534:	d9 f5       	brne	.+118    	; 0x45ac <SW_u8GetState2+0x1aa>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    4536:	ea 81       	ldd	r30, Y+2	; 0x02
    4538:	fb 81       	ldd	r31, Y+3	; 0x03
    453a:	80 81       	ld	r24, Z
    453c:	ea 81       	ldd	r30, Y+2	; 0x02
    453e:	fb 81       	ldd	r31, Y+3	; 0x03
    4540:	91 81       	ldd	r25, Z+1	; 0x01
    4542:	21 eb       	ldi	r18, 0xB1	; 177
    4544:	32 e0       	ldi	r19, 0x02	; 2
    4546:	69 2f       	mov	r22, r25
    4548:	a9 01       	movw	r20, r18
    454a:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8GetPinValue>
			if(Local_u8SwState == DIO_PIN_HIGH)
    454e:	80 91 b1 02 	lds	r24, 0x02B1
    4552:	81 30       	cpi	r24, 0x01	; 1
    4554:	09 f0       	breq	.+2      	; 0x4558 <SW_u8GetState2+0x156>
    4556:	48 c0       	rjmp	.+144    	; 0x45e8 <SW_u8GetState2+0x1e6>
			{
				pressed_conf_level++;
    4558:	80 91 b4 02 	lds	r24, 0x02B4
    455c:	8f 5f       	subi	r24, 0xFF	; 255
    455e:	80 93 b4 02 	sts	0x02B4, r24
				if(pressed_conf_level>20)
    4562:	80 91 b4 02 	lds	r24, 0x02B4
    4566:	85 31       	cpi	r24, 0x15	; 21
    4568:	90 f0       	brcs	.+36     	; 0x458e <SW_u8GetState2+0x18c>
				{
					if(pressed==1)
    456a:	80 91 b2 02 	lds	r24, 0x02B2
    456e:	81 30       	cpi	r24, 0x01	; 1
    4570:	59 f4       	brne	.+22     	; 0x4588 <SW_u8GetState2+0x186>
					{
						*Copy_u8State = SW_PRESSED;
    4572:	ec 81       	ldd	r30, Y+4	; 0x04
    4574:	fd 81       	ldd	r31, Y+5	; 0x05
    4576:	10 82       	st	Z, r1
						Copy_SW->Notification();
    4578:	ea 81       	ldd	r30, Y+2	; 0x02
    457a:	fb 81       	ldd	r31, Y+3	; 0x03
    457c:	04 80       	ldd	r0, Z+4	; 0x04
    457e:	f5 81       	ldd	r31, Z+5	; 0x05
    4580:	e0 2d       	mov	r30, r0
    4582:	09 95       	icall
						pressed=0;
    4584:	10 92 b2 02 	sts	0x02B2, r1
					}
					pressed_conf_level=0;
    4588:	10 92 b4 02 	sts	0x02B4, r1
    458c:	2d c0       	rjmp	.+90     	; 0x45e8 <SW_u8GetState2+0x1e6>
				}
				else
				{
					released_conf_level++;
    458e:	80 91 b3 02 	lds	r24, 0x02B3
    4592:	8f 5f       	subi	r24, 0xFF	; 255
    4594:	80 93 b3 02 	sts	0x02B3, r24
					if(released_conf_level>20)
    4598:	80 91 b3 02 	lds	r24, 0x02B3
    459c:	85 31       	cpi	r24, 0x15	; 21
    459e:	20 f1       	brcs	.+72     	; 0x45e8 <SW_u8GetState2+0x1e6>
					{
						pressed = 1;
    45a0:	81 e0       	ldi	r24, 0x01	; 1
    45a2:	80 93 b2 02 	sts	0x02B2, r24
						released_conf_level = 0;
    45a6:	10 92 b3 02 	sts	0x02B3, r1
    45aa:	1e c0       	rjmp	.+60     	; 0x45e8 <SW_u8GetState2+0x1e6>
					}
				}
			}
		}
		else if(Copy_SW->SelfLockType == SW_NOT_SELF_LOCK)
    45ac:	ea 81       	ldd	r30, Y+2	; 0x02
    45ae:	fb 81       	ldd	r31, Y+3	; 0x03
    45b0:	83 81       	ldd	r24, Z+3	; 0x03
    45b2:	88 23       	and	r24, r24
    45b4:	a1 f4       	brne	.+40     	; 0x45de <SW_u8GetState2+0x1dc>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,Copy_u8State);
    45b6:	ea 81       	ldd	r30, Y+2	; 0x02
    45b8:	fb 81       	ldd	r31, Y+3	; 0x03
    45ba:	80 81       	ld	r24, Z
    45bc:	ea 81       	ldd	r30, Y+2	; 0x02
    45be:	fb 81       	ldd	r31, Y+3	; 0x03
    45c0:	91 81       	ldd	r25, Z+1	; 0x01
    45c2:	2c 81       	ldd	r18, Y+4	; 0x04
    45c4:	3d 81       	ldd	r19, Y+5	; 0x05
    45c6:	69 2f       	mov	r22, r25
    45c8:	a9 01       	movw	r20, r18
    45ca:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8GetPinValue>
			if (Local_u8SwState == DIO_PIN_HIGH)
    45ce:	80 91 b1 02 	lds	r24, 0x02B1
    45d2:	81 30       	cpi	r24, 0x01	; 1
    45d4:	49 f4       	brne	.+18     	; 0x45e8 <SW_u8GetState2+0x1e6>
				*Copy_u8State = SW_PRESSED;
    45d6:	ec 81       	ldd	r30, Y+4	; 0x04
    45d8:	fd 81       	ldd	r31, Y+5	; 0x05
    45da:	10 82       	st	Z, r1
    45dc:	05 c0       	rjmp	.+10     	; 0x45e8 <SW_u8GetState2+0x1e6>
		}
		else
			Local_u8ErrorState = NOTOK;
    45de:	81 e0       	ldi	r24, 0x01	; 1
    45e0:	89 83       	std	Y+1, r24	; 0x01
    45e2:	02 c0       	rjmp	.+4      	; 0x45e8 <SW_u8GetState2+0x1e6>
	}
	else
		Local_u8ErrorState = NOTOK;
    45e4:	81 e0       	ldi	r24, 0x01	; 1
    45e6:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    45e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    45ea:	0f 90       	pop	r0
    45ec:	0f 90       	pop	r0
    45ee:	0f 90       	pop	r0
    45f0:	0f 90       	pop	r0
    45f2:	0f 90       	pop	r0
    45f4:	cf 91       	pop	r28
    45f6:	df 91       	pop	r29
    45f8:	08 95       	ret

000045fa <TIMER_voidInit>:
#include "../MCAL/TIMER_interface.h"
#include "../MCAL/TIMER_register.h"

static void (*TIMER_pvCallBackFunc[8])() = {NULL};
void TIMER_voidInit(Timer_t* Copy_Timer)
{
    45fa:	df 93       	push	r29
    45fc:	cf 93       	push	r28
    45fe:	cd b7       	in	r28, 0x3d	; 61
    4600:	de b7       	in	r29, 0x3e	; 62
    4602:	60 97       	sbiw	r28, 0x10	; 16
    4604:	0f b6       	in	r0, 0x3f	; 63
    4606:	f8 94       	cli
    4608:	de bf       	out	0x3e, r29	; 62
    460a:	0f be       	out	0x3f, r0	; 63
    460c:	cd bf       	out	0x3d, r28	; 61
    460e:	9a 83       	std	Y+2, r25	; 0x02
    4610:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_Timer->TimerNum)
    4612:	e9 81       	ldd	r30, Y+1	; 0x01
    4614:	fa 81       	ldd	r31, Y+2	; 0x02
    4616:	80 81       	ld	r24, Z
    4618:	28 2f       	mov	r18, r24
    461a:	30 e0       	ldi	r19, 0x00	; 0
    461c:	38 8b       	std	Y+16, r19	; 0x10
    461e:	2f 87       	std	Y+15, r18	; 0x0f
    4620:	8f 85       	ldd	r24, Y+15	; 0x0f
    4622:	98 89       	ldd	r25, Y+16	; 0x10
    4624:	81 30       	cpi	r24, 0x01	; 1
    4626:	91 05       	cpc	r25, r1
    4628:	09 f4       	brne	.+2      	; 0x462c <TIMER_voidInit+0x32>
    462a:	c1 c0       	rjmp	.+386    	; 0x47ae <TIMER_voidInit+0x1b4>
    462c:	2f 85       	ldd	r18, Y+15	; 0x0f
    462e:	38 89       	ldd	r19, Y+16	; 0x10
    4630:	22 30       	cpi	r18, 0x02	; 2
    4632:	31 05       	cpc	r19, r1
    4634:	09 f4       	brne	.+2      	; 0x4638 <TIMER_voidInit+0x3e>
    4636:	29 c1       	rjmp	.+594    	; 0x488a <TIMER_voidInit+0x290>
    4638:	8f 85       	ldd	r24, Y+15	; 0x0f
    463a:	98 89       	ldd	r25, Y+16	; 0x10
    463c:	00 97       	sbiw	r24, 0x00	; 0
    463e:	09 f0       	breq	.+2      	; 0x4642 <TIMER_voidInit+0x48>
    4640:	d9 c1       	rjmp	.+946    	; 0x49f4 <TIMER_voidInit+0x3fa>
	{
		case TIMER0:
		switch(Copy_Timer->TimerMode)
    4642:	e9 81       	ldd	r30, Y+1	; 0x01
    4644:	fa 81       	ldd	r31, Y+2	; 0x02
    4646:	81 81       	ldd	r24, Z+1	; 0x01
    4648:	28 2f       	mov	r18, r24
    464a:	30 e0       	ldi	r19, 0x00	; 0
    464c:	3e 87       	std	Y+14, r19	; 0x0e
    464e:	2d 87       	std	Y+13, r18	; 0x0d
    4650:	8d 85       	ldd	r24, Y+13	; 0x0d
    4652:	9e 85       	ldd	r25, Y+14	; 0x0e
    4654:	81 30       	cpi	r24, 0x01	; 1
    4656:	91 05       	cpc	r25, r1
    4658:	09 f4       	brne	.+2      	; 0x465c <TIMER_voidInit+0x62>
    465a:	4a c0       	rjmp	.+148    	; 0x46f0 <TIMER_voidInit+0xf6>
    465c:	2d 85       	ldd	r18, Y+13	; 0x0d
    465e:	3e 85       	ldd	r19, Y+14	; 0x0e
    4660:	22 30       	cpi	r18, 0x02	; 2
    4662:	31 05       	cpc	r19, r1
    4664:	2c f4       	brge	.+10     	; 0x4670 <TIMER_voidInit+0x76>
    4666:	8d 85       	ldd	r24, Y+13	; 0x0d
    4668:	9e 85       	ldd	r25, Y+14	; 0x0e
    466a:	00 97       	sbiw	r24, 0x00	; 0
    466c:	69 f0       	breq	.+26     	; 0x4688 <TIMER_voidInit+0x8e>
    466e:	73 c0       	rjmp	.+230    	; 0x4756 <TIMER_voidInit+0x15c>
    4670:	2d 85       	ldd	r18, Y+13	; 0x0d
    4672:	3e 85       	ldd	r19, Y+14	; 0x0e
    4674:	22 30       	cpi	r18, 0x02	; 2
    4676:	31 05       	cpc	r19, r1
    4678:	09 f4       	brne	.+2      	; 0x467c <TIMER_voidInit+0x82>
    467a:	5f c0       	rjmp	.+190    	; 0x473a <TIMER_voidInit+0x140>
    467c:	8d 85       	ldd	r24, Y+13	; 0x0d
    467e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4680:	83 30       	cpi	r24, 0x03	; 3
    4682:	91 05       	cpc	r25, r1
    4684:	31 f1       	breq	.+76     	; 0x46d2 <TIMER_voidInit+0xd8>
    4686:	67 c0       	rjmp	.+206    	; 0x4756 <TIMER_voidInit+0x15c>
		{
		case TIMER0_NORMAL:CLR_BIT(TCCR0,TCCR0_WGM01);CLR_BIT(TCCR0,TCCR0_WGM00);
    4688:	a3 e5       	ldi	r26, 0x53	; 83
    468a:	b0 e0       	ldi	r27, 0x00	; 0
    468c:	e3 e5       	ldi	r30, 0x53	; 83
    468e:	f0 e0       	ldi	r31, 0x00	; 0
    4690:	80 81       	ld	r24, Z
    4692:	87 7f       	andi	r24, 0xF7	; 247
    4694:	8c 93       	st	X, r24
    4696:	a3 e5       	ldi	r26, 0x53	; 83
    4698:	b0 e0       	ldi	r27, 0x00	; 0
    469a:	e3 e5       	ldi	r30, 0x53	; 83
    469c:	f0 e0       	ldi	r31, 0x00	; 0
    469e:	80 81       	ld	r24, Z
    46a0:	8f 7b       	andi	r24, 0xBF	; 191
    46a2:	8c 93       	st	X, r24
		Copy_Timer->IntEnable?SET_BIT(TIMSK,TIMSK_TOIE0):CLR_BIT(TIMSK,TIMSK_TOIE0);
    46a4:	e9 81       	ldd	r30, Y+1	; 0x01
    46a6:	fa 81       	ldd	r31, Y+2	; 0x02
    46a8:	84 81       	ldd	r24, Z+4	; 0x04
    46aa:	88 23       	and	r24, r24
    46ac:	49 f0       	breq	.+18     	; 0x46c0 <TIMER_voidInit+0xc6>
    46ae:	a9 e5       	ldi	r26, 0x59	; 89
    46b0:	b0 e0       	ldi	r27, 0x00	; 0
    46b2:	e9 e5       	ldi	r30, 0x59	; 89
    46b4:	f0 e0       	ldi	r31, 0x00	; 0
    46b6:	80 81       	ld	r24, Z
    46b8:	81 60       	ori	r24, 0x01	; 1
    46ba:	8c 93       	st	X, r24
    46bc:	9c 91       	ld	r25, X
    46be:	4b c0       	rjmp	.+150    	; 0x4756 <TIMER_voidInit+0x15c>
    46c0:	a9 e5       	ldi	r26, 0x59	; 89
    46c2:	b0 e0       	ldi	r27, 0x00	; 0
    46c4:	e9 e5       	ldi	r30, 0x59	; 89
    46c6:	f0 e0       	ldi	r31, 0x00	; 0
    46c8:	80 81       	ld	r24, Z
    46ca:	8e 7f       	andi	r24, 0xFE	; 254
    46cc:	8c 93       	st	X, r24
    46ce:	2c 91       	ld	r18, X
    46d0:	42 c0       	rjmp	.+132    	; 0x4756 <TIMER_voidInit+0x15c>
		break;
		case TIMER0_PHASE_CORRECT_PWM:CLR_BIT(TCCR0,TCCR0_WGM01);SET_BIT(TCCR0,TCCR0_WGM00);break;
    46d2:	a3 e5       	ldi	r26, 0x53	; 83
    46d4:	b0 e0       	ldi	r27, 0x00	; 0
    46d6:	e3 e5       	ldi	r30, 0x53	; 83
    46d8:	f0 e0       	ldi	r31, 0x00	; 0
    46da:	80 81       	ld	r24, Z
    46dc:	87 7f       	andi	r24, 0xF7	; 247
    46de:	8c 93       	st	X, r24
    46e0:	a3 e5       	ldi	r26, 0x53	; 83
    46e2:	b0 e0       	ldi	r27, 0x00	; 0
    46e4:	e3 e5       	ldi	r30, 0x53	; 83
    46e6:	f0 e0       	ldi	r31, 0x00	; 0
    46e8:	80 81       	ld	r24, Z
    46ea:	80 64       	ori	r24, 0x40	; 64
    46ec:	8c 93       	st	X, r24
    46ee:	33 c0       	rjmp	.+102    	; 0x4756 <TIMER_voidInit+0x15c>
		case TIMER0_CTC:SET_BIT(TCCR0,TCCR0_WGM01);CLR_BIT(TCCR0,TCCR0_WGM00);
    46f0:	a3 e5       	ldi	r26, 0x53	; 83
    46f2:	b0 e0       	ldi	r27, 0x00	; 0
    46f4:	e3 e5       	ldi	r30, 0x53	; 83
    46f6:	f0 e0       	ldi	r31, 0x00	; 0
    46f8:	80 81       	ld	r24, Z
    46fa:	88 60       	ori	r24, 0x08	; 8
    46fc:	8c 93       	st	X, r24
    46fe:	a3 e5       	ldi	r26, 0x53	; 83
    4700:	b0 e0       	ldi	r27, 0x00	; 0
    4702:	e3 e5       	ldi	r30, 0x53	; 83
    4704:	f0 e0       	ldi	r31, 0x00	; 0
    4706:	80 81       	ld	r24, Z
    4708:	8f 7b       	andi	r24, 0xBF	; 191
    470a:	8c 93       	st	X, r24
		Copy_Timer->IntEnable?SET_BIT(TIMSK,TIMSK_OCIE0):CLR_BIT(TIMSK,TIMSK_OCIE0);
    470c:	e9 81       	ldd	r30, Y+1	; 0x01
    470e:	fa 81       	ldd	r31, Y+2	; 0x02
    4710:	84 81       	ldd	r24, Z+4	; 0x04
    4712:	88 23       	and	r24, r24
    4714:	49 f0       	breq	.+18     	; 0x4728 <TIMER_voidInit+0x12e>
    4716:	a9 e5       	ldi	r26, 0x59	; 89
    4718:	b0 e0       	ldi	r27, 0x00	; 0
    471a:	e9 e5       	ldi	r30, 0x59	; 89
    471c:	f0 e0       	ldi	r31, 0x00	; 0
    471e:	80 81       	ld	r24, Z
    4720:	82 60       	ori	r24, 0x02	; 2
    4722:	8c 93       	st	X, r24
    4724:	3c 91       	ld	r19, X
    4726:	17 c0       	rjmp	.+46     	; 0x4756 <TIMER_voidInit+0x15c>
    4728:	a9 e5       	ldi	r26, 0x59	; 89
    472a:	b0 e0       	ldi	r27, 0x00	; 0
    472c:	e9 e5       	ldi	r30, 0x59	; 89
    472e:	f0 e0       	ldi	r31, 0x00	; 0
    4730:	80 81       	ld	r24, Z
    4732:	8d 7f       	andi	r24, 0xFD	; 253
    4734:	8c 93       	st	X, r24
    4736:	8c 91       	ld	r24, X
    4738:	0e c0       	rjmp	.+28     	; 0x4756 <TIMER_voidInit+0x15c>
		break;
		case  TIMER0_FAST_PWM:SET_BIT(TCCR0,TCCR0_WGM01);SET_BIT(TCCR0,TCCR0_WGM00);break;
    473a:	a3 e5       	ldi	r26, 0x53	; 83
    473c:	b0 e0       	ldi	r27, 0x00	; 0
    473e:	e3 e5       	ldi	r30, 0x53	; 83
    4740:	f0 e0       	ldi	r31, 0x00	; 0
    4742:	80 81       	ld	r24, Z
    4744:	88 60       	ori	r24, 0x08	; 8
    4746:	8c 93       	st	X, r24
    4748:	a3 e5       	ldi	r26, 0x53	; 83
    474a:	b0 e0       	ldi	r27, 0x00	; 0
    474c:	e3 e5       	ldi	r30, 0x53	; 83
    474e:	f0 e0       	ldi	r31, 0x00	; 0
    4750:	80 81       	ld	r24, Z
    4752:	80 64       	ori	r24, 0x40	; 64
    4754:	8c 93       	st	X, r24
		}
		TCCR0 &= MASK_COMP_MATCH_MODE;
    4756:	a3 e5       	ldi	r26, 0x53	; 83
    4758:	b0 e0       	ldi	r27, 0x00	; 0
    475a:	e3 e5       	ldi	r30, 0x53	; 83
    475c:	f0 e0       	ldi	r31, 0x00	; 0
    475e:	80 81       	ld	r24, Z
    4760:	8f 7c       	andi	r24, 0xCF	; 207
    4762:	8c 93       	st	X, r24
		TCCR0 |= Copy_Timer->CompOutMode<<TCCR0_COM00;
    4764:	a3 e5       	ldi	r26, 0x53	; 83
    4766:	b0 e0       	ldi	r27, 0x00	; 0
    4768:	e3 e5       	ldi	r30, 0x53	; 83
    476a:	f0 e0       	ldi	r31, 0x00	; 0
    476c:	80 81       	ld	r24, Z
    476e:	28 2f       	mov	r18, r24
    4770:	e9 81       	ldd	r30, Y+1	; 0x01
    4772:	fa 81       	ldd	r31, Y+2	; 0x02
    4774:	82 81       	ldd	r24, Z+2	; 0x02
    4776:	88 2f       	mov	r24, r24
    4778:	90 e0       	ldi	r25, 0x00	; 0
    477a:	82 95       	swap	r24
    477c:	92 95       	swap	r25
    477e:	90 7f       	andi	r25, 0xF0	; 240
    4780:	98 27       	eor	r25, r24
    4782:	80 7f       	andi	r24, 0xF0	; 240
    4784:	98 27       	eor	r25, r24
    4786:	82 2b       	or	r24, r18
    4788:	8c 93       	st	X, r24
		TCCR0 &= MASK_CLOCK_MODE;
    478a:	a3 e5       	ldi	r26, 0x53	; 83
    478c:	b0 e0       	ldi	r27, 0x00	; 0
    478e:	e3 e5       	ldi	r30, 0x53	; 83
    4790:	f0 e0       	ldi	r31, 0x00	; 0
    4792:	80 81       	ld	r24, Z
    4794:	88 7f       	andi	r24, 0xF8	; 248
    4796:	8c 93       	st	X, r24
		TCCR0 |= Copy_Timer->ClockSel<<TCCR0_CS00;
    4798:	a3 e5       	ldi	r26, 0x53	; 83
    479a:	b0 e0       	ldi	r27, 0x00	; 0
    479c:	e3 e5       	ldi	r30, 0x53	; 83
    479e:	f0 e0       	ldi	r31, 0x00	; 0
    47a0:	90 81       	ld	r25, Z
    47a2:	e9 81       	ldd	r30, Y+1	; 0x01
    47a4:	fa 81       	ldd	r31, Y+2	; 0x02
    47a6:	83 81       	ldd	r24, Z+3	; 0x03
    47a8:	89 2b       	or	r24, r25
    47aa:	8c 93       	st	X, r24
    47ac:	23 c1       	rjmp	.+582    	; 0x49f4 <TIMER_voidInit+0x3fa>
		break;
		case TIMER1:
			TCCR1A &= MASK_TIMER1A_MODE;
    47ae:	af e4       	ldi	r26, 0x4F	; 79
    47b0:	b0 e0       	ldi	r27, 0x00	; 0
    47b2:	ef e4       	ldi	r30, 0x4F	; 79
    47b4:	f0 e0       	ldi	r31, 0x00	; 0
    47b6:	80 81       	ld	r24, Z
    47b8:	8c 7f       	andi	r24, 0xFC	; 252
    47ba:	8c 93       	st	X, r24
			TCCR1A |= (Copy_Timer->TimerMode&(~(MASK_TIMER1A_MODE)));
    47bc:	af e4       	ldi	r26, 0x4F	; 79
    47be:	b0 e0       	ldi	r27, 0x00	; 0
    47c0:	ef e4       	ldi	r30, 0x4F	; 79
    47c2:	f0 e0       	ldi	r31, 0x00	; 0
    47c4:	80 81       	ld	r24, Z
    47c6:	98 2f       	mov	r25, r24
    47c8:	e9 81       	ldd	r30, Y+1	; 0x01
    47ca:	fa 81       	ldd	r31, Y+2	; 0x02
    47cc:	81 81       	ldd	r24, Z+1	; 0x01
    47ce:	83 70       	andi	r24, 0x03	; 3
    47d0:	89 2b       	or	r24, r25
    47d2:	8c 93       	st	X, r24
			TCCR1B &= MASK_TIMER1B_MODE;
    47d4:	ae e4       	ldi	r26, 0x4E	; 78
    47d6:	b0 e0       	ldi	r27, 0x00	; 0
    47d8:	ee e4       	ldi	r30, 0x4E	; 78
    47da:	f0 e0       	ldi	r31, 0x00	; 0
    47dc:	80 81       	ld	r24, Z
    47de:	87 7e       	andi	r24, 0xE7	; 231
    47e0:	8c 93       	st	X, r24
			TCCR1B |= ((Copy_Timer->TimerMode&(~(MASK_TIMER1B_MODE_VAL)))<<1);
    47e2:	ae e4       	ldi	r26, 0x4E	; 78
    47e4:	b0 e0       	ldi	r27, 0x00	; 0
    47e6:	ee e4       	ldi	r30, 0x4E	; 78
    47e8:	f0 e0       	ldi	r31, 0x00	; 0
    47ea:	80 81       	ld	r24, Z
    47ec:	28 2f       	mov	r18, r24
    47ee:	e9 81       	ldd	r30, Y+1	; 0x01
    47f0:	fa 81       	ldd	r31, Y+2	; 0x02
    47f2:	81 81       	ldd	r24, Z+1	; 0x01
    47f4:	88 2f       	mov	r24, r24
    47f6:	90 e0       	ldi	r25, 0x00	; 0
    47f8:	8c 70       	andi	r24, 0x0C	; 12
    47fa:	88 0f       	add	r24, r24
    47fc:	99 1f       	adc	r25, r25
    47fe:	82 2b       	or	r24, r18
    4800:	8c 93       	st	X, r24
			// set channel A , channel B
			TCCR1A &=MASK_COMP_MATCH1A_MODE;
    4802:	af e4       	ldi	r26, 0x4F	; 79
    4804:	b0 e0       	ldi	r27, 0x00	; 0
    4806:	ef e4       	ldi	r30, 0x4F	; 79
    4808:	f0 e0       	ldi	r31, 0x00	; 0
    480a:	80 81       	ld	r24, Z
    480c:	8f 70       	andi	r24, 0x0F	; 15
    480e:	8c 93       	st	X, r24
			TCCR1A |= Copy_Timer->CompOutMode<<TCCR1A_COM1B0;
    4810:	af e4       	ldi	r26, 0x4F	; 79
    4812:	b0 e0       	ldi	r27, 0x00	; 0
    4814:	ef e4       	ldi	r30, 0x4F	; 79
    4816:	f0 e0       	ldi	r31, 0x00	; 0
    4818:	80 81       	ld	r24, Z
    481a:	28 2f       	mov	r18, r24
    481c:	e9 81       	ldd	r30, Y+1	; 0x01
    481e:	fa 81       	ldd	r31, Y+2	; 0x02
    4820:	82 81       	ldd	r24, Z+2	; 0x02
    4822:	88 2f       	mov	r24, r24
    4824:	90 e0       	ldi	r25, 0x00	; 0
    4826:	82 95       	swap	r24
    4828:	92 95       	swap	r25
    482a:	90 7f       	andi	r25, 0xF0	; 240
    482c:	98 27       	eor	r25, r24
    482e:	80 7f       	andi	r24, 0xF0	; 240
    4830:	98 27       	eor	r25, r24
    4832:	82 2b       	or	r24, r18
    4834:	8c 93       	st	X, r24

			TCCR1B &= MASK_CLOCK_MODE;
    4836:	ae e4       	ldi	r26, 0x4E	; 78
    4838:	b0 e0       	ldi	r27, 0x00	; 0
    483a:	ee e4       	ldi	r30, 0x4E	; 78
    483c:	f0 e0       	ldi	r31, 0x00	; 0
    483e:	80 81       	ld	r24, Z
    4840:	88 7f       	andi	r24, 0xF8	; 248
    4842:	8c 93       	st	X, r24
			TCCR1B |= Copy_Timer->ClockSel<<TCCR1B_CS10;
    4844:	ae e4       	ldi	r26, 0x4E	; 78
    4846:	b0 e0       	ldi	r27, 0x00	; 0
    4848:	ee e4       	ldi	r30, 0x4E	; 78
    484a:	f0 e0       	ldi	r31, 0x00	; 0
    484c:	90 81       	ld	r25, Z
    484e:	e9 81       	ldd	r30, Y+1	; 0x01
    4850:	fa 81       	ldd	r31, Y+2	; 0x02
    4852:	83 81       	ldd	r24, Z+3	; 0x03
    4854:	89 2b       	or	r24, r25
    4856:	8c 93       	st	X, r24

			TIMSK &= MASK_TIMER1B_MODE;
    4858:	a9 e5       	ldi	r26, 0x59	; 89
    485a:	b0 e0       	ldi	r27, 0x00	; 0
    485c:	e9 e5       	ldi	r30, 0x59	; 89
    485e:	f0 e0       	ldi	r31, 0x00	; 0
    4860:	80 81       	ld	r24, Z
    4862:	87 7e       	andi	r24, 0xE7	; 231
    4864:	8c 93       	st	X, r24
			TIMSK |= Copy_Timer->IntEnable<<TIMSK_TOIE1;
    4866:	a9 e5       	ldi	r26, 0x59	; 89
    4868:	b0 e0       	ldi	r27, 0x00	; 0
    486a:	e9 e5       	ldi	r30, 0x59	; 89
    486c:	f0 e0       	ldi	r31, 0x00	; 0
    486e:	80 81       	ld	r24, Z
    4870:	28 2f       	mov	r18, r24
    4872:	e9 81       	ldd	r30, Y+1	; 0x01
    4874:	fa 81       	ldd	r31, Y+2	; 0x02
    4876:	84 81       	ldd	r24, Z+4	; 0x04
    4878:	88 2f       	mov	r24, r24
    487a:	90 e0       	ldi	r25, 0x00	; 0
    487c:	88 0f       	add	r24, r24
    487e:	99 1f       	adc	r25, r25
    4880:	88 0f       	add	r24, r24
    4882:	99 1f       	adc	r25, r25
    4884:	82 2b       	or	r24, r18
    4886:	8c 93       	st	X, r24
    4888:	b5 c0       	rjmp	.+362    	; 0x49f4 <TIMER_voidInit+0x3fa>
			break;
		case TIMER2:
			switch(Copy_Timer->TimerMode)
    488a:	e9 81       	ldd	r30, Y+1	; 0x01
    488c:	fa 81       	ldd	r31, Y+2	; 0x02
    488e:	81 81       	ldd	r24, Z+1	; 0x01
    4890:	28 2f       	mov	r18, r24
    4892:	30 e0       	ldi	r19, 0x00	; 0
    4894:	38 87       	std	Y+8, r19	; 0x08
    4896:	2f 83       	std	Y+7, r18	; 0x07
    4898:	8f 81       	ldd	r24, Y+7	; 0x07
    489a:	98 85       	ldd	r25, Y+8	; 0x08
    489c:	81 30       	cpi	r24, 0x01	; 1
    489e:	91 05       	cpc	r25, r1
    48a0:	09 f4       	brne	.+2      	; 0x48a4 <TIMER_voidInit+0x2aa>
    48a2:	4a c0       	rjmp	.+148    	; 0x4938 <TIMER_voidInit+0x33e>
    48a4:	2f 81       	ldd	r18, Y+7	; 0x07
    48a6:	38 85       	ldd	r19, Y+8	; 0x08
    48a8:	22 30       	cpi	r18, 0x02	; 2
    48aa:	31 05       	cpc	r19, r1
    48ac:	2c f4       	brge	.+10     	; 0x48b8 <TIMER_voidInit+0x2be>
    48ae:	8f 81       	ldd	r24, Y+7	; 0x07
    48b0:	98 85       	ldd	r25, Y+8	; 0x08
    48b2:	00 97       	sbiw	r24, 0x00	; 0
    48b4:	69 f0       	breq	.+26     	; 0x48d0 <TIMER_voidInit+0x2d6>
    48b6:	73 c0       	rjmp	.+230    	; 0x499e <TIMER_voidInit+0x3a4>
    48b8:	2f 81       	ldd	r18, Y+7	; 0x07
    48ba:	38 85       	ldd	r19, Y+8	; 0x08
    48bc:	22 30       	cpi	r18, 0x02	; 2
    48be:	31 05       	cpc	r19, r1
    48c0:	09 f4       	brne	.+2      	; 0x48c4 <TIMER_voidInit+0x2ca>
    48c2:	5f c0       	rjmp	.+190    	; 0x4982 <TIMER_voidInit+0x388>
    48c4:	8f 81       	ldd	r24, Y+7	; 0x07
    48c6:	98 85       	ldd	r25, Y+8	; 0x08
    48c8:	83 30       	cpi	r24, 0x03	; 3
    48ca:	91 05       	cpc	r25, r1
    48cc:	31 f1       	breq	.+76     	; 0x491a <TIMER_voidInit+0x320>
    48ce:	67 c0       	rjmp	.+206    	; 0x499e <TIMER_voidInit+0x3a4>
			{
			case TIMER2_NORMAL:CLR_BIT(TCCR2,TCCR2_WGM21);CLR_BIT(TCCR2,TCCR2_WGM20);
    48d0:	a5 e4       	ldi	r26, 0x45	; 69
    48d2:	b0 e0       	ldi	r27, 0x00	; 0
    48d4:	e5 e4       	ldi	r30, 0x45	; 69
    48d6:	f0 e0       	ldi	r31, 0x00	; 0
    48d8:	80 81       	ld	r24, Z
    48da:	87 7f       	andi	r24, 0xF7	; 247
    48dc:	8c 93       	st	X, r24
    48de:	a5 e4       	ldi	r26, 0x45	; 69
    48e0:	b0 e0       	ldi	r27, 0x00	; 0
    48e2:	e5 e4       	ldi	r30, 0x45	; 69
    48e4:	f0 e0       	ldi	r31, 0x00	; 0
    48e6:	80 81       	ld	r24, Z
    48e8:	8f 7b       	andi	r24, 0xBF	; 191
    48ea:	8c 93       	st	X, r24
			Copy_Timer->IntEnable?SET_BIT(TIMSK,TIMSK_TOIE2):CLR_BIT(TIMSK,TIMSK_TOIE2);
    48ec:	e9 81       	ldd	r30, Y+1	; 0x01
    48ee:	fa 81       	ldd	r31, Y+2	; 0x02
    48f0:	84 81       	ldd	r24, Z+4	; 0x04
    48f2:	88 23       	and	r24, r24
    48f4:	49 f0       	breq	.+18     	; 0x4908 <TIMER_voidInit+0x30e>
    48f6:	a9 e5       	ldi	r26, 0x59	; 89
    48f8:	b0 e0       	ldi	r27, 0x00	; 0
    48fa:	e9 e5       	ldi	r30, 0x59	; 89
    48fc:	f0 e0       	ldi	r31, 0x00	; 0
    48fe:	80 81       	ld	r24, Z
    4900:	80 64       	ori	r24, 0x40	; 64
    4902:	8c 93       	st	X, r24
    4904:	9c 91       	ld	r25, X
    4906:	4b c0       	rjmp	.+150    	; 0x499e <TIMER_voidInit+0x3a4>
    4908:	a9 e5       	ldi	r26, 0x59	; 89
    490a:	b0 e0       	ldi	r27, 0x00	; 0
    490c:	e9 e5       	ldi	r30, 0x59	; 89
    490e:	f0 e0       	ldi	r31, 0x00	; 0
    4910:	80 81       	ld	r24, Z
    4912:	8f 7b       	andi	r24, 0xBF	; 191
    4914:	8c 93       	st	X, r24
    4916:	2c 91       	ld	r18, X
    4918:	42 c0       	rjmp	.+132    	; 0x499e <TIMER_voidInit+0x3a4>
			break;
			case TIMER2_PHASE_CORRECT_PWM:CLR_BIT(TCCR2,TCCR2_WGM21);SET_BIT(TCCR2,TCCR2_WGM20);break;
    491a:	a5 e4       	ldi	r26, 0x45	; 69
    491c:	b0 e0       	ldi	r27, 0x00	; 0
    491e:	e5 e4       	ldi	r30, 0x45	; 69
    4920:	f0 e0       	ldi	r31, 0x00	; 0
    4922:	80 81       	ld	r24, Z
    4924:	87 7f       	andi	r24, 0xF7	; 247
    4926:	8c 93       	st	X, r24
    4928:	a5 e4       	ldi	r26, 0x45	; 69
    492a:	b0 e0       	ldi	r27, 0x00	; 0
    492c:	e5 e4       	ldi	r30, 0x45	; 69
    492e:	f0 e0       	ldi	r31, 0x00	; 0
    4930:	80 81       	ld	r24, Z
    4932:	80 64       	ori	r24, 0x40	; 64
    4934:	8c 93       	st	X, r24
    4936:	33 c0       	rjmp	.+102    	; 0x499e <TIMER_voidInit+0x3a4>
			case TIMER2_CTC:SET_BIT(TCCR2,TCCR2_WGM21);CLR_BIT(TCCR2,TCCR2_WGM20);
    4938:	a5 e4       	ldi	r26, 0x45	; 69
    493a:	b0 e0       	ldi	r27, 0x00	; 0
    493c:	e5 e4       	ldi	r30, 0x45	; 69
    493e:	f0 e0       	ldi	r31, 0x00	; 0
    4940:	80 81       	ld	r24, Z
    4942:	88 60       	ori	r24, 0x08	; 8
    4944:	8c 93       	st	X, r24
    4946:	a5 e4       	ldi	r26, 0x45	; 69
    4948:	b0 e0       	ldi	r27, 0x00	; 0
    494a:	e5 e4       	ldi	r30, 0x45	; 69
    494c:	f0 e0       	ldi	r31, 0x00	; 0
    494e:	80 81       	ld	r24, Z
    4950:	8f 7b       	andi	r24, 0xBF	; 191
    4952:	8c 93       	st	X, r24
			Copy_Timer->IntEnable?SET_BIT(TIMSK,TIMSK_OCIE2):CLR_BIT(TIMSK,TIMSK_OCIE2);
    4954:	e9 81       	ldd	r30, Y+1	; 0x01
    4956:	fa 81       	ldd	r31, Y+2	; 0x02
    4958:	84 81       	ldd	r24, Z+4	; 0x04
    495a:	88 23       	and	r24, r24
    495c:	49 f0       	breq	.+18     	; 0x4970 <TIMER_voidInit+0x376>
    495e:	a9 e5       	ldi	r26, 0x59	; 89
    4960:	b0 e0       	ldi	r27, 0x00	; 0
    4962:	e9 e5       	ldi	r30, 0x59	; 89
    4964:	f0 e0       	ldi	r31, 0x00	; 0
    4966:	80 81       	ld	r24, Z
    4968:	80 68       	ori	r24, 0x80	; 128
    496a:	8c 93       	st	X, r24
    496c:	3c 91       	ld	r19, X
    496e:	17 c0       	rjmp	.+46     	; 0x499e <TIMER_voidInit+0x3a4>
    4970:	a9 e5       	ldi	r26, 0x59	; 89
    4972:	b0 e0       	ldi	r27, 0x00	; 0
    4974:	e9 e5       	ldi	r30, 0x59	; 89
    4976:	f0 e0       	ldi	r31, 0x00	; 0
    4978:	80 81       	ld	r24, Z
    497a:	8f 77       	andi	r24, 0x7F	; 127
    497c:	8c 93       	st	X, r24
    497e:	8c 91       	ld	r24, X
    4980:	0e c0       	rjmp	.+28     	; 0x499e <TIMER_voidInit+0x3a4>
			break;
			case  TIMER2_FAST_PWM:SET_BIT(TCCR2,TCCR2_WGM21);SET_BIT(TCCR2,TCCR2_WGM20);break;
    4982:	a5 e4       	ldi	r26, 0x45	; 69
    4984:	b0 e0       	ldi	r27, 0x00	; 0
    4986:	e5 e4       	ldi	r30, 0x45	; 69
    4988:	f0 e0       	ldi	r31, 0x00	; 0
    498a:	80 81       	ld	r24, Z
    498c:	88 60       	ori	r24, 0x08	; 8
    498e:	8c 93       	st	X, r24
    4990:	a5 e4       	ldi	r26, 0x45	; 69
    4992:	b0 e0       	ldi	r27, 0x00	; 0
    4994:	e5 e4       	ldi	r30, 0x45	; 69
    4996:	f0 e0       	ldi	r31, 0x00	; 0
    4998:	80 81       	ld	r24, Z
    499a:	80 64       	ori	r24, 0x40	; 64
    499c:	8c 93       	st	X, r24
			}
			TCCR2 &= MASK_COMP_MATCH_MODE;
    499e:	a5 e4       	ldi	r26, 0x45	; 69
    49a0:	b0 e0       	ldi	r27, 0x00	; 0
    49a2:	e5 e4       	ldi	r30, 0x45	; 69
    49a4:	f0 e0       	ldi	r31, 0x00	; 0
    49a6:	80 81       	ld	r24, Z
    49a8:	8f 7c       	andi	r24, 0xCF	; 207
    49aa:	8c 93       	st	X, r24
			TCCR2 |= Copy_Timer->CompOutMode<<TCCR2_COM20;
    49ac:	a5 e4       	ldi	r26, 0x45	; 69
    49ae:	b0 e0       	ldi	r27, 0x00	; 0
    49b0:	e5 e4       	ldi	r30, 0x45	; 69
    49b2:	f0 e0       	ldi	r31, 0x00	; 0
    49b4:	80 81       	ld	r24, Z
    49b6:	28 2f       	mov	r18, r24
    49b8:	e9 81       	ldd	r30, Y+1	; 0x01
    49ba:	fa 81       	ldd	r31, Y+2	; 0x02
    49bc:	82 81       	ldd	r24, Z+2	; 0x02
    49be:	88 2f       	mov	r24, r24
    49c0:	90 e0       	ldi	r25, 0x00	; 0
    49c2:	82 95       	swap	r24
    49c4:	92 95       	swap	r25
    49c6:	90 7f       	andi	r25, 0xF0	; 240
    49c8:	98 27       	eor	r25, r24
    49ca:	80 7f       	andi	r24, 0xF0	; 240
    49cc:	98 27       	eor	r25, r24
    49ce:	82 2b       	or	r24, r18
    49d0:	8c 93       	st	X, r24
			TCCR2 &= MASK_CLOCK_MODE;
    49d2:	a5 e4       	ldi	r26, 0x45	; 69
    49d4:	b0 e0       	ldi	r27, 0x00	; 0
    49d6:	e5 e4       	ldi	r30, 0x45	; 69
    49d8:	f0 e0       	ldi	r31, 0x00	; 0
    49da:	80 81       	ld	r24, Z
    49dc:	88 7f       	andi	r24, 0xF8	; 248
    49de:	8c 93       	st	X, r24
			TCCR2 |= Copy_Timer->ClockSel<<TCCR2_CS20;
    49e0:	a5 e4       	ldi	r26, 0x45	; 69
    49e2:	b0 e0       	ldi	r27, 0x00	; 0
    49e4:	e5 e4       	ldi	r30, 0x45	; 69
    49e6:	f0 e0       	ldi	r31, 0x00	; 0
    49e8:	90 81       	ld	r25, Z
    49ea:	e9 81       	ldd	r30, Y+1	; 0x01
    49ec:	fa 81       	ldd	r31, Y+2	; 0x02
    49ee:	83 81       	ldd	r24, Z+3	; 0x03
    49f0:	89 2b       	or	r24, r25
    49f2:	8c 93       	st	X, r24
			break;
	}

}
    49f4:	60 96       	adiw	r28, 0x10	; 16
    49f6:	0f b6       	in	r0, 0x3f	; 63
    49f8:	f8 94       	cli
    49fa:	de bf       	out	0x3e, r29	; 62
    49fc:	0f be       	out	0x3f, r0	; 63
    49fe:	cd bf       	out	0x3d, r28	; 61
    4a00:	cf 91       	pop	r28
    4a02:	df 91       	pop	r29
    4a04:	08 95       	ret

00004a06 <TIMER0_voidCompOutModeChange>:
void TIMER0_voidCompOutModeChange(Timer_t *Copy_Timer)
{
    4a06:	df 93       	push	r29
    4a08:	cf 93       	push	r28
    4a0a:	00 d0       	rcall	.+0      	; 0x4a0c <TIMER0_voidCompOutModeChange+0x6>
    4a0c:	cd b7       	in	r28, 0x3d	; 61
    4a0e:	de b7       	in	r29, 0x3e	; 62
    4a10:	9a 83       	std	Y+2, r25	; 0x02
    4a12:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &= MASK_COMP_MATCH_MODE;
    4a14:	a3 e5       	ldi	r26, 0x53	; 83
    4a16:	b0 e0       	ldi	r27, 0x00	; 0
    4a18:	e3 e5       	ldi	r30, 0x53	; 83
    4a1a:	f0 e0       	ldi	r31, 0x00	; 0
    4a1c:	80 81       	ld	r24, Z
    4a1e:	8f 7c       	andi	r24, 0xCF	; 207
    4a20:	8c 93       	st	X, r24
	TCCR0 |= Copy_Timer->CompOutMode<<TCCR0_COM00;
    4a22:	a3 e5       	ldi	r26, 0x53	; 83
    4a24:	b0 e0       	ldi	r27, 0x00	; 0
    4a26:	e3 e5       	ldi	r30, 0x53	; 83
    4a28:	f0 e0       	ldi	r31, 0x00	; 0
    4a2a:	80 81       	ld	r24, Z
    4a2c:	28 2f       	mov	r18, r24
    4a2e:	e9 81       	ldd	r30, Y+1	; 0x01
    4a30:	fa 81       	ldd	r31, Y+2	; 0x02
    4a32:	82 81       	ldd	r24, Z+2	; 0x02
    4a34:	88 2f       	mov	r24, r24
    4a36:	90 e0       	ldi	r25, 0x00	; 0
    4a38:	82 95       	swap	r24
    4a3a:	92 95       	swap	r25
    4a3c:	90 7f       	andi	r25, 0xF0	; 240
    4a3e:	98 27       	eor	r25, r24
    4a40:	80 7f       	andi	r24, 0xF0	; 240
    4a42:	98 27       	eor	r25, r24
    4a44:	82 2b       	or	r24, r18
    4a46:	8c 93       	st	X, r24
}
    4a48:	0f 90       	pop	r0
    4a4a:	0f 90       	pop	r0
    4a4c:	cf 91       	pop	r28
    4a4e:	df 91       	pop	r29
    4a50:	08 95       	ret

00004a52 <TIMER0_voidSetPreloadValue>:
void TIMER0_voidSetPreloadValue(u8 Copy_u8PreloadValue)
{
    4a52:	df 93       	push	r29
    4a54:	cf 93       	push	r28
    4a56:	0f 92       	push	r0
    4a58:	cd b7       	in	r28, 0x3d	; 61
    4a5a:	de b7       	in	r29, 0x3e	; 62
    4a5c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8PreloadValue;
    4a5e:	e2 e5       	ldi	r30, 0x52	; 82
    4a60:	f0 e0       	ldi	r31, 0x00	; 0
    4a62:	89 81       	ldd	r24, Y+1	; 0x01
    4a64:	80 83       	st	Z, r24
}
    4a66:	0f 90       	pop	r0
    4a68:	cf 91       	pop	r28
    4a6a:	df 91       	pop	r29
    4a6c:	08 95       	ret

00004a6e <TIMER0_voidSetCompMatchValue>:

void TIMER0_voidSetCompMatchValue(u8 Copy_u8CompVal)
{
    4a6e:	df 93       	push	r29
    4a70:	cf 93       	push	r28
    4a72:	0f 92       	push	r0
    4a74:	cd b7       	in	r28, 0x3d	; 61
    4a76:	de b7       	in	r29, 0x3e	; 62
    4a78:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CompVal;
    4a7a:	ec e5       	ldi	r30, 0x5C	; 92
    4a7c:	f0 e0       	ldi	r31, 0x00	; 0
    4a7e:	89 81       	ldd	r24, Y+1	; 0x01
    4a80:	80 83       	st	Z, r24
}
    4a82:	0f 90       	pop	r0
    4a84:	cf 91       	pop	r28
    4a86:	df 91       	pop	r29
    4a88:	08 95       	ret

00004a8a <TIMER0_u8SetCallBack>:

u8 TIMER0_u8SetCallBack(Timer_t *Copy_Timer,void (*Notifiction)())
{
    4a8a:	df 93       	push	r29
    4a8c:	cf 93       	push	r28
    4a8e:	cd b7       	in	r28, 0x3d	; 61
    4a90:	de b7       	in	r29, 0x3e	; 62
    4a92:	27 97       	sbiw	r28, 0x07	; 7
    4a94:	0f b6       	in	r0, 0x3f	; 63
    4a96:	f8 94       	cli
    4a98:	de bf       	out	0x3e, r29	; 62
    4a9a:	0f be       	out	0x3f, r0	; 63
    4a9c:	cd bf       	out	0x3d, r28	; 61
    4a9e:	9b 83       	std	Y+3, r25	; 0x03
    4aa0:	8a 83       	std	Y+2, r24	; 0x02
    4aa2:	7d 83       	std	Y+5, r23	; 0x05
    4aa4:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK;
    4aa6:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_Timer!=NULL)||(Notifiction !=NULL))
    4aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    4aaa:	9b 81       	ldd	r25, Y+3	; 0x03
    4aac:	00 97       	sbiw	r24, 0x00	; 0
    4aae:	21 f4       	brne	.+8      	; 0x4ab8 <TIMER0_u8SetCallBack+0x2e>
    4ab0:	8c 81       	ldd	r24, Y+4	; 0x04
    4ab2:	9d 81       	ldd	r25, Y+5	; 0x05
    4ab4:	00 97       	sbiw	r24, 0x00	; 0
    4ab6:	f9 f0       	breq	.+62     	; 0x4af6 <TIMER0_u8SetCallBack+0x6c>
	{

		switch(Copy_Timer->TimerMode)
    4ab8:	ea 81       	ldd	r30, Y+2	; 0x02
    4aba:	fb 81       	ldd	r31, Y+3	; 0x03
    4abc:	81 81       	ldd	r24, Z+1	; 0x01
    4abe:	28 2f       	mov	r18, r24
    4ac0:	30 e0       	ldi	r19, 0x00	; 0
    4ac2:	3f 83       	std	Y+7, r19	; 0x07
    4ac4:	2e 83       	std	Y+6, r18	; 0x06
    4ac6:	8e 81       	ldd	r24, Y+6	; 0x06
    4ac8:	9f 81       	ldd	r25, Y+7	; 0x07
    4aca:	00 97       	sbiw	r24, 0x00	; 0
    4acc:	31 f0       	breq	.+12     	; 0x4ada <TIMER0_u8SetCallBack+0x50>
    4ace:	2e 81       	ldd	r18, Y+6	; 0x06
    4ad0:	3f 81       	ldd	r19, Y+7	; 0x07
    4ad2:	21 30       	cpi	r18, 0x01	; 1
    4ad4:	31 05       	cpc	r19, r1
    4ad6:	41 f0       	breq	.+16     	; 0x4ae8 <TIMER0_u8SetCallBack+0x5e>
    4ad8:	10 c0       	rjmp	.+32     	; 0x4afa <TIMER0_u8SetCallBack+0x70>
		{
		case TIMER0_NORMAL:TIMER_pvCallBackFunc[TIMER0_OVF] = Notifiction;
    4ada:	8c 81       	ldd	r24, Y+4	; 0x04
    4adc:	9d 81       	ldd	r25, Y+5	; 0x05
    4ade:	90 93 b6 02 	sts	0x02B6, r25
    4ae2:	80 93 b5 02 	sts	0x02B5, r24
    4ae6:	09 c0       	rjmp	.+18     	; 0x4afa <TIMER0_u8SetCallBack+0x70>
		break;
		case TIMER0_CTC:TIMER_pvCallBackFunc[TIMER0_CMV] = Notifiction;
    4ae8:	8c 81       	ldd	r24, Y+4	; 0x04
    4aea:	9d 81       	ldd	r25, Y+5	; 0x05
    4aec:	90 93 b8 02 	sts	0x02B8, r25
    4af0:	80 93 b7 02 	sts	0x02B7, r24
    4af4:	02 c0       	rjmp	.+4      	; 0x4afa <TIMER0_u8SetCallBack+0x70>
		break;
		}

	}
	else
		Local_u8ErrorState = NULL_POINTER;
    4af6:	82 e0       	ldi	r24, 0x02	; 2
    4af8:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    4afa:	89 81       	ldd	r24, Y+1	; 0x01
}
    4afc:	27 96       	adiw	r28, 0x07	; 7
    4afe:	0f b6       	in	r0, 0x3f	; 63
    4b00:	f8 94       	cli
    4b02:	de bf       	out	0x3e, r29	; 62
    4b04:	0f be       	out	0x3f, r0	; 63
    4b06:	cd bf       	out	0x3d, r28	; 61
    4b08:	cf 91       	pop	r28
    4b0a:	df 91       	pop	r29
    4b0c:	08 95       	ret

00004b0e <TIMER1_voidCompOutModeChange>:
	TIMER_voidInit(&t0);
	TIMER0_voidSetCompMatchValue((u8)((256UL*Copy_u8DutyCycle)/100UL));
}
*/
void TIMER1_voidCompOutModeChange(Timer_t *Copy_Timer)
{
    4b0e:	df 93       	push	r29
    4b10:	cf 93       	push	r28
    4b12:	00 d0       	rcall	.+0      	; 0x4b14 <TIMER1_voidCompOutModeChange+0x6>
    4b14:	cd b7       	in	r28, 0x3d	; 61
    4b16:	de b7       	in	r29, 0x3e	; 62
    4b18:	9a 83       	std	Y+2, r25	; 0x02
    4b1a:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A &=MASK_COMP_MATCH1A_MODE;
    4b1c:	af e4       	ldi	r26, 0x4F	; 79
    4b1e:	b0 e0       	ldi	r27, 0x00	; 0
    4b20:	ef e4       	ldi	r30, 0x4F	; 79
    4b22:	f0 e0       	ldi	r31, 0x00	; 0
    4b24:	80 81       	ld	r24, Z
    4b26:	8f 70       	andi	r24, 0x0F	; 15
    4b28:	8c 93       	st	X, r24
	TCCR1A |= Copy_Timer->CompOutMode<<TCCR1A_COM1B0;
    4b2a:	af e4       	ldi	r26, 0x4F	; 79
    4b2c:	b0 e0       	ldi	r27, 0x00	; 0
    4b2e:	ef e4       	ldi	r30, 0x4F	; 79
    4b30:	f0 e0       	ldi	r31, 0x00	; 0
    4b32:	80 81       	ld	r24, Z
    4b34:	28 2f       	mov	r18, r24
    4b36:	e9 81       	ldd	r30, Y+1	; 0x01
    4b38:	fa 81       	ldd	r31, Y+2	; 0x02
    4b3a:	82 81       	ldd	r24, Z+2	; 0x02
    4b3c:	88 2f       	mov	r24, r24
    4b3e:	90 e0       	ldi	r25, 0x00	; 0
    4b40:	82 95       	swap	r24
    4b42:	92 95       	swap	r25
    4b44:	90 7f       	andi	r25, 0xF0	; 240
    4b46:	98 27       	eor	r25, r24
    4b48:	80 7f       	andi	r24, 0xF0	; 240
    4b4a:	98 27       	eor	r25, r24
    4b4c:	82 2b       	or	r24, r18
    4b4e:	8c 93       	st	X, r24
}
    4b50:	0f 90       	pop	r0
    4b52:	0f 90       	pop	r0
    4b54:	cf 91       	pop	r28
    4b56:	df 91       	pop	r29
    4b58:	08 95       	ret

00004b5a <TIMER1_voidSetICR>:

void TIMER1_voidSetICR(u16 Copy_u16Top)
{
    4b5a:	df 93       	push	r29
    4b5c:	cf 93       	push	r28
    4b5e:	00 d0       	rcall	.+0      	; 0x4b60 <TIMER1_voidSetICR+0x6>
    4b60:	cd b7       	in	r28, 0x3d	; 61
    4b62:	de b7       	in	r29, 0x3e	; 62
    4b64:	9a 83       	std	Y+2, r25	; 0x02
    4b66:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16Top;
    4b68:	e6 e4       	ldi	r30, 0x46	; 70
    4b6a:	f0 e0       	ldi	r31, 0x00	; 0
    4b6c:	89 81       	ldd	r24, Y+1	; 0x01
    4b6e:	9a 81       	ldd	r25, Y+2	; 0x02
    4b70:	91 83       	std	Z+1, r25	; 0x01
    4b72:	80 83       	st	Z, r24
}
    4b74:	0f 90       	pop	r0
    4b76:	0f 90       	pop	r0
    4b78:	cf 91       	pop	r28
    4b7a:	df 91       	pop	r29
    4b7c:	08 95       	ret

00004b7e <TIMER1_voidSetPreloadValue>:
void TIMER1_voidSetPreloadValue(u16 Copy_u16PreloadValue)
{
    4b7e:	df 93       	push	r29
    4b80:	cf 93       	push	r28
    4b82:	00 d0       	rcall	.+0      	; 0x4b84 <TIMER1_voidSetPreloadValue+0x6>
    4b84:	cd b7       	in	r28, 0x3d	; 61
    4b86:	de b7       	in	r29, 0x3e	; 62
    4b88:	9a 83       	std	Y+2, r25	; 0x02
    4b8a:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16PreloadValue;
    4b8c:	ec e4       	ldi	r30, 0x4C	; 76
    4b8e:	f0 e0       	ldi	r31, 0x00	; 0
    4b90:	89 81       	ldd	r24, Y+1	; 0x01
    4b92:	9a 81       	ldd	r25, Y+2	; 0x02
    4b94:	91 83       	std	Z+1, r25	; 0x01
    4b96:	80 83       	st	Z, r24
}
    4b98:	0f 90       	pop	r0
    4b9a:	0f 90       	pop	r0
    4b9c:	cf 91       	pop	r28
    4b9e:	df 91       	pop	r29
    4ba0:	08 95       	ret

00004ba2 <TIMER1_voidSetChannelACompMatch>:

void TIMER1_voidSetChannelACompMatch(u16 Copy_u16CompVal)
{
    4ba2:	df 93       	push	r29
    4ba4:	cf 93       	push	r28
    4ba6:	00 d0       	rcall	.+0      	; 0x4ba8 <TIMER1_voidSetChannelACompMatch+0x6>
    4ba8:	cd b7       	in	r28, 0x3d	; 61
    4baa:	de b7       	in	r29, 0x3e	; 62
    4bac:	9a 83       	std	Y+2, r25	; 0x02
    4bae:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompVal;
    4bb0:	ea e4       	ldi	r30, 0x4A	; 74
    4bb2:	f0 e0       	ldi	r31, 0x00	; 0
    4bb4:	89 81       	ldd	r24, Y+1	; 0x01
    4bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    4bb8:	91 83       	std	Z+1, r25	; 0x01
    4bba:	80 83       	st	Z, r24
}
    4bbc:	0f 90       	pop	r0
    4bbe:	0f 90       	pop	r0
    4bc0:	cf 91       	pop	r28
    4bc2:	df 91       	pop	r29
    4bc4:	08 95       	ret

00004bc6 <TIMER1_voidSetChannelBCompMatch>:
void TIMER1_voidSetChannelBCompMatch(u16 Copy_u16CompVal)
{
    4bc6:	df 93       	push	r29
    4bc8:	cf 93       	push	r28
    4bca:	00 d0       	rcall	.+0      	; 0x4bcc <TIMER1_voidSetChannelBCompMatch+0x6>
    4bcc:	cd b7       	in	r28, 0x3d	; 61
    4bce:	de b7       	in	r29, 0x3e	; 62
    4bd0:	9a 83       	std	Y+2, r25	; 0x02
    4bd2:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Copy_u16CompVal;
    4bd4:	e8 e4       	ldi	r30, 0x48	; 72
    4bd6:	f0 e0       	ldi	r31, 0x00	; 0
    4bd8:	89 81       	ldd	r24, Y+1	; 0x01
    4bda:	9a 81       	ldd	r25, Y+2	; 0x02
    4bdc:	91 83       	std	Z+1, r25	; 0x01
    4bde:	80 83       	st	Z, r24
}
    4be0:	0f 90       	pop	r0
    4be2:	0f 90       	pop	r0
    4be4:	cf 91       	pop	r28
    4be6:	df 91       	pop	r29
    4be8:	08 95       	ret

00004bea <TIMER1_u8SetCallBack>:
u8 TIMER1_u8SetCallBack(Timer_t *Copy_Timer,void(*Notifiction)())
{
    4bea:	df 93       	push	r29
    4bec:	cf 93       	push	r28
    4bee:	cd b7       	in	r28, 0x3d	; 61
    4bf0:	de b7       	in	r29, 0x3e	; 62
    4bf2:	29 97       	sbiw	r28, 0x09	; 9
    4bf4:	0f b6       	in	r0, 0x3f	; 63
    4bf6:	f8 94       	cli
    4bf8:	de bf       	out	0x3e, r29	; 62
    4bfa:	0f be       	out	0x3f, r0	; 63
    4bfc:	cd bf       	out	0x3d, r28	; 61
    4bfe:	9b 83       	std	Y+3, r25	; 0x03
    4c00:	8a 83       	std	Y+2, r24	; 0x02
    4c02:	7d 83       	std	Y+5, r23	; 0x05
    4c04:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK;
    4c06:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_Timer!=NULL)||(Notifiction !=NULL))
    4c08:	8a 81       	ldd	r24, Y+2	; 0x02
    4c0a:	9b 81       	ldd	r25, Y+3	; 0x03
    4c0c:	00 97       	sbiw	r24, 0x00	; 0
    4c0e:	29 f4       	brne	.+10     	; 0x4c1a <TIMER1_u8SetCallBack+0x30>
    4c10:	8c 81       	ldd	r24, Y+4	; 0x04
    4c12:	9d 81       	ldd	r25, Y+5	; 0x05
    4c14:	00 97       	sbiw	r24, 0x00	; 0
    4c16:	09 f4       	brne	.+2      	; 0x4c1a <TIMER1_u8SetCallBack+0x30>
    4c18:	5b c0       	rjmp	.+182    	; 0x4cd0 <TIMER1_u8SetCallBack+0xe6>
	{
		switch(Copy_Timer->TimerMode)
    4c1a:	ea 81       	ldd	r30, Y+2	; 0x02
    4c1c:	fb 81       	ldd	r31, Y+3	; 0x03
    4c1e:	81 81       	ldd	r24, Z+1	; 0x01
    4c20:	28 2f       	mov	r18, r24
    4c22:	30 e0       	ldi	r19, 0x00	; 0
    4c24:	39 87       	std	Y+9, r19	; 0x09
    4c26:	28 87       	std	Y+8, r18	; 0x08
    4c28:	88 85       	ldd	r24, Y+8	; 0x08
    4c2a:	99 85       	ldd	r25, Y+9	; 0x09
    4c2c:	84 30       	cpi	r24, 0x04	; 4
    4c2e:	91 05       	cpc	r25, r1
    4c30:	91 f0       	breq	.+36     	; 0x4c56 <TIMER1_u8SetCallBack+0x6c>
    4c32:	28 85       	ldd	r18, Y+8	; 0x08
    4c34:	39 85       	ldd	r19, Y+9	; 0x09
    4c36:	2c 30       	cpi	r18, 0x0C	; 12
    4c38:	31 05       	cpc	r19, r1
    4c3a:	09 f4       	brne	.+2      	; 0x4c3e <TIMER1_u8SetCallBack+0x54>
    4c3c:	42 c0       	rjmp	.+132    	; 0x4cc2 <TIMER1_u8SetCallBack+0xd8>
    4c3e:	88 85       	ldd	r24, Y+8	; 0x08
    4c40:	99 85       	ldd	r25, Y+9	; 0x09
    4c42:	00 97       	sbiw	r24, 0x00	; 0
    4c44:	09 f0       	breq	.+2      	; 0x4c48 <TIMER1_u8SetCallBack+0x5e>
    4c46:	46 c0       	rjmp	.+140    	; 0x4cd4 <TIMER1_u8SetCallBack+0xea>
		{
		case TIMER1_NORMAL:TIMER_pvCallBackFunc[TIMER1_OVF] = Notifiction;
    4c48:	8c 81       	ldd	r24, Y+4	; 0x04
    4c4a:	9d 81       	ldd	r25, Y+5	; 0x05
    4c4c:	90 93 ba 02 	sts	0x02BA, r25
    4c50:	80 93 b9 02 	sts	0x02B9, r24
    4c54:	3f c0       	rjmp	.+126    	; 0x4cd4 <TIMER1_u8SetCallBack+0xea>
		break;
		case TIMER1_CTC:
			switch(Copy_Timer->CompOutMode)
    4c56:	ea 81       	ldd	r30, Y+2	; 0x02
    4c58:	fb 81       	ldd	r31, Y+3	; 0x03
    4c5a:	82 81       	ldd	r24, Z+2	; 0x02
    4c5c:	28 2f       	mov	r18, r24
    4c5e:	30 e0       	ldi	r19, 0x00	; 0
    4c60:	3f 83       	std	Y+7, r19	; 0x07
    4c62:	2e 83       	std	Y+6, r18	; 0x06
    4c64:	8e 81       	ldd	r24, Y+6	; 0x06
    4c66:	9f 81       	ldd	r25, Y+7	; 0x07
    4c68:	84 30       	cpi	r24, 0x04	; 4
    4c6a:	91 05       	cpc	r25, r1
    4c6c:	a1 f0       	breq	.+40     	; 0x4c96 <TIMER1_u8SetCallBack+0xac>
    4c6e:	2e 81       	ldd	r18, Y+6	; 0x06
    4c70:	3f 81       	ldd	r19, Y+7	; 0x07
    4c72:	25 30       	cpi	r18, 0x05	; 5
    4c74:	31 05       	cpc	r19, r1
    4c76:	2c f4       	brge	.+10     	; 0x4c82 <TIMER1_u8SetCallBack+0x98>
    4c78:	8e 81       	ldd	r24, Y+6	; 0x06
    4c7a:	9f 81       	ldd	r25, Y+7	; 0x07
    4c7c:	00 97       	sbiw	r24, 0x00	; 0
    4c7e:	59 f0       	breq	.+22     	; 0x4c96 <TIMER1_u8SetCallBack+0xac>
    4c80:	10 c0       	rjmp	.+32     	; 0x4ca2 <TIMER1_u8SetCallBack+0xb8>
    4c82:	2e 81       	ldd	r18, Y+6	; 0x06
    4c84:	3f 81       	ldd	r19, Y+7	; 0x07
    4c86:	28 30       	cpi	r18, 0x08	; 8
    4c88:	31 05       	cpc	r19, r1
    4c8a:	29 f0       	breq	.+10     	; 0x4c96 <TIMER1_u8SetCallBack+0xac>
    4c8c:	8e 81       	ldd	r24, Y+6	; 0x06
    4c8e:	9f 81       	ldd	r25, Y+7	; 0x07
    4c90:	8c 30       	cpi	r24, 0x0C	; 12
    4c92:	91 05       	cpc	r25, r1
    4c94:	31 f4       	brne	.+12     	; 0x4ca2 <TIMER1_u8SetCallBack+0xb8>
			{
			case OC1A_DIS:case OC1A_TOG:case OC1A_CLR:case OC1A_SET:
				TIMER_pvCallBackFunc[TIMER1A_CMV] = Notifiction;
    4c96:	8c 81       	ldd	r24, Y+4	; 0x04
    4c98:	9d 81       	ldd	r25, Y+5	; 0x05
    4c9a:	90 93 bc 02 	sts	0x02BC, r25
    4c9e:	80 93 bb 02 	sts	0x02BB, r24
				break;
			}
			switch(Copy_Timer->CompOutMode)
    4ca2:	ea 81       	ldd	r30, Y+2	; 0x02
    4ca4:	fb 81       	ldd	r31, Y+3	; 0x03
    4ca6:	82 81       	ldd	r24, Z+2	; 0x02
    4ca8:	88 2f       	mov	r24, r24
    4caa:	90 e0       	ldi	r25, 0x00	; 0
    4cac:	00 96       	adiw	r24, 0x00	; 0
    4cae:	84 30       	cpi	r24, 0x04	; 4
    4cb0:	91 05       	cpc	r25, r1
    4cb2:	80 f4       	brcc	.+32     	; 0x4cd4 <TIMER1_u8SetCallBack+0xea>
			{
			case OC1B_DIS:case OC1B_TOG:case OC1B_CLR:case OC1B_SET:
				TIMER_pvCallBackFunc[TIMER1B_CMV] = Notifiction;
    4cb4:	8c 81       	ldd	r24, Y+4	; 0x04
    4cb6:	9d 81       	ldd	r25, Y+5	; 0x05
    4cb8:	90 93 be 02 	sts	0x02BE, r25
    4cbc:	80 93 bd 02 	sts	0x02BD, r24
    4cc0:	09 c0       	rjmp	.+18     	; 0x4cd4 <TIMER1_u8SetCallBack+0xea>
				break;
			}
			break;
		case TIMER1_IC_CTC:
			TIMER_pvCallBackFunc[TIMER1_CAPT] = Notifiction;
    4cc2:	8c 81       	ldd	r24, Y+4	; 0x04
    4cc4:	9d 81       	ldd	r25, Y+5	; 0x05
    4cc6:	90 93 c0 02 	sts	0x02C0, r25
    4cca:	80 93 bf 02 	sts	0x02BF, r24
    4cce:	02 c0       	rjmp	.+4      	; 0x4cd4 <TIMER1_u8SetCallBack+0xea>
			break;

		}
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    4cd0:	82 e0       	ldi	r24, 0x02	; 2
    4cd2:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    4cd4:	89 81       	ldd	r24, Y+1	; 0x01
}
    4cd6:	29 96       	adiw	r28, 0x09	; 9
    4cd8:	0f b6       	in	r0, 0x3f	; 63
    4cda:	f8 94       	cli
    4cdc:	de bf       	out	0x3e, r29	; 62
    4cde:	0f be       	out	0x3f, r0	; 63
    4ce0:	cd bf       	out	0x3d, r28	; 61
    4ce2:	cf 91       	pop	r28
    4ce4:	df 91       	pop	r29
    4ce6:	08 95       	ret

00004ce8 <TIMER2_voidCompOutModeChange>:
void TIMER2_voidCompOutModeChange(Timer_t *Copy_Timer)
{
    4ce8:	df 93       	push	r29
    4cea:	cf 93       	push	r28
    4cec:	00 d0       	rcall	.+0      	; 0x4cee <TIMER2_voidCompOutModeChange+0x6>
    4cee:	cd b7       	in	r28, 0x3d	; 61
    4cf0:	de b7       	in	r29, 0x3e	; 62
    4cf2:	9a 83       	std	Y+2, r25	; 0x02
    4cf4:	89 83       	std	Y+1, r24	; 0x01
	TCCR2 &= MASK_COMP_MATCH_MODE;
    4cf6:	a5 e4       	ldi	r26, 0x45	; 69
    4cf8:	b0 e0       	ldi	r27, 0x00	; 0
    4cfa:	e5 e4       	ldi	r30, 0x45	; 69
    4cfc:	f0 e0       	ldi	r31, 0x00	; 0
    4cfe:	80 81       	ld	r24, Z
    4d00:	8f 7c       	andi	r24, 0xCF	; 207
    4d02:	8c 93       	st	X, r24
	TCCR2 |= Copy_Timer->CompOutMode<<TCCR2_COM20;
    4d04:	a5 e4       	ldi	r26, 0x45	; 69
    4d06:	b0 e0       	ldi	r27, 0x00	; 0
    4d08:	e5 e4       	ldi	r30, 0x45	; 69
    4d0a:	f0 e0       	ldi	r31, 0x00	; 0
    4d0c:	80 81       	ld	r24, Z
    4d0e:	28 2f       	mov	r18, r24
    4d10:	e9 81       	ldd	r30, Y+1	; 0x01
    4d12:	fa 81       	ldd	r31, Y+2	; 0x02
    4d14:	82 81       	ldd	r24, Z+2	; 0x02
    4d16:	88 2f       	mov	r24, r24
    4d18:	90 e0       	ldi	r25, 0x00	; 0
    4d1a:	82 95       	swap	r24
    4d1c:	92 95       	swap	r25
    4d1e:	90 7f       	andi	r25, 0xF0	; 240
    4d20:	98 27       	eor	r25, r24
    4d22:	80 7f       	andi	r24, 0xF0	; 240
    4d24:	98 27       	eor	r25, r24
    4d26:	82 2b       	or	r24, r18
    4d28:	8c 93       	st	X, r24
}
    4d2a:	0f 90       	pop	r0
    4d2c:	0f 90       	pop	r0
    4d2e:	cf 91       	pop	r28
    4d30:	df 91       	pop	r29
    4d32:	08 95       	ret

00004d34 <TIMER2_voidSetPreloadValue>:
void TIMER2_voidSetPreloadValue(u8 Copy_u8PreloadValue)
{
    4d34:	df 93       	push	r29
    4d36:	cf 93       	push	r28
    4d38:	0f 92       	push	r0
    4d3a:	cd b7       	in	r28, 0x3d	; 61
    4d3c:	de b7       	in	r29, 0x3e	; 62
    4d3e:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_u8PreloadValue;
    4d40:	e4 e4       	ldi	r30, 0x44	; 68
    4d42:	f0 e0       	ldi	r31, 0x00	; 0
    4d44:	89 81       	ldd	r24, Y+1	; 0x01
    4d46:	80 83       	st	Z, r24
}
    4d48:	0f 90       	pop	r0
    4d4a:	cf 91       	pop	r28
    4d4c:	df 91       	pop	r29
    4d4e:	08 95       	ret

00004d50 <TIMER2_voidSetCompMatchValue>:
void TIMER2_voidSetCompMatchValue(u8 Copy_u8CompVal)
{
    4d50:	df 93       	push	r29
    4d52:	cf 93       	push	r28
    4d54:	0f 92       	push	r0
    4d56:	cd b7       	in	r28, 0x3d	; 61
    4d58:	de b7       	in	r29, 0x3e	; 62
    4d5a:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8CompVal;
    4d5c:	e3 e4       	ldi	r30, 0x43	; 67
    4d5e:	f0 e0       	ldi	r31, 0x00	; 0
    4d60:	89 81       	ldd	r24, Y+1	; 0x01
    4d62:	80 83       	st	Z, r24
}
    4d64:	0f 90       	pop	r0
    4d66:	cf 91       	pop	r28
    4d68:	df 91       	pop	r29
    4d6a:	08 95       	ret

00004d6c <TIMER2_u8SetCallBack>:
u8 TIMER2_u8SetCallBack(Timer_t *Copy_Timer,void (*Notifiction)())
{
    4d6c:	df 93       	push	r29
    4d6e:	cf 93       	push	r28
    4d70:	cd b7       	in	r28, 0x3d	; 61
    4d72:	de b7       	in	r29, 0x3e	; 62
    4d74:	27 97       	sbiw	r28, 0x07	; 7
    4d76:	0f b6       	in	r0, 0x3f	; 63
    4d78:	f8 94       	cli
    4d7a:	de bf       	out	0x3e, r29	; 62
    4d7c:	0f be       	out	0x3f, r0	; 63
    4d7e:	cd bf       	out	0x3d, r28	; 61
    4d80:	9b 83       	std	Y+3, r25	; 0x03
    4d82:	8a 83       	std	Y+2, r24	; 0x02
    4d84:	7d 83       	std	Y+5, r23	; 0x05
    4d86:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK;
    4d88:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_Timer!=NULL)||(Notifiction !=NULL))
    4d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    4d8c:	9b 81       	ldd	r25, Y+3	; 0x03
    4d8e:	00 97       	sbiw	r24, 0x00	; 0
    4d90:	21 f4       	brne	.+8      	; 0x4d9a <TIMER2_u8SetCallBack+0x2e>
    4d92:	8c 81       	ldd	r24, Y+4	; 0x04
    4d94:	9d 81       	ldd	r25, Y+5	; 0x05
    4d96:	00 97       	sbiw	r24, 0x00	; 0
    4d98:	f9 f0       	breq	.+62     	; 0x4dd8 <TIMER2_u8SetCallBack+0x6c>
	{
		switch(Copy_Timer->TimerMode)
    4d9a:	ea 81       	ldd	r30, Y+2	; 0x02
    4d9c:	fb 81       	ldd	r31, Y+3	; 0x03
    4d9e:	81 81       	ldd	r24, Z+1	; 0x01
    4da0:	28 2f       	mov	r18, r24
    4da2:	30 e0       	ldi	r19, 0x00	; 0
    4da4:	3f 83       	std	Y+7, r19	; 0x07
    4da6:	2e 83       	std	Y+6, r18	; 0x06
    4da8:	8e 81       	ldd	r24, Y+6	; 0x06
    4daa:	9f 81       	ldd	r25, Y+7	; 0x07
    4dac:	00 97       	sbiw	r24, 0x00	; 0
    4dae:	31 f0       	breq	.+12     	; 0x4dbc <TIMER2_u8SetCallBack+0x50>
    4db0:	2e 81       	ldd	r18, Y+6	; 0x06
    4db2:	3f 81       	ldd	r19, Y+7	; 0x07
    4db4:	21 30       	cpi	r18, 0x01	; 1
    4db6:	31 05       	cpc	r19, r1
    4db8:	41 f0       	breq	.+16     	; 0x4dca <TIMER2_u8SetCallBack+0x5e>
    4dba:	10 c0       	rjmp	.+32     	; 0x4ddc <TIMER2_u8SetCallBack+0x70>
		{
		case TIMER2_NORMAL:TIMER_pvCallBackFunc[TIMER2_OVF] = Notifiction;
    4dbc:	8c 81       	ldd	r24, Y+4	; 0x04
    4dbe:	9d 81       	ldd	r25, Y+5	; 0x05
    4dc0:	90 93 c2 02 	sts	0x02C2, r25
    4dc4:	80 93 c1 02 	sts	0x02C1, r24
    4dc8:	09 c0       	rjmp	.+18     	; 0x4ddc <TIMER2_u8SetCallBack+0x70>
		break;
		case TIMER2_CTC:TIMER_pvCallBackFunc[TIMER2_CMV] = Notifiction;
    4dca:	8c 81       	ldd	r24, Y+4	; 0x04
    4dcc:	9d 81       	ldd	r25, Y+5	; 0x05
    4dce:	90 93 c4 02 	sts	0x02C4, r25
    4dd2:	80 93 c3 02 	sts	0x02C3, r24
    4dd6:	02 c0       	rjmp	.+4      	; 0x4ddc <TIMER2_u8SetCallBack+0x70>
		break;
		}

	}
	else
		Local_u8ErrorState = NULL_POINTER;
    4dd8:	82 e0       	ldi	r24, 0x02	; 2
    4dda:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    4ddc:	89 81       	ldd	r24, Y+1	; 0x01
}
    4dde:	27 96       	adiw	r28, 0x07	; 7
    4de0:	0f b6       	in	r0, 0x3f	; 63
    4de2:	f8 94       	cli
    4de4:	de bf       	out	0x3e, r29	; 62
    4de6:	0f be       	out	0x3f, r0	; 63
    4de8:	cd bf       	out	0x3d, r28	; 61
    4dea:	cf 91       	pop	r28
    4dec:	df 91       	pop	r29
    4dee:	08 95       	ret

00004df0 <__vector_10>:
// CTC timer/counter0
void __vector_10 (void)	__attribute__((signal));
void __vector_10 (void)
{
    4df0:	1f 92       	push	r1
    4df2:	0f 92       	push	r0
    4df4:	0f b6       	in	r0, 0x3f	; 63
    4df6:	0f 92       	push	r0
    4df8:	11 24       	eor	r1, r1
    4dfa:	2f 93       	push	r18
    4dfc:	3f 93       	push	r19
    4dfe:	4f 93       	push	r20
    4e00:	5f 93       	push	r21
    4e02:	6f 93       	push	r22
    4e04:	7f 93       	push	r23
    4e06:	8f 93       	push	r24
    4e08:	9f 93       	push	r25
    4e0a:	af 93       	push	r26
    4e0c:	bf 93       	push	r27
    4e0e:	ef 93       	push	r30
    4e10:	ff 93       	push	r31
    4e12:	df 93       	push	r29
    4e14:	cf 93       	push	r28
    4e16:	cd b7       	in	r28, 0x3d	; 61
    4e18:	de b7       	in	r29, 0x3e	; 62
	TIMER_pvCallBackFunc[TIMER0_CMV]();
    4e1a:	e0 91 b7 02 	lds	r30, 0x02B7
    4e1e:	f0 91 b8 02 	lds	r31, 0x02B8
    4e22:	09 95       	icall

}
    4e24:	cf 91       	pop	r28
    4e26:	df 91       	pop	r29
    4e28:	ff 91       	pop	r31
    4e2a:	ef 91       	pop	r30
    4e2c:	bf 91       	pop	r27
    4e2e:	af 91       	pop	r26
    4e30:	9f 91       	pop	r25
    4e32:	8f 91       	pop	r24
    4e34:	7f 91       	pop	r23
    4e36:	6f 91       	pop	r22
    4e38:	5f 91       	pop	r21
    4e3a:	4f 91       	pop	r20
    4e3c:	3f 91       	pop	r19
    4e3e:	2f 91       	pop	r18
    4e40:	0f 90       	pop	r0
    4e42:	0f be       	out	0x3f, r0	; 63
    4e44:	0f 90       	pop	r0
    4e46:	1f 90       	pop	r1
    4e48:	18 95       	reti

00004e4a <__vector_11>:
// OVF timer/counter0
void __vector_11 (void)	__attribute__((signal));
void __vector_11 (void)
{
    4e4a:	1f 92       	push	r1
    4e4c:	0f 92       	push	r0
    4e4e:	0f b6       	in	r0, 0x3f	; 63
    4e50:	0f 92       	push	r0
    4e52:	11 24       	eor	r1, r1
    4e54:	2f 93       	push	r18
    4e56:	3f 93       	push	r19
    4e58:	4f 93       	push	r20
    4e5a:	5f 93       	push	r21
    4e5c:	6f 93       	push	r22
    4e5e:	7f 93       	push	r23
    4e60:	8f 93       	push	r24
    4e62:	9f 93       	push	r25
    4e64:	af 93       	push	r26
    4e66:	bf 93       	push	r27
    4e68:	ef 93       	push	r30
    4e6a:	ff 93       	push	r31
    4e6c:	df 93       	push	r29
    4e6e:	cf 93       	push	r28
    4e70:	cd b7       	in	r28, 0x3d	; 61
    4e72:	de b7       	in	r29, 0x3e	; 62
	TIMER_pvCallBackFunc[TIMER0_OVF]();
    4e74:	e0 91 b5 02 	lds	r30, 0x02B5
    4e78:	f0 91 b6 02 	lds	r31, 0x02B6
    4e7c:	09 95       	icall

}
    4e7e:	cf 91       	pop	r28
    4e80:	df 91       	pop	r29
    4e82:	ff 91       	pop	r31
    4e84:	ef 91       	pop	r30
    4e86:	bf 91       	pop	r27
    4e88:	af 91       	pop	r26
    4e8a:	9f 91       	pop	r25
    4e8c:	8f 91       	pop	r24
    4e8e:	7f 91       	pop	r23
    4e90:	6f 91       	pop	r22
    4e92:	5f 91       	pop	r21
    4e94:	4f 91       	pop	r20
    4e96:	3f 91       	pop	r19
    4e98:	2f 91       	pop	r18
    4e9a:	0f 90       	pop	r0
    4e9c:	0f be       	out	0x3f, r0	; 63
    4e9e:	0f 90       	pop	r0
    4ea0:	1f 90       	pop	r1
    4ea2:	18 95       	reti

00004ea4 <__vector_7>:
// CTC timer/counter1A
void __vector_7 (void)	__attribute__((signal));
void __vector_7 (void)
{
    4ea4:	1f 92       	push	r1
    4ea6:	0f 92       	push	r0
    4ea8:	0f b6       	in	r0, 0x3f	; 63
    4eaa:	0f 92       	push	r0
    4eac:	11 24       	eor	r1, r1
    4eae:	2f 93       	push	r18
    4eb0:	3f 93       	push	r19
    4eb2:	4f 93       	push	r20
    4eb4:	5f 93       	push	r21
    4eb6:	6f 93       	push	r22
    4eb8:	7f 93       	push	r23
    4eba:	8f 93       	push	r24
    4ebc:	9f 93       	push	r25
    4ebe:	af 93       	push	r26
    4ec0:	bf 93       	push	r27
    4ec2:	ef 93       	push	r30
    4ec4:	ff 93       	push	r31
    4ec6:	df 93       	push	r29
    4ec8:	cf 93       	push	r28
    4eca:	cd b7       	in	r28, 0x3d	; 61
    4ecc:	de b7       	in	r29, 0x3e	; 62
	TIMER_pvCallBackFunc[TIMER1A_CMV]();
    4ece:	e0 91 bb 02 	lds	r30, 0x02BB
    4ed2:	f0 91 bc 02 	lds	r31, 0x02BC
    4ed6:	09 95       	icall
}
    4ed8:	cf 91       	pop	r28
    4eda:	df 91       	pop	r29
    4edc:	ff 91       	pop	r31
    4ede:	ef 91       	pop	r30
    4ee0:	bf 91       	pop	r27
    4ee2:	af 91       	pop	r26
    4ee4:	9f 91       	pop	r25
    4ee6:	8f 91       	pop	r24
    4ee8:	7f 91       	pop	r23
    4eea:	6f 91       	pop	r22
    4eec:	5f 91       	pop	r21
    4eee:	4f 91       	pop	r20
    4ef0:	3f 91       	pop	r19
    4ef2:	2f 91       	pop	r18
    4ef4:	0f 90       	pop	r0
    4ef6:	0f be       	out	0x3f, r0	; 63
    4ef8:	0f 90       	pop	r0
    4efa:	1f 90       	pop	r1
    4efc:	18 95       	reti

00004efe <__vector_8>:
// CTC timer/counter1B
void __vector_8 (void)	__attribute__((signal));
void __vector_8 (void)
{
    4efe:	1f 92       	push	r1
    4f00:	0f 92       	push	r0
    4f02:	0f b6       	in	r0, 0x3f	; 63
    4f04:	0f 92       	push	r0
    4f06:	11 24       	eor	r1, r1
    4f08:	2f 93       	push	r18
    4f0a:	3f 93       	push	r19
    4f0c:	4f 93       	push	r20
    4f0e:	5f 93       	push	r21
    4f10:	6f 93       	push	r22
    4f12:	7f 93       	push	r23
    4f14:	8f 93       	push	r24
    4f16:	9f 93       	push	r25
    4f18:	af 93       	push	r26
    4f1a:	bf 93       	push	r27
    4f1c:	ef 93       	push	r30
    4f1e:	ff 93       	push	r31
    4f20:	df 93       	push	r29
    4f22:	cf 93       	push	r28
    4f24:	cd b7       	in	r28, 0x3d	; 61
    4f26:	de b7       	in	r29, 0x3e	; 62
	TIMER_pvCallBackFunc[TIMER1B_CMV]();
    4f28:	e0 91 bd 02 	lds	r30, 0x02BD
    4f2c:	f0 91 be 02 	lds	r31, 0x02BE
    4f30:	09 95       	icall
}
    4f32:	cf 91       	pop	r28
    4f34:	df 91       	pop	r29
    4f36:	ff 91       	pop	r31
    4f38:	ef 91       	pop	r30
    4f3a:	bf 91       	pop	r27
    4f3c:	af 91       	pop	r26
    4f3e:	9f 91       	pop	r25
    4f40:	8f 91       	pop	r24
    4f42:	7f 91       	pop	r23
    4f44:	6f 91       	pop	r22
    4f46:	5f 91       	pop	r21
    4f48:	4f 91       	pop	r20
    4f4a:	3f 91       	pop	r19
    4f4c:	2f 91       	pop	r18
    4f4e:	0f 90       	pop	r0
    4f50:	0f be       	out	0x3f, r0	; 63
    4f52:	0f 90       	pop	r0
    4f54:	1f 90       	pop	r1
    4f56:	18 95       	reti

00004f58 <__vector_9>:
// OVF timer/counter1
void __vector_9 (void)	__attribute__((signal));
void __vector_9 (void)
{
    4f58:	1f 92       	push	r1
    4f5a:	0f 92       	push	r0
    4f5c:	0f b6       	in	r0, 0x3f	; 63
    4f5e:	0f 92       	push	r0
    4f60:	11 24       	eor	r1, r1
    4f62:	2f 93       	push	r18
    4f64:	3f 93       	push	r19
    4f66:	4f 93       	push	r20
    4f68:	5f 93       	push	r21
    4f6a:	6f 93       	push	r22
    4f6c:	7f 93       	push	r23
    4f6e:	8f 93       	push	r24
    4f70:	9f 93       	push	r25
    4f72:	af 93       	push	r26
    4f74:	bf 93       	push	r27
    4f76:	ef 93       	push	r30
    4f78:	ff 93       	push	r31
    4f7a:	df 93       	push	r29
    4f7c:	cf 93       	push	r28
    4f7e:	cd b7       	in	r28, 0x3d	; 61
    4f80:	de b7       	in	r29, 0x3e	; 62
	TIMER_pvCallBackFunc[TIMER1_OVF]();
    4f82:	e0 91 b9 02 	lds	r30, 0x02B9
    4f86:	f0 91 ba 02 	lds	r31, 0x02BA
    4f8a:	09 95       	icall
}
    4f8c:	cf 91       	pop	r28
    4f8e:	df 91       	pop	r29
    4f90:	ff 91       	pop	r31
    4f92:	ef 91       	pop	r30
    4f94:	bf 91       	pop	r27
    4f96:	af 91       	pop	r26
    4f98:	9f 91       	pop	r25
    4f9a:	8f 91       	pop	r24
    4f9c:	7f 91       	pop	r23
    4f9e:	6f 91       	pop	r22
    4fa0:	5f 91       	pop	r21
    4fa2:	4f 91       	pop	r20
    4fa4:	3f 91       	pop	r19
    4fa6:	2f 91       	pop	r18
    4fa8:	0f 90       	pop	r0
    4faa:	0f be       	out	0x3f, r0	; 63
    4fac:	0f 90       	pop	r0
    4fae:	1f 90       	pop	r1
    4fb0:	18 95       	reti

00004fb2 <__vector_6>:


// Capture CTC Event timer/counter1
void __vector_6 (void)	__attribute__((signal));
void __vector_6 (void)
{
    4fb2:	1f 92       	push	r1
    4fb4:	0f 92       	push	r0
    4fb6:	0f b6       	in	r0, 0x3f	; 63
    4fb8:	0f 92       	push	r0
    4fba:	11 24       	eor	r1, r1
    4fbc:	2f 93       	push	r18
    4fbe:	3f 93       	push	r19
    4fc0:	4f 93       	push	r20
    4fc2:	5f 93       	push	r21
    4fc4:	6f 93       	push	r22
    4fc6:	7f 93       	push	r23
    4fc8:	8f 93       	push	r24
    4fca:	9f 93       	push	r25
    4fcc:	af 93       	push	r26
    4fce:	bf 93       	push	r27
    4fd0:	ef 93       	push	r30
    4fd2:	ff 93       	push	r31
    4fd4:	df 93       	push	r29
    4fd6:	cf 93       	push	r28
    4fd8:	cd b7       	in	r28, 0x3d	; 61
    4fda:	de b7       	in	r29, 0x3e	; 62
	TIMER_pvCallBackFunc[TIMER1_CAPT]();
    4fdc:	e0 91 bf 02 	lds	r30, 0x02BF
    4fe0:	f0 91 c0 02 	lds	r31, 0x02C0
    4fe4:	09 95       	icall
}
    4fe6:	cf 91       	pop	r28
    4fe8:	df 91       	pop	r29
    4fea:	ff 91       	pop	r31
    4fec:	ef 91       	pop	r30
    4fee:	bf 91       	pop	r27
    4ff0:	af 91       	pop	r26
    4ff2:	9f 91       	pop	r25
    4ff4:	8f 91       	pop	r24
    4ff6:	7f 91       	pop	r23
    4ff8:	6f 91       	pop	r22
    4ffa:	5f 91       	pop	r21
    4ffc:	4f 91       	pop	r20
    4ffe:	3f 91       	pop	r19
    5000:	2f 91       	pop	r18
    5002:	0f 90       	pop	r0
    5004:	0f be       	out	0x3f, r0	; 63
    5006:	0f 90       	pop	r0
    5008:	1f 90       	pop	r1
    500a:	18 95       	reti

0000500c <__vector_5>:

// OVF timer/counter2
void __vector_5 (void)	__attribute__((signal));
void __vector_5 (void)
{
    500c:	1f 92       	push	r1
    500e:	0f 92       	push	r0
    5010:	0f b6       	in	r0, 0x3f	; 63
    5012:	0f 92       	push	r0
    5014:	11 24       	eor	r1, r1
    5016:	2f 93       	push	r18
    5018:	3f 93       	push	r19
    501a:	4f 93       	push	r20
    501c:	5f 93       	push	r21
    501e:	6f 93       	push	r22
    5020:	7f 93       	push	r23
    5022:	8f 93       	push	r24
    5024:	9f 93       	push	r25
    5026:	af 93       	push	r26
    5028:	bf 93       	push	r27
    502a:	ef 93       	push	r30
    502c:	ff 93       	push	r31
    502e:	df 93       	push	r29
    5030:	cf 93       	push	r28
    5032:	cd b7       	in	r28, 0x3d	; 61
    5034:	de b7       	in	r29, 0x3e	; 62
	TIMER_pvCallBackFunc[TIMER2_OVF]();
    5036:	e0 91 c1 02 	lds	r30, 0x02C1
    503a:	f0 91 c2 02 	lds	r31, 0x02C2
    503e:	09 95       	icall
}
    5040:	cf 91       	pop	r28
    5042:	df 91       	pop	r29
    5044:	ff 91       	pop	r31
    5046:	ef 91       	pop	r30
    5048:	bf 91       	pop	r27
    504a:	af 91       	pop	r26
    504c:	9f 91       	pop	r25
    504e:	8f 91       	pop	r24
    5050:	7f 91       	pop	r23
    5052:	6f 91       	pop	r22
    5054:	5f 91       	pop	r21
    5056:	4f 91       	pop	r20
    5058:	3f 91       	pop	r19
    505a:	2f 91       	pop	r18
    505c:	0f 90       	pop	r0
    505e:	0f be       	out	0x3f, r0	; 63
    5060:	0f 90       	pop	r0
    5062:	1f 90       	pop	r1
    5064:	18 95       	reti

00005066 <__vector_4>:
// CTC timer/counter2
void __vector_4 (void)	__attribute__((signal));
void __vector_4 (void)
{
    5066:	1f 92       	push	r1
    5068:	0f 92       	push	r0
    506a:	0f b6       	in	r0, 0x3f	; 63
    506c:	0f 92       	push	r0
    506e:	11 24       	eor	r1, r1
    5070:	2f 93       	push	r18
    5072:	3f 93       	push	r19
    5074:	4f 93       	push	r20
    5076:	5f 93       	push	r21
    5078:	6f 93       	push	r22
    507a:	7f 93       	push	r23
    507c:	8f 93       	push	r24
    507e:	9f 93       	push	r25
    5080:	af 93       	push	r26
    5082:	bf 93       	push	r27
    5084:	ef 93       	push	r30
    5086:	ff 93       	push	r31
    5088:	df 93       	push	r29
    508a:	cf 93       	push	r28
    508c:	cd b7       	in	r28, 0x3d	; 61
    508e:	de b7       	in	r29, 0x3e	; 62
	TIMER_pvCallBackFunc[TIMER2_CTC]();
    5090:	e0 91 b7 02 	lds	r30, 0x02B7
    5094:	f0 91 b8 02 	lds	r31, 0x02B8
    5098:	09 95       	icall
}
    509a:	cf 91       	pop	r28
    509c:	df 91       	pop	r29
    509e:	ff 91       	pop	r31
    50a0:	ef 91       	pop	r30
    50a2:	bf 91       	pop	r27
    50a4:	af 91       	pop	r26
    50a6:	9f 91       	pop	r25
    50a8:	8f 91       	pop	r24
    50aa:	7f 91       	pop	r23
    50ac:	6f 91       	pop	r22
    50ae:	5f 91       	pop	r21
    50b0:	4f 91       	pop	r20
    50b2:	3f 91       	pop	r19
    50b4:	2f 91       	pop	r18
    50b6:	0f 90       	pop	r0
    50b8:	0f be       	out	0x3f, r0	; 63
    50ba:	0f 90       	pop	r0
    50bc:	1f 90       	pop	r1
    50be:	18 95       	reti

000050c0 <USART_init>:
static u16 *Global_u16ReceiveChar = NULL;
static void (*Global_pvCallBackFuncRecv)() = NULL;
static u8 Global_u8DirectionRecv = SINGLE_CHER_RECV;
static u8 Global_u8RecvCharSize;
void USART_init()
{
    50c0:	df 93       	push	r29
    50c2:	cf 93       	push	r28
    50c4:	00 d0       	rcall	.+0      	; 0x50c6 <USART_init+0x6>
    50c6:	0f 92       	push	r0
    50c8:	cd b7       	in	r28, 0x3d	; 61
    50ca:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8UCSRC_Value = 0;
    50cc:	1b 82       	std	Y+3, r1	; 0x03
	u16 Local_u16BaudValue;
	// set character size of the frame
	Local_u8UCSRC_Value &= CHAR_SIZE_MASK;
    50ce:	8b 81       	ldd	r24, Y+3	; 0x03
    50d0:	89 7f       	andi	r24, 0xF9	; 249
    50d2:	8b 83       	std	Y+3, r24	; 0x03
#if(CHARACTER_SIZE <= CHAR_SIZE_8_bit)
		// by default 8-bit data size
		CLR_BIT(UCSRB,UCSRB_UCSZ2);
    50d4:	aa e2       	ldi	r26, 0x2A	; 42
    50d6:	b0 e0       	ldi	r27, 0x00	; 0
    50d8:	ea e2       	ldi	r30, 0x2A	; 42
    50da:	f0 e0       	ldi	r31, 0x00	; 0
    50dc:	80 81       	ld	r24, Z
    50de:	8b 7f       	andi	r24, 0xFB	; 251
    50e0:	8c 93       	st	X, r24
		Local_u8UCSRC_Value |= CHARACTER_SIZE<<UCSRC_UCSZ0;
    50e2:	8b 81       	ldd	r24, Y+3	; 0x03
    50e4:	86 60       	ori	r24, 0x06	; 6
    50e6:	8b 83       	std	Y+3, r24	; 0x03
#elif(CHARACTER_SIZE == CHAR_SIZE_9_bit)
		SET_BIT(UCSRB,UCSRB_UCSZ2);
		Local_u8UCSRC_Value |= CHAR_SIZE_8_bit<<UCSRC_UCSZ0;
#endif
	// set parity bit of the frame
	Local_u8UCSRC_Value &= PARITY_MASK;
    50e8:	8b 81       	ldd	r24, Y+3	; 0x03
    50ea:	8f 7c       	andi	r24, 0xCF	; 207
    50ec:	8b 83       	std	Y+3, r24	; 0x03
	Local_u8UCSRC_Value |= PARITY_MODE<<UCSRC_UPM0;
	// set stop bit of the frame
	STOP_MODE?SET_BIT(Local_u8UCSRC_Value,UCSRC_USBS):CLR_BIT(Local_u8UCSRC_Value,UCSRC_USBS);
    50ee:	8b 81       	ldd	r24, Y+3	; 0x03
    50f0:	87 7f       	andi	r24, 0xF7	; 247
    50f2:	8b 83       	std	Y+3, r24	; 0x03
#if SYNCH_MODE == ASYNCH
	// set synchronous mode
	CLR_BIT(Local_u8UCSRC_Value,UCSRC_UMSEL);
    50f4:	8b 81       	ldd	r24, Y+3	; 0x03
    50f6:	8f 7b       	andi	r24, 0xBF	; 191
    50f8:	8b 83       	std	Y+3, r24	; 0x03
	// set speed mode and calculate Baud rate
	#if SPEED_MODE == NORMAL_SPEED
		CLR_BIT(UCSRA,UCSRA_U2X);
    50fa:	ab e2       	ldi	r26, 0x2B	; 43
    50fc:	b0 e0       	ldi	r27, 0x00	; 0
    50fe:	eb e2       	ldi	r30, 0x2B	; 43
    5100:	f0 e0       	ldi	r31, 0x00	; 0
    5102:	80 81       	ld	r24, Z
    5104:	8d 7f       	andi	r24, 0xFD	; 253
    5106:	8c 93       	st	X, r24
		Local_u16BaudValue = (u16)((CLOCK_SOURCE/(16UL*BAUD_RATE))-1UL);
    5108:	83 e3       	ldi	r24, 0x33	; 51
    510a:	90 e0       	ldi	r25, 0x00	; 0
    510c:	9a 83       	std	Y+2, r25	; 0x02
    510e:	89 83       	std	Y+1, r24	; 0x01
#else

#endif

	// select UCSRC register
	SET_BIT(Local_u8UCSRC_Value,UCSRC_URSEL);
    5110:	8b 81       	ldd	r24, Y+3	; 0x03
    5112:	80 68       	ori	r24, 0x80	; 128
    5114:	8b 83       	std	Y+3, r24	; 0x03
	// set UCSRC register with current value
	UCSRC = Local_u8UCSRC_Value;
    5116:	e0 e4       	ldi	r30, 0x40	; 64
    5118:	f0 e0       	ldi	r31, 0x00	; 0
    511a:	8b 81       	ldd	r24, Y+3	; 0x03
    511c:	80 83       	st	Z, r24
	// select UDRRH register
	CLR_BIT(Local_u8UCSRC_Value,UCSRC_URSEL);
    511e:	8b 81       	ldd	r24, Y+3	; 0x03
    5120:	8f 77       	andi	r24, 0x7F	; 127
    5122:	8b 83       	std	Y+3, r24	; 0x03
	UBRRL = Local_u16BaudValue & 0xff;
    5124:	e9 e2       	ldi	r30, 0x29	; 41
    5126:	f0 e0       	ldi	r31, 0x00	; 0
    5128:	89 81       	ldd	r24, Y+1	; 0x01
    512a:	80 83       	st	Z, r24
	UBRRH = Local_u16BaudValue >> 8;
    512c:	e0 e4       	ldi	r30, 0x40	; 64
    512e:	f0 e0       	ldi	r31, 0x00	; 0
    5130:	89 81       	ldd	r24, Y+1	; 0x01
    5132:	9a 81       	ldd	r25, Y+2	; 0x02
    5134:	89 2f       	mov	r24, r25
    5136:	99 27       	eor	r25, r25
    5138:	80 83       	st	Z, r24
	// transmit and receive option
	SET_BIT(UCSRB,UCSRB_TXEN);
    513a:	aa e2       	ldi	r26, 0x2A	; 42
    513c:	b0 e0       	ldi	r27, 0x00	; 0
    513e:	ea e2       	ldi	r30, 0x2A	; 42
    5140:	f0 e0       	ldi	r31, 0x00	; 0
    5142:	80 81       	ld	r24, Z
    5144:	88 60       	ori	r24, 0x08	; 8
    5146:	8c 93       	st	X, r24
	SET_BIT(UCSRB,UCSRB_RXEN);
    5148:	aa e2       	ldi	r26, 0x2A	; 42
    514a:	b0 e0       	ldi	r27, 0x00	; 0
    514c:	ea e2       	ldi	r30, 0x2A	; 42
    514e:	f0 e0       	ldi	r31, 0x00	; 0
    5150:	80 81       	ld	r24, Z
    5152:	80 61       	ori	r24, 0x10	; 16
    5154:	8c 93       	st	X, r24
	UBRRL = 51;

	SET_BIT(UCSRB,UCSRB_TXEN);
	SET_BIT(UCSRB,UCSRB_RXEN);
	*/
}
    5156:	0f 90       	pop	r0
    5158:	0f 90       	pop	r0
    515a:	0f 90       	pop	r0
    515c:	cf 91       	pop	r28
    515e:	df 91       	pop	r29
    5160:	08 95       	ret

00005162 <USART_u8SendPolling>:

u8 USART_u8SendPolling(u8 Copy_u8Data)
{
    5162:	df 93       	push	r29
    5164:	cf 93       	push	r28
    5166:	00 d0       	rcall	.+0      	; 0x5168 <USART_u8SendPolling+0x6>
    5168:	00 d0       	rcall	.+0      	; 0x516a <USART_u8SendPolling+0x8>
    516a:	00 d0       	rcall	.+0      	; 0x516c <USART_u8SendPolling+0xa>
    516c:	cd b7       	in	r28, 0x3d	; 61
    516e:	de b7       	in	r29, 0x3e	; 62
    5170:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_u8ErrorState = OK;
    5172:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32counter = 0;
    5174:	19 82       	std	Y+1, r1	; 0x01
    5176:	1a 82       	std	Y+2, r1	; 0x02
    5178:	1b 82       	std	Y+3, r1	; 0x03
    517a:	1c 82       	std	Y+4, r1	; 0x04
    517c:	0b c0       	rjmp	.+22     	; 0x5194 <USART_u8SendPolling+0x32>

	// wait until trans buffer is empty
	while((GET_BIT(UCSRA,UCSRA_UDRE)==0)&&(Local_u32counter<USART_u32TIMEOUT))
	{
		Local_u32counter++;
    517e:	89 81       	ldd	r24, Y+1	; 0x01
    5180:	9a 81       	ldd	r25, Y+2	; 0x02
    5182:	ab 81       	ldd	r26, Y+3	; 0x03
    5184:	bc 81       	ldd	r27, Y+4	; 0x04
    5186:	01 96       	adiw	r24, 0x01	; 1
    5188:	a1 1d       	adc	r26, r1
    518a:	b1 1d       	adc	r27, r1
    518c:	89 83       	std	Y+1, r24	; 0x01
    518e:	9a 83       	std	Y+2, r25	; 0x02
    5190:	ab 83       	std	Y+3, r26	; 0x03
    5192:	bc 83       	std	Y+4, r27	; 0x04
{
	u8 Local_u8ErrorState = OK;
	u32 Local_u32counter = 0;

	// wait until trans buffer is empty
	while((GET_BIT(UCSRA,UCSRA_UDRE)==0)&&(Local_u32counter<USART_u32TIMEOUT))
    5194:	eb e2       	ldi	r30, 0x2B	; 43
    5196:	f0 e0       	ldi	r31, 0x00	; 0
    5198:	80 81       	ld	r24, Z
    519a:	82 95       	swap	r24
    519c:	86 95       	lsr	r24
    519e:	87 70       	andi	r24, 0x07	; 7
    51a0:	88 2f       	mov	r24, r24
    51a2:	90 e0       	ldi	r25, 0x00	; 0
    51a4:	81 70       	andi	r24, 0x01	; 1
    51a6:	90 70       	andi	r25, 0x00	; 0
    51a8:	00 97       	sbiw	r24, 0x00	; 0
    51aa:	61 f4       	brne	.+24     	; 0x51c4 <USART_u8SendPolling+0x62>
    51ac:	89 81       	ldd	r24, Y+1	; 0x01
    51ae:	9a 81       	ldd	r25, Y+2	; 0x02
    51b0:	ab 81       	ldd	r26, Y+3	; 0x03
    51b2:	bc 81       	ldd	r27, Y+4	; 0x04
    51b4:	80 35       	cpi	r24, 0x50	; 80
    51b6:	23 ec       	ldi	r18, 0xC3	; 195
    51b8:	92 07       	cpc	r25, r18
    51ba:	20 e0       	ldi	r18, 0x00	; 0
    51bc:	a2 07       	cpc	r26, r18
    51be:	20 e0       	ldi	r18, 0x00	; 0
    51c0:	b2 07       	cpc	r27, r18
    51c2:	e8 f2       	brcs	.-70     	; 0x517e <USART_u8SendPolling+0x1c>
	{
		Local_u32counter++;
	}
	if(Local_u32counter==USART_u32TIMEOUT)
    51c4:	89 81       	ldd	r24, Y+1	; 0x01
    51c6:	9a 81       	ldd	r25, Y+2	; 0x02
    51c8:	ab 81       	ldd	r26, Y+3	; 0x03
    51ca:	bc 81       	ldd	r27, Y+4	; 0x04
    51cc:	80 35       	cpi	r24, 0x50	; 80
    51ce:	23 ec       	ldi	r18, 0xC3	; 195
    51d0:	92 07       	cpc	r25, r18
    51d2:	20 e0       	ldi	r18, 0x00	; 0
    51d4:	a2 07       	cpc	r26, r18
    51d6:	20 e0       	ldi	r18, 0x00	; 0
    51d8:	b2 07       	cpc	r27, r18
    51da:	19 f4       	brne	.+6      	; 0x51e2 <USART_u8SendPolling+0x80>
	{
		Local_u8ErrorState =NOTOK;
    51dc:	81 e0       	ldi	r24, 0x01	; 1
    51de:	8d 83       	std	Y+5, r24	; 0x05
    51e0:	0b c0       	rjmp	.+22     	; 0x51f8 <USART_u8SendPolling+0x96>
	}
	else
	{
		CLR_BIT(UCSRB,UCSRB_TXB8);
    51e2:	aa e2       	ldi	r26, 0x2A	; 42
    51e4:	b0 e0       	ldi	r27, 0x00	; 0
    51e6:	ea e2       	ldi	r30, 0x2A	; 42
    51e8:	f0 e0       	ldi	r31, 0x00	; 0
    51ea:	80 81       	ld	r24, Z
    51ec:	8e 7f       	andi	r24, 0xFE	; 254
    51ee:	8c 93       	st	X, r24
		if(CHARACTER_SIZE == CHAR_SIZE_9_bit)
			SET_BIT(UCSRB,UCSRB_TXB8);
		UDR = Copy_u8Data;
    51f0:	ec e2       	ldi	r30, 0x2C	; 44
    51f2:	f0 e0       	ldi	r31, 0x00	; 0
    51f4:	8e 81       	ldd	r24, Y+6	; 0x06
    51f6:	80 83       	st	Z, r24
	}
	return Local_u8ErrorState;
    51f8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    51fa:	26 96       	adiw	r28, 0x06	; 6
    51fc:	0f b6       	in	r0, 0x3f	; 63
    51fe:	f8 94       	cli
    5200:	de bf       	out	0x3e, r29	; 62
    5202:	0f be       	out	0x3f, r0	; 63
    5204:	cd bf       	out	0x3d, r28	; 61
    5206:	cf 91       	pop	r28
    5208:	df 91       	pop	r29
    520a:	08 95       	ret

0000520c <USART_u8ReceivePolling>:

u8 USART_u8ReceivePolling(u16 *Copy_pu16Read)
{
    520c:	df 93       	push	r29
    520e:	cf 93       	push	r28
    5210:	cd b7       	in	r28, 0x3d	; 61
    5212:	de b7       	in	r29, 0x3e	; 62
    5214:	27 97       	sbiw	r28, 0x07	; 7
    5216:	0f b6       	in	r0, 0x3f	; 63
    5218:	f8 94       	cli
    521a:	de bf       	out	0x3e, r29	; 62
    521c:	0f be       	out	0x3f, r0	; 63
    521e:	cd bf       	out	0x3d, r28	; 61
    5220:	9f 83       	std	Y+7, r25	; 0x07
    5222:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_u8ErrorState = OK;
    5224:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32counter = 0;
    5226:	19 82       	std	Y+1, r1	; 0x01
    5228:	1a 82       	std	Y+2, r1	; 0x02
    522a:	1b 82       	std	Y+3, r1	; 0x03
    522c:	1c 82       	std	Y+4, r1	; 0x04
	if(Copy_pu16Read==NULL)
    522e:	8e 81       	ldd	r24, Y+6	; 0x06
    5230:	9f 81       	ldd	r25, Y+7	; 0x07
    5232:	00 97       	sbiw	r24, 0x00	; 0
    5234:	71 f4       	brne	.+28     	; 0x5252 <USART_u8ReceivePolling+0x46>
	{
		Local_u8ErrorState = NULL_POINTER;
    5236:	82 e0       	ldi	r24, 0x02	; 2
    5238:	8d 83       	std	Y+5, r24	; 0x05
    523a:	47 c0       	rjmp	.+142    	; 0x52ca <USART_u8ReceivePolling+0xbe>
	}
	else
	{
		while((GET_BIT(UCSRA,UCSRA_RXC)==0)&&(Local_u32counter<USART_u32TIMEOUT))
		{
			Local_u32counter++;
    523c:	89 81       	ldd	r24, Y+1	; 0x01
    523e:	9a 81       	ldd	r25, Y+2	; 0x02
    5240:	ab 81       	ldd	r26, Y+3	; 0x03
    5242:	bc 81       	ldd	r27, Y+4	; 0x04
    5244:	01 96       	adiw	r24, 0x01	; 1
    5246:	a1 1d       	adc	r26, r1
    5248:	b1 1d       	adc	r27, r1
    524a:	89 83       	std	Y+1, r24	; 0x01
    524c:	9a 83       	std	Y+2, r25	; 0x02
    524e:	ab 83       	std	Y+3, r26	; 0x03
    5250:	bc 83       	std	Y+4, r27	; 0x04
	{
		Local_u8ErrorState = NULL_POINTER;
	}
	else
	{
		while((GET_BIT(UCSRA,UCSRA_RXC)==0)&&(Local_u32counter<USART_u32TIMEOUT))
    5252:	eb e2       	ldi	r30, 0x2B	; 43
    5254:	f0 e0       	ldi	r31, 0x00	; 0
    5256:	80 81       	ld	r24, Z
    5258:	88 23       	and	r24, r24
    525a:	64 f0       	brlt	.+24     	; 0x5274 <USART_u8ReceivePolling+0x68>
    525c:	89 81       	ldd	r24, Y+1	; 0x01
    525e:	9a 81       	ldd	r25, Y+2	; 0x02
    5260:	ab 81       	ldd	r26, Y+3	; 0x03
    5262:	bc 81       	ldd	r27, Y+4	; 0x04
    5264:	80 35       	cpi	r24, 0x50	; 80
    5266:	23 ec       	ldi	r18, 0xC3	; 195
    5268:	92 07       	cpc	r25, r18
    526a:	20 e0       	ldi	r18, 0x00	; 0
    526c:	a2 07       	cpc	r26, r18
    526e:	20 e0       	ldi	r18, 0x00	; 0
    5270:	b2 07       	cpc	r27, r18
    5272:	20 f3       	brcs	.-56     	; 0x523c <USART_u8ReceivePolling+0x30>
		{
			Local_u32counter++;
		}
		if(Local_u32counter==USART_u32TIMEOUT)
    5274:	89 81       	ldd	r24, Y+1	; 0x01
    5276:	9a 81       	ldd	r25, Y+2	; 0x02
    5278:	ab 81       	ldd	r26, Y+3	; 0x03
    527a:	bc 81       	ldd	r27, Y+4	; 0x04
    527c:	80 35       	cpi	r24, 0x50	; 80
    527e:	23 ec       	ldi	r18, 0xC3	; 195
    5280:	92 07       	cpc	r25, r18
    5282:	20 e0       	ldi	r18, 0x00	; 0
    5284:	a2 07       	cpc	r26, r18
    5286:	20 e0       	ldi	r18, 0x00	; 0
    5288:	b2 07       	cpc	r27, r18
    528a:	19 f4       	brne	.+6      	; 0x5292 <USART_u8ReceivePolling+0x86>
		{
			Local_u8ErrorState = NOTOK;
    528c:	81 e0       	ldi	r24, 0x01	; 1
    528e:	8d 83       	std	Y+5, r24	; 0x05
    5290:	1c c0       	rjmp	.+56     	; 0x52ca <USART_u8ReceivePolling+0xbe>
		}
		else{
			*Copy_pu16Read = UDR;
    5292:	ec e2       	ldi	r30, 0x2C	; 44
    5294:	f0 e0       	ldi	r31, 0x00	; 0
    5296:	80 81       	ld	r24, Z
    5298:	88 2f       	mov	r24, r24
    529a:	90 e0       	ldi	r25, 0x00	; 0
    529c:	ee 81       	ldd	r30, Y+6	; 0x06
    529e:	ff 81       	ldd	r31, Y+7	; 0x07
    52a0:	91 83       	std	Z+1, r25	; 0x01
    52a2:	80 83       	st	Z, r24
			if(GET_BIT(UCSRB,UCSRB_RXB8))
    52a4:	ea e2       	ldi	r30, 0x2A	; 42
    52a6:	f0 e0       	ldi	r31, 0x00	; 0
    52a8:	80 81       	ld	r24, Z
    52aa:	86 95       	lsr	r24
    52ac:	88 2f       	mov	r24, r24
    52ae:	90 e0       	ldi	r25, 0x00	; 0
    52b0:	81 70       	andi	r24, 0x01	; 1
    52b2:	90 70       	andi	r25, 0x00	; 0
    52b4:	88 23       	and	r24, r24
    52b6:	49 f0       	breq	.+18     	; 0x52ca <USART_u8ReceivePolling+0xbe>
				*Copy_pu16Read |= 1<<8;
    52b8:	ee 81       	ldd	r30, Y+6	; 0x06
    52ba:	ff 81       	ldd	r31, Y+7	; 0x07
    52bc:	80 81       	ld	r24, Z
    52be:	91 81       	ldd	r25, Z+1	; 0x01
    52c0:	91 60       	ori	r25, 0x01	; 1
    52c2:	ee 81       	ldd	r30, Y+6	; 0x06
    52c4:	ff 81       	ldd	r31, Y+7	; 0x07
    52c6:	91 83       	std	Z+1, r25	; 0x01
    52c8:	80 83       	st	Z, r24
		}
	}
	return Local_u8ErrorState;
    52ca:	8d 81       	ldd	r24, Y+5	; 0x05
}
    52cc:	27 96       	adiw	r28, 0x07	; 7
    52ce:	0f b6       	in	r0, 0x3f	; 63
    52d0:	f8 94       	cli
    52d2:	de bf       	out	0x3e, r29	; 62
    52d4:	0f be       	out	0x3f, r0	; 63
    52d6:	cd bf       	out	0x3d, r28	; 61
    52d8:	cf 91       	pop	r28
    52da:	df 91       	pop	r29
    52dc:	08 95       	ret

000052de <USART_u8ReceivePollingWithOut>:

u8 USART_u8ReceivePollingWithOut(u16 *Copy_pu16Read)
{
    52de:	df 93       	push	r29
    52e0:	cf 93       	push	r28
    52e2:	00 d0       	rcall	.+0      	; 0x52e4 <USART_u8ReceivePollingWithOut+0x6>
    52e4:	0f 92       	push	r0
    52e6:	cd b7       	in	r28, 0x3d	; 61
    52e8:	de b7       	in	r29, 0x3e	; 62
    52ea:	9b 83       	std	Y+3, r25	; 0x03
    52ec:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    52ee:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu16Read==NULL)
    52f0:	8a 81       	ldd	r24, Y+2	; 0x02
    52f2:	9b 81       	ldd	r25, Y+3	; 0x03
    52f4:	00 97       	sbiw	r24, 0x00	; 0
    52f6:	19 f4       	brne	.+6      	; 0x52fe <USART_u8ReceivePollingWithOut+0x20>
	{
		Local_u8ErrorState = NULL_POINTER;
    52f8:	82 e0       	ldi	r24, 0x02	; 2
    52fa:	89 83       	std	Y+1, r24	; 0x01
    52fc:	21 c0       	rjmp	.+66     	; 0x5340 <USART_u8ReceivePollingWithOut+0x62>
	}
	else
	{
		while((GET_BIT(UCSRA,UCSRA_RXC)==0));
    52fe:	eb e2       	ldi	r30, 0x2B	; 43
    5300:	f0 e0       	ldi	r31, 0x00	; 0
    5302:	80 81       	ld	r24, Z
    5304:	88 23       	and	r24, r24
    5306:	dc f7       	brge	.-10     	; 0x52fe <USART_u8ReceivePollingWithOut+0x20>
		*Copy_pu16Read = UDR;
    5308:	ec e2       	ldi	r30, 0x2C	; 44
    530a:	f0 e0       	ldi	r31, 0x00	; 0
    530c:	80 81       	ld	r24, Z
    530e:	88 2f       	mov	r24, r24
    5310:	90 e0       	ldi	r25, 0x00	; 0
    5312:	ea 81       	ldd	r30, Y+2	; 0x02
    5314:	fb 81       	ldd	r31, Y+3	; 0x03
    5316:	91 83       	std	Z+1, r25	; 0x01
    5318:	80 83       	st	Z, r24
		if(GET_BIT(UCSRB,UCSRB_RXB8))
    531a:	ea e2       	ldi	r30, 0x2A	; 42
    531c:	f0 e0       	ldi	r31, 0x00	; 0
    531e:	80 81       	ld	r24, Z
    5320:	86 95       	lsr	r24
    5322:	88 2f       	mov	r24, r24
    5324:	90 e0       	ldi	r25, 0x00	; 0
    5326:	81 70       	andi	r24, 0x01	; 1
    5328:	90 70       	andi	r25, 0x00	; 0
    532a:	88 23       	and	r24, r24
    532c:	49 f0       	breq	.+18     	; 0x5340 <USART_u8ReceivePollingWithOut+0x62>
			*Copy_pu16Read |= 1<<8;
    532e:	ea 81       	ldd	r30, Y+2	; 0x02
    5330:	fb 81       	ldd	r31, Y+3	; 0x03
    5332:	80 81       	ld	r24, Z
    5334:	91 81       	ldd	r25, Z+1	; 0x01
    5336:	91 60       	ori	r25, 0x01	; 1
    5338:	ea 81       	ldd	r30, Y+2	; 0x02
    533a:	fb 81       	ldd	r31, Y+3	; 0x03
    533c:	91 83       	std	Z+1, r25	; 0x01
    533e:	80 83       	st	Z, r24
	}
	return Local_u8ErrorState;
    5340:	89 81       	ldd	r24, Y+1	; 0x01
}
    5342:	0f 90       	pop	r0
    5344:	0f 90       	pop	r0
    5346:	0f 90       	pop	r0
    5348:	cf 91       	pop	r28
    534a:	df 91       	pop	r29
    534c:	08 95       	ret

0000534e <USART_u8SendStringPoll>:

u8 USART_u8SendStringPoll(const char* Copy_pcString)
{
    534e:	df 93       	push	r29
    5350:	cf 93       	push	r28
    5352:	00 d0       	rcall	.+0      	; 0x5354 <USART_u8SendStringPoll+0x6>
    5354:	00 d0       	rcall	.+0      	; 0x5356 <USART_u8SendStringPoll+0x8>
    5356:	cd b7       	in	r28, 0x3d	; 61
    5358:	de b7       	in	r29, 0x3e	; 62
    535a:	9c 83       	std	Y+4, r25	; 0x04
    535c:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState = OK;
    535e:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8counter = 0;
    5360:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pcString==NULL)
    5362:	8b 81       	ldd	r24, Y+3	; 0x03
    5364:	9c 81       	ldd	r25, Y+4	; 0x04
    5366:	00 97       	sbiw	r24, 0x00	; 0
    5368:	89 f4       	brne	.+34     	; 0x538c <USART_u8SendStringPoll+0x3e>
	{
		Local_u8ErrorState = NULL_POINTER;
    536a:	82 e0       	ldi	r24, 0x02	; 2
    536c:	8a 83       	std	Y+2, r24	; 0x02
    536e:	19 c0       	rjmp	.+50     	; 0x53a2 <USART_u8SendStringPoll+0x54>
	}
	else
	{
		while(Copy_pcString[Local_u8counter]!='\0')
		{
			USART_u8SendPolling(Copy_pcString[Local_u8counter]);
    5370:	89 81       	ldd	r24, Y+1	; 0x01
    5372:	28 2f       	mov	r18, r24
    5374:	30 e0       	ldi	r19, 0x00	; 0
    5376:	8b 81       	ldd	r24, Y+3	; 0x03
    5378:	9c 81       	ldd	r25, Y+4	; 0x04
    537a:	fc 01       	movw	r30, r24
    537c:	e2 0f       	add	r30, r18
    537e:	f3 1f       	adc	r31, r19
    5380:	80 81       	ld	r24, Z
    5382:	0e 94 b1 28 	call	0x5162	; 0x5162 <USART_u8SendPolling>
			Local_u8counter++;
    5386:	89 81       	ldd	r24, Y+1	; 0x01
    5388:	8f 5f       	subi	r24, 0xFF	; 255
    538a:	89 83       	std	Y+1, r24	; 0x01
	{
		Local_u8ErrorState = NULL_POINTER;
	}
	else
	{
		while(Copy_pcString[Local_u8counter]!='\0')
    538c:	89 81       	ldd	r24, Y+1	; 0x01
    538e:	28 2f       	mov	r18, r24
    5390:	30 e0       	ldi	r19, 0x00	; 0
    5392:	8b 81       	ldd	r24, Y+3	; 0x03
    5394:	9c 81       	ldd	r25, Y+4	; 0x04
    5396:	fc 01       	movw	r30, r24
    5398:	e2 0f       	add	r30, r18
    539a:	f3 1f       	adc	r31, r19
    539c:	80 81       	ld	r24, Z
    539e:	88 23       	and	r24, r24
    53a0:	39 f7       	brne	.-50     	; 0x5370 <USART_u8SendStringPoll+0x22>
		{
			USART_u8SendPolling(Copy_pcString[Local_u8counter]);
			Local_u8counter++;
		}
	}
	return Local_u8ErrorState;
    53a2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    53a4:	0f 90       	pop	r0
    53a6:	0f 90       	pop	r0
    53a8:	0f 90       	pop	r0
    53aa:	0f 90       	pop	r0
    53ac:	cf 91       	pop	r28
    53ae:	df 91       	pop	r29
    53b0:	08 95       	ret

000053b2 <USART_u8ReceiveBufferPollWithOut>:
u8 USART_u8ReceiveBufferPollWithOut(char* Copy_pcString,u8 Copy_u8BufferSize)
{
    53b2:	df 93       	push	r29
    53b4:	cf 93       	push	r28
    53b6:	00 d0       	rcall	.+0      	; 0x53b8 <USART_u8ReceiveBufferPollWithOut+0x6>
    53b8:	00 d0       	rcall	.+0      	; 0x53ba <USART_u8ReceiveBufferPollWithOut+0x8>
    53ba:	0f 92       	push	r0
    53bc:	cd b7       	in	r28, 0x3d	; 61
    53be:	de b7       	in	r29, 0x3e	; 62
    53c0:	9c 83       	std	Y+4, r25	; 0x04
    53c2:	8b 83       	std	Y+3, r24	; 0x03
    53c4:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8ErrorState = OK;
    53c6:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8counter = 0;
    53c8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pcString==NULL)
    53ca:	8b 81       	ldd	r24, Y+3	; 0x03
    53cc:	9c 81       	ldd	r25, Y+4	; 0x04
    53ce:	00 97       	sbiw	r24, 0x00	; 0
    53d0:	19 f4       	brne	.+6      	; 0x53d8 <USART_u8ReceiveBufferPollWithOut+0x26>
	{
		Local_u8ErrorState = NULL_POINTER;
    53d2:	82 e0       	ldi	r24, 0x02	; 2
    53d4:	8a 83       	std	Y+2, r24	; 0x02
    53d6:	57 c0       	rjmp	.+174    	; 0x5486 <USART_u8ReceiveBufferPollWithOut+0xd4>
	}
	else
	{
		for(Local_u8counter=0;Local_u8counter<Copy_u8BufferSize;Local_u8counter++)
    53d8:	19 82       	std	Y+1, r1	; 0x01
    53da:	44 c0       	rjmp	.+136    	; 0x5464 <USART_u8ReceiveBufferPollWithOut+0xb2>
		{
			USART_u8ReceivePollingWithOut((u16*)(Copy_pcString+Local_u8counter));
    53dc:	2b 81       	ldd	r18, Y+3	; 0x03
    53de:	3c 81       	ldd	r19, Y+4	; 0x04
    53e0:	89 81       	ldd	r24, Y+1	; 0x01
    53e2:	88 2f       	mov	r24, r24
    53e4:	90 e0       	ldi	r25, 0x00	; 0
    53e6:	82 0f       	add	r24, r18
    53e8:	93 1f       	adc	r25, r19
    53ea:	0e 94 6f 29 	call	0x52de	; 0x52de <USART_u8ReceivePollingWithOut>
			if(Local_u8counter>=3)
    53ee:	89 81       	ldd	r24, Y+1	; 0x01
    53f0:	83 30       	cpi	r24, 0x03	; 3
    53f2:	a8 f1       	brcs	.+106    	; 0x545e <USART_u8ReceiveBufferPollWithOut+0xac>
			if(('e'==Copy_pcString[Local_u8counter])&&('n'==Copy_pcString[Local_u8counter-1])&&('o'==Copy_pcString[Local_u8counter-2])&&('d'==Copy_pcString[Local_u8counter-3]))
    53f4:	89 81       	ldd	r24, Y+1	; 0x01
    53f6:	28 2f       	mov	r18, r24
    53f8:	30 e0       	ldi	r19, 0x00	; 0
    53fa:	8b 81       	ldd	r24, Y+3	; 0x03
    53fc:	9c 81       	ldd	r25, Y+4	; 0x04
    53fe:	fc 01       	movw	r30, r24
    5400:	e2 0f       	add	r30, r18
    5402:	f3 1f       	adc	r31, r19
    5404:	80 81       	ld	r24, Z
    5406:	85 36       	cpi	r24, 0x65	; 101
    5408:	51 f5       	brne	.+84     	; 0x545e <USART_u8ReceiveBufferPollWithOut+0xac>
    540a:	89 81       	ldd	r24, Y+1	; 0x01
    540c:	88 2f       	mov	r24, r24
    540e:	90 e0       	ldi	r25, 0x00	; 0
    5410:	9c 01       	movw	r18, r24
    5412:	21 50       	subi	r18, 0x01	; 1
    5414:	30 40       	sbci	r19, 0x00	; 0
    5416:	8b 81       	ldd	r24, Y+3	; 0x03
    5418:	9c 81       	ldd	r25, Y+4	; 0x04
    541a:	fc 01       	movw	r30, r24
    541c:	e2 0f       	add	r30, r18
    541e:	f3 1f       	adc	r31, r19
    5420:	80 81       	ld	r24, Z
    5422:	8e 36       	cpi	r24, 0x6E	; 110
    5424:	e1 f4       	brne	.+56     	; 0x545e <USART_u8ReceiveBufferPollWithOut+0xac>
    5426:	89 81       	ldd	r24, Y+1	; 0x01
    5428:	88 2f       	mov	r24, r24
    542a:	90 e0       	ldi	r25, 0x00	; 0
    542c:	9c 01       	movw	r18, r24
    542e:	22 50       	subi	r18, 0x02	; 2
    5430:	30 40       	sbci	r19, 0x00	; 0
    5432:	8b 81       	ldd	r24, Y+3	; 0x03
    5434:	9c 81       	ldd	r25, Y+4	; 0x04
    5436:	fc 01       	movw	r30, r24
    5438:	e2 0f       	add	r30, r18
    543a:	f3 1f       	adc	r31, r19
    543c:	80 81       	ld	r24, Z
    543e:	8f 36       	cpi	r24, 0x6F	; 111
    5440:	71 f4       	brne	.+28     	; 0x545e <USART_u8ReceiveBufferPollWithOut+0xac>
    5442:	89 81       	ldd	r24, Y+1	; 0x01
    5444:	88 2f       	mov	r24, r24
    5446:	90 e0       	ldi	r25, 0x00	; 0
    5448:	9c 01       	movw	r18, r24
    544a:	23 50       	subi	r18, 0x03	; 3
    544c:	30 40       	sbci	r19, 0x00	; 0
    544e:	8b 81       	ldd	r24, Y+3	; 0x03
    5450:	9c 81       	ldd	r25, Y+4	; 0x04
    5452:	fc 01       	movw	r30, r24
    5454:	e2 0f       	add	r30, r18
    5456:	f3 1f       	adc	r31, r19
    5458:	80 81       	ld	r24, Z
    545a:	84 36       	cpi	r24, 0x64	; 100
    545c:	41 f0       	breq	.+16     	; 0x546e <USART_u8ReceiveBufferPollWithOut+0xbc>
	{
		Local_u8ErrorState = NULL_POINTER;
	}
	else
	{
		for(Local_u8counter=0;Local_u8counter<Copy_u8BufferSize;Local_u8counter++)
    545e:	89 81       	ldd	r24, Y+1	; 0x01
    5460:	8f 5f       	subi	r24, 0xFF	; 255
    5462:	89 83       	std	Y+1, r24	; 0x01
    5464:	99 81       	ldd	r25, Y+1	; 0x01
    5466:	8d 81       	ldd	r24, Y+5	; 0x05
    5468:	98 17       	cp	r25, r24
    546a:	08 f4       	brcc	.+2      	; 0x546e <USART_u8ReceiveBufferPollWithOut+0xbc>
    546c:	b7 cf       	rjmp	.-146    	; 0x53dc <USART_u8ReceiveBufferPollWithOut+0x2a>
			USART_u8ReceivePollingWithOut((u16*)(Copy_pcString+Local_u8counter));
			if(Local_u8counter>=3)
			if(('e'==Copy_pcString[Local_u8counter])&&('n'==Copy_pcString[Local_u8counter-1])&&('o'==Copy_pcString[Local_u8counter-2])&&('d'==Copy_pcString[Local_u8counter-3]))
				break;
		}
		Copy_pcString[Local_u8counter+1]='\0';
    546e:	89 81       	ldd	r24, Y+1	; 0x01
    5470:	88 2f       	mov	r24, r24
    5472:	90 e0       	ldi	r25, 0x00	; 0
    5474:	9c 01       	movw	r18, r24
    5476:	2f 5f       	subi	r18, 0xFF	; 255
    5478:	3f 4f       	sbci	r19, 0xFF	; 255
    547a:	8b 81       	ldd	r24, Y+3	; 0x03
    547c:	9c 81       	ldd	r25, Y+4	; 0x04
    547e:	fc 01       	movw	r30, r24
    5480:	e2 0f       	add	r30, r18
    5482:	f3 1f       	adc	r31, r19
    5484:	10 82       	st	Z, r1
	}
	return Local_u8ErrorState;
    5486:	8a 81       	ldd	r24, Y+2	; 0x02

}
    5488:	0f 90       	pop	r0
    548a:	0f 90       	pop	r0
    548c:	0f 90       	pop	r0
    548e:	0f 90       	pop	r0
    5490:	0f 90       	pop	r0
    5492:	cf 91       	pop	r28
    5494:	df 91       	pop	r29
    5496:	08 95       	ret

00005498 <USART_u8ReceiveBufferPoll>:
u8 USART_u8ReceiveBufferPoll(char* Copy_pcString,u8 Copy_u8BufferSize)
{
    5498:	df 93       	push	r29
    549a:	cf 93       	push	r28
    549c:	00 d0       	rcall	.+0      	; 0x549e <USART_u8ReceiveBufferPoll+0x6>
    549e:	00 d0       	rcall	.+0      	; 0x54a0 <USART_u8ReceiveBufferPoll+0x8>
    54a0:	0f 92       	push	r0
    54a2:	cd b7       	in	r28, 0x3d	; 61
    54a4:	de b7       	in	r29, 0x3e	; 62
    54a6:	9c 83       	std	Y+4, r25	; 0x04
    54a8:	8b 83       	std	Y+3, r24	; 0x03
    54aa:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8ErrorState = OK;
    54ac:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8counter = 0;
    54ae:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pcString==NULL)
    54b0:	8b 81       	ldd	r24, Y+3	; 0x03
    54b2:	9c 81       	ldd	r25, Y+4	; 0x04
    54b4:	00 97       	sbiw	r24, 0x00	; 0
    54b6:	19 f4       	brne	.+6      	; 0x54be <USART_u8ReceiveBufferPoll+0x26>
	{
		Local_u8ErrorState = NULL_POINTER;
    54b8:	82 e0       	ldi	r24, 0x02	; 2
    54ba:	8a 83       	std	Y+2, r24	; 0x02
    54bc:	26 c0       	rjmp	.+76     	; 0x550a <USART_u8ReceiveBufferPoll+0x72>
	}
	else
	{
		for(Local_u8counter=0;Local_u8counter<Copy_u8BufferSize;Local_u8counter++)
    54be:	19 82       	std	Y+1, r1	; 0x01
    54c0:	17 c0       	rjmp	.+46     	; 0x54f0 <USART_u8ReceiveBufferPoll+0x58>
		{
			USART_u8ReceivePolling((u16*)(Copy_pcString+Local_u8counter));
    54c2:	2b 81       	ldd	r18, Y+3	; 0x03
    54c4:	3c 81       	ldd	r19, Y+4	; 0x04
    54c6:	89 81       	ldd	r24, Y+1	; 0x01
    54c8:	88 2f       	mov	r24, r24
    54ca:	90 e0       	ldi	r25, 0x00	; 0
    54cc:	82 0f       	add	r24, r18
    54ce:	93 1f       	adc	r25, r19
    54d0:	0e 94 06 29 	call	0x520c	; 0x520c <USART_u8ReceivePolling>
			if(0x0D==Copy_pcString[Local_u8counter])
    54d4:	89 81       	ldd	r24, Y+1	; 0x01
    54d6:	28 2f       	mov	r18, r24
    54d8:	30 e0       	ldi	r19, 0x00	; 0
    54da:	8b 81       	ldd	r24, Y+3	; 0x03
    54dc:	9c 81       	ldd	r25, Y+4	; 0x04
    54de:	fc 01       	movw	r30, r24
    54e0:	e2 0f       	add	r30, r18
    54e2:	f3 1f       	adc	r31, r19
    54e4:	80 81       	ld	r24, Z
    54e6:	8d 30       	cpi	r24, 0x0D	; 13
    54e8:	39 f0       	breq	.+14     	; 0x54f8 <USART_u8ReceiveBufferPoll+0x60>
	{
		Local_u8ErrorState = NULL_POINTER;
	}
	else
	{
		for(Local_u8counter=0;Local_u8counter<Copy_u8BufferSize;Local_u8counter++)
    54ea:	89 81       	ldd	r24, Y+1	; 0x01
    54ec:	8f 5f       	subi	r24, 0xFF	; 255
    54ee:	89 83       	std	Y+1, r24	; 0x01
    54f0:	99 81       	ldd	r25, Y+1	; 0x01
    54f2:	8d 81       	ldd	r24, Y+5	; 0x05
    54f4:	98 17       	cp	r25, r24
    54f6:	28 f3       	brcs	.-54     	; 0x54c2 <USART_u8ReceiveBufferPoll+0x2a>
		{
			USART_u8ReceivePolling((u16*)(Copy_pcString+Local_u8counter));
			if(0x0D==Copy_pcString[Local_u8counter])
				break;
		}
		Copy_pcString[Local_u8counter]='\0';
    54f8:	89 81       	ldd	r24, Y+1	; 0x01
    54fa:	28 2f       	mov	r18, r24
    54fc:	30 e0       	ldi	r19, 0x00	; 0
    54fe:	8b 81       	ldd	r24, Y+3	; 0x03
    5500:	9c 81       	ldd	r25, Y+4	; 0x04
    5502:	fc 01       	movw	r30, r24
    5504:	e2 0f       	add	r30, r18
    5506:	f3 1f       	adc	r31, r19
    5508:	10 82       	st	Z, r1
	}
	return Local_u8ErrorState;
    550a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    550c:	0f 90       	pop	r0
    550e:	0f 90       	pop	r0
    5510:	0f 90       	pop	r0
    5512:	0f 90       	pop	r0
    5514:	0f 90       	pop	r0
    5516:	cf 91       	pop	r28
    5518:	df 91       	pop	r29
    551a:	08 95       	ret

0000551c <USART_u8SendCharInt>:

u8 USART_u8SendCharInt(u8 Copy_u8Data,void(*Notification)())
{
    551c:	df 93       	push	r29
    551e:	cf 93       	push	r28
    5520:	00 d0       	rcall	.+0      	; 0x5522 <USART_u8SendCharInt+0x6>
    5522:	00 d0       	rcall	.+0      	; 0x5524 <USART_u8SendCharInt+0x8>
    5524:	cd b7       	in	r28, 0x3d	; 61
    5526:	de b7       	in	r29, 0x3e	; 62
    5528:	8a 83       	std	Y+2, r24	; 0x02
    552a:	7c 83       	std	Y+4, r23	; 0x04
    552c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = OK;
    552e:	19 82       	std	Y+1, r1	; 0x01
	if(Notification==NULL)
    5530:	8b 81       	ldd	r24, Y+3	; 0x03
    5532:	9c 81       	ldd	r25, Y+4	; 0x04
    5534:	00 97       	sbiw	r24, 0x00	; 0
    5536:	19 f4       	brne	.+6      	; 0x553e <USART_u8SendCharInt+0x22>
	{
		Local_u8ErrorState = NULL_POINTER;
    5538:	82 e0       	ldi	r24, 0x02	; 2
    553a:	89 83       	std	Y+1, r24	; 0x01
    553c:	1c c0       	rjmp	.+56     	; 0x5576 <USART_u8SendCharInt+0x5a>
	}
	else
	{
		if(Global_u8BusyFlag==IDLE)
    553e:	80 91 c7 02 	lds	r24, 0x02C7
    5542:	88 23       	and	r24, r24
    5544:	b1 f4       	brne	.+44     	; 0x5572 <USART_u8SendCharInt+0x56>
		{
			Global_u8BusyFlag = BUSY;
    5546:	81 e0       	ldi	r24, 0x01	; 1
    5548:	80 93 c7 02 	sts	0x02C7, r24
			Global_u8DirectionSend = SINGLE_CHER_SEND;
    554c:	10 92 c8 02 	sts	0x02C8, r1
			Global_u8SendChar = Copy_u8Data;
    5550:	8a 81       	ldd	r24, Y+2	; 0x02
    5552:	80 93 d1 02 	sts	0x02D1, r24
			Global_pvCallBackFuncSend = Notification;
    5556:	8b 81       	ldd	r24, Y+3	; 0x03
    5558:	9c 81       	ldd	r25, Y+4	; 0x04
    555a:	90 93 c6 02 	sts	0x02C6, r25
    555e:	80 93 c5 02 	sts	0x02C5, r24
			SET_BIT(UCSRB,UCSRB_UDRIE);
    5562:	aa e2       	ldi	r26, 0x2A	; 42
    5564:	b0 e0       	ldi	r27, 0x00	; 0
    5566:	ea e2       	ldi	r30, 0x2A	; 42
    5568:	f0 e0       	ldi	r31, 0x00	; 0
    556a:	80 81       	ld	r24, Z
    556c:	80 62       	ori	r24, 0x20	; 32
    556e:	8c 93       	st	X, r24
    5570:	02 c0       	rjmp	.+4      	; 0x5576 <USART_u8SendCharInt+0x5a>
		}
		else
		{
			Local_u8ErrorState = BUSY_FUNC;
    5572:	83 e0       	ldi	r24, 0x03	; 3
    5574:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_u8ErrorState;
    5576:	89 81       	ldd	r24, Y+1	; 0x01

}
    5578:	0f 90       	pop	r0
    557a:	0f 90       	pop	r0
    557c:	0f 90       	pop	r0
    557e:	0f 90       	pop	r0
    5580:	cf 91       	pop	r28
    5582:	df 91       	pop	r29
    5584:	08 95       	ret

00005586 <USART_u8SendStringInt>:
u8 USART_u8SendStringInt(char* Copy_pcString,void(*Notification)())
{
    5586:	df 93       	push	r29
    5588:	cf 93       	push	r28
    558a:	00 d0       	rcall	.+0      	; 0x558c <USART_u8SendStringInt+0x6>
    558c:	00 d0       	rcall	.+0      	; 0x558e <USART_u8SendStringInt+0x8>
    558e:	0f 92       	push	r0
    5590:	cd b7       	in	r28, 0x3d	; 61
    5592:	de b7       	in	r29, 0x3e	; 62
    5594:	9b 83       	std	Y+3, r25	; 0x03
    5596:	8a 83       	std	Y+2, r24	; 0x02
    5598:	7d 83       	std	Y+5, r23	; 0x05
    559a:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK;
    559c:	19 82       	std	Y+1, r1	; 0x01
	if((Notification==NULL)||(Copy_pcString==NULL))
    559e:	8c 81       	ldd	r24, Y+4	; 0x04
    55a0:	9d 81       	ldd	r25, Y+5	; 0x05
    55a2:	00 97       	sbiw	r24, 0x00	; 0
    55a4:	21 f0       	breq	.+8      	; 0x55ae <USART_u8SendStringInt+0x28>
    55a6:	8a 81       	ldd	r24, Y+2	; 0x02
    55a8:	9b 81       	ldd	r25, Y+3	; 0x03
    55aa:	00 97       	sbiw	r24, 0x00	; 0
    55ac:	19 f4       	brne	.+6      	; 0x55b4 <USART_u8SendStringInt+0x2e>
	{
		Local_u8ErrorState = NULL_POINTER;
    55ae:	82 e0       	ldi	r24, 0x02	; 2
    55b0:	89 83       	std	Y+1, r24	; 0x01
    55b2:	20 c0       	rjmp	.+64     	; 0x55f4 <USART_u8SendStringInt+0x6e>
	}
	else
	{
		if(Global_u8BusyFlag==IDLE)
    55b4:	80 91 c7 02 	lds	r24, 0x02C7
    55b8:	88 23       	and	r24, r24
    55ba:	d1 f4       	brne	.+52     	; 0x55f0 <USART_u8SendStringInt+0x6a>
		{
			Global_u8BusyFlag = BUSY;
    55bc:	81 e0       	ldi	r24, 0x01	; 1
    55be:	80 93 c7 02 	sts	0x02C7, r24
			Global_u8DirectionSend = MULTI_CHER_SEND;
    55c2:	81 e0       	ldi	r24, 0x01	; 1
    55c4:	80 93 c8 02 	sts	0x02C8, r24
			Global_pcByteString = Copy_pcString;
    55c8:	8a 81       	ldd	r24, Y+2	; 0x02
    55ca:	9b 81       	ldd	r25, Y+3	; 0x03
    55cc:	90 93 ca 02 	sts	0x02CA, r25
    55d0:	80 93 c9 02 	sts	0x02C9, r24
			Global_pvCallBackFuncSend = Notification;
    55d4:	8c 81       	ldd	r24, Y+4	; 0x04
    55d6:	9d 81       	ldd	r25, Y+5	; 0x05
    55d8:	90 93 c6 02 	sts	0x02C6, r25
    55dc:	80 93 c5 02 	sts	0x02C5, r24
			SET_BIT(UCSRB,UCSRB_UDRIE);
    55e0:	aa e2       	ldi	r26, 0x2A	; 42
    55e2:	b0 e0       	ldi	r27, 0x00	; 0
    55e4:	ea e2       	ldi	r30, 0x2A	; 42
    55e6:	f0 e0       	ldi	r31, 0x00	; 0
    55e8:	80 81       	ld	r24, Z
    55ea:	80 62       	ori	r24, 0x20	; 32
    55ec:	8c 93       	st	X, r24
    55ee:	02 c0       	rjmp	.+4      	; 0x55f4 <USART_u8SendStringInt+0x6e>
		}
		else
		{
			Local_u8ErrorState = BUSY_FUNC;
    55f0:	83 e0       	ldi	r24, 0x03	; 3
    55f2:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_u8ErrorState;
    55f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    55f6:	0f 90       	pop	r0
    55f8:	0f 90       	pop	r0
    55fa:	0f 90       	pop	r0
    55fc:	0f 90       	pop	r0
    55fe:	0f 90       	pop	r0
    5600:	cf 91       	pop	r28
    5602:	df 91       	pop	r29
    5604:	08 95       	ret

00005606 <USART_u8ReceiveCharInt>:
u8 USART_u8ReceiveCharInt(u16 *Copy_pu16Read,void(*Notification)())
{
    5606:	df 93       	push	r29
    5608:	cf 93       	push	r28
    560a:	00 d0       	rcall	.+0      	; 0x560c <USART_u8ReceiveCharInt+0x6>
    560c:	00 d0       	rcall	.+0      	; 0x560e <USART_u8ReceiveCharInt+0x8>
    560e:	0f 92       	push	r0
    5610:	cd b7       	in	r28, 0x3d	; 61
    5612:	de b7       	in	r29, 0x3e	; 62
    5614:	9b 83       	std	Y+3, r25	; 0x03
    5616:	8a 83       	std	Y+2, r24	; 0x02
    5618:	7d 83       	std	Y+5, r23	; 0x05
    561a:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK;
    561c:	19 82       	std	Y+1, r1	; 0x01
	if((Notification==NULL)||(Copy_pu16Read==NULL))
    561e:	8c 81       	ldd	r24, Y+4	; 0x04
    5620:	9d 81       	ldd	r25, Y+5	; 0x05
    5622:	00 97       	sbiw	r24, 0x00	; 0
    5624:	21 f0       	breq	.+8      	; 0x562e <USART_u8ReceiveCharInt+0x28>
    5626:	8a 81       	ldd	r24, Y+2	; 0x02
    5628:	9b 81       	ldd	r25, Y+3	; 0x03
    562a:	00 97       	sbiw	r24, 0x00	; 0
    562c:	19 f4       	brne	.+6      	; 0x5634 <USART_u8ReceiveCharInt+0x2e>
	{
		Local_u8ErrorState = NULL_POINTER;
    562e:	82 e0       	ldi	r24, 0x02	; 2
    5630:	89 83       	std	Y+1, r24	; 0x01
    5632:	20 c0       	rjmp	.+64     	; 0x5674 <USART_u8ReceiveCharInt+0x6e>
	}
	else
	{
		if(Global_u8BusyFlag==IDLE)
    5634:	80 91 c7 02 	lds	r24, 0x02C7
    5638:	88 23       	and	r24, r24
    563a:	d1 f4       	brne	.+52     	; 0x5670 <USART_u8ReceiveCharInt+0x6a>
		{
			Global_u8BusyFlag = BUSY;
    563c:	81 e0       	ldi	r24, 0x01	; 1
    563e:	80 93 c7 02 	sts	0x02C7, r24
			Global_u8DirectionRecv = SINGLE_CHER_RECV;
    5642:	82 e0       	ldi	r24, 0x02	; 2
    5644:	80 93 80 02 	sts	0x0280, r24
			Global_u16ReceiveChar = Copy_pu16Read;
    5648:	8a 81       	ldd	r24, Y+2	; 0x02
    564a:	9b 81       	ldd	r25, Y+3	; 0x03
    564c:	90 93 cc 02 	sts	0x02CC, r25
    5650:	80 93 cb 02 	sts	0x02CB, r24
			Global_pvCallBackFuncRecv = Notification;
    5654:	8c 81       	ldd	r24, Y+4	; 0x04
    5656:	9d 81       	ldd	r25, Y+5	; 0x05
    5658:	90 93 ce 02 	sts	0x02CE, r25
    565c:	80 93 cd 02 	sts	0x02CD, r24
			SET_BIT(UCSRB,UCSRB_RXCIE);
    5660:	aa e2       	ldi	r26, 0x2A	; 42
    5662:	b0 e0       	ldi	r27, 0x00	; 0
    5664:	ea e2       	ldi	r30, 0x2A	; 42
    5666:	f0 e0       	ldi	r31, 0x00	; 0
    5668:	80 81       	ld	r24, Z
    566a:	80 68       	ori	r24, 0x80	; 128
    566c:	8c 93       	st	X, r24
    566e:	02 c0       	rjmp	.+4      	; 0x5674 <USART_u8ReceiveCharInt+0x6e>
		}
		else
			Local_u8ErrorState = BUSY_FUNC;
    5670:	83 e0       	ldi	r24, 0x03	; 3
    5672:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    5674:	89 81       	ldd	r24, Y+1	; 0x01
}
    5676:	0f 90       	pop	r0
    5678:	0f 90       	pop	r0
    567a:	0f 90       	pop	r0
    567c:	0f 90       	pop	r0
    567e:	0f 90       	pop	r0
    5680:	cf 91       	pop	r28
    5682:	df 91       	pop	r29
    5684:	08 95       	ret

00005686 <USART_u8ReceiveBufferInt>:
u8 USART_u8ReceiveBufferInt(char *Copy_pcString,u8 Copy_u8BufferSize,void(*Notification)())
{
    5686:	df 93       	push	r29
    5688:	cf 93       	push	r28
    568a:	00 d0       	rcall	.+0      	; 0x568c <USART_u8ReceiveBufferInt+0x6>
    568c:	00 d0       	rcall	.+0      	; 0x568e <USART_u8ReceiveBufferInt+0x8>
    568e:	00 d0       	rcall	.+0      	; 0x5690 <USART_u8ReceiveBufferInt+0xa>
    5690:	cd b7       	in	r28, 0x3d	; 61
    5692:	de b7       	in	r29, 0x3e	; 62
    5694:	9b 83       	std	Y+3, r25	; 0x03
    5696:	8a 83       	std	Y+2, r24	; 0x02
    5698:	6c 83       	std	Y+4, r22	; 0x04
    569a:	5e 83       	std	Y+6, r21	; 0x06
    569c:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = OK;
    569e:	19 82       	std	Y+1, r1	; 0x01
	if((Notification==NULL)||(Copy_pcString==NULL))
    56a0:	8d 81       	ldd	r24, Y+5	; 0x05
    56a2:	9e 81       	ldd	r25, Y+6	; 0x06
    56a4:	00 97       	sbiw	r24, 0x00	; 0
    56a6:	21 f0       	breq	.+8      	; 0x56b0 <USART_u8ReceiveBufferInt+0x2a>
    56a8:	8a 81       	ldd	r24, Y+2	; 0x02
    56aa:	9b 81       	ldd	r25, Y+3	; 0x03
    56ac:	00 97       	sbiw	r24, 0x00	; 0
    56ae:	19 f4       	brne	.+6      	; 0x56b6 <USART_u8ReceiveBufferInt+0x30>
	{
		Local_u8ErrorState = NULL_POINTER;
    56b0:	82 e0       	ldi	r24, 0x02	; 2
    56b2:	89 83       	std	Y+1, r24	; 0x01
    56b4:	23 c0       	rjmp	.+70     	; 0x56fc <USART_u8ReceiveBufferInt+0x76>
	}
	else
	{
		if(Global_u8BusyFlag==IDLE)
    56b6:	80 91 c7 02 	lds	r24, 0x02C7
    56ba:	88 23       	and	r24, r24
    56bc:	e9 f4       	brne	.+58     	; 0x56f8 <USART_u8ReceiveBufferInt+0x72>
		{
			Global_u8BusyFlag = BUSY;
    56be:	81 e0       	ldi	r24, 0x01	; 1
    56c0:	80 93 c7 02 	sts	0x02C7, r24
			Global_u8DirectionRecv = MULTI_CHER_RECV;
    56c4:	83 e0       	ldi	r24, 0x03	; 3
    56c6:	80 93 80 02 	sts	0x0280, r24
			Global_u8RecvCharSize = Copy_u8BufferSize;
    56ca:	8c 81       	ldd	r24, Y+4	; 0x04
    56cc:	80 93 d2 02 	sts	0x02D2, r24
			Global_pcByteString = Copy_pcString;
    56d0:	8a 81       	ldd	r24, Y+2	; 0x02
    56d2:	9b 81       	ldd	r25, Y+3	; 0x03
    56d4:	90 93 ca 02 	sts	0x02CA, r25
    56d8:	80 93 c9 02 	sts	0x02C9, r24
			Global_pvCallBackFuncRecv = Notification;
    56dc:	8d 81       	ldd	r24, Y+5	; 0x05
    56de:	9e 81       	ldd	r25, Y+6	; 0x06
    56e0:	90 93 ce 02 	sts	0x02CE, r25
    56e4:	80 93 cd 02 	sts	0x02CD, r24
			SET_BIT(UCSRB,UCSRB_RXCIE);
    56e8:	aa e2       	ldi	r26, 0x2A	; 42
    56ea:	b0 e0       	ldi	r27, 0x00	; 0
    56ec:	ea e2       	ldi	r30, 0x2A	; 42
    56ee:	f0 e0       	ldi	r31, 0x00	; 0
    56f0:	80 81       	ld	r24, Z
    56f2:	80 68       	ori	r24, 0x80	; 128
    56f4:	8c 93       	st	X, r24
    56f6:	02 c0       	rjmp	.+4      	; 0x56fc <USART_u8ReceiveBufferInt+0x76>
		}
		else
			Local_u8ErrorState = BUSY_FUNC;
    56f8:	83 e0       	ldi	r24, 0x03	; 3
    56fa:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    56fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    56fe:	26 96       	adiw	r28, 0x06	; 6
    5700:	0f b6       	in	r0, 0x3f	; 63
    5702:	f8 94       	cli
    5704:	de bf       	out	0x3e, r29	; 62
    5706:	0f be       	out	0x3f, r0	; 63
    5708:	cd bf       	out	0x3d, r28	; 61
    570a:	cf 91       	pop	r28
    570c:	df 91       	pop	r29
    570e:	08 95       	ret

00005710 <__vector_14>:
void __vector_14 (void)	__attribute__((signal));
void __vector_14 (void)
{
    5710:	1f 92       	push	r1
    5712:	0f 92       	push	r0
    5714:	0f b6       	in	r0, 0x3f	; 63
    5716:	0f 92       	push	r0
    5718:	11 24       	eor	r1, r1
    571a:	2f 93       	push	r18
    571c:	3f 93       	push	r19
    571e:	4f 93       	push	r20
    5720:	5f 93       	push	r21
    5722:	6f 93       	push	r22
    5724:	7f 93       	push	r23
    5726:	8f 93       	push	r24
    5728:	9f 93       	push	r25
    572a:	af 93       	push	r26
    572c:	bf 93       	push	r27
    572e:	ef 93       	push	r30
    5730:	ff 93       	push	r31
    5732:	df 93       	push	r29
    5734:	cf 93       	push	r28
    5736:	cd b7       	in	r28, 0x3d	; 61
    5738:	de b7       	in	r29, 0x3e	; 62
	if(SINGLE_CHER_SEND==Global_u8DirectionSend)
    573a:	80 91 c8 02 	lds	r24, 0x02C8
    573e:	88 23       	and	r24, r24
    5740:	a1 f4       	brne	.+40     	; 0x576a <__vector_14+0x5a>
	{

		CLR_BIT(UCSRB,UCSRB_TXB8);
    5742:	aa e2       	ldi	r26, 0x2A	; 42
    5744:	b0 e0       	ldi	r27, 0x00	; 0
    5746:	ea e2       	ldi	r30, 0x2A	; 42
    5748:	f0 e0       	ldi	r31, 0x00	; 0
    574a:	80 81       	ld	r24, Z
    574c:	8e 7f       	andi	r24, 0xFE	; 254
    574e:	8c 93       	st	X, r24
		if(CHARACTER_SIZE == CHAR_SIZE_9_bit)
			SET_BIT(UCSRB,UCSRB_TXB8);
		UDR = Global_u8SendChar;
    5750:	ec e2       	ldi	r30, 0x2C	; 44
    5752:	f0 e0       	ldi	r31, 0x00	; 0
    5754:	80 91 d1 02 	lds	r24, 0x02D1
    5758:	80 83       	st	Z, r24
		Global_pvCallBackFuncSend();
    575a:	e0 91 c5 02 	lds	r30, 0x02C5
    575e:	f0 91 c6 02 	lds	r31, 0x02C6
    5762:	09 95       	icall
		Global_u8BusyFlag = IDLE;
    5764:	10 92 c7 02 	sts	0x02C7, r1
    5768:	3e c0       	rjmp	.+124    	; 0x57e6 <__vector_14+0xd6>
	}
	else if(MULTI_CHER_SEND==Global_u8DirectionSend)
    576a:	80 91 c8 02 	lds	r24, 0x02C8
    576e:	81 30       	cpi	r24, 0x01	; 1
    5770:	d1 f5       	brne	.+116    	; 0x57e6 <__vector_14+0xd6>
	{
		static u8 Local_u8Counter = 0;
		if(Global_pcByteString[Local_u8Counter]=='\0')
    5772:	20 91 c9 02 	lds	r18, 0x02C9
    5776:	30 91 ca 02 	lds	r19, 0x02CA
    577a:	80 91 cf 02 	lds	r24, 0x02CF
    577e:	88 2f       	mov	r24, r24
    5780:	90 e0       	ldi	r25, 0x00	; 0
    5782:	f9 01       	movw	r30, r18
    5784:	e8 0f       	add	r30, r24
    5786:	f9 1f       	adc	r31, r25
    5788:	80 81       	ld	r24, Z
    578a:	88 23       	and	r24, r24
    578c:	89 f4       	brne	.+34     	; 0x57b0 <__vector_14+0xa0>
		{
			Global_pvCallBackFuncSend();
    578e:	e0 91 c5 02 	lds	r30, 0x02C5
    5792:	f0 91 c6 02 	lds	r31, 0x02C6
    5796:	09 95       	icall
			Global_u8BusyFlag = IDLE;
    5798:	10 92 c7 02 	sts	0x02C7, r1
			CLR_BIT(UCSRB,UCSRB_UDRIE);
    579c:	aa e2       	ldi	r26, 0x2A	; 42
    579e:	b0 e0       	ldi	r27, 0x00	; 0
    57a0:	ea e2       	ldi	r30, 0x2A	; 42
    57a2:	f0 e0       	ldi	r31, 0x00	; 0
    57a4:	80 81       	ld	r24, Z
    57a6:	8f 7d       	andi	r24, 0xDF	; 223
    57a8:	8c 93       	st	X, r24
			Local_u8Counter = 0;
    57aa:	10 92 cf 02 	sts	0x02CF, r1
    57ae:	1b c0       	rjmp	.+54     	; 0x57e6 <__vector_14+0xd6>
		}
		else
		{
			CLR_BIT(UCSRB,UCSRB_TXB8);
    57b0:	aa e2       	ldi	r26, 0x2A	; 42
    57b2:	b0 e0       	ldi	r27, 0x00	; 0
    57b4:	ea e2       	ldi	r30, 0x2A	; 42
    57b6:	f0 e0       	ldi	r31, 0x00	; 0
    57b8:	80 81       	ld	r24, Z
    57ba:	8e 7f       	andi	r24, 0xFE	; 254
    57bc:	8c 93       	st	X, r24
			if(CHARACTER_SIZE == CHAR_SIZE_9_bit)
				SET_BIT(UCSRB,UCSRB_TXB8);
			UDR = Global_pcByteString[Local_u8Counter];
    57be:	ac e2       	ldi	r26, 0x2C	; 44
    57c0:	b0 e0       	ldi	r27, 0x00	; 0
    57c2:	20 91 c9 02 	lds	r18, 0x02C9
    57c6:	30 91 ca 02 	lds	r19, 0x02CA
    57ca:	80 91 cf 02 	lds	r24, 0x02CF
    57ce:	88 2f       	mov	r24, r24
    57d0:	90 e0       	ldi	r25, 0x00	; 0
    57d2:	f9 01       	movw	r30, r18
    57d4:	e8 0f       	add	r30, r24
    57d6:	f9 1f       	adc	r31, r25
    57d8:	80 81       	ld	r24, Z
    57da:	8c 93       	st	X, r24
			Local_u8Counter++;
    57dc:	80 91 cf 02 	lds	r24, 0x02CF
    57e0:	8f 5f       	subi	r24, 0xFF	; 255
    57e2:	80 93 cf 02 	sts	0x02CF, r24
		}

	}

}
    57e6:	cf 91       	pop	r28
    57e8:	df 91       	pop	r29
    57ea:	ff 91       	pop	r31
    57ec:	ef 91       	pop	r30
    57ee:	bf 91       	pop	r27
    57f0:	af 91       	pop	r26
    57f2:	9f 91       	pop	r25
    57f4:	8f 91       	pop	r24
    57f6:	7f 91       	pop	r23
    57f8:	6f 91       	pop	r22
    57fa:	5f 91       	pop	r21
    57fc:	4f 91       	pop	r20
    57fe:	3f 91       	pop	r19
    5800:	2f 91       	pop	r18
    5802:	0f 90       	pop	r0
    5804:	0f be       	out	0x3f, r0	; 63
    5806:	0f 90       	pop	r0
    5808:	1f 90       	pop	r1
    580a:	18 95       	reti

0000580c <__vector_13>:

void __vector_13 (void)	__attribute__((signal));
void __vector_13 (void)
{
    580c:	1f 92       	push	r1
    580e:	0f 92       	push	r0
    5810:	0f b6       	in	r0, 0x3f	; 63
    5812:	0f 92       	push	r0
    5814:	11 24       	eor	r1, r1
    5816:	2f 93       	push	r18
    5818:	3f 93       	push	r19
    581a:	4f 93       	push	r20
    581c:	5f 93       	push	r21
    581e:	6f 93       	push	r22
    5820:	7f 93       	push	r23
    5822:	8f 93       	push	r24
    5824:	9f 93       	push	r25
    5826:	af 93       	push	r26
    5828:	bf 93       	push	r27
    582a:	ef 93       	push	r30
    582c:	ff 93       	push	r31
    582e:	df 93       	push	r29
    5830:	cf 93       	push	r28
    5832:	cd b7       	in	r28, 0x3d	; 61
    5834:	de b7       	in	r29, 0x3e	; 62
	if(SINGLE_CHER_RECV == Global_u8DirectionRecv)
    5836:	80 91 80 02 	lds	r24, 0x0280
    583a:	82 30       	cpi	r24, 0x02	; 2
    583c:	49 f5       	brne	.+82     	; 0x5890 <__vector_13+0x84>
	{
		*Global_u16ReceiveChar = UDR;
    583e:	a0 91 cb 02 	lds	r26, 0x02CB
    5842:	b0 91 cc 02 	lds	r27, 0x02CC
    5846:	ec e2       	ldi	r30, 0x2C	; 44
    5848:	f0 e0       	ldi	r31, 0x00	; 0
    584a:	80 81       	ld	r24, Z
    584c:	88 2f       	mov	r24, r24
    584e:	90 e0       	ldi	r25, 0x00	; 0
    5850:	11 96       	adiw	r26, 0x01	; 1
    5852:	9c 93       	st	X, r25
    5854:	8e 93       	st	-X, r24
		if(GET_BIT(UCSRB,UCSRB_RXB8))
    5856:	ea e2       	ldi	r30, 0x2A	; 42
    5858:	f0 e0       	ldi	r31, 0x00	; 0
    585a:	80 81       	ld	r24, Z
    585c:	86 95       	lsr	r24
    585e:	88 2f       	mov	r24, r24
    5860:	90 e0       	ldi	r25, 0x00	; 0
    5862:	81 70       	andi	r24, 0x01	; 1
    5864:	90 70       	andi	r25, 0x00	; 0
    5866:	88 23       	and	r24, r24
    5868:	69 f0       	breq	.+26     	; 0x5884 <__vector_13+0x78>
			*Global_u16ReceiveChar |= 1<<8;
    586a:	a0 91 cb 02 	lds	r26, 0x02CB
    586e:	b0 91 cc 02 	lds	r27, 0x02CC
    5872:	e0 91 cb 02 	lds	r30, 0x02CB
    5876:	f0 91 cc 02 	lds	r31, 0x02CC
    587a:	80 81       	ld	r24, Z
    587c:	91 81       	ldd	r25, Z+1	; 0x01
    587e:	91 60       	ori	r25, 0x01	; 1
    5880:	8d 93       	st	X+, r24
    5882:	9c 93       	st	X, r25
			Global_pvCallBackFuncRecv();
    5884:	e0 91 cd 02 	lds	r30, 0x02CD
    5888:	f0 91 ce 02 	lds	r31, 0x02CE
    588c:	09 95       	icall
    588e:	5a c0       	rjmp	.+180    	; 0x5944 <__vector_13+0x138>
	}
	else if(MULTI_CHER_RECV == Global_u8DirectionRecv)
    5890:	80 91 80 02 	lds	r24, 0x0280
    5894:	83 30       	cpi	r24, 0x03	; 3
    5896:	09 f0       	breq	.+2      	; 0x589a <__vector_13+0x8e>
    5898:	55 c0       	rjmp	.+170    	; 0x5944 <__vector_13+0x138>
	{
		static u8 Local_u8Counter = 0;
		if((Global_u8RecvCharSize-1)==Local_u8Counter)
    589a:	80 91 d2 02 	lds	r24, 0x02D2
    589e:	88 2f       	mov	r24, r24
    58a0:	90 e0       	ldi	r25, 0x00	; 0
    58a2:	9c 01       	movw	r18, r24
    58a4:	21 50       	subi	r18, 0x01	; 1
    58a6:	30 40       	sbci	r19, 0x00	; 0
    58a8:	80 91 d0 02 	lds	r24, 0x02D0
    58ac:	88 2f       	mov	r24, r24
    58ae:	90 e0       	ldi	r25, 0x00	; 0
    58b0:	28 17       	cp	r18, r24
    58b2:	39 07       	cpc	r19, r25
    58b4:	89 f4       	brne	.+34     	; 0x58d8 <__vector_13+0xcc>
		{
			Global_pvCallBackFuncRecv();
    58b6:	e0 91 cd 02 	lds	r30, 0x02CD
    58ba:	f0 91 ce 02 	lds	r31, 0x02CE
    58be:	09 95       	icall
			Global_u8BusyFlag = IDLE;
    58c0:	10 92 c7 02 	sts	0x02C7, r1
			CLR_BIT(UCSRB,UCSRB_RXCIE);
    58c4:	aa e2       	ldi	r26, 0x2A	; 42
    58c6:	b0 e0       	ldi	r27, 0x00	; 0
    58c8:	ea e2       	ldi	r30, 0x2A	; 42
    58ca:	f0 e0       	ldi	r31, 0x00	; 0
    58cc:	80 81       	ld	r24, Z
    58ce:	8f 77       	andi	r24, 0x7F	; 127
    58d0:	8c 93       	st	X, r24
			Local_u8Counter = 0;
    58d2:	10 92 d0 02 	sts	0x02D0, r1
    58d6:	36 c0       	rjmp	.+108    	; 0x5944 <__vector_13+0x138>
		}
		else
		{
			Global_pcByteString[Local_u8Counter] = UDR;
    58d8:	20 91 c9 02 	lds	r18, 0x02C9
    58dc:	30 91 ca 02 	lds	r19, 0x02CA
    58e0:	80 91 d0 02 	lds	r24, 0x02D0
    58e4:	88 2f       	mov	r24, r24
    58e6:	90 e0       	ldi	r25, 0x00	; 0
    58e8:	d9 01       	movw	r26, r18
    58ea:	a8 0f       	add	r26, r24
    58ec:	b9 1f       	adc	r27, r25
    58ee:	ec e2       	ldi	r30, 0x2C	; 44
    58f0:	f0 e0       	ldi	r31, 0x00	; 0
    58f2:	80 81       	ld	r24, Z
    58f4:	8c 93       	st	X, r24
			if(GET_BIT(UCSRB,UCSRB_RXB8))
    58f6:	ea e2       	ldi	r30, 0x2A	; 42
    58f8:	f0 e0       	ldi	r31, 0x00	; 0
    58fa:	80 81       	ld	r24, Z
    58fc:	86 95       	lsr	r24
    58fe:	88 2f       	mov	r24, r24
    5900:	90 e0       	ldi	r25, 0x00	; 0
    5902:	81 70       	andi	r24, 0x01	; 1
    5904:	90 70       	andi	r25, 0x00	; 0
    5906:	88 23       	and	r24, r24
    5908:	c1 f0       	breq	.+48     	; 0x593a <__vector_13+0x12e>
				Global_pcByteString[Local_u8Counter] |= 1<<8;
    590a:	20 91 c9 02 	lds	r18, 0x02C9
    590e:	30 91 ca 02 	lds	r19, 0x02CA
    5912:	80 91 d0 02 	lds	r24, 0x02D0
    5916:	88 2f       	mov	r24, r24
    5918:	90 e0       	ldi	r25, 0x00	; 0
    591a:	d9 01       	movw	r26, r18
    591c:	a8 0f       	add	r26, r24
    591e:	b9 1f       	adc	r27, r25
    5920:	20 91 c9 02 	lds	r18, 0x02C9
    5924:	30 91 ca 02 	lds	r19, 0x02CA
    5928:	80 91 d0 02 	lds	r24, 0x02D0
    592c:	88 2f       	mov	r24, r24
    592e:	90 e0       	ldi	r25, 0x00	; 0
    5930:	f9 01       	movw	r30, r18
    5932:	e8 0f       	add	r30, r24
    5934:	f9 1f       	adc	r31, r25
    5936:	80 81       	ld	r24, Z
    5938:	8c 93       	st	X, r24
			Local_u8Counter++;
    593a:	80 91 d0 02 	lds	r24, 0x02D0
    593e:	8f 5f       	subi	r24, 0xFF	; 255
    5940:	80 93 d0 02 	sts	0x02D0, r24
		}
	}
}
    5944:	cf 91       	pop	r28
    5946:	df 91       	pop	r29
    5948:	ff 91       	pop	r31
    594a:	ef 91       	pop	r30
    594c:	bf 91       	pop	r27
    594e:	af 91       	pop	r26
    5950:	9f 91       	pop	r25
    5952:	8f 91       	pop	r24
    5954:	7f 91       	pop	r23
    5956:	6f 91       	pop	r22
    5958:	5f 91       	pop	r21
    595a:	4f 91       	pop	r20
    595c:	3f 91       	pop	r19
    595e:	2f 91       	pop	r18
    5960:	0f 90       	pop	r0
    5962:	0f be       	out	0x3f, r0	; 63
    5964:	0f 90       	pop	r0
    5966:	1f 90       	pop	r1
    5968:	18 95       	reti

0000596a <WDT_voidEnable>:
#include "../MCAL/WDT_interface.h"
#include "../MCAL/WDT_register.h"


void WDT_voidEnable()
{
    596a:	df 93       	push	r29
    596c:	cf 93       	push	r28
    596e:	cd b7       	in	r28, 0x3d	; 61
    5970:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR,WDTCR_WDE);
    5972:	a1 e4       	ldi	r26, 0x41	; 65
    5974:	b0 e0       	ldi	r27, 0x00	; 0
    5976:	e1 e4       	ldi	r30, 0x41	; 65
    5978:	f0 e0       	ldi	r31, 0x00	; 0
    597a:	80 81       	ld	r24, Z
    597c:	88 60       	ori	r24, 0x08	; 8
    597e:	8c 93       	st	X, r24
}
    5980:	cf 91       	pop	r28
    5982:	df 91       	pop	r29
    5984:	08 95       	ret

00005986 <WDT_voidDisable>:
void WDT_voidDisable()
{
    5986:	df 93       	push	r29
    5988:	cf 93       	push	r28
    598a:	cd b7       	in	r28, 0x3d	; 61
    598c:	de b7       	in	r29, 0x3e	; 62
	WDTCR |= (1<<WDTCR_WDTOE)|(1<<WDTCR_WDE);
    598e:	a1 e4       	ldi	r26, 0x41	; 65
    5990:	b0 e0       	ldi	r27, 0x00	; 0
    5992:	e1 e4       	ldi	r30, 0x41	; 65
    5994:	f0 e0       	ldi	r31, 0x00	; 0
    5996:	80 81       	ld	r24, Z
    5998:	88 61       	ori	r24, 0x18	; 24
    599a:	8c 93       	st	X, r24
	WDTCR = 0;
    599c:	e1 e4       	ldi	r30, 0x41	; 65
    599e:	f0 e0       	ldi	r31, 0x00	; 0
    59a0:	10 82       	st	Z, r1
}
    59a2:	cf 91       	pop	r28
    59a4:	df 91       	pop	r29
    59a6:	08 95       	ret

000059a8 <WDT_u8Sleep>:
u8 WDT_u8Sleep(u8 Copy_u8TimerSleep)
{
    59a8:	df 93       	push	r29
    59aa:	cf 93       	push	r28
    59ac:	00 d0       	rcall	.+0      	; 0x59ae <WDT_u8Sleep+0x6>
    59ae:	cd b7       	in	r28, 0x3d	; 61
    59b0:	de b7       	in	r29, 0x3e	; 62
    59b2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState =OK;
    59b4:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8TimerSleep<8)
    59b6:	8a 81       	ldd	r24, Y+2	; 0x02
    59b8:	88 30       	cpi	r24, 0x08	; 8
    59ba:	80 f4       	brcc	.+32     	; 0x59dc <WDT_u8Sleep+0x34>
	{
		WDTCR &= MASK_SLEEP_TIME;
    59bc:	a1 e4       	ldi	r26, 0x41	; 65
    59be:	b0 e0       	ldi	r27, 0x00	; 0
    59c0:	e1 e4       	ldi	r30, 0x41	; 65
    59c2:	f0 e0       	ldi	r31, 0x00	; 0
    59c4:	80 81       	ld	r24, Z
    59c6:	88 7f       	andi	r24, 0xF8	; 248
    59c8:	8c 93       	st	X, r24
		WDTCR |= Copy_u8TimerSleep;
    59ca:	a1 e4       	ldi	r26, 0x41	; 65
    59cc:	b0 e0       	ldi	r27, 0x00	; 0
    59ce:	e1 e4       	ldi	r30, 0x41	; 65
    59d0:	f0 e0       	ldi	r31, 0x00	; 0
    59d2:	90 81       	ld	r25, Z
    59d4:	8a 81       	ldd	r24, Y+2	; 0x02
    59d6:	89 2b       	or	r24, r25
    59d8:	8c 93       	st	X, r24
    59da:	02 c0       	rjmp	.+4      	; 0x59e0 <WDT_u8Sleep+0x38>
	}
	else
		Local_u8ErrorState = NOTOK;
    59dc:	81 e0       	ldi	r24, 0x01	; 1
    59de:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    59e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    59e2:	0f 90       	pop	r0
    59e4:	0f 90       	pop	r0
    59e6:	cf 91       	pop	r28
    59e8:	df 91       	pop	r29
    59ea:	08 95       	ret

000059ec <notif>:
#include "../HAL/SW_interface.h"
*/

char strdata[20]={0};
void notif()
{
    59ec:	df 93       	push	r29
    59ee:	cf 93       	push	r28
    59f0:	cd b7       	in	r28, 0x3d	; 61
    59f2:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidGoToXY(1,0);
    59f4:	81 e0       	ldi	r24, 0x01	; 1
    59f6:	60 e0       	ldi	r22, 0x00	; 0
    59f8:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <CLCD_voidGoToXY>
	CLCD_voidSendString(strdata);
    59fc:	83 ed       	ldi	r24, 0xD3	; 211
    59fe:	92 e0       	ldi	r25, 0x02	; 2
    5a00:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
}
    5a04:	cf 91       	pop	r28
    5a06:	df 91       	pop	r29
    5a08:	08 95       	ret

00005a0a <AppMap>:
u32 AppMap(u32 InMin,u32 InMax,u32 OutMin,u32 OutMax,u32 InVal)
{
    5a0a:	af 92       	push	r10
    5a0c:	bf 92       	push	r11
    5a0e:	cf 92       	push	r12
    5a10:	df 92       	push	r13
    5a12:	ef 92       	push	r14
    5a14:	ff 92       	push	r15
    5a16:	0f 93       	push	r16
    5a18:	1f 93       	push	r17
    5a1a:	df 93       	push	r29
    5a1c:	cf 93       	push	r28
    5a1e:	cd b7       	in	r28, 0x3d	; 61
    5a20:	de b7       	in	r29, 0x3e	; 62
    5a22:	64 97       	sbiw	r28, 0x14	; 20
    5a24:	0f b6       	in	r0, 0x3f	; 63
    5a26:	f8 94       	cli
    5a28:	de bf       	out	0x3e, r29	; 62
    5a2a:	0f be       	out	0x3f, r0	; 63
    5a2c:	cd bf       	out	0x3d, r28	; 61
    5a2e:	6d 83       	std	Y+5, r22	; 0x05
    5a30:	7e 83       	std	Y+6, r23	; 0x06
    5a32:	8f 83       	std	Y+7, r24	; 0x07
    5a34:	98 87       	std	Y+8, r25	; 0x08
    5a36:	29 87       	std	Y+9, r18	; 0x09
    5a38:	3a 87       	std	Y+10, r19	; 0x0a
    5a3a:	4b 87       	std	Y+11, r20	; 0x0b
    5a3c:	5c 87       	std	Y+12, r21	; 0x0c
    5a3e:	ed 86       	std	Y+13, r14	; 0x0d
    5a40:	fe 86       	std	Y+14, r15	; 0x0e
    5a42:	0f 87       	std	Y+15, r16	; 0x0f
    5a44:	18 8b       	std	Y+16, r17	; 0x10
    5a46:	a9 8a       	std	Y+17, r10	; 0x11
    5a48:	ba 8a       	std	Y+18, r11	; 0x12
    5a4a:	cb 8a       	std	Y+19, r12	; 0x13
    5a4c:	dc 8a       	std	Y+20, r13	; 0x14
	u32 Local=0;
    5a4e:	19 82       	std	Y+1, r1	; 0x01
    5a50:	1a 82       	std	Y+2, r1	; 0x02
    5a52:	1b 82       	std	Y+3, r1	; 0x03
    5a54:	1c 82       	std	Y+4, r1	; 0x04
	Local = (((InVal-InMin)*(OutMax-OutMin))/(InMax-InMin))+OutMin;
    5a56:	29 a1       	ldd	r18, Y+33	; 0x21
    5a58:	3a a1       	ldd	r19, Y+34	; 0x22
    5a5a:	4b a1       	ldd	r20, Y+35	; 0x23
    5a5c:	5c a1       	ldd	r21, Y+36	; 0x24
    5a5e:	8d 81       	ldd	r24, Y+5	; 0x05
    5a60:	9e 81       	ldd	r25, Y+6	; 0x06
    5a62:	af 81       	ldd	r26, Y+7	; 0x07
    5a64:	b8 85       	ldd	r27, Y+8	; 0x08
    5a66:	79 01       	movw	r14, r18
    5a68:	8a 01       	movw	r16, r20
    5a6a:	e8 1a       	sub	r14, r24
    5a6c:	f9 0a       	sbc	r15, r25
    5a6e:	0a 0b       	sbc	r16, r26
    5a70:	1b 0b       	sbc	r17, r27
    5a72:	29 89       	ldd	r18, Y+17	; 0x11
    5a74:	3a 89       	ldd	r19, Y+18	; 0x12
    5a76:	4b 89       	ldd	r20, Y+19	; 0x13
    5a78:	5c 89       	ldd	r21, Y+20	; 0x14
    5a7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a7e:	af 85       	ldd	r26, Y+15	; 0x0f
    5a80:	b8 89       	ldd	r27, Y+16	; 0x10
    5a82:	28 1b       	sub	r18, r24
    5a84:	39 0b       	sbc	r19, r25
    5a86:	4a 0b       	sbc	r20, r26
    5a88:	5b 0b       	sbc	r21, r27
    5a8a:	c8 01       	movw	r24, r16
    5a8c:	b7 01       	movw	r22, r14
    5a8e:	0e 94 71 3b 	call	0x76e2	; 0x76e2 <__mulsi3>
    5a92:	7b 01       	movw	r14, r22
    5a94:	8c 01       	movw	r16, r24
    5a96:	29 85       	ldd	r18, Y+9	; 0x09
    5a98:	3a 85       	ldd	r19, Y+10	; 0x0a
    5a9a:	4b 85       	ldd	r20, Y+11	; 0x0b
    5a9c:	5c 85       	ldd	r21, Y+12	; 0x0c
    5a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    5aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    5aa2:	af 81       	ldd	r26, Y+7	; 0x07
    5aa4:	b8 85       	ldd	r27, Y+8	; 0x08
    5aa6:	28 1b       	sub	r18, r24
    5aa8:	39 0b       	sbc	r19, r25
    5aaa:	4a 0b       	sbc	r20, r26
    5aac:	5b 0b       	sbc	r21, r27
    5aae:	c8 01       	movw	r24, r16
    5ab0:	b7 01       	movw	r22, r14
    5ab2:	0e 94 a4 3b 	call	0x7748	; 0x7748 <__udivmodsi4>
    5ab6:	da 01       	movw	r26, r20
    5ab8:	c9 01       	movw	r24, r18
    5aba:	9c 01       	movw	r18, r24
    5abc:	ad 01       	movw	r20, r26
    5abe:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ac0:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ac2:	af 85       	ldd	r26, Y+15	; 0x0f
    5ac4:	b8 89       	ldd	r27, Y+16	; 0x10
    5ac6:	82 0f       	add	r24, r18
    5ac8:	93 1f       	adc	r25, r19
    5aca:	a4 1f       	adc	r26, r20
    5acc:	b5 1f       	adc	r27, r21
    5ace:	89 83       	std	Y+1, r24	; 0x01
    5ad0:	9a 83       	std	Y+2, r25	; 0x02
    5ad2:	ab 83       	std	Y+3, r26	; 0x03
    5ad4:	bc 83       	std	Y+4, r27	; 0x04
	return Local;
    5ad6:	89 81       	ldd	r24, Y+1	; 0x01
    5ad8:	9a 81       	ldd	r25, Y+2	; 0x02
    5ada:	ab 81       	ldd	r26, Y+3	; 0x03
    5adc:	bc 81       	ldd	r27, Y+4	; 0x04
}
    5ade:	bc 01       	movw	r22, r24
    5ae0:	cd 01       	movw	r24, r26
    5ae2:	64 96       	adiw	r28, 0x14	; 20
    5ae4:	0f b6       	in	r0, 0x3f	; 63
    5ae6:	f8 94       	cli
    5ae8:	de bf       	out	0x3e, r29	; 62
    5aea:	0f be       	out	0x3f, r0	; 63
    5aec:	cd bf       	out	0x3d, r28	; 61
    5aee:	cf 91       	pop	r28
    5af0:	df 91       	pop	r29
    5af2:	1f 91       	pop	r17
    5af4:	0f 91       	pop	r16
    5af6:	ff 90       	pop	r15
    5af8:	ef 90       	pop	r14
    5afa:	df 90       	pop	r13
    5afc:	cf 90       	pop	r12
    5afe:	bf 90       	pop	r11
    5b00:	af 90       	pop	r10
    5b02:	08 95       	ret

00005b04 <main>:
u8 notifyFlag2 = NO_NOTE;
u16 LdrVal = 0;
u16 Lm35Val = 0;
u16 CompPWM = 0;
void main()
{
    5b04:	0f 93       	push	r16
    5b06:	1f 93       	push	r17
    5b08:	df 93       	push	r29
    5b0a:	cf 93       	push	r28
    5b0c:	cd b7       	in	r28, 0x3d	; 61
    5b0e:	de b7       	in	r29, 0x3e	; 62
    5b10:	ce 57       	subi	r28, 0x7E	; 126
    5b12:	d0 40       	sbci	r29, 0x00	; 0
    5b14:	0f b6       	in	r0, 0x3f	; 63
    5b16:	f8 94       	cli
    5b18:	de bf       	out	0x3e, r29	; 62
    5b1a:	0f be       	out	0x3f, r0	; 63
    5b1c:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
    5b1e:	0e 94 30 17 	call	0x2e60	; 0x2e60 <PORT_voidInit>
	CLCD_voidInit();
    5b22:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <CLCD_voidInit>
	USART_init();
    5b26:	0e 94 60 28 	call	0x50c0	; 0x50c0 <USART_init>
	ADC_voidInit();
    5b2a:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_voidInit>
	GIE_voidEnable();
    5b2e:	0e 94 f6 15 	call	0x2bec	; 0x2bec <GIE_voidEnable>
	SERVO_voidInit();
    5b32:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <SERVO_voidInit>
	u16 data,password = 0;
    5b36:	fe 01       	movw	r30, r28
    5b38:	e7 5a       	subi	r30, 0xA7	; 167
    5b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b3c:	11 82       	std	Z+1, r1	; 0x01
    5b3e:	10 82       	st	Z, r1
	u8 num,multi = 1,trials = 2,curserPos = 11;
    5b40:	fe 01       	movw	r30, r28
    5b42:	e9 5a       	subi	r30, 0xA9	; 169
    5b44:	ff 4f       	sbci	r31, 0xFF	; 255
    5b46:	81 e0       	ldi	r24, 0x01	; 1
    5b48:	80 83       	st	Z, r24
    5b4a:	fe 01       	movw	r30, r28
    5b4c:	ea 5a       	subi	r30, 0xAA	; 170
    5b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    5b50:	82 e0       	ldi	r24, 0x02	; 2
    5b52:	80 83       	st	Z, r24
    5b54:	fe 01       	movw	r30, r28
    5b56:	eb 5a       	subi	r30, 0xAB	; 171
    5b58:	ff 4f       	sbci	r31, 0xFF	; 255
    5b5a:	8b e0       	ldi	r24, 0x0B	; 11
    5b5c:	80 83       	st	Z, r24
	ADC_Chain adc1 = {ChannelArr,2,LedAdjustMotorAdjust,ResultArr};
    5b5e:	ce 01       	movw	r24, r28
    5b60:	83 5a       	subi	r24, 0xA3	; 163
    5b62:	9f 4f       	sbci	r25, 0xFF	; 255
    5b64:	e2 96       	adiw	r28, 0x32	; 50
    5b66:	9f af       	std	Y+63, r25	; 0x3f
    5b68:	8e af       	std	Y+62, r24	; 0x3e
    5b6a:	e2 97       	sbiw	r28, 0x32	; 50
    5b6c:	62 e9       	ldi	r22, 0x92	; 146
    5b6e:	72 e0       	ldi	r23, 0x02	; 2
    5b70:	e4 96       	adiw	r28, 0x34	; 52
    5b72:	7f af       	std	Y+63, r23	; 0x3f
    5b74:	6e af       	std	Y+62, r22	; 0x3e
    5b76:	e4 97       	sbiw	r28, 0x34	; 52
    5b78:	77 e0       	ldi	r23, 0x07	; 7
    5b7a:	e5 96       	adiw	r28, 0x35	; 53
    5b7c:	7f af       	std	Y+63, r23	; 0x3f
    5b7e:	e5 97       	sbiw	r28, 0x35	; 53
    5b80:	e4 96       	adiw	r28, 0x34	; 52
    5b82:	ee ad       	ldd	r30, Y+62	; 0x3e
    5b84:	ff ad       	ldd	r31, Y+63	; 0x3f
    5b86:	e4 97       	sbiw	r28, 0x34	; 52
    5b88:	00 80       	ld	r0, Z
    5b8a:	e4 96       	adiw	r28, 0x34	; 52
    5b8c:	6e ad       	ldd	r22, Y+62	; 0x3e
    5b8e:	7f ad       	ldd	r23, Y+63	; 0x3f
    5b90:	e4 97       	sbiw	r28, 0x34	; 52
    5b92:	6f 5f       	subi	r22, 0xFF	; 255
    5b94:	7f 4f       	sbci	r23, 0xFF	; 255
    5b96:	e4 96       	adiw	r28, 0x34	; 52
    5b98:	7f af       	std	Y+63, r23	; 0x3f
    5b9a:	6e af       	std	Y+62, r22	; 0x3e
    5b9c:	e4 97       	sbiw	r28, 0x34	; 52
    5b9e:	e2 96       	adiw	r28, 0x32	; 50
    5ba0:	ee ad       	ldd	r30, Y+62	; 0x3e
    5ba2:	ff ad       	ldd	r31, Y+63	; 0x3f
    5ba4:	e2 97       	sbiw	r28, 0x32	; 50
    5ba6:	00 82       	st	Z, r0
    5ba8:	e2 96       	adiw	r28, 0x32	; 50
    5baa:	6e ad       	ldd	r22, Y+62	; 0x3e
    5bac:	7f ad       	ldd	r23, Y+63	; 0x3f
    5bae:	e2 97       	sbiw	r28, 0x32	; 50
    5bb0:	6f 5f       	subi	r22, 0xFF	; 255
    5bb2:	7f 4f       	sbci	r23, 0xFF	; 255
    5bb4:	e2 96       	adiw	r28, 0x32	; 50
    5bb6:	7f af       	std	Y+63, r23	; 0x3f
    5bb8:	6e af       	std	Y+62, r22	; 0x3e
    5bba:	e2 97       	sbiw	r28, 0x32	; 50
    5bbc:	e5 96       	adiw	r28, 0x35	; 53
    5bbe:	7f ad       	ldd	r23, Y+63	; 0x3f
    5bc0:	e5 97       	sbiw	r28, 0x35	; 53
    5bc2:	71 50       	subi	r23, 0x01	; 1
    5bc4:	e5 96       	adiw	r28, 0x35	; 53
    5bc6:	7f af       	std	Y+63, r23	; 0x3f
    5bc8:	e5 97       	sbiw	r28, 0x35	; 53
    5bca:	e5 96       	adiw	r28, 0x35	; 53
    5bcc:	8f ad       	ldd	r24, Y+63	; 0x3f
    5bce:	e5 97       	sbiw	r28, 0x35	; 53
    5bd0:	88 23       	and	r24, r24
    5bd2:	b1 f6       	brne	.-84     	; 0x5b80 <main+0x7c>
	Timer_t t0 = {TIMER0,TIMER0_FAST_PWM,OC0_DIS,TIMER10_DIV_64,TIMER0_INT_DISABLE};
    5bd4:	ce 01       	movw	r24, r28
    5bd6:	8c 59       	subi	r24, 0x9C	; 156
    5bd8:	9f 4f       	sbci	r25, 0xFF	; 255
    5bda:	e7 96       	adiw	r28, 0x37	; 55
    5bdc:	9f af       	std	Y+63, r25	; 0x3f
    5bde:	8e af       	std	Y+62, r24	; 0x3e
    5be0:	e7 97       	sbiw	r28, 0x37	; 55
    5be2:	ed e8       	ldi	r30, 0x8D	; 141
    5be4:	f2 e0       	ldi	r31, 0x02	; 2
    5be6:	e9 96       	adiw	r28, 0x39	; 57
    5be8:	ff af       	std	Y+63, r31	; 0x3f
    5bea:	ee af       	std	Y+62, r30	; 0x3e
    5bec:	e9 97       	sbiw	r28, 0x39	; 57
    5bee:	f5 e0       	ldi	r31, 0x05	; 5
    5bf0:	ea 96       	adiw	r28, 0x3a	; 58
    5bf2:	ff af       	std	Y+63, r31	; 0x3f
    5bf4:	ea 97       	sbiw	r28, 0x3a	; 58
    5bf6:	e9 96       	adiw	r28, 0x39	; 57
    5bf8:	ee ad       	ldd	r30, Y+62	; 0x3e
    5bfa:	ff ad       	ldd	r31, Y+63	; 0x3f
    5bfc:	e9 97       	sbiw	r28, 0x39	; 57
    5bfe:	00 80       	ld	r0, Z
    5c00:	e9 96       	adiw	r28, 0x39	; 57
    5c02:	6e ad       	ldd	r22, Y+62	; 0x3e
    5c04:	7f ad       	ldd	r23, Y+63	; 0x3f
    5c06:	e9 97       	sbiw	r28, 0x39	; 57
    5c08:	6f 5f       	subi	r22, 0xFF	; 255
    5c0a:	7f 4f       	sbci	r23, 0xFF	; 255
    5c0c:	e9 96       	adiw	r28, 0x39	; 57
    5c0e:	7f af       	std	Y+63, r23	; 0x3f
    5c10:	6e af       	std	Y+62, r22	; 0x3e
    5c12:	e9 97       	sbiw	r28, 0x39	; 57
    5c14:	e7 96       	adiw	r28, 0x37	; 55
    5c16:	ee ad       	ldd	r30, Y+62	; 0x3e
    5c18:	ff ad       	ldd	r31, Y+63	; 0x3f
    5c1a:	e7 97       	sbiw	r28, 0x37	; 55
    5c1c:	00 82       	st	Z, r0
    5c1e:	e7 96       	adiw	r28, 0x37	; 55
    5c20:	6e ad       	ldd	r22, Y+62	; 0x3e
    5c22:	7f ad       	ldd	r23, Y+63	; 0x3f
    5c24:	e7 97       	sbiw	r28, 0x37	; 55
    5c26:	6f 5f       	subi	r22, 0xFF	; 255
    5c28:	7f 4f       	sbci	r23, 0xFF	; 255
    5c2a:	e7 96       	adiw	r28, 0x37	; 55
    5c2c:	7f af       	std	Y+63, r23	; 0x3f
    5c2e:	6e af       	std	Y+62, r22	; 0x3e
    5c30:	e7 97       	sbiw	r28, 0x37	; 55
    5c32:	ea 96       	adiw	r28, 0x3a	; 58
    5c34:	7f ad       	ldd	r23, Y+63	; 0x3f
    5c36:	ea 97       	sbiw	r28, 0x3a	; 58
    5c38:	71 50       	subi	r23, 0x01	; 1
    5c3a:	ea 96       	adiw	r28, 0x3a	; 58
    5c3c:	7f af       	std	Y+63, r23	; 0x3f
    5c3e:	ea 97       	sbiw	r28, 0x3a	; 58
    5c40:	ea 96       	adiw	r28, 0x3a	; 58
    5c42:	8f ad       	ldd	r24, Y+63	; 0x3f
    5c44:	ea 97       	sbiw	r28, 0x3a	; 58
    5c46:	88 23       	and	r24, r24
    5c48:	b1 f6       	brne	.-84     	; 0x5bf6 <main+0xf2>
	TIMER_voidInit(&t0);
    5c4a:	ce 01       	movw	r24, r28
    5c4c:	8c 59       	subi	r24, 0x9C	; 156
    5c4e:	9f 4f       	sbci	r25, 0xFF	; 255
    5c50:	0e 94 fd 22 	call	0x45fa	; 0x45fa <TIMER_voidInit>
	Timer_t t1 = {TIMER1,TIMER1_IC_FAST_PWM,OC1A_DIS,TIMER10_DIV_8,TIMER1A_INT_DISABLE};
    5c54:	ce 01       	movw	r24, r28
    5c56:	87 59       	subi	r24, 0x97	; 151
    5c58:	9f 4f       	sbci	r25, 0xFF	; 255
    5c5a:	ec 96       	adiw	r28, 0x3c	; 60
    5c5c:	9f af       	std	Y+63, r25	; 0x3f
    5c5e:	8e af       	std	Y+62, r24	; 0x3e
    5c60:	ec 97       	sbiw	r28, 0x3c	; 60
    5c62:	e8 e8       	ldi	r30, 0x88	; 136
    5c64:	f2 e0       	ldi	r31, 0x02	; 2
    5c66:	ee 96       	adiw	r28, 0x3e	; 62
    5c68:	ff af       	std	Y+63, r31	; 0x3f
    5c6a:	ee af       	std	Y+62, r30	; 0x3e
    5c6c:	ee 97       	sbiw	r28, 0x3e	; 62
    5c6e:	f5 e0       	ldi	r31, 0x05	; 5
    5c70:	ef 96       	adiw	r28, 0x3f	; 63
    5c72:	ff af       	std	Y+63, r31	; 0x3f
    5c74:	ef 97       	sbiw	r28, 0x3f	; 63
    5c76:	ee 96       	adiw	r28, 0x3e	; 62
    5c78:	ee ad       	ldd	r30, Y+62	; 0x3e
    5c7a:	ff ad       	ldd	r31, Y+63	; 0x3f
    5c7c:	ee 97       	sbiw	r28, 0x3e	; 62
    5c7e:	00 80       	ld	r0, Z
    5c80:	ee 96       	adiw	r28, 0x3e	; 62
    5c82:	6e ad       	ldd	r22, Y+62	; 0x3e
    5c84:	7f ad       	ldd	r23, Y+63	; 0x3f
    5c86:	ee 97       	sbiw	r28, 0x3e	; 62
    5c88:	6f 5f       	subi	r22, 0xFF	; 255
    5c8a:	7f 4f       	sbci	r23, 0xFF	; 255
    5c8c:	ee 96       	adiw	r28, 0x3e	; 62
    5c8e:	7f af       	std	Y+63, r23	; 0x3f
    5c90:	6e af       	std	Y+62, r22	; 0x3e
    5c92:	ee 97       	sbiw	r28, 0x3e	; 62
    5c94:	ec 96       	adiw	r28, 0x3c	; 60
    5c96:	ee ad       	ldd	r30, Y+62	; 0x3e
    5c98:	ff ad       	ldd	r31, Y+63	; 0x3f
    5c9a:	ec 97       	sbiw	r28, 0x3c	; 60
    5c9c:	00 82       	st	Z, r0
    5c9e:	ec 96       	adiw	r28, 0x3c	; 60
    5ca0:	6e ad       	ldd	r22, Y+62	; 0x3e
    5ca2:	7f ad       	ldd	r23, Y+63	; 0x3f
    5ca4:	ec 97       	sbiw	r28, 0x3c	; 60
    5ca6:	6f 5f       	subi	r22, 0xFF	; 255
    5ca8:	7f 4f       	sbci	r23, 0xFF	; 255
    5caa:	ec 96       	adiw	r28, 0x3c	; 60
    5cac:	7f af       	std	Y+63, r23	; 0x3f
    5cae:	6e af       	std	Y+62, r22	; 0x3e
    5cb0:	ec 97       	sbiw	r28, 0x3c	; 60
    5cb2:	ef 96       	adiw	r28, 0x3f	; 63
    5cb4:	7f ad       	ldd	r23, Y+63	; 0x3f
    5cb6:	ef 97       	sbiw	r28, 0x3f	; 63
    5cb8:	71 50       	subi	r23, 0x01	; 1
    5cba:	ef 96       	adiw	r28, 0x3f	; 63
    5cbc:	7f af       	std	Y+63, r23	; 0x3f
    5cbe:	ef 97       	sbiw	r28, 0x3f	; 63
    5cc0:	ef 96       	adiw	r28, 0x3f	; 63
    5cc2:	8f ad       	ldd	r24, Y+63	; 0x3f
    5cc4:	ef 97       	sbiw	r28, 0x3f	; 63
    5cc6:	88 23       	and	r24, r24
    5cc8:	b1 f6       	brne	.-84     	; 0x5c76 <main+0x172>
	TIMER1_voidSetICR(20000);
    5cca:	80 e2       	ldi	r24, 0x20	; 32
    5ccc:	9e e4       	ldi	r25, 0x4E	; 78
    5cce:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <TIMER1_voidSetICR>
	TIMER_voidInit(&t1);
    5cd2:	ce 01       	movw	r24, r28
    5cd4:	87 59       	subi	r24, 0x97	; 151
    5cd6:	9f 4f       	sbci	r25, 0xFF	; 255
    5cd8:	0e 94 fd 22 	call	0x45fa	; 0x45fa <TIMER_voidInit>

	USART_u8SendStringPoll("welcome! *_*");
    5cdc:	80 e6       	ldi	r24, 0x60	; 96
    5cde:	90 e0       	ldi	r25, 0x00	; 0
    5ce0:	0e 94 a7 29 	call	0x534e	; 0x534e <USART_u8SendStringPoll>
	USART_u8SendPolling(0xD);
    5ce4:	8d e0       	ldi	r24, 0x0D	; 13
    5ce6:	0e 94 b1 28 	call	0x5162	; 0x5162 <USART_u8SendPolling>
	USART_u8SendPolling(0xD);
    5cea:	8d e0       	ldi	r24, 0x0D	; 13
    5cec:	0e 94 b1 28 	call	0x5162	; 0x5162 <USART_u8SendPolling>
	while(1)
	{
		//USART_u8SendStringPoll("Enter Password : ");
		CLCD_voidSendString("Enter Pass: ");
    5cf0:	8d e6       	ldi	r24, 0x6D	; 109
    5cf2:	90 e0       	ldi	r25, 0x00	; 0
    5cf4:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
		for(num=0;num < 4 ;num++)
    5cf8:	fe 01       	movw	r30, r28
    5cfa:	e8 5a       	subi	r30, 0xA8	; 168
    5cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    5cfe:	10 82       	st	Z, r1
    5d00:	23 c1       	rjmp	.+582    	; 0x5f48 <main+0x444>
		{
			USART_u8ReceivePollingWithOut(&data);
    5d02:	ce 01       	movw	r24, r28
    5d04:	85 5a       	subi	r24, 0xA5	; 165
    5d06:	9f 4f       	sbci	r25, 0xFF	; 255
    5d08:	0e 94 6f 29 	call	0x52de	; 0x52de <USART_u8ReceivePollingWithOut>
			if(('0'<=data)&&(data<='9'))
    5d0c:	fe 01       	movw	r30, r28
    5d0e:	e5 5a       	subi	r30, 0xA5	; 165
    5d10:	ff 4f       	sbci	r31, 0xFF	; 255
    5d12:	80 81       	ld	r24, Z
    5d14:	91 81       	ldd	r25, Z+1	; 0x01
    5d16:	80 33       	cpi	r24, 0x30	; 48
    5d18:	91 05       	cpc	r25, r1
    5d1a:	08 f4       	brcc	.+2      	; 0x5d1e <main+0x21a>
    5d1c:	04 c1       	rjmp	.+520    	; 0x5f26 <main+0x422>
    5d1e:	fe 01       	movw	r30, r28
    5d20:	e5 5a       	subi	r30, 0xA5	; 165
    5d22:	ff 4f       	sbci	r31, 0xFF	; 255
    5d24:	80 81       	ld	r24, Z
    5d26:	91 81       	ldd	r25, Z+1	; 0x01
    5d28:	8a 33       	cpi	r24, 0x3A	; 58
    5d2a:	91 05       	cpc	r25, r1
    5d2c:	08 f0       	brcs	.+2      	; 0x5d30 <main+0x22c>
    5d2e:	fb c0       	rjmp	.+502    	; 0x5f26 <main+0x422>
			{
				//USART_u8SendPolling(data);
				//_delay_ms(100);
				//USART_u8SendPolling('\x08');
				//USART_u8SendPolling('*');
				CLCD_voidGoToXY(0,curserPos);
    5d30:	fe 01       	movw	r30, r28
    5d32:	eb 5a       	subi	r30, 0xAB	; 171
    5d34:	ff 4f       	sbci	r31, 0xFF	; 255
    5d36:	80 e0       	ldi	r24, 0x00	; 0
    5d38:	60 81       	ld	r22, Z
    5d3a:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <CLCD_voidGoToXY>
				CLCD_voidSendData(data);
    5d3e:	fe 01       	movw	r30, r28
    5d40:	e5 5a       	subi	r30, 0xA5	; 165
    5d42:	ff 4f       	sbci	r31, 0xFF	; 255
    5d44:	80 81       	ld	r24, Z
    5d46:	91 81       	ldd	r25, Z+1	; 0x01
    5d48:	0e 94 3a 0b 	call	0x1674	; 0x1674 <CLCD_voidSendData>
    5d4c:	fe 01       	movw	r30, r28
    5d4e:	ef 5a       	subi	r30, 0xAF	; 175
    5d50:	ff 4f       	sbci	r31, 0xFF	; 255
    5d52:	80 e0       	ldi	r24, 0x00	; 0
    5d54:	90 e0       	ldi	r25, 0x00	; 0
    5d56:	a8 ec       	ldi	r26, 0xC8	; 200
    5d58:	b2 e4       	ldi	r27, 0x42	; 66
    5d5a:	80 83       	st	Z, r24
    5d5c:	91 83       	std	Z+1, r25	; 0x01
    5d5e:	a2 83       	std	Z+2, r26	; 0x02
    5d60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d62:	8e 01       	movw	r16, r28
    5d64:	03 5b       	subi	r16, 0xB3	; 179
    5d66:	1f 4f       	sbci	r17, 0xFF	; 255
    5d68:	fe 01       	movw	r30, r28
    5d6a:	ef 5a       	subi	r30, 0xAF	; 175
    5d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    5d6e:	60 81       	ld	r22, Z
    5d70:	71 81       	ldd	r23, Z+1	; 0x01
    5d72:	82 81       	ldd	r24, Z+2	; 0x02
    5d74:	93 81       	ldd	r25, Z+3	; 0x03
    5d76:	20 e0       	ldi	r18, 0x00	; 0
    5d78:	30 e0       	ldi	r19, 0x00	; 0
    5d7a:	4a ef       	ldi	r20, 0xFA	; 250
    5d7c:	54 e4       	ldi	r21, 0x44	; 68
    5d7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d82:	dc 01       	movw	r26, r24
    5d84:	cb 01       	movw	r24, r22
    5d86:	f8 01       	movw	r30, r16
    5d88:	80 83       	st	Z, r24
    5d8a:	91 83       	std	Z+1, r25	; 0x01
    5d8c:	a2 83       	std	Z+2, r26	; 0x02
    5d8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5d90:	fe 01       	movw	r30, r28
    5d92:	e3 5b       	subi	r30, 0xB3	; 179
    5d94:	ff 4f       	sbci	r31, 0xFF	; 255
    5d96:	60 81       	ld	r22, Z
    5d98:	71 81       	ldd	r23, Z+1	; 0x01
    5d9a:	82 81       	ldd	r24, Z+2	; 0x02
    5d9c:	93 81       	ldd	r25, Z+3	; 0x03
    5d9e:	20 e0       	ldi	r18, 0x00	; 0
    5da0:	30 e0       	ldi	r19, 0x00	; 0
    5da2:	40 e8       	ldi	r20, 0x80	; 128
    5da4:	5f e3       	ldi	r21, 0x3F	; 63
    5da6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5daa:	88 23       	and	r24, r24
    5dac:	44 f4       	brge	.+16     	; 0x5dbe <main+0x2ba>
		__ticks = 1;
    5dae:	fe 01       	movw	r30, r28
    5db0:	e5 5b       	subi	r30, 0xB5	; 181
    5db2:	ff 4f       	sbci	r31, 0xFF	; 255
    5db4:	81 e0       	ldi	r24, 0x01	; 1
    5db6:	90 e0       	ldi	r25, 0x00	; 0
    5db8:	91 83       	std	Z+1, r25	; 0x01
    5dba:	80 83       	st	Z, r24
    5dbc:	64 c0       	rjmp	.+200    	; 0x5e86 <main+0x382>
	else if (__tmp > 65535)
    5dbe:	fe 01       	movw	r30, r28
    5dc0:	e3 5b       	subi	r30, 0xB3	; 179
    5dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    5dc4:	60 81       	ld	r22, Z
    5dc6:	71 81       	ldd	r23, Z+1	; 0x01
    5dc8:	82 81       	ldd	r24, Z+2	; 0x02
    5dca:	93 81       	ldd	r25, Z+3	; 0x03
    5dcc:	20 e0       	ldi	r18, 0x00	; 0
    5dce:	3f ef       	ldi	r19, 0xFF	; 255
    5dd0:	4f e7       	ldi	r20, 0x7F	; 127
    5dd2:	57 e4       	ldi	r21, 0x47	; 71
    5dd4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5dd8:	18 16       	cp	r1, r24
    5dda:	0c f0       	brlt	.+2      	; 0x5dde <main+0x2da>
    5ddc:	43 c0       	rjmp	.+134    	; 0x5e64 <main+0x360>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5dde:	fe 01       	movw	r30, r28
    5de0:	ef 5a       	subi	r30, 0xAF	; 175
    5de2:	ff 4f       	sbci	r31, 0xFF	; 255
    5de4:	60 81       	ld	r22, Z
    5de6:	71 81       	ldd	r23, Z+1	; 0x01
    5de8:	82 81       	ldd	r24, Z+2	; 0x02
    5dea:	93 81       	ldd	r25, Z+3	; 0x03
    5dec:	20 e0       	ldi	r18, 0x00	; 0
    5dee:	30 e0       	ldi	r19, 0x00	; 0
    5df0:	40 e2       	ldi	r20, 0x20	; 32
    5df2:	51 e4       	ldi	r21, 0x41	; 65
    5df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5df8:	dc 01       	movw	r26, r24
    5dfa:	cb 01       	movw	r24, r22
    5dfc:	8e 01       	movw	r16, r28
    5dfe:	05 5b       	subi	r16, 0xB5	; 181
    5e00:	1f 4f       	sbci	r17, 0xFF	; 255
    5e02:	bc 01       	movw	r22, r24
    5e04:	cd 01       	movw	r24, r26
    5e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e0a:	dc 01       	movw	r26, r24
    5e0c:	cb 01       	movw	r24, r22
    5e0e:	f8 01       	movw	r30, r16
    5e10:	91 83       	std	Z+1, r25	; 0x01
    5e12:	80 83       	st	Z, r24
    5e14:	1f c0       	rjmp	.+62     	; 0x5e54 <main+0x350>
    5e16:	fe 01       	movw	r30, r28
    5e18:	e7 5b       	subi	r30, 0xB7	; 183
    5e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    5e1c:	88 ec       	ldi	r24, 0xC8	; 200
    5e1e:	90 e0       	ldi	r25, 0x00	; 0
    5e20:	91 83       	std	Z+1, r25	; 0x01
    5e22:	80 83       	st	Z, r24
    5e24:	fe 01       	movw	r30, r28
    5e26:	e7 5b       	subi	r30, 0xB7	; 183
    5e28:	ff 4f       	sbci	r31, 0xFF	; 255
    5e2a:	80 81       	ld	r24, Z
    5e2c:	91 81       	ldd	r25, Z+1	; 0x01
    5e2e:	01 97       	sbiw	r24, 0x01	; 1
    5e30:	f1 f7       	brne	.-4      	; 0x5e2e <main+0x32a>
    5e32:	fe 01       	movw	r30, r28
    5e34:	e7 5b       	subi	r30, 0xB7	; 183
    5e36:	ff 4f       	sbci	r31, 0xFF	; 255
    5e38:	91 83       	std	Z+1, r25	; 0x01
    5e3a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e3c:	de 01       	movw	r26, r28
    5e3e:	a5 5b       	subi	r26, 0xB5	; 181
    5e40:	bf 4f       	sbci	r27, 0xFF	; 255
    5e42:	fe 01       	movw	r30, r28
    5e44:	e5 5b       	subi	r30, 0xB5	; 181
    5e46:	ff 4f       	sbci	r31, 0xFF	; 255
    5e48:	80 81       	ld	r24, Z
    5e4a:	91 81       	ldd	r25, Z+1	; 0x01
    5e4c:	01 97       	sbiw	r24, 0x01	; 1
    5e4e:	11 96       	adiw	r26, 0x01	; 1
    5e50:	9c 93       	st	X, r25
    5e52:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e54:	fe 01       	movw	r30, r28
    5e56:	e5 5b       	subi	r30, 0xB5	; 181
    5e58:	ff 4f       	sbci	r31, 0xFF	; 255
    5e5a:	80 81       	ld	r24, Z
    5e5c:	91 81       	ldd	r25, Z+1	; 0x01
    5e5e:	00 97       	sbiw	r24, 0x00	; 0
    5e60:	d1 f6       	brne	.-76     	; 0x5e16 <main+0x312>
    5e62:	27 c0       	rjmp	.+78     	; 0x5eb2 <main+0x3ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e64:	8e 01       	movw	r16, r28
    5e66:	05 5b       	subi	r16, 0xB5	; 181
    5e68:	1f 4f       	sbci	r17, 0xFF	; 255
    5e6a:	fe 01       	movw	r30, r28
    5e6c:	e3 5b       	subi	r30, 0xB3	; 179
    5e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    5e70:	60 81       	ld	r22, Z
    5e72:	71 81       	ldd	r23, Z+1	; 0x01
    5e74:	82 81       	ldd	r24, Z+2	; 0x02
    5e76:	93 81       	ldd	r25, Z+3	; 0x03
    5e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e7c:	dc 01       	movw	r26, r24
    5e7e:	cb 01       	movw	r24, r22
    5e80:	f8 01       	movw	r30, r16
    5e82:	91 83       	std	Z+1, r25	; 0x01
    5e84:	80 83       	st	Z, r24
    5e86:	de 01       	movw	r26, r28
    5e88:	a9 5b       	subi	r26, 0xB9	; 185
    5e8a:	bf 4f       	sbci	r27, 0xFF	; 255
    5e8c:	fe 01       	movw	r30, r28
    5e8e:	e5 5b       	subi	r30, 0xB5	; 181
    5e90:	ff 4f       	sbci	r31, 0xFF	; 255
    5e92:	80 81       	ld	r24, Z
    5e94:	91 81       	ldd	r25, Z+1	; 0x01
    5e96:	8d 93       	st	X+, r24
    5e98:	9c 93       	st	X, r25
    5e9a:	fe 01       	movw	r30, r28
    5e9c:	e9 5b       	subi	r30, 0xB9	; 185
    5e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    5ea0:	80 81       	ld	r24, Z
    5ea2:	91 81       	ldd	r25, Z+1	; 0x01
    5ea4:	01 97       	sbiw	r24, 0x01	; 1
    5ea6:	f1 f7       	brne	.-4      	; 0x5ea4 <main+0x3a0>
    5ea8:	fe 01       	movw	r30, r28
    5eaa:	e9 5b       	subi	r30, 0xB9	; 185
    5eac:	ff 4f       	sbci	r31, 0xFF	; 255
    5eae:	91 83       	std	Z+1, r25	; 0x01
    5eb0:	80 83       	st	Z, r24
				_delay_ms(100);
				CLCD_voidGoToXY(0,curserPos);
    5eb2:	fe 01       	movw	r30, r28
    5eb4:	eb 5a       	subi	r30, 0xAB	; 171
    5eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    5eb8:	80 e0       	ldi	r24, 0x00	; 0
    5eba:	60 81       	ld	r22, Z
    5ebc:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <CLCD_voidGoToXY>
				CLCD_voidSendData('*');
    5ec0:	8a e2       	ldi	r24, 0x2A	; 42
    5ec2:	0e 94 3a 0b 	call	0x1674	; 0x1674 <CLCD_voidSendData>
				password = (data&0x0f) +password*multi;
    5ec6:	fe 01       	movw	r30, r28
    5ec8:	e5 5a       	subi	r30, 0xA5	; 165
    5eca:	ff 4f       	sbci	r31, 0xFF	; 255
    5ecc:	80 81       	ld	r24, Z
    5ece:	91 81       	ldd	r25, Z+1	; 0x01
    5ed0:	ac 01       	movw	r20, r24
    5ed2:	4f 70       	andi	r20, 0x0F	; 15
    5ed4:	50 70       	andi	r21, 0x00	; 0
    5ed6:	fe 01       	movw	r30, r28
    5ed8:	e9 5a       	subi	r30, 0xA9	; 169
    5eda:	ff 4f       	sbci	r31, 0xFF	; 255
    5edc:	80 81       	ld	r24, Z
    5ede:	28 2f       	mov	r18, r24
    5ee0:	30 e0       	ldi	r19, 0x00	; 0
    5ee2:	fe 01       	movw	r30, r28
    5ee4:	e7 5a       	subi	r30, 0xA7	; 167
    5ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    5ee8:	80 81       	ld	r24, Z
    5eea:	91 81       	ldd	r25, Z+1	; 0x01
    5eec:	bc 01       	movw	r22, r24
    5eee:	26 9f       	mul	r18, r22
    5ef0:	c0 01       	movw	r24, r0
    5ef2:	27 9f       	mul	r18, r23
    5ef4:	90 0d       	add	r25, r0
    5ef6:	36 9f       	mul	r19, r22
    5ef8:	90 0d       	add	r25, r0
    5efa:	11 24       	eor	r1, r1
    5efc:	fe 01       	movw	r30, r28
    5efe:	e7 5a       	subi	r30, 0xA7	; 167
    5f00:	ff 4f       	sbci	r31, 0xFF	; 255
    5f02:	84 0f       	add	r24, r20
    5f04:	95 1f       	adc	r25, r21
    5f06:	91 83       	std	Z+1, r25	; 0x01
    5f08:	80 83       	st	Z, r24
				multi = 10;
    5f0a:	fe 01       	movw	r30, r28
    5f0c:	e9 5a       	subi	r30, 0xA9	; 169
    5f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    5f10:	8a e0       	ldi	r24, 0x0A	; 10
    5f12:	80 83       	st	Z, r24
				curserPos++;
    5f14:	de 01       	movw	r26, r28
    5f16:	ab 5a       	subi	r26, 0xAB	; 171
    5f18:	bf 4f       	sbci	r27, 0xFF	; 255
    5f1a:	fe 01       	movw	r30, r28
    5f1c:	eb 5a       	subi	r30, 0xAB	; 171
    5f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    5f20:	80 81       	ld	r24, Z
    5f22:	8f 5f       	subi	r24, 0xFF	; 255
    5f24:	8c 93       	st	X, r24
			}
			if(data==0x0D)
    5f26:	fe 01       	movw	r30, r28
    5f28:	e5 5a       	subi	r30, 0xA5	; 165
    5f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    5f2c:	80 81       	ld	r24, Z
    5f2e:	91 81       	ldd	r25, Z+1	; 0x01
    5f30:	8d 30       	cpi	r24, 0x0D	; 13
    5f32:	91 05       	cpc	r25, r1
    5f34:	81 f0       	breq	.+32     	; 0x5f56 <main+0x452>
	USART_u8SendPolling(0xD);
	while(1)
	{
		//USART_u8SendStringPoll("Enter Password : ");
		CLCD_voidSendString("Enter Pass: ");
		for(num=0;num < 4 ;num++)
    5f36:	de 01       	movw	r26, r28
    5f38:	a8 5a       	subi	r26, 0xA8	; 168
    5f3a:	bf 4f       	sbci	r27, 0xFF	; 255
    5f3c:	fe 01       	movw	r30, r28
    5f3e:	e8 5a       	subi	r30, 0xA8	; 168
    5f40:	ff 4f       	sbci	r31, 0xFF	; 255
    5f42:	80 81       	ld	r24, Z
    5f44:	8f 5f       	subi	r24, 0xFF	; 255
    5f46:	8c 93       	st	X, r24
    5f48:	fe 01       	movw	r30, r28
    5f4a:	e8 5a       	subi	r30, 0xA8	; 168
    5f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    5f4e:	80 81       	ld	r24, Z
    5f50:	84 30       	cpi	r24, 0x04	; 4
    5f52:	08 f4       	brcc	.+2      	; 0x5f56 <main+0x452>
    5f54:	d6 ce       	rjmp	.-596    	; 0x5d02 <main+0x1fe>
				curserPos++;
			}
			if(data==0x0D)
				break;
		}
		if(password==1234)
    5f56:	fe 01       	movw	r30, r28
    5f58:	e7 5a       	subi	r30, 0xA7	; 167
    5f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    5f5c:	80 81       	ld	r24, Z
    5f5e:	91 81       	ldd	r25, Z+1	; 0x01
    5f60:	74 e0       	ldi	r23, 0x04	; 4
    5f62:	82 3d       	cpi	r24, 0xD2	; 210
    5f64:	97 07       	cpc	r25, r23
    5f66:	09 f0       	breq	.+2      	; 0x5f6a <main+0x466>
    5f68:	f1 c1       	rjmp	.+994    	; 0x634c <main+0x848>
		{
			USART_u8SendPolling(0xD);
    5f6a:	8d e0       	ldi	r24, 0x0D	; 13
    5f6c:	0e 94 b1 28 	call	0x5162	; 0x5162 <USART_u8SendPolling>
			USART_u8SendPolling(0xD);
    5f70:	8d e0       	ldi	r24, 0x0D	; 13
    5f72:	0e 94 b1 28 	call	0x5162	; 0x5162 <USART_u8SendPolling>
			USART_u8SendStringPoll("welcome! *_*");
    5f76:	80 e6       	ldi	r24, 0x60	; 96
    5f78:	90 e0       	ldi	r25, 0x00	; 0
    5f7a:	0e 94 a7 29 	call	0x534e	; 0x534e <USART_u8SendStringPoll>
			USART_u8SendPolling(0xD);
    5f7e:	8d e0       	ldi	r24, 0x0D	; 13
    5f80:	0e 94 b1 28 	call	0x5162	; 0x5162 <USART_u8SendPolling>
			USART_u8SendStringPoll("1-open door.    2-close door.");
    5f84:	8a e7       	ldi	r24, 0x7A	; 122
    5f86:	90 e0       	ldi	r25, 0x00	; 0
    5f88:	0e 94 a7 29 	call	0x534e	; 0x534e <USART_u8SendStringPoll>
			USART_u8SendPolling(0xD);
    5f8c:	8d e0       	ldi	r24, 0x0D	; 13
    5f8e:	0e 94 b1 28 	call	0x5162	; 0x5162 <USART_u8SendPolling>
			USART_u8SendStringPoll("3-open Light.   4-close Light.");
    5f92:	88 e9       	ldi	r24, 0x98	; 152
    5f94:	90 e0       	ldi	r25, 0x00	; 0
    5f96:	0e 94 a7 29 	call	0x534e	; 0x534e <USART_u8SendStringPoll>
			USART_u8SendPolling(0xD);
    5f9a:	8d e0       	ldi	r24, 0x0D	; 13
    5f9c:	0e 94 b1 28 	call	0x5162	; 0x5162 <USART_u8SendPolling>
			USART_u8SendStringPoll("5-Adjust Light. 6-open fan.");
    5fa0:	87 eb       	ldi	r24, 0xB7	; 183
    5fa2:	90 e0       	ldi	r25, 0x00	; 0
    5fa4:	0e 94 a7 29 	call	0x534e	; 0x534e <USART_u8SendStringPoll>
			USART_u8SendPolling(0xD);
    5fa8:	8d e0       	ldi	r24, 0x0D	; 13
    5faa:	0e 94 b1 28 	call	0x5162	; 0x5162 <USART_u8SendPolling>
			USART_u8SendStringPoll("7-close fan.    8-Adjust fan.");
    5fae:	83 ed       	ldi	r24, 0xD3	; 211
    5fb0:	90 e0       	ldi	r25, 0x00	; 0
    5fb2:	0e 94 a7 29 	call	0x534e	; 0x534e <USART_u8SendStringPoll>
			USART_u8SendPolling(0xD);
    5fb6:	8d e0       	ldi	r24, 0x0D	; 13
    5fb8:	0e 94 b1 28 	call	0x5162	; 0x5162 <USART_u8SendPolling>
			USART_u8SendStringPoll("9-Play music.");
    5fbc:	81 ef       	ldi	r24, 0xF1	; 241
    5fbe:	90 e0       	ldi	r25, 0x00	; 0
    5fc0:	0e 94 a7 29 	call	0x534e	; 0x534e <USART_u8SendStringPoll>
			USART_u8SendPolling(0xD);
    5fc4:	8d e0       	ldi	r24, 0x0D	; 13
    5fc6:	0e 94 b1 28 	call	0x5162	; 0x5162 <USART_u8SendPolling>
			DIO_u8SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
    5fca:	81 e0       	ldi	r24, 0x01	; 1
    5fcc:	63 e0       	ldi	r22, 0x03	; 3
    5fce:	40 e0       	ldi	r20, 0x00	; 0
    5fd0:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
			CLCD_voidGoToXY(0,0);
    5fd4:	80 e0       	ldi	r24, 0x00	; 0
    5fd6:	60 e0       	ldi	r22, 0x00	; 0
    5fd8:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <CLCD_voidGoToXY>
			CLCD_voidSendString("D: OFF  L: OFF");
    5fdc:	8f ef       	ldi	r24, 0xFF	; 255
    5fde:	90 e0       	ldi	r25, 0x00	; 0
    5fe0:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
			CLCD_voidGoToXY(1,0);
    5fe4:	81 e0       	ldi	r24, 0x01	; 1
    5fe6:	60 e0       	ldi	r22, 0x00	; 0
    5fe8:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <CLCD_voidGoToXY>
			CLCD_voidSendString("F: OFF  M: S");
    5fec:	8e e0       	ldi	r24, 0x0E	; 14
    5fee:	91 e0       	ldi	r25, 0x01	; 1
    5ff0:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
			while(1)
			{

				num = USART_u8ReceivePolling(&data);
    5ff4:	ce 01       	movw	r24, r28
    5ff6:	85 5a       	subi	r24, 0xA5	; 165
    5ff8:	9f 4f       	sbci	r25, 0xFF	; 255
    5ffa:	0e 94 06 29 	call	0x520c	; 0x520c <USART_u8ReceivePolling>
    5ffe:	fe 01       	movw	r30, r28
    6000:	e8 5a       	subi	r30, 0xA8	; 168
    6002:	ff 4f       	sbci	r31, 0xFF	; 255
    6004:	80 83       	st	Z, r24
				switch(data)
    6006:	fe 01       	movw	r30, r28
    6008:	e5 5a       	subi	r30, 0xA5	; 165
    600a:	ff 4f       	sbci	r31, 0xFF	; 255
    600c:	80 81       	ld	r24, Z
    600e:	91 81       	ldd	r25, Z+1	; 0x01
    6010:	e0 96       	adiw	r28, 0x30	; 48
    6012:	9f af       	std	Y+63, r25	; 0x3f
    6014:	8e af       	std	Y+62, r24	; 0x3e
    6016:	e0 97       	sbiw	r28, 0x30	; 48
    6018:	e0 96       	adiw	r28, 0x30	; 48
    601a:	ee ad       	ldd	r30, Y+62	; 0x3e
    601c:	ff ad       	ldd	r31, Y+63	; 0x3f
    601e:	e0 97       	sbiw	r28, 0x30	; 48
    6020:	e4 33       	cpi	r30, 0x34	; 52
    6022:	f1 05       	cpc	r31, r1
    6024:	09 f4       	brne	.+2      	; 0x6028 <main+0x524>
    6026:	c0 c0       	rjmp	.+384    	; 0x61a8 <main+0x6a4>
    6028:	e0 96       	adiw	r28, 0x30	; 48
    602a:	6e ad       	ldd	r22, Y+62	; 0x3e
    602c:	7f ad       	ldd	r23, Y+63	; 0x3f
    602e:	e0 97       	sbiw	r28, 0x30	; 48
    6030:	65 33       	cpi	r22, 0x35	; 53
    6032:	71 05       	cpc	r23, r1
    6034:	48 f5       	brcc	.+82     	; 0x6088 <main+0x584>
    6036:	e0 96       	adiw	r28, 0x30	; 48
    6038:	8e ad       	ldd	r24, Y+62	; 0x3e
    603a:	9f ad       	ldd	r25, Y+63	; 0x3f
    603c:	e0 97       	sbiw	r28, 0x30	; 48
    603e:	81 33       	cpi	r24, 0x31	; 49
    6040:	91 05       	cpc	r25, r1
    6042:	09 f4       	brne	.+2      	; 0x6046 <main+0x542>
    6044:	52 c0       	rjmp	.+164    	; 0x60ea <main+0x5e6>
    6046:	e0 96       	adiw	r28, 0x30	; 48
    6048:	ee ad       	ldd	r30, Y+62	; 0x3e
    604a:	ff ad       	ldd	r31, Y+63	; 0x3f
    604c:	e0 97       	sbiw	r28, 0x30	; 48
    604e:	e2 33       	cpi	r30, 0x32	; 50
    6050:	f1 05       	cpc	r31, r1
    6052:	48 f4       	brcc	.+18     	; 0x6066 <main+0x562>
    6054:	e0 96       	adiw	r28, 0x30	; 48
    6056:	6e ad       	ldd	r22, Y+62	; 0x3e
    6058:	7f ad       	ldd	r23, Y+63	; 0x3f
    605a:	e0 97       	sbiw	r28, 0x30	; 48
    605c:	60 33       	cpi	r22, 0x30	; 48
    605e:	71 05       	cpc	r23, r1
    6060:	09 f4       	brne	.+2      	; 0x6064 <main+0x560>
    6062:	5e c1       	rjmp	.+700    	; 0x6320 <main+0x81c>
    6064:	6d c1       	rjmp	.+730    	; 0x6340 <main+0x83c>
    6066:	e0 96       	adiw	r28, 0x30	; 48
    6068:	8e ad       	ldd	r24, Y+62	; 0x3e
    606a:	9f ad       	ldd	r25, Y+63	; 0x3f
    606c:	e0 97       	sbiw	r28, 0x30	; 48
    606e:	82 33       	cpi	r24, 0x32	; 50
    6070:	91 05       	cpc	r25, r1
    6072:	09 f4       	brne	.+2      	; 0x6076 <main+0x572>
    6074:	59 c0       	rjmp	.+178    	; 0x6128 <main+0x624>
    6076:	e0 96       	adiw	r28, 0x30	; 48
    6078:	ee ad       	ldd	r30, Y+62	; 0x3e
    607a:	ff ad       	ldd	r31, Y+63	; 0x3f
    607c:	e0 97       	sbiw	r28, 0x30	; 48
    607e:	e3 33       	cpi	r30, 0x33	; 51
    6080:	f1 05       	cpc	r31, r1
    6082:	09 f4       	brne	.+2      	; 0x6086 <main+0x582>
    6084:	70 c0       	rjmp	.+224    	; 0x6166 <main+0x662>
    6086:	5c c1       	rjmp	.+696    	; 0x6340 <main+0x83c>
    6088:	e0 96       	adiw	r28, 0x30	; 48
    608a:	6e ad       	ldd	r22, Y+62	; 0x3e
    608c:	7f ad       	ldd	r23, Y+63	; 0x3f
    608e:	e0 97       	sbiw	r28, 0x30	; 48
    6090:	67 33       	cpi	r22, 0x37	; 55
    6092:	71 05       	cpc	r23, r1
    6094:	09 f4       	brne	.+2      	; 0x6098 <main+0x594>
    6096:	ed c0       	rjmp	.+474    	; 0x6272 <main+0x76e>
    6098:	e0 96       	adiw	r28, 0x30	; 48
    609a:	8e ad       	ldd	r24, Y+62	; 0x3e
    609c:	9f ad       	ldd	r25, Y+63	; 0x3f
    609e:	e0 97       	sbiw	r28, 0x30	; 48
    60a0:	88 33       	cpi	r24, 0x38	; 56
    60a2:	91 05       	cpc	r25, r1
    60a4:	88 f4       	brcc	.+34     	; 0x60c8 <main+0x5c4>
    60a6:	e0 96       	adiw	r28, 0x30	; 48
    60a8:	ee ad       	ldd	r30, Y+62	; 0x3e
    60aa:	ff ad       	ldd	r31, Y+63	; 0x3f
    60ac:	e0 97       	sbiw	r28, 0x30	; 48
    60ae:	e5 33       	cpi	r30, 0x35	; 53
    60b0:	f1 05       	cpc	r31, r1
    60b2:	09 f4       	brne	.+2      	; 0x60b6 <main+0x5b2>
    60b4:	9a c0       	rjmp	.+308    	; 0x61ea <main+0x6e6>
    60b6:	e0 96       	adiw	r28, 0x30	; 48
    60b8:	6e ad       	ldd	r22, Y+62	; 0x3e
    60ba:	7f ad       	ldd	r23, Y+63	; 0x3f
    60bc:	e0 97       	sbiw	r28, 0x30	; 48
    60be:	66 33       	cpi	r22, 0x36	; 54
    60c0:	71 05       	cpc	r23, r1
    60c2:	09 f4       	brne	.+2      	; 0x60c6 <main+0x5c2>
    60c4:	b5 c0       	rjmp	.+362    	; 0x6230 <main+0x72c>
    60c6:	3c c1       	rjmp	.+632    	; 0x6340 <main+0x83c>
    60c8:	e0 96       	adiw	r28, 0x30	; 48
    60ca:	8e ad       	ldd	r24, Y+62	; 0x3e
    60cc:	9f ad       	ldd	r25, Y+63	; 0x3f
    60ce:	e0 97       	sbiw	r28, 0x30	; 48
    60d0:	88 33       	cpi	r24, 0x38	; 56
    60d2:	91 05       	cpc	r25, r1
    60d4:	09 f4       	brne	.+2      	; 0x60d8 <main+0x5d4>
    60d6:	ee c0       	rjmp	.+476    	; 0x62b4 <main+0x7b0>
    60d8:	e0 96       	adiw	r28, 0x30	; 48
    60da:	ee ad       	ldd	r30, Y+62	; 0x3e
    60dc:	ff ad       	ldd	r31, Y+63	; 0x3f
    60de:	e0 97       	sbiw	r28, 0x30	; 48
    60e0:	e9 33       	cpi	r30, 0x39	; 57
    60e2:	f1 05       	cpc	r31, r1
    60e4:	09 f4       	brne	.+2      	; 0x60e8 <main+0x5e4>
    60e6:	09 c1       	rjmp	.+530    	; 0x62fa <main+0x7f6>
    60e8:	2b c1       	rjmp	.+598    	; 0x6340 <main+0x83c>
				{
				case '1':
					t1.CompOutMode = OC1B_CCST;
    60ea:	fe 01       	movw	r30, r28
    60ec:	e7 59       	subi	r30, 0x97	; 151
    60ee:	ff 4f       	sbci	r31, 0xFF	; 255
    60f0:	82 e0       	ldi	r24, 0x02	; 2
    60f2:	82 83       	std	Z+2, r24	; 0x02
					TIMER1_voidCompOutModeChange(&t1);
    60f4:	ce 01       	movw	r24, r28
    60f6:	87 59       	subi	r24, 0x97	; 151
    60f8:	9f 4f       	sbci	r25, 0xFF	; 255
    60fa:	0e 94 87 25 	call	0x4b0e	; 0x4b0e <TIMER1_voidCompOutModeChange>
					SERVO_voidSetAngle(180);
    60fe:	84 eb       	ldi	r24, 0xB4	; 180
    6100:	90 e0       	ldi	r25, 0x00	; 0
    6102:	0e 94 90 17 	call	0x2f20	; 0x2f20 <SERVO_voidSetAngle>
					CLCD_voidGoToXY(0,3);
    6106:	80 e0       	ldi	r24, 0x00	; 0
    6108:	63 e0       	ldi	r22, 0x03	; 3
    610a:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <CLCD_voidGoToXY>
					CLCD_voidSendString("   ");
    610e:	8b e1       	ldi	r24, 0x1B	; 27
    6110:	91 e0       	ldi	r25, 0x01	; 1
    6112:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
					CLCD_voidGoToXY(0,3);
    6116:	80 e0       	ldi	r24, 0x00	; 0
    6118:	63 e0       	ldi	r22, 0x03	; 3
    611a:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <CLCD_voidGoToXY>
					CLCD_voidSendString("ON");
    611e:	8f e1       	ldi	r24, 0x1F	; 31
    6120:	91 e0       	ldi	r25, 0x01	; 1
    6122:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
    6126:	0c c1       	rjmp	.+536    	; 0x6340 <main+0x83c>
					break;
				case '2':
					t1.CompOutMode = OC1B_CCST;
    6128:	fe 01       	movw	r30, r28
    612a:	e7 59       	subi	r30, 0x97	; 151
    612c:	ff 4f       	sbci	r31, 0xFF	; 255
    612e:	82 e0       	ldi	r24, 0x02	; 2
    6130:	82 83       	std	Z+2, r24	; 0x02
					TIMER1_voidCompOutModeChange(&t1);
    6132:	ce 01       	movw	r24, r28
    6134:	87 59       	subi	r24, 0x97	; 151
    6136:	9f 4f       	sbci	r25, 0xFF	; 255
    6138:	0e 94 87 25 	call	0x4b0e	; 0x4b0e <TIMER1_voidCompOutModeChange>
					SERVO_voidSetAngle(0);
    613c:	80 e0       	ldi	r24, 0x00	; 0
    613e:	90 e0       	ldi	r25, 0x00	; 0
    6140:	0e 94 90 17 	call	0x2f20	; 0x2f20 <SERVO_voidSetAngle>
					CLCD_voidGoToXY(0,3);
    6144:	80 e0       	ldi	r24, 0x00	; 0
    6146:	63 e0       	ldi	r22, 0x03	; 3
    6148:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <CLCD_voidGoToXY>
					CLCD_voidSendString("   ");
    614c:	8b e1       	ldi	r24, 0x1B	; 27
    614e:	91 e0       	ldi	r25, 0x01	; 1
    6150:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
					CLCD_voidGoToXY(0,3);
    6154:	80 e0       	ldi	r24, 0x00	; 0
    6156:	63 e0       	ldi	r22, 0x03	; 3
    6158:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <CLCD_voidGoToXY>
					CLCD_voidSendString("OFF");
    615c:	82 e2       	ldi	r24, 0x22	; 34
    615e:	91 e0       	ldi	r25, 0x01	; 1
    6160:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
    6164:	ed c0       	rjmp	.+474    	; 0x6340 <main+0x83c>
					break;
				case '3':
					notifyFlag1 = NO_NOTE;
    6166:	10 92 e7 02 	sts	0x02E7, r1
					t1.CompOutMode = OC1A_DIS;
    616a:	fe 01       	movw	r30, r28
    616c:	e7 59       	subi	r30, 0x97	; 151
    616e:	ff 4f       	sbci	r31, 0xFF	; 255
    6170:	12 82       	std	Z+2, r1	; 0x02
					TIMER1_voidCompOutModeChange(&t1);
    6172:	ce 01       	movw	r24, r28
    6174:	87 59       	subi	r24, 0x97	; 151
    6176:	9f 4f       	sbci	r25, 0xFF	; 255
    6178:	0e 94 87 25 	call	0x4b0e	; 0x4b0e <TIMER1_voidCompOutModeChange>
					DIO_u8SetPinValue(DIO_PORTD,DIO_PIN5,DIO_PIN_HIGH);
    617c:	83 e0       	ldi	r24, 0x03	; 3
    617e:	65 e0       	ldi	r22, 0x05	; 5
    6180:	41 e0       	ldi	r20, 0x01	; 1
    6182:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
					CLCD_voidGoToXY(0,11);
    6186:	80 e0       	ldi	r24, 0x00	; 0
    6188:	6b e0       	ldi	r22, 0x0B	; 11
    618a:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <CLCD_voidGoToXY>
					CLCD_voidSendString("   ");
    618e:	8b e1       	ldi	r24, 0x1B	; 27
    6190:	91 e0       	ldi	r25, 0x01	; 1
    6192:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
					CLCD_voidGoToXY(0,11);
    6196:	80 e0       	ldi	r24, 0x00	; 0
    6198:	6b e0       	ldi	r22, 0x0B	; 11
    619a:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <CLCD_voidGoToXY>
					CLCD_voidSendString("ON");
    619e:	8f e1       	ldi	r24, 0x1F	; 31
    61a0:	91 e0       	ldi	r25, 0x01	; 1
    61a2:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
    61a6:	cc c0       	rjmp	.+408    	; 0x6340 <main+0x83c>
					break;
				case '4':
					notifyFlag1 = NO_NOTE;
    61a8:	10 92 e7 02 	sts	0x02E7, r1
					t1.CompOutMode = OC1A_DIS;
    61ac:	fe 01       	movw	r30, r28
    61ae:	e7 59       	subi	r30, 0x97	; 151
    61b0:	ff 4f       	sbci	r31, 0xFF	; 255
    61b2:	12 82       	std	Z+2, r1	; 0x02
					TIMER1_voidCompOutModeChange(&t1);
    61b4:	ce 01       	movw	r24, r28
    61b6:	87 59       	subi	r24, 0x97	; 151
    61b8:	9f 4f       	sbci	r25, 0xFF	; 255
    61ba:	0e 94 87 25 	call	0x4b0e	; 0x4b0e <TIMER1_voidCompOutModeChange>
					DIO_u8SetPinValue(DIO_PORTD,DIO_PIN5,DIO_PIN_LOW);
    61be:	83 e0       	ldi	r24, 0x03	; 3
    61c0:	65 e0       	ldi	r22, 0x05	; 5
    61c2:	40 e0       	ldi	r20, 0x00	; 0
    61c4:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
					CLCD_voidGoToXY(0,11);
    61c8:	80 e0       	ldi	r24, 0x00	; 0
    61ca:	6b e0       	ldi	r22, 0x0B	; 11
    61cc:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <CLCD_voidGoToXY>
					CLCD_voidSendString("   ");
    61d0:	8b e1       	ldi	r24, 0x1B	; 27
    61d2:	91 e0       	ldi	r25, 0x01	; 1
    61d4:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
					CLCD_voidGoToXY(0,11);
    61d8:	80 e0       	ldi	r24, 0x00	; 0
    61da:	6b e0       	ldi	r22, 0x0B	; 11
    61dc:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <CLCD_voidGoToXY>
					CLCD_voidSendString("OFF");
    61e0:	82 e2       	ldi	r24, 0x22	; 34
    61e2:	91 e0       	ldi	r25, 0x01	; 1
    61e4:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
    61e8:	ab c0       	rjmp	.+342    	; 0x6340 <main+0x83c>
					break;
				case '5':
					notifyFlag1 = LDR_NOTE;
    61ea:	82 e0       	ldi	r24, 0x02	; 2
    61ec:	80 93 e7 02 	sts	0x02E7, r24
					t1.CompOutMode = OC1A_CCST;
    61f0:	fe 01       	movw	r30, r28
    61f2:	e7 59       	subi	r30, 0x97	; 151
    61f4:	ff 4f       	sbci	r31, 0xFF	; 255
    61f6:	88 e0       	ldi	r24, 0x08	; 8
    61f8:	82 83       	std	Z+2, r24	; 0x02
					TIMER1_voidCompOutModeChange(&t1);
    61fa:	ce 01       	movw	r24, r28
    61fc:	87 59       	subi	r24, 0x97	; 151
    61fe:	9f 4f       	sbci	r25, 0xFF	; 255
    6200:	0e 94 87 25 	call	0x4b0e	; 0x4b0e <TIMER1_voidCompOutModeChange>
					ADC_u8StartChainConvAsynch(&adc1);
    6204:	ce 01       	movw	r24, r28
    6206:	83 5a       	subi	r24, 0xA3	; 163
    6208:	9f 4f       	sbci	r25, 0xFF	; 255
    620a:	0e 94 3e 08 	call	0x107c	; 0x107c <ADC_u8StartChainConvAsynch>
					CLCD_voidGoToXY(0,11);
    620e:	80 e0       	ldi	r24, 0x00	; 0
    6210:	6b e0       	ldi	r22, 0x0B	; 11
    6212:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <CLCD_voidGoToXY>
					CLCD_voidSendString("   ");
    6216:	8b e1       	ldi	r24, 0x1B	; 27
    6218:	91 e0       	ldi	r25, 0x01	; 1
    621a:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
					CLCD_voidGoToXY(0,11);
    621e:	80 e0       	ldi	r24, 0x00	; 0
    6220:	6b e0       	ldi	r22, 0x0B	; 11
    6222:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <CLCD_voidGoToXY>
					CLCD_voidSendString("ADJ");
    6226:	86 e2       	ldi	r24, 0x26	; 38
    6228:	91 e0       	ldi	r25, 0x01	; 1
    622a:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
    622e:	88 c0       	rjmp	.+272    	; 0x6340 <main+0x83c>
					break;
				case '6':
					notifyFlag2 = NO_NOTE;
    6230:	10 92 e8 02 	sts	0x02E8, r1
					t0.CompOutMode = OC0_DIS;
    6234:	fe 01       	movw	r30, r28
    6236:	ec 59       	subi	r30, 0x9C	; 156
    6238:	ff 4f       	sbci	r31, 0xFF	; 255
    623a:	12 82       	std	Z+2, r1	; 0x02
					TIMER0_voidCompOutModeChange(&t0);
    623c:	ce 01       	movw	r24, r28
    623e:	8c 59       	subi	r24, 0x9C	; 156
    6240:	9f 4f       	sbci	r25, 0xFF	; 255
    6242:	0e 94 03 25 	call	0x4a06	; 0x4a06 <TIMER0_voidCompOutModeChange>
					DIO_u8SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);
    6246:	81 e0       	ldi	r24, 0x01	; 1
    6248:	63 e0       	ldi	r22, 0x03	; 3
    624a:	41 e0       	ldi	r20, 0x01	; 1
    624c:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
					CLCD_voidGoToXY(1,3);
    6250:	81 e0       	ldi	r24, 0x01	; 1
    6252:	63 e0       	ldi	r22, 0x03	; 3
    6254:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <CLCD_voidGoToXY>
					CLCD_voidSendString("   ");
    6258:	8b e1       	ldi	r24, 0x1B	; 27
    625a:	91 e0       	ldi	r25, 0x01	; 1
    625c:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
					CLCD_voidGoToXY(1,3);
    6260:	81 e0       	ldi	r24, 0x01	; 1
    6262:	63 e0       	ldi	r22, 0x03	; 3
    6264:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <CLCD_voidGoToXY>
					CLCD_voidSendString("ON");
    6268:	8f e1       	ldi	r24, 0x1F	; 31
    626a:	91 e0       	ldi	r25, 0x01	; 1
    626c:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
    6270:	67 c0       	rjmp	.+206    	; 0x6340 <main+0x83c>
					break;
				case '7':
					notifyFlag2 = NO_NOTE;
    6272:	10 92 e8 02 	sts	0x02E8, r1
					t0.CompOutMode = OC0_DIS;
    6276:	fe 01       	movw	r30, r28
    6278:	ec 59       	subi	r30, 0x9C	; 156
    627a:	ff 4f       	sbci	r31, 0xFF	; 255
    627c:	12 82       	std	Z+2, r1	; 0x02
					TIMER0_voidCompOutModeChange(&t0);
    627e:	ce 01       	movw	r24, r28
    6280:	8c 59       	subi	r24, 0x9C	; 156
    6282:	9f 4f       	sbci	r25, 0xFF	; 255
    6284:	0e 94 03 25 	call	0x4a06	; 0x4a06 <TIMER0_voidCompOutModeChange>
					DIO_u8SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
    6288:	81 e0       	ldi	r24, 0x01	; 1
    628a:	63 e0       	ldi	r22, 0x03	; 3
    628c:	40 e0       	ldi	r20, 0x00	; 0
    628e:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
					CLCD_voidGoToXY(1,3);
    6292:	81 e0       	ldi	r24, 0x01	; 1
    6294:	63 e0       	ldi	r22, 0x03	; 3
    6296:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <CLCD_voidGoToXY>
					CLCD_voidSendString("   ");
    629a:	8b e1       	ldi	r24, 0x1B	; 27
    629c:	91 e0       	ldi	r25, 0x01	; 1
    629e:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
					CLCD_voidGoToXY(1,3);
    62a2:	81 e0       	ldi	r24, 0x01	; 1
    62a4:	63 e0       	ldi	r22, 0x03	; 3
    62a6:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <CLCD_voidGoToXY>
					CLCD_voidSendString("OFF");
    62aa:	82 e2       	ldi	r24, 0x22	; 34
    62ac:	91 e0       	ldi	r25, 0x01	; 1
    62ae:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
    62b2:	46 c0       	rjmp	.+140    	; 0x6340 <main+0x83c>
					break;
				case '8':
					notifyFlag2 = LM35_NOTE;
    62b4:	81 e0       	ldi	r24, 0x01	; 1
    62b6:	80 93 e8 02 	sts	0x02E8, r24
					DIO_u8SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);
    62ba:	81 e0       	ldi	r24, 0x01	; 1
    62bc:	63 e0       	ldi	r22, 0x03	; 3
    62be:	41 e0       	ldi	r20, 0x01	; 1
    62c0:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
					t0.CompOutMode = OC0_CCST;
    62c4:	fe 01       	movw	r30, r28
    62c6:	ec 59       	subi	r30, 0x9C	; 156
    62c8:	ff 4f       	sbci	r31, 0xFF	; 255
    62ca:	82 e0       	ldi	r24, 0x02	; 2
    62cc:	82 83       	std	Z+2, r24	; 0x02
					TIMER0_voidCompOutModeChange(&t0);
    62ce:	ce 01       	movw	r24, r28
    62d0:	8c 59       	subi	r24, 0x9C	; 156
    62d2:	9f 4f       	sbci	r25, 0xFF	; 255
    62d4:	0e 94 03 25 	call	0x4a06	; 0x4a06 <TIMER0_voidCompOutModeChange>
					CLCD_voidGoToXY(1,3);
    62d8:	81 e0       	ldi	r24, 0x01	; 1
    62da:	63 e0       	ldi	r22, 0x03	; 3
    62dc:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <CLCD_voidGoToXY>
					CLCD_voidSendString("   ");
    62e0:	8b e1       	ldi	r24, 0x1B	; 27
    62e2:	91 e0       	ldi	r25, 0x01	; 1
    62e4:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
					CLCD_voidGoToXY(1,3);
    62e8:	81 e0       	ldi	r24, 0x01	; 1
    62ea:	63 e0       	ldi	r22, 0x03	; 3
    62ec:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <CLCD_voidGoToXY>
					CLCD_voidSendString("ADJ");
    62f0:	86 e2       	ldi	r24, 0x26	; 38
    62f2:	91 e0       	ldi	r25, 0x01	; 1
    62f4:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
    62f8:	23 c0       	rjmp	.+70     	; 0x6340 <main+0x83c>
					break;
				case '9':
					BuzzerSound();
    62fa:	0e 94 48 34 	call	0x6890	; 0x6890 <BuzzerSound>
					CLCD_voidGoToXY(1,11);
    62fe:	81 e0       	ldi	r24, 0x01	; 1
    6300:	6b e0       	ldi	r22, 0x0B	; 11
    6302:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <CLCD_voidGoToXY>
					CLCD_voidSendString(" ");
    6306:	8a e2       	ldi	r24, 0x2A	; 42
    6308:	91 e0       	ldi	r25, 0x01	; 1
    630a:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
					CLCD_voidGoToXY(1,11);
    630e:	81 e0       	ldi	r24, 0x01	; 1
    6310:	6b e0       	ldi	r22, 0x0B	; 11
    6312:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <CLCD_voidGoToXY>
					CLCD_voidSendString("P");
    6316:	8c e2       	ldi	r24, 0x2C	; 44
    6318:	91 e0       	ldi	r25, 0x01	; 1
    631a:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
    631e:	10 c0       	rjmp	.+32     	; 0x6340 <main+0x83c>
					break;
				case '0':
					CLCD_voidGoToXY(1,11);
    6320:	81 e0       	ldi	r24, 0x01	; 1
    6322:	6b e0       	ldi	r22, 0x0B	; 11
    6324:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <CLCD_voidGoToXY>
					CLCD_voidSendString(" ");
    6328:	8a e2       	ldi	r24, 0x2A	; 42
    632a:	91 e0       	ldi	r25, 0x01	; 1
    632c:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
					CLCD_voidGoToXY(1,11);
    6330:	81 e0       	ldi	r24, 0x01	; 1
    6332:	6b e0       	ldi	r22, 0x0B	; 11
    6334:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <CLCD_voidGoToXY>
					CLCD_voidSendString("S");
    6338:	8e e2       	ldi	r24, 0x2E	; 46
    633a:	91 e0       	ldi	r25, 0x01	; 1
    633c:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
				}
				ADC_u8StartChainConvAsynch(&adc1);
    6340:	ce 01       	movw	r24, r28
    6342:	83 5a       	subi	r24, 0xA3	; 163
    6344:	9f 4f       	sbci	r25, 0xFF	; 255
    6346:	0e 94 3e 08 	call	0x107c	; 0x107c <ADC_u8StartChainConvAsynch>
    634a:	54 ce       	rjmp	.-856    	; 0x5ff4 <main+0x4f0>
			}
		}
		else
		{
			if(trials==0)
    634c:	fe 01       	movw	r30, r28
    634e:	ea 5a       	subi	r30, 0xAA	; 170
    6350:	ff 4f       	sbci	r31, 0xFF	; 255
    6352:	80 81       	ld	r24, Z
    6354:	88 23       	and	r24, r24
    6356:	09 f4       	brne	.+2      	; 0x635a <main+0x856>
    6358:	28 c1       	rjmp	.+592    	; 0x65aa <main+0xaa6>
			{
				break;
			}
			CLCD_voidSendCommand(1);
    635a:	81 e0       	ldi	r24, 0x01	; 1
    635c:	0e 94 61 09 	call	0x12c2	; 0x12c2 <CLCD_voidSendCommand>
			CLCD_voidSendString("trials : ");
    6360:	80 e3       	ldi	r24, 0x30	; 48
    6362:	91 e0       	ldi	r25, 0x01	; 1
    6364:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
			CLCD_voidSendData(trials+'0');
    6368:	fe 01       	movw	r30, r28
    636a:	ea 5a       	subi	r30, 0xAA	; 170
    636c:	ff 4f       	sbci	r31, 0xFF	; 255
    636e:	80 81       	ld	r24, Z
    6370:	80 5d       	subi	r24, 0xD0	; 208
    6372:	0e 94 3a 0b 	call	0x1674	; 0x1674 <CLCD_voidSendData>
			trials--;
    6376:	de 01       	movw	r26, r28
    6378:	aa 5a       	subi	r26, 0xAA	; 170
    637a:	bf 4f       	sbci	r27, 0xFF	; 255
    637c:	fe 01       	movw	r30, r28
    637e:	ea 5a       	subi	r30, 0xAA	; 170
    6380:	ff 4f       	sbci	r31, 0xFF	; 255
    6382:	80 81       	ld	r24, Z
    6384:	81 50       	subi	r24, 0x01	; 1
    6386:	8c 93       	st	X, r24
    6388:	fe 01       	movw	r30, r28
    638a:	ed 5b       	subi	r30, 0xBD	; 189
    638c:	ff 4f       	sbci	r31, 0xFF	; 255
    638e:	80 e0       	ldi	r24, 0x00	; 0
    6390:	90 e0       	ldi	r25, 0x00	; 0
    6392:	aa ef       	ldi	r26, 0xFA	; 250
    6394:	b3 e4       	ldi	r27, 0x43	; 67
    6396:	80 83       	st	Z, r24
    6398:	91 83       	std	Z+1, r25	; 0x01
    639a:	a2 83       	std	Z+2, r26	; 0x02
    639c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    639e:	8e 01       	movw	r16, r28
    63a0:	01 5c       	subi	r16, 0xC1	; 193
    63a2:	1f 4f       	sbci	r17, 0xFF	; 255
    63a4:	fe 01       	movw	r30, r28
    63a6:	ed 5b       	subi	r30, 0xBD	; 189
    63a8:	ff 4f       	sbci	r31, 0xFF	; 255
    63aa:	60 81       	ld	r22, Z
    63ac:	71 81       	ldd	r23, Z+1	; 0x01
    63ae:	82 81       	ldd	r24, Z+2	; 0x02
    63b0:	93 81       	ldd	r25, Z+3	; 0x03
    63b2:	20 e0       	ldi	r18, 0x00	; 0
    63b4:	30 e0       	ldi	r19, 0x00	; 0
    63b6:	4a ef       	ldi	r20, 0xFA	; 250
    63b8:	54 e4       	ldi	r21, 0x44	; 68
    63ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    63be:	dc 01       	movw	r26, r24
    63c0:	cb 01       	movw	r24, r22
    63c2:	f8 01       	movw	r30, r16
    63c4:	80 83       	st	Z, r24
    63c6:	91 83       	std	Z+1, r25	; 0x01
    63c8:	a2 83       	std	Z+2, r26	; 0x02
    63ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    63cc:	fe 01       	movw	r30, r28
    63ce:	ff 96       	adiw	r30, 0x3f	; 63
    63d0:	60 81       	ld	r22, Z
    63d2:	71 81       	ldd	r23, Z+1	; 0x01
    63d4:	82 81       	ldd	r24, Z+2	; 0x02
    63d6:	93 81       	ldd	r25, Z+3	; 0x03
    63d8:	20 e0       	ldi	r18, 0x00	; 0
    63da:	30 e0       	ldi	r19, 0x00	; 0
    63dc:	40 e8       	ldi	r20, 0x80	; 128
    63de:	5f e3       	ldi	r21, 0x3F	; 63
    63e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    63e4:	88 23       	and	r24, r24
    63e6:	2c f4       	brge	.+10     	; 0x63f2 <main+0x8ee>
		__ticks = 1;
    63e8:	81 e0       	ldi	r24, 0x01	; 1
    63ea:	90 e0       	ldi	r25, 0x00	; 0
    63ec:	9e af       	std	Y+62, r25	; 0x3e
    63ee:	8d af       	std	Y+61, r24	; 0x3d
    63f0:	46 c0       	rjmp	.+140    	; 0x647e <main+0x97a>
	else if (__tmp > 65535)
    63f2:	fe 01       	movw	r30, r28
    63f4:	ff 96       	adiw	r30, 0x3f	; 63
    63f6:	60 81       	ld	r22, Z
    63f8:	71 81       	ldd	r23, Z+1	; 0x01
    63fa:	82 81       	ldd	r24, Z+2	; 0x02
    63fc:	93 81       	ldd	r25, Z+3	; 0x03
    63fe:	20 e0       	ldi	r18, 0x00	; 0
    6400:	3f ef       	ldi	r19, 0xFF	; 255
    6402:	4f e7       	ldi	r20, 0x7F	; 127
    6404:	57 e4       	ldi	r21, 0x47	; 71
    6406:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    640a:	18 16       	cp	r1, r24
    640c:	64 f5       	brge	.+88     	; 0x6466 <main+0x962>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    640e:	fe 01       	movw	r30, r28
    6410:	ed 5b       	subi	r30, 0xBD	; 189
    6412:	ff 4f       	sbci	r31, 0xFF	; 255
    6414:	60 81       	ld	r22, Z
    6416:	71 81       	ldd	r23, Z+1	; 0x01
    6418:	82 81       	ldd	r24, Z+2	; 0x02
    641a:	93 81       	ldd	r25, Z+3	; 0x03
    641c:	20 e0       	ldi	r18, 0x00	; 0
    641e:	30 e0       	ldi	r19, 0x00	; 0
    6420:	40 e2       	ldi	r20, 0x20	; 32
    6422:	51 e4       	ldi	r21, 0x41	; 65
    6424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6428:	dc 01       	movw	r26, r24
    642a:	cb 01       	movw	r24, r22
    642c:	bc 01       	movw	r22, r24
    642e:	cd 01       	movw	r24, r26
    6430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6434:	dc 01       	movw	r26, r24
    6436:	cb 01       	movw	r24, r22
    6438:	9e af       	std	Y+62, r25	; 0x3e
    643a:	8d af       	std	Y+61, r24	; 0x3d
    643c:	0f c0       	rjmp	.+30     	; 0x645c <main+0x958>
    643e:	88 ec       	ldi	r24, 0xC8	; 200
    6440:	90 e0       	ldi	r25, 0x00	; 0
    6442:	9c af       	std	Y+60, r25	; 0x3c
    6444:	8b af       	std	Y+59, r24	; 0x3b
    6446:	8b ad       	ldd	r24, Y+59	; 0x3b
    6448:	9c ad       	ldd	r25, Y+60	; 0x3c
    644a:	01 97       	sbiw	r24, 0x01	; 1
    644c:	f1 f7       	brne	.-4      	; 0x644a <main+0x946>
    644e:	9c af       	std	Y+60, r25	; 0x3c
    6450:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6452:	8d ad       	ldd	r24, Y+61	; 0x3d
    6454:	9e ad       	ldd	r25, Y+62	; 0x3e
    6456:	01 97       	sbiw	r24, 0x01	; 1
    6458:	9e af       	std	Y+62, r25	; 0x3e
    645a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    645c:	8d ad       	ldd	r24, Y+61	; 0x3d
    645e:	9e ad       	ldd	r25, Y+62	; 0x3e
    6460:	00 97       	sbiw	r24, 0x00	; 0
    6462:	69 f7       	brne	.-38     	; 0x643e <main+0x93a>
    6464:	16 c0       	rjmp	.+44     	; 0x6492 <main+0x98e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6466:	fe 01       	movw	r30, r28
    6468:	ff 96       	adiw	r30, 0x3f	; 63
    646a:	60 81       	ld	r22, Z
    646c:	71 81       	ldd	r23, Z+1	; 0x01
    646e:	82 81       	ldd	r24, Z+2	; 0x02
    6470:	93 81       	ldd	r25, Z+3	; 0x03
    6472:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6476:	dc 01       	movw	r26, r24
    6478:	cb 01       	movw	r24, r22
    647a:	9e af       	std	Y+62, r25	; 0x3e
    647c:	8d af       	std	Y+61, r24	; 0x3d
    647e:	8d ad       	ldd	r24, Y+61	; 0x3d
    6480:	9e ad       	ldd	r25, Y+62	; 0x3e
    6482:	9a af       	std	Y+58, r25	; 0x3a
    6484:	89 af       	std	Y+57, r24	; 0x39
    6486:	89 ad       	ldd	r24, Y+57	; 0x39
    6488:	9a ad       	ldd	r25, Y+58	; 0x3a
    648a:	01 97       	sbiw	r24, 0x01	; 1
    648c:	f1 f7       	brne	.-4      	; 0x648a <main+0x986>
    648e:	9a af       	std	Y+58, r25	; 0x3a
    6490:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(500);
			CLCD_voidSendCommand(1);
    6492:	81 e0       	ldi	r24, 0x01	; 1
    6494:	0e 94 61 09 	call	0x12c2	; 0x12c2 <CLCD_voidSendCommand>
			USART_u8SendStringPoll("Try again!...");
    6498:	8a e3       	ldi	r24, 0x3A	; 58
    649a:	91 e0       	ldi	r25, 0x01	; 1
    649c:	0e 94 a7 29 	call	0x534e	; 0x534e <USART_u8SendStringPoll>
    64a0:	80 e0       	ldi	r24, 0x00	; 0
    64a2:	90 e0       	ldi	r25, 0x00	; 0
    64a4:	aa ef       	ldi	r26, 0xFA	; 250
    64a6:	b3 e4       	ldi	r27, 0x43	; 67
    64a8:	8d ab       	std	Y+53, r24	; 0x35
    64aa:	9e ab       	std	Y+54, r25	; 0x36
    64ac:	af ab       	std	Y+55, r26	; 0x37
    64ae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    64b0:	6d a9       	ldd	r22, Y+53	; 0x35
    64b2:	7e a9       	ldd	r23, Y+54	; 0x36
    64b4:	8f a9       	ldd	r24, Y+55	; 0x37
    64b6:	98 ad       	ldd	r25, Y+56	; 0x38
    64b8:	20 e0       	ldi	r18, 0x00	; 0
    64ba:	30 e0       	ldi	r19, 0x00	; 0
    64bc:	4a ef       	ldi	r20, 0xFA	; 250
    64be:	54 e4       	ldi	r21, 0x44	; 68
    64c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    64c4:	dc 01       	movw	r26, r24
    64c6:	cb 01       	movw	r24, r22
    64c8:	89 ab       	std	Y+49, r24	; 0x31
    64ca:	9a ab       	std	Y+50, r25	; 0x32
    64cc:	ab ab       	std	Y+51, r26	; 0x33
    64ce:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    64d0:	69 a9       	ldd	r22, Y+49	; 0x31
    64d2:	7a a9       	ldd	r23, Y+50	; 0x32
    64d4:	8b a9       	ldd	r24, Y+51	; 0x33
    64d6:	9c a9       	ldd	r25, Y+52	; 0x34
    64d8:	20 e0       	ldi	r18, 0x00	; 0
    64da:	30 e0       	ldi	r19, 0x00	; 0
    64dc:	40 e8       	ldi	r20, 0x80	; 128
    64de:	5f e3       	ldi	r21, 0x3F	; 63
    64e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    64e4:	88 23       	and	r24, r24
    64e6:	2c f4       	brge	.+10     	; 0x64f2 <main+0x9ee>
		__ticks = 1;
    64e8:	81 e0       	ldi	r24, 0x01	; 1
    64ea:	90 e0       	ldi	r25, 0x00	; 0
    64ec:	98 ab       	std	Y+48, r25	; 0x30
    64ee:	8f a7       	std	Y+47, r24	; 0x2f
    64f0:	3f c0       	rjmp	.+126    	; 0x6570 <main+0xa6c>
	else if (__tmp > 65535)
    64f2:	69 a9       	ldd	r22, Y+49	; 0x31
    64f4:	7a a9       	ldd	r23, Y+50	; 0x32
    64f6:	8b a9       	ldd	r24, Y+51	; 0x33
    64f8:	9c a9       	ldd	r25, Y+52	; 0x34
    64fa:	20 e0       	ldi	r18, 0x00	; 0
    64fc:	3f ef       	ldi	r19, 0xFF	; 255
    64fe:	4f e7       	ldi	r20, 0x7F	; 127
    6500:	57 e4       	ldi	r21, 0x47	; 71
    6502:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6506:	18 16       	cp	r1, r24
    6508:	4c f5       	brge	.+82     	; 0x655c <main+0xa58>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    650a:	6d a9       	ldd	r22, Y+53	; 0x35
    650c:	7e a9       	ldd	r23, Y+54	; 0x36
    650e:	8f a9       	ldd	r24, Y+55	; 0x37
    6510:	98 ad       	ldd	r25, Y+56	; 0x38
    6512:	20 e0       	ldi	r18, 0x00	; 0
    6514:	30 e0       	ldi	r19, 0x00	; 0
    6516:	40 e2       	ldi	r20, 0x20	; 32
    6518:	51 e4       	ldi	r21, 0x41	; 65
    651a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    651e:	dc 01       	movw	r26, r24
    6520:	cb 01       	movw	r24, r22
    6522:	bc 01       	movw	r22, r24
    6524:	cd 01       	movw	r24, r26
    6526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    652a:	dc 01       	movw	r26, r24
    652c:	cb 01       	movw	r24, r22
    652e:	98 ab       	std	Y+48, r25	; 0x30
    6530:	8f a7       	std	Y+47, r24	; 0x2f
    6532:	0f c0       	rjmp	.+30     	; 0x6552 <main+0xa4e>
    6534:	88 ec       	ldi	r24, 0xC8	; 200
    6536:	90 e0       	ldi	r25, 0x00	; 0
    6538:	9e a7       	std	Y+46, r25	; 0x2e
    653a:	8d a7       	std	Y+45, r24	; 0x2d
    653c:	8d a5       	ldd	r24, Y+45	; 0x2d
    653e:	9e a5       	ldd	r25, Y+46	; 0x2e
    6540:	01 97       	sbiw	r24, 0x01	; 1
    6542:	f1 f7       	brne	.-4      	; 0x6540 <main+0xa3c>
    6544:	9e a7       	std	Y+46, r25	; 0x2e
    6546:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6548:	8f a5       	ldd	r24, Y+47	; 0x2f
    654a:	98 a9       	ldd	r25, Y+48	; 0x30
    654c:	01 97       	sbiw	r24, 0x01	; 1
    654e:	98 ab       	std	Y+48, r25	; 0x30
    6550:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6552:	8f a5       	ldd	r24, Y+47	; 0x2f
    6554:	98 a9       	ldd	r25, Y+48	; 0x30
    6556:	00 97       	sbiw	r24, 0x00	; 0
    6558:	69 f7       	brne	.-38     	; 0x6534 <main+0xa30>
    655a:	14 c0       	rjmp	.+40     	; 0x6584 <main+0xa80>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    655c:	69 a9       	ldd	r22, Y+49	; 0x31
    655e:	7a a9       	ldd	r23, Y+50	; 0x32
    6560:	8b a9       	ldd	r24, Y+51	; 0x33
    6562:	9c a9       	ldd	r25, Y+52	; 0x34
    6564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6568:	dc 01       	movw	r26, r24
    656a:	cb 01       	movw	r24, r22
    656c:	98 ab       	std	Y+48, r25	; 0x30
    656e:	8f a7       	std	Y+47, r24	; 0x2f
    6570:	8f a5       	ldd	r24, Y+47	; 0x2f
    6572:	98 a9       	ldd	r25, Y+48	; 0x30
    6574:	9c a7       	std	Y+44, r25	; 0x2c
    6576:	8b a7       	std	Y+43, r24	; 0x2b
    6578:	8b a5       	ldd	r24, Y+43	; 0x2b
    657a:	9c a5       	ldd	r25, Y+44	; 0x2c
    657c:	01 97       	sbiw	r24, 0x01	; 1
    657e:	f1 f7       	brne	.-4      	; 0x657c <main+0xa78>
    6580:	9c a7       	std	Y+44, r25	; 0x2c
    6582:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(500);
			CLCD_voidSendCommand(1);
    6584:	81 e0       	ldi	r24, 0x01	; 1
    6586:	0e 94 61 09 	call	0x12c2	; 0x12c2 <CLCD_voidSendCommand>
			USART_u8SendPolling(trials+'0');
			USART_u8SendPolling(0xD);
			trials--;
			USART_u8SendStringPoll("Try again!...");
			USART_u8SendPolling(0xD);*/
			password=0;
    658a:	fe 01       	movw	r30, r28
    658c:	e7 5a       	subi	r30, 0xA7	; 167
    658e:	ff 4f       	sbci	r31, 0xFF	; 255
    6590:	11 82       	std	Z+1, r1	; 0x01
    6592:	10 82       	st	Z, r1
			multi=1;
    6594:	fe 01       	movw	r30, r28
    6596:	e9 5a       	subi	r30, 0xA9	; 169
    6598:	ff 4f       	sbci	r31, 0xFF	; 255
    659a:	81 e0       	ldi	r24, 0x01	; 1
    659c:	80 83       	st	Z, r24
			curserPos = 11;
    659e:	fe 01       	movw	r30, r28
    65a0:	eb 5a       	subi	r30, 0xAB	; 171
    65a2:	ff 4f       	sbci	r31, 0xFF	; 255
    65a4:	8b e0       	ldi	r24, 0x0B	; 11
    65a6:	80 83       	st	Z, r24
    65a8:	a3 cb       	rjmp	.-2234   	; 0x5cf0 <main+0x1ec>
		}
	}
	USART_u8SendPolling(0xD);
    65aa:	8d e0       	ldi	r24, 0x0D	; 13
    65ac:	0e 94 b1 28 	call	0x5162	; 0x5162 <USART_u8SendPolling>
	USART_u8SendStringPoll("shutdown!... ");
    65b0:	88 e4       	ldi	r24, 0x48	; 72
    65b2:	91 e0       	ldi	r25, 0x01	; 1
    65b4:	0e 94 a7 29 	call	0x534e	; 0x534e <USART_u8SendStringPoll>
	USART_u8SendPolling(0xD);
    65b8:	8d e0       	ldi	r24, 0x0D	; 13
    65ba:	0e 94 b1 28 	call	0x5162	; 0x5162 <USART_u8SendPolling>
	USART_u8SendPolling('3');
    65be:	83 e3       	ldi	r24, 0x33	; 51
    65c0:	0e 94 b1 28 	call	0x5162	; 0x5162 <USART_u8SendPolling>
    65c4:	80 e0       	ldi	r24, 0x00	; 0
    65c6:	90 e0       	ldi	r25, 0x00	; 0
    65c8:	aa ef       	ldi	r26, 0xFA	; 250
    65ca:	b3 e4       	ldi	r27, 0x43	; 67
    65cc:	8f a3       	std	Y+39, r24	; 0x27
    65ce:	98 a7       	std	Y+40, r25	; 0x28
    65d0:	a9 a7       	std	Y+41, r26	; 0x29
    65d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    65d4:	6f a1       	ldd	r22, Y+39	; 0x27
    65d6:	78 a5       	ldd	r23, Y+40	; 0x28
    65d8:	89 a5       	ldd	r24, Y+41	; 0x29
    65da:	9a a5       	ldd	r25, Y+42	; 0x2a
    65dc:	20 e0       	ldi	r18, 0x00	; 0
    65de:	30 e0       	ldi	r19, 0x00	; 0
    65e0:	4a ef       	ldi	r20, 0xFA	; 250
    65e2:	54 e4       	ldi	r21, 0x44	; 68
    65e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    65e8:	dc 01       	movw	r26, r24
    65ea:	cb 01       	movw	r24, r22
    65ec:	8b a3       	std	Y+35, r24	; 0x23
    65ee:	9c a3       	std	Y+36, r25	; 0x24
    65f0:	ad a3       	std	Y+37, r26	; 0x25
    65f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    65f4:	6b a1       	ldd	r22, Y+35	; 0x23
    65f6:	7c a1       	ldd	r23, Y+36	; 0x24
    65f8:	8d a1       	ldd	r24, Y+37	; 0x25
    65fa:	9e a1       	ldd	r25, Y+38	; 0x26
    65fc:	20 e0       	ldi	r18, 0x00	; 0
    65fe:	30 e0       	ldi	r19, 0x00	; 0
    6600:	40 e8       	ldi	r20, 0x80	; 128
    6602:	5f e3       	ldi	r21, 0x3F	; 63
    6604:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6608:	88 23       	and	r24, r24
    660a:	2c f4       	brge	.+10     	; 0x6616 <main+0xb12>
		__ticks = 1;
    660c:	81 e0       	ldi	r24, 0x01	; 1
    660e:	90 e0       	ldi	r25, 0x00	; 0
    6610:	9a a3       	std	Y+34, r25	; 0x22
    6612:	89 a3       	std	Y+33, r24	; 0x21
    6614:	3f c0       	rjmp	.+126    	; 0x6694 <main+0xb90>
	else if (__tmp > 65535)
    6616:	6b a1       	ldd	r22, Y+35	; 0x23
    6618:	7c a1       	ldd	r23, Y+36	; 0x24
    661a:	8d a1       	ldd	r24, Y+37	; 0x25
    661c:	9e a1       	ldd	r25, Y+38	; 0x26
    661e:	20 e0       	ldi	r18, 0x00	; 0
    6620:	3f ef       	ldi	r19, 0xFF	; 255
    6622:	4f e7       	ldi	r20, 0x7F	; 127
    6624:	57 e4       	ldi	r21, 0x47	; 71
    6626:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    662a:	18 16       	cp	r1, r24
    662c:	4c f5       	brge	.+82     	; 0x6680 <main+0xb7c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    662e:	6f a1       	ldd	r22, Y+39	; 0x27
    6630:	78 a5       	ldd	r23, Y+40	; 0x28
    6632:	89 a5       	ldd	r24, Y+41	; 0x29
    6634:	9a a5       	ldd	r25, Y+42	; 0x2a
    6636:	20 e0       	ldi	r18, 0x00	; 0
    6638:	30 e0       	ldi	r19, 0x00	; 0
    663a:	40 e2       	ldi	r20, 0x20	; 32
    663c:	51 e4       	ldi	r21, 0x41	; 65
    663e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6642:	dc 01       	movw	r26, r24
    6644:	cb 01       	movw	r24, r22
    6646:	bc 01       	movw	r22, r24
    6648:	cd 01       	movw	r24, r26
    664a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    664e:	dc 01       	movw	r26, r24
    6650:	cb 01       	movw	r24, r22
    6652:	9a a3       	std	Y+34, r25	; 0x22
    6654:	89 a3       	std	Y+33, r24	; 0x21
    6656:	0f c0       	rjmp	.+30     	; 0x6676 <main+0xb72>
    6658:	88 ec       	ldi	r24, 0xC8	; 200
    665a:	90 e0       	ldi	r25, 0x00	; 0
    665c:	98 a3       	std	Y+32, r25	; 0x20
    665e:	8f 8f       	std	Y+31, r24	; 0x1f
    6660:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6662:	98 a1       	ldd	r25, Y+32	; 0x20
    6664:	01 97       	sbiw	r24, 0x01	; 1
    6666:	f1 f7       	brne	.-4      	; 0x6664 <main+0xb60>
    6668:	98 a3       	std	Y+32, r25	; 0x20
    666a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    666c:	89 a1       	ldd	r24, Y+33	; 0x21
    666e:	9a a1       	ldd	r25, Y+34	; 0x22
    6670:	01 97       	sbiw	r24, 0x01	; 1
    6672:	9a a3       	std	Y+34, r25	; 0x22
    6674:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6676:	89 a1       	ldd	r24, Y+33	; 0x21
    6678:	9a a1       	ldd	r25, Y+34	; 0x22
    667a:	00 97       	sbiw	r24, 0x00	; 0
    667c:	69 f7       	brne	.-38     	; 0x6658 <main+0xb54>
    667e:	14 c0       	rjmp	.+40     	; 0x66a8 <main+0xba4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6680:	6b a1       	ldd	r22, Y+35	; 0x23
    6682:	7c a1       	ldd	r23, Y+36	; 0x24
    6684:	8d a1       	ldd	r24, Y+37	; 0x25
    6686:	9e a1       	ldd	r25, Y+38	; 0x26
    6688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    668c:	dc 01       	movw	r26, r24
    668e:	cb 01       	movw	r24, r22
    6690:	9a a3       	std	Y+34, r25	; 0x22
    6692:	89 a3       	std	Y+33, r24	; 0x21
    6694:	89 a1       	ldd	r24, Y+33	; 0x21
    6696:	9a a1       	ldd	r25, Y+34	; 0x22
    6698:	9e 8f       	std	Y+30, r25	; 0x1e
    669a:	8d 8f       	std	Y+29, r24	; 0x1d
    669c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    669e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    66a0:	01 97       	sbiw	r24, 0x01	; 1
    66a2:	f1 f7       	brne	.-4      	; 0x66a0 <main+0xb9c>
    66a4:	9e 8f       	std	Y+30, r25	; 0x1e
    66a6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);
	USART_u8SendPolling(0xD);
    66a8:	8d e0       	ldi	r24, 0x0D	; 13
    66aa:	0e 94 b1 28 	call	0x5162	; 0x5162 <USART_u8SendPolling>
	USART_u8SendPolling('2');
    66ae:	82 e3       	ldi	r24, 0x32	; 50
    66b0:	0e 94 b1 28 	call	0x5162	; 0x5162 <USART_u8SendPolling>
    66b4:	80 e0       	ldi	r24, 0x00	; 0
    66b6:	90 e0       	ldi	r25, 0x00	; 0
    66b8:	aa ef       	ldi	r26, 0xFA	; 250
    66ba:	b3 e4       	ldi	r27, 0x43	; 67
    66bc:	89 8f       	std	Y+25, r24	; 0x19
    66be:	9a 8f       	std	Y+26, r25	; 0x1a
    66c0:	ab 8f       	std	Y+27, r26	; 0x1b
    66c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    66c4:	69 8d       	ldd	r22, Y+25	; 0x19
    66c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    66c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    66ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    66cc:	20 e0       	ldi	r18, 0x00	; 0
    66ce:	30 e0       	ldi	r19, 0x00	; 0
    66d0:	4a ef       	ldi	r20, 0xFA	; 250
    66d2:	54 e4       	ldi	r21, 0x44	; 68
    66d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    66d8:	dc 01       	movw	r26, r24
    66da:	cb 01       	movw	r24, r22
    66dc:	8d 8b       	std	Y+21, r24	; 0x15
    66de:	9e 8b       	std	Y+22, r25	; 0x16
    66e0:	af 8b       	std	Y+23, r26	; 0x17
    66e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    66e4:	6d 89       	ldd	r22, Y+21	; 0x15
    66e6:	7e 89       	ldd	r23, Y+22	; 0x16
    66e8:	8f 89       	ldd	r24, Y+23	; 0x17
    66ea:	98 8d       	ldd	r25, Y+24	; 0x18
    66ec:	20 e0       	ldi	r18, 0x00	; 0
    66ee:	30 e0       	ldi	r19, 0x00	; 0
    66f0:	40 e8       	ldi	r20, 0x80	; 128
    66f2:	5f e3       	ldi	r21, 0x3F	; 63
    66f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    66f8:	88 23       	and	r24, r24
    66fa:	2c f4       	brge	.+10     	; 0x6706 <main+0xc02>
		__ticks = 1;
    66fc:	81 e0       	ldi	r24, 0x01	; 1
    66fe:	90 e0       	ldi	r25, 0x00	; 0
    6700:	9c 8b       	std	Y+20, r25	; 0x14
    6702:	8b 8b       	std	Y+19, r24	; 0x13
    6704:	3f c0       	rjmp	.+126    	; 0x6784 <main+0xc80>
	else if (__tmp > 65535)
    6706:	6d 89       	ldd	r22, Y+21	; 0x15
    6708:	7e 89       	ldd	r23, Y+22	; 0x16
    670a:	8f 89       	ldd	r24, Y+23	; 0x17
    670c:	98 8d       	ldd	r25, Y+24	; 0x18
    670e:	20 e0       	ldi	r18, 0x00	; 0
    6710:	3f ef       	ldi	r19, 0xFF	; 255
    6712:	4f e7       	ldi	r20, 0x7F	; 127
    6714:	57 e4       	ldi	r21, 0x47	; 71
    6716:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    671a:	18 16       	cp	r1, r24
    671c:	4c f5       	brge	.+82     	; 0x6770 <main+0xc6c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    671e:	69 8d       	ldd	r22, Y+25	; 0x19
    6720:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6722:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6724:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6726:	20 e0       	ldi	r18, 0x00	; 0
    6728:	30 e0       	ldi	r19, 0x00	; 0
    672a:	40 e2       	ldi	r20, 0x20	; 32
    672c:	51 e4       	ldi	r21, 0x41	; 65
    672e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6732:	dc 01       	movw	r26, r24
    6734:	cb 01       	movw	r24, r22
    6736:	bc 01       	movw	r22, r24
    6738:	cd 01       	movw	r24, r26
    673a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    673e:	dc 01       	movw	r26, r24
    6740:	cb 01       	movw	r24, r22
    6742:	9c 8b       	std	Y+20, r25	; 0x14
    6744:	8b 8b       	std	Y+19, r24	; 0x13
    6746:	0f c0       	rjmp	.+30     	; 0x6766 <main+0xc62>
    6748:	88 ec       	ldi	r24, 0xC8	; 200
    674a:	90 e0       	ldi	r25, 0x00	; 0
    674c:	9a 8b       	std	Y+18, r25	; 0x12
    674e:	89 8b       	std	Y+17, r24	; 0x11
    6750:	89 89       	ldd	r24, Y+17	; 0x11
    6752:	9a 89       	ldd	r25, Y+18	; 0x12
    6754:	01 97       	sbiw	r24, 0x01	; 1
    6756:	f1 f7       	brne	.-4      	; 0x6754 <main+0xc50>
    6758:	9a 8b       	std	Y+18, r25	; 0x12
    675a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    675c:	8b 89       	ldd	r24, Y+19	; 0x13
    675e:	9c 89       	ldd	r25, Y+20	; 0x14
    6760:	01 97       	sbiw	r24, 0x01	; 1
    6762:	9c 8b       	std	Y+20, r25	; 0x14
    6764:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6766:	8b 89       	ldd	r24, Y+19	; 0x13
    6768:	9c 89       	ldd	r25, Y+20	; 0x14
    676a:	00 97       	sbiw	r24, 0x00	; 0
    676c:	69 f7       	brne	.-38     	; 0x6748 <main+0xc44>
    676e:	14 c0       	rjmp	.+40     	; 0x6798 <main+0xc94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6770:	6d 89       	ldd	r22, Y+21	; 0x15
    6772:	7e 89       	ldd	r23, Y+22	; 0x16
    6774:	8f 89       	ldd	r24, Y+23	; 0x17
    6776:	98 8d       	ldd	r25, Y+24	; 0x18
    6778:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    677c:	dc 01       	movw	r26, r24
    677e:	cb 01       	movw	r24, r22
    6780:	9c 8b       	std	Y+20, r25	; 0x14
    6782:	8b 8b       	std	Y+19, r24	; 0x13
    6784:	8b 89       	ldd	r24, Y+19	; 0x13
    6786:	9c 89       	ldd	r25, Y+20	; 0x14
    6788:	98 8b       	std	Y+16, r25	; 0x10
    678a:	8f 87       	std	Y+15, r24	; 0x0f
    678c:	8f 85       	ldd	r24, Y+15	; 0x0f
    678e:	98 89       	ldd	r25, Y+16	; 0x10
    6790:	01 97       	sbiw	r24, 0x01	; 1
    6792:	f1 f7       	brne	.-4      	; 0x6790 <main+0xc8c>
    6794:	98 8b       	std	Y+16, r25	; 0x10
    6796:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	USART_u8SendPolling(0xD);
    6798:	8d e0       	ldi	r24, 0x0D	; 13
    679a:	0e 94 b1 28 	call	0x5162	; 0x5162 <USART_u8SendPolling>
	USART_u8SendPolling('1');
    679e:	81 e3       	ldi	r24, 0x31	; 49
    67a0:	0e 94 b1 28 	call	0x5162	; 0x5162 <USART_u8SendPolling>
    67a4:	80 e0       	ldi	r24, 0x00	; 0
    67a6:	90 e0       	ldi	r25, 0x00	; 0
    67a8:	aa ef       	ldi	r26, 0xFA	; 250
    67aa:	b3 e4       	ldi	r27, 0x43	; 67
    67ac:	8b 87       	std	Y+11, r24	; 0x0b
    67ae:	9c 87       	std	Y+12, r25	; 0x0c
    67b0:	ad 87       	std	Y+13, r26	; 0x0d
    67b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    67b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    67b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    67b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    67ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    67bc:	20 e0       	ldi	r18, 0x00	; 0
    67be:	30 e0       	ldi	r19, 0x00	; 0
    67c0:	4a ef       	ldi	r20, 0xFA	; 250
    67c2:	54 e4       	ldi	r21, 0x44	; 68
    67c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    67c8:	dc 01       	movw	r26, r24
    67ca:	cb 01       	movw	r24, r22
    67cc:	8f 83       	std	Y+7, r24	; 0x07
    67ce:	98 87       	std	Y+8, r25	; 0x08
    67d0:	a9 87       	std	Y+9, r26	; 0x09
    67d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    67d4:	6f 81       	ldd	r22, Y+7	; 0x07
    67d6:	78 85       	ldd	r23, Y+8	; 0x08
    67d8:	89 85       	ldd	r24, Y+9	; 0x09
    67da:	9a 85       	ldd	r25, Y+10	; 0x0a
    67dc:	20 e0       	ldi	r18, 0x00	; 0
    67de:	30 e0       	ldi	r19, 0x00	; 0
    67e0:	40 e8       	ldi	r20, 0x80	; 128
    67e2:	5f e3       	ldi	r21, 0x3F	; 63
    67e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    67e8:	88 23       	and	r24, r24
    67ea:	2c f4       	brge	.+10     	; 0x67f6 <main+0xcf2>
		__ticks = 1;
    67ec:	81 e0       	ldi	r24, 0x01	; 1
    67ee:	90 e0       	ldi	r25, 0x00	; 0
    67f0:	9e 83       	std	Y+6, r25	; 0x06
    67f2:	8d 83       	std	Y+5, r24	; 0x05
    67f4:	3f c0       	rjmp	.+126    	; 0x6874 <main+0xd70>
	else if (__tmp > 65535)
    67f6:	6f 81       	ldd	r22, Y+7	; 0x07
    67f8:	78 85       	ldd	r23, Y+8	; 0x08
    67fa:	89 85       	ldd	r24, Y+9	; 0x09
    67fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    67fe:	20 e0       	ldi	r18, 0x00	; 0
    6800:	3f ef       	ldi	r19, 0xFF	; 255
    6802:	4f e7       	ldi	r20, 0x7F	; 127
    6804:	57 e4       	ldi	r21, 0x47	; 71
    6806:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    680a:	18 16       	cp	r1, r24
    680c:	4c f5       	brge	.+82     	; 0x6860 <main+0xd5c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    680e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6810:	7c 85       	ldd	r23, Y+12	; 0x0c
    6812:	8d 85       	ldd	r24, Y+13	; 0x0d
    6814:	9e 85       	ldd	r25, Y+14	; 0x0e
    6816:	20 e0       	ldi	r18, 0x00	; 0
    6818:	30 e0       	ldi	r19, 0x00	; 0
    681a:	40 e2       	ldi	r20, 0x20	; 32
    681c:	51 e4       	ldi	r21, 0x41	; 65
    681e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6822:	dc 01       	movw	r26, r24
    6824:	cb 01       	movw	r24, r22
    6826:	bc 01       	movw	r22, r24
    6828:	cd 01       	movw	r24, r26
    682a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    682e:	dc 01       	movw	r26, r24
    6830:	cb 01       	movw	r24, r22
    6832:	9e 83       	std	Y+6, r25	; 0x06
    6834:	8d 83       	std	Y+5, r24	; 0x05
    6836:	0f c0       	rjmp	.+30     	; 0x6856 <main+0xd52>
    6838:	88 ec       	ldi	r24, 0xC8	; 200
    683a:	90 e0       	ldi	r25, 0x00	; 0
    683c:	9c 83       	std	Y+4, r25	; 0x04
    683e:	8b 83       	std	Y+3, r24	; 0x03
    6840:	8b 81       	ldd	r24, Y+3	; 0x03
    6842:	9c 81       	ldd	r25, Y+4	; 0x04
    6844:	01 97       	sbiw	r24, 0x01	; 1
    6846:	f1 f7       	brne	.-4      	; 0x6844 <main+0xd40>
    6848:	9c 83       	std	Y+4, r25	; 0x04
    684a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    684c:	8d 81       	ldd	r24, Y+5	; 0x05
    684e:	9e 81       	ldd	r25, Y+6	; 0x06
    6850:	01 97       	sbiw	r24, 0x01	; 1
    6852:	9e 83       	std	Y+6, r25	; 0x06
    6854:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6856:	8d 81       	ldd	r24, Y+5	; 0x05
    6858:	9e 81       	ldd	r25, Y+6	; 0x06
    685a:	00 97       	sbiw	r24, 0x00	; 0
    685c:	69 f7       	brne	.-38     	; 0x6838 <main+0xd34>
    685e:	14 c0       	rjmp	.+40     	; 0x6888 <main+0xd84>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6860:	6f 81       	ldd	r22, Y+7	; 0x07
    6862:	78 85       	ldd	r23, Y+8	; 0x08
    6864:	89 85       	ldd	r24, Y+9	; 0x09
    6866:	9a 85       	ldd	r25, Y+10	; 0x0a
    6868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    686c:	dc 01       	movw	r26, r24
    686e:	cb 01       	movw	r24, r22
    6870:	9e 83       	std	Y+6, r25	; 0x06
    6872:	8d 83       	std	Y+5, r24	; 0x05
    6874:	8d 81       	ldd	r24, Y+5	; 0x05
    6876:	9e 81       	ldd	r25, Y+6	; 0x06
    6878:	9a 83       	std	Y+2, r25	; 0x02
    687a:	89 83       	std	Y+1, r24	; 0x01
    687c:	89 81       	ldd	r24, Y+1	; 0x01
    687e:	9a 81       	ldd	r25, Y+2	; 0x02
    6880:	01 97       	sbiw	r24, 0x01	; 1
    6882:	f1 f7       	brne	.-4      	; 0x6880 <main+0xd7c>
    6884:	9a 83       	std	Y+2, r25	; 0x02
    6886:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	USART_u8SendPolling(0xD);
    6888:	8d e0       	ldi	r24, 0x0D	; 13
    688a:	0e 94 b1 28 	call	0x5162	; 0x5162 <USART_u8SendPolling>
    688e:	ff cf       	rjmp	.-2      	; 0x688e <main+0xd8a>

00006890 <BuzzerSound>:
	}*/
	while(1);
}

void BuzzerSound()
{
    6890:	0f 93       	push	r16
    6892:	1f 93       	push	r17
    6894:	df 93       	push	r29
    6896:	cf 93       	push	r28
    6898:	cd b7       	in	r28, 0x3d	; 61
    689a:	de b7       	in	r29, 0x3e	; 62
    689c:	cc 58       	subi	r28, 0x8C	; 140
    689e:	d0 40       	sbci	r29, 0x00	; 0
    68a0:	0f b6       	in	r0, 0x3f	; 63
    68a2:	f8 94       	cli
    68a4:	de bf       	out	0x3e, r29	; 62
    68a6:	0f be       	out	0x3f, r0	; 63
    68a8:	cd bf       	out	0x3d, r28	; 61
	/* Diaphragm */
	DIO_u8SetPinValue(DIO_PORTB,DIO_PIN0,DIO_PIN_HIGH);
    68aa:	81 e0       	ldi	r24, 0x01	; 1
    68ac:	60 e0       	ldi	r22, 0x00	; 0
    68ae:	41 e0       	ldi	r20, 0x01	; 1
    68b0:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
    68b4:	fe 01       	movw	r30, r28
    68b6:	e7 57       	subi	r30, 0x77	; 119
    68b8:	ff 4f       	sbci	r31, 0xFF	; 255
    68ba:	80 e0       	ldi	r24, 0x00	; 0
    68bc:	90 e0       	ldi	r25, 0x00	; 0
    68be:	a8 ec       	ldi	r26, 0xC8	; 200
    68c0:	b2 e4       	ldi	r27, 0x42	; 66
    68c2:	80 83       	st	Z, r24
    68c4:	91 83       	std	Z+1, r25	; 0x01
    68c6:	a2 83       	std	Z+2, r26	; 0x02
    68c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    68ca:	8e 01       	movw	r16, r28
    68cc:	0b 57       	subi	r16, 0x7B	; 123
    68ce:	1f 4f       	sbci	r17, 0xFF	; 255
    68d0:	fe 01       	movw	r30, r28
    68d2:	e7 57       	subi	r30, 0x77	; 119
    68d4:	ff 4f       	sbci	r31, 0xFF	; 255
    68d6:	60 81       	ld	r22, Z
    68d8:	71 81       	ldd	r23, Z+1	; 0x01
    68da:	82 81       	ldd	r24, Z+2	; 0x02
    68dc:	93 81       	ldd	r25, Z+3	; 0x03
    68de:	20 e0       	ldi	r18, 0x00	; 0
    68e0:	30 e0       	ldi	r19, 0x00	; 0
    68e2:	4a ef       	ldi	r20, 0xFA	; 250
    68e4:	54 e4       	ldi	r21, 0x44	; 68
    68e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    68ea:	dc 01       	movw	r26, r24
    68ec:	cb 01       	movw	r24, r22
    68ee:	f8 01       	movw	r30, r16
    68f0:	80 83       	st	Z, r24
    68f2:	91 83       	std	Z+1, r25	; 0x01
    68f4:	a2 83       	std	Z+2, r26	; 0x02
    68f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    68f8:	fe 01       	movw	r30, r28
    68fa:	eb 57       	subi	r30, 0x7B	; 123
    68fc:	ff 4f       	sbci	r31, 0xFF	; 255
    68fe:	60 81       	ld	r22, Z
    6900:	71 81       	ldd	r23, Z+1	; 0x01
    6902:	82 81       	ldd	r24, Z+2	; 0x02
    6904:	93 81       	ldd	r25, Z+3	; 0x03
    6906:	20 e0       	ldi	r18, 0x00	; 0
    6908:	30 e0       	ldi	r19, 0x00	; 0
    690a:	40 e8       	ldi	r20, 0x80	; 128
    690c:	5f e3       	ldi	r21, 0x3F	; 63
    690e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6912:	88 23       	and	r24, r24
    6914:	44 f4       	brge	.+16     	; 0x6926 <BuzzerSound+0x96>
		__ticks = 1;
    6916:	fe 01       	movw	r30, r28
    6918:	ed 57       	subi	r30, 0x7D	; 125
    691a:	ff 4f       	sbci	r31, 0xFF	; 255
    691c:	81 e0       	ldi	r24, 0x01	; 1
    691e:	90 e0       	ldi	r25, 0x00	; 0
    6920:	91 83       	std	Z+1, r25	; 0x01
    6922:	80 83       	st	Z, r24
    6924:	64 c0       	rjmp	.+200    	; 0x69ee <BuzzerSound+0x15e>
	else if (__tmp > 65535)
    6926:	fe 01       	movw	r30, r28
    6928:	eb 57       	subi	r30, 0x7B	; 123
    692a:	ff 4f       	sbci	r31, 0xFF	; 255
    692c:	60 81       	ld	r22, Z
    692e:	71 81       	ldd	r23, Z+1	; 0x01
    6930:	82 81       	ldd	r24, Z+2	; 0x02
    6932:	93 81       	ldd	r25, Z+3	; 0x03
    6934:	20 e0       	ldi	r18, 0x00	; 0
    6936:	3f ef       	ldi	r19, 0xFF	; 255
    6938:	4f e7       	ldi	r20, 0x7F	; 127
    693a:	57 e4       	ldi	r21, 0x47	; 71
    693c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6940:	18 16       	cp	r1, r24
    6942:	0c f0       	brlt	.+2      	; 0x6946 <BuzzerSound+0xb6>
    6944:	43 c0       	rjmp	.+134    	; 0x69cc <BuzzerSound+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6946:	fe 01       	movw	r30, r28
    6948:	e7 57       	subi	r30, 0x77	; 119
    694a:	ff 4f       	sbci	r31, 0xFF	; 255
    694c:	60 81       	ld	r22, Z
    694e:	71 81       	ldd	r23, Z+1	; 0x01
    6950:	82 81       	ldd	r24, Z+2	; 0x02
    6952:	93 81       	ldd	r25, Z+3	; 0x03
    6954:	20 e0       	ldi	r18, 0x00	; 0
    6956:	30 e0       	ldi	r19, 0x00	; 0
    6958:	40 e2       	ldi	r20, 0x20	; 32
    695a:	51 e4       	ldi	r21, 0x41	; 65
    695c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6960:	dc 01       	movw	r26, r24
    6962:	cb 01       	movw	r24, r22
    6964:	8e 01       	movw	r16, r28
    6966:	0d 57       	subi	r16, 0x7D	; 125
    6968:	1f 4f       	sbci	r17, 0xFF	; 255
    696a:	bc 01       	movw	r22, r24
    696c:	cd 01       	movw	r24, r26
    696e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6972:	dc 01       	movw	r26, r24
    6974:	cb 01       	movw	r24, r22
    6976:	f8 01       	movw	r30, r16
    6978:	91 83       	std	Z+1, r25	; 0x01
    697a:	80 83       	st	Z, r24
    697c:	1f c0       	rjmp	.+62     	; 0x69bc <BuzzerSound+0x12c>
    697e:	fe 01       	movw	r30, r28
    6980:	ef 57       	subi	r30, 0x7F	; 127
    6982:	ff 4f       	sbci	r31, 0xFF	; 255
    6984:	88 ec       	ldi	r24, 0xC8	; 200
    6986:	90 e0       	ldi	r25, 0x00	; 0
    6988:	91 83       	std	Z+1, r25	; 0x01
    698a:	80 83       	st	Z, r24
    698c:	fe 01       	movw	r30, r28
    698e:	ef 57       	subi	r30, 0x7F	; 127
    6990:	ff 4f       	sbci	r31, 0xFF	; 255
    6992:	80 81       	ld	r24, Z
    6994:	91 81       	ldd	r25, Z+1	; 0x01
    6996:	01 97       	sbiw	r24, 0x01	; 1
    6998:	f1 f7       	brne	.-4      	; 0x6996 <BuzzerSound+0x106>
    699a:	fe 01       	movw	r30, r28
    699c:	ef 57       	subi	r30, 0x7F	; 127
    699e:	ff 4f       	sbci	r31, 0xFF	; 255
    69a0:	91 83       	std	Z+1, r25	; 0x01
    69a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    69a4:	de 01       	movw	r26, r28
    69a6:	ad 57       	subi	r26, 0x7D	; 125
    69a8:	bf 4f       	sbci	r27, 0xFF	; 255
    69aa:	fe 01       	movw	r30, r28
    69ac:	ed 57       	subi	r30, 0x7D	; 125
    69ae:	ff 4f       	sbci	r31, 0xFF	; 255
    69b0:	80 81       	ld	r24, Z
    69b2:	91 81       	ldd	r25, Z+1	; 0x01
    69b4:	01 97       	sbiw	r24, 0x01	; 1
    69b6:	11 96       	adiw	r26, 0x01	; 1
    69b8:	9c 93       	st	X, r25
    69ba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    69bc:	fe 01       	movw	r30, r28
    69be:	ed 57       	subi	r30, 0x7D	; 125
    69c0:	ff 4f       	sbci	r31, 0xFF	; 255
    69c2:	80 81       	ld	r24, Z
    69c4:	91 81       	ldd	r25, Z+1	; 0x01
    69c6:	00 97       	sbiw	r24, 0x00	; 0
    69c8:	d1 f6       	brne	.-76     	; 0x697e <BuzzerSound+0xee>
    69ca:	27 c0       	rjmp	.+78     	; 0x6a1a <BuzzerSound+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    69cc:	8e 01       	movw	r16, r28
    69ce:	0d 57       	subi	r16, 0x7D	; 125
    69d0:	1f 4f       	sbci	r17, 0xFF	; 255
    69d2:	fe 01       	movw	r30, r28
    69d4:	eb 57       	subi	r30, 0x7B	; 123
    69d6:	ff 4f       	sbci	r31, 0xFF	; 255
    69d8:	60 81       	ld	r22, Z
    69da:	71 81       	ldd	r23, Z+1	; 0x01
    69dc:	82 81       	ldd	r24, Z+2	; 0x02
    69de:	93 81       	ldd	r25, Z+3	; 0x03
    69e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    69e4:	dc 01       	movw	r26, r24
    69e6:	cb 01       	movw	r24, r22
    69e8:	f8 01       	movw	r30, r16
    69ea:	91 83       	std	Z+1, r25	; 0x01
    69ec:	80 83       	st	Z, r24
    69ee:	de 01       	movw	r26, r28
    69f0:	a1 58       	subi	r26, 0x81	; 129
    69f2:	bf 4f       	sbci	r27, 0xFF	; 255
    69f4:	fe 01       	movw	r30, r28
    69f6:	ed 57       	subi	r30, 0x7D	; 125
    69f8:	ff 4f       	sbci	r31, 0xFF	; 255
    69fa:	80 81       	ld	r24, Z
    69fc:	91 81       	ldd	r25, Z+1	; 0x01
    69fe:	8d 93       	st	X+, r24
    6a00:	9c 93       	st	X, r25
    6a02:	fe 01       	movw	r30, r28
    6a04:	e1 58       	subi	r30, 0x81	; 129
    6a06:	ff 4f       	sbci	r31, 0xFF	; 255
    6a08:	80 81       	ld	r24, Z
    6a0a:	91 81       	ldd	r25, Z+1	; 0x01
    6a0c:	01 97       	sbiw	r24, 0x01	; 1
    6a0e:	f1 f7       	brne	.-4      	; 0x6a0c <BuzzerSound+0x17c>
    6a10:	fe 01       	movw	r30, r28
    6a12:	e1 58       	subi	r30, 0x81	; 129
    6a14:	ff 4f       	sbci	r31, 0xFF	; 255
    6a16:	91 83       	std	Z+1, r25	; 0x01
    6a18:	80 83       	st	Z, r24
	_delay_ms(100);
	DIO_u8SetPinValue(DIO_PORTB,DIO_PIN0,DIO_PIN_LOW);
    6a1a:	81 e0       	ldi	r24, 0x01	; 1
    6a1c:	60 e0       	ldi	r22, 0x00	; 0
    6a1e:	40 e0       	ldi	r20, 0x00	; 0
    6a20:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
    6a24:	fe 01       	movw	r30, r28
    6a26:	e5 58       	subi	r30, 0x85	; 133
    6a28:	ff 4f       	sbci	r31, 0xFF	; 255
    6a2a:	80 e0       	ldi	r24, 0x00	; 0
    6a2c:	90 e0       	ldi	r25, 0x00	; 0
    6a2e:	a8 ec       	ldi	r26, 0xC8	; 200
    6a30:	b2 e4       	ldi	r27, 0x42	; 66
    6a32:	80 83       	st	Z, r24
    6a34:	91 83       	std	Z+1, r25	; 0x01
    6a36:	a2 83       	std	Z+2, r26	; 0x02
    6a38:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6a3a:	8e 01       	movw	r16, r28
    6a3c:	09 58       	subi	r16, 0x89	; 137
    6a3e:	1f 4f       	sbci	r17, 0xFF	; 255
    6a40:	fe 01       	movw	r30, r28
    6a42:	e5 58       	subi	r30, 0x85	; 133
    6a44:	ff 4f       	sbci	r31, 0xFF	; 255
    6a46:	60 81       	ld	r22, Z
    6a48:	71 81       	ldd	r23, Z+1	; 0x01
    6a4a:	82 81       	ldd	r24, Z+2	; 0x02
    6a4c:	93 81       	ldd	r25, Z+3	; 0x03
    6a4e:	20 e0       	ldi	r18, 0x00	; 0
    6a50:	30 e0       	ldi	r19, 0x00	; 0
    6a52:	4a ef       	ldi	r20, 0xFA	; 250
    6a54:	54 e4       	ldi	r21, 0x44	; 68
    6a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6a5a:	dc 01       	movw	r26, r24
    6a5c:	cb 01       	movw	r24, r22
    6a5e:	f8 01       	movw	r30, r16
    6a60:	80 83       	st	Z, r24
    6a62:	91 83       	std	Z+1, r25	; 0x01
    6a64:	a2 83       	std	Z+2, r26	; 0x02
    6a66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6a68:	fe 01       	movw	r30, r28
    6a6a:	e9 58       	subi	r30, 0x89	; 137
    6a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    6a6e:	60 81       	ld	r22, Z
    6a70:	71 81       	ldd	r23, Z+1	; 0x01
    6a72:	82 81       	ldd	r24, Z+2	; 0x02
    6a74:	93 81       	ldd	r25, Z+3	; 0x03
    6a76:	20 e0       	ldi	r18, 0x00	; 0
    6a78:	30 e0       	ldi	r19, 0x00	; 0
    6a7a:	40 e8       	ldi	r20, 0x80	; 128
    6a7c:	5f e3       	ldi	r21, 0x3F	; 63
    6a7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6a82:	88 23       	and	r24, r24
    6a84:	44 f4       	brge	.+16     	; 0x6a96 <BuzzerSound+0x206>
		__ticks = 1;
    6a86:	fe 01       	movw	r30, r28
    6a88:	eb 58       	subi	r30, 0x8B	; 139
    6a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    6a8c:	81 e0       	ldi	r24, 0x01	; 1
    6a8e:	90 e0       	ldi	r25, 0x00	; 0
    6a90:	91 83       	std	Z+1, r25	; 0x01
    6a92:	80 83       	st	Z, r24
    6a94:	64 c0       	rjmp	.+200    	; 0x6b5e <BuzzerSound+0x2ce>
	else if (__tmp > 65535)
    6a96:	fe 01       	movw	r30, r28
    6a98:	e9 58       	subi	r30, 0x89	; 137
    6a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    6a9c:	60 81       	ld	r22, Z
    6a9e:	71 81       	ldd	r23, Z+1	; 0x01
    6aa0:	82 81       	ldd	r24, Z+2	; 0x02
    6aa2:	93 81       	ldd	r25, Z+3	; 0x03
    6aa4:	20 e0       	ldi	r18, 0x00	; 0
    6aa6:	3f ef       	ldi	r19, 0xFF	; 255
    6aa8:	4f e7       	ldi	r20, 0x7F	; 127
    6aaa:	57 e4       	ldi	r21, 0x47	; 71
    6aac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6ab0:	18 16       	cp	r1, r24
    6ab2:	0c f0       	brlt	.+2      	; 0x6ab6 <BuzzerSound+0x226>
    6ab4:	43 c0       	rjmp	.+134    	; 0x6b3c <BuzzerSound+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6ab6:	fe 01       	movw	r30, r28
    6ab8:	e5 58       	subi	r30, 0x85	; 133
    6aba:	ff 4f       	sbci	r31, 0xFF	; 255
    6abc:	60 81       	ld	r22, Z
    6abe:	71 81       	ldd	r23, Z+1	; 0x01
    6ac0:	82 81       	ldd	r24, Z+2	; 0x02
    6ac2:	93 81       	ldd	r25, Z+3	; 0x03
    6ac4:	20 e0       	ldi	r18, 0x00	; 0
    6ac6:	30 e0       	ldi	r19, 0x00	; 0
    6ac8:	40 e2       	ldi	r20, 0x20	; 32
    6aca:	51 e4       	ldi	r21, 0x41	; 65
    6acc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6ad0:	dc 01       	movw	r26, r24
    6ad2:	cb 01       	movw	r24, r22
    6ad4:	8e 01       	movw	r16, r28
    6ad6:	0b 58       	subi	r16, 0x8B	; 139
    6ad8:	1f 4f       	sbci	r17, 0xFF	; 255
    6ada:	bc 01       	movw	r22, r24
    6adc:	cd 01       	movw	r24, r26
    6ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6ae2:	dc 01       	movw	r26, r24
    6ae4:	cb 01       	movw	r24, r22
    6ae6:	f8 01       	movw	r30, r16
    6ae8:	91 83       	std	Z+1, r25	; 0x01
    6aea:	80 83       	st	Z, r24
    6aec:	1f c0       	rjmp	.+62     	; 0x6b2c <BuzzerSound+0x29c>
    6aee:	fe 01       	movw	r30, r28
    6af0:	ed 58       	subi	r30, 0x8D	; 141
    6af2:	ff 4f       	sbci	r31, 0xFF	; 255
    6af4:	88 ec       	ldi	r24, 0xC8	; 200
    6af6:	90 e0       	ldi	r25, 0x00	; 0
    6af8:	91 83       	std	Z+1, r25	; 0x01
    6afa:	80 83       	st	Z, r24
    6afc:	fe 01       	movw	r30, r28
    6afe:	ed 58       	subi	r30, 0x8D	; 141
    6b00:	ff 4f       	sbci	r31, 0xFF	; 255
    6b02:	80 81       	ld	r24, Z
    6b04:	91 81       	ldd	r25, Z+1	; 0x01
    6b06:	01 97       	sbiw	r24, 0x01	; 1
    6b08:	f1 f7       	brne	.-4      	; 0x6b06 <BuzzerSound+0x276>
    6b0a:	fe 01       	movw	r30, r28
    6b0c:	ed 58       	subi	r30, 0x8D	; 141
    6b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    6b10:	91 83       	std	Z+1, r25	; 0x01
    6b12:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6b14:	de 01       	movw	r26, r28
    6b16:	ab 58       	subi	r26, 0x8B	; 139
    6b18:	bf 4f       	sbci	r27, 0xFF	; 255
    6b1a:	fe 01       	movw	r30, r28
    6b1c:	eb 58       	subi	r30, 0x8B	; 139
    6b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    6b20:	80 81       	ld	r24, Z
    6b22:	91 81       	ldd	r25, Z+1	; 0x01
    6b24:	01 97       	sbiw	r24, 0x01	; 1
    6b26:	11 96       	adiw	r26, 0x01	; 1
    6b28:	9c 93       	st	X, r25
    6b2a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6b2c:	fe 01       	movw	r30, r28
    6b2e:	eb 58       	subi	r30, 0x8B	; 139
    6b30:	ff 4f       	sbci	r31, 0xFF	; 255
    6b32:	80 81       	ld	r24, Z
    6b34:	91 81       	ldd	r25, Z+1	; 0x01
    6b36:	00 97       	sbiw	r24, 0x00	; 0
    6b38:	d1 f6       	brne	.-76     	; 0x6aee <BuzzerSound+0x25e>
    6b3a:	27 c0       	rjmp	.+78     	; 0x6b8a <BuzzerSound+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6b3c:	8e 01       	movw	r16, r28
    6b3e:	0b 58       	subi	r16, 0x8B	; 139
    6b40:	1f 4f       	sbci	r17, 0xFF	; 255
    6b42:	fe 01       	movw	r30, r28
    6b44:	e9 58       	subi	r30, 0x89	; 137
    6b46:	ff 4f       	sbci	r31, 0xFF	; 255
    6b48:	60 81       	ld	r22, Z
    6b4a:	71 81       	ldd	r23, Z+1	; 0x01
    6b4c:	82 81       	ldd	r24, Z+2	; 0x02
    6b4e:	93 81       	ldd	r25, Z+3	; 0x03
    6b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b54:	dc 01       	movw	r26, r24
    6b56:	cb 01       	movw	r24, r22
    6b58:	f8 01       	movw	r30, r16
    6b5a:	91 83       	std	Z+1, r25	; 0x01
    6b5c:	80 83       	st	Z, r24
    6b5e:	de 01       	movw	r26, r28
    6b60:	af 58       	subi	r26, 0x8F	; 143
    6b62:	bf 4f       	sbci	r27, 0xFF	; 255
    6b64:	fe 01       	movw	r30, r28
    6b66:	eb 58       	subi	r30, 0x8B	; 139
    6b68:	ff 4f       	sbci	r31, 0xFF	; 255
    6b6a:	80 81       	ld	r24, Z
    6b6c:	91 81       	ldd	r25, Z+1	; 0x01
    6b6e:	8d 93       	st	X+, r24
    6b70:	9c 93       	st	X, r25
    6b72:	fe 01       	movw	r30, r28
    6b74:	ef 58       	subi	r30, 0x8F	; 143
    6b76:	ff 4f       	sbci	r31, 0xFF	; 255
    6b78:	80 81       	ld	r24, Z
    6b7a:	91 81       	ldd	r25, Z+1	; 0x01
    6b7c:	01 97       	sbiw	r24, 0x01	; 1
    6b7e:	f1 f7       	brne	.-4      	; 0x6b7c <BuzzerSound+0x2ec>
    6b80:	fe 01       	movw	r30, r28
    6b82:	ef 58       	subi	r30, 0x8F	; 143
    6b84:	ff 4f       	sbci	r31, 0xFF	; 255
    6b86:	91 83       	std	Z+1, r25	; 0x01
    6b88:	80 83       	st	Z, r24
	_delay_ms(100);
	DIO_u8SetPinValue(DIO_PORTB,DIO_PIN0,DIO_PIN_HIGH);
    6b8a:	81 e0       	ldi	r24, 0x01	; 1
    6b8c:	60 e0       	ldi	r22, 0x00	; 0
    6b8e:	41 e0       	ldi	r20, 0x01	; 1
    6b90:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
    6b94:	fe 01       	movw	r30, r28
    6b96:	e3 59       	subi	r30, 0x93	; 147
    6b98:	ff 4f       	sbci	r31, 0xFF	; 255
    6b9a:	80 e0       	ldi	r24, 0x00	; 0
    6b9c:	90 e0       	ldi	r25, 0x00	; 0
    6b9e:	a8 e4       	ldi	r26, 0x48	; 72
    6ba0:	b2 e4       	ldi	r27, 0x42	; 66
    6ba2:	80 83       	st	Z, r24
    6ba4:	91 83       	std	Z+1, r25	; 0x01
    6ba6:	a2 83       	std	Z+2, r26	; 0x02
    6ba8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6baa:	8e 01       	movw	r16, r28
    6bac:	07 59       	subi	r16, 0x97	; 151
    6bae:	1f 4f       	sbci	r17, 0xFF	; 255
    6bb0:	fe 01       	movw	r30, r28
    6bb2:	e3 59       	subi	r30, 0x93	; 147
    6bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    6bb6:	60 81       	ld	r22, Z
    6bb8:	71 81       	ldd	r23, Z+1	; 0x01
    6bba:	82 81       	ldd	r24, Z+2	; 0x02
    6bbc:	93 81       	ldd	r25, Z+3	; 0x03
    6bbe:	20 e0       	ldi	r18, 0x00	; 0
    6bc0:	30 e0       	ldi	r19, 0x00	; 0
    6bc2:	4a ef       	ldi	r20, 0xFA	; 250
    6bc4:	54 e4       	ldi	r21, 0x44	; 68
    6bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6bca:	dc 01       	movw	r26, r24
    6bcc:	cb 01       	movw	r24, r22
    6bce:	f8 01       	movw	r30, r16
    6bd0:	80 83       	st	Z, r24
    6bd2:	91 83       	std	Z+1, r25	; 0x01
    6bd4:	a2 83       	std	Z+2, r26	; 0x02
    6bd6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6bd8:	fe 01       	movw	r30, r28
    6bda:	e7 59       	subi	r30, 0x97	; 151
    6bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    6bde:	60 81       	ld	r22, Z
    6be0:	71 81       	ldd	r23, Z+1	; 0x01
    6be2:	82 81       	ldd	r24, Z+2	; 0x02
    6be4:	93 81       	ldd	r25, Z+3	; 0x03
    6be6:	20 e0       	ldi	r18, 0x00	; 0
    6be8:	30 e0       	ldi	r19, 0x00	; 0
    6bea:	40 e8       	ldi	r20, 0x80	; 128
    6bec:	5f e3       	ldi	r21, 0x3F	; 63
    6bee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6bf2:	88 23       	and	r24, r24
    6bf4:	44 f4       	brge	.+16     	; 0x6c06 <BuzzerSound+0x376>
		__ticks = 1;
    6bf6:	fe 01       	movw	r30, r28
    6bf8:	e9 59       	subi	r30, 0x99	; 153
    6bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    6bfc:	81 e0       	ldi	r24, 0x01	; 1
    6bfe:	90 e0       	ldi	r25, 0x00	; 0
    6c00:	91 83       	std	Z+1, r25	; 0x01
    6c02:	80 83       	st	Z, r24
    6c04:	64 c0       	rjmp	.+200    	; 0x6cce <BuzzerSound+0x43e>
	else if (__tmp > 65535)
    6c06:	fe 01       	movw	r30, r28
    6c08:	e7 59       	subi	r30, 0x97	; 151
    6c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    6c0c:	60 81       	ld	r22, Z
    6c0e:	71 81       	ldd	r23, Z+1	; 0x01
    6c10:	82 81       	ldd	r24, Z+2	; 0x02
    6c12:	93 81       	ldd	r25, Z+3	; 0x03
    6c14:	20 e0       	ldi	r18, 0x00	; 0
    6c16:	3f ef       	ldi	r19, 0xFF	; 255
    6c18:	4f e7       	ldi	r20, 0x7F	; 127
    6c1a:	57 e4       	ldi	r21, 0x47	; 71
    6c1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6c20:	18 16       	cp	r1, r24
    6c22:	0c f0       	brlt	.+2      	; 0x6c26 <BuzzerSound+0x396>
    6c24:	43 c0       	rjmp	.+134    	; 0x6cac <BuzzerSound+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6c26:	fe 01       	movw	r30, r28
    6c28:	e3 59       	subi	r30, 0x93	; 147
    6c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    6c2c:	60 81       	ld	r22, Z
    6c2e:	71 81       	ldd	r23, Z+1	; 0x01
    6c30:	82 81       	ldd	r24, Z+2	; 0x02
    6c32:	93 81       	ldd	r25, Z+3	; 0x03
    6c34:	20 e0       	ldi	r18, 0x00	; 0
    6c36:	30 e0       	ldi	r19, 0x00	; 0
    6c38:	40 e2       	ldi	r20, 0x20	; 32
    6c3a:	51 e4       	ldi	r21, 0x41	; 65
    6c3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6c40:	dc 01       	movw	r26, r24
    6c42:	cb 01       	movw	r24, r22
    6c44:	8e 01       	movw	r16, r28
    6c46:	09 59       	subi	r16, 0x99	; 153
    6c48:	1f 4f       	sbci	r17, 0xFF	; 255
    6c4a:	bc 01       	movw	r22, r24
    6c4c:	cd 01       	movw	r24, r26
    6c4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6c52:	dc 01       	movw	r26, r24
    6c54:	cb 01       	movw	r24, r22
    6c56:	f8 01       	movw	r30, r16
    6c58:	91 83       	std	Z+1, r25	; 0x01
    6c5a:	80 83       	st	Z, r24
    6c5c:	1f c0       	rjmp	.+62     	; 0x6c9c <BuzzerSound+0x40c>
    6c5e:	fe 01       	movw	r30, r28
    6c60:	eb 59       	subi	r30, 0x9B	; 155
    6c62:	ff 4f       	sbci	r31, 0xFF	; 255
    6c64:	88 ec       	ldi	r24, 0xC8	; 200
    6c66:	90 e0       	ldi	r25, 0x00	; 0
    6c68:	91 83       	std	Z+1, r25	; 0x01
    6c6a:	80 83       	st	Z, r24
    6c6c:	fe 01       	movw	r30, r28
    6c6e:	eb 59       	subi	r30, 0x9B	; 155
    6c70:	ff 4f       	sbci	r31, 0xFF	; 255
    6c72:	80 81       	ld	r24, Z
    6c74:	91 81       	ldd	r25, Z+1	; 0x01
    6c76:	01 97       	sbiw	r24, 0x01	; 1
    6c78:	f1 f7       	brne	.-4      	; 0x6c76 <BuzzerSound+0x3e6>
    6c7a:	fe 01       	movw	r30, r28
    6c7c:	eb 59       	subi	r30, 0x9B	; 155
    6c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    6c80:	91 83       	std	Z+1, r25	; 0x01
    6c82:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6c84:	de 01       	movw	r26, r28
    6c86:	a9 59       	subi	r26, 0x99	; 153
    6c88:	bf 4f       	sbci	r27, 0xFF	; 255
    6c8a:	fe 01       	movw	r30, r28
    6c8c:	e9 59       	subi	r30, 0x99	; 153
    6c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    6c90:	80 81       	ld	r24, Z
    6c92:	91 81       	ldd	r25, Z+1	; 0x01
    6c94:	01 97       	sbiw	r24, 0x01	; 1
    6c96:	11 96       	adiw	r26, 0x01	; 1
    6c98:	9c 93       	st	X, r25
    6c9a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6c9c:	fe 01       	movw	r30, r28
    6c9e:	e9 59       	subi	r30, 0x99	; 153
    6ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    6ca2:	80 81       	ld	r24, Z
    6ca4:	91 81       	ldd	r25, Z+1	; 0x01
    6ca6:	00 97       	sbiw	r24, 0x00	; 0
    6ca8:	d1 f6       	brne	.-76     	; 0x6c5e <BuzzerSound+0x3ce>
    6caa:	27 c0       	rjmp	.+78     	; 0x6cfa <BuzzerSound+0x46a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6cac:	8e 01       	movw	r16, r28
    6cae:	09 59       	subi	r16, 0x99	; 153
    6cb0:	1f 4f       	sbci	r17, 0xFF	; 255
    6cb2:	fe 01       	movw	r30, r28
    6cb4:	e7 59       	subi	r30, 0x97	; 151
    6cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    6cb8:	60 81       	ld	r22, Z
    6cba:	71 81       	ldd	r23, Z+1	; 0x01
    6cbc:	82 81       	ldd	r24, Z+2	; 0x02
    6cbe:	93 81       	ldd	r25, Z+3	; 0x03
    6cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6cc4:	dc 01       	movw	r26, r24
    6cc6:	cb 01       	movw	r24, r22
    6cc8:	f8 01       	movw	r30, r16
    6cca:	91 83       	std	Z+1, r25	; 0x01
    6ccc:	80 83       	st	Z, r24
    6cce:	de 01       	movw	r26, r28
    6cd0:	ad 59       	subi	r26, 0x9D	; 157
    6cd2:	bf 4f       	sbci	r27, 0xFF	; 255
    6cd4:	fe 01       	movw	r30, r28
    6cd6:	e9 59       	subi	r30, 0x99	; 153
    6cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    6cda:	80 81       	ld	r24, Z
    6cdc:	91 81       	ldd	r25, Z+1	; 0x01
    6cde:	8d 93       	st	X+, r24
    6ce0:	9c 93       	st	X, r25
    6ce2:	fe 01       	movw	r30, r28
    6ce4:	ed 59       	subi	r30, 0x9D	; 157
    6ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    6ce8:	80 81       	ld	r24, Z
    6cea:	91 81       	ldd	r25, Z+1	; 0x01
    6cec:	01 97       	sbiw	r24, 0x01	; 1
    6cee:	f1 f7       	brne	.-4      	; 0x6cec <BuzzerSound+0x45c>
    6cf0:	fe 01       	movw	r30, r28
    6cf2:	ed 59       	subi	r30, 0x9D	; 157
    6cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    6cf6:	91 83       	std	Z+1, r25	; 0x01
    6cf8:	80 83       	st	Z, r24
	_delay_ms(50);
	DIO_u8SetPinValue(DIO_PORTB,DIO_PIN0,DIO_PIN_LOW);
    6cfa:	81 e0       	ldi	r24, 0x01	; 1
    6cfc:	60 e0       	ldi	r22, 0x00	; 0
    6cfe:	40 e0       	ldi	r20, 0x00	; 0
    6d00:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
    6d04:	fe 01       	movw	r30, r28
    6d06:	e1 5a       	subi	r30, 0xA1	; 161
    6d08:	ff 4f       	sbci	r31, 0xFF	; 255
    6d0a:	80 e0       	ldi	r24, 0x00	; 0
    6d0c:	90 e0       	ldi	r25, 0x00	; 0
    6d0e:	a8 e4       	ldi	r26, 0x48	; 72
    6d10:	b2 e4       	ldi	r27, 0x42	; 66
    6d12:	80 83       	st	Z, r24
    6d14:	91 83       	std	Z+1, r25	; 0x01
    6d16:	a2 83       	std	Z+2, r26	; 0x02
    6d18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6d1a:	8e 01       	movw	r16, r28
    6d1c:	05 5a       	subi	r16, 0xA5	; 165
    6d1e:	1f 4f       	sbci	r17, 0xFF	; 255
    6d20:	fe 01       	movw	r30, r28
    6d22:	e1 5a       	subi	r30, 0xA1	; 161
    6d24:	ff 4f       	sbci	r31, 0xFF	; 255
    6d26:	60 81       	ld	r22, Z
    6d28:	71 81       	ldd	r23, Z+1	; 0x01
    6d2a:	82 81       	ldd	r24, Z+2	; 0x02
    6d2c:	93 81       	ldd	r25, Z+3	; 0x03
    6d2e:	20 e0       	ldi	r18, 0x00	; 0
    6d30:	30 e0       	ldi	r19, 0x00	; 0
    6d32:	4a ef       	ldi	r20, 0xFA	; 250
    6d34:	54 e4       	ldi	r21, 0x44	; 68
    6d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6d3a:	dc 01       	movw	r26, r24
    6d3c:	cb 01       	movw	r24, r22
    6d3e:	f8 01       	movw	r30, r16
    6d40:	80 83       	st	Z, r24
    6d42:	91 83       	std	Z+1, r25	; 0x01
    6d44:	a2 83       	std	Z+2, r26	; 0x02
    6d46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6d48:	fe 01       	movw	r30, r28
    6d4a:	e5 5a       	subi	r30, 0xA5	; 165
    6d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    6d4e:	60 81       	ld	r22, Z
    6d50:	71 81       	ldd	r23, Z+1	; 0x01
    6d52:	82 81       	ldd	r24, Z+2	; 0x02
    6d54:	93 81       	ldd	r25, Z+3	; 0x03
    6d56:	20 e0       	ldi	r18, 0x00	; 0
    6d58:	30 e0       	ldi	r19, 0x00	; 0
    6d5a:	40 e8       	ldi	r20, 0x80	; 128
    6d5c:	5f e3       	ldi	r21, 0x3F	; 63
    6d5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6d62:	88 23       	and	r24, r24
    6d64:	44 f4       	brge	.+16     	; 0x6d76 <BuzzerSound+0x4e6>
		__ticks = 1;
    6d66:	fe 01       	movw	r30, r28
    6d68:	e7 5a       	subi	r30, 0xA7	; 167
    6d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    6d6c:	81 e0       	ldi	r24, 0x01	; 1
    6d6e:	90 e0       	ldi	r25, 0x00	; 0
    6d70:	91 83       	std	Z+1, r25	; 0x01
    6d72:	80 83       	st	Z, r24
    6d74:	64 c0       	rjmp	.+200    	; 0x6e3e <BuzzerSound+0x5ae>
	else if (__tmp > 65535)
    6d76:	fe 01       	movw	r30, r28
    6d78:	e5 5a       	subi	r30, 0xA5	; 165
    6d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    6d7c:	60 81       	ld	r22, Z
    6d7e:	71 81       	ldd	r23, Z+1	; 0x01
    6d80:	82 81       	ldd	r24, Z+2	; 0x02
    6d82:	93 81       	ldd	r25, Z+3	; 0x03
    6d84:	20 e0       	ldi	r18, 0x00	; 0
    6d86:	3f ef       	ldi	r19, 0xFF	; 255
    6d88:	4f e7       	ldi	r20, 0x7F	; 127
    6d8a:	57 e4       	ldi	r21, 0x47	; 71
    6d8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6d90:	18 16       	cp	r1, r24
    6d92:	0c f0       	brlt	.+2      	; 0x6d96 <BuzzerSound+0x506>
    6d94:	43 c0       	rjmp	.+134    	; 0x6e1c <BuzzerSound+0x58c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6d96:	fe 01       	movw	r30, r28
    6d98:	e1 5a       	subi	r30, 0xA1	; 161
    6d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    6d9c:	60 81       	ld	r22, Z
    6d9e:	71 81       	ldd	r23, Z+1	; 0x01
    6da0:	82 81       	ldd	r24, Z+2	; 0x02
    6da2:	93 81       	ldd	r25, Z+3	; 0x03
    6da4:	20 e0       	ldi	r18, 0x00	; 0
    6da6:	30 e0       	ldi	r19, 0x00	; 0
    6da8:	40 e2       	ldi	r20, 0x20	; 32
    6daa:	51 e4       	ldi	r21, 0x41	; 65
    6dac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6db0:	dc 01       	movw	r26, r24
    6db2:	cb 01       	movw	r24, r22
    6db4:	8e 01       	movw	r16, r28
    6db6:	07 5a       	subi	r16, 0xA7	; 167
    6db8:	1f 4f       	sbci	r17, 0xFF	; 255
    6dba:	bc 01       	movw	r22, r24
    6dbc:	cd 01       	movw	r24, r26
    6dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6dc2:	dc 01       	movw	r26, r24
    6dc4:	cb 01       	movw	r24, r22
    6dc6:	f8 01       	movw	r30, r16
    6dc8:	91 83       	std	Z+1, r25	; 0x01
    6dca:	80 83       	st	Z, r24
    6dcc:	1f c0       	rjmp	.+62     	; 0x6e0c <BuzzerSound+0x57c>
    6dce:	fe 01       	movw	r30, r28
    6dd0:	e9 5a       	subi	r30, 0xA9	; 169
    6dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    6dd4:	88 ec       	ldi	r24, 0xC8	; 200
    6dd6:	90 e0       	ldi	r25, 0x00	; 0
    6dd8:	91 83       	std	Z+1, r25	; 0x01
    6dda:	80 83       	st	Z, r24
    6ddc:	fe 01       	movw	r30, r28
    6dde:	e9 5a       	subi	r30, 0xA9	; 169
    6de0:	ff 4f       	sbci	r31, 0xFF	; 255
    6de2:	80 81       	ld	r24, Z
    6de4:	91 81       	ldd	r25, Z+1	; 0x01
    6de6:	01 97       	sbiw	r24, 0x01	; 1
    6de8:	f1 f7       	brne	.-4      	; 0x6de6 <BuzzerSound+0x556>
    6dea:	fe 01       	movw	r30, r28
    6dec:	e9 5a       	subi	r30, 0xA9	; 169
    6dee:	ff 4f       	sbci	r31, 0xFF	; 255
    6df0:	91 83       	std	Z+1, r25	; 0x01
    6df2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6df4:	de 01       	movw	r26, r28
    6df6:	a7 5a       	subi	r26, 0xA7	; 167
    6df8:	bf 4f       	sbci	r27, 0xFF	; 255
    6dfa:	fe 01       	movw	r30, r28
    6dfc:	e7 5a       	subi	r30, 0xA7	; 167
    6dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    6e00:	80 81       	ld	r24, Z
    6e02:	91 81       	ldd	r25, Z+1	; 0x01
    6e04:	01 97       	sbiw	r24, 0x01	; 1
    6e06:	11 96       	adiw	r26, 0x01	; 1
    6e08:	9c 93       	st	X, r25
    6e0a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6e0c:	fe 01       	movw	r30, r28
    6e0e:	e7 5a       	subi	r30, 0xA7	; 167
    6e10:	ff 4f       	sbci	r31, 0xFF	; 255
    6e12:	80 81       	ld	r24, Z
    6e14:	91 81       	ldd	r25, Z+1	; 0x01
    6e16:	00 97       	sbiw	r24, 0x00	; 0
    6e18:	d1 f6       	brne	.-76     	; 0x6dce <BuzzerSound+0x53e>
    6e1a:	27 c0       	rjmp	.+78     	; 0x6e6a <BuzzerSound+0x5da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6e1c:	8e 01       	movw	r16, r28
    6e1e:	07 5a       	subi	r16, 0xA7	; 167
    6e20:	1f 4f       	sbci	r17, 0xFF	; 255
    6e22:	fe 01       	movw	r30, r28
    6e24:	e5 5a       	subi	r30, 0xA5	; 165
    6e26:	ff 4f       	sbci	r31, 0xFF	; 255
    6e28:	60 81       	ld	r22, Z
    6e2a:	71 81       	ldd	r23, Z+1	; 0x01
    6e2c:	82 81       	ldd	r24, Z+2	; 0x02
    6e2e:	93 81       	ldd	r25, Z+3	; 0x03
    6e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6e34:	dc 01       	movw	r26, r24
    6e36:	cb 01       	movw	r24, r22
    6e38:	f8 01       	movw	r30, r16
    6e3a:	91 83       	std	Z+1, r25	; 0x01
    6e3c:	80 83       	st	Z, r24
    6e3e:	de 01       	movw	r26, r28
    6e40:	ab 5a       	subi	r26, 0xAB	; 171
    6e42:	bf 4f       	sbci	r27, 0xFF	; 255
    6e44:	fe 01       	movw	r30, r28
    6e46:	e7 5a       	subi	r30, 0xA7	; 167
    6e48:	ff 4f       	sbci	r31, 0xFF	; 255
    6e4a:	80 81       	ld	r24, Z
    6e4c:	91 81       	ldd	r25, Z+1	; 0x01
    6e4e:	8d 93       	st	X+, r24
    6e50:	9c 93       	st	X, r25
    6e52:	fe 01       	movw	r30, r28
    6e54:	eb 5a       	subi	r30, 0xAB	; 171
    6e56:	ff 4f       	sbci	r31, 0xFF	; 255
    6e58:	80 81       	ld	r24, Z
    6e5a:	91 81       	ldd	r25, Z+1	; 0x01
    6e5c:	01 97       	sbiw	r24, 0x01	; 1
    6e5e:	f1 f7       	brne	.-4      	; 0x6e5c <BuzzerSound+0x5cc>
    6e60:	fe 01       	movw	r30, r28
    6e62:	eb 5a       	subi	r30, 0xAB	; 171
    6e64:	ff 4f       	sbci	r31, 0xFF	; 255
    6e66:	91 83       	std	Z+1, r25	; 0x01
    6e68:	80 83       	st	Z, r24
	_delay_ms(50);
	DIO_u8SetPinValue(DIO_PORTB,DIO_PIN0,DIO_PIN_HIGH);
    6e6a:	81 e0       	ldi	r24, 0x01	; 1
    6e6c:	60 e0       	ldi	r22, 0x00	; 0
    6e6e:	41 e0       	ldi	r20, 0x01	; 1
    6e70:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
    6e74:	fe 01       	movw	r30, r28
    6e76:	ef 5a       	subi	r30, 0xAF	; 175
    6e78:	ff 4f       	sbci	r31, 0xFF	; 255
    6e7a:	80 e0       	ldi	r24, 0x00	; 0
    6e7c:	90 e0       	ldi	r25, 0x00	; 0
    6e7e:	a0 e8       	ldi	r26, 0x80	; 128
    6e80:	bf e3       	ldi	r27, 0x3F	; 63
    6e82:	80 83       	st	Z, r24
    6e84:	91 83       	std	Z+1, r25	; 0x01
    6e86:	a2 83       	std	Z+2, r26	; 0x02
    6e88:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6e8a:	8e 01       	movw	r16, r28
    6e8c:	03 5b       	subi	r16, 0xB3	; 179
    6e8e:	1f 4f       	sbci	r17, 0xFF	; 255
    6e90:	fe 01       	movw	r30, r28
    6e92:	ef 5a       	subi	r30, 0xAF	; 175
    6e94:	ff 4f       	sbci	r31, 0xFF	; 255
    6e96:	60 81       	ld	r22, Z
    6e98:	71 81       	ldd	r23, Z+1	; 0x01
    6e9a:	82 81       	ldd	r24, Z+2	; 0x02
    6e9c:	93 81       	ldd	r25, Z+3	; 0x03
    6e9e:	20 e0       	ldi	r18, 0x00	; 0
    6ea0:	30 e0       	ldi	r19, 0x00	; 0
    6ea2:	4a ef       	ldi	r20, 0xFA	; 250
    6ea4:	54 e4       	ldi	r21, 0x44	; 68
    6ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6eaa:	dc 01       	movw	r26, r24
    6eac:	cb 01       	movw	r24, r22
    6eae:	f8 01       	movw	r30, r16
    6eb0:	80 83       	st	Z, r24
    6eb2:	91 83       	std	Z+1, r25	; 0x01
    6eb4:	a2 83       	std	Z+2, r26	; 0x02
    6eb6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6eb8:	fe 01       	movw	r30, r28
    6eba:	e3 5b       	subi	r30, 0xB3	; 179
    6ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    6ebe:	60 81       	ld	r22, Z
    6ec0:	71 81       	ldd	r23, Z+1	; 0x01
    6ec2:	82 81       	ldd	r24, Z+2	; 0x02
    6ec4:	93 81       	ldd	r25, Z+3	; 0x03
    6ec6:	20 e0       	ldi	r18, 0x00	; 0
    6ec8:	30 e0       	ldi	r19, 0x00	; 0
    6eca:	40 e8       	ldi	r20, 0x80	; 128
    6ecc:	5f e3       	ldi	r21, 0x3F	; 63
    6ece:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6ed2:	88 23       	and	r24, r24
    6ed4:	44 f4       	brge	.+16     	; 0x6ee6 <BuzzerSound+0x656>
		__ticks = 1;
    6ed6:	fe 01       	movw	r30, r28
    6ed8:	e5 5b       	subi	r30, 0xB5	; 181
    6eda:	ff 4f       	sbci	r31, 0xFF	; 255
    6edc:	81 e0       	ldi	r24, 0x01	; 1
    6ede:	90 e0       	ldi	r25, 0x00	; 0
    6ee0:	91 83       	std	Z+1, r25	; 0x01
    6ee2:	80 83       	st	Z, r24
    6ee4:	64 c0       	rjmp	.+200    	; 0x6fae <BuzzerSound+0x71e>
	else if (__tmp > 65535)
    6ee6:	fe 01       	movw	r30, r28
    6ee8:	e3 5b       	subi	r30, 0xB3	; 179
    6eea:	ff 4f       	sbci	r31, 0xFF	; 255
    6eec:	60 81       	ld	r22, Z
    6eee:	71 81       	ldd	r23, Z+1	; 0x01
    6ef0:	82 81       	ldd	r24, Z+2	; 0x02
    6ef2:	93 81       	ldd	r25, Z+3	; 0x03
    6ef4:	20 e0       	ldi	r18, 0x00	; 0
    6ef6:	3f ef       	ldi	r19, 0xFF	; 255
    6ef8:	4f e7       	ldi	r20, 0x7F	; 127
    6efa:	57 e4       	ldi	r21, 0x47	; 71
    6efc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6f00:	18 16       	cp	r1, r24
    6f02:	0c f0       	brlt	.+2      	; 0x6f06 <BuzzerSound+0x676>
    6f04:	43 c0       	rjmp	.+134    	; 0x6f8c <BuzzerSound+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6f06:	fe 01       	movw	r30, r28
    6f08:	ef 5a       	subi	r30, 0xAF	; 175
    6f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    6f0c:	60 81       	ld	r22, Z
    6f0e:	71 81       	ldd	r23, Z+1	; 0x01
    6f10:	82 81       	ldd	r24, Z+2	; 0x02
    6f12:	93 81       	ldd	r25, Z+3	; 0x03
    6f14:	20 e0       	ldi	r18, 0x00	; 0
    6f16:	30 e0       	ldi	r19, 0x00	; 0
    6f18:	40 e2       	ldi	r20, 0x20	; 32
    6f1a:	51 e4       	ldi	r21, 0x41	; 65
    6f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6f20:	dc 01       	movw	r26, r24
    6f22:	cb 01       	movw	r24, r22
    6f24:	8e 01       	movw	r16, r28
    6f26:	05 5b       	subi	r16, 0xB5	; 181
    6f28:	1f 4f       	sbci	r17, 0xFF	; 255
    6f2a:	bc 01       	movw	r22, r24
    6f2c:	cd 01       	movw	r24, r26
    6f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6f32:	dc 01       	movw	r26, r24
    6f34:	cb 01       	movw	r24, r22
    6f36:	f8 01       	movw	r30, r16
    6f38:	91 83       	std	Z+1, r25	; 0x01
    6f3a:	80 83       	st	Z, r24
    6f3c:	1f c0       	rjmp	.+62     	; 0x6f7c <BuzzerSound+0x6ec>
    6f3e:	fe 01       	movw	r30, r28
    6f40:	e7 5b       	subi	r30, 0xB7	; 183
    6f42:	ff 4f       	sbci	r31, 0xFF	; 255
    6f44:	88 ec       	ldi	r24, 0xC8	; 200
    6f46:	90 e0       	ldi	r25, 0x00	; 0
    6f48:	91 83       	std	Z+1, r25	; 0x01
    6f4a:	80 83       	st	Z, r24
    6f4c:	fe 01       	movw	r30, r28
    6f4e:	e7 5b       	subi	r30, 0xB7	; 183
    6f50:	ff 4f       	sbci	r31, 0xFF	; 255
    6f52:	80 81       	ld	r24, Z
    6f54:	91 81       	ldd	r25, Z+1	; 0x01
    6f56:	01 97       	sbiw	r24, 0x01	; 1
    6f58:	f1 f7       	brne	.-4      	; 0x6f56 <BuzzerSound+0x6c6>
    6f5a:	fe 01       	movw	r30, r28
    6f5c:	e7 5b       	subi	r30, 0xB7	; 183
    6f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    6f60:	91 83       	std	Z+1, r25	; 0x01
    6f62:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6f64:	de 01       	movw	r26, r28
    6f66:	a5 5b       	subi	r26, 0xB5	; 181
    6f68:	bf 4f       	sbci	r27, 0xFF	; 255
    6f6a:	fe 01       	movw	r30, r28
    6f6c:	e5 5b       	subi	r30, 0xB5	; 181
    6f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    6f70:	80 81       	ld	r24, Z
    6f72:	91 81       	ldd	r25, Z+1	; 0x01
    6f74:	01 97       	sbiw	r24, 0x01	; 1
    6f76:	11 96       	adiw	r26, 0x01	; 1
    6f78:	9c 93       	st	X, r25
    6f7a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6f7c:	fe 01       	movw	r30, r28
    6f7e:	e5 5b       	subi	r30, 0xB5	; 181
    6f80:	ff 4f       	sbci	r31, 0xFF	; 255
    6f82:	80 81       	ld	r24, Z
    6f84:	91 81       	ldd	r25, Z+1	; 0x01
    6f86:	00 97       	sbiw	r24, 0x00	; 0
    6f88:	d1 f6       	brne	.-76     	; 0x6f3e <BuzzerSound+0x6ae>
    6f8a:	27 c0       	rjmp	.+78     	; 0x6fda <BuzzerSound+0x74a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6f8c:	8e 01       	movw	r16, r28
    6f8e:	05 5b       	subi	r16, 0xB5	; 181
    6f90:	1f 4f       	sbci	r17, 0xFF	; 255
    6f92:	fe 01       	movw	r30, r28
    6f94:	e3 5b       	subi	r30, 0xB3	; 179
    6f96:	ff 4f       	sbci	r31, 0xFF	; 255
    6f98:	60 81       	ld	r22, Z
    6f9a:	71 81       	ldd	r23, Z+1	; 0x01
    6f9c:	82 81       	ldd	r24, Z+2	; 0x02
    6f9e:	93 81       	ldd	r25, Z+3	; 0x03
    6fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6fa4:	dc 01       	movw	r26, r24
    6fa6:	cb 01       	movw	r24, r22
    6fa8:	f8 01       	movw	r30, r16
    6faa:	91 83       	std	Z+1, r25	; 0x01
    6fac:	80 83       	st	Z, r24
    6fae:	de 01       	movw	r26, r28
    6fb0:	a9 5b       	subi	r26, 0xB9	; 185
    6fb2:	bf 4f       	sbci	r27, 0xFF	; 255
    6fb4:	fe 01       	movw	r30, r28
    6fb6:	e5 5b       	subi	r30, 0xB5	; 181
    6fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    6fba:	80 81       	ld	r24, Z
    6fbc:	91 81       	ldd	r25, Z+1	; 0x01
    6fbe:	8d 93       	st	X+, r24
    6fc0:	9c 93       	st	X, r25
    6fc2:	fe 01       	movw	r30, r28
    6fc4:	e9 5b       	subi	r30, 0xB9	; 185
    6fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    6fc8:	80 81       	ld	r24, Z
    6fca:	91 81       	ldd	r25, Z+1	; 0x01
    6fcc:	01 97       	sbiw	r24, 0x01	; 1
    6fce:	f1 f7       	brne	.-4      	; 0x6fcc <BuzzerSound+0x73c>
    6fd0:	fe 01       	movw	r30, r28
    6fd2:	e9 5b       	subi	r30, 0xB9	; 185
    6fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    6fd6:	91 83       	std	Z+1, r25	; 0x01
    6fd8:	80 83       	st	Z, r24
	_delay_ms(1);
	DIO_u8SetPinValue(DIO_PORTB,DIO_PIN0,DIO_PIN_LOW);
    6fda:	81 e0       	ldi	r24, 0x01	; 1
    6fdc:	60 e0       	ldi	r22, 0x00	; 0
    6fde:	40 e0       	ldi	r20, 0x00	; 0
    6fe0:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
    6fe4:	fe 01       	movw	r30, r28
    6fe6:	ed 5b       	subi	r30, 0xBD	; 189
    6fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    6fea:	80 e0       	ldi	r24, 0x00	; 0
    6fec:	90 e0       	ldi	r25, 0x00	; 0
    6fee:	a0 e8       	ldi	r26, 0x80	; 128
    6ff0:	bf e3       	ldi	r27, 0x3F	; 63
    6ff2:	80 83       	st	Z, r24
    6ff4:	91 83       	std	Z+1, r25	; 0x01
    6ff6:	a2 83       	std	Z+2, r26	; 0x02
    6ff8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6ffa:	8e 01       	movw	r16, r28
    6ffc:	01 5c       	subi	r16, 0xC1	; 193
    6ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    7000:	fe 01       	movw	r30, r28
    7002:	ed 5b       	subi	r30, 0xBD	; 189
    7004:	ff 4f       	sbci	r31, 0xFF	; 255
    7006:	60 81       	ld	r22, Z
    7008:	71 81       	ldd	r23, Z+1	; 0x01
    700a:	82 81       	ldd	r24, Z+2	; 0x02
    700c:	93 81       	ldd	r25, Z+3	; 0x03
    700e:	20 e0       	ldi	r18, 0x00	; 0
    7010:	30 e0       	ldi	r19, 0x00	; 0
    7012:	4a ef       	ldi	r20, 0xFA	; 250
    7014:	54 e4       	ldi	r21, 0x44	; 68
    7016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    701a:	dc 01       	movw	r26, r24
    701c:	cb 01       	movw	r24, r22
    701e:	f8 01       	movw	r30, r16
    7020:	80 83       	st	Z, r24
    7022:	91 83       	std	Z+1, r25	; 0x01
    7024:	a2 83       	std	Z+2, r26	; 0x02
    7026:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7028:	fe 01       	movw	r30, r28
    702a:	ff 96       	adiw	r30, 0x3f	; 63
    702c:	60 81       	ld	r22, Z
    702e:	71 81       	ldd	r23, Z+1	; 0x01
    7030:	82 81       	ldd	r24, Z+2	; 0x02
    7032:	93 81       	ldd	r25, Z+3	; 0x03
    7034:	20 e0       	ldi	r18, 0x00	; 0
    7036:	30 e0       	ldi	r19, 0x00	; 0
    7038:	40 e8       	ldi	r20, 0x80	; 128
    703a:	5f e3       	ldi	r21, 0x3F	; 63
    703c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7040:	88 23       	and	r24, r24
    7042:	2c f4       	brge	.+10     	; 0x704e <BuzzerSound+0x7be>
		__ticks = 1;
    7044:	81 e0       	ldi	r24, 0x01	; 1
    7046:	90 e0       	ldi	r25, 0x00	; 0
    7048:	9e af       	std	Y+62, r25	; 0x3e
    704a:	8d af       	std	Y+61, r24	; 0x3d
    704c:	46 c0       	rjmp	.+140    	; 0x70da <BuzzerSound+0x84a>
	else if (__tmp > 65535)
    704e:	fe 01       	movw	r30, r28
    7050:	ff 96       	adiw	r30, 0x3f	; 63
    7052:	60 81       	ld	r22, Z
    7054:	71 81       	ldd	r23, Z+1	; 0x01
    7056:	82 81       	ldd	r24, Z+2	; 0x02
    7058:	93 81       	ldd	r25, Z+3	; 0x03
    705a:	20 e0       	ldi	r18, 0x00	; 0
    705c:	3f ef       	ldi	r19, 0xFF	; 255
    705e:	4f e7       	ldi	r20, 0x7F	; 127
    7060:	57 e4       	ldi	r21, 0x47	; 71
    7062:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7066:	18 16       	cp	r1, r24
    7068:	64 f5       	brge	.+88     	; 0x70c2 <BuzzerSound+0x832>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    706a:	fe 01       	movw	r30, r28
    706c:	ed 5b       	subi	r30, 0xBD	; 189
    706e:	ff 4f       	sbci	r31, 0xFF	; 255
    7070:	60 81       	ld	r22, Z
    7072:	71 81       	ldd	r23, Z+1	; 0x01
    7074:	82 81       	ldd	r24, Z+2	; 0x02
    7076:	93 81       	ldd	r25, Z+3	; 0x03
    7078:	20 e0       	ldi	r18, 0x00	; 0
    707a:	30 e0       	ldi	r19, 0x00	; 0
    707c:	40 e2       	ldi	r20, 0x20	; 32
    707e:	51 e4       	ldi	r21, 0x41	; 65
    7080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7084:	dc 01       	movw	r26, r24
    7086:	cb 01       	movw	r24, r22
    7088:	bc 01       	movw	r22, r24
    708a:	cd 01       	movw	r24, r26
    708c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7090:	dc 01       	movw	r26, r24
    7092:	cb 01       	movw	r24, r22
    7094:	9e af       	std	Y+62, r25	; 0x3e
    7096:	8d af       	std	Y+61, r24	; 0x3d
    7098:	0f c0       	rjmp	.+30     	; 0x70b8 <BuzzerSound+0x828>
    709a:	88 ec       	ldi	r24, 0xC8	; 200
    709c:	90 e0       	ldi	r25, 0x00	; 0
    709e:	9c af       	std	Y+60, r25	; 0x3c
    70a0:	8b af       	std	Y+59, r24	; 0x3b
    70a2:	8b ad       	ldd	r24, Y+59	; 0x3b
    70a4:	9c ad       	ldd	r25, Y+60	; 0x3c
    70a6:	01 97       	sbiw	r24, 0x01	; 1
    70a8:	f1 f7       	brne	.-4      	; 0x70a6 <BuzzerSound+0x816>
    70aa:	9c af       	std	Y+60, r25	; 0x3c
    70ac:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    70ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    70b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    70b2:	01 97       	sbiw	r24, 0x01	; 1
    70b4:	9e af       	std	Y+62, r25	; 0x3e
    70b6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    70b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    70ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    70bc:	00 97       	sbiw	r24, 0x00	; 0
    70be:	69 f7       	brne	.-38     	; 0x709a <BuzzerSound+0x80a>
    70c0:	16 c0       	rjmp	.+44     	; 0x70ee <BuzzerSound+0x85e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    70c2:	fe 01       	movw	r30, r28
    70c4:	ff 96       	adiw	r30, 0x3f	; 63
    70c6:	60 81       	ld	r22, Z
    70c8:	71 81       	ldd	r23, Z+1	; 0x01
    70ca:	82 81       	ldd	r24, Z+2	; 0x02
    70cc:	93 81       	ldd	r25, Z+3	; 0x03
    70ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    70d2:	dc 01       	movw	r26, r24
    70d4:	cb 01       	movw	r24, r22
    70d6:	9e af       	std	Y+62, r25	; 0x3e
    70d8:	8d af       	std	Y+61, r24	; 0x3d
    70da:	8d ad       	ldd	r24, Y+61	; 0x3d
    70dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    70de:	9a af       	std	Y+58, r25	; 0x3a
    70e0:	89 af       	std	Y+57, r24	; 0x39
    70e2:	89 ad       	ldd	r24, Y+57	; 0x39
    70e4:	9a ad       	ldd	r25, Y+58	; 0x3a
    70e6:	01 97       	sbiw	r24, 0x01	; 1
    70e8:	f1 f7       	brne	.-4      	; 0x70e6 <BuzzerSound+0x856>
    70ea:	9a af       	std	Y+58, r25	; 0x3a
    70ec:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	DIO_u8SetPinValue(DIO_PORTB,DIO_PIN0,DIO_PIN_HIGH);
    70ee:	81 e0       	ldi	r24, 0x01	; 1
    70f0:	60 e0       	ldi	r22, 0x00	; 0
    70f2:	41 e0       	ldi	r20, 0x01	; 1
    70f4:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
    70f8:	80 e0       	ldi	r24, 0x00	; 0
    70fa:	90 e0       	ldi	r25, 0x00	; 0
    70fc:	a8 ec       	ldi	r26, 0xC8	; 200
    70fe:	b2 e4       	ldi	r27, 0x42	; 66
    7100:	8d ab       	std	Y+53, r24	; 0x35
    7102:	9e ab       	std	Y+54, r25	; 0x36
    7104:	af ab       	std	Y+55, r26	; 0x37
    7106:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7108:	6d a9       	ldd	r22, Y+53	; 0x35
    710a:	7e a9       	ldd	r23, Y+54	; 0x36
    710c:	8f a9       	ldd	r24, Y+55	; 0x37
    710e:	98 ad       	ldd	r25, Y+56	; 0x38
    7110:	20 e0       	ldi	r18, 0x00	; 0
    7112:	30 e0       	ldi	r19, 0x00	; 0
    7114:	4a ef       	ldi	r20, 0xFA	; 250
    7116:	54 e4       	ldi	r21, 0x44	; 68
    7118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    711c:	dc 01       	movw	r26, r24
    711e:	cb 01       	movw	r24, r22
    7120:	89 ab       	std	Y+49, r24	; 0x31
    7122:	9a ab       	std	Y+50, r25	; 0x32
    7124:	ab ab       	std	Y+51, r26	; 0x33
    7126:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    7128:	69 a9       	ldd	r22, Y+49	; 0x31
    712a:	7a a9       	ldd	r23, Y+50	; 0x32
    712c:	8b a9       	ldd	r24, Y+51	; 0x33
    712e:	9c a9       	ldd	r25, Y+52	; 0x34
    7130:	20 e0       	ldi	r18, 0x00	; 0
    7132:	30 e0       	ldi	r19, 0x00	; 0
    7134:	40 e8       	ldi	r20, 0x80	; 128
    7136:	5f e3       	ldi	r21, 0x3F	; 63
    7138:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    713c:	88 23       	and	r24, r24
    713e:	2c f4       	brge	.+10     	; 0x714a <BuzzerSound+0x8ba>
		__ticks = 1;
    7140:	81 e0       	ldi	r24, 0x01	; 1
    7142:	90 e0       	ldi	r25, 0x00	; 0
    7144:	98 ab       	std	Y+48, r25	; 0x30
    7146:	8f a7       	std	Y+47, r24	; 0x2f
    7148:	3f c0       	rjmp	.+126    	; 0x71c8 <BuzzerSound+0x938>
	else if (__tmp > 65535)
    714a:	69 a9       	ldd	r22, Y+49	; 0x31
    714c:	7a a9       	ldd	r23, Y+50	; 0x32
    714e:	8b a9       	ldd	r24, Y+51	; 0x33
    7150:	9c a9       	ldd	r25, Y+52	; 0x34
    7152:	20 e0       	ldi	r18, 0x00	; 0
    7154:	3f ef       	ldi	r19, 0xFF	; 255
    7156:	4f e7       	ldi	r20, 0x7F	; 127
    7158:	57 e4       	ldi	r21, 0x47	; 71
    715a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    715e:	18 16       	cp	r1, r24
    7160:	4c f5       	brge	.+82     	; 0x71b4 <BuzzerSound+0x924>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7162:	6d a9       	ldd	r22, Y+53	; 0x35
    7164:	7e a9       	ldd	r23, Y+54	; 0x36
    7166:	8f a9       	ldd	r24, Y+55	; 0x37
    7168:	98 ad       	ldd	r25, Y+56	; 0x38
    716a:	20 e0       	ldi	r18, 0x00	; 0
    716c:	30 e0       	ldi	r19, 0x00	; 0
    716e:	40 e2       	ldi	r20, 0x20	; 32
    7170:	51 e4       	ldi	r21, 0x41	; 65
    7172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7176:	dc 01       	movw	r26, r24
    7178:	cb 01       	movw	r24, r22
    717a:	bc 01       	movw	r22, r24
    717c:	cd 01       	movw	r24, r26
    717e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7182:	dc 01       	movw	r26, r24
    7184:	cb 01       	movw	r24, r22
    7186:	98 ab       	std	Y+48, r25	; 0x30
    7188:	8f a7       	std	Y+47, r24	; 0x2f
    718a:	0f c0       	rjmp	.+30     	; 0x71aa <BuzzerSound+0x91a>
    718c:	88 ec       	ldi	r24, 0xC8	; 200
    718e:	90 e0       	ldi	r25, 0x00	; 0
    7190:	9e a7       	std	Y+46, r25	; 0x2e
    7192:	8d a7       	std	Y+45, r24	; 0x2d
    7194:	8d a5       	ldd	r24, Y+45	; 0x2d
    7196:	9e a5       	ldd	r25, Y+46	; 0x2e
    7198:	01 97       	sbiw	r24, 0x01	; 1
    719a:	f1 f7       	brne	.-4      	; 0x7198 <BuzzerSound+0x908>
    719c:	9e a7       	std	Y+46, r25	; 0x2e
    719e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    71a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    71a2:	98 a9       	ldd	r25, Y+48	; 0x30
    71a4:	01 97       	sbiw	r24, 0x01	; 1
    71a6:	98 ab       	std	Y+48, r25	; 0x30
    71a8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    71aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    71ac:	98 a9       	ldd	r25, Y+48	; 0x30
    71ae:	00 97       	sbiw	r24, 0x00	; 0
    71b0:	69 f7       	brne	.-38     	; 0x718c <BuzzerSound+0x8fc>
    71b2:	14 c0       	rjmp	.+40     	; 0x71dc <BuzzerSound+0x94c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    71b4:	69 a9       	ldd	r22, Y+49	; 0x31
    71b6:	7a a9       	ldd	r23, Y+50	; 0x32
    71b8:	8b a9       	ldd	r24, Y+51	; 0x33
    71ba:	9c a9       	ldd	r25, Y+52	; 0x34
    71bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    71c0:	dc 01       	movw	r26, r24
    71c2:	cb 01       	movw	r24, r22
    71c4:	98 ab       	std	Y+48, r25	; 0x30
    71c6:	8f a7       	std	Y+47, r24	; 0x2f
    71c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    71ca:	98 a9       	ldd	r25, Y+48	; 0x30
    71cc:	9c a7       	std	Y+44, r25	; 0x2c
    71ce:	8b a7       	std	Y+43, r24	; 0x2b
    71d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    71d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    71d4:	01 97       	sbiw	r24, 0x01	; 1
    71d6:	f1 f7       	brne	.-4      	; 0x71d4 <BuzzerSound+0x944>
    71d8:	9c a7       	std	Y+44, r25	; 0x2c
    71da:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);
	DIO_u8SetPinValue(DIO_PORTB,DIO_PIN0,DIO_PIN_LOW);
    71dc:	81 e0       	ldi	r24, 0x01	; 1
    71de:	60 e0       	ldi	r22, 0x00	; 0
    71e0:	40 e0       	ldi	r20, 0x00	; 0
    71e2:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
    71e6:	80 e0       	ldi	r24, 0x00	; 0
    71e8:	90 e0       	ldi	r25, 0x00	; 0
    71ea:	a8 ec       	ldi	r26, 0xC8	; 200
    71ec:	b2 e4       	ldi	r27, 0x42	; 66
    71ee:	8f a3       	std	Y+39, r24	; 0x27
    71f0:	98 a7       	std	Y+40, r25	; 0x28
    71f2:	a9 a7       	std	Y+41, r26	; 0x29
    71f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    71f6:	6f a1       	ldd	r22, Y+39	; 0x27
    71f8:	78 a5       	ldd	r23, Y+40	; 0x28
    71fa:	89 a5       	ldd	r24, Y+41	; 0x29
    71fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    71fe:	20 e0       	ldi	r18, 0x00	; 0
    7200:	30 e0       	ldi	r19, 0x00	; 0
    7202:	4a ef       	ldi	r20, 0xFA	; 250
    7204:	54 e4       	ldi	r21, 0x44	; 68
    7206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    720a:	dc 01       	movw	r26, r24
    720c:	cb 01       	movw	r24, r22
    720e:	8b a3       	std	Y+35, r24	; 0x23
    7210:	9c a3       	std	Y+36, r25	; 0x24
    7212:	ad a3       	std	Y+37, r26	; 0x25
    7214:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    7216:	6b a1       	ldd	r22, Y+35	; 0x23
    7218:	7c a1       	ldd	r23, Y+36	; 0x24
    721a:	8d a1       	ldd	r24, Y+37	; 0x25
    721c:	9e a1       	ldd	r25, Y+38	; 0x26
    721e:	20 e0       	ldi	r18, 0x00	; 0
    7220:	30 e0       	ldi	r19, 0x00	; 0
    7222:	40 e8       	ldi	r20, 0x80	; 128
    7224:	5f e3       	ldi	r21, 0x3F	; 63
    7226:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    722a:	88 23       	and	r24, r24
    722c:	2c f4       	brge	.+10     	; 0x7238 <BuzzerSound+0x9a8>
		__ticks = 1;
    722e:	81 e0       	ldi	r24, 0x01	; 1
    7230:	90 e0       	ldi	r25, 0x00	; 0
    7232:	9a a3       	std	Y+34, r25	; 0x22
    7234:	89 a3       	std	Y+33, r24	; 0x21
    7236:	3f c0       	rjmp	.+126    	; 0x72b6 <BuzzerSound+0xa26>
	else if (__tmp > 65535)
    7238:	6b a1       	ldd	r22, Y+35	; 0x23
    723a:	7c a1       	ldd	r23, Y+36	; 0x24
    723c:	8d a1       	ldd	r24, Y+37	; 0x25
    723e:	9e a1       	ldd	r25, Y+38	; 0x26
    7240:	20 e0       	ldi	r18, 0x00	; 0
    7242:	3f ef       	ldi	r19, 0xFF	; 255
    7244:	4f e7       	ldi	r20, 0x7F	; 127
    7246:	57 e4       	ldi	r21, 0x47	; 71
    7248:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    724c:	18 16       	cp	r1, r24
    724e:	4c f5       	brge	.+82     	; 0x72a2 <BuzzerSound+0xa12>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7250:	6f a1       	ldd	r22, Y+39	; 0x27
    7252:	78 a5       	ldd	r23, Y+40	; 0x28
    7254:	89 a5       	ldd	r24, Y+41	; 0x29
    7256:	9a a5       	ldd	r25, Y+42	; 0x2a
    7258:	20 e0       	ldi	r18, 0x00	; 0
    725a:	30 e0       	ldi	r19, 0x00	; 0
    725c:	40 e2       	ldi	r20, 0x20	; 32
    725e:	51 e4       	ldi	r21, 0x41	; 65
    7260:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7264:	dc 01       	movw	r26, r24
    7266:	cb 01       	movw	r24, r22
    7268:	bc 01       	movw	r22, r24
    726a:	cd 01       	movw	r24, r26
    726c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7270:	dc 01       	movw	r26, r24
    7272:	cb 01       	movw	r24, r22
    7274:	9a a3       	std	Y+34, r25	; 0x22
    7276:	89 a3       	std	Y+33, r24	; 0x21
    7278:	0f c0       	rjmp	.+30     	; 0x7298 <BuzzerSound+0xa08>
    727a:	88 ec       	ldi	r24, 0xC8	; 200
    727c:	90 e0       	ldi	r25, 0x00	; 0
    727e:	98 a3       	std	Y+32, r25	; 0x20
    7280:	8f 8f       	std	Y+31, r24	; 0x1f
    7282:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7284:	98 a1       	ldd	r25, Y+32	; 0x20
    7286:	01 97       	sbiw	r24, 0x01	; 1
    7288:	f1 f7       	brne	.-4      	; 0x7286 <BuzzerSound+0x9f6>
    728a:	98 a3       	std	Y+32, r25	; 0x20
    728c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    728e:	89 a1       	ldd	r24, Y+33	; 0x21
    7290:	9a a1       	ldd	r25, Y+34	; 0x22
    7292:	01 97       	sbiw	r24, 0x01	; 1
    7294:	9a a3       	std	Y+34, r25	; 0x22
    7296:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7298:	89 a1       	ldd	r24, Y+33	; 0x21
    729a:	9a a1       	ldd	r25, Y+34	; 0x22
    729c:	00 97       	sbiw	r24, 0x00	; 0
    729e:	69 f7       	brne	.-38     	; 0x727a <BuzzerSound+0x9ea>
    72a0:	14 c0       	rjmp	.+40     	; 0x72ca <BuzzerSound+0xa3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    72a2:	6b a1       	ldd	r22, Y+35	; 0x23
    72a4:	7c a1       	ldd	r23, Y+36	; 0x24
    72a6:	8d a1       	ldd	r24, Y+37	; 0x25
    72a8:	9e a1       	ldd	r25, Y+38	; 0x26
    72aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    72ae:	dc 01       	movw	r26, r24
    72b0:	cb 01       	movw	r24, r22
    72b2:	9a a3       	std	Y+34, r25	; 0x22
    72b4:	89 a3       	std	Y+33, r24	; 0x21
    72b6:	89 a1       	ldd	r24, Y+33	; 0x21
    72b8:	9a a1       	ldd	r25, Y+34	; 0x22
    72ba:	9e 8f       	std	Y+30, r25	; 0x1e
    72bc:	8d 8f       	std	Y+29, r24	; 0x1d
    72be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    72c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    72c2:	01 97       	sbiw	r24, 0x01	; 1
    72c4:	f1 f7       	brne	.-4      	; 0x72c2 <BuzzerSound+0xa32>
    72c6:	9e 8f       	std	Y+30, r25	; 0x1e
    72c8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);
	DIO_u8SetPinValue(DIO_PORTB,DIO_PIN0,DIO_PIN_HIGH);
    72ca:	81 e0       	ldi	r24, 0x01	; 1
    72cc:	60 e0       	ldi	r22, 0x00	; 0
    72ce:	41 e0       	ldi	r20, 0x01	; 1
    72d0:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
    72d4:	80 e0       	ldi	r24, 0x00	; 0
    72d6:	90 e0       	ldi	r25, 0x00	; 0
    72d8:	a8 e4       	ldi	r26, 0x48	; 72
    72da:	b2 e4       	ldi	r27, 0x42	; 66
    72dc:	89 8f       	std	Y+25, r24	; 0x19
    72de:	9a 8f       	std	Y+26, r25	; 0x1a
    72e0:	ab 8f       	std	Y+27, r26	; 0x1b
    72e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    72e4:	69 8d       	ldd	r22, Y+25	; 0x19
    72e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    72e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    72ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    72ec:	20 e0       	ldi	r18, 0x00	; 0
    72ee:	30 e0       	ldi	r19, 0x00	; 0
    72f0:	4a ef       	ldi	r20, 0xFA	; 250
    72f2:	54 e4       	ldi	r21, 0x44	; 68
    72f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    72f8:	dc 01       	movw	r26, r24
    72fa:	cb 01       	movw	r24, r22
    72fc:	8d 8b       	std	Y+21, r24	; 0x15
    72fe:	9e 8b       	std	Y+22, r25	; 0x16
    7300:	af 8b       	std	Y+23, r26	; 0x17
    7302:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    7304:	6d 89       	ldd	r22, Y+21	; 0x15
    7306:	7e 89       	ldd	r23, Y+22	; 0x16
    7308:	8f 89       	ldd	r24, Y+23	; 0x17
    730a:	98 8d       	ldd	r25, Y+24	; 0x18
    730c:	20 e0       	ldi	r18, 0x00	; 0
    730e:	30 e0       	ldi	r19, 0x00	; 0
    7310:	40 e8       	ldi	r20, 0x80	; 128
    7312:	5f e3       	ldi	r21, 0x3F	; 63
    7314:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7318:	88 23       	and	r24, r24
    731a:	2c f4       	brge	.+10     	; 0x7326 <BuzzerSound+0xa96>
		__ticks = 1;
    731c:	81 e0       	ldi	r24, 0x01	; 1
    731e:	90 e0       	ldi	r25, 0x00	; 0
    7320:	9c 8b       	std	Y+20, r25	; 0x14
    7322:	8b 8b       	std	Y+19, r24	; 0x13
    7324:	3f c0       	rjmp	.+126    	; 0x73a4 <BuzzerSound+0xb14>
	else if (__tmp > 65535)
    7326:	6d 89       	ldd	r22, Y+21	; 0x15
    7328:	7e 89       	ldd	r23, Y+22	; 0x16
    732a:	8f 89       	ldd	r24, Y+23	; 0x17
    732c:	98 8d       	ldd	r25, Y+24	; 0x18
    732e:	20 e0       	ldi	r18, 0x00	; 0
    7330:	3f ef       	ldi	r19, 0xFF	; 255
    7332:	4f e7       	ldi	r20, 0x7F	; 127
    7334:	57 e4       	ldi	r21, 0x47	; 71
    7336:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    733a:	18 16       	cp	r1, r24
    733c:	4c f5       	brge	.+82     	; 0x7390 <BuzzerSound+0xb00>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    733e:	69 8d       	ldd	r22, Y+25	; 0x19
    7340:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7342:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7344:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7346:	20 e0       	ldi	r18, 0x00	; 0
    7348:	30 e0       	ldi	r19, 0x00	; 0
    734a:	40 e2       	ldi	r20, 0x20	; 32
    734c:	51 e4       	ldi	r21, 0x41	; 65
    734e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7352:	dc 01       	movw	r26, r24
    7354:	cb 01       	movw	r24, r22
    7356:	bc 01       	movw	r22, r24
    7358:	cd 01       	movw	r24, r26
    735a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    735e:	dc 01       	movw	r26, r24
    7360:	cb 01       	movw	r24, r22
    7362:	9c 8b       	std	Y+20, r25	; 0x14
    7364:	8b 8b       	std	Y+19, r24	; 0x13
    7366:	0f c0       	rjmp	.+30     	; 0x7386 <BuzzerSound+0xaf6>
    7368:	88 ec       	ldi	r24, 0xC8	; 200
    736a:	90 e0       	ldi	r25, 0x00	; 0
    736c:	9a 8b       	std	Y+18, r25	; 0x12
    736e:	89 8b       	std	Y+17, r24	; 0x11
    7370:	89 89       	ldd	r24, Y+17	; 0x11
    7372:	9a 89       	ldd	r25, Y+18	; 0x12
    7374:	01 97       	sbiw	r24, 0x01	; 1
    7376:	f1 f7       	brne	.-4      	; 0x7374 <BuzzerSound+0xae4>
    7378:	9a 8b       	std	Y+18, r25	; 0x12
    737a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    737c:	8b 89       	ldd	r24, Y+19	; 0x13
    737e:	9c 89       	ldd	r25, Y+20	; 0x14
    7380:	01 97       	sbiw	r24, 0x01	; 1
    7382:	9c 8b       	std	Y+20, r25	; 0x14
    7384:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7386:	8b 89       	ldd	r24, Y+19	; 0x13
    7388:	9c 89       	ldd	r25, Y+20	; 0x14
    738a:	00 97       	sbiw	r24, 0x00	; 0
    738c:	69 f7       	brne	.-38     	; 0x7368 <BuzzerSound+0xad8>
    738e:	14 c0       	rjmp	.+40     	; 0x73b8 <BuzzerSound+0xb28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7390:	6d 89       	ldd	r22, Y+21	; 0x15
    7392:	7e 89       	ldd	r23, Y+22	; 0x16
    7394:	8f 89       	ldd	r24, Y+23	; 0x17
    7396:	98 8d       	ldd	r25, Y+24	; 0x18
    7398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    739c:	dc 01       	movw	r26, r24
    739e:	cb 01       	movw	r24, r22
    73a0:	9c 8b       	std	Y+20, r25	; 0x14
    73a2:	8b 8b       	std	Y+19, r24	; 0x13
    73a4:	8b 89       	ldd	r24, Y+19	; 0x13
    73a6:	9c 89       	ldd	r25, Y+20	; 0x14
    73a8:	98 8b       	std	Y+16, r25	; 0x10
    73aa:	8f 87       	std	Y+15, r24	; 0x0f
    73ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    73ae:	98 89       	ldd	r25, Y+16	; 0x10
    73b0:	01 97       	sbiw	r24, 0x01	; 1
    73b2:	f1 f7       	brne	.-4      	; 0x73b0 <BuzzerSound+0xb20>
    73b4:	98 8b       	std	Y+16, r25	; 0x10
    73b6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	DIO_u8SetPinValue(DIO_PORTB,DIO_PIN0,DIO_PIN_LOW);
    73b8:	81 e0       	ldi	r24, 0x01	; 1
    73ba:	60 e0       	ldi	r22, 0x00	; 0
    73bc:	40 e0       	ldi	r20, 0x00	; 0
    73be:	0e 94 2a 10 	call	0x2054	; 0x2054 <DIO_u8SetPinValue>
    73c2:	80 e0       	ldi	r24, 0x00	; 0
    73c4:	90 e0       	ldi	r25, 0x00	; 0
    73c6:	a8 e4       	ldi	r26, 0x48	; 72
    73c8:	b2 e4       	ldi	r27, 0x42	; 66
    73ca:	8b 87       	std	Y+11, r24	; 0x0b
    73cc:	9c 87       	std	Y+12, r25	; 0x0c
    73ce:	ad 87       	std	Y+13, r26	; 0x0d
    73d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    73d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    73d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    73d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    73d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    73da:	20 e0       	ldi	r18, 0x00	; 0
    73dc:	30 e0       	ldi	r19, 0x00	; 0
    73de:	4a ef       	ldi	r20, 0xFA	; 250
    73e0:	54 e4       	ldi	r21, 0x44	; 68
    73e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    73e6:	dc 01       	movw	r26, r24
    73e8:	cb 01       	movw	r24, r22
    73ea:	8f 83       	std	Y+7, r24	; 0x07
    73ec:	98 87       	std	Y+8, r25	; 0x08
    73ee:	a9 87       	std	Y+9, r26	; 0x09
    73f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    73f2:	6f 81       	ldd	r22, Y+7	; 0x07
    73f4:	78 85       	ldd	r23, Y+8	; 0x08
    73f6:	89 85       	ldd	r24, Y+9	; 0x09
    73f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    73fa:	20 e0       	ldi	r18, 0x00	; 0
    73fc:	30 e0       	ldi	r19, 0x00	; 0
    73fe:	40 e8       	ldi	r20, 0x80	; 128
    7400:	5f e3       	ldi	r21, 0x3F	; 63
    7402:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7406:	88 23       	and	r24, r24
    7408:	2c f4       	brge	.+10     	; 0x7414 <BuzzerSound+0xb84>
		__ticks = 1;
    740a:	81 e0       	ldi	r24, 0x01	; 1
    740c:	90 e0       	ldi	r25, 0x00	; 0
    740e:	9e 83       	std	Y+6, r25	; 0x06
    7410:	8d 83       	std	Y+5, r24	; 0x05
    7412:	3f c0       	rjmp	.+126    	; 0x7492 <BuzzerSound+0xc02>
	else if (__tmp > 65535)
    7414:	6f 81       	ldd	r22, Y+7	; 0x07
    7416:	78 85       	ldd	r23, Y+8	; 0x08
    7418:	89 85       	ldd	r24, Y+9	; 0x09
    741a:	9a 85       	ldd	r25, Y+10	; 0x0a
    741c:	20 e0       	ldi	r18, 0x00	; 0
    741e:	3f ef       	ldi	r19, 0xFF	; 255
    7420:	4f e7       	ldi	r20, 0x7F	; 127
    7422:	57 e4       	ldi	r21, 0x47	; 71
    7424:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7428:	18 16       	cp	r1, r24
    742a:	4c f5       	brge	.+82     	; 0x747e <BuzzerSound+0xbee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    742c:	6b 85       	ldd	r22, Y+11	; 0x0b
    742e:	7c 85       	ldd	r23, Y+12	; 0x0c
    7430:	8d 85       	ldd	r24, Y+13	; 0x0d
    7432:	9e 85       	ldd	r25, Y+14	; 0x0e
    7434:	20 e0       	ldi	r18, 0x00	; 0
    7436:	30 e0       	ldi	r19, 0x00	; 0
    7438:	40 e2       	ldi	r20, 0x20	; 32
    743a:	51 e4       	ldi	r21, 0x41	; 65
    743c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7440:	dc 01       	movw	r26, r24
    7442:	cb 01       	movw	r24, r22
    7444:	bc 01       	movw	r22, r24
    7446:	cd 01       	movw	r24, r26
    7448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    744c:	dc 01       	movw	r26, r24
    744e:	cb 01       	movw	r24, r22
    7450:	9e 83       	std	Y+6, r25	; 0x06
    7452:	8d 83       	std	Y+5, r24	; 0x05
    7454:	0f c0       	rjmp	.+30     	; 0x7474 <BuzzerSound+0xbe4>
    7456:	88 ec       	ldi	r24, 0xC8	; 200
    7458:	90 e0       	ldi	r25, 0x00	; 0
    745a:	9c 83       	std	Y+4, r25	; 0x04
    745c:	8b 83       	std	Y+3, r24	; 0x03
    745e:	8b 81       	ldd	r24, Y+3	; 0x03
    7460:	9c 81       	ldd	r25, Y+4	; 0x04
    7462:	01 97       	sbiw	r24, 0x01	; 1
    7464:	f1 f7       	brne	.-4      	; 0x7462 <BuzzerSound+0xbd2>
    7466:	9c 83       	std	Y+4, r25	; 0x04
    7468:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    746a:	8d 81       	ldd	r24, Y+5	; 0x05
    746c:	9e 81       	ldd	r25, Y+6	; 0x06
    746e:	01 97       	sbiw	r24, 0x01	; 1
    7470:	9e 83       	std	Y+6, r25	; 0x06
    7472:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7474:	8d 81       	ldd	r24, Y+5	; 0x05
    7476:	9e 81       	ldd	r25, Y+6	; 0x06
    7478:	00 97       	sbiw	r24, 0x00	; 0
    747a:	69 f7       	brne	.-38     	; 0x7456 <BuzzerSound+0xbc6>
    747c:	14 c0       	rjmp	.+40     	; 0x74a6 <BuzzerSound+0xc16>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    747e:	6f 81       	ldd	r22, Y+7	; 0x07
    7480:	78 85       	ldd	r23, Y+8	; 0x08
    7482:	89 85       	ldd	r24, Y+9	; 0x09
    7484:	9a 85       	ldd	r25, Y+10	; 0x0a
    7486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    748a:	dc 01       	movw	r26, r24
    748c:	cb 01       	movw	r24, r22
    748e:	9e 83       	std	Y+6, r25	; 0x06
    7490:	8d 83       	std	Y+5, r24	; 0x05
    7492:	8d 81       	ldd	r24, Y+5	; 0x05
    7494:	9e 81       	ldd	r25, Y+6	; 0x06
    7496:	9a 83       	std	Y+2, r25	; 0x02
    7498:	89 83       	std	Y+1, r24	; 0x01
    749a:	89 81       	ldd	r24, Y+1	; 0x01
    749c:	9a 81       	ldd	r25, Y+2	; 0x02
    749e:	01 97       	sbiw	r24, 0x01	; 1
    74a0:	f1 f7       	brne	.-4      	; 0x749e <BuzzerSound+0xc0e>
    74a2:	9a 83       	std	Y+2, r25	; 0x02
    74a4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);

}
    74a6:	c4 57       	subi	r28, 0x74	; 116
    74a8:	df 4f       	sbci	r29, 0xFF	; 255
    74aa:	0f b6       	in	r0, 0x3f	; 63
    74ac:	f8 94       	cli
    74ae:	de bf       	out	0x3e, r29	; 62
    74b0:	0f be       	out	0x3f, r0	; 63
    74b2:	cd bf       	out	0x3d, r28	; 61
    74b4:	cf 91       	pop	r28
    74b6:	df 91       	pop	r29
    74b8:	1f 91       	pop	r17
    74ba:	0f 91       	pop	r16
    74bc:	08 95       	ret

000074be <LedAdjustMotorAdjust>:

void LedAdjustMotorAdjust()
{
    74be:	af 92       	push	r10
    74c0:	bf 92       	push	r11
    74c2:	cf 92       	push	r12
    74c4:	df 92       	push	r13
    74c6:	ef 92       	push	r14
    74c8:	ff 92       	push	r15
    74ca:	0f 93       	push	r16
    74cc:	1f 93       	push	r17
    74ce:	df 93       	push	r29
    74d0:	cf 93       	push	r28
    74d2:	cd b7       	in	r28, 0x3d	; 61
    74d4:	de b7       	in	r29, 0x3e	; 62
	if(notifyFlag1 == LDR_NOTE)
    74d6:	80 91 e7 02 	lds	r24, 0x02E7
    74da:	82 30       	cpi	r24, 0x02	; 2
    74dc:	09 f0       	breq	.+2      	; 0x74e0 <LedAdjustMotorAdjust+0x22>
    74de:	69 c0       	rjmp	.+210    	; 0x75b2 <LedAdjustMotorAdjust+0xf4>
	{
		LdrVal = (u16)(((u32)(ResultArr[1]*5000UL))/256UL);
    74e0:	80 91 f1 02 	lds	r24, 0x02F1
    74e4:	90 91 f2 02 	lds	r25, 0x02F2
    74e8:	cc 01       	movw	r24, r24
    74ea:	a0 e0       	ldi	r26, 0x00	; 0
    74ec:	b0 e0       	ldi	r27, 0x00	; 0
    74ee:	28 e8       	ldi	r18, 0x88	; 136
    74f0:	33 e1       	ldi	r19, 0x13	; 19
    74f2:	40 e0       	ldi	r20, 0x00	; 0
    74f4:	50 e0       	ldi	r21, 0x00	; 0
    74f6:	bc 01       	movw	r22, r24
    74f8:	cd 01       	movw	r24, r26
    74fa:	0e 94 71 3b 	call	0x76e2	; 0x76e2 <__mulsi3>
    74fe:	dc 01       	movw	r26, r24
    7500:	cb 01       	movw	r24, r22
    7502:	89 2f       	mov	r24, r25
    7504:	9a 2f       	mov	r25, r26
    7506:	ab 2f       	mov	r26, r27
    7508:	bb 27       	eor	r27, r27
    750a:	90 93 ea 02 	sts	0x02EA, r25
    750e:	80 93 e9 02 	sts	0x02E9, r24
		LdrVal /=10;
    7512:	80 91 e9 02 	lds	r24, 0x02E9
    7516:	90 91 ea 02 	lds	r25, 0x02EA
    751a:	2a e0       	ldi	r18, 0x0A	; 10
    751c:	30 e0       	ldi	r19, 0x00	; 0
    751e:	b9 01       	movw	r22, r18
    7520:	0e 94 90 3b 	call	0x7720	; 0x7720 <__udivmodhi4>
    7524:	cb 01       	movw	r24, r22
    7526:	90 93 ea 02 	sts	0x02EA, r25
    752a:	80 93 e9 02 	sts	0x02E9, r24
		LdrVal = AppMap(48 ,474,2000,5000,LdrVal);
    752e:	80 91 e9 02 	lds	r24, 0x02E9
    7532:	90 91 ea 02 	lds	r25, 0x02EA
    7536:	cc 01       	movw	r24, r24
    7538:	a0 e0       	ldi	r26, 0x00	; 0
    753a:	b0 e0       	ldi	r27, 0x00	; 0
    753c:	00 d0       	rcall	.+0      	; 0x753e <LedAdjustMotorAdjust+0x80>
    753e:	00 d0       	rcall	.+0      	; 0x7540 <LedAdjustMotorAdjust+0x82>
    7540:	ed b7       	in	r30, 0x3d	; 61
    7542:	fe b7       	in	r31, 0x3e	; 62
    7544:	31 96       	adiw	r30, 0x01	; 1
    7546:	80 83       	st	Z, r24
    7548:	91 83       	std	Z+1, r25	; 0x01
    754a:	a2 83       	std	Z+2, r26	; 0x02
    754c:	b3 83       	std	Z+3, r27	; 0x03
    754e:	60 e3       	ldi	r22, 0x30	; 48
    7550:	70 e0       	ldi	r23, 0x00	; 0
    7552:	80 e0       	ldi	r24, 0x00	; 0
    7554:	90 e0       	ldi	r25, 0x00	; 0
    7556:	2a ed       	ldi	r18, 0xDA	; 218
    7558:	31 e0       	ldi	r19, 0x01	; 1
    755a:	40 e0       	ldi	r20, 0x00	; 0
    755c:	50 e0       	ldi	r21, 0x00	; 0
    755e:	0f 2e       	mov	r0, r31
    7560:	f0 ed       	ldi	r31, 0xD0	; 208
    7562:	ef 2e       	mov	r14, r31
    7564:	f7 e0       	ldi	r31, 0x07	; 7
    7566:	ff 2e       	mov	r15, r31
    7568:	f0 e0       	ldi	r31, 0x00	; 0
    756a:	0f 2f       	mov	r16, r31
    756c:	f0 e0       	ldi	r31, 0x00	; 0
    756e:	1f 2f       	mov	r17, r31
    7570:	f0 2d       	mov	r31, r0
    7572:	0f 2e       	mov	r0, r31
    7574:	f8 e8       	ldi	r31, 0x88	; 136
    7576:	af 2e       	mov	r10, r31
    7578:	f3 e1       	ldi	r31, 0x13	; 19
    757a:	bf 2e       	mov	r11, r31
    757c:	f0 e0       	ldi	r31, 0x00	; 0
    757e:	cf 2e       	mov	r12, r31
    7580:	f0 e0       	ldi	r31, 0x00	; 0
    7582:	df 2e       	mov	r13, r31
    7584:	f0 2d       	mov	r31, r0
    7586:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <AppMap>
    758a:	0f 90       	pop	r0
    758c:	0f 90       	pop	r0
    758e:	0f 90       	pop	r0
    7590:	0f 90       	pop	r0
    7592:	dc 01       	movw	r26, r24
    7594:	cb 01       	movw	r24, r22
    7596:	90 93 ea 02 	sts	0x02EA, r25
    759a:	80 93 e9 02 	sts	0x02E9, r24
		TIMER1_voidSetChannelACompMatch(7000-LdrVal);
    759e:	20 91 e9 02 	lds	r18, 0x02E9
    75a2:	30 91 ea 02 	lds	r19, 0x02EA
    75a6:	88 e5       	ldi	r24, 0x58	; 88
    75a8:	9b e1       	ldi	r25, 0x1B	; 27
    75aa:	82 1b       	sub	r24, r18
    75ac:	93 0b       	sbc	r25, r19
    75ae:	0e 94 d1 25 	call	0x4ba2	; 0x4ba2 <TIMER1_voidSetChannelACompMatch>
	}
	if(notifyFlag2 == LM35_NOTE)
    75b2:	80 91 e8 02 	lds	r24, 0x02E8
    75b6:	81 30       	cpi	r24, 0x01	; 1
    75b8:	09 f0       	breq	.+2      	; 0x75bc <LedAdjustMotorAdjust+0xfe>
    75ba:	88 c0       	rjmp	.+272    	; 0x76cc <LedAdjustMotorAdjust+0x20e>
	{
		Lm35Val = (u16)(((u32)(ResultArr[0]*5000UL))/256UL);
    75bc:	80 91 ef 02 	lds	r24, 0x02EF
    75c0:	90 91 f0 02 	lds	r25, 0x02F0
    75c4:	cc 01       	movw	r24, r24
    75c6:	a0 e0       	ldi	r26, 0x00	; 0
    75c8:	b0 e0       	ldi	r27, 0x00	; 0
    75ca:	28 e8       	ldi	r18, 0x88	; 136
    75cc:	33 e1       	ldi	r19, 0x13	; 19
    75ce:	40 e0       	ldi	r20, 0x00	; 0
    75d0:	50 e0       	ldi	r21, 0x00	; 0
    75d2:	bc 01       	movw	r22, r24
    75d4:	cd 01       	movw	r24, r26
    75d6:	0e 94 71 3b 	call	0x76e2	; 0x76e2 <__mulsi3>
    75da:	dc 01       	movw	r26, r24
    75dc:	cb 01       	movw	r24, r22
    75de:	89 2f       	mov	r24, r25
    75e0:	9a 2f       	mov	r25, r26
    75e2:	ab 2f       	mov	r26, r27
    75e4:	bb 27       	eor	r27, r27
    75e6:	90 93 ec 02 	sts	0x02EC, r25
    75ea:	80 93 eb 02 	sts	0x02EB, r24
		Lm35Val /=10;
    75ee:	80 91 eb 02 	lds	r24, 0x02EB
    75f2:	90 91 ec 02 	lds	r25, 0x02EC
    75f6:	2a e0       	ldi	r18, 0x0A	; 10
    75f8:	30 e0       	ldi	r19, 0x00	; 0
    75fa:	b9 01       	movw	r22, r18
    75fc:	0e 94 90 3b 	call	0x7720	; 0x7720 <__udivmodhi4>
    7600:	cb 01       	movw	r24, r22
    7602:	90 93 ec 02 	sts	0x02EC, r25
    7606:	80 93 eb 02 	sts	0x02EB, r24

		Lm35Val = AppMap(27,42,0,90,Lm35Val);
    760a:	80 91 eb 02 	lds	r24, 0x02EB
    760e:	90 91 ec 02 	lds	r25, 0x02EC
    7612:	cc 01       	movw	r24, r24
    7614:	a0 e0       	ldi	r26, 0x00	; 0
    7616:	b0 e0       	ldi	r27, 0x00	; 0
    7618:	00 d0       	rcall	.+0      	; 0x761a <LedAdjustMotorAdjust+0x15c>
    761a:	00 d0       	rcall	.+0      	; 0x761c <LedAdjustMotorAdjust+0x15e>
    761c:	ed b7       	in	r30, 0x3d	; 61
    761e:	fe b7       	in	r31, 0x3e	; 62
    7620:	31 96       	adiw	r30, 0x01	; 1
    7622:	80 83       	st	Z, r24
    7624:	91 83       	std	Z+1, r25	; 0x01
    7626:	a2 83       	std	Z+2, r26	; 0x02
    7628:	b3 83       	std	Z+3, r27	; 0x03
    762a:	6b e1       	ldi	r22, 0x1B	; 27
    762c:	70 e0       	ldi	r23, 0x00	; 0
    762e:	80 e0       	ldi	r24, 0x00	; 0
    7630:	90 e0       	ldi	r25, 0x00	; 0
    7632:	2a e2       	ldi	r18, 0x2A	; 42
    7634:	30 e0       	ldi	r19, 0x00	; 0
    7636:	40 e0       	ldi	r20, 0x00	; 0
    7638:	50 e0       	ldi	r21, 0x00	; 0
    763a:	ee 24       	eor	r14, r14
    763c:	ff 24       	eor	r15, r15
    763e:	87 01       	movw	r16, r14
    7640:	0f 2e       	mov	r0, r31
    7642:	fa e5       	ldi	r31, 0x5A	; 90
    7644:	af 2e       	mov	r10, r31
    7646:	f0 e0       	ldi	r31, 0x00	; 0
    7648:	bf 2e       	mov	r11, r31
    764a:	f0 e0       	ldi	r31, 0x00	; 0
    764c:	cf 2e       	mov	r12, r31
    764e:	f0 e0       	ldi	r31, 0x00	; 0
    7650:	df 2e       	mov	r13, r31
    7652:	f0 2d       	mov	r31, r0
    7654:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <AppMap>
    7658:	0f 90       	pop	r0
    765a:	0f 90       	pop	r0
    765c:	0f 90       	pop	r0
    765e:	0f 90       	pop	r0
    7660:	dc 01       	movw	r26, r24
    7662:	cb 01       	movw	r24, r22
    7664:	90 93 ec 02 	sts	0x02EC, r25
    7668:	80 93 eb 02 	sts	0x02EB, r24
		CompPWM = (u16)((((u32)Lm35Val)*255UL)/100UL);
    766c:	80 91 eb 02 	lds	r24, 0x02EB
    7670:	90 91 ec 02 	lds	r25, 0x02EC
    7674:	cc 01       	movw	r24, r24
    7676:	a0 e0       	ldi	r26, 0x00	; 0
    7678:	b0 e0       	ldi	r27, 0x00	; 0
    767a:	2f ef       	ldi	r18, 0xFF	; 255
    767c:	30 e0       	ldi	r19, 0x00	; 0
    767e:	40 e0       	ldi	r20, 0x00	; 0
    7680:	50 e0       	ldi	r21, 0x00	; 0
    7682:	bc 01       	movw	r22, r24
    7684:	cd 01       	movw	r24, r26
    7686:	0e 94 71 3b 	call	0x76e2	; 0x76e2 <__mulsi3>
    768a:	dc 01       	movw	r26, r24
    768c:	cb 01       	movw	r24, r22
    768e:	24 e6       	ldi	r18, 0x64	; 100
    7690:	30 e0       	ldi	r19, 0x00	; 0
    7692:	40 e0       	ldi	r20, 0x00	; 0
    7694:	50 e0       	ldi	r21, 0x00	; 0
    7696:	bc 01       	movw	r22, r24
    7698:	cd 01       	movw	r24, r26
    769a:	0e 94 a4 3b 	call	0x7748	; 0x7748 <__udivmodsi4>
    769e:	da 01       	movw	r26, r20
    76a0:	c9 01       	movw	r24, r18
    76a2:	90 93 ee 02 	sts	0x02EE, r25
    76a6:	80 93 ed 02 	sts	0x02ED, r24
		CLCD_voidGoToXY(1,6);
    76aa:	81 e0       	ldi	r24, 0x01	; 1
    76ac:	66 e0       	ldi	r22, 0x06	; 6
    76ae:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <CLCD_voidGoToXY>
		if(255>CompPWM)
    76b2:	80 91 ed 02 	lds	r24, 0x02ED
    76b6:	90 91 ee 02 	lds	r25, 0x02EE
    76ba:	8f 3f       	cpi	r24, 0xFF	; 255
    76bc:	91 05       	cpc	r25, r1
    76be:	30 f4       	brcc	.+12     	; 0x76cc <LedAdjustMotorAdjust+0x20e>
			TIMER0_voidSetCompMatchValue(CompPWM);
    76c0:	80 91 ed 02 	lds	r24, 0x02ED
    76c4:	90 91 ee 02 	lds	r25, 0x02EE
    76c8:	0e 94 37 25 	call	0x4a6e	; 0x4a6e <TIMER0_voidSetCompMatchValue>

	}
}
    76cc:	cf 91       	pop	r28
    76ce:	df 91       	pop	r29
    76d0:	1f 91       	pop	r17
    76d2:	0f 91       	pop	r16
    76d4:	ff 90       	pop	r15
    76d6:	ef 90       	pop	r14
    76d8:	df 90       	pop	r13
    76da:	cf 90       	pop	r12
    76dc:	bf 90       	pop	r11
    76de:	af 90       	pop	r10
    76e0:	08 95       	ret

000076e2 <__mulsi3>:
    76e2:	62 9f       	mul	r22, r18
    76e4:	d0 01       	movw	r26, r0
    76e6:	73 9f       	mul	r23, r19
    76e8:	f0 01       	movw	r30, r0
    76ea:	82 9f       	mul	r24, r18
    76ec:	e0 0d       	add	r30, r0
    76ee:	f1 1d       	adc	r31, r1
    76f0:	64 9f       	mul	r22, r20
    76f2:	e0 0d       	add	r30, r0
    76f4:	f1 1d       	adc	r31, r1
    76f6:	92 9f       	mul	r25, r18
    76f8:	f0 0d       	add	r31, r0
    76fa:	83 9f       	mul	r24, r19
    76fc:	f0 0d       	add	r31, r0
    76fe:	74 9f       	mul	r23, r20
    7700:	f0 0d       	add	r31, r0
    7702:	65 9f       	mul	r22, r21
    7704:	f0 0d       	add	r31, r0
    7706:	99 27       	eor	r25, r25
    7708:	72 9f       	mul	r23, r18
    770a:	b0 0d       	add	r27, r0
    770c:	e1 1d       	adc	r30, r1
    770e:	f9 1f       	adc	r31, r25
    7710:	63 9f       	mul	r22, r19
    7712:	b0 0d       	add	r27, r0
    7714:	e1 1d       	adc	r30, r1
    7716:	f9 1f       	adc	r31, r25
    7718:	bd 01       	movw	r22, r26
    771a:	cf 01       	movw	r24, r30
    771c:	11 24       	eor	r1, r1
    771e:	08 95       	ret

00007720 <__udivmodhi4>:
    7720:	aa 1b       	sub	r26, r26
    7722:	bb 1b       	sub	r27, r27
    7724:	51 e1       	ldi	r21, 0x11	; 17
    7726:	07 c0       	rjmp	.+14     	; 0x7736 <__udivmodhi4_ep>

00007728 <__udivmodhi4_loop>:
    7728:	aa 1f       	adc	r26, r26
    772a:	bb 1f       	adc	r27, r27
    772c:	a6 17       	cp	r26, r22
    772e:	b7 07       	cpc	r27, r23
    7730:	10 f0       	brcs	.+4      	; 0x7736 <__udivmodhi4_ep>
    7732:	a6 1b       	sub	r26, r22
    7734:	b7 0b       	sbc	r27, r23

00007736 <__udivmodhi4_ep>:
    7736:	88 1f       	adc	r24, r24
    7738:	99 1f       	adc	r25, r25
    773a:	5a 95       	dec	r21
    773c:	a9 f7       	brne	.-22     	; 0x7728 <__udivmodhi4_loop>
    773e:	80 95       	com	r24
    7740:	90 95       	com	r25
    7742:	bc 01       	movw	r22, r24
    7744:	cd 01       	movw	r24, r26
    7746:	08 95       	ret

00007748 <__udivmodsi4>:
    7748:	a1 e2       	ldi	r26, 0x21	; 33
    774a:	1a 2e       	mov	r1, r26
    774c:	aa 1b       	sub	r26, r26
    774e:	bb 1b       	sub	r27, r27
    7750:	fd 01       	movw	r30, r26
    7752:	0d c0       	rjmp	.+26     	; 0x776e <__udivmodsi4_ep>

00007754 <__udivmodsi4_loop>:
    7754:	aa 1f       	adc	r26, r26
    7756:	bb 1f       	adc	r27, r27
    7758:	ee 1f       	adc	r30, r30
    775a:	ff 1f       	adc	r31, r31
    775c:	a2 17       	cp	r26, r18
    775e:	b3 07       	cpc	r27, r19
    7760:	e4 07       	cpc	r30, r20
    7762:	f5 07       	cpc	r31, r21
    7764:	20 f0       	brcs	.+8      	; 0x776e <__udivmodsi4_ep>
    7766:	a2 1b       	sub	r26, r18
    7768:	b3 0b       	sbc	r27, r19
    776a:	e4 0b       	sbc	r30, r20
    776c:	f5 0b       	sbc	r31, r21

0000776e <__udivmodsi4_ep>:
    776e:	66 1f       	adc	r22, r22
    7770:	77 1f       	adc	r23, r23
    7772:	88 1f       	adc	r24, r24
    7774:	99 1f       	adc	r25, r25
    7776:	1a 94       	dec	r1
    7778:	69 f7       	brne	.-38     	; 0x7754 <__udivmodsi4_loop>
    777a:	60 95       	com	r22
    777c:	70 95       	com	r23
    777e:	80 95       	com	r24
    7780:	90 95       	com	r25
    7782:	9b 01       	movw	r18, r22
    7784:	ac 01       	movw	r20, r24
    7786:	bd 01       	movw	r22, r26
    7788:	cf 01       	movw	r24, r30
    778a:	08 95       	ret

0000778c <__prologue_saves__>:
    778c:	2f 92       	push	r2
    778e:	3f 92       	push	r3
    7790:	4f 92       	push	r4
    7792:	5f 92       	push	r5
    7794:	6f 92       	push	r6
    7796:	7f 92       	push	r7
    7798:	8f 92       	push	r8
    779a:	9f 92       	push	r9
    779c:	af 92       	push	r10
    779e:	bf 92       	push	r11
    77a0:	cf 92       	push	r12
    77a2:	df 92       	push	r13
    77a4:	ef 92       	push	r14
    77a6:	ff 92       	push	r15
    77a8:	0f 93       	push	r16
    77aa:	1f 93       	push	r17
    77ac:	cf 93       	push	r28
    77ae:	df 93       	push	r29
    77b0:	cd b7       	in	r28, 0x3d	; 61
    77b2:	de b7       	in	r29, 0x3e	; 62
    77b4:	ca 1b       	sub	r28, r26
    77b6:	db 0b       	sbc	r29, r27
    77b8:	0f b6       	in	r0, 0x3f	; 63
    77ba:	f8 94       	cli
    77bc:	de bf       	out	0x3e, r29	; 62
    77be:	0f be       	out	0x3f, r0	; 63
    77c0:	cd bf       	out	0x3d, r28	; 61
    77c2:	09 94       	ijmp

000077c4 <__epilogue_restores__>:
    77c4:	2a 88       	ldd	r2, Y+18	; 0x12
    77c6:	39 88       	ldd	r3, Y+17	; 0x11
    77c8:	48 88       	ldd	r4, Y+16	; 0x10
    77ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    77cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    77ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    77d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    77d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    77d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    77d6:	b9 84       	ldd	r11, Y+9	; 0x09
    77d8:	c8 84       	ldd	r12, Y+8	; 0x08
    77da:	df 80       	ldd	r13, Y+7	; 0x07
    77dc:	ee 80       	ldd	r14, Y+6	; 0x06
    77de:	fd 80       	ldd	r15, Y+5	; 0x05
    77e0:	0c 81       	ldd	r16, Y+4	; 0x04
    77e2:	1b 81       	ldd	r17, Y+3	; 0x03
    77e4:	aa 81       	ldd	r26, Y+2	; 0x02
    77e6:	b9 81       	ldd	r27, Y+1	; 0x01
    77e8:	ce 0f       	add	r28, r30
    77ea:	d1 1d       	adc	r29, r1
    77ec:	0f b6       	in	r0, 0x3f	; 63
    77ee:	f8 94       	cli
    77f0:	de bf       	out	0x3e, r29	; 62
    77f2:	0f be       	out	0x3f, r0	; 63
    77f4:	cd bf       	out	0x3d, r28	; 61
    77f6:	ed 01       	movw	r28, r26
    77f8:	08 95       	ret

000077fa <_exit>:
    77fa:	f8 94       	cli

000077fc <__stop_program>:
    77fc:	ff cf       	rjmp	.-2      	; 0x77fc <__stop_program>
