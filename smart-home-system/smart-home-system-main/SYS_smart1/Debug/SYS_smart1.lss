
SYS_smart1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d2  00800060  000035b4  00003648  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800132  00800132  0000371a  2**0
                  ALLOC
  3 .stab         0000333c  00000000  00000000  0000371c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001167  00000000  00000000  00006a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007bbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007cff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a9a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b750  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b8b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bb3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c30b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 69 07 	jmp	0xed2	; 0xed2 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 eb       	ldi	r30, 0xB4	; 180
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 33       	cpi	r26, 0x32	; 50
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e3       	ldi	r26, 0x32	; 50
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 34       	cpi	r26, 0x43	; 67
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ca 11 	call	0x2394	; 0x2394 <main>
      8a:	0c 94 d8 1a 	jmp	0x35b0	; 0x35b0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a1 1a 	jmp	0x3542	; 0x3542 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e1       	ldi	r26, 0x10	; 16
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ad 1a 	jmp	0x355a	; 0x355a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c9 1a 	jmp	0x3592	; 0x3592 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ad 1a 	jmp	0x355a	; 0x355a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c9 1a 	jmp	0x3592	; 0x3592 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a1 1a 	jmp	0x3542	; 0x3542 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e1       	ldi	r24, 0x10	; 16
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ad 1a 	jmp	0x355a	; 0x355a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c9 1a 	jmp	0x3592	; 0x3592 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ad 1a 	jmp	0x355a	; 0x355a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c9 1a 	jmp	0x3592	; 0x3592 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ad 1a 	jmp	0x355a	; 0x355a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c9 1a 	jmp	0x3592	; 0x3592 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 cd 1a 	jmp	0x359a	; 0x359a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:

u8 ADC_u8SourceOfConv;
/*busy flag states*/
u8 ADC_u8BusyState = IDLE;
void ADC_voidInit()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*set bit ADC reference*///
#if ADC_INITAL_REF	== AREF
	CLR_BIT(ADMUX,ADMUX_REFS1);
	CLR_BIT(ADMUX,ADMUX_REFS0);
#elif	ADC_INITAL_REF	== AVCC
	CLR_BIT(ADMUX,ADMUX_REFS1);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 77       	andi	r24, 0x7F	; 127
     b5a:	8c 93       	st	X, r24
	SET_BIT(ADMUX,ADMUX_REFS0);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 5c       	subi	r24, 0xC0	; 192
     b68:	8c 93       	st	X, r24

	/*set bit ADC Adjust data*/
#if	ADC_ADJUST_DATA == Right_adjust
	CLR_BIT(ADMUX,ADMUX_ADLAR);
#elif	ADC_ADJUST_DATA == left_adjust
	SET_BIT(ADMUX,ADMUX_ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 5e       	subi	r24, 0xE0	; 224
     b76:	8c 93       	st	X, r24
#else
#error "wrong in Choosing configuration of ADC Data Register "
#endif

	/*Prescaler Selection ADPS By Masking Value */
	ADCSRA&=ADCSRA_MASK;
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	88 7f       	andi	r24, 0xF8	; 248
     b84:	8c 93       	st	X, r24
	ADCSRA|=ADC_DIV_FACTOR;
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	87 60       	ori	r24, 0x07	; 7
     b92:	8c 93       	st	X, r24
	/*Enable ADC */
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	80 58       	subi	r24, 0x80	; 128
     ba0:	8c 93       	st	X, r24
	/*the Auto Trigger source is selected By setting ADCS 3-Bit*/
	SET_BIT(ADCSRA,ADCSRA_ADIE);
#endif


}
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	08 95       	ret

00000ba8 <ADC_u8StartConversionSynch>:
/*convert output Values to voltage Values*/
u8 ADC_u8StartConversionSynch(u8 Copy_u8Channel,u16 *Copy_u16ChannelReading)
{
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	28 97       	sbiw	r28, 0x08	; 8
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	f8 94       	cli
     bb6:	de bf       	out	0x3e, r29	; 62
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	cd bf       	out	0x3d, r28	; 61
     bbc:	8e 83       	std	Y+6, r24	; 0x06
     bbe:	78 87       	std	Y+8, r23	; 0x08
     bc0:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState=OK;
     bc2:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Counter=0;
     bc4:	19 82       	std	Y+1, r1	; 0x01
     bc6:	1a 82       	std	Y+2, r1	; 0x02
     bc8:	1b 82       	std	Y+3, r1	; 0x03
     bca:	1c 82       	std	Y+4, r1	; 0x04
	if(ADC_u8BusyState==IDLE){
     bcc:	80 91 3a 01 	lds	r24, 0x013A
     bd0:	88 23       	and	r24, r24
     bd2:	09 f0       	breq	.+2      	; 0xbd6 <ADC_u8StartConversionSynch+0x2e>
     bd4:	5e c0       	rjmp	.+188    	; 0xc92 <ADC_u8StartConversionSynch+0xea>
		ADC_u8BusyState = Busy;
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	80 93 3a 01 	sts	0x013A, r24
		if (ADC_AUTO_TRIGGER==Disable)	//( single conversion )
		{
			/*set the required channel in ADMUX register */

			ADMUX&=ADMUX_MASK;
     bdc:	a7 e2       	ldi	r26, 0x27	; 39
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e7 e2       	ldi	r30, 0x27	; 39
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	80 7e       	andi	r24, 0xE0	; 224
     be8:	8c 93       	st	X, r24
			ADMUX|=Copy_u8Channel;
     bea:	a7 e2       	ldi	r26, 0x27	; 39
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e7 e2       	ldi	r30, 0x27	; 39
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	90 81       	ld	r25, Z
     bf4:	8e 81       	ldd	r24, Y+6	; 0x06
     bf6:	89 2b       	or	r24, r25
     bf8:	8c 93       	st	X, r24
			/*START conversion */
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     bfa:	a6 e2       	ldi	r26, 0x26	; 38
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	e6 e2       	ldi	r30, 0x26	; 38
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	80 5c       	subi	r24, 0xC0	; 192
     c06:	8c 93       	st	X, r24
     c08:	0b c0       	rjmp	.+22     	; 0xc20 <ADC_u8StartConversionSynch+0x78>
			/*Polling (busy waiting) until the conversion complete flag is set or Counter reaches timeout Value*/
			while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0)&&(Local_u32Counter!=ADC_U32TIMEOUT))
			{
				Local_u32Counter++;
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	9a 81       	ldd	r25, Y+2	; 0x02
     c0e:	ab 81       	ldd	r26, Y+3	; 0x03
     c10:	bc 81       	ldd	r27, Y+4	; 0x04
     c12:	01 96       	adiw	r24, 0x01	; 1
     c14:	a1 1d       	adc	r26, r1
     c16:	b1 1d       	adc	r27, r1
     c18:	89 83       	std	Y+1, r24	; 0x01
     c1a:	9a 83       	std	Y+2, r25	; 0x02
     c1c:	ab 83       	std	Y+3, r26	; 0x03
     c1e:	bc 83       	std	Y+4, r27	; 0x04
			ADMUX&=ADMUX_MASK;
			ADMUX|=Copy_u8Channel;
			/*START conversion */
			SET_BIT(ADCSRA,ADCSRA_ADSC);
			/*Polling (busy waiting) until the conversion complete flag is set or Counter reaches timeout Value*/
			while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0)&&(Local_u32Counter!=ADC_U32TIMEOUT))
     c20:	e6 e2       	ldi	r30, 0x26	; 38
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	82 95       	swap	r24
     c28:	8f 70       	andi	r24, 0x0F	; 15
     c2a:	88 2f       	mov	r24, r24
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	81 70       	andi	r24, 0x01	; 1
     c30:	90 70       	andi	r25, 0x00	; 0
     c32:	00 97       	sbiw	r24, 0x00	; 0
     c34:	61 f4       	brne	.+24     	; 0xc4e <ADC_u8StartConversionSynch+0xa6>
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	9a 81       	ldd	r25, Y+2	; 0x02
     c3a:	ab 81       	ldd	r26, Y+3	; 0x03
     c3c:	bc 81       	ldd	r27, Y+4	; 0x04
     c3e:	80 35       	cpi	r24, 0x50	; 80
     c40:	23 ec       	ldi	r18, 0xC3	; 195
     c42:	92 07       	cpc	r25, r18
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	a2 07       	cpc	r26, r18
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	b2 07       	cpc	r27, r18
     c4c:	f1 f6       	brne	.-68     	; 0xc0a <ADC_u8StartConversionSynch+0x62>
			{
				Local_u32Counter++;
			}
			if(Local_u32Counter==ADC_U32TIMEOUT)
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	9a 81       	ldd	r25, Y+2	; 0x02
     c52:	ab 81       	ldd	r26, Y+3	; 0x03
     c54:	bc 81       	ldd	r27, Y+4	; 0x04
     c56:	80 35       	cpi	r24, 0x50	; 80
     c58:	23 ec       	ldi	r18, 0xC3	; 195
     c5a:	92 07       	cpc	r25, r18
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	a2 07       	cpc	r26, r18
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	b2 07       	cpc	r27, r18
     c64:	19 f4       	brne	.+6      	; 0xc6c <ADC_u8StartConversionSynch+0xc4>
			{
				// loop is Broken as Time out
				Local_u8ErrorState=NOTOK;
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	8d 83       	std	Y+5, r24	; 0x05
     c6a:	15 c0       	rjmp	.+42     	; 0xc96 <ADC_u8StartConversionSynch+0xee>
			}
			else
			{
				// Raising the conversion complete flag
				/*clear ADC Flag */
				CLR_BIT(ADCSRA,ADCSRA_ADIF);
     c6c:	a6 e2       	ldi	r26, 0x26	; 38
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	e6 e2       	ldi	r30, 0x26	; 38
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	8f 7e       	andi	r24, 0xEF	; 239
     c78:	8c 93       	st	X, r24
				/* ADC reading from data register */
				if	(ADC_ADJUST_DATA == Right_adjust)
					*Copy_u16ChannelReading= ADC_DATA_REG;
				else if	(ADC_ADJUST_DATA == left_adjust)
					*Copy_u16ChannelReading = ADCH;
     c7a:	e5 e2       	ldi	r30, 0x25	; 37
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	88 2f       	mov	r24, r24
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	ef 81       	ldd	r30, Y+7	; 0x07
     c86:	f8 85       	ldd	r31, Y+8	; 0x08
     c88:	91 83       	std	Z+1, r25	; 0x01
     c8a:	80 83       	st	Z, r24
				ADC_u8BusyState = IDLE;
     c8c:	10 92 3a 01 	sts	0x013A, r1
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <ADC_u8StartConversionSynch+0xee>
		}
		else
			Local_u8ErrorState = NOTOK;
	}
	else {
		Local_u8ErrorState = BUSY_FUNC;
     c92:	83 e0       	ldi	r24, 0x03	; 3
     c94:	8d 83       	std	Y+5, r24	; 0x05
	}
	return Local_u8ErrorState;
     c96:	8d 81       	ldd	r24, Y+5	; 0x05
}
     c98:	28 96       	adiw	r28, 0x08	; 8
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	cf 91       	pop	r28
     ca6:	df 91       	pop	r29
     ca8:	08 95       	ret

00000caa <ADC_u8StartConversionAsynch>:


u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel,u16 *Copy_u16ChannelReading,void (*Copy_vpNotifictionFunc)())
{
     caa:	df 93       	push	r29
     cac:	cf 93       	push	r28
     cae:	00 d0       	rcall	.+0      	; 0xcb0 <ADC_u8StartConversionAsynch+0x6>
     cb0:	00 d0       	rcall	.+0      	; 0xcb2 <ADC_u8StartConversionAsynch+0x8>
     cb2:	00 d0       	rcall	.+0      	; 0xcb4 <ADC_u8StartConversionAsynch+0xa>
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
     cb8:	8a 83       	std	Y+2, r24	; 0x02
     cba:	7c 83       	std	Y+4, r23	; 0x04
     cbc:	6b 83       	std	Y+3, r22	; 0x03
     cbe:	5e 83       	std	Y+6, r21	; 0x06
     cc0:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState=OK;
     cc2:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8BusyState==IDLE){
     cc4:	80 91 3a 01 	lds	r24, 0x013A
     cc8:	88 23       	and	r24, r24
     cca:	d1 f5       	brne	.+116    	; 0xd40 <ADC_u8StartConversionAsynch+0x96>
		if((Copy_vpNotifictionFunc == NULL)||(Copy_u16ChannelReading == NULL))
     ccc:	8d 81       	ldd	r24, Y+5	; 0x05
     cce:	9e 81       	ldd	r25, Y+6	; 0x06
     cd0:	00 97       	sbiw	r24, 0x00	; 0
     cd2:	21 f0       	breq	.+8      	; 0xcdc <ADC_u8StartConversionAsynch+0x32>
     cd4:	8b 81       	ldd	r24, Y+3	; 0x03
     cd6:	9c 81       	ldd	r25, Y+4	; 0x04
     cd8:	00 97       	sbiw	r24, 0x00	; 0
     cda:	19 f4       	brne	.+6      	; 0xce2 <ADC_u8StartConversionAsynch+0x38>
		{
			Local_u8ErrorState = NULL_POINTER;
     cdc:	82 e0       	ldi	r24, 0x02	; 2
     cde:	89 83       	std	Y+1, r24	; 0x01
     ce0:	31 c0       	rjmp	.+98     	; 0xd44 <ADC_u8StartConversionAsynch+0x9a>
		}
		else {
			ADC_u8SourceOfConv=SINGLE_CHANNEL_ASYNCH;
     ce2:	10 92 3d 01 	sts	0x013D, r1
			ADC_u8BusyState = Busy;
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	80 93 3a 01 	sts	0x013A, r24
			/*Set Call Back function with the received Notification function*/
			ADC_voidCallBackNotificationFunc = Copy_vpNotifictionFunc;
     cec:	8d 81       	ldd	r24, Y+5	; 0x05
     cee:	9e 81       	ldd	r25, Y+6	; 0x06
     cf0:	90 93 33 01 	sts	0x0133, r25
     cf4:	80 93 32 01 	sts	0x0132, r24
			/* initialize Local Reading argument with global one  */
			Global_u16GetChannelReading = Copy_u16ChannelReading;
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	9c 81       	ldd	r25, Y+4	; 0x04
     cfc:	90 93 35 01 	sts	0x0135, r25
     d00:	80 93 34 01 	sts	0x0134, r24
			/*set the required channel in ADMUX register */
			ADMUX&=ADMUX_MASK;
     d04:	a7 e2       	ldi	r26, 0x27	; 39
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	e7 e2       	ldi	r30, 0x27	; 39
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	80 7e       	andi	r24, 0xE0	; 224
     d10:	8c 93       	st	X, r24
			ADMUX|=Copy_u8Channel;
     d12:	a7 e2       	ldi	r26, 0x27	; 39
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	e7 e2       	ldi	r30, 0x27	; 39
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	90 81       	ld	r25, Z
     d1c:	8a 81       	ldd	r24, Y+2	; 0x02
     d1e:	89 2b       	or	r24, r25
     d20:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     d22:	a6 e2       	ldi	r26, 0x26	; 38
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e6 e2       	ldi	r30, 0x26	; 38
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	80 5c       	subi	r24, 0xC0	; 192
     d2e:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     d30:	a6 e2       	ldi	r26, 0x26	; 38
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	e6 e2       	ldi	r30, 0x26	; 38
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	88 5f       	subi	r24, 0xF8	; 248
     d3c:	8c 93       	st	X, r24
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <ADC_u8StartConversionAsynch+0x9a>
			}
	}
	else
	{
		Local_u8ErrorState = BUSY_FUNC;
     d40:	83 e0       	ldi	r24, 0x03	; 3
     d42:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     d44:	89 81       	ldd	r24, Y+1	; 0x01
}
     d46:	26 96       	adiw	r28, 0x06	; 6
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	cf 91       	pop	r28
     d54:	df 91       	pop	r29
     d56:	08 95       	ret

00000d58 <ADC_u8StartChainConvertionSynch>:
/*/* chick ADC_u8StartChainConvertionSynch */
u8 ADC_u8StartChainConvertionSynch(Chain_t* Copy_chain)
{
     d58:	df 93       	push	r29
     d5a:	cf 93       	push	r28
     d5c:	00 d0       	rcall	.+0      	; 0xd5e <ADC_u8StartChainConvertionSynch+0x6>
     d5e:	00 d0       	rcall	.+0      	; 0xd60 <ADC_u8StartChainConvertionSynch+0x8>
     d60:	cd b7       	in	r28, 0x3d	; 61
     d62:	de b7       	in	r29, 0x3e	; 62
     d64:	9c 83       	std	Y+4, r25	; 0x04
     d66:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState=OK;
     d68:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Counter;
	if(Copy_chain->Notifiction!=NULL)
     d6a:	eb 81       	ldd	r30, Y+3	; 0x03
     d6c:	fc 81       	ldd	r31, Y+4	; 0x04
     d6e:	85 81       	ldd	r24, Z+5	; 0x05
     d70:	96 81       	ldd	r25, Z+6	; 0x06
     d72:	00 97       	sbiw	r24, 0x00	; 0
     d74:	a9 f1       	breq	.+106    	; 0xde0 <ADC_u8StartChainConvertionSynch+0x88>
	{
		if(ADC_u8BusyState==IDLE)
     d76:	80 91 3a 01 	lds	r24, 0x013A
     d7a:	88 23       	and	r24, r24
     d7c:	71 f5       	brne	.+92     	; 0xdda <ADC_u8StartChainConvertionSynch+0x82>
		{
			for(Local_u8Counter=0;Local_u8Counter<Copy_chain->size;Local_u8Counter++)
     d7e:	19 82       	std	Y+1, r1	; 0x01
     d80:	1d c0       	rjmp	.+58     	; 0xdbc <ADC_u8StartChainConvertionSynch+0x64>
			{
				ADC_u8StartConversionSynch(Copy_chain->ChannelID[Local_u8Counter],(Copy_chain->result+Local_u8Counter));
     d82:	eb 81       	ldd	r30, Y+3	; 0x03
     d84:	fc 81       	ldd	r31, Y+4	; 0x04
     d86:	20 81       	ld	r18, Z
     d88:	31 81       	ldd	r19, Z+1	; 0x01
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	88 2f       	mov	r24, r24
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	f9 01       	movw	r30, r18
     d92:	e8 0f       	add	r30, r24
     d94:	f9 1f       	adc	r31, r25
     d96:	40 81       	ld	r20, Z
     d98:	eb 81       	ldd	r30, Y+3	; 0x03
     d9a:	fc 81       	ldd	r31, Y+4	; 0x04
     d9c:	23 81       	ldd	r18, Z+3	; 0x03
     d9e:	34 81       	ldd	r19, Z+4	; 0x04
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	88 2f       	mov	r24, r24
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	28 0f       	add	r18, r24
     dac:	39 1f       	adc	r19, r25
     dae:	84 2f       	mov	r24, r20
     db0:	b9 01       	movw	r22, r18
     db2:	0e 94 d4 05 	call	0xba8	; 0xba8 <ADC_u8StartConversionSynch>
	u8 Local_u8Counter;
	if(Copy_chain->Notifiction!=NULL)
	{
		if(ADC_u8BusyState==IDLE)
		{
			for(Local_u8Counter=0;Local_u8Counter<Copy_chain->size;Local_u8Counter++)
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	8f 5f       	subi	r24, 0xFF	; 255
     dba:	89 83       	std	Y+1, r24	; 0x01
     dbc:	eb 81       	ldd	r30, Y+3	; 0x03
     dbe:	fc 81       	ldd	r31, Y+4	; 0x04
     dc0:	92 81       	ldd	r25, Z+2	; 0x02
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	89 17       	cp	r24, r25
     dc6:	e8 f2       	brcs	.-70     	; 0xd82 <ADC_u8StartChainConvertionSynch+0x2a>
			{
				ADC_u8StartConversionSynch(Copy_chain->ChannelID[Local_u8Counter],(Copy_chain->result+Local_u8Counter));
			}
			Copy_chain->Notifiction();
     dc8:	eb 81       	ldd	r30, Y+3	; 0x03
     dca:	fc 81       	ldd	r31, Y+4	; 0x04
     dcc:	05 80       	ldd	r0, Z+5	; 0x05
     dce:	f6 81       	ldd	r31, Z+6	; 0x06
     dd0:	e0 2d       	mov	r30, r0
     dd2:	09 95       	icall
			ADC_u8BusyState=IDLE;
     dd4:	10 92 3a 01 	sts	0x013A, r1
     dd8:	05 c0       	rjmp	.+10     	; 0xde4 <ADC_u8StartChainConvertionSynch+0x8c>
		}
		else
			Local_u8ErrorState=BUSY_FUNC;
     dda:	83 e0       	ldi	r24, 0x03	; 3
     ddc:	8a 83       	std	Y+2, r24	; 0x02
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <ADC_u8StartChainConvertionSynch+0x8c>
	}
	else
		Local_u8ErrorState=NULL_POINTER;
     de0:	82 e0       	ldi	r24, 0x02	; 2
     de2:	8a 83       	std	Y+2, r24	; 0x02
	return  Local_u8ErrorState;
     de4:	8a 81       	ldd	r24, Y+2	; 0x02
}
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
     dee:	cf 91       	pop	r28
     df0:	df 91       	pop	r29
     df2:	08 95       	ret

00000df4 <ADC_u8StartChainConvertionAsynch>:
u8 ADC_u8StartChainConvertionAsynch(Chain_t* Copy_chain)
{
     df4:	df 93       	push	r29
     df6:	cf 93       	push	r28
     df8:	00 d0       	rcall	.+0      	; 0xdfa <ADC_u8StartChainConvertionAsynch+0x6>
     dfa:	0f 92       	push	r0
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	9b 83       	std	Y+3, r25	; 0x03
     e02:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     e04:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_chain->Notifiction!=NULL)
     e06:	ea 81       	ldd	r30, Y+2	; 0x02
     e08:	fb 81       	ldd	r31, Y+3	; 0x03
     e0a:	85 81       	ldd	r24, Z+5	; 0x05
     e0c:	96 81       	ldd	r25, Z+6	; 0x06
     e0e:	00 97       	sbiw	r24, 0x00	; 0
     e10:	09 f4       	brne	.+2      	; 0xe14 <ADC_u8StartChainConvertionAsynch+0x20>
     e12:	56 c0       	rjmp	.+172    	; 0xec0 <ADC_u8StartChainConvertionAsynch+0xcc>
	{
		if(ADC_u8BusyState==IDLE)
     e14:	80 91 3a 01 	lds	r24, 0x013A
     e18:	88 23       	and	r24, r24
     e1a:	09 f0       	breq	.+2      	; 0xe1e <ADC_u8StartChainConvertionAsynch+0x2a>
     e1c:	4e c0       	rjmp	.+156    	; 0xeba <ADC_u8StartChainConvertionAsynch+0xc6>
		{
			/*make source of conversion CHAIN_CHANNEL_ASYNCH*/
			ADC_u8SourceOfConv=CHAIN_CHANNEL_ASYNCH;
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	80 93 3d 01 	sts	0x013D, r24
			ADC_u8BusyState=Busy;
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	80 93 3a 01 	sts	0x013A, r24
			/*Set Call Back function with the received Notification function*/
			ADC_voidCallBackNotificationFunc = Copy_chain->Notifiction;
     e2a:	ea 81       	ldd	r30, Y+2	; 0x02
     e2c:	fb 81       	ldd	r31, Y+3	; 0x03
     e2e:	85 81       	ldd	r24, Z+5	; 0x05
     e30:	96 81       	ldd	r25, Z+6	; 0x06
     e32:	90 93 33 01 	sts	0x0133, r25
     e36:	80 93 32 01 	sts	0x0132, r24
			/* initialize Local channel argument with global one  */
			Global_pu8ChainChannelArr = Copy_chain->ChannelID;
     e3a:	ea 81       	ldd	r30, Y+2	; 0x02
     e3c:	fb 81       	ldd	r31, Y+3	; 0x03
     e3e:	80 81       	ld	r24, Z
     e40:	91 81       	ldd	r25, Z+1	; 0x01
     e42:	90 93 37 01 	sts	0x0137, r25
     e46:	80 93 36 01 	sts	0x0136, r24
			/* initialize Local chain size argument with global one  */
			Global_pu8ChainSize = Copy_chain->size;
     e4a:	ea 81       	ldd	r30, Y+2	; 0x02
     e4c:	fb 81       	ldd	r31, Y+3	; 0x03
     e4e:	82 81       	ldd	r24, Z+2	; 0x02
     e50:	80 93 38 01 	sts	0x0138, r24
			/* initialize Local chain index with global one  */
			Global_u8ChannelIdx = 0;
     e54:	10 92 39 01 	sts	0x0139, r1
			/* initialize Local chain result with global one  */
			Global_u16GetChannelReading=Copy_chain->result;
     e58:	ea 81       	ldd	r30, Y+2	; 0x02
     e5a:	fb 81       	ldd	r31, Y+3	; 0x03
     e5c:	83 81       	ldd	r24, Z+3	; 0x03
     e5e:	94 81       	ldd	r25, Z+4	; 0x04
     e60:	90 93 35 01 	sts	0x0135, r25
     e64:	80 93 34 01 	sts	0x0134, r24

			ADMUX&=ADMUX_MASK;
     e68:	a7 e2       	ldi	r26, 0x27	; 39
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e7 e2       	ldi	r30, 0x27	; 39
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	80 7e       	andi	r24, 0xE0	; 224
     e74:	8c 93       	st	X, r24
			ADMUX|=Copy_chain->ChannelID[Global_u8ChannelIdx];
     e76:	a7 e2       	ldi	r26, 0x27	; 39
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e7 e2       	ldi	r30, 0x27	; 39
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	40 81       	ld	r20, Z
     e80:	ea 81       	ldd	r30, Y+2	; 0x02
     e82:	fb 81       	ldd	r31, Y+3	; 0x03
     e84:	20 81       	ld	r18, Z
     e86:	31 81       	ldd	r19, Z+1	; 0x01
     e88:	80 91 39 01 	lds	r24, 0x0139
     e8c:	88 2f       	mov	r24, r24
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	f9 01       	movw	r30, r18
     e92:	e8 0f       	add	r30, r24
     e94:	f9 1f       	adc	r31, r25
     e96:	80 81       	ld	r24, Z
     e98:	84 2b       	or	r24, r20
     e9a:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     e9c:	a6 e2       	ldi	r26, 0x26	; 38
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e6 e2       	ldi	r30, 0x26	; 38
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	80 5c       	subi	r24, 0xC0	; 192
     ea8:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     eaa:	a6 e2       	ldi	r26, 0x26	; 38
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e6 e2       	ldi	r30, 0x26	; 38
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	88 5f       	subi	r24, 0xF8	; 248
     eb6:	8c 93       	st	X, r24
     eb8:	05 c0       	rjmp	.+10     	; 0xec4 <ADC_u8StartChainConvertionAsynch+0xd0>
		}
		else
			Local_u8ErrorState=BUSY_FUNC;
     eba:	83 e0       	ldi	r24, 0x03	; 3
     ebc:	89 83       	std	Y+1, r24	; 0x01
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <ADC_u8StartChainConvertionAsynch+0xd0>
	}
	else
		Local_u8ErrorState=NULL_POINTER;
     ec0:	82 e0       	ldi	r24, 0x02	; 2
     ec2:	89 83       	std	Y+1, r24	; 0x01

	return  Local_u8ErrorState;
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
}
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	cf 91       	pop	r28
     ece:	df 91       	pop	r29
     ed0:	08 95       	ret

00000ed2 <__vector_16>:

void __vector_16 (void)	__attribute__((signal));
void __vector_16 (void)
{
     ed2:	1f 92       	push	r1
     ed4:	0f 92       	push	r0
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	0f 92       	push	r0
     eda:	11 24       	eor	r1, r1
     edc:	2f 93       	push	r18
     ede:	3f 93       	push	r19
     ee0:	4f 93       	push	r20
     ee2:	5f 93       	push	r21
     ee4:	6f 93       	push	r22
     ee6:	7f 93       	push	r23
     ee8:	8f 93       	push	r24
     eea:	9f 93       	push	r25
     eec:	af 93       	push	r26
     eee:	bf 93       	push	r27
     ef0:	ef 93       	push	r30
     ef2:	ff 93       	push	r31
     ef4:	df 93       	push	r29
     ef6:	cf 93       	push	r28
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8SourceOfConv==0){
     efc:	80 91 3d 01 	lds	r24, 0x013D
     f00:	88 23       	and	r24, r24
     f02:	d1 f4       	brne	.+52     	; 0xf38 <__vector_16+0x66>
		/* ADC reading from data register */
		if	(ADC_ADJUST_DATA == Right_adjust)
			*Global_u16GetChannelReading = ADC_DATA_REG;
		else if	(ADC_ADJUST_DATA == left_adjust)
			*Global_u16GetChannelReading = ADCH;
     f04:	a0 91 34 01 	lds	r26, 0x0134
     f08:	b0 91 35 01 	lds	r27, 0x0135
     f0c:	e5 e2       	ldi	r30, 0x25	; 37
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	88 2f       	mov	r24, r24
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	8d 93       	st	X+, r24
     f18:	9c 93       	st	X, r25
		/* ADC basy state IDLE as Conversion is finished*/
		ADC_u8BusyState = IDLE;
     f1a:	10 92 3a 01 	sts	0x013A, r1
		/* call Notification function */
		ADC_voidCallBackNotificationFunc();
     f1e:	e0 91 32 01 	lds	r30, 0x0132
     f22:	f0 91 33 01 	lds	r31, 0x0133
     f26:	09 95       	icall
		/* Disable ADC Interrupt Enable */
		CLR_BIT(ADCSRA,ADCSRA_ADIE);
     f28:	a6 e2       	ldi	r26, 0x26	; 38
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e6 e2       	ldi	r30, 0x26	; 38
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	87 7f       	andi	r24, 0xF7	; 247
     f34:	8c 93       	st	X, r24
     f36:	55 c0       	rjmp	.+170    	; 0xfe2 <__vector_16+0x110>
	}
	else if(ADC_u8SourceOfConv==1){
     f38:	80 91 3d 01 	lds	r24, 0x013D
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	09 f0       	breq	.+2      	; 0xf42 <__vector_16+0x70>
     f40:	50 c0       	rjmp	.+160    	; 0xfe2 <__vector_16+0x110>
		if	(ADC_ADJUST_DATA == Right_adjust)
			Global_u16GetChannelReading[Global_u8ChannelIdx] = ADC_DATA_REG;
		else if	(ADC_ADJUST_DATA == left_adjust)
			Global_u16GetChannelReading[Global_u8ChannelIdx] = ADCH;
     f42:	20 91 34 01 	lds	r18, 0x0134
     f46:	30 91 35 01 	lds	r19, 0x0135
     f4a:	80 91 39 01 	lds	r24, 0x0139
     f4e:	88 2f       	mov	r24, r24
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	d9 01       	movw	r26, r18
     f58:	a8 0f       	add	r26, r24
     f5a:	b9 1f       	adc	r27, r25
     f5c:	e5 e2       	ldi	r30, 0x25	; 37
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	11 96       	adiw	r26, 0x01	; 1
     f68:	9c 93       	st	X, r25
     f6a:	8e 93       	st	-X, r24
		Global_u8ChannelIdx++;
     f6c:	80 91 39 01 	lds	r24, 0x0139
     f70:	8f 5f       	subi	r24, 0xFF	; 255
     f72:	80 93 39 01 	sts	0x0139, r24
		if(Global_u8ChannelIdx==Global_pu8ChainSize)
     f76:	90 91 39 01 	lds	r25, 0x0139
     f7a:	80 91 38 01 	lds	r24, 0x0138
     f7e:	98 17       	cp	r25, r24
     f80:	79 f4       	brne	.+30     	; 0xfa0 <__vector_16+0xce>
		{
			/* ADC basy state IDLE as Conversion is finished*/
			ADC_u8BusyState = IDLE;
     f82:	10 92 3a 01 	sts	0x013A, r1
			/* call Notification function */
			ADC_voidCallBackNotificationFunc();
     f86:	e0 91 32 01 	lds	r30, 0x0132
     f8a:	f0 91 33 01 	lds	r31, 0x0133
     f8e:	09 95       	icall
			/* Disable ADC Interrupt Enable */
			CLR_BIT(ADCSRA,ADCSRA_ADIE);
     f90:	a6 e2       	ldi	r26, 0x26	; 38
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e6 e2       	ldi	r30, 0x26	; 38
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	87 7f       	andi	r24, 0xF7	; 247
     f9c:	8c 93       	st	X, r24
     f9e:	21 c0       	rjmp	.+66     	; 0xfe2 <__vector_16+0x110>
		}
		else
		{
			ADMUX&=ADMUX_MASK;
     fa0:	a7 e2       	ldi	r26, 0x27	; 39
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e7 e2       	ldi	r30, 0x27	; 39
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	80 7e       	andi	r24, 0xE0	; 224
     fac:	8c 93       	st	X, r24
			ADMUX|=Global_pu8ChainChannelArr[Global_u8ChannelIdx];
     fae:	a7 e2       	ldi	r26, 0x27	; 39
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e7 e2       	ldi	r30, 0x27	; 39
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	40 81       	ld	r20, Z
     fb8:	20 91 36 01 	lds	r18, 0x0136
     fbc:	30 91 37 01 	lds	r19, 0x0137
     fc0:	80 91 39 01 	lds	r24, 0x0139
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	f9 01       	movw	r30, r18
     fca:	e8 0f       	add	r30, r24
     fcc:	f9 1f       	adc	r31, r25
     fce:	80 81       	ld	r24, Z
     fd0:	84 2b       	or	r24, r20
     fd2:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     fd4:	a6 e2       	ldi	r26, 0x26	; 38
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e6 e2       	ldi	r30, 0x26	; 38
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	80 5c       	subi	r24, 0xC0	; 192
     fe0:	8c 93       	st	X, r24
		}
	}
}
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	ff 91       	pop	r31
     fe8:	ef 91       	pop	r30
     fea:	bf 91       	pop	r27
     fec:	af 91       	pop	r26
     fee:	9f 91       	pop	r25
     ff0:	8f 91       	pop	r24
     ff2:	7f 91       	pop	r23
     ff4:	6f 91       	pop	r22
     ff6:	5f 91       	pop	r21
     ff8:	4f 91       	pop	r20
     ffa:	3f 91       	pop	r19
     ffc:	2f 91       	pop	r18
     ffe:	0f 90       	pop	r0
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	0f 90       	pop	r0
    1004:	1f 90       	pop	r1
    1006:	18 95       	reti

00001008 <CLCD_voidSendCommand>:
#include "CLCD_interface.h"
#include "CLCD_private.h"

static u8 iniIsFinich=0;
void CLCD_voidSendCommand(u8 Copy_u8Command)//math
{
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	ac 97       	sbiw	r28, 0x2c	; 44
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	8c a7       	std	Y+44, r24	; 0x2c
	/*PIN SET  send pulse (E) */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_HIGH);
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_LOW);
#elif CLCD_CHIOCE_MODE==_4_BIT_MODE
	u8 Local_u8Mask = 0b11110000;
    101e:	80 ef       	ldi	r24, 0xF0	; 240
    1020:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_PIN_LOW);
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	60 e0       	ldi	r22, 0x00	; 0
    1026:	40 e0       	ldi	r20, 0x00	; 0
    1028:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <DIO_u8SetPinValue>
	/*PIN RW SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_PIN_LOW);
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	61 e0       	ldi	r22, 0x01	; 1
    1030:	40 e0       	ldi	r20, 0x00	; 0
    1032:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <DIO_u8SetPinValue>
	/*PORT SET COMMAND*/
	Local_u8Mask &= Copy_u8Command;
    1036:	9b a5       	ldd	r25, Y+43	; 0x2b
    1038:	8c a5       	ldd	r24, Y+44	; 0x2c
    103a:	89 23       	and	r24, r25
    103c:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPortValue(CLCD_DATA_PORT, Local_u8Mask);
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	6b a5       	ldd	r22, Y+43	; 0x2b
    1042:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <DIO_u8SetPortValue>
	/*PIN SET  send pulse (E) */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_HIGH);
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	62 e0       	ldi	r22, 0x02	; 2
    104a:	41 e0       	ldi	r20, 0x01	; 1
    104c:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <DIO_u8SetPinValue>
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	a0 e0       	ldi	r26, 0x00	; 0
    1056:	b0 e4       	ldi	r27, 0x40	; 64
    1058:	8f a3       	std	Y+39, r24	; 0x27
    105a:	98 a7       	std	Y+40, r25	; 0x28
    105c:	a9 a7       	std	Y+41, r26	; 0x29
    105e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1060:	6f a1       	ldd	r22, Y+39	; 0x27
    1062:	78 a5       	ldd	r23, Y+40	; 0x28
    1064:	89 a5       	ldd	r24, Y+41	; 0x29
    1066:	9a a5       	ldd	r25, Y+42	; 0x2a
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	4a ef       	ldi	r20, 0xFA	; 250
    106e:	54 e4       	ldi	r21, 0x44	; 68
    1070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1074:	dc 01       	movw	r26, r24
    1076:	cb 01       	movw	r24, r22
    1078:	8b a3       	std	Y+35, r24	; 0x23
    107a:	9c a3       	std	Y+36, r25	; 0x24
    107c:	ad a3       	std	Y+37, r26	; 0x25
    107e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1080:	6b a1       	ldd	r22, Y+35	; 0x23
    1082:	7c a1       	ldd	r23, Y+36	; 0x24
    1084:	8d a1       	ldd	r24, Y+37	; 0x25
    1086:	9e a1       	ldd	r25, Y+38	; 0x26
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	40 e8       	ldi	r20, 0x80	; 128
    108e:	5f e3       	ldi	r21, 0x3F	; 63
    1090:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1094:	88 23       	and	r24, r24
    1096:	2c f4       	brge	.+10     	; 0x10a2 <CLCD_voidSendCommand+0x9a>
		__ticks = 1;
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	9a a3       	std	Y+34, r25	; 0x22
    109e:	89 a3       	std	Y+33, r24	; 0x21
    10a0:	3f c0       	rjmp	.+126    	; 0x1120 <CLCD_voidSendCommand+0x118>
	else if (__tmp > 65535)
    10a2:	6b a1       	ldd	r22, Y+35	; 0x23
    10a4:	7c a1       	ldd	r23, Y+36	; 0x24
    10a6:	8d a1       	ldd	r24, Y+37	; 0x25
    10a8:	9e a1       	ldd	r25, Y+38	; 0x26
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	3f ef       	ldi	r19, 0xFF	; 255
    10ae:	4f e7       	ldi	r20, 0x7F	; 127
    10b0:	57 e4       	ldi	r21, 0x47	; 71
    10b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10b6:	18 16       	cp	r1, r24
    10b8:	4c f5       	brge	.+82     	; 0x110c <CLCD_voidSendCommand+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10ba:	6f a1       	ldd	r22, Y+39	; 0x27
    10bc:	78 a5       	ldd	r23, Y+40	; 0x28
    10be:	89 a5       	ldd	r24, Y+41	; 0x29
    10c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	40 e2       	ldi	r20, 0x20	; 32
    10c8:	51 e4       	ldi	r21, 0x41	; 65
    10ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ce:	dc 01       	movw	r26, r24
    10d0:	cb 01       	movw	r24, r22
    10d2:	bc 01       	movw	r22, r24
    10d4:	cd 01       	movw	r24, r26
    10d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10da:	dc 01       	movw	r26, r24
    10dc:	cb 01       	movw	r24, r22
    10de:	9a a3       	std	Y+34, r25	; 0x22
    10e0:	89 a3       	std	Y+33, r24	; 0x21
    10e2:	0f c0       	rjmp	.+30     	; 0x1102 <CLCD_voidSendCommand+0xfa>
    10e4:	88 ec       	ldi	r24, 0xC8	; 200
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	98 a3       	std	Y+32, r25	; 0x20
    10ea:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10ee:	98 a1       	ldd	r25, Y+32	; 0x20
    10f0:	01 97       	sbiw	r24, 0x01	; 1
    10f2:	f1 f7       	brne	.-4      	; 0x10f0 <CLCD_voidSendCommand+0xe8>
    10f4:	98 a3       	std	Y+32, r25	; 0x20
    10f6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f8:	89 a1       	ldd	r24, Y+33	; 0x21
    10fa:	9a a1       	ldd	r25, Y+34	; 0x22
    10fc:	01 97       	sbiw	r24, 0x01	; 1
    10fe:	9a a3       	std	Y+34, r25	; 0x22
    1100:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1102:	89 a1       	ldd	r24, Y+33	; 0x21
    1104:	9a a1       	ldd	r25, Y+34	; 0x22
    1106:	00 97       	sbiw	r24, 0x00	; 0
    1108:	69 f7       	brne	.-38     	; 0x10e4 <CLCD_voidSendCommand+0xdc>
    110a:	14 c0       	rjmp	.+40     	; 0x1134 <CLCD_voidSendCommand+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    110c:	6b a1       	ldd	r22, Y+35	; 0x23
    110e:	7c a1       	ldd	r23, Y+36	; 0x24
    1110:	8d a1       	ldd	r24, Y+37	; 0x25
    1112:	9e a1       	ldd	r25, Y+38	; 0x26
    1114:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1118:	dc 01       	movw	r26, r24
    111a:	cb 01       	movw	r24, r22
    111c:	9a a3       	std	Y+34, r25	; 0x22
    111e:	89 a3       	std	Y+33, r24	; 0x21
    1120:	89 a1       	ldd	r24, Y+33	; 0x21
    1122:	9a a1       	ldd	r25, Y+34	; 0x22
    1124:	9e 8f       	std	Y+30, r25	; 0x1e
    1126:	8d 8f       	std	Y+29, r24	; 0x1d
    1128:	8d 8d       	ldd	r24, Y+29	; 0x1d
    112a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    112c:	01 97       	sbiw	r24, 0x01	; 1
    112e:	f1 f7       	brne	.-4      	; 0x112c <CLCD_voidSendCommand+0x124>
    1130:	9e 8f       	std	Y+30, r25	; 0x1e
    1132:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	62 e0       	ldi	r22, 0x02	; 2
    1138:	40 e0       	ldi	r20, 0x00	; 0
    113a:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <DIO_u8SetPinValue>
	if(iniIsFinich)
    113e:	80 91 3b 01 	lds	r24, 0x013B
    1142:	88 23       	and	r24, r24
    1144:	09 f4       	brne	.+2      	; 0x1148 <CLCD_voidSendCommand+0x140>
    1146:	8c c0       	rjmp	.+280    	; 0x1260 <CLCD_voidSendCommand+0x258>
	{
		Local_u8Mask = 0b11110000;
    1148:	80 ef       	ldi	r24, 0xF0	; 240
    114a:	8b a7       	std	Y+43, r24	; 0x2b
		Local_u8Mask = ~(Local_u8Mask) & Copy_u8Command;
    114c:	8b a5       	ldd	r24, Y+43	; 0x2b
    114e:	98 2f       	mov	r25, r24
    1150:	90 95       	com	r25
    1152:	8c a5       	ldd	r24, Y+44	; 0x2c
    1154:	89 23       	and	r24, r25
    1156:	8b a7       	std	Y+43, r24	; 0x2b
		DIO_u8SetPortValue(CLCD_DATA_PORT, (Local_u8Mask << 4));
    1158:	8b a5       	ldd	r24, Y+43	; 0x2b
    115a:	98 2f       	mov	r25, r24
    115c:	92 95       	swap	r25
    115e:	90 7f       	andi	r25, 0xF0	; 240
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	69 2f       	mov	r22, r25
    1164:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <DIO_u8SetPortValue>
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_HIGH);
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	62 e0       	ldi	r22, 0x02	; 2
    116c:	41 e0       	ldi	r20, 0x01	; 1
    116e:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <DIO_u8SetPinValue>
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	a0 e0       	ldi	r26, 0x00	; 0
    1178:	b0 e4       	ldi	r27, 0x40	; 64
    117a:	89 8f       	std	Y+25, r24	; 0x19
    117c:	9a 8f       	std	Y+26, r25	; 0x1a
    117e:	ab 8f       	std	Y+27, r26	; 0x1b
    1180:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1182:	69 8d       	ldd	r22, Y+25	; 0x19
    1184:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1186:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1188:	9c 8d       	ldd	r25, Y+28	; 0x1c
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	4a ef       	ldi	r20, 0xFA	; 250
    1190:	54 e4       	ldi	r21, 0x44	; 68
    1192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1196:	dc 01       	movw	r26, r24
    1198:	cb 01       	movw	r24, r22
    119a:	8d 8b       	std	Y+21, r24	; 0x15
    119c:	9e 8b       	std	Y+22, r25	; 0x16
    119e:	af 8b       	std	Y+23, r26	; 0x17
    11a0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11a2:	6d 89       	ldd	r22, Y+21	; 0x15
    11a4:	7e 89       	ldd	r23, Y+22	; 0x16
    11a6:	8f 89       	ldd	r24, Y+23	; 0x17
    11a8:	98 8d       	ldd	r25, Y+24	; 0x18
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	40 e8       	ldi	r20, 0x80	; 128
    11b0:	5f e3       	ldi	r21, 0x3F	; 63
    11b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11b6:	88 23       	and	r24, r24
    11b8:	2c f4       	brge	.+10     	; 0x11c4 <CLCD_voidSendCommand+0x1bc>
		__ticks = 1;
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	9c 8b       	std	Y+20, r25	; 0x14
    11c0:	8b 8b       	std	Y+19, r24	; 0x13
    11c2:	3f c0       	rjmp	.+126    	; 0x1242 <CLCD_voidSendCommand+0x23a>
	else if (__tmp > 65535)
    11c4:	6d 89       	ldd	r22, Y+21	; 0x15
    11c6:	7e 89       	ldd	r23, Y+22	; 0x16
    11c8:	8f 89       	ldd	r24, Y+23	; 0x17
    11ca:	98 8d       	ldd	r25, Y+24	; 0x18
    11cc:	20 e0       	ldi	r18, 0x00	; 0
    11ce:	3f ef       	ldi	r19, 0xFF	; 255
    11d0:	4f e7       	ldi	r20, 0x7F	; 127
    11d2:	57 e4       	ldi	r21, 0x47	; 71
    11d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11d8:	18 16       	cp	r1, r24
    11da:	4c f5       	brge	.+82     	; 0x122e <CLCD_voidSendCommand+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11dc:	69 8d       	ldd	r22, Y+25	; 0x19
    11de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	40 e2       	ldi	r20, 0x20	; 32
    11ea:	51 e4       	ldi	r21, 0x41	; 65
    11ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f0:	dc 01       	movw	r26, r24
    11f2:	cb 01       	movw	r24, r22
    11f4:	bc 01       	movw	r22, r24
    11f6:	cd 01       	movw	r24, r26
    11f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	9c 8b       	std	Y+20, r25	; 0x14
    1202:	8b 8b       	std	Y+19, r24	; 0x13
    1204:	0f c0       	rjmp	.+30     	; 0x1224 <CLCD_voidSendCommand+0x21c>
    1206:	88 ec       	ldi	r24, 0xC8	; 200
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	9a 8b       	std	Y+18, r25	; 0x12
    120c:	89 8b       	std	Y+17, r24	; 0x11
    120e:	89 89       	ldd	r24, Y+17	; 0x11
    1210:	9a 89       	ldd	r25, Y+18	; 0x12
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	f1 f7       	brne	.-4      	; 0x1212 <CLCD_voidSendCommand+0x20a>
    1216:	9a 8b       	std	Y+18, r25	; 0x12
    1218:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    121a:	8b 89       	ldd	r24, Y+19	; 0x13
    121c:	9c 89       	ldd	r25, Y+20	; 0x14
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	9c 8b       	std	Y+20, r25	; 0x14
    1222:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1224:	8b 89       	ldd	r24, Y+19	; 0x13
    1226:	9c 89       	ldd	r25, Y+20	; 0x14
    1228:	00 97       	sbiw	r24, 0x00	; 0
    122a:	69 f7       	brne	.-38     	; 0x1206 <CLCD_voidSendCommand+0x1fe>
    122c:	14 c0       	rjmp	.+40     	; 0x1256 <CLCD_voidSendCommand+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    122e:	6d 89       	ldd	r22, Y+21	; 0x15
    1230:	7e 89       	ldd	r23, Y+22	; 0x16
    1232:	8f 89       	ldd	r24, Y+23	; 0x17
    1234:	98 8d       	ldd	r25, Y+24	; 0x18
    1236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    123a:	dc 01       	movw	r26, r24
    123c:	cb 01       	movw	r24, r22
    123e:	9c 8b       	std	Y+20, r25	; 0x14
    1240:	8b 8b       	std	Y+19, r24	; 0x13
    1242:	8b 89       	ldd	r24, Y+19	; 0x13
    1244:	9c 89       	ldd	r25, Y+20	; 0x14
    1246:	98 8b       	std	Y+16, r25	; 0x10
    1248:	8f 87       	std	Y+15, r24	; 0x0f
    124a:	8f 85       	ldd	r24, Y+15	; 0x0f
    124c:	98 89       	ldd	r25, Y+16	; 0x10
    124e:	01 97       	sbiw	r24, 0x01	; 1
    1250:	f1 f7       	brne	.-4      	; 0x124e <CLCD_voidSendCommand+0x246>
    1252:	98 8b       	std	Y+16, r25	; 0x10
    1254:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	62 e0       	ldi	r22, 0x02	; 2
    125a:	40 e0       	ldi	r20, 0x00	; 0
    125c:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <DIO_u8SetPinValue>
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	a0 e0       	ldi	r26, 0x00	; 0
    1266:	b0 e4       	ldi	r27, 0x40	; 64
    1268:	8b 87       	std	Y+11, r24	; 0x0b
    126a:	9c 87       	std	Y+12, r25	; 0x0c
    126c:	ad 87       	std	Y+13, r26	; 0x0d
    126e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1270:	6b 85       	ldd	r22, Y+11	; 0x0b
    1272:	7c 85       	ldd	r23, Y+12	; 0x0c
    1274:	8d 85       	ldd	r24, Y+13	; 0x0d
    1276:	9e 85       	ldd	r25, Y+14	; 0x0e
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	4a ef       	ldi	r20, 0xFA	; 250
    127e:	54 e4       	ldi	r21, 0x44	; 68
    1280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1284:	dc 01       	movw	r26, r24
    1286:	cb 01       	movw	r24, r22
    1288:	8f 83       	std	Y+7, r24	; 0x07
    128a:	98 87       	std	Y+8, r25	; 0x08
    128c:	a9 87       	std	Y+9, r26	; 0x09
    128e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1290:	6f 81       	ldd	r22, Y+7	; 0x07
    1292:	78 85       	ldd	r23, Y+8	; 0x08
    1294:	89 85       	ldd	r24, Y+9	; 0x09
    1296:	9a 85       	ldd	r25, Y+10	; 0x0a
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	40 e8       	ldi	r20, 0x80	; 128
    129e:	5f e3       	ldi	r21, 0x3F	; 63
    12a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12a4:	88 23       	and	r24, r24
    12a6:	2c f4       	brge	.+10     	; 0x12b2 <CLCD_voidSendCommand+0x2aa>
		__ticks = 1;
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	9e 83       	std	Y+6, r25	; 0x06
    12ae:	8d 83       	std	Y+5, r24	; 0x05
    12b0:	3f c0       	rjmp	.+126    	; 0x1330 <CLCD_voidSendCommand+0x328>
	else if (__tmp > 65535)
    12b2:	6f 81       	ldd	r22, Y+7	; 0x07
    12b4:	78 85       	ldd	r23, Y+8	; 0x08
    12b6:	89 85       	ldd	r24, Y+9	; 0x09
    12b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	3f ef       	ldi	r19, 0xFF	; 255
    12be:	4f e7       	ldi	r20, 0x7F	; 127
    12c0:	57 e4       	ldi	r21, 0x47	; 71
    12c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12c6:	18 16       	cp	r1, r24
    12c8:	4c f5       	brge	.+82     	; 0x131c <CLCD_voidSendCommand+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    12cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    12d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	40 e2       	ldi	r20, 0x20	; 32
    12d8:	51 e4       	ldi	r21, 0x41	; 65
    12da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12de:	dc 01       	movw	r26, r24
    12e0:	cb 01       	movw	r24, r22
    12e2:	bc 01       	movw	r22, r24
    12e4:	cd 01       	movw	r24, r26
    12e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ea:	dc 01       	movw	r26, r24
    12ec:	cb 01       	movw	r24, r22
    12ee:	9e 83       	std	Y+6, r25	; 0x06
    12f0:	8d 83       	std	Y+5, r24	; 0x05
    12f2:	0f c0       	rjmp	.+30     	; 0x1312 <CLCD_voidSendCommand+0x30a>
    12f4:	88 ec       	ldi	r24, 0xC8	; 200
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	9c 83       	std	Y+4, r25	; 0x04
    12fa:	8b 83       	std	Y+3, r24	; 0x03
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1300:	01 97       	sbiw	r24, 0x01	; 1
    1302:	f1 f7       	brne	.-4      	; 0x1300 <CLCD_voidSendCommand+0x2f8>
    1304:	9c 83       	std	Y+4, r25	; 0x04
    1306:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1308:	8d 81       	ldd	r24, Y+5	; 0x05
    130a:	9e 81       	ldd	r25, Y+6	; 0x06
    130c:	01 97       	sbiw	r24, 0x01	; 1
    130e:	9e 83       	std	Y+6, r25	; 0x06
    1310:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1312:	8d 81       	ldd	r24, Y+5	; 0x05
    1314:	9e 81       	ldd	r25, Y+6	; 0x06
    1316:	00 97       	sbiw	r24, 0x00	; 0
    1318:	69 f7       	brne	.-38     	; 0x12f4 <CLCD_voidSendCommand+0x2ec>
    131a:	14 c0       	rjmp	.+40     	; 0x1344 <CLCD_voidSendCommand+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    131c:	6f 81       	ldd	r22, Y+7	; 0x07
    131e:	78 85       	ldd	r23, Y+8	; 0x08
    1320:	89 85       	ldd	r24, Y+9	; 0x09
    1322:	9a 85       	ldd	r25, Y+10	; 0x0a
    1324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	9e 83       	std	Y+6, r25	; 0x06
    132e:	8d 83       	std	Y+5, r24	; 0x05
    1330:	8d 81       	ldd	r24, Y+5	; 0x05
    1332:	9e 81       	ldd	r25, Y+6	; 0x06
    1334:	9a 83       	std	Y+2, r25	; 0x02
    1336:	89 83       	std	Y+1, r24	; 0x01
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	9a 81       	ldd	r25, Y+2	; 0x02
    133c:	01 97       	sbiw	r24, 0x01	; 1
    133e:	f1 f7       	brne	.-4      	; 0x133c <CLCD_voidSendCommand+0x334>
    1340:	9a 83       	std	Y+2, r25	; 0x02
    1342:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
#else
#error "In correct cconfigrtion of LCD_MODE"
#endif

}
    1344:	ac 96       	adiw	r28, 0x2c	; 44
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	de bf       	out	0x3e, r29	; 62
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	cd bf       	out	0x3d, r28	; 61
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	08 95       	ret

00001356 <CLCD_Read_BF_AC>:
u8 CLCD_Read_BF_AC() {
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	00 d0       	rcall	.+0      	; 0x135c <CLCD_Read_BF_AC+0x6>
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Address = 0;
    1360:	1a 82       	std	Y+2, r1	; 0x02
	/*PIN RS SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_PIN_LOW);
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	60 e0       	ldi	r22, 0x00	; 0
    1366:	40 e0       	ldi	r20, 0x00	; 0
    1368:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <DIO_u8SetPinValue>
	/*PIN RW SET HIGH  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_PIN_HIGH);
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	61 e0       	ldi	r22, 0x01	; 1
    1370:	41 e0       	ldi	r20, 0x01	; 1
    1372:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <DIO_u8SetPinValue>
	/*PIN SET  send pulse (E) */
	for (u8 i = 0; i < 7; i++) {
    1376:	19 82       	std	Y+1, r1	; 0x01
    1378:	1c c0       	rjmp	.+56     	; 0x13b2 <CLCD_Read_BF_AC+0x5c>
		DIO_u8GetPinValue(CLCD_DATA_PORT, i, &Local_u8Address);
    137a:	9e 01       	movw	r18, r28
    137c:	2e 5f       	subi	r18, 0xFE	; 254
    137e:	3f 4f       	sbci	r19, 0xFF	; 255
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	69 81       	ldd	r22, Y+1	; 0x01
    1384:	a9 01       	movw	r20, r18
    1386:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8GetPinValue>
		Local_u8Address += Local_u8Address << i;
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	89 81       	ldd	r24, Y+1	; 0x01
    1392:	88 2f       	mov	r24, r24
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	a9 01       	movw	r20, r18
    1398:	02 c0       	rjmp	.+4      	; 0x139e <CLCD_Read_BF_AC+0x48>
    139a:	44 0f       	add	r20, r20
    139c:	55 1f       	adc	r21, r21
    139e:	8a 95       	dec	r24
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <CLCD_Read_BF_AC+0x44>
    13a2:	ca 01       	movw	r24, r20
    13a4:	98 2f       	mov	r25, r24
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	89 0f       	add	r24, r25
    13aa:	8a 83       	std	Y+2, r24	; 0x02
	/*PIN RS SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_PIN_LOW);
	/*PIN RW SET HIGH  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_PIN_HIGH);
	/*PIN SET  send pulse (E) */
	for (u8 i = 0; i < 7; i++) {
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	8f 5f       	subi	r24, 0xFF	; 255
    13b0:	89 83       	std	Y+1, r24	; 0x01
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	87 30       	cpi	r24, 0x07	; 7
    13b6:	08 f3       	brcs	.-62     	; 0x137a <CLCD_Read_BF_AC+0x24>
		DIO_u8GetPinValue(CLCD_DATA_PORT, i, &Local_u8Address);
		Local_u8Address += Local_u8Address << i;
	}
	return Local_u8Address;
    13b8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	08 95       	ret

000013c4 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	ac 97       	sbiw	r28, 0x2c	; 44
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	f8 94       	cli
    13d2:	de bf       	out	0x3e, r29	; 62
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	cd bf       	out	0x3d, r28	; 61
    13d8:	8c a7       	std	Y+44, r24	; 0x2c
	if (Local_u8Address > 0x0f)
		CLCD_voidSendCommand(0x0C);
	else
		CLCD_voidSendCommand(0x06);
#elif CLCD_CHIOCE_MODE==_4_BIT_MODE
	u8 Local_u8Mask = 0b11110000;
    13da:	80 ef       	ldi	r24, 0xF0	; 240
    13dc:	8b a7       	std	Y+43, r24	; 0x2b
	/*PIN RS SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_PIN_HIGH);
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	60 e0       	ldi	r22, 0x00	; 0
    13e2:	41 e0       	ldi	r20, 0x01	; 1
    13e4:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <DIO_u8SetPinValue>
	/*PIN RW SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_PIN_LOW);
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	61 e0       	ldi	r22, 0x01	; 1
    13ec:	40 e0       	ldi	r20, 0x00	; 0
    13ee:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <DIO_u8SetPinValue>
	/*PORT SET COMMAND*/
	Local_u8Mask &= Copy_u8Data;
    13f2:	9b a5       	ldd	r25, Y+43	; 0x2b
    13f4:	8c a5       	ldd	r24, Y+44	; 0x2c
    13f6:	89 23       	and	r24, r25
    13f8:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Mask);
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	6b a5       	ldd	r22, Y+43	; 0x2b
    13fe:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <DIO_u8SetPortValue>
	/*PIN SET send pulse (E) */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_HIGH);
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	62 e0       	ldi	r22, 0x02	; 2
    1406:	41 e0       	ldi	r20, 0x01	; 1
    1408:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <DIO_u8SetPinValue>
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	a0 e0       	ldi	r26, 0x00	; 0
    1412:	b0 e4       	ldi	r27, 0x40	; 64
    1414:	8f a3       	std	Y+39, r24	; 0x27
    1416:	98 a7       	std	Y+40, r25	; 0x28
    1418:	a9 a7       	std	Y+41, r26	; 0x29
    141a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    141c:	6f a1       	ldd	r22, Y+39	; 0x27
    141e:	78 a5       	ldd	r23, Y+40	; 0x28
    1420:	89 a5       	ldd	r24, Y+41	; 0x29
    1422:	9a a5       	ldd	r25, Y+42	; 0x2a
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	4a ef       	ldi	r20, 0xFA	; 250
    142a:	54 e4       	ldi	r21, 0x44	; 68
    142c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	8b a3       	std	Y+35, r24	; 0x23
    1436:	9c a3       	std	Y+36, r25	; 0x24
    1438:	ad a3       	std	Y+37, r26	; 0x25
    143a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    143c:	6b a1       	ldd	r22, Y+35	; 0x23
    143e:	7c a1       	ldd	r23, Y+36	; 0x24
    1440:	8d a1       	ldd	r24, Y+37	; 0x25
    1442:	9e a1       	ldd	r25, Y+38	; 0x26
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	40 e8       	ldi	r20, 0x80	; 128
    144a:	5f e3       	ldi	r21, 0x3F	; 63
    144c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1450:	88 23       	and	r24, r24
    1452:	2c f4       	brge	.+10     	; 0x145e <CLCD_voidSendData+0x9a>
		__ticks = 1;
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	9a a3       	std	Y+34, r25	; 0x22
    145a:	89 a3       	std	Y+33, r24	; 0x21
    145c:	3f c0       	rjmp	.+126    	; 0x14dc <CLCD_voidSendData+0x118>
	else if (__tmp > 65535)
    145e:	6b a1       	ldd	r22, Y+35	; 0x23
    1460:	7c a1       	ldd	r23, Y+36	; 0x24
    1462:	8d a1       	ldd	r24, Y+37	; 0x25
    1464:	9e a1       	ldd	r25, Y+38	; 0x26
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	3f ef       	ldi	r19, 0xFF	; 255
    146a:	4f e7       	ldi	r20, 0x7F	; 127
    146c:	57 e4       	ldi	r21, 0x47	; 71
    146e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1472:	18 16       	cp	r1, r24
    1474:	4c f5       	brge	.+82     	; 0x14c8 <CLCD_voidSendData+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1476:	6f a1       	ldd	r22, Y+39	; 0x27
    1478:	78 a5       	ldd	r23, Y+40	; 0x28
    147a:	89 a5       	ldd	r24, Y+41	; 0x29
    147c:	9a a5       	ldd	r25, Y+42	; 0x2a
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	40 e2       	ldi	r20, 0x20	; 32
    1484:	51 e4       	ldi	r21, 0x41	; 65
    1486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	bc 01       	movw	r22, r24
    1490:	cd 01       	movw	r24, r26
    1492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	9a a3       	std	Y+34, r25	; 0x22
    149c:	89 a3       	std	Y+33, r24	; 0x21
    149e:	0f c0       	rjmp	.+30     	; 0x14be <CLCD_voidSendData+0xfa>
    14a0:	88 ec       	ldi	r24, 0xC8	; 200
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	98 a3       	std	Y+32, r25	; 0x20
    14a6:	8f 8f       	std	Y+31, r24	; 0x1f
    14a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14aa:	98 a1       	ldd	r25, Y+32	; 0x20
    14ac:	01 97       	sbiw	r24, 0x01	; 1
    14ae:	f1 f7       	brne	.-4      	; 0x14ac <CLCD_voidSendData+0xe8>
    14b0:	98 a3       	std	Y+32, r25	; 0x20
    14b2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14b4:	89 a1       	ldd	r24, Y+33	; 0x21
    14b6:	9a a1       	ldd	r25, Y+34	; 0x22
    14b8:	01 97       	sbiw	r24, 0x01	; 1
    14ba:	9a a3       	std	Y+34, r25	; 0x22
    14bc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14be:	89 a1       	ldd	r24, Y+33	; 0x21
    14c0:	9a a1       	ldd	r25, Y+34	; 0x22
    14c2:	00 97       	sbiw	r24, 0x00	; 0
    14c4:	69 f7       	brne	.-38     	; 0x14a0 <CLCD_voidSendData+0xdc>
    14c6:	14 c0       	rjmp	.+40     	; 0x14f0 <CLCD_voidSendData+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14c8:	6b a1       	ldd	r22, Y+35	; 0x23
    14ca:	7c a1       	ldd	r23, Y+36	; 0x24
    14cc:	8d a1       	ldd	r24, Y+37	; 0x25
    14ce:	9e a1       	ldd	r25, Y+38	; 0x26
    14d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d4:	dc 01       	movw	r26, r24
    14d6:	cb 01       	movw	r24, r22
    14d8:	9a a3       	std	Y+34, r25	; 0x22
    14da:	89 a3       	std	Y+33, r24	; 0x21
    14dc:	89 a1       	ldd	r24, Y+33	; 0x21
    14de:	9a a1       	ldd	r25, Y+34	; 0x22
    14e0:	9e 8f       	std	Y+30, r25	; 0x1e
    14e2:	8d 8f       	std	Y+29, r24	; 0x1d
    14e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14e8:	01 97       	sbiw	r24, 0x01	; 1
    14ea:	f1 f7       	brne	.-4      	; 0x14e8 <CLCD_voidSendData+0x124>
    14ec:	9e 8f       	std	Y+30, r25	; 0x1e
    14ee:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	62 e0       	ldi	r22, 0x02	; 2
    14f4:	40 e0       	ldi	r20, 0x00	; 0
    14f6:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <DIO_u8SetPinValue>
	Local_u8Mask=0b11110000;
    14fa:	80 ef       	ldi	r24, 0xF0	; 240
    14fc:	8b a7       	std	Y+43, r24	; 0x2b
	Local_u8Mask = ~(Local_u8Mask) & Copy_u8Data;
    14fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1500:	98 2f       	mov	r25, r24
    1502:	90 95       	com	r25
    1504:	8c a5       	ldd	r24, Y+44	; 0x2c
    1506:	89 23       	and	r24, r25
    1508:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPortValue(CLCD_DATA_PORT, (Local_u8Mask << 4));
    150a:	8b a5       	ldd	r24, Y+43	; 0x2b
    150c:	98 2f       	mov	r25, r24
    150e:	92 95       	swap	r25
    1510:	90 7f       	andi	r25, 0xF0	; 240
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	69 2f       	mov	r22, r25
    1516:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <DIO_u8SetPortValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_HIGH);
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	62 e0       	ldi	r22, 0x02	; 2
    151e:	41 e0       	ldi	r20, 0x01	; 1
    1520:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <DIO_u8SetPinValue>
    1524:	80 e0       	ldi	r24, 0x00	; 0
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	a0 e0       	ldi	r26, 0x00	; 0
    152a:	b0 e4       	ldi	r27, 0x40	; 64
    152c:	89 8f       	std	Y+25, r24	; 0x19
    152e:	9a 8f       	std	Y+26, r25	; 0x1a
    1530:	ab 8f       	std	Y+27, r26	; 0x1b
    1532:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1534:	69 8d       	ldd	r22, Y+25	; 0x19
    1536:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1538:	8b 8d       	ldd	r24, Y+27	; 0x1b
    153a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	4a ef       	ldi	r20, 0xFA	; 250
    1542:	54 e4       	ldi	r21, 0x44	; 68
    1544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	8d 8b       	std	Y+21, r24	; 0x15
    154e:	9e 8b       	std	Y+22, r25	; 0x16
    1550:	af 8b       	std	Y+23, r26	; 0x17
    1552:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1554:	6d 89       	ldd	r22, Y+21	; 0x15
    1556:	7e 89       	ldd	r23, Y+22	; 0x16
    1558:	8f 89       	ldd	r24, Y+23	; 0x17
    155a:	98 8d       	ldd	r25, Y+24	; 0x18
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	40 e8       	ldi	r20, 0x80	; 128
    1562:	5f e3       	ldi	r21, 0x3F	; 63
    1564:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1568:	88 23       	and	r24, r24
    156a:	2c f4       	brge	.+10     	; 0x1576 <CLCD_voidSendData+0x1b2>
		__ticks = 1;
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	9c 8b       	std	Y+20, r25	; 0x14
    1572:	8b 8b       	std	Y+19, r24	; 0x13
    1574:	3f c0       	rjmp	.+126    	; 0x15f4 <CLCD_voidSendData+0x230>
	else if (__tmp > 65535)
    1576:	6d 89       	ldd	r22, Y+21	; 0x15
    1578:	7e 89       	ldd	r23, Y+22	; 0x16
    157a:	8f 89       	ldd	r24, Y+23	; 0x17
    157c:	98 8d       	ldd	r25, Y+24	; 0x18
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	3f ef       	ldi	r19, 0xFF	; 255
    1582:	4f e7       	ldi	r20, 0x7F	; 127
    1584:	57 e4       	ldi	r21, 0x47	; 71
    1586:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    158a:	18 16       	cp	r1, r24
    158c:	4c f5       	brge	.+82     	; 0x15e0 <CLCD_voidSendData+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    158e:	69 8d       	ldd	r22, Y+25	; 0x19
    1590:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1592:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1594:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	40 e2       	ldi	r20, 0x20	; 32
    159c:	51 e4       	ldi	r21, 0x41	; 65
    159e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	bc 01       	movw	r22, r24
    15a8:	cd 01       	movw	r24, r26
    15aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ae:	dc 01       	movw	r26, r24
    15b0:	cb 01       	movw	r24, r22
    15b2:	9c 8b       	std	Y+20, r25	; 0x14
    15b4:	8b 8b       	std	Y+19, r24	; 0x13
    15b6:	0f c0       	rjmp	.+30     	; 0x15d6 <CLCD_voidSendData+0x212>
    15b8:	88 ec       	ldi	r24, 0xC8	; 200
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	9a 8b       	std	Y+18, r25	; 0x12
    15be:	89 8b       	std	Y+17, r24	; 0x11
    15c0:	89 89       	ldd	r24, Y+17	; 0x11
    15c2:	9a 89       	ldd	r25, Y+18	; 0x12
    15c4:	01 97       	sbiw	r24, 0x01	; 1
    15c6:	f1 f7       	brne	.-4      	; 0x15c4 <CLCD_voidSendData+0x200>
    15c8:	9a 8b       	std	Y+18, r25	; 0x12
    15ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15cc:	8b 89       	ldd	r24, Y+19	; 0x13
    15ce:	9c 89       	ldd	r25, Y+20	; 0x14
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	9c 8b       	std	Y+20, r25	; 0x14
    15d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d6:	8b 89       	ldd	r24, Y+19	; 0x13
    15d8:	9c 89       	ldd	r25, Y+20	; 0x14
    15da:	00 97       	sbiw	r24, 0x00	; 0
    15dc:	69 f7       	brne	.-38     	; 0x15b8 <CLCD_voidSendData+0x1f4>
    15de:	14 c0       	rjmp	.+40     	; 0x1608 <CLCD_voidSendData+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e0:	6d 89       	ldd	r22, Y+21	; 0x15
    15e2:	7e 89       	ldd	r23, Y+22	; 0x16
    15e4:	8f 89       	ldd	r24, Y+23	; 0x17
    15e6:	98 8d       	ldd	r25, Y+24	; 0x18
    15e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ec:	dc 01       	movw	r26, r24
    15ee:	cb 01       	movw	r24, r22
    15f0:	9c 8b       	std	Y+20, r25	; 0x14
    15f2:	8b 8b       	std	Y+19, r24	; 0x13
    15f4:	8b 89       	ldd	r24, Y+19	; 0x13
    15f6:	9c 89       	ldd	r25, Y+20	; 0x14
    15f8:	98 8b       	std	Y+16, r25	; 0x10
    15fa:	8f 87       	std	Y+15, r24	; 0x0f
    15fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    15fe:	98 89       	ldd	r25, Y+16	; 0x10
    1600:	01 97       	sbiw	r24, 0x01	; 1
    1602:	f1 f7       	brne	.-4      	; 0x1600 <CLCD_voidSendData+0x23c>
    1604:	98 8b       	std	Y+16, r25	; 0x10
    1606:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	62 e0       	ldi	r22, 0x02	; 2
    160c:	40 e0       	ldi	r20, 0x00	; 0
    160e:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <DIO_u8SetPinValue>
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	a0 e0       	ldi	r26, 0x00	; 0
    1618:	b0 e4       	ldi	r27, 0x40	; 64
    161a:	8b 87       	std	Y+11, r24	; 0x0b
    161c:	9c 87       	std	Y+12, r25	; 0x0c
    161e:	ad 87       	std	Y+13, r26	; 0x0d
    1620:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1622:	6b 85       	ldd	r22, Y+11	; 0x0b
    1624:	7c 85       	ldd	r23, Y+12	; 0x0c
    1626:	8d 85       	ldd	r24, Y+13	; 0x0d
    1628:	9e 85       	ldd	r25, Y+14	; 0x0e
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	4a ef       	ldi	r20, 0xFA	; 250
    1630:	54 e4       	ldi	r21, 0x44	; 68
    1632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	8f 83       	std	Y+7, r24	; 0x07
    163c:	98 87       	std	Y+8, r25	; 0x08
    163e:	a9 87       	std	Y+9, r26	; 0x09
    1640:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1642:	6f 81       	ldd	r22, Y+7	; 0x07
    1644:	78 85       	ldd	r23, Y+8	; 0x08
    1646:	89 85       	ldd	r24, Y+9	; 0x09
    1648:	9a 85       	ldd	r25, Y+10	; 0x0a
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	40 e8       	ldi	r20, 0x80	; 128
    1650:	5f e3       	ldi	r21, 0x3F	; 63
    1652:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1656:	88 23       	and	r24, r24
    1658:	2c f4       	brge	.+10     	; 0x1664 <CLCD_voidSendData+0x2a0>
		__ticks = 1;
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	9e 83       	std	Y+6, r25	; 0x06
    1660:	8d 83       	std	Y+5, r24	; 0x05
    1662:	3f c0       	rjmp	.+126    	; 0x16e2 <CLCD_voidSendData+0x31e>
	else if (__tmp > 65535)
    1664:	6f 81       	ldd	r22, Y+7	; 0x07
    1666:	78 85       	ldd	r23, Y+8	; 0x08
    1668:	89 85       	ldd	r24, Y+9	; 0x09
    166a:	9a 85       	ldd	r25, Y+10	; 0x0a
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	3f ef       	ldi	r19, 0xFF	; 255
    1670:	4f e7       	ldi	r20, 0x7F	; 127
    1672:	57 e4       	ldi	r21, 0x47	; 71
    1674:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1678:	18 16       	cp	r1, r24
    167a:	4c f5       	brge	.+82     	; 0x16ce <CLCD_voidSendData+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    167c:	6b 85       	ldd	r22, Y+11	; 0x0b
    167e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1680:	8d 85       	ldd	r24, Y+13	; 0x0d
    1682:	9e 85       	ldd	r25, Y+14	; 0x0e
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	40 e2       	ldi	r20, 0x20	; 32
    168a:	51 e4       	ldi	r21, 0x41	; 65
    168c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	bc 01       	movw	r22, r24
    1696:	cd 01       	movw	r24, r26
    1698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	9e 83       	std	Y+6, r25	; 0x06
    16a2:	8d 83       	std	Y+5, r24	; 0x05
    16a4:	0f c0       	rjmp	.+30     	; 0x16c4 <CLCD_voidSendData+0x300>
    16a6:	88 ec       	ldi	r24, 0xC8	; 200
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	9c 83       	std	Y+4, r25	; 0x04
    16ac:	8b 83       	std	Y+3, r24	; 0x03
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	9c 81       	ldd	r25, Y+4	; 0x04
    16b2:	01 97       	sbiw	r24, 0x01	; 1
    16b4:	f1 f7       	brne	.-4      	; 0x16b2 <CLCD_voidSendData+0x2ee>
    16b6:	9c 83       	std	Y+4, r25	; 0x04
    16b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ba:	8d 81       	ldd	r24, Y+5	; 0x05
    16bc:	9e 81       	ldd	r25, Y+6	; 0x06
    16be:	01 97       	sbiw	r24, 0x01	; 1
    16c0:	9e 83       	std	Y+6, r25	; 0x06
    16c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c4:	8d 81       	ldd	r24, Y+5	; 0x05
    16c6:	9e 81       	ldd	r25, Y+6	; 0x06
    16c8:	00 97       	sbiw	r24, 0x00	; 0
    16ca:	69 f7       	brne	.-38     	; 0x16a6 <CLCD_voidSendData+0x2e2>
    16cc:	14 c0       	rjmp	.+40     	; 0x16f6 <CLCD_voidSendData+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ce:	6f 81       	ldd	r22, Y+7	; 0x07
    16d0:	78 85       	ldd	r23, Y+8	; 0x08
    16d2:	89 85       	ldd	r24, Y+9	; 0x09
    16d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	9e 83       	std	Y+6, r25	; 0x06
    16e0:	8d 83       	std	Y+5, r24	; 0x05
    16e2:	8d 81       	ldd	r24, Y+5	; 0x05
    16e4:	9e 81       	ldd	r25, Y+6	; 0x06
    16e6:	9a 83       	std	Y+2, r25	; 0x02
    16e8:	89 83       	std	Y+1, r24	; 0x01
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	9a 81       	ldd	r25, Y+2	; 0x02
    16ee:	01 97       	sbiw	r24, 0x01	; 1
    16f0:	f1 f7       	brne	.-4      	; 0x16ee <CLCD_voidSendData+0x32a>
    16f2:	9a 83       	std	Y+2, r25	; 0x02
    16f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	CLCD_voidSendCommand(0x06);
    16f6:	86 e0       	ldi	r24, 0x06	; 6
    16f8:	0e 94 04 08 	call	0x1008	; 0x1008 <CLCD_voidSendCommand>
#else
#error "In correct cconfigrtion of LCD_MODE"
#endif
}
    16fc:	ac 96       	adiw	r28, 0x2c	; 44
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	f8 94       	cli
    1702:	de bf       	out	0x3e, r29	; 62
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	cd bf       	out	0x3d, r28	; 61
    1708:	cf 91       	pop	r28
    170a:	df 91       	pop	r29
    170c:	08 95       	ret

0000170e <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    170e:	df 93       	push	r29
    1710:	cf 93       	push	r28
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	e8 97       	sbiw	r28, 0x38	; 56
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	de bf       	out	0x3e, r29	; 62
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	cd bf       	out	0x3d, r28	; 61
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	a0 e2       	ldi	r26, 0x20	; 32
    1728:	b2 e4       	ldi	r27, 0x42	; 66
    172a:	8d ab       	std	Y+53, r24	; 0x35
    172c:	9e ab       	std	Y+54, r25	; 0x36
    172e:	af ab       	std	Y+55, r26	; 0x37
    1730:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1732:	6d a9       	ldd	r22, Y+53	; 0x35
    1734:	7e a9       	ldd	r23, Y+54	; 0x36
    1736:	8f a9       	ldd	r24, Y+55	; 0x37
    1738:	98 ad       	ldd	r25, Y+56	; 0x38
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	4a ef       	ldi	r20, 0xFA	; 250
    1740:	54 e4       	ldi	r21, 0x44	; 68
    1742:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	89 ab       	std	Y+49, r24	; 0x31
    174c:	9a ab       	std	Y+50, r25	; 0x32
    174e:	ab ab       	std	Y+51, r26	; 0x33
    1750:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1752:	69 a9       	ldd	r22, Y+49	; 0x31
    1754:	7a a9       	ldd	r23, Y+50	; 0x32
    1756:	8b a9       	ldd	r24, Y+51	; 0x33
    1758:	9c a9       	ldd	r25, Y+52	; 0x34
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	40 e8       	ldi	r20, 0x80	; 128
    1760:	5f e3       	ldi	r21, 0x3F	; 63
    1762:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1766:	88 23       	and	r24, r24
    1768:	2c f4       	brge	.+10     	; 0x1774 <CLCD_voidInit+0x66>
		__ticks = 1;
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	98 ab       	std	Y+48, r25	; 0x30
    1770:	8f a7       	std	Y+47, r24	; 0x2f
    1772:	3f c0       	rjmp	.+126    	; 0x17f2 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1774:	69 a9       	ldd	r22, Y+49	; 0x31
    1776:	7a a9       	ldd	r23, Y+50	; 0x32
    1778:	8b a9       	ldd	r24, Y+51	; 0x33
    177a:	9c a9       	ldd	r25, Y+52	; 0x34
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	3f ef       	ldi	r19, 0xFF	; 255
    1780:	4f e7       	ldi	r20, 0x7F	; 127
    1782:	57 e4       	ldi	r21, 0x47	; 71
    1784:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1788:	18 16       	cp	r1, r24
    178a:	4c f5       	brge	.+82     	; 0x17de <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    178c:	6d a9       	ldd	r22, Y+53	; 0x35
    178e:	7e a9       	ldd	r23, Y+54	; 0x36
    1790:	8f a9       	ldd	r24, Y+55	; 0x37
    1792:	98 ad       	ldd	r25, Y+56	; 0x38
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	40 e2       	ldi	r20, 0x20	; 32
    179a:	51 e4       	ldi	r21, 0x41	; 65
    179c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	bc 01       	movw	r22, r24
    17a6:	cd 01       	movw	r24, r26
    17a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	98 ab       	std	Y+48, r25	; 0x30
    17b2:	8f a7       	std	Y+47, r24	; 0x2f
    17b4:	0f c0       	rjmp	.+30     	; 0x17d4 <CLCD_voidInit+0xc6>
    17b6:	88 ec       	ldi	r24, 0xC8	; 200
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	9e a7       	std	Y+46, r25	; 0x2e
    17bc:	8d a7       	std	Y+45, r24	; 0x2d
    17be:	8d a5       	ldd	r24, Y+45	; 0x2d
    17c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	f1 f7       	brne	.-4      	; 0x17c2 <CLCD_voidInit+0xb4>
    17c6:	9e a7       	std	Y+46, r25	; 0x2e
    17c8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    17cc:	98 a9       	ldd	r25, Y+48	; 0x30
    17ce:	01 97       	sbiw	r24, 0x01	; 1
    17d0:	98 ab       	std	Y+48, r25	; 0x30
    17d2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    17d6:	98 a9       	ldd	r25, Y+48	; 0x30
    17d8:	00 97       	sbiw	r24, 0x00	; 0
    17da:	69 f7       	brne	.-38     	; 0x17b6 <CLCD_voidInit+0xa8>
    17dc:	14 c0       	rjmp	.+40     	; 0x1806 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17de:	69 a9       	ldd	r22, Y+49	; 0x31
    17e0:	7a a9       	ldd	r23, Y+50	; 0x32
    17e2:	8b a9       	ldd	r24, Y+51	; 0x33
    17e4:	9c a9       	ldd	r25, Y+52	; 0x34
    17e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	98 ab       	std	Y+48, r25	; 0x30
    17f0:	8f a7       	std	Y+47, r24	; 0x2f
    17f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    17f4:	98 a9       	ldd	r25, Y+48	; 0x30
    17f6:	9c a7       	std	Y+44, r25	; 0x2c
    17f8:	8b a7       	std	Y+43, r24	; 0x2b
    17fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    17fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    17fe:	01 97       	sbiw	r24, 0x01	; 1
    1800:	f1 f7       	brne	.-4      	; 0x17fe <CLCD_voidInit+0xf0>
    1802:	9c a7       	std	Y+44, r25	; 0x2c
    1804:	8b a7       	std	Y+43, r24	; 0x2b
	CLCD_voidSendCommand(0b00000001);
#elif CLCD_CHIOCE_MODE==_4_BIT_MODE
	/*WAIT FOR MORE THEN 30 MS*/
	_delay_ms(40);
	/*function set command: Set Bit 5 */
	CLCD_voidSendCommand(0b00100000);
    1806:	80 e2       	ldi	r24, 0x20	; 32
    1808:	0e 94 04 08 	call	0x1008	; 0x1008 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(0b00100000);
    180c:	80 e2       	ldi	r24, 0x20	; 32
    180e:	0e 94 04 08 	call	0x1008	; 0x1008 <CLCD_voidSendCommand>

	/*function set command:(7_Bit) N --> Lines,(6_Bit) F --> 5*8 font */
	CLCD_voidSendCommand(0b10000000);
    1812:	80 e8       	ldi	r24, 0x80	; 128
    1814:	0e 94 04 08 	call	0x1008	; 0x1008 <CLCD_voidSendCommand>
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	a0 e8       	ldi	r26, 0x80	; 128
    181e:	bf e3       	ldi	r27, 0x3F	; 63
    1820:	8f a3       	std	Y+39, r24	; 0x27
    1822:	98 a7       	std	Y+40, r25	; 0x28
    1824:	a9 a7       	std	Y+41, r26	; 0x29
    1826:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1828:	6f a1       	ldd	r22, Y+39	; 0x27
    182a:	78 a5       	ldd	r23, Y+40	; 0x28
    182c:	89 a5       	ldd	r24, Y+41	; 0x29
    182e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	4a ef       	ldi	r20, 0xFA	; 250
    1836:	54 e4       	ldi	r21, 0x44	; 68
    1838:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	8b a3       	std	Y+35, r24	; 0x23
    1842:	9c a3       	std	Y+36, r25	; 0x24
    1844:	ad a3       	std	Y+37, r26	; 0x25
    1846:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1848:	6b a1       	ldd	r22, Y+35	; 0x23
    184a:	7c a1       	ldd	r23, Y+36	; 0x24
    184c:	8d a1       	ldd	r24, Y+37	; 0x25
    184e:	9e a1       	ldd	r25, Y+38	; 0x26
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	40 e8       	ldi	r20, 0x80	; 128
    1856:	5f e3       	ldi	r21, 0x3F	; 63
    1858:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    185c:	88 23       	and	r24, r24
    185e:	2c f4       	brge	.+10     	; 0x186a <CLCD_voidInit+0x15c>
		__ticks = 1;
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	9a a3       	std	Y+34, r25	; 0x22
    1866:	89 a3       	std	Y+33, r24	; 0x21
    1868:	3f c0       	rjmp	.+126    	; 0x18e8 <CLCD_voidInit+0x1da>
	else if (__tmp > 65535)
    186a:	6b a1       	ldd	r22, Y+35	; 0x23
    186c:	7c a1       	ldd	r23, Y+36	; 0x24
    186e:	8d a1       	ldd	r24, Y+37	; 0x25
    1870:	9e a1       	ldd	r25, Y+38	; 0x26
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	3f ef       	ldi	r19, 0xFF	; 255
    1876:	4f e7       	ldi	r20, 0x7F	; 127
    1878:	57 e4       	ldi	r21, 0x47	; 71
    187a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    187e:	18 16       	cp	r1, r24
    1880:	4c f5       	brge	.+82     	; 0x18d4 <CLCD_voidInit+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1882:	6f a1       	ldd	r22, Y+39	; 0x27
    1884:	78 a5       	ldd	r23, Y+40	; 0x28
    1886:	89 a5       	ldd	r24, Y+41	; 0x29
    1888:	9a a5       	ldd	r25, Y+42	; 0x2a
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	40 e2       	ldi	r20, 0x20	; 32
    1890:	51 e4       	ldi	r21, 0x41	; 65
    1892:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	bc 01       	movw	r22, r24
    189c:	cd 01       	movw	r24, r26
    189e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	9a a3       	std	Y+34, r25	; 0x22
    18a8:	89 a3       	std	Y+33, r24	; 0x21
    18aa:	0f c0       	rjmp	.+30     	; 0x18ca <CLCD_voidInit+0x1bc>
    18ac:	88 ec       	ldi	r24, 0xC8	; 200
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	98 a3       	std	Y+32, r25	; 0x20
    18b2:	8f 8f       	std	Y+31, r24	; 0x1f
    18b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18b6:	98 a1       	ldd	r25, Y+32	; 0x20
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	f1 f7       	brne	.-4      	; 0x18b8 <CLCD_voidInit+0x1aa>
    18bc:	98 a3       	std	Y+32, r25	; 0x20
    18be:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c0:	89 a1       	ldd	r24, Y+33	; 0x21
    18c2:	9a a1       	ldd	r25, Y+34	; 0x22
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	9a a3       	std	Y+34, r25	; 0x22
    18c8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ca:	89 a1       	ldd	r24, Y+33	; 0x21
    18cc:	9a a1       	ldd	r25, Y+34	; 0x22
    18ce:	00 97       	sbiw	r24, 0x00	; 0
    18d0:	69 f7       	brne	.-38     	; 0x18ac <CLCD_voidInit+0x19e>
    18d2:	14 c0       	rjmp	.+40     	; 0x18fc <CLCD_voidInit+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d4:	6b a1       	ldd	r22, Y+35	; 0x23
    18d6:	7c a1       	ldd	r23, Y+36	; 0x24
    18d8:	8d a1       	ldd	r24, Y+37	; 0x25
    18da:	9e a1       	ldd	r25, Y+38	; 0x26
    18dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	9a a3       	std	Y+34, r25	; 0x22
    18e6:	89 a3       	std	Y+33, r24	; 0x21
    18e8:	89 a1       	ldd	r24, Y+33	; 0x21
    18ea:	9a a1       	ldd	r25, Y+34	; 0x22
    18ec:	9e 8f       	std	Y+30, r25	; 0x1e
    18ee:	8d 8f       	std	Y+29, r24	; 0x1d
    18f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18f4:	01 97       	sbiw	r24, 0x01	; 1
    18f6:	f1 f7       	brne	.-4      	; 0x18f4 <CLCD_voidInit+0x1e6>
    18f8:	9e 8f       	std	Y+30, r25	; 0x1e
    18fa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	CLCD_voidSendCommand(0b0000);
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	0e 94 04 08 	call	0x1008	; 0x1008 <CLCD_voidSendCommand>
	/*Display No/00f ctrl  */
	/*Set Bit 7 ,(6_Bit) D --> display enable ,C --> disable cursor ,B --> no blink cursor*/
	CLCD_voidSendCommand(0b011000000);
    1902:	80 ec       	ldi	r24, 0xC0	; 192
    1904:	0e 94 04 08 	call	0x1008	; 0x1008 <CLCD_voidSendCommand>
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	a0 e8       	ldi	r26, 0x80	; 128
    190e:	bf e3       	ldi	r27, 0x3F	; 63
    1910:	89 8f       	std	Y+25, r24	; 0x19
    1912:	9a 8f       	std	Y+26, r25	; 0x1a
    1914:	ab 8f       	std	Y+27, r26	; 0x1b
    1916:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1918:	69 8d       	ldd	r22, Y+25	; 0x19
    191a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    191c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    191e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	4a ef       	ldi	r20, 0xFA	; 250
    1926:	54 e4       	ldi	r21, 0x44	; 68
    1928:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	8d 8b       	std	Y+21, r24	; 0x15
    1932:	9e 8b       	std	Y+22, r25	; 0x16
    1934:	af 8b       	std	Y+23, r26	; 0x17
    1936:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1938:	6d 89       	ldd	r22, Y+21	; 0x15
    193a:	7e 89       	ldd	r23, Y+22	; 0x16
    193c:	8f 89       	ldd	r24, Y+23	; 0x17
    193e:	98 8d       	ldd	r25, Y+24	; 0x18
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	40 e8       	ldi	r20, 0x80	; 128
    1946:	5f e3       	ldi	r21, 0x3F	; 63
    1948:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    194c:	88 23       	and	r24, r24
    194e:	2c f4       	brge	.+10     	; 0x195a <CLCD_voidInit+0x24c>
		__ticks = 1;
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	9c 8b       	std	Y+20, r25	; 0x14
    1956:	8b 8b       	std	Y+19, r24	; 0x13
    1958:	3f c0       	rjmp	.+126    	; 0x19d8 <CLCD_voidInit+0x2ca>
	else if (__tmp > 65535)
    195a:	6d 89       	ldd	r22, Y+21	; 0x15
    195c:	7e 89       	ldd	r23, Y+22	; 0x16
    195e:	8f 89       	ldd	r24, Y+23	; 0x17
    1960:	98 8d       	ldd	r25, Y+24	; 0x18
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	3f ef       	ldi	r19, 0xFF	; 255
    1966:	4f e7       	ldi	r20, 0x7F	; 127
    1968:	57 e4       	ldi	r21, 0x47	; 71
    196a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    196e:	18 16       	cp	r1, r24
    1970:	4c f5       	brge	.+82     	; 0x19c4 <CLCD_voidInit+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1972:	69 8d       	ldd	r22, Y+25	; 0x19
    1974:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1976:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1978:	9c 8d       	ldd	r25, Y+28	; 0x1c
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	40 e2       	ldi	r20, 0x20	; 32
    1980:	51 e4       	ldi	r21, 0x41	; 65
    1982:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	bc 01       	movw	r22, r24
    198c:	cd 01       	movw	r24, r26
    198e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	9c 8b       	std	Y+20, r25	; 0x14
    1998:	8b 8b       	std	Y+19, r24	; 0x13
    199a:	0f c0       	rjmp	.+30     	; 0x19ba <CLCD_voidInit+0x2ac>
    199c:	88 ec       	ldi	r24, 0xC8	; 200
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	9a 8b       	std	Y+18, r25	; 0x12
    19a2:	89 8b       	std	Y+17, r24	; 0x11
    19a4:	89 89       	ldd	r24, Y+17	; 0x11
    19a6:	9a 89       	ldd	r25, Y+18	; 0x12
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	f1 f7       	brne	.-4      	; 0x19a8 <CLCD_voidInit+0x29a>
    19ac:	9a 8b       	std	Y+18, r25	; 0x12
    19ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b0:	8b 89       	ldd	r24, Y+19	; 0x13
    19b2:	9c 89       	ldd	r25, Y+20	; 0x14
    19b4:	01 97       	sbiw	r24, 0x01	; 1
    19b6:	9c 8b       	std	Y+20, r25	; 0x14
    19b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ba:	8b 89       	ldd	r24, Y+19	; 0x13
    19bc:	9c 89       	ldd	r25, Y+20	; 0x14
    19be:	00 97       	sbiw	r24, 0x00	; 0
    19c0:	69 f7       	brne	.-38     	; 0x199c <CLCD_voidInit+0x28e>
    19c2:	14 c0       	rjmp	.+40     	; 0x19ec <CLCD_voidInit+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c4:	6d 89       	ldd	r22, Y+21	; 0x15
    19c6:	7e 89       	ldd	r23, Y+22	; 0x16
    19c8:	8f 89       	ldd	r24, Y+23	; 0x17
    19ca:	98 8d       	ldd	r25, Y+24	; 0x18
    19cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	9c 8b       	std	Y+20, r25	; 0x14
    19d6:	8b 8b       	std	Y+19, r24	; 0x13
    19d8:	8b 89       	ldd	r24, Y+19	; 0x13
    19da:	9c 89       	ldd	r25, Y+20	; 0x14
    19dc:	98 8b       	std	Y+16, r25	; 0x10
    19de:	8f 87       	std	Y+15, r24	; 0x0f
    19e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19e2:	98 89       	ldd	r25, Y+16	; 0x10
    19e4:	01 97       	sbiw	r24, 0x01	; 1
    19e6:	f1 f7       	brne	.-4      	; 0x19e4 <CLCD_voidInit+0x2d6>
    19e8:	98 8b       	std	Y+16, r25	; 0x10
    19ea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLCD_voidSendCommand(0b0000);
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	0e 94 04 08 	call	0x1008	; 0x1008 <CLCD_voidSendCommand>
	/*Display Clear */
	CLCD_voidSendCommand(0b00010000);
    19f2:	80 e1       	ldi	r24, 0x10	; 16
    19f4:	0e 94 04 08 	call	0x1008	; 0x1008 <CLCD_voidSendCommand>
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	a0 e0       	ldi	r26, 0x00	; 0
    19fe:	b0 e4       	ldi	r27, 0x40	; 64
    1a00:	8b 87       	std	Y+11, r24	; 0x0b
    1a02:	9c 87       	std	Y+12, r25	; 0x0c
    1a04:	ad 87       	std	Y+13, r26	; 0x0d
    1a06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	4a ef       	ldi	r20, 0xFA	; 250
    1a16:	54 e4       	ldi	r21, 0x44	; 68
    1a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	8f 83       	std	Y+7, r24	; 0x07
    1a22:	98 87       	std	Y+8, r25	; 0x08
    1a24:	a9 87       	std	Y+9, r26	; 0x09
    1a26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a28:	6f 81       	ldd	r22, Y+7	; 0x07
    1a2a:	78 85       	ldd	r23, Y+8	; 0x08
    1a2c:	89 85       	ldd	r24, Y+9	; 0x09
    1a2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	40 e8       	ldi	r20, 0x80	; 128
    1a36:	5f e3       	ldi	r21, 0x3F	; 63
    1a38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a3c:	88 23       	and	r24, r24
    1a3e:	2c f4       	brge	.+10     	; 0x1a4a <CLCD_voidInit+0x33c>
		__ticks = 1;
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	9e 83       	std	Y+6, r25	; 0x06
    1a46:	8d 83       	std	Y+5, r24	; 0x05
    1a48:	3f c0       	rjmp	.+126    	; 0x1ac8 <CLCD_voidInit+0x3ba>
	else if (__tmp > 65535)
    1a4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a4c:	78 85       	ldd	r23, Y+8	; 0x08
    1a4e:	89 85       	ldd	r24, Y+9	; 0x09
    1a50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	3f ef       	ldi	r19, 0xFF	; 255
    1a56:	4f e7       	ldi	r20, 0x7F	; 127
    1a58:	57 e4       	ldi	r21, 0x47	; 71
    1a5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a5e:	18 16       	cp	r1, r24
    1a60:	4c f5       	brge	.+82     	; 0x1ab4 <CLCD_voidInit+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	40 e2       	ldi	r20, 0x20	; 32
    1a70:	51 e4       	ldi	r21, 0x41	; 65
    1a72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	bc 01       	movw	r22, r24
    1a7c:	cd 01       	movw	r24, r26
    1a7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	9e 83       	std	Y+6, r25	; 0x06
    1a88:	8d 83       	std	Y+5, r24	; 0x05
    1a8a:	0f c0       	rjmp	.+30     	; 0x1aaa <CLCD_voidInit+0x39c>
    1a8c:	88 ec       	ldi	r24, 0xC8	; 200
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	9c 83       	std	Y+4, r25	; 0x04
    1a92:	8b 83       	std	Y+3, r24	; 0x03
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	9c 81       	ldd	r25, Y+4	; 0x04
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	f1 f7       	brne	.-4      	; 0x1a98 <CLCD_voidInit+0x38a>
    1a9c:	9c 83       	std	Y+4, r25	; 0x04
    1a9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa2:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	9e 83       	std	Y+6, r25	; 0x06
    1aa8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    1aac:	9e 81       	ldd	r25, Y+6	; 0x06
    1aae:	00 97       	sbiw	r24, 0x00	; 0
    1ab0:	69 f7       	brne	.-38     	; 0x1a8c <CLCD_voidInit+0x37e>
    1ab2:	14 c0       	rjmp	.+40     	; 0x1adc <CLCD_voidInit+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab6:	78 85       	ldd	r23, Y+8	; 0x08
    1ab8:	89 85       	ldd	r24, Y+9	; 0x09
    1aba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1abc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	9e 83       	std	Y+6, r25	; 0x06
    1ac6:	8d 83       	std	Y+5, r24	; 0x05
    1ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aca:	9e 81       	ldd	r25, Y+6	; 0x06
    1acc:	9a 83       	std	Y+2, r25	; 0x02
    1ace:	89 83       	std	Y+1, r24	; 0x01
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
    1ad2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad4:	01 97       	sbiw	r24, 0x01	; 1
    1ad6:	f1 f7       	brne	.-4      	; 0x1ad4 <CLCD_voidInit+0x3c6>
    1ad8:	9a 83       	std	Y+2, r25	; 0x02
    1ada:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	iniIsFinich=1;
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	80 93 3b 01 	sts	0x013B, r24
#else
#error "In correct cconfigrtion of LCD_MODE"
#endif
}
    1ae2:	e8 96       	adiw	r28, 0x38	; 56
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	f8 94       	cli
    1ae8:	de bf       	out	0x3e, r29	; 62
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	cd bf       	out	0x3d, r28	; 61
    1aee:	cf 91       	pop	r28
    1af0:	df 91       	pop	r29
    1af2:	08 95       	ret

00001af4 <CLCD_voidSendString>:
void CLCD_voidSendString(const char* Copy_pcString)//char ASCII Value Constant not allow the func to change the sent string
{
    1af4:	df 93       	push	r29
    1af6:	cf 93       	push	r28
    1af8:	00 d0       	rcall	.+0      	; 0x1afa <CLCD_voidSendString+0x6>
    1afa:	0f 92       	push	r0
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
    1b00:	9b 83       	std	Y+3, r25	; 0x03
    1b02:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8cnt=0;
    1b04:	19 82       	std	Y+1, r1	; 0x01
    1b06:	0e c0       	rjmp	.+28     	; 0x1b24 <CLCD_voidSendString+0x30>
	while(Copy_pcString[Local_u8cnt]!='\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8cnt]);
    1b08:	89 81       	ldd	r24, Y+1	; 0x01
    1b0a:	28 2f       	mov	r18, r24
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	9b 81       	ldd	r25, Y+3	; 0x03
    1b12:	fc 01       	movw	r30, r24
    1b14:	e2 0f       	add	r30, r18
    1b16:	f3 1f       	adc	r31, r19
    1b18:	80 81       	ld	r24, Z
    1b1a:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <CLCD_voidSendData>
		Local_u8cnt++;
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	8f 5f       	subi	r24, 0xFF	; 255
    1b22:	89 83       	std	Y+1, r24	; 0x01
#endif
}
void CLCD_voidSendString(const char* Copy_pcString)//char ASCII Value Constant not allow the func to change the sent string
{
	u8 Local_u8cnt=0;
	while(Copy_pcString[Local_u8cnt]!='\0')
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	28 2f       	mov	r18, r24
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b2e:	fc 01       	movw	r30, r24
    1b30:	e2 0f       	add	r30, r18
    1b32:	f3 1f       	adc	r31, r19
    1b34:	80 81       	ld	r24, Z
    1b36:	88 23       	and	r24, r24
    1b38:	39 f7       	brne	.-50     	; 0x1b08 <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8cnt]);
		Local_u8cnt++;
	}
}
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	cf 91       	pop	r28
    1b42:	df 91       	pop	r29
    1b44:	08 95       	ret

00001b46 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1b46:	df 93       	push	r29
    1b48:	cf 93       	push	r28
    1b4a:	00 d0       	rcall	.+0      	; 0x1b4c <CLCD_voidGoToXY+0x6>
    1b4c:	0f 92       	push	r0
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
    1b52:	8a 83       	std	Y+2, r24	; 0x02
    1b54:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
    1b56:	8a 81       	ldd	r24, Y+2	; 0x02
    1b58:	88 23       	and	r24, r24
    1b5a:	51 f4       	brne	.+20     	; 0x1b70 <CLCD_voidGoToXY+0x2a>
	{
		if (Copy_u8YPos > 15) {
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	80 31       	cpi	r24, 0x10	; 16
    1b60:	20 f0       	brcs	.+8      	; 0x1b6a <CLCD_voidGoToXY+0x24>
			Local_u8Address = 0x40 + Copy_u8YPos;
    1b62:	8b 81       	ldd	r24, Y+3	; 0x03
    1b64:	80 5c       	subi	r24, 0xC0	; 192
    1b66:	89 83       	std	Y+1, r24	; 0x01
    1b68:	09 c0       	rjmp	.+18     	; 0x1b7c <CLCD_voidGoToXY+0x36>
		} else {
			Local_u8Address = Copy_u8YPos;
    1b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6c:	89 83       	std	Y+1, r24	; 0x01
    1b6e:	06 c0       	rjmp	.+12     	; 0x1b7c <CLCD_voidGoToXY+0x36>
		}
	}
	else if(Copy_u8XPos==1)
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
    1b72:	81 30       	cpi	r24, 0x01	; 1
    1b74:	19 f4       	brne	.+6      	; 0x1b7c <CLCD_voidGoToXY+0x36>
	{
		Local_u8Address=0x40+Copy_u8YPos;
    1b76:	8b 81       	ldd	r24, Y+3	; 0x03
    1b78:	80 5c       	subi	r24, 0xC0	; 192
    1b7a:	89 83       	std	Y+1, r24	; 0x01
	}
	//put command from data sheet
	CLCD_voidSendCommand(Local_u8Address+128);
    1b7c:	89 81       	ldd	r24, Y+1	; 0x01
    1b7e:	80 58       	subi	r24, 0x80	; 128
    1b80:	0e 94 04 08 	call	0x1008	; 0x1008 <CLCD_voidSendCommand>
}
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	cf 91       	pop	r28
    1b8c:	df 91       	pop	r29
    1b8e:	08 95       	ret

00001b90 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNmber,u8 Copy_u8XPos,u8 Copy_u8Ypos)
{
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
    1b98:	27 97       	sbiw	r28, 0x07	; 7
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	f8 94       	cli
    1b9e:	de bf       	out	0x3e, r29	; 62
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	cd bf       	out	0x3d, r28	; 61
    1ba4:	9c 83       	std	Y+4, r25	; 0x04
    1ba6:	8b 83       	std	Y+3, r24	; 0x03
    1ba8:	6d 83       	std	Y+5, r22	; 0x05
    1baa:	4e 83       	std	Y+6, r20	; 0x06
    1bac:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress=0;
    1bae:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8iterator;
	/*Calculate the CGRAM address whose each block is 8 bytes */
	Local_u8CGRAMAddress= Copy_u8PatternNmber*8;
    1bb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb2:	88 2f       	mov	r24, r24
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	88 0f       	add	r24, r24
    1bb8:	99 1f       	adc	r25, r25
    1bba:	88 0f       	add	r24, r24
    1bbc:	99 1f       	adc	r25, r25
    1bbe:	88 0f       	add	r24, r24
    1bc0:	99 1f       	adc	r25, r25
    1bc2:	8a 83       	std	Y+2, r24	; 0x02

	/*Send CGRAM address command to LCD, with setting bit 6 , clear bit 7 */
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
    1bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc6:	80 5c       	subi	r24, 0xC0	; 192
    1bc8:	0e 94 04 08 	call	0x1008	; 0x1008 <CLCD_voidSendCommand>

	/*Write the pattern into CGRAM */
	for(Local_u8iterator=0;Local_u8iterator<8;Local_u8iterator++)
    1bcc:	19 82       	std	Y+1, r1	; 0x01
    1bce:	0e c0       	rjmp	.+28     	; 0x1bec <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8iterator]);
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	28 2f       	mov	r18, r24
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bda:	fc 01       	movw	r30, r24
    1bdc:	e2 0f       	add	r30, r18
    1bde:	f3 1f       	adc	r31, r19
    1be0:	80 81       	ld	r24, Z
    1be2:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <CLCD_voidSendData>

	/*Send CGRAM address command to LCD, with setting bit 6 , clear bit 7 */
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/*Write the pattern into CGRAM */
	for(Local_u8iterator=0;Local_u8iterator<8;Local_u8iterator++)
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	8f 5f       	subi	r24, 0xFF	; 255
    1bea:	89 83       	std	Y+1, r24	; 0x01
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	88 30       	cpi	r24, 0x08	; 8
    1bf0:	78 f3       	brcs	.-34     	; 0x1bd0 <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8iterator]);
	}
	/* Go back to DDRAM to display the pattern */
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8Ypos);
    1bf2:	8e 81       	ldd	r24, Y+6	; 0x06
    1bf4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf6:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <CLCD_voidGoToXY>

	/* Display the pattern written  in the CGRAM */
	CLCD_voidSendData(Copy_u8PatternNmber);
    1bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfc:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <CLCD_voidSendData>

}
    1c00:	27 96       	adiw	r28, 0x07	; 7
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	de bf       	out	0x3e, r29	; 62
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	cd bf       	out	0x3d, r28	; 61
    1c0c:	cf 91       	pop	r28
    1c0e:	df 91       	pop	r29
    1c10:	08 95       	ret

00001c12 <CLCD_voidWriteNumber>:

void CLCD_voidWriteNumber(u16 Copy_u16Number)
{
    1c12:	df 93       	push	r29
    1c14:	cf 93       	push	r28
    1c16:	00 d0       	rcall	.+0      	; 0x1c18 <CLCD_voidWriteNumber+0x6>
    1c18:	00 d0       	rcall	.+0      	; 0x1c1a <CLCD_voidWriteNumber+0x8>
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
    1c1e:	9c 83       	std	Y+4, r25	; 0x04
    1c20:	8b 83       	std	Y+3, r24	; 0x03

	u8 Max_Digits = Num_length(Copy_u16Number);
    1c22:	8b 81       	ldd	r24, Y+3	; 0x03
    1c24:	9c 81       	ldd	r25, Y+4	; 0x04
    1c26:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <Num_length>
    1c2a:	8a 83       	std	Y+2, r24	; 0x02
	for (s8 i = Max_Digits; i > 0; i--) {
    1c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2e:	89 83       	std	Y+1, r24	; 0x01
    1c30:	1d c0       	rjmp	.+58     	; 0x1c6c <CLCD_voidWriteNumber+0x5a>
		CLCD_voidSendData((Copy_u16Number / Multi_N_10(i - 1)) + '0');
    1c32:	89 81       	ldd	r24, Y+1	; 0x01
    1c34:	81 50       	subi	r24, 0x01	; 1
    1c36:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <Multi_N_10>
    1c3a:	9c 01       	movw	r18, r24
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c40:	b9 01       	movw	r22, r18
    1c42:	0e 94 8d 1a 	call	0x351a	; 0x351a <__udivmodhi4>
    1c46:	cb 01       	movw	r24, r22
    1c48:	80 5d       	subi	r24, 0xD0	; 208
    1c4a:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <CLCD_voidSendData>
		Copy_u16Number = (Copy_u16Number % Multi_N_10(i - 1));
    1c4e:	89 81       	ldd	r24, Y+1	; 0x01
    1c50:	81 50       	subi	r24, 0x01	; 1
    1c52:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <Multi_N_10>
    1c56:	9c 01       	movw	r18, r24
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5c:	b9 01       	movw	r22, r18
    1c5e:	0e 94 8d 1a 	call	0x351a	; 0x351a <__udivmodhi4>
    1c62:	9c 83       	std	Y+4, r25	; 0x04
    1c64:	8b 83       	std	Y+3, r24	; 0x03

void CLCD_voidWriteNumber(u16 Copy_u16Number)
{

	u8 Max_Digits = Num_length(Copy_u16Number);
	for (s8 i = Max_Digits; i > 0; i--) {
    1c66:	89 81       	ldd	r24, Y+1	; 0x01
    1c68:	81 50       	subi	r24, 0x01	; 1
    1c6a:	89 83       	std	Y+1, r24	; 0x01
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
    1c6e:	18 16       	cp	r1, r24
    1c70:	04 f3       	brlt	.-64     	; 0x1c32 <CLCD_voidWriteNumber+0x20>
		CLCD_voidSendData((Copy_u16Number / Multi_N_10(i - 1)) + '0');
		Copy_u16Number = (Copy_u16Number % Multi_N_10(i - 1));
	}
}
    1c72:	0f 90       	pop	r0
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	cf 91       	pop	r28
    1c7c:	df 91       	pop	r29
    1c7e:	08 95       	ret

00001c80 <Num_length>:


static u8 Num_length(u16 num) {
    1c80:	df 93       	push	r29
    1c82:	cf 93       	push	r28
    1c84:	00 d0       	rcall	.+0      	; 0x1c86 <Num_length+0x6>
    1c86:	00 d0       	rcall	.+0      	; 0x1c88 <Num_length+0x8>
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	9b 83       	std	Y+3, r25	; 0x03
    1c8e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Cnt = 0;
    1c90:	19 82       	std	Y+1, r1	; 0x01
	if(num == 0)
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	9b 81       	ldd	r25, Y+3	; 0x03
    1c96:	00 97       	sbiw	r24, 0x00	; 0
    1c98:	79 f4       	brne	.+30     	; 0x1cb8 <Num_length+0x38>
		return 0;
    1c9a:	1c 82       	std	Y+4, r1	; 0x04
    1c9c:	13 c0       	rjmp	.+38     	; 0x1cc4 <Num_length+0x44>
	while (num != 0) {
		num /= 10;
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca2:	2a e0       	ldi	r18, 0x0A	; 10
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	b9 01       	movw	r22, r18
    1ca8:	0e 94 8d 1a 	call	0x351a	; 0x351a <__udivmodhi4>
    1cac:	cb 01       	movw	r24, r22
    1cae:	9b 83       	std	Y+3, r25	; 0x03
    1cb0:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8Cnt++;
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	8f 5f       	subi	r24, 0xFF	; 255
    1cb6:	89 83       	std	Y+1, r24	; 0x01

static u8 Num_length(u16 num) {
	u8 Local_u8Cnt = 0;
	if(num == 0)
		return 0;
	while (num != 0) {
    1cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cba:	9b 81       	ldd	r25, Y+3	; 0x03
    1cbc:	00 97       	sbiw	r24, 0x00	; 0
    1cbe:	79 f7       	brne	.-34     	; 0x1c9e <Num_length+0x1e>
		num /= 10;
		Local_u8Cnt++;
	}
	return Local_u8Cnt;
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	8c 83       	std	Y+4, r24	; 0x04
    1cc4:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	cf 91       	pop	r28
    1cd0:	df 91       	pop	r29
    1cd2:	08 95       	ret

00001cd4 <Multi_N_10>:
static u16 Multi_N_10(u8 N) {
    1cd4:	df 93       	push	r29
    1cd6:	cf 93       	push	r28
    1cd8:	00 d0       	rcall	.+0      	; 0x1cda <Multi_N_10+0x6>
    1cda:	00 d0       	rcall	.+0      	; 0x1cdc <Multi_N_10+0x8>
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
    1ce0:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8Cnt;
	u16 p = 1;
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	9a 83       	std	Y+2, r25	; 0x02
    1ce8:	89 83       	std	Y+1, r24	; 0x01
	for (Local_u8Cnt = 0; Local_u8Cnt < N; Local_u8Cnt++)
    1cea:	1b 82       	std	Y+3, r1	; 0x03
    1cec:	11 c0       	rjmp	.+34     	; 0x1d10 <Multi_N_10+0x3c>
		p *= 10;
    1cee:	89 81       	ldd	r24, Y+1	; 0x01
    1cf0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf2:	9c 01       	movw	r18, r24
    1cf4:	22 0f       	add	r18, r18
    1cf6:	33 1f       	adc	r19, r19
    1cf8:	c9 01       	movw	r24, r18
    1cfa:	88 0f       	add	r24, r24
    1cfc:	99 1f       	adc	r25, r25
    1cfe:	88 0f       	add	r24, r24
    1d00:	99 1f       	adc	r25, r25
    1d02:	82 0f       	add	r24, r18
    1d04:	93 1f       	adc	r25, r19
    1d06:	9a 83       	std	Y+2, r25	; 0x02
    1d08:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8Cnt;
}
static u16 Multi_N_10(u8 N) {
	u8 Local_u8Cnt;
	u16 p = 1;
	for (Local_u8Cnt = 0; Local_u8Cnt < N; Local_u8Cnt++)
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	8f 5f       	subi	r24, 0xFF	; 255
    1d0e:	8b 83       	std	Y+3, r24	; 0x03
    1d10:	9b 81       	ldd	r25, Y+3	; 0x03
    1d12:	8c 81       	ldd	r24, Y+4	; 0x04
    1d14:	98 17       	cp	r25, r24
    1d16:	58 f3       	brcs	.-42     	; 0x1cee <Multi_N_10+0x1a>
		p *= 10;
	return p;
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	cf 91       	pop	r28
    1d26:	df 91       	pop	r29
    1d28:	08 95       	ret

00001d2a <DIO_u8SetPinValue>:
#include "DIO_interface.h"



u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
    1d2a:	df 93       	push	r29
    1d2c:	cf 93       	push	r28
    1d2e:	cd b7       	in	r28, 0x3d	; 61
    1d30:	de b7       	in	r29, 0x3e	; 62
    1d32:	28 97       	sbiw	r28, 0x08	; 8
    1d34:	0f b6       	in	r0, 0x3f	; 63
    1d36:	f8 94       	cli
    1d38:	de bf       	out	0x3e, r29	; 62
    1d3a:	0f be       	out	0x3f, r0	; 63
    1d3c:	cd bf       	out	0x3d, r28	; 61
    1d3e:	8a 83       	std	Y+2, r24	; 0x02
    1d40:	6b 83       	std	Y+3, r22	; 0x03
    1d42:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1d44:	19 82       	std	Y+1, r1	; 0x01
	if(DIO_PIN_HIGH==Copy_u8Value)
    1d46:	8c 81       	ldd	r24, Y+4	; 0x04
    1d48:	81 30       	cpi	r24, 0x01	; 1
    1d4a:	09 f0       	breq	.+2      	; 0x1d4e <DIO_u8SetPinValue+0x24>
    1d4c:	75 c0       	rjmp	.+234    	; 0x1e38 <DIO_u8SetPinValue+0x10e>
	{
		if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    1d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d50:	88 30       	cpi	r24, 0x08	; 8
    1d52:	08 f0       	brcs	.+2      	; 0x1d56 <DIO_u8SetPinValue+0x2c>
    1d54:	6e c0       	rjmp	.+220    	; 0x1e32 <DIO_u8SetPinValue+0x108>
		{
			switch(Copy_u8Port)
    1d56:	8a 81       	ldd	r24, Y+2	; 0x02
    1d58:	28 2f       	mov	r18, r24
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	38 87       	std	Y+8, r19	; 0x08
    1d5e:	2f 83       	std	Y+7, r18	; 0x07
    1d60:	8f 81       	ldd	r24, Y+7	; 0x07
    1d62:	98 85       	ldd	r25, Y+8	; 0x08
    1d64:	81 30       	cpi	r24, 0x01	; 1
    1d66:	91 05       	cpc	r25, r1
    1d68:	41 f1       	breq	.+80     	; 0x1dba <DIO_u8SetPinValue+0x90>
    1d6a:	2f 81       	ldd	r18, Y+7	; 0x07
    1d6c:	38 85       	ldd	r19, Y+8	; 0x08
    1d6e:	22 30       	cpi	r18, 0x02	; 2
    1d70:	31 05       	cpc	r19, r1
    1d72:	2c f4       	brge	.+10     	; 0x1d7e <DIO_u8SetPinValue+0x54>
    1d74:	8f 81       	ldd	r24, Y+7	; 0x07
    1d76:	98 85       	ldd	r25, Y+8	; 0x08
    1d78:	00 97       	sbiw	r24, 0x00	; 0
    1d7a:	61 f0       	breq	.+24     	; 0x1d94 <DIO_u8SetPinValue+0x6a>
    1d7c:	57 c0       	rjmp	.+174    	; 0x1e2c <DIO_u8SetPinValue+0x102>
    1d7e:	2f 81       	ldd	r18, Y+7	; 0x07
    1d80:	38 85       	ldd	r19, Y+8	; 0x08
    1d82:	22 30       	cpi	r18, 0x02	; 2
    1d84:	31 05       	cpc	r19, r1
    1d86:	61 f1       	breq	.+88     	; 0x1de0 <DIO_u8SetPinValue+0xb6>
    1d88:	8f 81       	ldd	r24, Y+7	; 0x07
    1d8a:	98 85       	ldd	r25, Y+8	; 0x08
    1d8c:	83 30       	cpi	r24, 0x03	; 3
    1d8e:	91 05       	cpc	r25, r1
    1d90:	d1 f1       	breq	.+116    	; 0x1e06 <DIO_u8SetPinValue+0xdc>
    1d92:	4c c0       	rjmp	.+152    	; 0x1e2c <DIO_u8SetPinValue+0x102>
			{
				case DIO_PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
    1d94:	ab e3       	ldi	r26, 0x3B	; 59
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	eb e3       	ldi	r30, 0x3B	; 59
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	40 81       	ld	r20, Z
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	28 2f       	mov	r18, r24
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	02 2e       	mov	r0, r18
    1daa:	02 c0       	rjmp	.+4      	; 0x1db0 <DIO_u8SetPinValue+0x86>
    1dac:	88 0f       	add	r24, r24
    1dae:	99 1f       	adc	r25, r25
    1db0:	0a 94       	dec	r0
    1db2:	e2 f7       	brpl	.-8      	; 0x1dac <DIO_u8SetPinValue+0x82>
    1db4:	84 0f       	add	r24, r20
    1db6:	8c 93       	st	X, r24
    1db8:	c3 c0       	rjmp	.+390    	; 0x1f40 <DIO_u8SetPinValue+0x216>
				case DIO_PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
    1dba:	a8 e3       	ldi	r26, 0x38	; 56
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	e8 e3       	ldi	r30, 0x38	; 56
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	40 81       	ld	r20, Z
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	28 2f       	mov	r18, r24
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	02 2e       	mov	r0, r18
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <DIO_u8SetPinValue+0xac>
    1dd2:	88 0f       	add	r24, r24
    1dd4:	99 1f       	adc	r25, r25
    1dd6:	0a 94       	dec	r0
    1dd8:	e2 f7       	brpl	.-8      	; 0x1dd2 <DIO_u8SetPinValue+0xa8>
    1dda:	84 0f       	add	r24, r20
    1ddc:	8c 93       	st	X, r24
    1dde:	b0 c0       	rjmp	.+352    	; 0x1f40 <DIO_u8SetPinValue+0x216>
				case DIO_PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
    1de0:	a5 e3       	ldi	r26, 0x35	; 53
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	e5 e3       	ldi	r30, 0x35	; 53
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	40 81       	ld	r20, Z
    1dea:	8b 81       	ldd	r24, Y+3	; 0x03
    1dec:	28 2f       	mov	r18, r24
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	02 2e       	mov	r0, r18
    1df6:	02 c0       	rjmp	.+4      	; 0x1dfc <DIO_u8SetPinValue+0xd2>
    1df8:	88 0f       	add	r24, r24
    1dfa:	99 1f       	adc	r25, r25
    1dfc:	0a 94       	dec	r0
    1dfe:	e2 f7       	brpl	.-8      	; 0x1df8 <DIO_u8SetPinValue+0xce>
    1e00:	84 0f       	add	r24, r20
    1e02:	8c 93       	st	X, r24
    1e04:	9d c0       	rjmp	.+314    	; 0x1f40 <DIO_u8SetPinValue+0x216>
				case DIO_PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
    1e06:	a2 e3       	ldi	r26, 0x32	; 50
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e2 e3       	ldi	r30, 0x32	; 50
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	40 81       	ld	r20, Z
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	28 2f       	mov	r18, r24
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	02 2e       	mov	r0, r18
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <DIO_u8SetPinValue+0xf8>
    1e1e:	88 0f       	add	r24, r24
    1e20:	99 1f       	adc	r25, r25
    1e22:	0a 94       	dec	r0
    1e24:	e2 f7       	brpl	.-8      	; 0x1e1e <DIO_u8SetPinValue+0xf4>
    1e26:	84 0f       	add	r24, r20
    1e28:	8c 93       	st	X, r24
    1e2a:	8a c0       	rjmp	.+276    	; 0x1f40 <DIO_u8SetPinValue+0x216>
				default: Local_u8ErrorState=1;				
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	89 83       	std	Y+1, r24	; 0x01
    1e30:	87 c0       	rjmp	.+270    	; 0x1f40 <DIO_u8SetPinValue+0x216>
			}
		}
		else
			Local_u8ErrorState=1;
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	89 83       	std	Y+1, r24	; 0x01
    1e36:	84 c0       	rjmp	.+264    	; 0x1f40 <DIO_u8SetPinValue+0x216>
	}
	else if(DIO_PIN_LOW==Copy_u8Value)
    1e38:	8c 81       	ldd	r24, Y+4	; 0x04
    1e3a:	88 23       	and	r24, r24
    1e3c:	09 f0       	breq	.+2      	; 0x1e40 <DIO_u8SetPinValue+0x116>
    1e3e:	7e c0       	rjmp	.+252    	; 0x1f3c <DIO_u8SetPinValue+0x212>
	{
		if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	88 30       	cpi	r24, 0x08	; 8
    1e44:	08 f0       	brcs	.+2      	; 0x1e48 <DIO_u8SetPinValue+0x11e>
    1e46:	77 c0       	rjmp	.+238    	; 0x1f36 <DIO_u8SetPinValue+0x20c>
		{
			switch(Copy_u8Port)
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4a:	28 2f       	mov	r18, r24
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	3e 83       	std	Y+6, r19	; 0x06
    1e50:	2d 83       	std	Y+5, r18	; 0x05
    1e52:	8d 81       	ldd	r24, Y+5	; 0x05
    1e54:	9e 81       	ldd	r25, Y+6	; 0x06
    1e56:	81 30       	cpi	r24, 0x01	; 1
    1e58:	91 05       	cpc	r25, r1
    1e5a:	59 f1       	breq	.+86     	; 0x1eb2 <DIO_u8SetPinValue+0x188>
    1e5c:	2d 81       	ldd	r18, Y+5	; 0x05
    1e5e:	3e 81       	ldd	r19, Y+6	; 0x06
    1e60:	22 30       	cpi	r18, 0x02	; 2
    1e62:	31 05       	cpc	r19, r1
    1e64:	2c f4       	brge	.+10     	; 0x1e70 <DIO_u8SetPinValue+0x146>
    1e66:	8d 81       	ldd	r24, Y+5	; 0x05
    1e68:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6a:	00 97       	sbiw	r24, 0x00	; 0
    1e6c:	69 f0       	breq	.+26     	; 0x1e88 <DIO_u8SetPinValue+0x15e>
    1e6e:	60 c0       	rjmp	.+192    	; 0x1f30 <DIO_u8SetPinValue+0x206>
    1e70:	2d 81       	ldd	r18, Y+5	; 0x05
    1e72:	3e 81       	ldd	r19, Y+6	; 0x06
    1e74:	22 30       	cpi	r18, 0x02	; 2
    1e76:	31 05       	cpc	r19, r1
    1e78:	89 f1       	breq	.+98     	; 0x1edc <DIO_u8SetPinValue+0x1b2>
    1e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7e:	83 30       	cpi	r24, 0x03	; 3
    1e80:	91 05       	cpc	r25, r1
    1e82:	09 f4       	brne	.+2      	; 0x1e86 <DIO_u8SetPinValue+0x15c>
    1e84:	40 c0       	rjmp	.+128    	; 0x1f06 <DIO_u8SetPinValue+0x1dc>
    1e86:	54 c0       	rjmp	.+168    	; 0x1f30 <DIO_u8SetPinValue+0x206>
			{
				case DIO_PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
    1e88:	ab e3       	ldi	r26, 0x3B	; 59
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	eb e3       	ldi	r30, 0x3B	; 59
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 81       	ld	r24, Z
    1e92:	48 2f       	mov	r20, r24
    1e94:	8b 81       	ldd	r24, Y+3	; 0x03
    1e96:	28 2f       	mov	r18, r24
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	02 2e       	mov	r0, r18
    1ea0:	02 c0       	rjmp	.+4      	; 0x1ea6 <DIO_u8SetPinValue+0x17c>
    1ea2:	88 0f       	add	r24, r24
    1ea4:	99 1f       	adc	r25, r25
    1ea6:	0a 94       	dec	r0
    1ea8:	e2 f7       	brpl	.-8      	; 0x1ea2 <DIO_u8SetPinValue+0x178>
    1eaa:	80 95       	com	r24
    1eac:	84 23       	and	r24, r20
    1eae:	8c 93       	st	X, r24
    1eb0:	47 c0       	rjmp	.+142    	; 0x1f40 <DIO_u8SetPinValue+0x216>
				case DIO_PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
    1eb2:	a8 e3       	ldi	r26, 0x38	; 56
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	e8 e3       	ldi	r30, 0x38	; 56
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	48 2f       	mov	r20, r24
    1ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec0:	28 2f       	mov	r18, r24
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	02 2e       	mov	r0, r18
    1eca:	02 c0       	rjmp	.+4      	; 0x1ed0 <DIO_u8SetPinValue+0x1a6>
    1ecc:	88 0f       	add	r24, r24
    1ece:	99 1f       	adc	r25, r25
    1ed0:	0a 94       	dec	r0
    1ed2:	e2 f7       	brpl	.-8      	; 0x1ecc <DIO_u8SetPinValue+0x1a2>
    1ed4:	80 95       	com	r24
    1ed6:	84 23       	and	r24, r20
    1ed8:	8c 93       	st	X, r24
    1eda:	32 c0       	rjmp	.+100    	; 0x1f40 <DIO_u8SetPinValue+0x216>
				case DIO_PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
    1edc:	a5 e3       	ldi	r26, 0x35	; 53
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	e5 e3       	ldi	r30, 0x35	; 53
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	48 2f       	mov	r20, r24
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	28 2f       	mov	r18, r24
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	02 2e       	mov	r0, r18
    1ef4:	02 c0       	rjmp	.+4      	; 0x1efa <DIO_u8SetPinValue+0x1d0>
    1ef6:	88 0f       	add	r24, r24
    1ef8:	99 1f       	adc	r25, r25
    1efa:	0a 94       	dec	r0
    1efc:	e2 f7       	brpl	.-8      	; 0x1ef6 <DIO_u8SetPinValue+0x1cc>
    1efe:	80 95       	com	r24
    1f00:	84 23       	and	r24, r20
    1f02:	8c 93       	st	X, r24
    1f04:	1d c0       	rjmp	.+58     	; 0x1f40 <DIO_u8SetPinValue+0x216>
				case DIO_PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
    1f06:	a2 e3       	ldi	r26, 0x32	; 50
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	e2 e3       	ldi	r30, 0x32	; 50
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	48 2f       	mov	r20, r24
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	28 2f       	mov	r18, r24
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	02 2e       	mov	r0, r18
    1f1e:	02 c0       	rjmp	.+4      	; 0x1f24 <DIO_u8SetPinValue+0x1fa>
    1f20:	88 0f       	add	r24, r24
    1f22:	99 1f       	adc	r25, r25
    1f24:	0a 94       	dec	r0
    1f26:	e2 f7       	brpl	.-8      	; 0x1f20 <DIO_u8SetPinValue+0x1f6>
    1f28:	80 95       	com	r24
    1f2a:	84 23       	and	r24, r20
    1f2c:	8c 93       	st	X, r24
    1f2e:	08 c0       	rjmp	.+16     	; 0x1f40 <DIO_u8SetPinValue+0x216>
				default: Local_u8ErrorState=1;	
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	89 83       	std	Y+1, r24	; 0x01
    1f34:	05 c0       	rjmp	.+10     	; 0x1f40 <DIO_u8SetPinValue+0x216>
			}
		}
		else
			Local_u8ErrorState=1;	
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	89 83       	std	Y+1, r24	; 0x01
    1f3a:	02 c0       	rjmp	.+4      	; 0x1f40 <DIO_u8SetPinValue+0x216>
	}
	else
		Local_u8ErrorState=1;	
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f42:	28 96       	adiw	r28, 0x08	; 8
    1f44:	0f b6       	in	r0, 0x3f	; 63
    1f46:	f8 94       	cli
    1f48:	de bf       	out	0x3e, r29	; 62
    1f4a:	0f be       	out	0x3f, r0	; 63
    1f4c:	cd bf       	out	0x3d, r28	; 61
    1f4e:	cf 91       	pop	r28
    1f50:	df 91       	pop	r29
    1f52:	08 95       	ret

00001f54 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    1f54:	df 93       	push	r29
    1f56:	cf 93       	push	r28
    1f58:	00 d0       	rcall	.+0      	; 0x1f5a <DIO_u8SetPortValue+0x6>
    1f5a:	00 d0       	rcall	.+0      	; 0x1f5c <DIO_u8SetPortValue+0x8>
    1f5c:	0f 92       	push	r0
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
    1f62:	8a 83       	std	Y+2, r24	; 0x02
    1f64:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1f66:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    1f68:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6a:	28 2f       	mov	r18, r24
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	3d 83       	std	Y+5, r19	; 0x05
    1f70:	2c 83       	std	Y+4, r18	; 0x04
    1f72:	8c 81       	ldd	r24, Y+4	; 0x04
    1f74:	9d 81       	ldd	r25, Y+5	; 0x05
    1f76:	81 30       	cpi	r24, 0x01	; 1
    1f78:	91 05       	cpc	r25, r1
    1f7a:	d1 f0       	breq	.+52     	; 0x1fb0 <DIO_u8SetPortValue+0x5c>
    1f7c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f7e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f80:	22 30       	cpi	r18, 0x02	; 2
    1f82:	31 05       	cpc	r19, r1
    1f84:	2c f4       	brge	.+10     	; 0x1f90 <DIO_u8SetPortValue+0x3c>
    1f86:	8c 81       	ldd	r24, Y+4	; 0x04
    1f88:	9d 81       	ldd	r25, Y+5	; 0x05
    1f8a:	00 97       	sbiw	r24, 0x00	; 0
    1f8c:	61 f0       	breq	.+24     	; 0x1fa6 <DIO_u8SetPortValue+0x52>
    1f8e:	1f c0       	rjmp	.+62     	; 0x1fce <DIO_u8SetPortValue+0x7a>
    1f90:	2c 81       	ldd	r18, Y+4	; 0x04
    1f92:	3d 81       	ldd	r19, Y+5	; 0x05
    1f94:	22 30       	cpi	r18, 0x02	; 2
    1f96:	31 05       	cpc	r19, r1
    1f98:	81 f0       	breq	.+32     	; 0x1fba <DIO_u8SetPortValue+0x66>
    1f9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f9e:	83 30       	cpi	r24, 0x03	; 3
    1fa0:	91 05       	cpc	r25, r1
    1fa2:	81 f0       	breq	.+32     	; 0x1fc4 <DIO_u8SetPortValue+0x70>
    1fa4:	14 c0       	rjmp	.+40     	; 0x1fce <DIO_u8SetPortValue+0x7a>
	{
		case DIO_PORTA:PORTA=Copy_u8Value;break;
    1fa6:	eb e3       	ldi	r30, 0x3B	; 59
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	80 83       	st	Z, r24
    1fae:	11 c0       	rjmp	.+34     	; 0x1fd2 <DIO_u8SetPortValue+0x7e>
		case DIO_PORTB:PORTB=Copy_u8Value;break;
    1fb0:	e8 e3       	ldi	r30, 0x38	; 56
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb6:	80 83       	st	Z, r24
    1fb8:	0c c0       	rjmp	.+24     	; 0x1fd2 <DIO_u8SetPortValue+0x7e>
		case DIO_PORTC:PORTC=Copy_u8Value;break;
    1fba:	e5 e3       	ldi	r30, 0x35	; 53
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	80 83       	st	Z, r24
    1fc2:	07 c0       	rjmp	.+14     	; 0x1fd2 <DIO_u8SetPortValue+0x7e>
		case DIO_PORTD:PORTD=Copy_u8Value;break;
    1fc4:	e2 e3       	ldi	r30, 0x32	; 50
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fca:	80 83       	st	Z, r24
    1fcc:	02 c0       	rjmp	.+4      	; 0x1fd2 <DIO_u8SetPortValue+0x7e>
		default: Local_u8ErrorState=1;	
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1fd2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fd4:	0f 90       	pop	r0
    1fd6:	0f 90       	pop	r0
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	08 95       	ret

00001fe4 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 *Copy_pu8Value)
{
    1fe4:	df 93       	push	r29
    1fe6:	cf 93       	push	r28
    1fe8:	cd b7       	in	r28, 0x3d	; 61
    1fea:	de b7       	in	r29, 0x3e	; 62
    1fec:	27 97       	sbiw	r28, 0x07	; 7
    1fee:	0f b6       	in	r0, 0x3f	; 63
    1ff0:	f8 94       	cli
    1ff2:	de bf       	out	0x3e, r29	; 62
    1ff4:	0f be       	out	0x3f, r0	; 63
    1ff6:	cd bf       	out	0x3d, r28	; 61
    1ff8:	8a 83       	std	Y+2, r24	; 0x02
    1ffa:	6b 83       	std	Y+3, r22	; 0x03
    1ffc:	5d 83       	std	Y+5, r21	; 0x05
    1ffe:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    2000:	19 82       	std	Y+1, r1	; 0x01
	if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    2002:	8b 81       	ldd	r24, Y+3	; 0x03
    2004:	88 30       	cpi	r24, 0x08	; 8
    2006:	08 f0       	brcs	.+2      	; 0x200a <DIO_u8GetPinValue+0x26>
    2008:	74 c0       	rjmp	.+232    	; 0x20f2 <DIO_u8GetPinValue+0x10e>
	{
		switch(Copy_u8Port)
    200a:	8a 81       	ldd	r24, Y+2	; 0x02
    200c:	28 2f       	mov	r18, r24
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	3f 83       	std	Y+7, r19	; 0x07
    2012:	2e 83       	std	Y+6, r18	; 0x06
    2014:	4e 81       	ldd	r20, Y+6	; 0x06
    2016:	5f 81       	ldd	r21, Y+7	; 0x07
    2018:	41 30       	cpi	r20, 0x01	; 1
    201a:	51 05       	cpc	r21, r1
    201c:	59 f1       	breq	.+86     	; 0x2074 <DIO_u8GetPinValue+0x90>
    201e:	8e 81       	ldd	r24, Y+6	; 0x06
    2020:	9f 81       	ldd	r25, Y+7	; 0x07
    2022:	82 30       	cpi	r24, 0x02	; 2
    2024:	91 05       	cpc	r25, r1
    2026:	34 f4       	brge	.+12     	; 0x2034 <DIO_u8GetPinValue+0x50>
    2028:	2e 81       	ldd	r18, Y+6	; 0x06
    202a:	3f 81       	ldd	r19, Y+7	; 0x07
    202c:	21 15       	cp	r18, r1
    202e:	31 05       	cpc	r19, r1
    2030:	69 f0       	breq	.+26     	; 0x204c <DIO_u8GetPinValue+0x68>
    2032:	5c c0       	rjmp	.+184    	; 0x20ec <DIO_u8GetPinValue+0x108>
    2034:	4e 81       	ldd	r20, Y+6	; 0x06
    2036:	5f 81       	ldd	r21, Y+7	; 0x07
    2038:	42 30       	cpi	r20, 0x02	; 2
    203a:	51 05       	cpc	r21, r1
    203c:	79 f1       	breq	.+94     	; 0x209c <DIO_u8GetPinValue+0xb8>
    203e:	8e 81       	ldd	r24, Y+6	; 0x06
    2040:	9f 81       	ldd	r25, Y+7	; 0x07
    2042:	83 30       	cpi	r24, 0x03	; 3
    2044:	91 05       	cpc	r25, r1
    2046:	09 f4       	brne	.+2      	; 0x204a <DIO_u8GetPinValue+0x66>
    2048:	3d c0       	rjmp	.+122    	; 0x20c4 <DIO_u8GetPinValue+0xe0>
    204a:	50 c0       	rjmp	.+160    	; 0x20ec <DIO_u8GetPinValue+0x108>
		{
			case DIO_PORTA:*Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin);break;
    204c:	e9 e3       	ldi	r30, 0x39	; 57
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	80 81       	ld	r24, Z
    2052:	28 2f       	mov	r18, r24
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	8b 81       	ldd	r24, Y+3	; 0x03
    2058:	88 2f       	mov	r24, r24
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	a9 01       	movw	r20, r18
    205e:	02 c0       	rjmp	.+4      	; 0x2064 <DIO_u8GetPinValue+0x80>
    2060:	55 95       	asr	r21
    2062:	47 95       	ror	r20
    2064:	8a 95       	dec	r24
    2066:	e2 f7       	brpl	.-8      	; 0x2060 <DIO_u8GetPinValue+0x7c>
    2068:	ca 01       	movw	r24, r20
    206a:	81 70       	andi	r24, 0x01	; 1
    206c:	ec 81       	ldd	r30, Y+4	; 0x04
    206e:	fd 81       	ldd	r31, Y+5	; 0x05
    2070:	80 83       	st	Z, r24
    2072:	41 c0       	rjmp	.+130    	; 0x20f6 <DIO_u8GetPinValue+0x112>
			case DIO_PORTB:*Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin);break;
    2074:	e6 e3       	ldi	r30, 0x36	; 54
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	80 81       	ld	r24, Z
    207a:	28 2f       	mov	r18, r24
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	8b 81       	ldd	r24, Y+3	; 0x03
    2080:	88 2f       	mov	r24, r24
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	a9 01       	movw	r20, r18
    2086:	02 c0       	rjmp	.+4      	; 0x208c <DIO_u8GetPinValue+0xa8>
    2088:	55 95       	asr	r21
    208a:	47 95       	ror	r20
    208c:	8a 95       	dec	r24
    208e:	e2 f7       	brpl	.-8      	; 0x2088 <DIO_u8GetPinValue+0xa4>
    2090:	ca 01       	movw	r24, r20
    2092:	81 70       	andi	r24, 0x01	; 1
    2094:	ec 81       	ldd	r30, Y+4	; 0x04
    2096:	fd 81       	ldd	r31, Y+5	; 0x05
    2098:	80 83       	st	Z, r24
    209a:	2d c0       	rjmp	.+90     	; 0x20f6 <DIO_u8GetPinValue+0x112>
			case DIO_PORTC:*Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin);break;
    209c:	e3 e3       	ldi	r30, 0x33	; 51
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	28 2f       	mov	r18, r24
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	8b 81       	ldd	r24, Y+3	; 0x03
    20a8:	88 2f       	mov	r24, r24
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	a9 01       	movw	r20, r18
    20ae:	02 c0       	rjmp	.+4      	; 0x20b4 <DIO_u8GetPinValue+0xd0>
    20b0:	55 95       	asr	r21
    20b2:	47 95       	ror	r20
    20b4:	8a 95       	dec	r24
    20b6:	e2 f7       	brpl	.-8      	; 0x20b0 <DIO_u8GetPinValue+0xcc>
    20b8:	ca 01       	movw	r24, r20
    20ba:	81 70       	andi	r24, 0x01	; 1
    20bc:	ec 81       	ldd	r30, Y+4	; 0x04
    20be:	fd 81       	ldd	r31, Y+5	; 0x05
    20c0:	80 83       	st	Z, r24
    20c2:	19 c0       	rjmp	.+50     	; 0x20f6 <DIO_u8GetPinValue+0x112>
			case DIO_PORTD:*Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin);break;
    20c4:	e0 e3       	ldi	r30, 0x30	; 48
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	28 2f       	mov	r18, r24
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	8b 81       	ldd	r24, Y+3	; 0x03
    20d0:	88 2f       	mov	r24, r24
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	a9 01       	movw	r20, r18
    20d6:	02 c0       	rjmp	.+4      	; 0x20dc <DIO_u8GetPinValue+0xf8>
    20d8:	55 95       	asr	r21
    20da:	47 95       	ror	r20
    20dc:	8a 95       	dec	r24
    20de:	e2 f7       	brpl	.-8      	; 0x20d8 <DIO_u8GetPinValue+0xf4>
    20e0:	ca 01       	movw	r24, r20
    20e2:	81 70       	andi	r24, 0x01	; 1
    20e4:	ec 81       	ldd	r30, Y+4	; 0x04
    20e6:	fd 81       	ldd	r31, Y+5	; 0x05
    20e8:	80 83       	st	Z, r24
    20ea:	05 c0       	rjmp	.+10     	; 0x20f6 <DIO_u8GetPinValue+0x112>
			default: Local_u8ErrorState=1;	
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	89 83       	std	Y+1, r24	; 0x01
    20f0:	02 c0       	rjmp	.+4      	; 0x20f6 <DIO_u8GetPinValue+0x112>
		}
	}
	else
		Local_u8ErrorState=1;	
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    20f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    20f8:	27 96       	adiw	r28, 0x07	; 7
    20fa:	0f b6       	in	r0, 0x3f	; 63
    20fc:	f8 94       	cli
    20fe:	de bf       	out	0x3e, r29	; 62
    2100:	0f be       	out	0x3f, r0	; 63
    2102:	cd bf       	out	0x3d, r28	; 61
    2104:	cf 91       	pop	r28
    2106:	df 91       	pop	r29
    2108:	08 95       	ret

0000210a <DIO_u8TogglePinValue>:
u8 DIO_u8TogglePinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
{
    210a:	df 93       	push	r29
    210c:	cf 93       	push	r28
    210e:	00 d0       	rcall	.+0      	; 0x2110 <DIO_u8TogglePinValue+0x6>
    2110:	00 d0       	rcall	.+0      	; 0x2112 <DIO_u8TogglePinValue+0x8>
    2112:	0f 92       	push	r0
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62
    2118:	8a 83       	std	Y+2, r24	; 0x02
    211a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    211c:	19 82       	std	Y+1, r1	; 0x01
	if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    211e:	8b 81       	ldd	r24, Y+3	; 0x03
    2120:	88 30       	cpi	r24, 0x08	; 8
    2122:	08 f0       	brcs	.+2      	; 0x2126 <DIO_u8TogglePinValue+0x1c>
    2124:	72 c0       	rjmp	.+228    	; 0x220a <DIO_u8TogglePinValue+0x100>
	{
		switch(Copy_u8Port)
    2126:	8a 81       	ldd	r24, Y+2	; 0x02
    2128:	28 2f       	mov	r18, r24
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	3d 83       	std	Y+5, r19	; 0x05
    212e:	2c 83       	std	Y+4, r18	; 0x04
    2130:	8c 81       	ldd	r24, Y+4	; 0x04
    2132:	9d 81       	ldd	r25, Y+5	; 0x05
    2134:	81 30       	cpi	r24, 0x01	; 1
    2136:	91 05       	cpc	r25, r1
    2138:	49 f1       	breq	.+82     	; 0x218c <DIO_u8TogglePinValue+0x82>
    213a:	2c 81       	ldd	r18, Y+4	; 0x04
    213c:	3d 81       	ldd	r19, Y+5	; 0x05
    213e:	22 30       	cpi	r18, 0x02	; 2
    2140:	31 05       	cpc	r19, r1
    2142:	2c f4       	brge	.+10     	; 0x214e <DIO_u8TogglePinValue+0x44>
    2144:	8c 81       	ldd	r24, Y+4	; 0x04
    2146:	9d 81       	ldd	r25, Y+5	; 0x05
    2148:	00 97       	sbiw	r24, 0x00	; 0
    214a:	61 f0       	breq	.+24     	; 0x2164 <DIO_u8TogglePinValue+0x5a>
    214c:	5b c0       	rjmp	.+182    	; 0x2204 <DIO_u8TogglePinValue+0xfa>
    214e:	2c 81       	ldd	r18, Y+4	; 0x04
    2150:	3d 81       	ldd	r19, Y+5	; 0x05
    2152:	22 30       	cpi	r18, 0x02	; 2
    2154:	31 05       	cpc	r19, r1
    2156:	71 f1       	breq	.+92     	; 0x21b4 <DIO_u8TogglePinValue+0xaa>
    2158:	8c 81       	ldd	r24, Y+4	; 0x04
    215a:	9d 81       	ldd	r25, Y+5	; 0x05
    215c:	83 30       	cpi	r24, 0x03	; 3
    215e:	91 05       	cpc	r25, r1
    2160:	e9 f1       	breq	.+122    	; 0x21dc <DIO_u8TogglePinValue+0xd2>
    2162:	50 c0       	rjmp	.+160    	; 0x2204 <DIO_u8TogglePinValue+0xfa>
		{
			case DIO_PORTA:TOG_BIT(PORTA,Copy_u8Pin);break;
    2164:	ab e3       	ldi	r26, 0x3B	; 59
    2166:	b0 e0       	ldi	r27, 0x00	; 0
    2168:	eb e3       	ldi	r30, 0x3B	; 59
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	80 81       	ld	r24, Z
    216e:	48 2f       	mov	r20, r24
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	28 2f       	mov	r18, r24
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	02 2e       	mov	r0, r18
    217c:	02 c0       	rjmp	.+4      	; 0x2182 <DIO_u8TogglePinValue+0x78>
    217e:	88 0f       	add	r24, r24
    2180:	99 1f       	adc	r25, r25
    2182:	0a 94       	dec	r0
    2184:	e2 f7       	brpl	.-8      	; 0x217e <DIO_u8TogglePinValue+0x74>
    2186:	84 27       	eor	r24, r20
    2188:	8c 93       	st	X, r24
    218a:	41 c0       	rjmp	.+130    	; 0x220e <DIO_u8TogglePinValue+0x104>
			case DIO_PORTB:TOG_BIT(PORTB,Copy_u8Pin);break;
    218c:	a8 e3       	ldi	r26, 0x38	; 56
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	e8 e3       	ldi	r30, 0x38	; 56
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	48 2f       	mov	r20, r24
    2198:	8b 81       	ldd	r24, Y+3	; 0x03
    219a:	28 2f       	mov	r18, r24
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	02 2e       	mov	r0, r18
    21a4:	02 c0       	rjmp	.+4      	; 0x21aa <DIO_u8TogglePinValue+0xa0>
    21a6:	88 0f       	add	r24, r24
    21a8:	99 1f       	adc	r25, r25
    21aa:	0a 94       	dec	r0
    21ac:	e2 f7       	brpl	.-8      	; 0x21a6 <DIO_u8TogglePinValue+0x9c>
    21ae:	84 27       	eor	r24, r20
    21b0:	8c 93       	st	X, r24
    21b2:	2d c0       	rjmp	.+90     	; 0x220e <DIO_u8TogglePinValue+0x104>
			case DIO_PORTC:TOG_BIT(PORTC,Copy_u8Pin);break;
    21b4:	a5 e3       	ldi	r26, 0x35	; 53
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	e5 e3       	ldi	r30, 0x35	; 53
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	48 2f       	mov	r20, r24
    21c0:	8b 81       	ldd	r24, Y+3	; 0x03
    21c2:	28 2f       	mov	r18, r24
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	02 2e       	mov	r0, r18
    21cc:	02 c0       	rjmp	.+4      	; 0x21d2 <DIO_u8TogglePinValue+0xc8>
    21ce:	88 0f       	add	r24, r24
    21d0:	99 1f       	adc	r25, r25
    21d2:	0a 94       	dec	r0
    21d4:	e2 f7       	brpl	.-8      	; 0x21ce <DIO_u8TogglePinValue+0xc4>
    21d6:	84 27       	eor	r24, r20
    21d8:	8c 93       	st	X, r24
    21da:	19 c0       	rjmp	.+50     	; 0x220e <DIO_u8TogglePinValue+0x104>
			case DIO_PORTD:TOG_BIT(PORTD,Copy_u8Pin);break;
    21dc:	a2 e3       	ldi	r26, 0x32	; 50
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	e2 e3       	ldi	r30, 0x32	; 50
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	48 2f       	mov	r20, r24
    21e8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ea:	28 2f       	mov	r18, r24
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	02 2e       	mov	r0, r18
    21f4:	02 c0       	rjmp	.+4      	; 0x21fa <DIO_u8TogglePinValue+0xf0>
    21f6:	88 0f       	add	r24, r24
    21f8:	99 1f       	adc	r25, r25
    21fa:	0a 94       	dec	r0
    21fc:	e2 f7       	brpl	.-8      	; 0x21f6 <DIO_u8TogglePinValue+0xec>
    21fe:	84 27       	eor	r24, r20
    2200:	8c 93       	st	X, r24
    2202:	05 c0       	rjmp	.+10     	; 0x220e <DIO_u8TogglePinValue+0x104>
			default: Local_u8ErrorState=1;
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	89 83       	std	Y+1, r24	; 0x01
    2208:	02 c0       	rjmp	.+4      	; 0x220e <DIO_u8TogglePinValue+0x104>
		}
	}
	else
		Local_u8ErrorState=1;
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    220e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2210:	0f 90       	pop	r0
    2212:	0f 90       	pop	r0
    2214:	0f 90       	pop	r0
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	cf 91       	pop	r28
    221c:	df 91       	pop	r29
    221e:	08 95       	ret

00002220 <GINT_voidEnable>:

#include "GINT_register.h"
#include "GINT_interface.h"

void GINT_voidEnable()
{
    2220:	df 93       	push	r29
    2222:	cf 93       	push	r28
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    2228:	af e5       	ldi	r26, 0x5F	; 95
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	ef e5       	ldi	r30, 0x5F	; 95
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
    2232:	80 58       	subi	r24, 0x80	; 128
    2234:	8c 93       	st	X, r24
}
    2236:	cf 91       	pop	r28
    2238:	df 91       	pop	r29
    223a:	08 95       	ret

0000223c <GINT_voidDisable>:
void GINT_voidDisable()
{
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    2244:	af e5       	ldi	r26, 0x5F	; 95
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	ef e5       	ldi	r30, 0x5F	; 95
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	80 81       	ld	r24, Z
    224e:	8f 77       	andi	r24, 0x7F	; 127
    2250:	8c 93       	st	X, r24
}
    2252:	cf 91       	pop	r28
    2254:	df 91       	pop	r29
    2256:	08 95       	ret

00002258 <KPD_u8Key_pressed>:
#include "KPD_config.h"
#include "KPD_interface.h"


u8 KPD_u8Key_pressed()
{
    2258:	df 93       	push	r29
    225a:	cf 93       	push	r28
    225c:	00 d0       	rcall	.+0      	; 0x225e <KPD_u8Key_pressed+0x6>
    225e:	00 d0       	rcall	.+0      	; 0x2260 <KPD_u8Key_pressed+0x8>
    2260:	0f 92       	push	r0
    2262:	cd b7       	in	r28, 0x3d	; 61
    2264:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8RowItrator;
	u8 Local_u8ColItrator;
	u8 Local_u8GetState;
	u8 Local_u8KeyPressed = KPD_NO_PRESSED_KEY;
    2266:	8f ef       	ldi	r24, 0xFF	; 255
    2268:	89 83       	std	Y+1, r24	; 0x01
	static u8 Local_u8KPD_ROW_PINS[Max_Rows] = { KPD_ROW_PIN0, KPD_ROW_PIN1,
			KPD_ROW_PIN2, KPD_ROW_PIN3 };
	static u8 Local_u8KPD_COL_PINS[Max_Cols] = { KPD_COL_PIN0, KPD_COL_PIN1,
			KPD_COL_PIN2, KPD_COL_PIN3 };
	static u8 Local_u8KPD_Nums[Max_Rows][Max_Cols] = KPD_u8ARR;
	for (Local_u8ColItrator = 0; Local_u8ColItrator < Max_Cols;
    226a:	1a 82       	std	Y+2, r1	; 0x02
    226c:	5e c0       	rjmp	.+188    	; 0x232a <KPD_u8Key_pressed+0xd2>
			Local_u8ColItrator++) {
		DIO_u8SetPinValue(KPD_INPUT_PORT,
    226e:	8a 81       	ldd	r24, Y+2	; 0x02
    2270:	88 2f       	mov	r24, r24
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	fc 01       	movw	r30, r24
    2276:	e8 5d       	subi	r30, 0xD8	; 216
    2278:	fe 4f       	sbci	r31, 0xFE	; 254
    227a:	90 81       	ld	r25, Z
    227c:	83 e0       	ldi	r24, 0x03	; 3
    227e:	69 2f       	mov	r22, r25
    2280:	40 e0       	ldi	r20, 0x00	; 0
    2282:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <DIO_u8SetPinValue>
				Local_u8KPD_COL_PINS[Local_u8ColItrator], DIO_PIN_LOW);
		/*Read the current Row*/
		for (Local_u8RowItrator = 0; Local_u8RowItrator < Max_Rows;
    2286:	1b 82       	std	Y+3, r1	; 0x03
    2288:	3d c0       	rjmp	.+122    	; 0x2304 <KPD_u8Key_pressed+0xac>
				Local_u8RowItrator++) {
			DIO_u8GetPinValue(KPD_INPUT_PORT,
    228a:	8b 81       	ldd	r24, Y+3	; 0x03
    228c:	88 2f       	mov	r24, r24
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	fc 01       	movw	r30, r24
    2292:	e4 5d       	subi	r30, 0xD4	; 212
    2294:	fe 4f       	sbci	r31, 0xFE	; 254
    2296:	90 81       	ld	r25, Z
    2298:	9e 01       	movw	r18, r28
    229a:	2c 5f       	subi	r18, 0xFC	; 252
    229c:	3f 4f       	sbci	r19, 0xFF	; 255
    229e:	83 e0       	ldi	r24, 0x03	; 3
    22a0:	69 2f       	mov	r22, r25
    22a2:	a9 01       	movw	r20, r18
    22a4:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8GetPinValue>
					Local_u8KPD_ROW_PINS[Local_u8RowItrator],
					&Local_u8GetState);
			/*chick switch id pressed */
			if (Local_u8GetState == DIO_PIN_LOW) {
    22a8:	8c 81       	ldd	r24, Y+4	; 0x04
    22aa:	88 23       	and	r24, r24
    22ac:	41 f5       	brne	.+80     	; 0x22fe <KPD_u8Key_pressed+0xa6>
				Local_u8KeyPressed =
    22ae:	8b 81       	ldd	r24, Y+3	; 0x03
    22b0:	48 2f       	mov	r20, r24
    22b2:	50 e0       	ldi	r21, 0x00	; 0
    22b4:	8a 81       	ldd	r24, Y+2	; 0x02
    22b6:	28 2f       	mov	r18, r24
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	ca 01       	movw	r24, r20
    22bc:	88 0f       	add	r24, r24
    22be:	99 1f       	adc	r25, r25
    22c0:	88 0f       	add	r24, r24
    22c2:	99 1f       	adc	r25, r25
    22c4:	82 0f       	add	r24, r18
    22c6:	93 1f       	adc	r25, r19
    22c8:	fc 01       	movw	r30, r24
    22ca:	e8 5e       	subi	r30, 0xE8	; 232
    22cc:	fe 4f       	sbci	r31, 0xFE	; 254
    22ce:	80 81       	ld	r24, Z
    22d0:	89 83       	std	Y+1, r24	; 0x01
    22d2:	0f c0       	rjmp	.+30     	; 0x22f2 <KPD_u8Key_pressed+0x9a>
						Local_u8KPD_Nums[Local_u8RowItrator][Local_u8ColItrator];
				/*polling busy waiting until the key is released*/
				while (Local_u8GetState == DIO_PIN_LOW) {
					DIO_u8GetPinValue(KPD_INPUT_PORT,
    22d4:	8b 81       	ldd	r24, Y+3	; 0x03
    22d6:	88 2f       	mov	r24, r24
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	fc 01       	movw	r30, r24
    22dc:	e4 5d       	subi	r30, 0xD4	; 212
    22de:	fe 4f       	sbci	r31, 0xFE	; 254
    22e0:	90 81       	ld	r25, Z
    22e2:	9e 01       	movw	r18, r28
    22e4:	2c 5f       	subi	r18, 0xFC	; 252
    22e6:	3f 4f       	sbci	r19, 0xFF	; 255
    22e8:	83 e0       	ldi	r24, 0x03	; 3
    22ea:	69 2f       	mov	r22, r25
    22ec:	a9 01       	movw	r20, r18
    22ee:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8GetPinValue>
			/*chick switch id pressed */
			if (Local_u8GetState == DIO_PIN_LOW) {
				Local_u8KeyPressed =
						Local_u8KPD_Nums[Local_u8RowItrator][Local_u8ColItrator];
				/*polling busy waiting until the key is released*/
				while (Local_u8GetState == DIO_PIN_LOW) {
    22f2:	8c 81       	ldd	r24, Y+4	; 0x04
    22f4:	88 23       	and	r24, r24
    22f6:	71 f3       	breq	.-36     	; 0x22d4 <KPD_u8Key_pressed+0x7c>
					DIO_u8GetPinValue(KPD_INPUT_PORT,
							Local_u8KPD_ROW_PINS[Local_u8RowItrator],
							&Local_u8GetState);
				}
				return Local_u8KeyPressed;
    22f8:	89 81       	ldd	r24, Y+1	; 0x01
    22fa:	8d 83       	std	Y+5, r24	; 0x05
    22fc:	1c c0       	rjmp	.+56     	; 0x2336 <KPD_u8Key_pressed+0xde>
			Local_u8ColItrator++) {
		DIO_u8SetPinValue(KPD_INPUT_PORT,
				Local_u8KPD_COL_PINS[Local_u8ColItrator], DIO_PIN_LOW);
		/*Read the current Row*/
		for (Local_u8RowItrator = 0; Local_u8RowItrator < Max_Rows;
				Local_u8RowItrator++) {
    22fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2300:	8f 5f       	subi	r24, 0xFF	; 255
    2302:	8b 83       	std	Y+3, r24	; 0x03
	for (Local_u8ColItrator = 0; Local_u8ColItrator < Max_Cols;
			Local_u8ColItrator++) {
		DIO_u8SetPinValue(KPD_INPUT_PORT,
				Local_u8KPD_COL_PINS[Local_u8ColItrator], DIO_PIN_LOW);
		/*Read the current Row*/
		for (Local_u8RowItrator = 0; Local_u8RowItrator < Max_Rows;
    2304:	8b 81       	ldd	r24, Y+3	; 0x03
    2306:	84 30       	cpi	r24, 0x04	; 4
    2308:	08 f4       	brcc	.+2      	; 0x230c <KPD_u8Key_pressed+0xb4>
    230a:	bf cf       	rjmp	.-130    	; 0x228a <KPD_u8Key_pressed+0x32>
							&Local_u8GetState);
				}
				return Local_u8KeyPressed;
			}
		}
		DIO_u8SetPinValue(KPD_INPUT_PORT,
    230c:	8a 81       	ldd	r24, Y+2	; 0x02
    230e:	88 2f       	mov	r24, r24
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	fc 01       	movw	r30, r24
    2314:	e8 5d       	subi	r30, 0xD8	; 216
    2316:	fe 4f       	sbci	r31, 0xFE	; 254
    2318:	90 81       	ld	r25, Z
    231a:	83 e0       	ldi	r24, 0x03	; 3
    231c:	69 2f       	mov	r22, r25
    231e:	41 e0       	ldi	r20, 0x01	; 1
    2320:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <DIO_u8SetPinValue>
			KPD_ROW_PIN2, KPD_ROW_PIN3 };
	static u8 Local_u8KPD_COL_PINS[Max_Cols] = { KPD_COL_PIN0, KPD_COL_PIN1,
			KPD_COL_PIN2, KPD_COL_PIN3 };
	static u8 Local_u8KPD_Nums[Max_Rows][Max_Cols] = KPD_u8ARR;
	for (Local_u8ColItrator = 0; Local_u8ColItrator < Max_Cols;
			Local_u8ColItrator++) {
    2324:	8a 81       	ldd	r24, Y+2	; 0x02
    2326:	8f 5f       	subi	r24, 0xFF	; 255
    2328:	8a 83       	std	Y+2, r24	; 0x02
	static u8 Local_u8KPD_ROW_PINS[Max_Rows] = { KPD_ROW_PIN0, KPD_ROW_PIN1,
			KPD_ROW_PIN2, KPD_ROW_PIN3 };
	static u8 Local_u8KPD_COL_PINS[Max_Cols] = { KPD_COL_PIN0, KPD_COL_PIN1,
			KPD_COL_PIN2, KPD_COL_PIN3 };
	static u8 Local_u8KPD_Nums[Max_Rows][Max_Cols] = KPD_u8ARR;
	for (Local_u8ColItrator = 0; Local_u8ColItrator < Max_Cols;
    232a:	8a 81       	ldd	r24, Y+2	; 0x02
    232c:	84 30       	cpi	r24, 0x04	; 4
    232e:	08 f4       	brcc	.+2      	; 0x2332 <KPD_u8Key_pressed+0xda>
    2330:	9e cf       	rjmp	.-196    	; 0x226e <KPD_u8Key_pressed+0x16>
			}
		}
		DIO_u8SetPinValue(KPD_INPUT_PORT,
				Local_u8KPD_COL_PINS[Local_u8ColItrator], DIO_PIN_HIGH);
	}
	return Local_u8KeyPressed;
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	8d 83       	std	Y+5, r24	; 0x05
    2336:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	cf 91       	pop	r28
    2344:	df 91       	pop	r29
    2346:	08 95       	ret

00002348 <PORT_voidInit>:
#include "PORT_config.h"
#include "PORT_register.h"
#include "PORT_interface.h"

void PORT_voidInit()
{
    2348:	df 93       	push	r29
    234a:	cf 93       	push	r28
    234c:	cd b7       	in	r28, 0x3d	; 61
    234e:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;	
    2350:	ea e3       	ldi	r30, 0x3A	; 58
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	80 ef       	ldi	r24, 0xF0	; 240
    2356:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    2358:	e7 e3       	ldi	r30, 0x37	; 55
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	8f e5       	ldi	r24, 0x5F	; 95
    235e:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    2360:	e4 e3       	ldi	r30, 0x34	; 52
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	8c ef       	ldi	r24, 0xFC	; 252
    2366:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    2368:	e1 e3       	ldi	r30, 0x31	; 49
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	80 ef       	ldi	r24, 0xF0	; 240
    236e:	80 83       	st	Z, r24
	
	PORTA =PORTA_INIT_VALUE;
    2370:	eb e3       	ldi	r30, 0x3B	; 59
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	83 e0       	ldi	r24, 0x03	; 3
    2376:	80 83       	st	Z, r24
	PORTB =PORTB_INIT_VALUE;
    2378:	e8 e3       	ldi	r30, 0x38	; 56
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 e2       	ldi	r24, 0x20	; 32
    237e:	80 83       	st	Z, r24
	PORTC =PORTC_INIT_VALUE;
    2380:	e5 e3       	ldi	r30, 0x35	; 53
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	10 82       	st	Z, r1
	PORTD =PORTD_INIT_VALUE;
    2386:	e2 e3       	ldi	r30, 0x32	; 50
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	8f ef       	ldi	r24, 0xFF	; 255
    238c:	80 83       	st	Z, r24
	
    238e:	cf 91       	pop	r28
    2390:	df 91       	pop	r29
    2392:	08 95       	ret

00002394 <main>:
#include "KPD_interface.h"
#include "smartAPP.h"


void main()
{
    2394:	0f 93       	push	r16
    2396:	1f 93       	push	r17
    2398:	df 93       	push	r29
    239a:	cf 93       	push	r28
    239c:	cd b7       	in	r28, 0x3d	; 61
    239e:	de b7       	in	r29, 0x3e	; 62
    23a0:	ca 56       	subi	r28, 0x6A	; 106
    23a2:	d0 40       	sbci	r29, 0x00	; 0
    23a4:	0f b6       	in	r0, 0x3f	; 63
    23a6:	f8 94       	cli
    23a8:	de bf       	out	0x3e, r29	; 62
    23aa:	0f be       	out	0x3f, r0	; 63
    23ac:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
    23ae:	0e 94 a4 11 	call	0x2348	; 0x2348 <PORT_voidInit>
	ADC_voidInit();
    23b2:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>
	CLCD_voidInit();
    23b6:	0e 94 87 0b 	call	0x170e	; 0x170e <CLCD_voidInit>
	GINT_voidEnable();
    23ba:	0e 94 10 11 	call	0x2220	; 0x2220 <GINT_voidEnable>
	/*kpd ,SSd Number*/
	u8 Keypress=0;
    23be:	fe 01       	movw	r30, r28
    23c0:	e6 59       	subi	r30, 0x96	; 150
    23c2:	ff 4f       	sbci	r31, 0xFF	; 255
    23c4:	10 82       	st	Z, r1
	s8 trials = 3;
    23c6:	fe 01       	movw	r30, r28
    23c8:	e7 59       	subi	r30, 0x97	; 151
    23ca:	ff 4f       	sbci	r31, 0xFF	; 255
    23cc:	83 e0       	ldi	r24, 0x03	; 3
    23ce:	80 83       	st	Z, r24
	//voltage in milli ,password Storage variable
	u16  Enter_password=0,defult_pass=1234,multiplier=1;
    23d0:	fe 01       	movw	r30, r28
    23d2:	e9 59       	subi	r30, 0x99	; 153
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	11 82       	std	Z+1, r1	; 0x01
    23d8:	10 82       	st	Z, r1
    23da:	fe 01       	movw	r30, r28
    23dc:	eb 59       	subi	r30, 0x9B	; 155
    23de:	ff 4f       	sbci	r31, 0xFF	; 255
    23e0:	82 ed       	ldi	r24, 0xD2	; 210
    23e2:	94 e0       	ldi	r25, 0x04	; 4
    23e4:	91 83       	std	Z+1, r25	; 0x01
    23e6:	80 83       	st	Z, r24
    23e8:	fe 01       	movw	r30, r28
    23ea:	ed 59       	subi	r30, 0x9D	; 157
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	91 83       	std	Z+1, r25	; 0x01
    23f4:	80 83       	st	Z, r24
	CLCD_voidSendCommand(1);
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	0e 94 04 08 	call	0x1008	; 0x1008 <CLCD_voidSendCommand>
	CLCD_voidSendString("Welcome Sr");
    23fc:	80 e6       	ldi	r24, 0x60	; 96
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <CLCD_voidSendString>
    2404:	fe 01       	movw	r30, r28
    2406:	e1 5a       	subi	r30, 0xA1	; 161
    2408:	ff 4f       	sbci	r31, 0xFF	; 255
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	aa ef       	ldi	r26, 0xFA	; 250
    2410:	b3 e4       	ldi	r27, 0x43	; 67
    2412:	80 83       	st	Z, r24
    2414:	91 83       	std	Z+1, r25	; 0x01
    2416:	a2 83       	std	Z+2, r26	; 0x02
    2418:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    241a:	8e 01       	movw	r16, r28
    241c:	05 5a       	subi	r16, 0xA5	; 165
    241e:	1f 4f       	sbci	r17, 0xFF	; 255
    2420:	fe 01       	movw	r30, r28
    2422:	e1 5a       	subi	r30, 0xA1	; 161
    2424:	ff 4f       	sbci	r31, 0xFF	; 255
    2426:	60 81       	ld	r22, Z
    2428:	71 81       	ldd	r23, Z+1	; 0x01
    242a:	82 81       	ldd	r24, Z+2	; 0x02
    242c:	93 81       	ldd	r25, Z+3	; 0x03
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	4a ef       	ldi	r20, 0xFA	; 250
    2434:	54 e4       	ldi	r21, 0x44	; 68
    2436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	f8 01       	movw	r30, r16
    2440:	80 83       	st	Z, r24
    2442:	91 83       	std	Z+1, r25	; 0x01
    2444:	a2 83       	std	Z+2, r26	; 0x02
    2446:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2448:	fe 01       	movw	r30, r28
    244a:	e5 5a       	subi	r30, 0xA5	; 165
    244c:	ff 4f       	sbci	r31, 0xFF	; 255
    244e:	60 81       	ld	r22, Z
    2450:	71 81       	ldd	r23, Z+1	; 0x01
    2452:	82 81       	ldd	r24, Z+2	; 0x02
    2454:	93 81       	ldd	r25, Z+3	; 0x03
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	40 e8       	ldi	r20, 0x80	; 128
    245c:	5f e3       	ldi	r21, 0x3F	; 63
    245e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2462:	88 23       	and	r24, r24
    2464:	44 f4       	brge	.+16     	; 0x2476 <main+0xe2>
		__ticks = 1;
    2466:	fe 01       	movw	r30, r28
    2468:	e7 5a       	subi	r30, 0xA7	; 167
    246a:	ff 4f       	sbci	r31, 0xFF	; 255
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	91 83       	std	Z+1, r25	; 0x01
    2472:	80 83       	st	Z, r24
    2474:	64 c0       	rjmp	.+200    	; 0x253e <main+0x1aa>
	else if (__tmp > 65535)
    2476:	fe 01       	movw	r30, r28
    2478:	e5 5a       	subi	r30, 0xA5	; 165
    247a:	ff 4f       	sbci	r31, 0xFF	; 255
    247c:	60 81       	ld	r22, Z
    247e:	71 81       	ldd	r23, Z+1	; 0x01
    2480:	82 81       	ldd	r24, Z+2	; 0x02
    2482:	93 81       	ldd	r25, Z+3	; 0x03
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	3f ef       	ldi	r19, 0xFF	; 255
    2488:	4f e7       	ldi	r20, 0x7F	; 127
    248a:	57 e4       	ldi	r21, 0x47	; 71
    248c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2490:	18 16       	cp	r1, r24
    2492:	0c f0       	brlt	.+2      	; 0x2496 <main+0x102>
    2494:	43 c0       	rjmp	.+134    	; 0x251c <main+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2496:	fe 01       	movw	r30, r28
    2498:	e1 5a       	subi	r30, 0xA1	; 161
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	60 81       	ld	r22, Z
    249e:	71 81       	ldd	r23, Z+1	; 0x01
    24a0:	82 81       	ldd	r24, Z+2	; 0x02
    24a2:	93 81       	ldd	r25, Z+3	; 0x03
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	40 e2       	ldi	r20, 0x20	; 32
    24aa:	51 e4       	ldi	r21, 0x41	; 65
    24ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	8e 01       	movw	r16, r28
    24b6:	07 5a       	subi	r16, 0xA7	; 167
    24b8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ba:	bc 01       	movw	r22, r24
    24bc:	cd 01       	movw	r24, r26
    24be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	f8 01       	movw	r30, r16
    24c8:	91 83       	std	Z+1, r25	; 0x01
    24ca:	80 83       	st	Z, r24
    24cc:	1f c0       	rjmp	.+62     	; 0x250c <main+0x178>
    24ce:	fe 01       	movw	r30, r28
    24d0:	e9 5a       	subi	r30, 0xA9	; 169
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	88 ec       	ldi	r24, 0xC8	; 200
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	91 83       	std	Z+1, r25	; 0x01
    24da:	80 83       	st	Z, r24
    24dc:	fe 01       	movw	r30, r28
    24de:	e9 5a       	subi	r30, 0xA9	; 169
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	80 81       	ld	r24, Z
    24e4:	91 81       	ldd	r25, Z+1	; 0x01
    24e6:	01 97       	sbiw	r24, 0x01	; 1
    24e8:	f1 f7       	brne	.-4      	; 0x24e6 <main+0x152>
    24ea:	fe 01       	movw	r30, r28
    24ec:	e9 5a       	subi	r30, 0xA9	; 169
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	91 83       	std	Z+1, r25	; 0x01
    24f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f4:	de 01       	movw	r26, r28
    24f6:	a7 5a       	subi	r26, 0xA7	; 167
    24f8:	bf 4f       	sbci	r27, 0xFF	; 255
    24fa:	fe 01       	movw	r30, r28
    24fc:	e7 5a       	subi	r30, 0xA7	; 167
    24fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2500:	80 81       	ld	r24, Z
    2502:	91 81       	ldd	r25, Z+1	; 0x01
    2504:	01 97       	sbiw	r24, 0x01	; 1
    2506:	11 96       	adiw	r26, 0x01	; 1
    2508:	9c 93       	st	X, r25
    250a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    250c:	fe 01       	movw	r30, r28
    250e:	e7 5a       	subi	r30, 0xA7	; 167
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	80 81       	ld	r24, Z
    2514:	91 81       	ldd	r25, Z+1	; 0x01
    2516:	00 97       	sbiw	r24, 0x00	; 0
    2518:	d1 f6       	brne	.-76     	; 0x24ce <main+0x13a>
    251a:	27 c0       	rjmp	.+78     	; 0x256a <main+0x1d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    251c:	8e 01       	movw	r16, r28
    251e:	07 5a       	subi	r16, 0xA7	; 167
    2520:	1f 4f       	sbci	r17, 0xFF	; 255
    2522:	fe 01       	movw	r30, r28
    2524:	e5 5a       	subi	r30, 0xA5	; 165
    2526:	ff 4f       	sbci	r31, 0xFF	; 255
    2528:	60 81       	ld	r22, Z
    252a:	71 81       	ldd	r23, Z+1	; 0x01
    252c:	82 81       	ldd	r24, Z+2	; 0x02
    252e:	93 81       	ldd	r25, Z+3	; 0x03
    2530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	f8 01       	movw	r30, r16
    253a:	91 83       	std	Z+1, r25	; 0x01
    253c:	80 83       	st	Z, r24
    253e:	de 01       	movw	r26, r28
    2540:	ab 5a       	subi	r26, 0xAB	; 171
    2542:	bf 4f       	sbci	r27, 0xFF	; 255
    2544:	fe 01       	movw	r30, r28
    2546:	e7 5a       	subi	r30, 0xA7	; 167
    2548:	ff 4f       	sbci	r31, 0xFF	; 255
    254a:	80 81       	ld	r24, Z
    254c:	91 81       	ldd	r25, Z+1	; 0x01
    254e:	8d 93       	st	X+, r24
    2550:	9c 93       	st	X, r25
    2552:	fe 01       	movw	r30, r28
    2554:	eb 5a       	subi	r30, 0xAB	; 171
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	80 81       	ld	r24, Z
    255a:	91 81       	ldd	r25, Z+1	; 0x01
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	f1 f7       	brne	.-4      	; 0x255c <main+0x1c8>
    2560:	fe 01       	movw	r30, r28
    2562:	eb 5a       	subi	r30, 0xAB	; 171
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	91 83       	std	Z+1, r25	; 0x01
    2568:	80 83       	st	Z, r24
	_delay_ms(500);

	while(1)
	{
		CLCD_voidSendCommand(1);
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	0e 94 04 08 	call	0x1008	; 0x1008 <CLCD_voidSendCommand>
		CLCD_voidSendString("Enter pass:"); // 4 Digit for password
    2570:	8b e6       	ldi	r24, 0x6B	; 107
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <CLCD_voidSendString>
		do{
			do{
				Keypress=KPD_u8Key_pressed();
    2578:	0e 94 2c 11 	call	0x2258	; 0x2258 <KPD_u8Key_pressed>
    257c:	fe 01       	movw	r30, r28
    257e:	e6 59       	subi	r30, 0x96	; 150
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	80 83       	st	Z, r24
			}while(Keypress==0xff);
    2584:	fe 01       	movw	r30, r28
    2586:	e6 59       	subi	r30, 0x96	; 150
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	80 81       	ld	r24, Z
    258c:	8f 3f       	cpi	r24, 0xFF	; 255
    258e:	a1 f3       	breq	.-24     	; 0x2578 <main+0x1e4>
			if((0<=Keypress)&&(Keypress<=9)){
    2590:	fe 01       	movw	r30, r28
    2592:	e6 59       	subi	r30, 0x96	; 150
    2594:	ff 4f       	sbci	r31, 0xFF	; 255
    2596:	80 81       	ld	r24, Z
    2598:	8a 30       	cpi	r24, 0x0A	; 10
    259a:	78 f5       	brcc	.+94     	; 0x25fa <main+0x266>
				CLCD_voidWriteNumber(Keypress);
    259c:	fe 01       	movw	r30, r28
    259e:	e6 59       	subi	r30, 0x96	; 150
    25a0:	ff 4f       	sbci	r31, 0xFF	; 255
    25a2:	80 81       	ld	r24, Z
    25a4:	88 2f       	mov	r24, r24
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <CLCD_voidWriteNumber>

				Enter_password=Enter_password*multiplier+Keypress;
    25ac:	fe 01       	movw	r30, r28
    25ae:	e9 59       	subi	r30, 0x99	; 153
    25b0:	ff 4f       	sbci	r31, 0xFF	; 255
    25b2:	de 01       	movw	r26, r28
    25b4:	ad 59       	subi	r26, 0x9D	; 157
    25b6:	bf 4f       	sbci	r27, 0xFF	; 255
    25b8:	20 81       	ld	r18, Z
    25ba:	31 81       	ldd	r19, Z+1	; 0x01
    25bc:	8d 91       	ld	r24, X+
    25be:	9c 91       	ld	r25, X
    25c0:	11 97       	sbiw	r26, 0x01	; 1
    25c2:	a9 01       	movw	r20, r18
    25c4:	48 9f       	mul	r20, r24
    25c6:	90 01       	movw	r18, r0
    25c8:	49 9f       	mul	r20, r25
    25ca:	30 0d       	add	r19, r0
    25cc:	58 9f       	mul	r21, r24
    25ce:	30 0d       	add	r19, r0
    25d0:	11 24       	eor	r1, r1
    25d2:	fe 01       	movw	r30, r28
    25d4:	e6 59       	subi	r30, 0x96	; 150
    25d6:	ff 4f       	sbci	r31, 0xFF	; 255
    25d8:	80 81       	ld	r24, Z
    25da:	88 2f       	mov	r24, r24
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	fe 01       	movw	r30, r28
    25e0:	e9 59       	subi	r30, 0x99	; 153
    25e2:	ff 4f       	sbci	r31, 0xFF	; 255
    25e4:	82 0f       	add	r24, r18
    25e6:	93 1f       	adc	r25, r19
    25e8:	91 83       	std	Z+1, r25	; 0x01
    25ea:	80 83       	st	Z, r24
				multiplier=10;
    25ec:	fe 01       	movw	r30, r28
    25ee:	ed 59       	subi	r30, 0x9D	; 157
    25f0:	ff 4f       	sbci	r31, 0xFF	; 255
    25f2:	8a e0       	ldi	r24, 0x0A	; 10
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	91 83       	std	Z+1, r25	; 0x01
    25f8:	80 83       	st	Z, r24
			}
		}while(Keypress!=14);
    25fa:	fe 01       	movw	r30, r28
    25fc:	e6 59       	subi	r30, 0x96	; 150
    25fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2600:	80 81       	ld	r24, Z
    2602:	8e 30       	cpi	r24, 0x0E	; 14
    2604:	09 f0       	breq	.+2      	; 0x2608 <main+0x274>
    2606:	b8 cf       	rjmp	.-144    	; 0x2578 <main+0x1e4>
		if(Enter_password==defult_pass) // pass
    2608:	fe 01       	movw	r30, r28
    260a:	e9 59       	subi	r30, 0x99	; 153
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	de 01       	movw	r26, r28
    2610:	ab 59       	subi	r26, 0x9B	; 155
    2612:	bf 4f       	sbci	r27, 0xFF	; 255
    2614:	20 81       	ld	r18, Z
    2616:	31 81       	ldd	r19, Z+1	; 0x01
    2618:	8d 91       	ld	r24, X+
    261a:	9c 91       	ld	r25, X
    261c:	11 97       	sbiw	r26, 0x01	; 1
    261e:	28 17       	cp	r18, r24
    2620:	39 07       	cpc	r19, r25
    2622:	09 f0       	breq	.+2      	; 0x2626 <main+0x292>
    2624:	c0 c0       	rjmp	.+384    	; 0x27a6 <main+0x412>
		{
			while(1)
			{
				// blink Green led
				DIO_u8SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_HIGH);
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	64 e0       	ldi	r22, 0x04	; 4
    262a:	41 e0       	ldi	r20, 0x01	; 1
    262c:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <DIO_u8SetPinValue>
    2630:	fe 01       	movw	r30, r28
    2632:	ef 5a       	subi	r30, 0xAF	; 175
    2634:	ff 4f       	sbci	r31, 0xFF	; 255
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	a8 ec       	ldi	r26, 0xC8	; 200
    263c:	b3 e4       	ldi	r27, 0x43	; 67
    263e:	80 83       	st	Z, r24
    2640:	91 83       	std	Z+1, r25	; 0x01
    2642:	a2 83       	std	Z+2, r26	; 0x02
    2644:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2646:	8e 01       	movw	r16, r28
    2648:	03 5b       	subi	r16, 0xB3	; 179
    264a:	1f 4f       	sbci	r17, 0xFF	; 255
    264c:	fe 01       	movw	r30, r28
    264e:	ef 5a       	subi	r30, 0xAF	; 175
    2650:	ff 4f       	sbci	r31, 0xFF	; 255
    2652:	60 81       	ld	r22, Z
    2654:	71 81       	ldd	r23, Z+1	; 0x01
    2656:	82 81       	ldd	r24, Z+2	; 0x02
    2658:	93 81       	ldd	r25, Z+3	; 0x03
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	4a ef       	ldi	r20, 0xFA	; 250
    2660:	54 e4       	ldi	r21, 0x44	; 68
    2662:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	f8 01       	movw	r30, r16
    266c:	80 83       	st	Z, r24
    266e:	91 83       	std	Z+1, r25	; 0x01
    2670:	a2 83       	std	Z+2, r26	; 0x02
    2672:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2674:	fe 01       	movw	r30, r28
    2676:	e3 5b       	subi	r30, 0xB3	; 179
    2678:	ff 4f       	sbci	r31, 0xFF	; 255
    267a:	60 81       	ld	r22, Z
    267c:	71 81       	ldd	r23, Z+1	; 0x01
    267e:	82 81       	ldd	r24, Z+2	; 0x02
    2680:	93 81       	ldd	r25, Z+3	; 0x03
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	40 e8       	ldi	r20, 0x80	; 128
    2688:	5f e3       	ldi	r21, 0x3F	; 63
    268a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    268e:	88 23       	and	r24, r24
    2690:	44 f4       	brge	.+16     	; 0x26a2 <main+0x30e>
		__ticks = 1;
    2692:	fe 01       	movw	r30, r28
    2694:	e5 5b       	subi	r30, 0xB5	; 181
    2696:	ff 4f       	sbci	r31, 0xFF	; 255
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	91 83       	std	Z+1, r25	; 0x01
    269e:	80 83       	st	Z, r24
    26a0:	64 c0       	rjmp	.+200    	; 0x276a <main+0x3d6>
	else if (__tmp > 65535)
    26a2:	fe 01       	movw	r30, r28
    26a4:	e3 5b       	subi	r30, 0xB3	; 179
    26a6:	ff 4f       	sbci	r31, 0xFF	; 255
    26a8:	60 81       	ld	r22, Z
    26aa:	71 81       	ldd	r23, Z+1	; 0x01
    26ac:	82 81       	ldd	r24, Z+2	; 0x02
    26ae:	93 81       	ldd	r25, Z+3	; 0x03
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	3f ef       	ldi	r19, 0xFF	; 255
    26b4:	4f e7       	ldi	r20, 0x7F	; 127
    26b6:	57 e4       	ldi	r21, 0x47	; 71
    26b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26bc:	18 16       	cp	r1, r24
    26be:	0c f0       	brlt	.+2      	; 0x26c2 <main+0x32e>
    26c0:	43 c0       	rjmp	.+134    	; 0x2748 <main+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c2:	fe 01       	movw	r30, r28
    26c4:	ef 5a       	subi	r30, 0xAF	; 175
    26c6:	ff 4f       	sbci	r31, 0xFF	; 255
    26c8:	60 81       	ld	r22, Z
    26ca:	71 81       	ldd	r23, Z+1	; 0x01
    26cc:	82 81       	ldd	r24, Z+2	; 0x02
    26ce:	93 81       	ldd	r25, Z+3	; 0x03
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	40 e2       	ldi	r20, 0x20	; 32
    26d6:	51 e4       	ldi	r21, 0x41	; 65
    26d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26dc:	dc 01       	movw	r26, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	8e 01       	movw	r16, r28
    26e2:	05 5b       	subi	r16, 0xB5	; 181
    26e4:	1f 4f       	sbci	r17, 0xFF	; 255
    26e6:	bc 01       	movw	r22, r24
    26e8:	cd 01       	movw	r24, r26
    26ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	f8 01       	movw	r30, r16
    26f4:	91 83       	std	Z+1, r25	; 0x01
    26f6:	80 83       	st	Z, r24
    26f8:	1f c0       	rjmp	.+62     	; 0x2738 <main+0x3a4>
    26fa:	fe 01       	movw	r30, r28
    26fc:	e7 5b       	subi	r30, 0xB7	; 183
    26fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2700:	88 ec       	ldi	r24, 0xC8	; 200
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	91 83       	std	Z+1, r25	; 0x01
    2706:	80 83       	st	Z, r24
    2708:	fe 01       	movw	r30, r28
    270a:	e7 5b       	subi	r30, 0xB7	; 183
    270c:	ff 4f       	sbci	r31, 0xFF	; 255
    270e:	80 81       	ld	r24, Z
    2710:	91 81       	ldd	r25, Z+1	; 0x01
    2712:	01 97       	sbiw	r24, 0x01	; 1
    2714:	f1 f7       	brne	.-4      	; 0x2712 <main+0x37e>
    2716:	fe 01       	movw	r30, r28
    2718:	e7 5b       	subi	r30, 0xB7	; 183
    271a:	ff 4f       	sbci	r31, 0xFF	; 255
    271c:	91 83       	std	Z+1, r25	; 0x01
    271e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2720:	de 01       	movw	r26, r28
    2722:	a5 5b       	subi	r26, 0xB5	; 181
    2724:	bf 4f       	sbci	r27, 0xFF	; 255
    2726:	fe 01       	movw	r30, r28
    2728:	e5 5b       	subi	r30, 0xB5	; 181
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	80 81       	ld	r24, Z
    272e:	91 81       	ldd	r25, Z+1	; 0x01
    2730:	01 97       	sbiw	r24, 0x01	; 1
    2732:	11 96       	adiw	r26, 0x01	; 1
    2734:	9c 93       	st	X, r25
    2736:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2738:	fe 01       	movw	r30, r28
    273a:	e5 5b       	subi	r30, 0xB5	; 181
    273c:	ff 4f       	sbci	r31, 0xFF	; 255
    273e:	80 81       	ld	r24, Z
    2740:	91 81       	ldd	r25, Z+1	; 0x01
    2742:	00 97       	sbiw	r24, 0x00	; 0
    2744:	d1 f6       	brne	.-76     	; 0x26fa <main+0x366>
    2746:	27 c0       	rjmp	.+78     	; 0x2796 <main+0x402>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2748:	8e 01       	movw	r16, r28
    274a:	05 5b       	subi	r16, 0xB5	; 181
    274c:	1f 4f       	sbci	r17, 0xFF	; 255
    274e:	fe 01       	movw	r30, r28
    2750:	e3 5b       	subi	r30, 0xB3	; 179
    2752:	ff 4f       	sbci	r31, 0xFF	; 255
    2754:	60 81       	ld	r22, Z
    2756:	71 81       	ldd	r23, Z+1	; 0x01
    2758:	82 81       	ldd	r24, Z+2	; 0x02
    275a:	93 81       	ldd	r25, Z+3	; 0x03
    275c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	f8 01       	movw	r30, r16
    2766:	91 83       	std	Z+1, r25	; 0x01
    2768:	80 83       	st	Z, r24
    276a:	de 01       	movw	r26, r28
    276c:	a9 5b       	subi	r26, 0xB9	; 185
    276e:	bf 4f       	sbci	r27, 0xFF	; 255
    2770:	fe 01       	movw	r30, r28
    2772:	e5 5b       	subi	r30, 0xB5	; 181
    2774:	ff 4f       	sbci	r31, 0xFF	; 255
    2776:	80 81       	ld	r24, Z
    2778:	91 81       	ldd	r25, Z+1	; 0x01
    277a:	8d 93       	st	X+, r24
    277c:	9c 93       	st	X, r25
    277e:	fe 01       	movw	r30, r28
    2780:	e9 5b       	subi	r30, 0xB9	; 185
    2782:	ff 4f       	sbci	r31, 0xFF	; 255
    2784:	80 81       	ld	r24, Z
    2786:	91 81       	ldd	r25, Z+1	; 0x01
    2788:	01 97       	sbiw	r24, 0x01	; 1
    278a:	f1 f7       	brne	.-4      	; 0x2788 <main+0x3f4>
    278c:	fe 01       	movw	r30, r28
    278e:	e9 5b       	subi	r30, 0xB9	; 185
    2790:	ff 4f       	sbci	r31, 0xFF	; 255
    2792:	91 83       	std	Z+1, r25	; 0x01
    2794:	80 83       	st	Z, r24
				_delay_ms(400);
				DIO_u8SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_LOW);
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	64 e0       	ldi	r22, 0x04	; 4
    279a:	40 e0       	ldi	r20, 0x00	; 0
    279c:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <DIO_u8SetPinValue>
				//**** Start System *****
				LTSystem();
    27a0:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <LTSystem>
    27a4:	40 cf       	rjmp	.-384    	; 0x2626 <main+0x292>
			}
		}
		else
		{
			trials--;
    27a6:	de 01       	movw	r26, r28
    27a8:	a7 59       	subi	r26, 0x97	; 151
    27aa:	bf 4f       	sbci	r27, 0xFF	; 255
    27ac:	fe 01       	movw	r30, r28
    27ae:	e7 59       	subi	r30, 0x97	; 151
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	80 81       	ld	r24, Z
    27b4:	81 50       	subi	r24, 0x01	; 1
    27b6:	8c 93       	st	X, r24
			if(trials==0)
    27b8:	fe 01       	movw	r30, r28
    27ba:	e7 59       	subi	r30, 0x97	; 151
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	80 81       	ld	r24, Z
    27c0:	88 23       	and	r24, r24
    27c2:	09 f0       	breq	.+2      	; 0x27c6 <main+0x432>
    27c4:	0c c2       	rjmp	.+1048   	; 0x2bde <main+0x84a>
			{
				CLCD_voidSendCommand(1);
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	0e 94 04 08 	call	0x1008	; 0x1008 <CLCD_voidSendCommand>
				CLCD_voidSendString("    ShutDown");
    27cc:	87 e7       	ldi	r24, 0x77	; 119
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <CLCD_voidSendString>
				CLCD_voidGoToXY(1,9);
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	69 e0       	ldi	r22, 0x09	; 9
    27d8:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <CLCD_voidGoToXY>
				CLCD_voidSendData('3');
    27dc:	83 e3       	ldi	r24, 0x33	; 51
    27de:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <CLCD_voidSendData>
    27e2:	fe 01       	movw	r30, r28
    27e4:	ed 5b       	subi	r30, 0xBD	; 189
    27e6:	ff 4f       	sbci	r31, 0xFF	; 255
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	aa ef       	ldi	r26, 0xFA	; 250
    27ee:	b3 e4       	ldi	r27, 0x43	; 67
    27f0:	80 83       	st	Z, r24
    27f2:	91 83       	std	Z+1, r25	; 0x01
    27f4:	a2 83       	std	Z+2, r26	; 0x02
    27f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f8:	8e 01       	movw	r16, r28
    27fa:	01 5c       	subi	r16, 0xC1	; 193
    27fc:	1f 4f       	sbci	r17, 0xFF	; 255
    27fe:	fe 01       	movw	r30, r28
    2800:	ed 5b       	subi	r30, 0xBD	; 189
    2802:	ff 4f       	sbci	r31, 0xFF	; 255
    2804:	60 81       	ld	r22, Z
    2806:	71 81       	ldd	r23, Z+1	; 0x01
    2808:	82 81       	ldd	r24, Z+2	; 0x02
    280a:	93 81       	ldd	r25, Z+3	; 0x03
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	4a ef       	ldi	r20, 0xFA	; 250
    2812:	54 e4       	ldi	r21, 0x44	; 68
    2814:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	f8 01       	movw	r30, r16
    281e:	80 83       	st	Z, r24
    2820:	91 83       	std	Z+1, r25	; 0x01
    2822:	a2 83       	std	Z+2, r26	; 0x02
    2824:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2826:	fe 01       	movw	r30, r28
    2828:	ff 96       	adiw	r30, 0x3f	; 63
    282a:	60 81       	ld	r22, Z
    282c:	71 81       	ldd	r23, Z+1	; 0x01
    282e:	82 81       	ldd	r24, Z+2	; 0x02
    2830:	93 81       	ldd	r25, Z+3	; 0x03
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	40 e8       	ldi	r20, 0x80	; 128
    2838:	5f e3       	ldi	r21, 0x3F	; 63
    283a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    283e:	88 23       	and	r24, r24
    2840:	2c f4       	brge	.+10     	; 0x284c <main+0x4b8>
		__ticks = 1;
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	9e af       	std	Y+62, r25	; 0x3e
    2848:	8d af       	std	Y+61, r24	; 0x3d
    284a:	46 c0       	rjmp	.+140    	; 0x28d8 <main+0x544>
	else if (__tmp > 65535)
    284c:	fe 01       	movw	r30, r28
    284e:	ff 96       	adiw	r30, 0x3f	; 63
    2850:	60 81       	ld	r22, Z
    2852:	71 81       	ldd	r23, Z+1	; 0x01
    2854:	82 81       	ldd	r24, Z+2	; 0x02
    2856:	93 81       	ldd	r25, Z+3	; 0x03
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	3f ef       	ldi	r19, 0xFF	; 255
    285c:	4f e7       	ldi	r20, 0x7F	; 127
    285e:	57 e4       	ldi	r21, 0x47	; 71
    2860:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2864:	18 16       	cp	r1, r24
    2866:	64 f5       	brge	.+88     	; 0x28c0 <main+0x52c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2868:	fe 01       	movw	r30, r28
    286a:	ed 5b       	subi	r30, 0xBD	; 189
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	60 81       	ld	r22, Z
    2870:	71 81       	ldd	r23, Z+1	; 0x01
    2872:	82 81       	ldd	r24, Z+2	; 0x02
    2874:	93 81       	ldd	r25, Z+3	; 0x03
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	40 e2       	ldi	r20, 0x20	; 32
    287c:	51 e4       	ldi	r21, 0x41	; 65
    287e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2882:	dc 01       	movw	r26, r24
    2884:	cb 01       	movw	r24, r22
    2886:	bc 01       	movw	r22, r24
    2888:	cd 01       	movw	r24, r26
    288a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	9e af       	std	Y+62, r25	; 0x3e
    2894:	8d af       	std	Y+61, r24	; 0x3d
    2896:	0f c0       	rjmp	.+30     	; 0x28b6 <main+0x522>
    2898:	88 ec       	ldi	r24, 0xC8	; 200
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	9c af       	std	Y+60, r25	; 0x3c
    289e:	8b af       	std	Y+59, r24	; 0x3b
    28a0:	8b ad       	ldd	r24, Y+59	; 0x3b
    28a2:	9c ad       	ldd	r25, Y+60	; 0x3c
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	f1 f7       	brne	.-4      	; 0x28a4 <main+0x510>
    28a8:	9c af       	std	Y+60, r25	; 0x3c
    28aa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    28ae:	9e ad       	ldd	r25, Y+62	; 0x3e
    28b0:	01 97       	sbiw	r24, 0x01	; 1
    28b2:	9e af       	std	Y+62, r25	; 0x3e
    28b4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    28b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    28ba:	00 97       	sbiw	r24, 0x00	; 0
    28bc:	69 f7       	brne	.-38     	; 0x2898 <main+0x504>
    28be:	16 c0       	rjmp	.+44     	; 0x28ec <main+0x558>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c0:	fe 01       	movw	r30, r28
    28c2:	ff 96       	adiw	r30, 0x3f	; 63
    28c4:	60 81       	ld	r22, Z
    28c6:	71 81       	ldd	r23, Z+1	; 0x01
    28c8:	82 81       	ldd	r24, Z+2	; 0x02
    28ca:	93 81       	ldd	r25, Z+3	; 0x03
    28cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	9e af       	std	Y+62, r25	; 0x3e
    28d6:	8d af       	std	Y+61, r24	; 0x3d
    28d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    28da:	9e ad       	ldd	r25, Y+62	; 0x3e
    28dc:	9a af       	std	Y+58, r25	; 0x3a
    28de:	89 af       	std	Y+57, r24	; 0x39
    28e0:	89 ad       	ldd	r24, Y+57	; 0x39
    28e2:	9a ad       	ldd	r25, Y+58	; 0x3a
    28e4:	01 97       	sbiw	r24, 0x01	; 1
    28e6:	f1 f7       	brne	.-4      	; 0x28e4 <main+0x550>
    28e8:	9a af       	std	Y+58, r25	; 0x3a
    28ea:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(500);
				CLCD_voidGoToXY(1,9);
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	69 e0       	ldi	r22, 0x09	; 9
    28f0:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <CLCD_voidGoToXY>
				CLCD_voidSendData('2');
    28f4:	82 e3       	ldi	r24, 0x32	; 50
    28f6:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <CLCD_voidSendData>
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	aa ef       	ldi	r26, 0xFA	; 250
    2900:	b3 e4       	ldi	r27, 0x43	; 67
    2902:	8d ab       	std	Y+53, r24	; 0x35
    2904:	9e ab       	std	Y+54, r25	; 0x36
    2906:	af ab       	std	Y+55, r26	; 0x37
    2908:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    290a:	6d a9       	ldd	r22, Y+53	; 0x35
    290c:	7e a9       	ldd	r23, Y+54	; 0x36
    290e:	8f a9       	ldd	r24, Y+55	; 0x37
    2910:	98 ad       	ldd	r25, Y+56	; 0x38
    2912:	20 e0       	ldi	r18, 0x00	; 0
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	4a ef       	ldi	r20, 0xFA	; 250
    2918:	54 e4       	ldi	r21, 0x44	; 68
    291a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291e:	dc 01       	movw	r26, r24
    2920:	cb 01       	movw	r24, r22
    2922:	89 ab       	std	Y+49, r24	; 0x31
    2924:	9a ab       	std	Y+50, r25	; 0x32
    2926:	ab ab       	std	Y+51, r26	; 0x33
    2928:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    292a:	69 a9       	ldd	r22, Y+49	; 0x31
    292c:	7a a9       	ldd	r23, Y+50	; 0x32
    292e:	8b a9       	ldd	r24, Y+51	; 0x33
    2930:	9c a9       	ldd	r25, Y+52	; 0x34
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	40 e8       	ldi	r20, 0x80	; 128
    2938:	5f e3       	ldi	r21, 0x3F	; 63
    293a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    293e:	88 23       	and	r24, r24
    2940:	2c f4       	brge	.+10     	; 0x294c <main+0x5b8>
		__ticks = 1;
    2942:	81 e0       	ldi	r24, 0x01	; 1
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	98 ab       	std	Y+48, r25	; 0x30
    2948:	8f a7       	std	Y+47, r24	; 0x2f
    294a:	3f c0       	rjmp	.+126    	; 0x29ca <main+0x636>
	else if (__tmp > 65535)
    294c:	69 a9       	ldd	r22, Y+49	; 0x31
    294e:	7a a9       	ldd	r23, Y+50	; 0x32
    2950:	8b a9       	ldd	r24, Y+51	; 0x33
    2952:	9c a9       	ldd	r25, Y+52	; 0x34
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	3f ef       	ldi	r19, 0xFF	; 255
    2958:	4f e7       	ldi	r20, 0x7F	; 127
    295a:	57 e4       	ldi	r21, 0x47	; 71
    295c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2960:	18 16       	cp	r1, r24
    2962:	4c f5       	brge	.+82     	; 0x29b6 <main+0x622>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2964:	6d a9       	ldd	r22, Y+53	; 0x35
    2966:	7e a9       	ldd	r23, Y+54	; 0x36
    2968:	8f a9       	ldd	r24, Y+55	; 0x37
    296a:	98 ad       	ldd	r25, Y+56	; 0x38
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	40 e2       	ldi	r20, 0x20	; 32
    2972:	51 e4       	ldi	r21, 0x41	; 65
    2974:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	bc 01       	movw	r22, r24
    297e:	cd 01       	movw	r24, r26
    2980:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	98 ab       	std	Y+48, r25	; 0x30
    298a:	8f a7       	std	Y+47, r24	; 0x2f
    298c:	0f c0       	rjmp	.+30     	; 0x29ac <main+0x618>
    298e:	88 ec       	ldi	r24, 0xC8	; 200
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	9e a7       	std	Y+46, r25	; 0x2e
    2994:	8d a7       	std	Y+45, r24	; 0x2d
    2996:	8d a5       	ldd	r24, Y+45	; 0x2d
    2998:	9e a5       	ldd	r25, Y+46	; 0x2e
    299a:	01 97       	sbiw	r24, 0x01	; 1
    299c:	f1 f7       	brne	.-4      	; 0x299a <main+0x606>
    299e:	9e a7       	std	Y+46, r25	; 0x2e
    29a0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    29a4:	98 a9       	ldd	r25, Y+48	; 0x30
    29a6:	01 97       	sbiw	r24, 0x01	; 1
    29a8:	98 ab       	std	Y+48, r25	; 0x30
    29aa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    29ae:	98 a9       	ldd	r25, Y+48	; 0x30
    29b0:	00 97       	sbiw	r24, 0x00	; 0
    29b2:	69 f7       	brne	.-38     	; 0x298e <main+0x5fa>
    29b4:	14 c0       	rjmp	.+40     	; 0x29de <main+0x64a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b6:	69 a9       	ldd	r22, Y+49	; 0x31
    29b8:	7a a9       	ldd	r23, Y+50	; 0x32
    29ba:	8b a9       	ldd	r24, Y+51	; 0x33
    29bc:	9c a9       	ldd	r25, Y+52	; 0x34
    29be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	98 ab       	std	Y+48, r25	; 0x30
    29c8:	8f a7       	std	Y+47, r24	; 0x2f
    29ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    29cc:	98 a9       	ldd	r25, Y+48	; 0x30
    29ce:	9c a7       	std	Y+44, r25	; 0x2c
    29d0:	8b a7       	std	Y+43, r24	; 0x2b
    29d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    29d4:	9c a5       	ldd	r25, Y+44	; 0x2c
    29d6:	01 97       	sbiw	r24, 0x01	; 1
    29d8:	f1 f7       	brne	.-4      	; 0x29d6 <main+0x642>
    29da:	9c a7       	std	Y+44, r25	; 0x2c
    29dc:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(500);
				CLCD_voidGoToXY(1,9);
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	69 e0       	ldi	r22, 0x09	; 9
    29e2:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <CLCD_voidGoToXY>
				CLCD_voidSendData('1');
    29e6:	81 e3       	ldi	r24, 0x31	; 49
    29e8:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <CLCD_voidSendData>
    29ec:	80 e0       	ldi	r24, 0x00	; 0
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	aa ef       	ldi	r26, 0xFA	; 250
    29f2:	b3 e4       	ldi	r27, 0x43	; 67
    29f4:	8f a3       	std	Y+39, r24	; 0x27
    29f6:	98 a7       	std	Y+40, r25	; 0x28
    29f8:	a9 a7       	std	Y+41, r26	; 0x29
    29fa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29fc:	6f a1       	ldd	r22, Y+39	; 0x27
    29fe:	78 a5       	ldd	r23, Y+40	; 0x28
    2a00:	89 a5       	ldd	r24, Y+41	; 0x29
    2a02:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	4a ef       	ldi	r20, 0xFA	; 250
    2a0a:	54 e4       	ldi	r21, 0x44	; 68
    2a0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a10:	dc 01       	movw	r26, r24
    2a12:	cb 01       	movw	r24, r22
    2a14:	8b a3       	std	Y+35, r24	; 0x23
    2a16:	9c a3       	std	Y+36, r25	; 0x24
    2a18:	ad a3       	std	Y+37, r26	; 0x25
    2a1a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a1c:	6b a1       	ldd	r22, Y+35	; 0x23
    2a1e:	7c a1       	ldd	r23, Y+36	; 0x24
    2a20:	8d a1       	ldd	r24, Y+37	; 0x25
    2a22:	9e a1       	ldd	r25, Y+38	; 0x26
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	40 e8       	ldi	r20, 0x80	; 128
    2a2a:	5f e3       	ldi	r21, 0x3F	; 63
    2a2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a30:	88 23       	and	r24, r24
    2a32:	2c f4       	brge	.+10     	; 0x2a3e <main+0x6aa>
		__ticks = 1;
    2a34:	81 e0       	ldi	r24, 0x01	; 1
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	9a a3       	std	Y+34, r25	; 0x22
    2a3a:	89 a3       	std	Y+33, r24	; 0x21
    2a3c:	3f c0       	rjmp	.+126    	; 0x2abc <main+0x728>
	else if (__tmp > 65535)
    2a3e:	6b a1       	ldd	r22, Y+35	; 0x23
    2a40:	7c a1       	ldd	r23, Y+36	; 0x24
    2a42:	8d a1       	ldd	r24, Y+37	; 0x25
    2a44:	9e a1       	ldd	r25, Y+38	; 0x26
    2a46:	20 e0       	ldi	r18, 0x00	; 0
    2a48:	3f ef       	ldi	r19, 0xFF	; 255
    2a4a:	4f e7       	ldi	r20, 0x7F	; 127
    2a4c:	57 e4       	ldi	r21, 0x47	; 71
    2a4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a52:	18 16       	cp	r1, r24
    2a54:	4c f5       	brge	.+82     	; 0x2aa8 <main+0x714>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a56:	6f a1       	ldd	r22, Y+39	; 0x27
    2a58:	78 a5       	ldd	r23, Y+40	; 0x28
    2a5a:	89 a5       	ldd	r24, Y+41	; 0x29
    2a5c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	40 e2       	ldi	r20, 0x20	; 32
    2a64:	51 e4       	ldi	r21, 0x41	; 65
    2a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	bc 01       	movw	r22, r24
    2a70:	cd 01       	movw	r24, r26
    2a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a76:	dc 01       	movw	r26, r24
    2a78:	cb 01       	movw	r24, r22
    2a7a:	9a a3       	std	Y+34, r25	; 0x22
    2a7c:	89 a3       	std	Y+33, r24	; 0x21
    2a7e:	0f c0       	rjmp	.+30     	; 0x2a9e <main+0x70a>
    2a80:	88 ec       	ldi	r24, 0xC8	; 200
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	98 a3       	std	Y+32, r25	; 0x20
    2a86:	8f 8f       	std	Y+31, r24	; 0x1f
    2a88:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a8a:	98 a1       	ldd	r25, Y+32	; 0x20
    2a8c:	01 97       	sbiw	r24, 0x01	; 1
    2a8e:	f1 f7       	brne	.-4      	; 0x2a8c <main+0x6f8>
    2a90:	98 a3       	std	Y+32, r25	; 0x20
    2a92:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a94:	89 a1       	ldd	r24, Y+33	; 0x21
    2a96:	9a a1       	ldd	r25, Y+34	; 0x22
    2a98:	01 97       	sbiw	r24, 0x01	; 1
    2a9a:	9a a3       	std	Y+34, r25	; 0x22
    2a9c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a9e:	89 a1       	ldd	r24, Y+33	; 0x21
    2aa0:	9a a1       	ldd	r25, Y+34	; 0x22
    2aa2:	00 97       	sbiw	r24, 0x00	; 0
    2aa4:	69 f7       	brne	.-38     	; 0x2a80 <main+0x6ec>
    2aa6:	14 c0       	rjmp	.+40     	; 0x2ad0 <main+0x73c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aa8:	6b a1       	ldd	r22, Y+35	; 0x23
    2aaa:	7c a1       	ldd	r23, Y+36	; 0x24
    2aac:	8d a1       	ldd	r24, Y+37	; 0x25
    2aae:	9e a1       	ldd	r25, Y+38	; 0x26
    2ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	9a a3       	std	Y+34, r25	; 0x22
    2aba:	89 a3       	std	Y+33, r24	; 0x21
    2abc:	89 a1       	ldd	r24, Y+33	; 0x21
    2abe:	9a a1       	ldd	r25, Y+34	; 0x22
    2ac0:	9e 8f       	std	Y+30, r25	; 0x1e
    2ac2:	8d 8f       	std	Y+29, r24	; 0x1d
    2ac4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ac6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ac8:	01 97       	sbiw	r24, 0x01	; 1
    2aca:	f1 f7       	brne	.-4      	; 0x2ac8 <main+0x734>
    2acc:	9e 8f       	std	Y+30, r25	; 0x1e
    2ace:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(500);
				CLCD_voidSendCommand(1);
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	0e 94 04 08 	call	0x1008	; 0x1008 <CLCD_voidSendCommand>
				trials = 3;
    2ad6:	fe 01       	movw	r30, r28
    2ad8:	e7 59       	subi	r30, 0x97	; 151
    2ada:	ff 4f       	sbci	r31, 0xFF	; 255
    2adc:	83 e0       	ldi	r24, 0x03	; 3
    2ade:	80 83       	st	Z, r24
				multiplier=1;
    2ae0:	fe 01       	movw	r30, r28
    2ae2:	ed 59       	subi	r30, 0x9D	; 157
    2ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	91 83       	std	Z+1, r25	; 0x01
    2aec:	80 83       	st	Z, r24
				Enter_password = 0;
    2aee:	fe 01       	movw	r30, r28
    2af0:	e9 59       	subi	r30, 0x99	; 153
    2af2:	ff 4f       	sbci	r31, 0xFF	; 255
    2af4:	11 82       	std	Z+1, r1	; 0x01
    2af6:	10 82       	st	Z, r1
    2af8:	80 e0       	ldi	r24, 0x00	; 0
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	aa ef       	ldi	r26, 0xFA	; 250
    2afe:	b3 e4       	ldi	r27, 0x43	; 67
    2b00:	89 8f       	std	Y+25, r24	; 0x19
    2b02:	9a 8f       	std	Y+26, r25	; 0x1a
    2b04:	ab 8f       	std	Y+27, r26	; 0x1b
    2b06:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b08:	69 8d       	ldd	r22, Y+25	; 0x19
    2b0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	4a ef       	ldi	r20, 0xFA	; 250
    2b16:	54 e4       	ldi	r21, 0x44	; 68
    2b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	8d 8b       	std	Y+21, r24	; 0x15
    2b22:	9e 8b       	std	Y+22, r25	; 0x16
    2b24:	af 8b       	std	Y+23, r26	; 0x17
    2b26:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b28:	6d 89       	ldd	r22, Y+21	; 0x15
    2b2a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b2c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b2e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	40 e8       	ldi	r20, 0x80	; 128
    2b36:	5f e3       	ldi	r21, 0x3F	; 63
    2b38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b3c:	88 23       	and	r24, r24
    2b3e:	2c f4       	brge	.+10     	; 0x2b4a <main+0x7b6>
		__ticks = 1;
    2b40:	81 e0       	ldi	r24, 0x01	; 1
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	9c 8b       	std	Y+20, r25	; 0x14
    2b46:	8b 8b       	std	Y+19, r24	; 0x13
    2b48:	3f c0       	rjmp	.+126    	; 0x2bc8 <main+0x834>
	else if (__tmp > 65535)
    2b4a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b4c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b4e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b50:	98 8d       	ldd	r25, Y+24	; 0x18
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	3f ef       	ldi	r19, 0xFF	; 255
    2b56:	4f e7       	ldi	r20, 0x7F	; 127
    2b58:	57 e4       	ldi	r21, 0x47	; 71
    2b5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b5e:	18 16       	cp	r1, r24
    2b60:	4c f5       	brge	.+82     	; 0x2bb4 <main+0x820>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b62:	69 8d       	ldd	r22, Y+25	; 0x19
    2b64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	40 e2       	ldi	r20, 0x20	; 32
    2b70:	51 e4       	ldi	r21, 0x41	; 65
    2b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b76:	dc 01       	movw	r26, r24
    2b78:	cb 01       	movw	r24, r22
    2b7a:	bc 01       	movw	r22, r24
    2b7c:	cd 01       	movw	r24, r26
    2b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b82:	dc 01       	movw	r26, r24
    2b84:	cb 01       	movw	r24, r22
    2b86:	9c 8b       	std	Y+20, r25	; 0x14
    2b88:	8b 8b       	std	Y+19, r24	; 0x13
    2b8a:	0f c0       	rjmp	.+30     	; 0x2baa <main+0x816>
    2b8c:	88 ec       	ldi	r24, 0xC8	; 200
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	9a 8b       	std	Y+18, r25	; 0x12
    2b92:	89 8b       	std	Y+17, r24	; 0x11
    2b94:	89 89       	ldd	r24, Y+17	; 0x11
    2b96:	9a 89       	ldd	r25, Y+18	; 0x12
    2b98:	01 97       	sbiw	r24, 0x01	; 1
    2b9a:	f1 f7       	brne	.-4      	; 0x2b98 <main+0x804>
    2b9c:	9a 8b       	std	Y+18, r25	; 0x12
    2b9e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ba0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ba2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ba4:	01 97       	sbiw	r24, 0x01	; 1
    2ba6:	9c 8b       	std	Y+20, r25	; 0x14
    2ba8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2baa:	8b 89       	ldd	r24, Y+19	; 0x13
    2bac:	9c 89       	ldd	r25, Y+20	; 0x14
    2bae:	00 97       	sbiw	r24, 0x00	; 0
    2bb0:	69 f7       	brne	.-38     	; 0x2b8c <main+0x7f8>
    2bb2:	db cc       	rjmp	.-1610   	; 0x256a <main+0x1d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb4:	6d 89       	ldd	r22, Y+21	; 0x15
    2bb6:	7e 89       	ldd	r23, Y+22	; 0x16
    2bb8:	8f 89       	ldd	r24, Y+23	; 0x17
    2bba:	98 8d       	ldd	r25, Y+24	; 0x18
    2bbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	9c 8b       	std	Y+20, r25	; 0x14
    2bc6:	8b 8b       	std	Y+19, r24	; 0x13
    2bc8:	8b 89       	ldd	r24, Y+19	; 0x13
    2bca:	9c 89       	ldd	r25, Y+20	; 0x14
    2bcc:	98 8b       	std	Y+16, r25	; 0x10
    2bce:	8f 87       	std	Y+15, r24	; 0x0f
    2bd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bd2:	98 89       	ldd	r25, Y+16	; 0x10
    2bd4:	01 97       	sbiw	r24, 0x01	; 1
    2bd6:	f1 f7       	brne	.-4      	; 0x2bd4 <main+0x840>
    2bd8:	98 8b       	std	Y+16, r25	; 0x10
    2bda:	8f 87       	std	Y+15, r24	; 0x0f
    2bdc:	c6 cc       	rjmp	.-1652   	; 0x256a <main+0x1d6>
				_delay_ms(500);
			}
			else{
				// ON ==> Red Led
				DIO_u8SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);
    2bde:	81 e0       	ldi	r24, 0x01	; 1
    2be0:	63 e0       	ldi	r22, 0x03	; 3
    2be2:	41 e0       	ldi	r20, 0x01	; 1
    2be4:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <DIO_u8SetPinValue>
				BuzzerSound();
    2be8:	0e 94 58 19 	call	0x32b0	; 0x32b0 <BuzzerSound>
				CLCD_voidSendCommand(1);
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	0e 94 04 08 	call	0x1008	; 0x1008 <CLCD_voidSendCommand>
				CLCD_voidSendString("    Try Again!");
    2bf2:	84 e8       	ldi	r24, 0x84	; 132
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <CLCD_voidSendString>
				CLCD_voidGoToXY(1,0);
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	60 e0       	ldi	r22, 0x00	; 0
    2bfe:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <CLCD_voidGoToXY>
				CLCD_voidSendString("Trials : ");
    2c02:	83 e9       	ldi	r24, 0x93	; 147
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <CLCD_voidSendString>
				CLCD_voidGoToXY(1,9);
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	69 e0       	ldi	r22, 0x09	; 9
    2c0e:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <CLCD_voidGoToXY>
				CLCD_voidWriteNumber(trials);
    2c12:	fe 01       	movw	r30, r28
    2c14:	e7 59       	subi	r30, 0x97	; 151
    2c16:	ff 4f       	sbci	r31, 0xFF	; 255
    2c18:	80 81       	ld	r24, Z
    2c1a:	99 27       	eor	r25, r25
    2c1c:	87 fd       	sbrc	r24, 7
    2c1e:	90 95       	com	r25
    2c20:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <CLCD_voidWriteNumber>
    2c24:	80 e0       	ldi	r24, 0x00	; 0
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	aa ef       	ldi	r26, 0xFA	; 250
    2c2a:	b3 e4       	ldi	r27, 0x43	; 67
    2c2c:	8b 87       	std	Y+11, r24	; 0x0b
    2c2e:	9c 87       	std	Y+12, r25	; 0x0c
    2c30:	ad 87       	std	Y+13, r26	; 0x0d
    2c32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c34:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c36:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	4a ef       	ldi	r20, 0xFA	; 250
    2c42:	54 e4       	ldi	r21, 0x44	; 68
    2c44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	8f 83       	std	Y+7, r24	; 0x07
    2c4e:	98 87       	std	Y+8, r25	; 0x08
    2c50:	a9 87       	std	Y+9, r26	; 0x09
    2c52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c54:	6f 81       	ldd	r22, Y+7	; 0x07
    2c56:	78 85       	ldd	r23, Y+8	; 0x08
    2c58:	89 85       	ldd	r24, Y+9	; 0x09
    2c5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	40 e8       	ldi	r20, 0x80	; 128
    2c62:	5f e3       	ldi	r21, 0x3F	; 63
    2c64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c68:	88 23       	and	r24, r24
    2c6a:	2c f4       	brge	.+10     	; 0x2c76 <main+0x8e2>
		__ticks = 1;
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	9e 83       	std	Y+6, r25	; 0x06
    2c72:	8d 83       	std	Y+5, r24	; 0x05
    2c74:	3f c0       	rjmp	.+126    	; 0x2cf4 <main+0x960>
	else if (__tmp > 65535)
    2c76:	6f 81       	ldd	r22, Y+7	; 0x07
    2c78:	78 85       	ldd	r23, Y+8	; 0x08
    2c7a:	89 85       	ldd	r24, Y+9	; 0x09
    2c7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	3f ef       	ldi	r19, 0xFF	; 255
    2c82:	4f e7       	ldi	r20, 0x7F	; 127
    2c84:	57 e4       	ldi	r21, 0x47	; 71
    2c86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c8a:	18 16       	cp	r1, r24
    2c8c:	4c f5       	brge	.+82     	; 0x2ce0 <main+0x94c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c90:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	40 e2       	ldi	r20, 0x20	; 32
    2c9c:	51 e4       	ldi	r21, 0x41	; 65
    2c9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	cb 01       	movw	r24, r22
    2ca6:	bc 01       	movw	r22, r24
    2ca8:	cd 01       	movw	r24, r26
    2caa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cae:	dc 01       	movw	r26, r24
    2cb0:	cb 01       	movw	r24, r22
    2cb2:	9e 83       	std	Y+6, r25	; 0x06
    2cb4:	8d 83       	std	Y+5, r24	; 0x05
    2cb6:	0f c0       	rjmp	.+30     	; 0x2cd6 <main+0x942>
    2cb8:	88 ec       	ldi	r24, 0xC8	; 200
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	9c 83       	std	Y+4, r25	; 0x04
    2cbe:	8b 83       	std	Y+3, r24	; 0x03
    2cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc4:	01 97       	sbiw	r24, 0x01	; 1
    2cc6:	f1 f7       	brne	.-4      	; 0x2cc4 <main+0x930>
    2cc8:	9c 83       	std	Y+4, r25	; 0x04
    2cca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cce:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd0:	01 97       	sbiw	r24, 0x01	; 1
    2cd2:	9e 83       	std	Y+6, r25	; 0x06
    2cd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cda:	00 97       	sbiw	r24, 0x00	; 0
    2cdc:	69 f7       	brne	.-38     	; 0x2cb8 <main+0x924>
    2cde:	14 c0       	rjmp	.+40     	; 0x2d08 <main+0x974>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ce0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce2:	78 85       	ldd	r23, Y+8	; 0x08
    2ce4:	89 85       	ldd	r24, Y+9	; 0x09
    2ce6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	9e 83       	std	Y+6, r25	; 0x06
    2cf2:	8d 83       	std	Y+5, r24	; 0x05
    2cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf8:	9a 83       	std	Y+2, r25	; 0x02
    2cfa:	89 83       	std	Y+1, r24	; 0x01
    2cfc:	89 81       	ldd	r24, Y+1	; 0x01
    2cfe:	9a 81       	ldd	r25, Y+2	; 0x02
    2d00:	01 97       	sbiw	r24, 0x01	; 1
    2d02:	f1 f7       	brne	.-4      	; 0x2d00 <main+0x96c>
    2d04:	9a 83       	std	Y+2, r25	; 0x02
    2d06:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
				// OFF ==> Red Led
				DIO_u8SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	63 e0       	ldi	r22, 0x03	; 3
    2d0c:	40 e0       	ldi	r20, 0x00	; 0
    2d0e:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <DIO_u8SetPinValue>
				// Initial Values
				multiplier=1;
    2d12:	fe 01       	movw	r30, r28
    2d14:	ed 59       	subi	r30, 0x9D	; 157
    2d16:	ff 4f       	sbci	r31, 0xFF	; 255
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	91 83       	std	Z+1, r25	; 0x01
    2d1e:	80 83       	st	Z, r24
				Enter_password = 0;
    2d20:	fe 01       	movw	r30, r28
    2d22:	e9 59       	subi	r30, 0x99	; 153
    2d24:	ff 4f       	sbci	r31, 0xFF	; 255
    2d26:	11 82       	std	Z+1, r1	; 0x01
    2d28:	10 82       	st	Z, r1
    2d2a:	1f cc       	rjmp	.-1986   	; 0x256a <main+0x1d6>

00002d2c <LTSystem>:
// Temp Variables
u8 TempEnter = 0;
u8 TempMultiplier = 10;

void LTSystem()
{
    2d2c:	df 93       	push	r29
    2d2e:	cf 93       	push	r28
    2d30:	cd b7       	in	r28, 0x3d	; 61
    2d32:	de b7       	in	r29, 0x3e	; 62
    2d34:	63 97       	sbiw	r28, 0x13	; 19
    2d36:	0f b6       	in	r0, 0x3f	; 63
    2d38:	f8 94       	cli
    2d3a:	de bf       	out	0x3e, r29	; 62
    2d3c:	0f be       	out	0x3f, r0	; 63
    2d3e:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendCommand(0x80);
    2d40:	80 e8       	ldi	r24, 0x80	; 128
    2d42:	0e 94 04 08 	call	0x1008	; 0x1008 <CLCD_voidSendCommand>
	CLCD_voidSendString("1-AirCon 2-SafeMod");
    2d46:	8d e9       	ldi	r24, 0x9D	; 157
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <CLCD_voidSendString>
	CLCD_voidGoToXY(1,0);
    2d4e:	81 e0       	ldi	r24, 0x01	; 1
    2d50:	60 e0       	ldi	r22, 0x00	; 0
    2d52:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <CLCD_voidGoToXY>
	CLCD_voidSendString("3-Rooms  4-fan");
    2d56:	80 eb       	ldi	r24, 0xB0	; 176
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <CLCD_voidSendString>
	// ***** Choose Options *****
	do{
		GlobData = KPD_u8Key_pressed();
    2d5e:	0e 94 2c 11 	call	0x2258	; 0x2258 <KPD_u8Key_pressed>
    2d62:	88 2f       	mov	r24, r24
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	90 93 41 01 	sts	0x0141, r25
    2d6a:	80 93 40 01 	sts	0x0140, r24
	}while(GlobData==KPAD_STATE_ILDE);
    2d6e:	80 91 40 01 	lds	r24, 0x0140
    2d72:	90 91 41 01 	lds	r25, 0x0141
    2d76:	8f 3f       	cpi	r24, 0xFF	; 255
    2d78:	91 05       	cpc	r25, r1
    2d7a:	89 f3       	breq	.-30     	; 0x2d5e <LTSystem+0x32>
	if(GlobData==1)
    2d7c:	80 91 40 01 	lds	r24, 0x0140
    2d80:	90 91 41 01 	lds	r25, 0x0141
    2d84:	81 30       	cpi	r24, 0x01	; 1
    2d86:	91 05       	cpc	r25, r1
    2d88:	09 f0       	breq	.+2      	; 0x2d8c <LTSystem+0x60>
    2d8a:	0e c1       	rjmp	.+540    	; 0x2fa8 <LTSystem+0x27c>
	{
		CLCD_voidSendCommand(1);
    2d8c:	81 e0       	ldi	r24, 0x01	; 1
    2d8e:	0e 94 04 08 	call	0x1008	; 0x1008 <CLCD_voidSendCommand>
		CLCD_voidSendString("temp : ");
    2d92:	8f eb       	ldi	r24, 0xBF	; 191
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <CLCD_voidSendString>
		for( u8 i=0;i<2 ; i++)
    2d9a:	1f 86       	std	Y+15, r1	; 0x0f
    2d9c:	44 c0       	rjmp	.+136    	; 0x2e26 <LTSystem+0xfa>
		{
			do{
				GlobData = KPD_u8Key_pressed();
    2d9e:	0e 94 2c 11 	call	0x2258	; 0x2258 <KPD_u8Key_pressed>
    2da2:	88 2f       	mov	r24, r24
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	90 93 41 01 	sts	0x0141, r25
    2daa:	80 93 40 01 	sts	0x0140, r24
			}while(GlobData==KPAD_STATE_ILDE);
    2dae:	80 91 40 01 	lds	r24, 0x0140
    2db2:	90 91 41 01 	lds	r25, 0x0141
    2db6:	8f 3f       	cpi	r24, 0xFF	; 255
    2db8:	91 05       	cpc	r25, r1
    2dba:	89 f3       	breq	.-30     	; 0x2d9e <LTSystem+0x72>
			if((0<=GlobData)&&(GlobData<=9))
    2dbc:	80 91 40 01 	lds	r24, 0x0140
    2dc0:	90 91 41 01 	lds	r25, 0x0141
    2dc4:	8a 30       	cpi	r24, 0x0A	; 10
    2dc6:	91 05       	cpc	r25, r1
    2dc8:	40 f5       	brcc	.+80     	; 0x2e1a <LTSystem+0xee>
			{
				CLCD_voidWriteNumber(GlobData);
    2dca:	80 91 40 01 	lds	r24, 0x0140
    2dce:	90 91 41 01 	lds	r25, 0x0141
    2dd2:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <CLCD_voidWriteNumber>
				TempEnter+=TempMultiplier*GlobData;
    2dd6:	80 91 30 01 	lds	r24, 0x0130
    2dda:	28 2f       	mov	r18, r24
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	80 91 40 01 	lds	r24, 0x0140
    2de2:	90 91 41 01 	lds	r25, 0x0141
    2de6:	ac 01       	movw	r20, r24
    2de8:	24 9f       	mul	r18, r20
    2dea:	c0 01       	movw	r24, r0
    2dec:	25 9f       	mul	r18, r21
    2dee:	90 0d       	add	r25, r0
    2df0:	34 9f       	mul	r19, r20
    2df2:	90 0d       	add	r25, r0
    2df4:	11 24       	eor	r1, r1
    2df6:	98 2f       	mov	r25, r24
    2df8:	80 91 3c 01 	lds	r24, 0x013C
    2dfc:	89 0f       	add	r24, r25
    2dfe:	80 93 3c 01 	sts	0x013C, r24
				// mul 10 to 2nd Digit
				TempMultiplier/=10;
    2e02:	80 91 30 01 	lds	r24, 0x0130
    2e06:	9a e0       	ldi	r25, 0x0A	; 10
    2e08:	69 2f       	mov	r22, r25
    2e0a:	0e 94 81 1a 	call	0x3502	; 0x3502 <__udivmodqi4>
    2e0e:	80 93 30 01 	sts	0x0130, r24
	}while(GlobData==KPAD_STATE_ILDE);
	if(GlobData==1)
	{
		CLCD_voidSendCommand(1);
		CLCD_voidSendString("temp : ");
		for( u8 i=0;i<2 ; i++)
    2e12:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e14:	8f 5f       	subi	r24, 0xFF	; 255
    2e16:	8f 87       	std	Y+15, r24	; 0x0f
    2e18:	06 c0       	rjmp	.+12     	; 0x2e26 <LTSystem+0xfa>
				// mul 10 to 2nd Digit
				TempMultiplier/=10;
			}
			else{
				// reset Values
				TempEnter = 0;
    2e1a:	10 92 3c 01 	sts	0x013C, r1
				TempMultiplier = 10;
    2e1e:	8a e0       	ldi	r24, 0x0A	; 10
    2e20:	80 93 30 01 	sts	0x0130, r24
    2e24:	04 c0       	rjmp	.+8      	; 0x2e2e <LTSystem+0x102>
	}while(GlobData==KPAD_STATE_ILDE);
	if(GlobData==1)
	{
		CLCD_voidSendCommand(1);
		CLCD_voidSendString("temp : ");
		for( u8 i=0;i<2 ; i++)
    2e26:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e28:	82 30       	cpi	r24, 0x02	; 2
    2e2a:	08 f4       	brcc	.+2      	; 0x2e2e <LTSystem+0x102>
    2e2c:	b8 cf       	rjmp	.-144    	; 0x2d9e <LTSystem+0x72>
    2e2e:	80 e0       	ldi	r24, 0x00	; 0
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	a8 e4       	ldi	r26, 0x48	; 72
    2e34:	b3 e4       	ldi	r27, 0x43	; 67
    2e36:	8b 87       	std	Y+11, r24	; 0x0b
    2e38:	9c 87       	std	Y+12, r25	; 0x0c
    2e3a:	ad 87       	std	Y+13, r26	; 0x0d
    2e3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e40:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e42:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e44:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e46:	20 e0       	ldi	r18, 0x00	; 0
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	4a ef       	ldi	r20, 0xFA	; 250
    2e4c:	54 e4       	ldi	r21, 0x44	; 68
    2e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e52:	dc 01       	movw	r26, r24
    2e54:	cb 01       	movw	r24, r22
    2e56:	8f 83       	std	Y+7, r24	; 0x07
    2e58:	98 87       	std	Y+8, r25	; 0x08
    2e5a:	a9 87       	std	Y+9, r26	; 0x09
    2e5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e60:	78 85       	ldd	r23, Y+8	; 0x08
    2e62:	89 85       	ldd	r24, Y+9	; 0x09
    2e64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	40 e8       	ldi	r20, 0x80	; 128
    2e6c:	5f e3       	ldi	r21, 0x3F	; 63
    2e6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e72:	88 23       	and	r24, r24
    2e74:	2c f4       	brge	.+10     	; 0x2e80 <LTSystem+0x154>
		__ticks = 1;
    2e76:	81 e0       	ldi	r24, 0x01	; 1
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	9e 83       	std	Y+6, r25	; 0x06
    2e7c:	8d 83       	std	Y+5, r24	; 0x05
    2e7e:	3f c0       	rjmp	.+126    	; 0x2efe <LTSystem+0x1d2>
	else if (__tmp > 65535)
    2e80:	6f 81       	ldd	r22, Y+7	; 0x07
    2e82:	78 85       	ldd	r23, Y+8	; 0x08
    2e84:	89 85       	ldd	r24, Y+9	; 0x09
    2e86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e88:	20 e0       	ldi	r18, 0x00	; 0
    2e8a:	3f ef       	ldi	r19, 0xFF	; 255
    2e8c:	4f e7       	ldi	r20, 0x7F	; 127
    2e8e:	57 e4       	ldi	r21, 0x47	; 71
    2e90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e94:	18 16       	cp	r1, r24
    2e96:	4c f5       	brge	.+82     	; 0x2eea <LTSystem+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e98:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	40 e2       	ldi	r20, 0x20	; 32
    2ea6:	51 e4       	ldi	r21, 0x41	; 65
    2ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eac:	dc 01       	movw	r26, r24
    2eae:	cb 01       	movw	r24, r22
    2eb0:	bc 01       	movw	r22, r24
    2eb2:	cd 01       	movw	r24, r26
    2eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb8:	dc 01       	movw	r26, r24
    2eba:	cb 01       	movw	r24, r22
    2ebc:	9e 83       	std	Y+6, r25	; 0x06
    2ebe:	8d 83       	std	Y+5, r24	; 0x05
    2ec0:	0f c0       	rjmp	.+30     	; 0x2ee0 <LTSystem+0x1b4>
    2ec2:	88 ec       	ldi	r24, 0xC8	; 200
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	9c 83       	std	Y+4, r25	; 0x04
    2ec8:	8b 83       	std	Y+3, r24	; 0x03
    2eca:	8b 81       	ldd	r24, Y+3	; 0x03
    2ecc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ece:	01 97       	sbiw	r24, 0x01	; 1
    2ed0:	f1 f7       	brne	.-4      	; 0x2ece <LTSystem+0x1a2>
    2ed2:	9c 83       	std	Y+4, r25	; 0x04
    2ed4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eda:	01 97       	sbiw	r24, 0x01	; 1
    2edc:	9e 83       	std	Y+6, r25	; 0x06
    2ede:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee4:	00 97       	sbiw	r24, 0x00	; 0
    2ee6:	69 f7       	brne	.-38     	; 0x2ec2 <LTSystem+0x196>
    2ee8:	14 c0       	rjmp	.+40     	; 0x2f12 <LTSystem+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eea:	6f 81       	ldd	r22, Y+7	; 0x07
    2eec:	78 85       	ldd	r23, Y+8	; 0x08
    2eee:	89 85       	ldd	r24, Y+9	; 0x09
    2ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	9e 83       	std	Y+6, r25	; 0x06
    2efc:	8d 83       	std	Y+5, r24	; 0x05
    2efe:	8d 81       	ldd	r24, Y+5	; 0x05
    2f00:	9e 81       	ldd	r25, Y+6	; 0x06
    2f02:	9a 83       	std	Y+2, r25	; 0x02
    2f04:	89 83       	std	Y+1, r24	; 0x01
    2f06:	89 81       	ldd	r24, Y+1	; 0x01
    2f08:	9a 81       	ldd	r25, Y+2	; 0x02
    2f0a:	01 97       	sbiw	r24, 0x01	; 1
    2f0c:	f1 f7       	brne	.-4      	; 0x2f0a <LTSystem+0x1de>
    2f0e:	9a 83       	std	Y+2, r25	; 0x02
    2f10:	89 83       	std	Y+1, r24	; 0x01
			}
		}
		_delay_ms(200);
		do
		{
			CLCD_voidSendCommand(1);
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	0e 94 04 08 	call	0x1008	; 0x1008 <CLCD_voidSendCommand>
			CLCD_voidSendString("temp : ");
    2f18:	8f eb       	ldi	r24, 0xBF	; 191
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <CLCD_voidSendString>
			//CLCD_voidSendData(GlobData);
			// start conversion : Choose Channel (0)  &  return (Reading)   &   Notification Func
			ADC_u8StartConversionAsynch(0,&milliVolt,NotifyFunc);
    2f20:	2e e3       	ldi	r18, 0x3E	; 62
    2f22:	31 e0       	ldi	r19, 0x01	; 1
    2f24:	42 e1       	ldi	r20, 0x12	; 18
    2f26:	59 e1       	ldi	r21, 0x19	; 25
    2f28:	80 e0       	ldi	r24, 0x00	; 0
    2f2a:	b9 01       	movw	r22, r18
    2f2c:	0e 94 55 06 	call	0xcaa	; 0xcaa <ADC_u8StartConversionAsynch>
			if(milliVolt>TempEnter){
    2f30:	80 91 3c 01 	lds	r24, 0x013C
    2f34:	28 2f       	mov	r18, r24
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	80 91 3e 01 	lds	r24, 0x013E
    2f3c:	90 91 3f 01 	lds	r25, 0x013F
    2f40:	28 17       	cp	r18, r24
    2f42:	39 07       	cpc	r19, r25
    2f44:	30 f4       	brcc	.+12     	; 0x2f52 <LTSystem+0x226>
				DIO_u8SetPinValue(DIO_PORTB,DIO_PIN6,DIO_PIN_HIGH);
    2f46:	81 e0       	ldi	r24, 0x01	; 1
    2f48:	66 e0       	ldi	r22, 0x06	; 6
    2f4a:	41 e0       	ldi	r20, 0x01	; 1
    2f4c:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <DIO_u8SetPinValue>
    2f50:	05 c0       	rjmp	.+10     	; 0x2f5c <LTSystem+0x230>
			}
			else
				DIO_u8SetPinValue(DIO_PORTB,DIO_PIN6,DIO_PIN_LOW);
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	66 e0       	ldi	r22, 0x06	; 6
    2f56:	40 e0       	ldi	r20, 0x00	; 0
    2f58:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <DIO_u8SetPinValue>
			// Get keypad to get out from this mode
			GlobData = KPD_u8Key_pressed();
    2f5c:	0e 94 2c 11 	call	0x2258	; 0x2258 <KPD_u8Key_pressed>
    2f60:	88 2f       	mov	r24, r24
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	90 93 41 01 	sts	0x0141, r25
    2f68:	80 93 40 01 	sts	0x0140, r24
			// C_button to out
			if(GlobData == C_button)
    2f6c:	80 91 40 01 	lds	r24, 0x0140
    2f70:	90 91 41 01 	lds	r25, 0x0141
    2f74:	8e 30       	cpi	r24, 0x0E	; 14
    2f76:	91 05       	cpc	r25, r1
    2f78:	49 f4       	brne	.+18     	; 0x2f8c <LTSystem+0x260>
			{
				// reset Values
				TempEnter = 0;
    2f7a:	10 92 3c 01 	sts	0x013C, r1
				TempMultiplier = 10;
    2f7e:	8a e0       	ldi	r24, 0x0A	; 10
    2f80:	80 93 30 01 	sts	0x0130, r24
				CLCD_voidSendCommand(1);
    2f84:	81 e0       	ldi	r24, 0x01	; 1
    2f86:	0e 94 04 08 	call	0x1008	; 0x1008 <CLCD_voidSendCommand>
    2f8a:	0e c0       	rjmp	.+28     	; 0x2fa8 <LTSystem+0x27c>
				break;
			}
			else
				GlobData = KPAD_STATE_ILDE;
    2f8c:	8f ef       	ldi	r24, 0xFF	; 255
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	90 93 41 01 	sts	0x0141, r25
    2f94:	80 93 40 01 	sts	0x0140, r24
		}while(GlobData == KPAD_STATE_ILDE );
    2f98:	80 91 40 01 	lds	r24, 0x0140
    2f9c:	90 91 41 01 	lds	r25, 0x0141
    2fa0:	8f 3f       	cpi	r24, 0xFF	; 255
    2fa2:	91 05       	cpc	r25, r1
    2fa4:	09 f4       	brne	.+2      	; 0x2fa8 <LTSystem+0x27c>
    2fa6:	b5 cf       	rjmp	.-150    	; 0x2f12 <LTSystem+0x1e6>
	}
	if(GlobData==2)  // safety mode
    2fa8:	80 91 40 01 	lds	r24, 0x0140
    2fac:	90 91 41 01 	lds	r25, 0x0141
    2fb0:	82 30       	cpi	r24, 0x02	; 2
    2fb2:	91 05       	cpc	r25, r1
    2fb4:	a1 f5       	brne	.+104    	; 0x301e <LTSystem+0x2f2>
	{
		CLCD_voidSendCommand(1);
    2fb6:	81 e0       	ldi	r24, 0x01	; 1
    2fb8:	0e 94 04 08 	call	0x1008	; 0x1008 <CLCD_voidSendCommand>
		CLCD_voidSendString(" Safe Mode ");
    2fbc:	87 ec       	ldi	r24, 0xC7	; 199
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <CLCD_voidSendString>
		do
		{
			// Read Pir sensor
			DIO_u8GetPinValue(DIO_PORTB,DIO_PIN5,&readIR_sens);
    2fc4:	22 e4       	ldi	r18, 0x42	; 66
    2fc6:	31 e0       	ldi	r19, 0x01	; 1
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	65 e0       	ldi	r22, 0x05	; 5
    2fcc:	a9 01       	movw	r20, r18
    2fce:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8GetPinValue>
			if(readIR_sens)
    2fd2:	80 91 42 01 	lds	r24, 0x0142
    2fd6:	88 23       	and	r24, r24
    2fd8:	61 f0       	breq	.+24     	; 0x2ff2 <LTSystem+0x2c6>
			{
				// ON ==> Red Led
				DIO_u8SetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH);
    2fda:	82 e0       	ldi	r24, 0x02	; 2
    2fdc:	62 e0       	ldi	r22, 0x02	; 2
    2fde:	41 e0       	ldi	r20, 0x01	; 1
    2fe0:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <DIO_u8SetPinValue>
				//  buzzer Function
				BuzzerSound();
    2fe4:	0e 94 58 19 	call	0x32b0	; 0x32b0 <BuzzerSound>
				// OFF ==> Red Led
				DIO_u8SetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
    2fe8:	82 e0       	ldi	r24, 0x02	; 2
    2fea:	62 e0       	ldi	r22, 0x02	; 2
    2fec:	40 e0       	ldi	r20, 0x00	; 0
    2fee:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <DIO_u8SetPinValue>

			}
			GlobData = KPD_u8Key_pressed();
    2ff2:	0e 94 2c 11 	call	0x2258	; 0x2258 <KPD_u8Key_pressed>
    2ff6:	88 2f       	mov	r24, r24
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	90 93 41 01 	sts	0x0141, r25
    2ffe:	80 93 40 01 	sts	0x0140, r24
			if(GlobData==C_button) break;
    3002:	80 91 40 01 	lds	r24, 0x0140
    3006:	90 91 41 01 	lds	r25, 0x0141
    300a:	8e 30       	cpi	r24, 0x0E	; 14
    300c:	91 05       	cpc	r25, r1
    300e:	39 f0       	breq	.+14     	; 0x301e <LTSystem+0x2f2>
		}while(GlobData == KPAD_STATE_ILDE );
    3010:	80 91 40 01 	lds	r24, 0x0140
    3014:	90 91 41 01 	lds	r25, 0x0141
    3018:	8f 3f       	cpi	r24, 0xFF	; 255
    301a:	91 05       	cpc	r25, r1
    301c:	99 f2       	breq	.-90     	; 0x2fc4 <LTSystem+0x298>
	}
	if(GlobData == 3) // Room mode
    301e:	80 91 40 01 	lds	r24, 0x0140
    3022:	90 91 41 01 	lds	r25, 0x0141
    3026:	83 30       	cpi	r24, 0x03	; 3
    3028:	91 05       	cpc	r25, r1
    302a:	09 f0       	breq	.+2      	; 0x302e <LTSystem+0x302>
    302c:	8c c0       	rjmp	.+280    	; 0x3146 <LTSystem+0x41a>
	{
		CLCD_voidSendCommand(0x1);
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	0e 94 04 08 	call	0x1008	; 0x1008 <CLCD_voidSendCommand>
		CLCD_voidSendString("(1) R_1 (3) R_3");
    3034:	83 ed       	ldi	r24, 0xD3	; 211
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <CLCD_voidSendString>
		CLCD_voidGoToXY(1,0);
    303c:	81 e0       	ldi	r24, 0x01	; 1
    303e:	60 e0       	ldi	r22, 0x00	; 0
    3040:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <CLCD_voidGoToXY>
		CLCD_voidSendString("(2) R_2 (4) R_4");
    3044:	83 ee       	ldi	r24, 0xE3	; 227
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <CLCD_voidSendString>
		do{
			// Choose any Room
			GlobData = KPD_u8Key_pressed();
    304c:	0e 94 2c 11 	call	0x2258	; 0x2258 <KPD_u8Key_pressed>
    3050:	88 2f       	mov	r24, r24
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	90 93 41 01 	sts	0x0141, r25
    3058:	80 93 40 01 	sts	0x0140, r24
			if((1<=GlobData)&&(GlobData<=4))
    305c:	80 91 40 01 	lds	r24, 0x0140
    3060:	90 91 41 01 	lds	r25, 0x0141
    3064:	00 97       	sbiw	r24, 0x00	; 0
    3066:	09 f4       	brne	.+2      	; 0x306a <LTSystem+0x33e>
    3068:	55 c0       	rjmp	.+170    	; 0x3114 <LTSystem+0x3e8>
    306a:	80 91 40 01 	lds	r24, 0x0140
    306e:	90 91 41 01 	lds	r25, 0x0141
    3072:	85 30       	cpi	r24, 0x05	; 5
    3074:	91 05       	cpc	r25, r1
    3076:	08 f0       	brcs	.+2      	; 0x307a <LTSystem+0x34e>
    3078:	4d c0       	rjmp	.+154    	; 0x3114 <LTSystem+0x3e8>
			{
			switch(GlobData)
    307a:	80 91 40 01 	lds	r24, 0x0140
    307e:	90 91 41 01 	lds	r25, 0x0141
    3082:	9b 8b       	std	Y+19, r25	; 0x13
    3084:	8a 8b       	std	Y+18, r24	; 0x12
    3086:	4a 89       	ldd	r20, Y+18	; 0x12
    3088:	5b 89       	ldd	r21, Y+19	; 0x13
    308a:	42 30       	cpi	r20, 0x02	; 2
    308c:	51 05       	cpc	r21, r1
    308e:	09 f1       	breq	.+66     	; 0x30d2 <LTSystem+0x3a6>
    3090:	8a 89       	ldd	r24, Y+18	; 0x12
    3092:	9b 89       	ldd	r25, Y+19	; 0x13
    3094:	83 30       	cpi	r24, 0x03	; 3
    3096:	91 05       	cpc	r25, r1
    3098:	30 f4       	brcc	.+12     	; 0x30a6 <LTSystem+0x37a>
    309a:	4a 89       	ldd	r20, Y+18	; 0x12
    309c:	5b 89       	ldd	r21, Y+19	; 0x13
    309e:	41 30       	cpi	r20, 0x01	; 1
    30a0:	51 05       	cpc	r21, r1
    30a2:	61 f0       	breq	.+24     	; 0x30bc <LTSystem+0x390>
    30a4:	48 c0       	rjmp	.+144    	; 0x3136 <LTSystem+0x40a>
    30a6:	8a 89       	ldd	r24, Y+18	; 0x12
    30a8:	9b 89       	ldd	r25, Y+19	; 0x13
    30aa:	83 30       	cpi	r24, 0x03	; 3
    30ac:	91 05       	cpc	r25, r1
    30ae:	e1 f0       	breq	.+56     	; 0x30e8 <LTSystem+0x3bc>
    30b0:	4a 89       	ldd	r20, Y+18	; 0x12
    30b2:	5b 89       	ldd	r21, Y+19	; 0x13
    30b4:	44 30       	cpi	r20, 0x04	; 4
    30b6:	51 05       	cpc	r21, r1
    30b8:	11 f1       	breq	.+68     	; 0x30fe <LTSystem+0x3d2>
    30ba:	3d c0       	rjmp	.+122    	; 0x3136 <LTSystem+0x40a>
			{
				case Room1:
					DIO_u8TogglePinValue(DIO_PORTC,DIO_PIN4); //Led room1
    30bc:	82 e0       	ldi	r24, 0x02	; 2
    30be:	64 e0       	ldi	r22, 0x04	; 4
    30c0:	0e 94 85 10 	call	0x210a	; 0x210a <DIO_u8TogglePinValue>
					GlobData= KPAD_STATE_ILDE;							  	// return Idle State
    30c4:	8f ef       	ldi	r24, 0xFF	; 255
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	90 93 41 01 	sts	0x0141, r25
    30cc:	80 93 40 01 	sts	0x0140, r24
    30d0:	32 c0       	rjmp	.+100    	; 0x3136 <LTSystem+0x40a>
					break;
				case Room2:
					DIO_u8TogglePinValue(DIO_PORTC,DIO_PIN5); //Led room2
    30d2:	82 e0       	ldi	r24, 0x02	; 2
    30d4:	65 e0       	ldi	r22, 0x05	; 5
    30d6:	0e 94 85 10 	call	0x210a	; 0x210a <DIO_u8TogglePinValue>
					GlobData= KPAD_STATE_ILDE;								// return Idle State
    30da:	8f ef       	ldi	r24, 0xFF	; 255
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	90 93 41 01 	sts	0x0141, r25
    30e2:	80 93 40 01 	sts	0x0140, r24
    30e6:	27 c0       	rjmp	.+78     	; 0x3136 <LTSystem+0x40a>
					break;
				case Room3:
					DIO_u8TogglePinValue(DIO_PORTC,DIO_PIN6); //Led room3
    30e8:	82 e0       	ldi	r24, 0x02	; 2
    30ea:	66 e0       	ldi	r22, 0x06	; 6
    30ec:	0e 94 85 10 	call	0x210a	; 0x210a <DIO_u8TogglePinValue>
					GlobData= KPAD_STATE_ILDE;								// return Idle State
    30f0:	8f ef       	ldi	r24, 0xFF	; 255
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	90 93 41 01 	sts	0x0141, r25
    30f8:	80 93 40 01 	sts	0x0140, r24
    30fc:	1c c0       	rjmp	.+56     	; 0x3136 <LTSystem+0x40a>
					break;
				case Room4:
					DIO_u8TogglePinValue(DIO_PORTC,DIO_PIN7); //Led room4
    30fe:	82 e0       	ldi	r24, 0x02	; 2
    3100:	67 e0       	ldi	r22, 0x07	; 7
    3102:	0e 94 85 10 	call	0x210a	; 0x210a <DIO_u8TogglePinValue>
					GlobData= KPAD_STATE_ILDE;								// return Idle State
    3106:	8f ef       	ldi	r24, 0xFF	; 255
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	90 93 41 01 	sts	0x0141, r25
    310e:	80 93 40 01 	sts	0x0140, r24
    3112:	11 c0       	rjmp	.+34     	; 0x3136 <LTSystem+0x40a>
					break;

				}
		}
		else if(GlobData==C_button)
    3114:	80 91 40 01 	lds	r24, 0x0140
    3118:	90 91 41 01 	lds	r25, 0x0141
    311c:	8e 30       	cpi	r24, 0x0E	; 14
    311e:	91 05       	cpc	r25, r1
    3120:	21 f4       	brne	.+8      	; 0x312a <LTSystem+0x3fe>
		{
			CLCD_voidSendCommand(1);
    3122:	81 e0       	ldi	r24, 0x01	; 1
    3124:	0e 94 04 08 	call	0x1008	; 0x1008 <CLCD_voidSendCommand>
    3128:	0e c0       	rjmp	.+28     	; 0x3146 <LTSystem+0x41a>
			break;
		}
		else
		{
			GlobData = KPAD_STATE_ILDE;
    312a:	8f ef       	ldi	r24, 0xFF	; 255
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	90 93 41 01 	sts	0x0141, r25
    3132:	80 93 40 01 	sts	0x0140, r24
		}
		}while(GlobData == KPAD_STATE_ILDE );
    3136:	80 91 40 01 	lds	r24, 0x0140
    313a:	90 91 41 01 	lds	r25, 0x0141
    313e:	8f 3f       	cpi	r24, 0xFF	; 255
    3140:	91 05       	cpc	r25, r1
    3142:	09 f4       	brne	.+2      	; 0x3146 <LTSystem+0x41a>
    3144:	83 cf       	rjmp	.-250    	; 0x304c <LTSystem+0x320>
	}
	if(GlobData==4)
    3146:	80 91 40 01 	lds	r24, 0x0140
    314a:	90 91 41 01 	lds	r25, 0x0141
    314e:	84 30       	cpi	r24, 0x04	; 4
    3150:	91 05       	cpc	r25, r1
    3152:	09 f0       	breq	.+2      	; 0x3156 <LTSystem+0x42a>
    3154:	5e c0       	rjmp	.+188    	; 0x3212 <LTSystem+0x4e6>
	{
		CLCD_voidSendCommand(1);
    3156:	81 e0       	ldi	r24, 0x01	; 1
    3158:	0e 94 04 08 	call	0x1008	; 0x1008 <CLCD_voidSendCommand>
		CLCD_voidSendString("Fan 1-ON 2-OFF");
    315c:	83 ef       	ldi	r24, 0xF3	; 243
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <CLCD_voidSendString>
		do{
			GlobData = KPD_u8Key_pressed();
    3164:	0e 94 2c 11 	call	0x2258	; 0x2258 <KPD_u8Key_pressed>
    3168:	88 2f       	mov	r24, r24
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	90 93 41 01 	sts	0x0141, r25
    3170:	80 93 40 01 	sts	0x0140, r24
			if(GlobData == C_button)
    3174:	80 91 40 01 	lds	r24, 0x0140
    3178:	90 91 41 01 	lds	r25, 0x0141
    317c:	8e 30       	cpi	r24, 0x0E	; 14
    317e:	91 05       	cpc	r25, r1
    3180:	21 f4       	brne	.+8      	; 0x318a <LTSystem+0x45e>
			{
				CLCD_voidSendCommand(1);
    3182:	81 e0       	ldi	r24, 0x01	; 1
    3184:	0e 94 04 08 	call	0x1008	; 0x1008 <CLCD_voidSendCommand>
    3188:	44 c0       	rjmp	.+136    	; 0x3212 <LTSystem+0x4e6>
				break;
			}
			if((1<=GlobData)&&(GlobData<=2))
    318a:	80 91 40 01 	lds	r24, 0x0140
    318e:	90 91 41 01 	lds	r25, 0x0141
    3192:	00 97       	sbiw	r24, 0x00	; 0
    3194:	81 f1       	breq	.+96     	; 0x31f6 <LTSystem+0x4ca>
    3196:	80 91 40 01 	lds	r24, 0x0140
    319a:	90 91 41 01 	lds	r25, 0x0141
    319e:	83 30       	cpi	r24, 0x03	; 3
    31a0:	91 05       	cpc	r25, r1
    31a2:	48 f5       	brcc	.+82     	; 0x31f6 <LTSystem+0x4ca>
			{
				switch(GlobData)
    31a4:	80 91 40 01 	lds	r24, 0x0140
    31a8:	90 91 41 01 	lds	r25, 0x0141
    31ac:	99 8b       	std	Y+17, r25	; 0x11
    31ae:	88 8b       	std	Y+16, r24	; 0x10
    31b0:	48 89       	ldd	r20, Y+16	; 0x10
    31b2:	59 89       	ldd	r21, Y+17	; 0x11
    31b4:	41 30       	cpi	r20, 0x01	; 1
    31b6:	51 05       	cpc	r21, r1
    31b8:	31 f0       	breq	.+12     	; 0x31c6 <LTSystem+0x49a>
    31ba:	88 89       	ldd	r24, Y+16	; 0x10
    31bc:	99 89       	ldd	r25, Y+17	; 0x11
    31be:	82 30       	cpi	r24, 0x02	; 2
    31c0:	91 05       	cpc	r25, r1
    31c2:	69 f0       	breq	.+26     	; 0x31de <LTSystem+0x4b2>
    31c4:	1e c0       	rjmp	.+60     	; 0x3202 <LTSystem+0x4d6>
				{
				case 1:
					DIO_u8SetPinValue(DIO_PORTB,DIO_PIN6,DIO_PIN_HIGH);
    31c6:	81 e0       	ldi	r24, 0x01	; 1
    31c8:	66 e0       	ldi	r22, 0x06	; 6
    31ca:	41 e0       	ldi	r20, 0x01	; 1
    31cc:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <DIO_u8SetPinValue>
					GlobData = KPAD_STATE_ILDE;
    31d0:	8f ef       	ldi	r24, 0xFF	; 255
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	90 93 41 01 	sts	0x0141, r25
    31d8:	80 93 40 01 	sts	0x0140, r24
    31dc:	12 c0       	rjmp	.+36     	; 0x3202 <LTSystem+0x4d6>
					break;
				case 2:
					DIO_u8SetPinValue(DIO_PORTB,DIO_PIN6,DIO_PIN_LOW);
    31de:	81 e0       	ldi	r24, 0x01	; 1
    31e0:	66 e0       	ldi	r22, 0x06	; 6
    31e2:	40 e0       	ldi	r20, 0x00	; 0
    31e4:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <DIO_u8SetPinValue>
					GlobData = KPAD_STATE_ILDE;
    31e8:	8f ef       	ldi	r24, 0xFF	; 255
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	90 93 41 01 	sts	0x0141, r25
    31f0:	80 93 40 01 	sts	0x0140, r24
    31f4:	06 c0       	rjmp	.+12     	; 0x3202 <LTSystem+0x4d6>
					break;
				}
			}
			else
				GlobData = KPAD_STATE_ILDE;
    31f6:	8f ef       	ldi	r24, 0xFF	; 255
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	90 93 41 01 	sts	0x0141, r25
    31fe:	80 93 40 01 	sts	0x0140, r24

		}while(GlobData==KPAD_STATE_ILDE);
    3202:	80 91 40 01 	lds	r24, 0x0140
    3206:	90 91 41 01 	lds	r25, 0x0141
    320a:	8f 3f       	cpi	r24, 0xFF	; 255
    320c:	91 05       	cpc	r25, r1
    320e:	09 f4       	brne	.+2      	; 0x3212 <LTSystem+0x4e6>
    3210:	a9 cf       	rjmp	.-174    	; 0x3164 <LTSystem+0x438>

	}

}
    3212:	63 96       	adiw	r28, 0x13	; 19
    3214:	0f b6       	in	r0, 0x3f	; 63
    3216:	f8 94       	cli
    3218:	de bf       	out	0x3e, r29	; 62
    321a:	0f be       	out	0x3f, r0	; 63
    321c:	cd bf       	out	0x3d, r28	; 61
    321e:	cf 91       	pop	r28
    3220:	df 91       	pop	r29
    3222:	08 95       	ret

00003224 <NotifyFunc>:
void NotifyFunc()
{
    3224:	df 93       	push	r29
    3226:	cf 93       	push	r28
    3228:	cd b7       	in	r28, 0x3d	; 61
    322a:	de b7       	in	r29, 0x3e	; 62
	// Volt_analog = ( Digital_Read * Vref ) / 2^(resolution)   (in V)  To convert (mV) ==> (multiply by 1000)

	milliVolt=(u16)((u32)(milliVolt)*5000UL/256UL);
    322c:	80 91 3e 01 	lds	r24, 0x013E
    3230:	90 91 3f 01 	lds	r25, 0x013F
    3234:	cc 01       	movw	r24, r24
    3236:	a0 e0       	ldi	r26, 0x00	; 0
    3238:	b0 e0       	ldi	r27, 0x00	; 0
    323a:	28 e8       	ldi	r18, 0x88	; 136
    323c:	33 e1       	ldi	r19, 0x13	; 19
    323e:	40 e0       	ldi	r20, 0x00	; 0
    3240:	50 e0       	ldi	r21, 0x00	; 0
    3242:	bc 01       	movw	r22, r24
    3244:	cd 01       	movw	r24, r26
    3246:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__mulsi3>
    324a:	dc 01       	movw	r26, r24
    324c:	cb 01       	movw	r24, r22
    324e:	89 2f       	mov	r24, r25
    3250:	9a 2f       	mov	r25, r26
    3252:	ab 2f       	mov	r26, r27
    3254:	bb 27       	eor	r27, r27
    3256:	90 93 3f 01 	sts	0x013F, r25
    325a:	80 93 3e 01 	sts	0x013E, r24
	// Temp sensor relation    	 1 *C  ---> 10 mV
	milliVolt/=10;
    325e:	80 91 3e 01 	lds	r24, 0x013E
    3262:	90 91 3f 01 	lds	r25, 0x013F
    3266:	2a e0       	ldi	r18, 0x0A	; 10
    3268:	30 e0       	ldi	r19, 0x00	; 0
    326a:	b9 01       	movw	r22, r18
    326c:	0e 94 8d 1a 	call	0x351a	; 0x351a <__udivmodhi4>
    3270:	cb 01       	movw	r24, r22
    3272:	90 93 3f 01 	sts	0x013F, r25
    3276:	80 93 3e 01 	sts	0x013E, r24
	CLCD_voidGoToXY(0,8);
    327a:	80 e0       	ldi	r24, 0x00	; 0
    327c:	68 e0       	ldi	r22, 0x08	; 8
    327e:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <CLCD_voidGoToXY>
	// 	milliVolt == > current Temp
	CLCD_voidWriteNumber(milliVolt);
    3282:	80 91 3e 01 	lds	r24, 0x013E
    3286:	90 91 3f 01 	lds	r25, 0x013F
    328a:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <CLCD_voidWriteNumber>
	// check if current Temp > Entered Temp

	// display Entered Temp
	CLCD_voidGoToXY(1,0);
    328e:	81 e0       	ldi	r24, 0x01	; 1
    3290:	60 e0       	ldi	r22, 0x00	; 0
    3292:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <CLCD_voidGoToXY>
	CLCD_voidWriteNumber(TempEnter);
    3296:	80 91 3c 01 	lds	r24, 0x013C
    329a:	88 2f       	mov	r24, r24
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <CLCD_voidWriteNumber>
	CLCD_voidSendString(" *C - Done ! ");
    32a2:	82 e0       	ldi	r24, 0x02	; 2
    32a4:	91 e0       	ldi	r25, 0x01	; 1
    32a6:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <CLCD_voidSendString>
}
    32aa:	cf 91       	pop	r28
    32ac:	df 91       	pop	r29
    32ae:	08 95       	ret

000032b0 <BuzzerSound>:

void BuzzerSound()
{
    32b0:	df 93       	push	r29
    32b2:	cf 93       	push	r28
    32b4:	cd b7       	in	r28, 0x3d	; 61
    32b6:	de b7       	in	r29, 0x3e	; 62
    32b8:	6d 97       	sbiw	r28, 0x1d	; 29
    32ba:	0f b6       	in	r0, 0x3f	; 63
    32bc:	f8 94       	cli
    32be:	de bf       	out	0x3e, r29	; 62
    32c0:	0f be       	out	0x3f, r0	; 63
    32c2:	cd bf       	out	0x3d, r28	; 61
	u8 i;
	/* Diaphragm */
	for(i=0;i<20;i++){
    32c4:	1d 8e       	std	Y+29, r1	; 0x1d
    32c6:	f1 c0       	rjmp	.+482    	; 0x34aa <BuzzerSound+0x1fa>
		DIO_u8SetPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_HIGH);
    32c8:	82 e0       	ldi	r24, 0x02	; 2
    32ca:	63 e0       	ldi	r22, 0x03	; 3
    32cc:	41 e0       	ldi	r20, 0x01	; 1
    32ce:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <DIO_u8SetPinValue>
    32d2:	80 e0       	ldi	r24, 0x00	; 0
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	a8 e4       	ldi	r26, 0x48	; 72
    32d8:	b2 e4       	ldi	r27, 0x42	; 66
    32da:	89 8f       	std	Y+25, r24	; 0x19
    32dc:	9a 8f       	std	Y+26, r25	; 0x1a
    32de:	ab 8f       	std	Y+27, r26	; 0x1b
    32e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32e2:	69 8d       	ldd	r22, Y+25	; 0x19
    32e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32ea:	20 e0       	ldi	r18, 0x00	; 0
    32ec:	30 e0       	ldi	r19, 0x00	; 0
    32ee:	4a ef       	ldi	r20, 0xFA	; 250
    32f0:	54 e4       	ldi	r21, 0x44	; 68
    32f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f6:	dc 01       	movw	r26, r24
    32f8:	cb 01       	movw	r24, r22
    32fa:	8d 8b       	std	Y+21, r24	; 0x15
    32fc:	9e 8b       	std	Y+22, r25	; 0x16
    32fe:	af 8b       	std	Y+23, r26	; 0x17
    3300:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3302:	6d 89       	ldd	r22, Y+21	; 0x15
    3304:	7e 89       	ldd	r23, Y+22	; 0x16
    3306:	8f 89       	ldd	r24, Y+23	; 0x17
    3308:	98 8d       	ldd	r25, Y+24	; 0x18
    330a:	20 e0       	ldi	r18, 0x00	; 0
    330c:	30 e0       	ldi	r19, 0x00	; 0
    330e:	40 e8       	ldi	r20, 0x80	; 128
    3310:	5f e3       	ldi	r21, 0x3F	; 63
    3312:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3316:	88 23       	and	r24, r24
    3318:	2c f4       	brge	.+10     	; 0x3324 <BuzzerSound+0x74>
		__ticks = 1;
    331a:	81 e0       	ldi	r24, 0x01	; 1
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	9c 8b       	std	Y+20, r25	; 0x14
    3320:	8b 8b       	std	Y+19, r24	; 0x13
    3322:	3f c0       	rjmp	.+126    	; 0x33a2 <BuzzerSound+0xf2>
	else if (__tmp > 65535)
    3324:	6d 89       	ldd	r22, Y+21	; 0x15
    3326:	7e 89       	ldd	r23, Y+22	; 0x16
    3328:	8f 89       	ldd	r24, Y+23	; 0x17
    332a:	98 8d       	ldd	r25, Y+24	; 0x18
    332c:	20 e0       	ldi	r18, 0x00	; 0
    332e:	3f ef       	ldi	r19, 0xFF	; 255
    3330:	4f e7       	ldi	r20, 0x7F	; 127
    3332:	57 e4       	ldi	r21, 0x47	; 71
    3334:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3338:	18 16       	cp	r1, r24
    333a:	4c f5       	brge	.+82     	; 0x338e <BuzzerSound+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    333c:	69 8d       	ldd	r22, Y+25	; 0x19
    333e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3340:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3342:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	40 e2       	ldi	r20, 0x20	; 32
    334a:	51 e4       	ldi	r21, 0x41	; 65
    334c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3350:	dc 01       	movw	r26, r24
    3352:	cb 01       	movw	r24, r22
    3354:	bc 01       	movw	r22, r24
    3356:	cd 01       	movw	r24, r26
    3358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    335c:	dc 01       	movw	r26, r24
    335e:	cb 01       	movw	r24, r22
    3360:	9c 8b       	std	Y+20, r25	; 0x14
    3362:	8b 8b       	std	Y+19, r24	; 0x13
    3364:	0f c0       	rjmp	.+30     	; 0x3384 <BuzzerSound+0xd4>
    3366:	88 ec       	ldi	r24, 0xC8	; 200
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	9a 8b       	std	Y+18, r25	; 0x12
    336c:	89 8b       	std	Y+17, r24	; 0x11
    336e:	89 89       	ldd	r24, Y+17	; 0x11
    3370:	9a 89       	ldd	r25, Y+18	; 0x12
    3372:	01 97       	sbiw	r24, 0x01	; 1
    3374:	f1 f7       	brne	.-4      	; 0x3372 <BuzzerSound+0xc2>
    3376:	9a 8b       	std	Y+18, r25	; 0x12
    3378:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    337a:	8b 89       	ldd	r24, Y+19	; 0x13
    337c:	9c 89       	ldd	r25, Y+20	; 0x14
    337e:	01 97       	sbiw	r24, 0x01	; 1
    3380:	9c 8b       	std	Y+20, r25	; 0x14
    3382:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3384:	8b 89       	ldd	r24, Y+19	; 0x13
    3386:	9c 89       	ldd	r25, Y+20	; 0x14
    3388:	00 97       	sbiw	r24, 0x00	; 0
    338a:	69 f7       	brne	.-38     	; 0x3366 <BuzzerSound+0xb6>
    338c:	14 c0       	rjmp	.+40     	; 0x33b6 <BuzzerSound+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    338e:	6d 89       	ldd	r22, Y+21	; 0x15
    3390:	7e 89       	ldd	r23, Y+22	; 0x16
    3392:	8f 89       	ldd	r24, Y+23	; 0x17
    3394:	98 8d       	ldd	r25, Y+24	; 0x18
    3396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    339a:	dc 01       	movw	r26, r24
    339c:	cb 01       	movw	r24, r22
    339e:	9c 8b       	std	Y+20, r25	; 0x14
    33a0:	8b 8b       	std	Y+19, r24	; 0x13
    33a2:	8b 89       	ldd	r24, Y+19	; 0x13
    33a4:	9c 89       	ldd	r25, Y+20	; 0x14
    33a6:	98 8b       	std	Y+16, r25	; 0x10
    33a8:	8f 87       	std	Y+15, r24	; 0x0f
    33aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    33ac:	98 89       	ldd	r25, Y+16	; 0x10
    33ae:	01 97       	sbiw	r24, 0x01	; 1
    33b0:	f1 f7       	brne	.-4      	; 0x33ae <BuzzerSound+0xfe>
    33b2:	98 8b       	std	Y+16, r25	; 0x10
    33b4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		DIO_u8SetPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_LOW);
    33b6:	82 e0       	ldi	r24, 0x02	; 2
    33b8:	63 e0       	ldi	r22, 0x03	; 3
    33ba:	40 e0       	ldi	r20, 0x00	; 0
    33bc:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <DIO_u8SetPinValue>
    33c0:	80 e0       	ldi	r24, 0x00	; 0
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	a8 e4       	ldi	r26, 0x48	; 72
    33c6:	b2 e4       	ldi	r27, 0x42	; 66
    33c8:	8b 87       	std	Y+11, r24	; 0x0b
    33ca:	9c 87       	std	Y+12, r25	; 0x0c
    33cc:	ad 87       	std	Y+13, r26	; 0x0d
    33ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    33d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    33d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    33d8:	20 e0       	ldi	r18, 0x00	; 0
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	4a ef       	ldi	r20, 0xFA	; 250
    33de:	54 e4       	ldi	r21, 0x44	; 68
    33e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e4:	dc 01       	movw	r26, r24
    33e6:	cb 01       	movw	r24, r22
    33e8:	8f 83       	std	Y+7, r24	; 0x07
    33ea:	98 87       	std	Y+8, r25	; 0x08
    33ec:	a9 87       	std	Y+9, r26	; 0x09
    33ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33f0:	6f 81       	ldd	r22, Y+7	; 0x07
    33f2:	78 85       	ldd	r23, Y+8	; 0x08
    33f4:	89 85       	ldd	r24, Y+9	; 0x09
    33f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	40 e8       	ldi	r20, 0x80	; 128
    33fe:	5f e3       	ldi	r21, 0x3F	; 63
    3400:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3404:	88 23       	and	r24, r24
    3406:	2c f4       	brge	.+10     	; 0x3412 <BuzzerSound+0x162>
		__ticks = 1;
    3408:	81 e0       	ldi	r24, 0x01	; 1
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	9e 83       	std	Y+6, r25	; 0x06
    340e:	8d 83       	std	Y+5, r24	; 0x05
    3410:	3f c0       	rjmp	.+126    	; 0x3490 <BuzzerSound+0x1e0>
	else if (__tmp > 65535)
    3412:	6f 81       	ldd	r22, Y+7	; 0x07
    3414:	78 85       	ldd	r23, Y+8	; 0x08
    3416:	89 85       	ldd	r24, Y+9	; 0x09
    3418:	9a 85       	ldd	r25, Y+10	; 0x0a
    341a:	20 e0       	ldi	r18, 0x00	; 0
    341c:	3f ef       	ldi	r19, 0xFF	; 255
    341e:	4f e7       	ldi	r20, 0x7F	; 127
    3420:	57 e4       	ldi	r21, 0x47	; 71
    3422:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3426:	18 16       	cp	r1, r24
    3428:	4c f5       	brge	.+82     	; 0x347c <BuzzerSound+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    342a:	6b 85       	ldd	r22, Y+11	; 0x0b
    342c:	7c 85       	ldd	r23, Y+12	; 0x0c
    342e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3430:	9e 85       	ldd	r25, Y+14	; 0x0e
    3432:	20 e0       	ldi	r18, 0x00	; 0
    3434:	30 e0       	ldi	r19, 0x00	; 0
    3436:	40 e2       	ldi	r20, 0x20	; 32
    3438:	51 e4       	ldi	r21, 0x41	; 65
    343a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    343e:	dc 01       	movw	r26, r24
    3440:	cb 01       	movw	r24, r22
    3442:	bc 01       	movw	r22, r24
    3444:	cd 01       	movw	r24, r26
    3446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344a:	dc 01       	movw	r26, r24
    344c:	cb 01       	movw	r24, r22
    344e:	9e 83       	std	Y+6, r25	; 0x06
    3450:	8d 83       	std	Y+5, r24	; 0x05
    3452:	0f c0       	rjmp	.+30     	; 0x3472 <BuzzerSound+0x1c2>
    3454:	88 ec       	ldi	r24, 0xC8	; 200
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	9c 83       	std	Y+4, r25	; 0x04
    345a:	8b 83       	std	Y+3, r24	; 0x03
    345c:	8b 81       	ldd	r24, Y+3	; 0x03
    345e:	9c 81       	ldd	r25, Y+4	; 0x04
    3460:	01 97       	sbiw	r24, 0x01	; 1
    3462:	f1 f7       	brne	.-4      	; 0x3460 <BuzzerSound+0x1b0>
    3464:	9c 83       	std	Y+4, r25	; 0x04
    3466:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3468:	8d 81       	ldd	r24, Y+5	; 0x05
    346a:	9e 81       	ldd	r25, Y+6	; 0x06
    346c:	01 97       	sbiw	r24, 0x01	; 1
    346e:	9e 83       	std	Y+6, r25	; 0x06
    3470:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3472:	8d 81       	ldd	r24, Y+5	; 0x05
    3474:	9e 81       	ldd	r25, Y+6	; 0x06
    3476:	00 97       	sbiw	r24, 0x00	; 0
    3478:	69 f7       	brne	.-38     	; 0x3454 <BuzzerSound+0x1a4>
    347a:	14 c0       	rjmp	.+40     	; 0x34a4 <BuzzerSound+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    347c:	6f 81       	ldd	r22, Y+7	; 0x07
    347e:	78 85       	ldd	r23, Y+8	; 0x08
    3480:	89 85       	ldd	r24, Y+9	; 0x09
    3482:	9a 85       	ldd	r25, Y+10	; 0x0a
    3484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3488:	dc 01       	movw	r26, r24
    348a:	cb 01       	movw	r24, r22
    348c:	9e 83       	std	Y+6, r25	; 0x06
    348e:	8d 83       	std	Y+5, r24	; 0x05
    3490:	8d 81       	ldd	r24, Y+5	; 0x05
    3492:	9e 81       	ldd	r25, Y+6	; 0x06
    3494:	9a 83       	std	Y+2, r25	; 0x02
    3496:	89 83       	std	Y+1, r24	; 0x01
    3498:	89 81       	ldd	r24, Y+1	; 0x01
    349a:	9a 81       	ldd	r25, Y+2	; 0x02
    349c:	01 97       	sbiw	r24, 0x01	; 1
    349e:	f1 f7       	brne	.-4      	; 0x349c <BuzzerSound+0x1ec>
    34a0:	9a 83       	std	Y+2, r25	; 0x02
    34a2:	89 83       	std	Y+1, r24	; 0x01

void BuzzerSound()
{
	u8 i;
	/* Diaphragm */
	for(i=0;i<20;i++){
    34a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34a6:	8f 5f       	subi	r24, 0xFF	; 255
    34a8:	8d 8f       	std	Y+29, r24	; 0x1d
    34aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34ac:	84 31       	cpi	r24, 0x14	; 20
    34ae:	08 f4       	brcc	.+2      	; 0x34b2 <BuzzerSound+0x202>
    34b0:	0b cf       	rjmp	.-490    	; 0x32c8 <BuzzerSound+0x18>
		_delay_ms(50);
		DIO_u8SetPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_LOW);
		_delay_ms(50);
	}

}
    34b2:	6d 96       	adiw	r28, 0x1d	; 29
    34b4:	0f b6       	in	r0, 0x3f	; 63
    34b6:	f8 94       	cli
    34b8:	de bf       	out	0x3e, r29	; 62
    34ba:	0f be       	out	0x3f, r0	; 63
    34bc:	cd bf       	out	0x3d, r28	; 61
    34be:	cf 91       	pop	r28
    34c0:	df 91       	pop	r29
    34c2:	08 95       	ret

000034c4 <__mulsi3>:
    34c4:	62 9f       	mul	r22, r18
    34c6:	d0 01       	movw	r26, r0
    34c8:	73 9f       	mul	r23, r19
    34ca:	f0 01       	movw	r30, r0
    34cc:	82 9f       	mul	r24, r18
    34ce:	e0 0d       	add	r30, r0
    34d0:	f1 1d       	adc	r31, r1
    34d2:	64 9f       	mul	r22, r20
    34d4:	e0 0d       	add	r30, r0
    34d6:	f1 1d       	adc	r31, r1
    34d8:	92 9f       	mul	r25, r18
    34da:	f0 0d       	add	r31, r0
    34dc:	83 9f       	mul	r24, r19
    34de:	f0 0d       	add	r31, r0
    34e0:	74 9f       	mul	r23, r20
    34e2:	f0 0d       	add	r31, r0
    34e4:	65 9f       	mul	r22, r21
    34e6:	f0 0d       	add	r31, r0
    34e8:	99 27       	eor	r25, r25
    34ea:	72 9f       	mul	r23, r18
    34ec:	b0 0d       	add	r27, r0
    34ee:	e1 1d       	adc	r30, r1
    34f0:	f9 1f       	adc	r31, r25
    34f2:	63 9f       	mul	r22, r19
    34f4:	b0 0d       	add	r27, r0
    34f6:	e1 1d       	adc	r30, r1
    34f8:	f9 1f       	adc	r31, r25
    34fa:	bd 01       	movw	r22, r26
    34fc:	cf 01       	movw	r24, r30
    34fe:	11 24       	eor	r1, r1
    3500:	08 95       	ret

00003502 <__udivmodqi4>:
    3502:	99 1b       	sub	r25, r25
    3504:	79 e0       	ldi	r23, 0x09	; 9
    3506:	04 c0       	rjmp	.+8      	; 0x3510 <__udivmodqi4_ep>

00003508 <__udivmodqi4_loop>:
    3508:	99 1f       	adc	r25, r25
    350a:	96 17       	cp	r25, r22
    350c:	08 f0       	brcs	.+2      	; 0x3510 <__udivmodqi4_ep>
    350e:	96 1b       	sub	r25, r22

00003510 <__udivmodqi4_ep>:
    3510:	88 1f       	adc	r24, r24
    3512:	7a 95       	dec	r23
    3514:	c9 f7       	brne	.-14     	; 0x3508 <__udivmodqi4_loop>
    3516:	80 95       	com	r24
    3518:	08 95       	ret

0000351a <__udivmodhi4>:
    351a:	aa 1b       	sub	r26, r26
    351c:	bb 1b       	sub	r27, r27
    351e:	51 e1       	ldi	r21, 0x11	; 17
    3520:	07 c0       	rjmp	.+14     	; 0x3530 <__udivmodhi4_ep>

00003522 <__udivmodhi4_loop>:
    3522:	aa 1f       	adc	r26, r26
    3524:	bb 1f       	adc	r27, r27
    3526:	a6 17       	cp	r26, r22
    3528:	b7 07       	cpc	r27, r23
    352a:	10 f0       	brcs	.+4      	; 0x3530 <__udivmodhi4_ep>
    352c:	a6 1b       	sub	r26, r22
    352e:	b7 0b       	sbc	r27, r23

00003530 <__udivmodhi4_ep>:
    3530:	88 1f       	adc	r24, r24
    3532:	99 1f       	adc	r25, r25
    3534:	5a 95       	dec	r21
    3536:	a9 f7       	brne	.-22     	; 0x3522 <__udivmodhi4_loop>
    3538:	80 95       	com	r24
    353a:	90 95       	com	r25
    353c:	bc 01       	movw	r22, r24
    353e:	cd 01       	movw	r24, r26
    3540:	08 95       	ret

00003542 <__prologue_saves__>:
    3542:	2f 92       	push	r2
    3544:	3f 92       	push	r3
    3546:	4f 92       	push	r4
    3548:	5f 92       	push	r5
    354a:	6f 92       	push	r6
    354c:	7f 92       	push	r7
    354e:	8f 92       	push	r8
    3550:	9f 92       	push	r9
    3552:	af 92       	push	r10
    3554:	bf 92       	push	r11
    3556:	cf 92       	push	r12
    3558:	df 92       	push	r13
    355a:	ef 92       	push	r14
    355c:	ff 92       	push	r15
    355e:	0f 93       	push	r16
    3560:	1f 93       	push	r17
    3562:	cf 93       	push	r28
    3564:	df 93       	push	r29
    3566:	cd b7       	in	r28, 0x3d	; 61
    3568:	de b7       	in	r29, 0x3e	; 62
    356a:	ca 1b       	sub	r28, r26
    356c:	db 0b       	sbc	r29, r27
    356e:	0f b6       	in	r0, 0x3f	; 63
    3570:	f8 94       	cli
    3572:	de bf       	out	0x3e, r29	; 62
    3574:	0f be       	out	0x3f, r0	; 63
    3576:	cd bf       	out	0x3d, r28	; 61
    3578:	09 94       	ijmp

0000357a <__epilogue_restores__>:
    357a:	2a 88       	ldd	r2, Y+18	; 0x12
    357c:	39 88       	ldd	r3, Y+17	; 0x11
    357e:	48 88       	ldd	r4, Y+16	; 0x10
    3580:	5f 84       	ldd	r5, Y+15	; 0x0f
    3582:	6e 84       	ldd	r6, Y+14	; 0x0e
    3584:	7d 84       	ldd	r7, Y+13	; 0x0d
    3586:	8c 84       	ldd	r8, Y+12	; 0x0c
    3588:	9b 84       	ldd	r9, Y+11	; 0x0b
    358a:	aa 84       	ldd	r10, Y+10	; 0x0a
    358c:	b9 84       	ldd	r11, Y+9	; 0x09
    358e:	c8 84       	ldd	r12, Y+8	; 0x08
    3590:	df 80       	ldd	r13, Y+7	; 0x07
    3592:	ee 80       	ldd	r14, Y+6	; 0x06
    3594:	fd 80       	ldd	r15, Y+5	; 0x05
    3596:	0c 81       	ldd	r16, Y+4	; 0x04
    3598:	1b 81       	ldd	r17, Y+3	; 0x03
    359a:	aa 81       	ldd	r26, Y+2	; 0x02
    359c:	b9 81       	ldd	r27, Y+1	; 0x01
    359e:	ce 0f       	add	r28, r30
    35a0:	d1 1d       	adc	r29, r1
    35a2:	0f b6       	in	r0, 0x3f	; 63
    35a4:	f8 94       	cli
    35a6:	de bf       	out	0x3e, r29	; 62
    35a8:	0f be       	out	0x3f, r0	; 63
    35aa:	cd bf       	out	0x3d, r28	; 61
    35ac:	ed 01       	movw	r28, r26
    35ae:	08 95       	ret

000035b0 <_exit>:
    35b0:	f8 94       	cli

000035b2 <__stop_program>:
    35b2:	ff cf       	rjmp	.-2      	; 0x35b2 <__stop_program>
