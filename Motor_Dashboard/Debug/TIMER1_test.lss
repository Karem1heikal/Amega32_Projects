
TIMER1_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004fe8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000132  00800060  00004fe8  0000507c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002f  00800192  00800192  000051ae  2**0
                  ALLOC
  3 .stab         000053dc  00000000  00000000  000051b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001d8f  00000000  00000000  0000a58c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000c31b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000c4bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000c6ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000eab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000fe3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00011014  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  000111d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  000114ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011e38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f2 14 	jmp	0x29e4	; 0x29e4 <__vector_1>
       8:	0c 94 1f 15 	jmp	0x2a3e	; 0x2a3e <__vector_2>
       c:	0c 94 4c 15 	jmp	0x2a98	; 0x2a98 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 ba 25 	jmp	0x4b74	; 0x4b74 <__vector_6>
      1c:	0c 94 33 25 	jmp	0x4a66	; 0x4a66 <__vector_7>
      20:	0c 94 60 25 	jmp	0x4ac0	; 0x4ac0 <__vector_8>
      24:	0c 94 8d 25 	jmp	0x4b1a	; 0x4b1a <__vector_9>
      28:	0c 94 d9 24 	jmp	0x49b2	; 0x49b2 <__vector_10>
      2c:	0c 94 06 25 	jmp	0x4a0c	; 0x4a0c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 c9 08 	jmp	0x1192	; 0x1192 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ee       	ldi	r30, 0xE8	; 232
      68:	ff e4       	ldi	r31, 0x4F	; 79
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3c       	cpi	r26, 0xC1	; 193
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <main>
      8a:	0c 94 f2 27 	jmp	0x4fe4	; 0x4fe4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bb 27 	jmp	0x4f76	; 0x4f76 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d7 27 	jmp	0x4fae	; 0x4fae <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c7 27 	jmp	0x4f8e	; 0x4f8e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e3 27 	jmp	0x4fc6	; 0x4fc6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c7 27 	jmp	0x4f8e	; 0x4f8e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e3 27 	jmp	0x4fc6	; 0x4fc6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bb 27 	jmp	0x4f76	; 0x4f76 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d7 27 	jmp	0x4fae	; 0x4fae <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c3 27 	jmp	0x4f86	; 0x4f86 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 df 27 	jmp	0x4fbe	; 0x4fbe <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c7 27 	jmp	0x4f8e	; 0x4f8e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e3 27 	jmp	0x4fc6	; 0x4fc6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c7 27 	jmp	0x4f8e	; 0x4f8e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e3 27 	jmp	0x4fc6	; 0x4fc6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c7 27 	jmp	0x4f8e	; 0x4f8e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e3 27 	jmp	0x4fc6	; 0x4fc6 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 cb 27 	jmp	0x4f96	; 0x4f96 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 e7 27 	jmp	0x4fce	; 0x4fce <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 c3 27 	jmp	0x4f86	; 0x4f86 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 df 27 	jmp	0x4fbe	; 0x4fbe <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_voidInit>:
static u8 * ADC_pu8ChannelNum = NULL;
static u8 ADC_u8ChannelSize ;
static void (*Global_vChainCallBackFunc)() = NULL;
static u16 * ADC_pu16ChannelReading = NULL;
void ADC_voidInit()
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	ADMUX &= MASK_AREF;
     e36:	a7 e2       	ldi	r26, 0x27	; 39
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e7 e2       	ldi	r30, 0x27	; 39
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	8f 73       	andi	r24, 0x3F	; 63
     e42:	8c 93       	st	X, r24
	ADMUX |= ADC_REF_VOLT<<ADMUX_REFS0;
     e44:	a7 e2       	ldi	r26, 0x27	; 39
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e7 e2       	ldi	r30, 0x27	; 39
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	80 64       	ori	r24, 0x40	; 64
     e50:	8c 93       	st	X, r24
#if ADC_ADJUST_BIT == LEFT_ADJUST
	SET_BIT(ADMUX,ADMUX_ADLAR);
     e52:	a7 e2       	ldi	r26, 0x27	; 39
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e7 e2       	ldi	r30, 0x27	; 39
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	80 62       	ori	r24, 0x20	; 32
     e5e:	8c 93       	st	X, r24
#elif ADC_ADJUST_BIT == RIGHT_ADJUST
	CLR_BIT(ADMUX,ADMUX_ADLAR);
#else
#error "Wrong in choosing configuration of ADC_ADJUST_BIT "
#endif
	ADCSRA &= MASK_CLK_RATE;
     e60:	a6 e2       	ldi	r26, 0x26	; 38
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e6 e2       	ldi	r30, 0x26	; 38
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	88 7f       	andi	r24, 0xF8	; 248
     e6c:	8c 93       	st	X, r24
	ADCSRA |= ADC_CLK_RATE<<ADCSRA_ADPS0;
     e6e:	a6 e2       	ldi	r26, 0x26	; 38
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e6 e2       	ldi	r30, 0x26	; 38
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	86 60       	ori	r24, 0x06	; 6
     e7a:	8c 93       	st	X, r24
	SFIOR &= MASK_AUTO_TRIGGER;
	SFIOR |= ADC_AUTO_TRIGGER_SRC << SFIOR_ADTS0;

	SET_BIT(ADCSRA,ADCSRA_ADSC);
#elif ADC_AUTO_TRIGGER_MODE == DISABLE
	CLR_BIT(ADCSRA,ADCSRA_ADATE);
     e7c:	a6 e2       	ldi	r26, 0x26	; 38
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e6 e2       	ldi	r30, 0x26	; 38
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	8f 7d       	andi	r24, 0xDF	; 223
     e88:	8c 93       	st	X, r24
#else
#error "Wrong in choosing configuration of ADC_AUTO_TRIGGER_MODE "
#endif
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     e8a:	a6 e2       	ldi	r26, 0x26	; 38
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e6 e2       	ldi	r30, 0x26	; 38
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	80 68       	ori	r24, 0x80	; 128
     e96:	8c 93       	st	X, r24
}
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <ADC_u8StartSingleConvPoll>:
// Synch applay Busy Flag For reenterrant
u8 ADC_u8StartSingleConvPoll(u8 Copy_u8Channel,u16 *Copy_pu16Read)
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	28 97       	sbiw	r28, 0x08	; 8
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	f8 94       	cli
     eac:	de bf       	out	0x3e, r29	; 62
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	cd bf       	out	0x3d, r28	; 61
     eb2:	8e 83       	std	Y+6, r24	; 0x06
     eb4:	78 87       	std	Y+8, r23	; 0x08
     eb6:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = OK;
     eb8:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Counter = 0;
     eba:	19 82       	std	Y+1, r1	; 0x01
     ebc:	1a 82       	std	Y+2, r1	; 0x02
     ebe:	1b 82       	std	Y+3, r1	; 0x03
     ec0:	1c 82       	std	Y+4, r1	; 0x04
	if(Global_u8BusyFlag==IDLE)
     ec2:	80 91 92 01 	lds	r24, 0x0192
     ec6:	88 23       	and	r24, r24
     ec8:	09 f0       	breq	.+2      	; 0xecc <ADC_u8StartSingleConvPoll+0x2e>
     eca:	6e c0       	rjmp	.+220    	; 0xfa8 <ADC_u8StartSingleConvPoll+0x10a>
	{
		Global_u8BusyFlag = BUSY;
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	80 93 92 01 	sts	0x0192, r24
		if(Copy_pu16Read != NULL)
     ed2:	8f 81       	ldd	r24, Y+7	; 0x07
     ed4:	98 85       	ldd	r25, Y+8	; 0x08
     ed6:	00 97       	sbiw	r24, 0x00	; 0
     ed8:	09 f4       	brne	.+2      	; 0xedc <ADC_u8StartSingleConvPoll+0x3e>
     eda:	63 c0       	rjmp	.+198    	; 0xfa2 <ADC_u8StartSingleConvPoll+0x104>
		{
				if(Copy_u8Channel<=MAX_OPTION_CHANNEL)
     edc:	8e 81       	ldd	r24, Y+6	; 0x06
     ede:	80 32       	cpi	r24, 0x20	; 32
     ee0:	08 f0       	brcs	.+2      	; 0xee4 <ADC_u8StartSingleConvPoll+0x46>
     ee2:	5c c0       	rjmp	.+184    	; 0xf9c <ADC_u8StartSingleConvPoll+0xfe>
				{
					ADMUX &= MASK_CHANNEL;
     ee4:	a7 e2       	ldi	r26, 0x27	; 39
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e7 e2       	ldi	r30, 0x27	; 39
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	80 7e       	andi	r24, 0xE0	; 224
     ef0:	8c 93       	st	X, r24
					ADMUX |= Copy_u8Channel<<ADMUX_MUX0;
     ef2:	a7 e2       	ldi	r26, 0x27	; 39
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e7 e2       	ldi	r30, 0x27	; 39
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	90 81       	ld	r25, Z
     efc:	8e 81       	ldd	r24, Y+6	; 0x06
     efe:	89 2b       	or	r24, r25
     f00:	8c 93       	st	X, r24
					SET_BIT(ADCSRA,ADCSRA_ADSC);
     f02:	a6 e2       	ldi	r26, 0x26	; 38
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e6 e2       	ldi	r30, 0x26	; 38
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	80 64       	ori	r24, 0x40	; 64
     f0e:	8c 93       	st	X, r24
     f10:	0b c0       	rjmp	.+22     	; 0xf28 <ADC_u8StartSingleConvPoll+0x8a>
					while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0)&&(Local_u32Counter<ADC_U32_TIMEOUT))
					{
						Local_u32Counter++;
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	9a 81       	ldd	r25, Y+2	; 0x02
     f16:	ab 81       	ldd	r26, Y+3	; 0x03
     f18:	bc 81       	ldd	r27, Y+4	; 0x04
     f1a:	01 96       	adiw	r24, 0x01	; 1
     f1c:	a1 1d       	adc	r26, r1
     f1e:	b1 1d       	adc	r27, r1
     f20:	89 83       	std	Y+1, r24	; 0x01
     f22:	9a 83       	std	Y+2, r25	; 0x02
     f24:	ab 83       	std	Y+3, r26	; 0x03
     f26:	bc 83       	std	Y+4, r27	; 0x04
				if(Copy_u8Channel<=MAX_OPTION_CHANNEL)
				{
					ADMUX &= MASK_CHANNEL;
					ADMUX |= Copy_u8Channel<<ADMUX_MUX0;
					SET_BIT(ADCSRA,ADCSRA_ADSC);
					while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0)&&(Local_u32Counter<ADC_U32_TIMEOUT))
     f28:	e6 e2       	ldi	r30, 0x26	; 38
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	82 95       	swap	r24
     f30:	8f 70       	andi	r24, 0x0F	; 15
     f32:	88 2f       	mov	r24, r24
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	81 70       	andi	r24, 0x01	; 1
     f38:	90 70       	andi	r25, 0x00	; 0
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	61 f4       	brne	.+24     	; 0xf56 <ADC_u8StartSingleConvPoll+0xb8>
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	9a 81       	ldd	r25, Y+2	; 0x02
     f42:	ab 81       	ldd	r26, Y+3	; 0x03
     f44:	bc 81       	ldd	r27, Y+4	; 0x04
     f46:	80 35       	cpi	r24, 0x50	; 80
     f48:	23 ec       	ldi	r18, 0xC3	; 195
     f4a:	92 07       	cpc	r25, r18
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	a2 07       	cpc	r26, r18
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	b2 07       	cpc	r27, r18
     f54:	f0 f2       	brcs	.-68     	; 0xf12 <ADC_u8StartSingleConvPoll+0x74>
					{
						Local_u32Counter++;
					}
					if(Local_u32Counter==ADC_U32_TIMEOUT)
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	9a 81       	ldd	r25, Y+2	; 0x02
     f5a:	ab 81       	ldd	r26, Y+3	; 0x03
     f5c:	bc 81       	ldd	r27, Y+4	; 0x04
     f5e:	80 35       	cpi	r24, 0x50	; 80
     f60:	23 ec       	ldi	r18, 0xC3	; 195
     f62:	92 07       	cpc	r25, r18
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	a2 07       	cpc	r26, r18
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	b2 07       	cpc	r27, r18
     f6c:	19 f4       	brne	.+6      	; 0xf74 <ADC_u8StartSingleConvPoll+0xd6>
					{
						Local_u8ErrorState = NOTOK;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	8d 83       	std	Y+5, r24	; 0x05
     f72:	1c c0       	rjmp	.+56     	; 0xfac <ADC_u8StartSingleConvPoll+0x10e>
					}
					else{

						CLR_BIT(ADCSRA,ADCSRA_ADIF);
     f74:	a6 e2       	ldi	r26, 0x26	; 38
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e6 e2       	ldi	r30, 0x26	; 38
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	8f 7e       	andi	r24, 0xEF	; 239
     f80:	8c 93       	st	X, r24
						if(ADC_ADJUST_BIT == LEFT_ADJUST)
							*Copy_pu16Read = ADC_REG>>8;
     f82:	e4 e2       	ldi	r30, 0x24	; 36
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	91 81       	ldd	r25, Z+1	; 0x01
     f8a:	89 2f       	mov	r24, r25
     f8c:	99 27       	eor	r25, r25
     f8e:	ef 81       	ldd	r30, Y+7	; 0x07
     f90:	f8 85       	ldd	r31, Y+8	; 0x08
     f92:	91 83       	std	Z+1, r25	; 0x01
     f94:	80 83       	st	Z, r24
						else if(ADC_ADJUST_BIT == RIGHT_ADJUST)
							*Copy_pu16Read = ADC_REG;
						Global_u8BusyFlag = IDLE;
     f96:	10 92 92 01 	sts	0x0192, r1
     f9a:	08 c0       	rjmp	.+16     	; 0xfac <ADC_u8StartSingleConvPoll+0x10e>
					}
				}
				else
					Local_u8ErrorState = NOTOK;
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	8d 83       	std	Y+5, r24	; 0x05
     fa0:	05 c0       	rjmp	.+10     	; 0xfac <ADC_u8StartSingleConvPoll+0x10e>
			}
			else
				Local_u8ErrorState = NULL_POINTER;
     fa2:	82 e0       	ldi	r24, 0x02	; 2
     fa4:	8d 83       	std	Y+5, r24	; 0x05
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <ADC_u8StartSingleConvPoll+0x10e>
	}
	else
		Local_u8ErrorState = BUSY_FUNC;
     fa8:	83 e0       	ldi	r24, 0x03	; 3
     faa:	8d 83       	std	Y+5, r24	; 0x05
	return Local_u8ErrorState;
     fac:	8d 81       	ldd	r24, Y+5	; 0x05
}
     fae:	28 96       	adiw	r28, 0x08	; 8
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	08 95       	ret

00000fc0 <ADC_u8StartSingleConvInt>:

u8 ADC_u8StartSingleConvInt(u8 Copy_u8Channel,u16 *Copy_pu16Read,void (*Notifiction)())
{
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	00 d0       	rcall	.+0      	; 0xfc6 <ADC_u8StartSingleConvInt+0x6>
     fc6:	00 d0       	rcall	.+0      	; 0xfc8 <ADC_u8StartSingleConvInt+0x8>
     fc8:	00 d0       	rcall	.+0      	; 0xfca <ADC_u8StartSingleConvInt+0xa>
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	8a 83       	std	Y+2, r24	; 0x02
     fd0:	7c 83       	std	Y+4, r23	; 0x04
     fd2:	6b 83       	std	Y+3, r22	; 0x03
     fd4:	5e 83       	std	Y+6, r21	; 0x06
     fd6:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = OK;
     fd8:	19 82       	std	Y+1, r1	; 0x01
	if(Global_u8BusyFlag==IDLE)
     fda:	80 91 92 01 	lds	r24, 0x0192
     fde:	88 23       	and	r24, r24
     fe0:	09 f0       	breq	.+2      	; 0xfe4 <ADC_u8StartSingleConvInt+0x24>
     fe2:	40 c0       	rjmp	.+128    	; 0x1064 <ADC_u8StartSingleConvInt+0xa4>
	{
		Global_u8BusyFlag = BUSY;
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	80 93 92 01 	sts	0x0192, r24
		ADC_u8DirectionOfConvFunc = SINGLE_CONVERISION;
     fea:	10 92 97 01 	sts	0x0197, r1
		if((Copy_pu16Read != NULL)||(Notifiction != NULL))
     fee:	8b 81       	ldd	r24, Y+3	; 0x03
     ff0:	9c 81       	ldd	r25, Y+4	; 0x04
     ff2:	00 97       	sbiw	r24, 0x00	; 0
     ff4:	21 f4       	brne	.+8      	; 0xffe <ADC_u8StartSingleConvInt+0x3e>
     ff6:	8d 81       	ldd	r24, Y+5	; 0x05
     ff8:	9e 81       	ldd	r25, Y+6	; 0x06
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	81 f1       	breq	.+96     	; 0x105e <ADC_u8StartSingleConvInt+0x9e>
		{

				if(Copy_u8Channel<=MAX_OPTION_CHANNEL)
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	80 32       	cpi	r24, 0x20	; 32
    1002:	50 f5       	brcc	.+84     	; 0x1058 <ADC_u8StartSingleConvInt+0x98>
				{
					ADMUX &= MASK_CHANNEL;
    1004:	a7 e2       	ldi	r26, 0x27	; 39
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e7 e2       	ldi	r30, 0x27	; 39
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	80 7e       	andi	r24, 0xE0	; 224
    1010:	8c 93       	st	X, r24
					ADMUX |= Copy_u8Channel<<ADMUX_MUX0;
    1012:	a7 e2       	ldi	r26, 0x27	; 39
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e7 e2       	ldi	r30, 0x27	; 39
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	90 81       	ld	r25, Z
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	89 2b       	or	r24, r25
    1020:	8c 93       	st	X, r24
					Global_vCallBackFunc = Notifiction;
    1022:	8d 81       	ldd	r24, Y+5	; 0x05
    1024:	9e 81       	ldd	r25, Y+6	; 0x06
    1026:	90 93 94 01 	sts	0x0194, r25
    102a:	80 93 93 01 	sts	0x0193, r24
					Global_pu8Read = Copy_pu16Read;
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	9c 81       	ldd	r25, Y+4	; 0x04
    1032:	90 93 96 01 	sts	0x0196, r25
    1036:	80 93 95 01 	sts	0x0195, r24
					SET_BIT(ADCSRA,ADCSRA_ADSC);
    103a:	a6 e2       	ldi	r26, 0x26	; 38
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e6 e2       	ldi	r30, 0x26	; 38
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	80 64       	ori	r24, 0x40	; 64
    1046:	8c 93       	st	X, r24
					SET_BIT(ADCSRA,ADCSRA_ADIE);
    1048:	a6 e2       	ldi	r26, 0x26	; 38
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e6 e2       	ldi	r30, 0x26	; 38
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	88 60       	ori	r24, 0x08	; 8
    1054:	8c 93       	st	X, r24
    1056:	08 c0       	rjmp	.+16     	; 0x1068 <ADC_u8StartSingleConvInt+0xa8>
				}
				else
					Local_u8ErrorState = NOTOK;
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	89 83       	std	Y+1, r24	; 0x01
    105c:	05 c0       	rjmp	.+10     	; 0x1068 <ADC_u8StartSingleConvInt+0xa8>
		}
		else
			Local_u8ErrorState = NULL_POINTER;
    105e:	82 e0       	ldi	r24, 0x02	; 2
    1060:	89 83       	std	Y+1, r24	; 0x01
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <ADC_u8StartSingleConvInt+0xa8>
	}
	else
		Local_u8ErrorState = BUSY_FUNC;
    1064:	83 e0       	ldi	r24, 0x03	; 3
    1066:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    1068:	89 81       	ldd	r24, Y+1	; 0x01
}
    106a:	26 96       	adiw	r28, 0x06	; 6
    106c:	0f b6       	in	r0, 0x3f	; 63
    106e:	f8 94       	cli
    1070:	de bf       	out	0x3e, r29	; 62
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	cd bf       	out	0x3d, r28	; 61
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	08 95       	ret

0000107c <ADC_u8StartChainConvAsynch>:
u8 ADC_u8StartChainConvAsynch(ADC_Chain *Copy_Chain)
{
    107c:	df 93       	push	r29
    107e:	cf 93       	push	r28
    1080:	00 d0       	rcall	.+0      	; 0x1082 <ADC_u8StartChainConvAsynch+0x6>
    1082:	0f 92       	push	r0
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	9b 83       	std	Y+3, r25	; 0x03
    108a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    108c:	19 82       	std	Y+1, r1	; 0x01
	if(Global_u8BusyFlag==IDLE)
    108e:	80 91 92 01 	lds	r24, 0x0192
    1092:	88 23       	and	r24, r24
    1094:	09 f0       	breq	.+2      	; 0x1098 <ADC_u8StartChainConvAsynch+0x1c>
    1096:	74 c0       	rjmp	.+232    	; 0x1180 <ADC_u8StartChainConvAsynch+0x104>
	{
		Global_u8BusyFlag = BUSY;
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	80 93 92 01 	sts	0x0192, r24
		ADC_u8DirectionOfConvFunc = CHAIN_CONVERISION;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	80 93 97 01 	sts	0x0197, r24
		if((Copy_Chain->ChainId != NULL)||(Copy_Chain->Notifction != NULL)||(Copy_Chain->Result != NULL))
    10a4:	ea 81       	ldd	r30, Y+2	; 0x02
    10a6:	fb 81       	ldd	r31, Y+3	; 0x03
    10a8:	80 81       	ld	r24, Z
    10aa:	91 81       	ldd	r25, Z+1	; 0x01
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	69 f4       	brne	.+26     	; 0x10ca <ADC_u8StartChainConvAsynch+0x4e>
    10b0:	ea 81       	ldd	r30, Y+2	; 0x02
    10b2:	fb 81       	ldd	r31, Y+3	; 0x03
    10b4:	83 81       	ldd	r24, Z+3	; 0x03
    10b6:	94 81       	ldd	r25, Z+4	; 0x04
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	39 f4       	brne	.+14     	; 0x10ca <ADC_u8StartChainConvAsynch+0x4e>
    10bc:	ea 81       	ldd	r30, Y+2	; 0x02
    10be:	fb 81       	ldd	r31, Y+3	; 0x03
    10c0:	85 81       	ldd	r24, Z+5	; 0x05
    10c2:	96 81       	ldd	r25, Z+6	; 0x06
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	09 f4       	brne	.+2      	; 0x10ca <ADC_u8StartChainConvAsynch+0x4e>
    10c8:	58 c0       	rjmp	.+176    	; 0x117a <ADC_u8StartChainConvAsynch+0xfe>
		{
			if(Copy_Chain->ChainId[ADC_u8ChainIndex]<=MAX_OPTION_CHANNEL)
    10ca:	ea 81       	ldd	r30, Y+2	; 0x02
    10cc:	fb 81       	ldd	r31, Y+3	; 0x03
    10ce:	20 81       	ld	r18, Z
    10d0:	31 81       	ldd	r19, Z+1	; 0x01
    10d2:	80 91 98 01 	lds	r24, 0x0198
    10d6:	88 2f       	mov	r24, r24
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	f9 01       	movw	r30, r18
    10dc:	e8 0f       	add	r30, r24
    10de:	f9 1f       	adc	r31, r25
    10e0:	80 81       	ld	r24, Z
    10e2:	80 32       	cpi	r24, 0x20	; 32
    10e4:	08 f0       	brcs	.+2      	; 0x10e8 <ADC_u8StartChainConvAsynch+0x6c>
    10e6:	46 c0       	rjmp	.+140    	; 0x1174 <ADC_u8StartChainConvAsynch+0xf8>
			{
				ADMUX &= MASK_CHANNEL;
    10e8:	a7 e2       	ldi	r26, 0x27	; 39
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e7 e2       	ldi	r30, 0x27	; 39
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	80 7e       	andi	r24, 0xE0	; 224
    10f4:	8c 93       	st	X, r24
				ADMUX |= Copy_Chain->ChainId[ADC_u8ChainIndex]<<ADMUX_MUX0;
    10f6:	a7 e2       	ldi	r26, 0x27	; 39
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e7 e2       	ldi	r30, 0x27	; 39
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	40 81       	ld	r20, Z
    1100:	ea 81       	ldd	r30, Y+2	; 0x02
    1102:	fb 81       	ldd	r31, Y+3	; 0x03
    1104:	20 81       	ld	r18, Z
    1106:	31 81       	ldd	r19, Z+1	; 0x01
    1108:	80 91 98 01 	lds	r24, 0x0198
    110c:	88 2f       	mov	r24, r24
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	f9 01       	movw	r30, r18
    1112:	e8 0f       	add	r30, r24
    1114:	f9 1f       	adc	r31, r25
    1116:	80 81       	ld	r24, Z
    1118:	84 2b       	or	r24, r20
    111a:	8c 93       	st	X, r24
				ADC_pu8ChannelNum = Copy_Chain->ChainId;
    111c:	ea 81       	ldd	r30, Y+2	; 0x02
    111e:	fb 81       	ldd	r31, Y+3	; 0x03
    1120:	80 81       	ld	r24, Z
    1122:	91 81       	ldd	r25, Z+1	; 0x01
    1124:	90 93 9a 01 	sts	0x019A, r25
    1128:	80 93 99 01 	sts	0x0199, r24
				Global_vChainCallBackFunc = Copy_Chain->Notifction;
    112c:	ea 81       	ldd	r30, Y+2	; 0x02
    112e:	fb 81       	ldd	r31, Y+3	; 0x03
    1130:	83 81       	ldd	r24, Z+3	; 0x03
    1132:	94 81       	ldd	r25, Z+4	; 0x04
    1134:	90 93 9c 01 	sts	0x019C, r25
    1138:	80 93 9b 01 	sts	0x019B, r24
				ADC_pu16ChannelReading = Copy_Chain->Result;
    113c:	ea 81       	ldd	r30, Y+2	; 0x02
    113e:	fb 81       	ldd	r31, Y+3	; 0x03
    1140:	85 81       	ldd	r24, Z+5	; 0x05
    1142:	96 81       	ldd	r25, Z+6	; 0x06
    1144:	90 93 9e 01 	sts	0x019E, r25
    1148:	80 93 9d 01 	sts	0x019D, r24
				ADC_u8ChannelSize = Copy_Chain->ChannelSize;
    114c:	ea 81       	ldd	r30, Y+2	; 0x02
    114e:	fb 81       	ldd	r31, Y+3	; 0x03
    1150:	82 81       	ldd	r24, Z+2	; 0x02
    1152:	80 93 9f 01 	sts	0x019F, r24
				SET_BIT(ADCSRA,ADCSRA_ADSC);
    1156:	a6 e2       	ldi	r26, 0x26	; 38
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e6 e2       	ldi	r30, 0x26	; 38
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	80 64       	ori	r24, 0x40	; 64
    1162:	8c 93       	st	X, r24
				SET_BIT(ADCSRA,ADCSRA_ADIE);
    1164:	a6 e2       	ldi	r26, 0x26	; 38
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e6 e2       	ldi	r30, 0x26	; 38
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	88 60       	ori	r24, 0x08	; 8
    1170:	8c 93       	st	X, r24
    1172:	08 c0       	rjmp	.+16     	; 0x1184 <ADC_u8StartChainConvAsynch+0x108>
			}
			else
				Local_u8ErrorState = NOTOK;
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	89 83       	std	Y+1, r24	; 0x01
    1178:	05 c0       	rjmp	.+10     	; 0x1184 <ADC_u8StartChainConvAsynch+0x108>
		}
		else
			Local_u8ErrorState = NULL_POINTER;
    117a:	82 e0       	ldi	r24, 0x02	; 2
    117c:	89 83       	std	Y+1, r24	; 0x01
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <ADC_u8StartChainConvAsynch+0x108>
	}
	else
		Local_u8ErrorState = BUSY_FUNC;
    1180:	83 e0       	ldi	r24, 0x03	; 3
    1182:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    1184:	89 81       	ldd	r24, Y+1	; 0x01

}
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <__vector_16>:
void __vector_16 (void)	__attribute__((signal));
void __vector_16 (void)
{
    1192:	1f 92       	push	r1
    1194:	0f 92       	push	r0
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	0f 92       	push	r0
    119a:	11 24       	eor	r1, r1
    119c:	2f 93       	push	r18
    119e:	3f 93       	push	r19
    11a0:	4f 93       	push	r20
    11a2:	5f 93       	push	r21
    11a4:	6f 93       	push	r22
    11a6:	7f 93       	push	r23
    11a8:	8f 93       	push	r24
    11aa:	9f 93       	push	r25
    11ac:	af 93       	push	r26
    11ae:	bf 93       	push	r27
    11b0:	ef 93       	push	r30
    11b2:	ff 93       	push	r31
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8DirectionOfConvFunc == SINGLE_CONVERISION)
    11bc:	80 91 97 01 	lds	r24, 0x0197
    11c0:	88 23       	and	r24, r24
    11c2:	d9 f4       	brne	.+54     	; 0x11fa <__vector_16+0x68>
	{
		if(ADC_ADJUST_BIT == LEFT_ADJUST)
			*Global_pu8Read = ADC_REG>>8;
    11c4:	a0 91 95 01 	lds	r26, 0x0195
    11c8:	b0 91 96 01 	lds	r27, 0x0196
    11cc:	e4 e2       	ldi	r30, 0x24	; 36
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	91 81       	ldd	r25, Z+1	; 0x01
    11d4:	89 2f       	mov	r24, r25
    11d6:	99 27       	eor	r25, r25
    11d8:	8d 93       	st	X+, r24
    11da:	9c 93       	st	X, r25
		else if(ADC_ADJUST_BIT == RIGHT_ADJUST)
			*Global_pu8Read = ADC_REG;

		Global_u8BusyFlag = IDLE;
    11dc:	10 92 92 01 	sts	0x0192, r1

		Global_vCallBackFunc();
    11e0:	e0 91 93 01 	lds	r30, 0x0193
    11e4:	f0 91 94 01 	lds	r31, 0x0194
    11e8:	09 95       	icall

		CLR_BIT(ADCSRA,ADCSRA_ADIE);
    11ea:	a6 e2       	ldi	r26, 0x26	; 38
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	e6 e2       	ldi	r30, 0x26	; 38
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	87 7f       	andi	r24, 0xF7	; 247
    11f6:	8c 93       	st	X, r24
    11f8:	58 c0       	rjmp	.+176    	; 0x12aa <__vector_16+0x118>
	}
	else if(ADC_u8DirectionOfConvFunc == CHAIN_CONVERISION)
    11fa:	80 91 97 01 	lds	r24, 0x0197
    11fe:	81 30       	cpi	r24, 0x01	; 1
    1200:	09 f0       	breq	.+2      	; 0x1204 <__vector_16+0x72>
    1202:	53 c0       	rjmp	.+166    	; 0x12aa <__vector_16+0x118>
	{
		if(ADC_ADJUST_BIT == LEFT_ADJUST)
			ADC_pu16ChannelReading[ADC_u8ChainIndex] = ADC_REG>>8;
    1204:	20 91 9d 01 	lds	r18, 0x019D
    1208:	30 91 9e 01 	lds	r19, 0x019E
    120c:	80 91 98 01 	lds	r24, 0x0198
    1210:	88 2f       	mov	r24, r24
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	d9 01       	movw	r26, r18
    121a:	a8 0f       	add	r26, r24
    121c:	b9 1f       	adc	r27, r25
    121e:	e4 e2       	ldi	r30, 0x24	; 36
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	91 81       	ldd	r25, Z+1	; 0x01
    1226:	89 2f       	mov	r24, r25
    1228:	99 27       	eor	r25, r25
    122a:	11 96       	adiw	r26, 0x01	; 1
    122c:	9c 93       	st	X, r25
    122e:	8e 93       	st	-X, r24
		else if(ADC_ADJUST_BIT == RIGHT_ADJUST)
			ADC_pu16ChannelReading[ADC_u8ChainIndex] = ADC_REG;

		ADC_u8ChainIndex++;
    1230:	80 91 98 01 	lds	r24, 0x0198
    1234:	8f 5f       	subi	r24, 0xFF	; 255
    1236:	80 93 98 01 	sts	0x0198, r24
		if(ADC_u8ChainIndex==ADC_u8ChannelSize)
    123a:	90 91 98 01 	lds	r25, 0x0198
    123e:	80 91 9f 01 	lds	r24, 0x019F
    1242:	98 17       	cp	r25, r24
    1244:	89 f4       	brne	.+34     	; 0x1268 <__vector_16+0xd6>
		{
			Global_u8BusyFlag = IDLE;
    1246:	10 92 92 01 	sts	0x0192, r1

			Global_vChainCallBackFunc();
    124a:	e0 91 9b 01 	lds	r30, 0x019B
    124e:	f0 91 9c 01 	lds	r31, 0x019C
    1252:	09 95       	icall

			CLR_BIT(ADCSRA,ADCSRA_ADIE);
    1254:	a6 e2       	ldi	r26, 0x26	; 38
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e6 e2       	ldi	r30, 0x26	; 38
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	87 7f       	andi	r24, 0xF7	; 247
    1260:	8c 93       	st	X, r24

			ADC_u8ChainIndex = 0;
    1262:	10 92 98 01 	sts	0x0198, r1
    1266:	21 c0       	rjmp	.+66     	; 0x12aa <__vector_16+0x118>
		}
		else
		{
			ADMUX &= MASK_CHANNEL;
    1268:	a7 e2       	ldi	r26, 0x27	; 39
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e7 e2       	ldi	r30, 0x27	; 39
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	80 7e       	andi	r24, 0xE0	; 224
    1274:	8c 93       	st	X, r24
			ADMUX |= ADC_pu8ChannelNum[ADC_u8ChainIndex]<<ADMUX_MUX0;
    1276:	a7 e2       	ldi	r26, 0x27	; 39
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e7 e2       	ldi	r30, 0x27	; 39
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	40 81       	ld	r20, Z
    1280:	20 91 99 01 	lds	r18, 0x0199
    1284:	30 91 9a 01 	lds	r19, 0x019A
    1288:	80 91 98 01 	lds	r24, 0x0198
    128c:	88 2f       	mov	r24, r24
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	f9 01       	movw	r30, r18
    1292:	e8 0f       	add	r30, r24
    1294:	f9 1f       	adc	r31, r25
    1296:	80 81       	ld	r24, Z
    1298:	84 2b       	or	r24, r20
    129a:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADSC);
    129c:	a6 e2       	ldi	r26, 0x26	; 38
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e6 e2       	ldi	r30, 0x26	; 38
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	80 64       	ori	r24, 0x40	; 64
    12a8:	8c 93       	st	X, r24
		}

	}
}
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	ff 91       	pop	r31
    12b0:	ef 91       	pop	r30
    12b2:	bf 91       	pop	r27
    12b4:	af 91       	pop	r26
    12b6:	9f 91       	pop	r25
    12b8:	8f 91       	pop	r24
    12ba:	7f 91       	pop	r23
    12bc:	6f 91       	pop	r22
    12be:	5f 91       	pop	r21
    12c0:	4f 91       	pop	r20
    12c2:	3f 91       	pop	r19
    12c4:	2f 91       	pop	r18
    12c6:	0f 90       	pop	r0
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	0f 90       	pop	r0
    12cc:	1f 90       	pop	r1
    12ce:	18 95       	reti

000012d0 <CLCD_voidSendCommand>:
#include "../HAL/CLCD_interface.h"
#include "../HAL/CLCD_private.h"

static u8 iniIsFinich=0;
void CLCD_voidSendCommand(u8 Copy_u8Command)//math
{
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
    12d8:	ac 97       	sbiw	r28, 0x2c	; 44
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	f8 94       	cli
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	cd bf       	out	0x3d, r28	; 61
    12e4:	8c a7       	std	Y+44, r24	; 0x2c
	/*PIN SET  send pulse (E) */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_HIGH);
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_LOW);
#elif CLCD_CHIOCE_MODE==_4_BIT_MODE
	u8 Local_u8Mask = 0b11110000;
    12e6:	80 ef       	ldi	r24, 0xF0	; 240
    12e8:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_PIN_LOW);
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	60 e0       	ldi	r22, 0x00	; 0
    12ee:	40 e0       	ldi	r20, 0x00	; 0
    12f0:	0e 94 27 10 	call	0x204e	; 0x204e <DIO_u8SetPinValue>
	/*PIN RW SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_PIN_LOW);
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	61 e0       	ldi	r22, 0x01	; 1
    12f8:	40 e0       	ldi	r20, 0x00	; 0
    12fa:	0e 94 27 10 	call	0x204e	; 0x204e <DIO_u8SetPinValue>
	/*PORT SET COMMAND*/
	Local_u8Mask &= Copy_u8Command;
    12fe:	9b a5       	ldd	r25, Y+43	; 0x2b
    1300:	8c a5       	ldd	r24, Y+44	; 0x2c
    1302:	89 23       	and	r24, r25
    1304:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPortValue(CLCD_DATA_PORT, Local_u8Mask);
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	6b a5       	ldd	r22, Y+43	; 0x2b
    130a:	0e 94 40 11 	call	0x2280	; 0x2280 <DIO_u8SetPortValue>
	/*PIN SET  send pulse (E) */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_HIGH);
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	62 e0       	ldi	r22, 0x02	; 2
    1312:	41 e0       	ldi	r20, 0x01	; 1
    1314:	0e 94 27 10 	call	0x204e	; 0x204e <DIO_u8SetPinValue>
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	a0 e0       	ldi	r26, 0x00	; 0
    131e:	b0 e4       	ldi	r27, 0x40	; 64
    1320:	8f a3       	std	Y+39, r24	; 0x27
    1322:	98 a7       	std	Y+40, r25	; 0x28
    1324:	a9 a7       	std	Y+41, r26	; 0x29
    1326:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1328:	6f a1       	ldd	r22, Y+39	; 0x27
    132a:	78 a5       	ldd	r23, Y+40	; 0x28
    132c:	89 a5       	ldd	r24, Y+41	; 0x29
    132e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	4a ef       	ldi	r20, 0xFA	; 250
    1336:	54 e4       	ldi	r21, 0x44	; 68
    1338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	8b a3       	std	Y+35, r24	; 0x23
    1342:	9c a3       	std	Y+36, r25	; 0x24
    1344:	ad a3       	std	Y+37, r26	; 0x25
    1346:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1348:	6b a1       	ldd	r22, Y+35	; 0x23
    134a:	7c a1       	ldd	r23, Y+36	; 0x24
    134c:	8d a1       	ldd	r24, Y+37	; 0x25
    134e:	9e a1       	ldd	r25, Y+38	; 0x26
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	40 e8       	ldi	r20, 0x80	; 128
    1356:	5f e3       	ldi	r21, 0x3F	; 63
    1358:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    135c:	88 23       	and	r24, r24
    135e:	2c f4       	brge	.+10     	; 0x136a <CLCD_voidSendCommand+0x9a>
		__ticks = 1;
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	9a a3       	std	Y+34, r25	; 0x22
    1366:	89 a3       	std	Y+33, r24	; 0x21
    1368:	3f c0       	rjmp	.+126    	; 0x13e8 <CLCD_voidSendCommand+0x118>
	else if (__tmp > 65535)
    136a:	6b a1       	ldd	r22, Y+35	; 0x23
    136c:	7c a1       	ldd	r23, Y+36	; 0x24
    136e:	8d a1       	ldd	r24, Y+37	; 0x25
    1370:	9e a1       	ldd	r25, Y+38	; 0x26
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	3f ef       	ldi	r19, 0xFF	; 255
    1376:	4f e7       	ldi	r20, 0x7F	; 127
    1378:	57 e4       	ldi	r21, 0x47	; 71
    137a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    137e:	18 16       	cp	r1, r24
    1380:	4c f5       	brge	.+82     	; 0x13d4 <CLCD_voidSendCommand+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1382:	6f a1       	ldd	r22, Y+39	; 0x27
    1384:	78 a5       	ldd	r23, Y+40	; 0x28
    1386:	89 a5       	ldd	r24, Y+41	; 0x29
    1388:	9a a5       	ldd	r25, Y+42	; 0x2a
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	40 e2       	ldi	r20, 0x20	; 32
    1390:	51 e4       	ldi	r21, 0x41	; 65
    1392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	bc 01       	movw	r22, r24
    139c:	cd 01       	movw	r24, r26
    139e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	9a a3       	std	Y+34, r25	; 0x22
    13a8:	89 a3       	std	Y+33, r24	; 0x21
    13aa:	0f c0       	rjmp	.+30     	; 0x13ca <CLCD_voidSendCommand+0xfa>
    13ac:	88 ec       	ldi	r24, 0xC8	; 200
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	98 a3       	std	Y+32, r25	; 0x20
    13b2:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13b6:	98 a1       	ldd	r25, Y+32	; 0x20
    13b8:	01 97       	sbiw	r24, 0x01	; 1
    13ba:	f1 f7       	brne	.-4      	; 0x13b8 <CLCD_voidSendCommand+0xe8>
    13bc:	98 a3       	std	Y+32, r25	; 0x20
    13be:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c0:	89 a1       	ldd	r24, Y+33	; 0x21
    13c2:	9a a1       	ldd	r25, Y+34	; 0x22
    13c4:	01 97       	sbiw	r24, 0x01	; 1
    13c6:	9a a3       	std	Y+34, r25	; 0x22
    13c8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ca:	89 a1       	ldd	r24, Y+33	; 0x21
    13cc:	9a a1       	ldd	r25, Y+34	; 0x22
    13ce:	00 97       	sbiw	r24, 0x00	; 0
    13d0:	69 f7       	brne	.-38     	; 0x13ac <CLCD_voidSendCommand+0xdc>
    13d2:	14 c0       	rjmp	.+40     	; 0x13fc <CLCD_voidSendCommand+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13d4:	6b a1       	ldd	r22, Y+35	; 0x23
    13d6:	7c a1       	ldd	r23, Y+36	; 0x24
    13d8:	8d a1       	ldd	r24, Y+37	; 0x25
    13da:	9e a1       	ldd	r25, Y+38	; 0x26
    13dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e0:	dc 01       	movw	r26, r24
    13e2:	cb 01       	movw	r24, r22
    13e4:	9a a3       	std	Y+34, r25	; 0x22
    13e6:	89 a3       	std	Y+33, r24	; 0x21
    13e8:	89 a1       	ldd	r24, Y+33	; 0x21
    13ea:	9a a1       	ldd	r25, Y+34	; 0x22
    13ec:	9e 8f       	std	Y+30, r25	; 0x1e
    13ee:	8d 8f       	std	Y+29, r24	; 0x1d
    13f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13f4:	01 97       	sbiw	r24, 0x01	; 1
    13f6:	f1 f7       	brne	.-4      	; 0x13f4 <CLCD_voidSendCommand+0x124>
    13f8:	9e 8f       	std	Y+30, r25	; 0x1e
    13fa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	62 e0       	ldi	r22, 0x02	; 2
    1400:	40 e0       	ldi	r20, 0x00	; 0
    1402:	0e 94 27 10 	call	0x204e	; 0x204e <DIO_u8SetPinValue>
	if(iniIsFinich)
    1406:	80 91 a0 01 	lds	r24, 0x01A0
    140a:	88 23       	and	r24, r24
    140c:	09 f4       	brne	.+2      	; 0x1410 <CLCD_voidSendCommand+0x140>
    140e:	8c c0       	rjmp	.+280    	; 0x1528 <CLCD_voidSendCommand+0x258>
	{
		Local_u8Mask = 0b11110000;
    1410:	80 ef       	ldi	r24, 0xF0	; 240
    1412:	8b a7       	std	Y+43, r24	; 0x2b
		Local_u8Mask = ~(Local_u8Mask) & Copy_u8Command;
    1414:	8b a5       	ldd	r24, Y+43	; 0x2b
    1416:	98 2f       	mov	r25, r24
    1418:	90 95       	com	r25
    141a:	8c a5       	ldd	r24, Y+44	; 0x2c
    141c:	89 23       	and	r24, r25
    141e:	8b a7       	std	Y+43, r24	; 0x2b
		DIO_u8SetPortValue(CLCD_DATA_PORT, (Local_u8Mask << 4));
    1420:	8b a5       	ldd	r24, Y+43	; 0x2b
    1422:	98 2f       	mov	r25, r24
    1424:	92 95       	swap	r25
    1426:	90 7f       	andi	r25, 0xF0	; 240
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	69 2f       	mov	r22, r25
    142c:	0e 94 40 11 	call	0x2280	; 0x2280 <DIO_u8SetPortValue>
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_HIGH);
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	62 e0       	ldi	r22, 0x02	; 2
    1434:	41 e0       	ldi	r20, 0x01	; 1
    1436:	0e 94 27 10 	call	0x204e	; 0x204e <DIO_u8SetPinValue>
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	a0 e0       	ldi	r26, 0x00	; 0
    1440:	b0 e4       	ldi	r27, 0x40	; 64
    1442:	89 8f       	std	Y+25, r24	; 0x19
    1444:	9a 8f       	std	Y+26, r25	; 0x1a
    1446:	ab 8f       	std	Y+27, r26	; 0x1b
    1448:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    144a:	69 8d       	ldd	r22, Y+25	; 0x19
    144c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    144e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1450:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	4a ef       	ldi	r20, 0xFA	; 250
    1458:	54 e4       	ldi	r21, 0x44	; 68
    145a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	8d 8b       	std	Y+21, r24	; 0x15
    1464:	9e 8b       	std	Y+22, r25	; 0x16
    1466:	af 8b       	std	Y+23, r26	; 0x17
    1468:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    146a:	6d 89       	ldd	r22, Y+21	; 0x15
    146c:	7e 89       	ldd	r23, Y+22	; 0x16
    146e:	8f 89       	ldd	r24, Y+23	; 0x17
    1470:	98 8d       	ldd	r25, Y+24	; 0x18
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	40 e8       	ldi	r20, 0x80	; 128
    1478:	5f e3       	ldi	r21, 0x3F	; 63
    147a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    147e:	88 23       	and	r24, r24
    1480:	2c f4       	brge	.+10     	; 0x148c <CLCD_voidSendCommand+0x1bc>
		__ticks = 1;
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	9c 8b       	std	Y+20, r25	; 0x14
    1488:	8b 8b       	std	Y+19, r24	; 0x13
    148a:	3f c0       	rjmp	.+126    	; 0x150a <CLCD_voidSendCommand+0x23a>
	else if (__tmp > 65535)
    148c:	6d 89       	ldd	r22, Y+21	; 0x15
    148e:	7e 89       	ldd	r23, Y+22	; 0x16
    1490:	8f 89       	ldd	r24, Y+23	; 0x17
    1492:	98 8d       	ldd	r25, Y+24	; 0x18
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	3f ef       	ldi	r19, 0xFF	; 255
    1498:	4f e7       	ldi	r20, 0x7F	; 127
    149a:	57 e4       	ldi	r21, 0x47	; 71
    149c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14a0:	18 16       	cp	r1, r24
    14a2:	4c f5       	brge	.+82     	; 0x14f6 <CLCD_voidSendCommand+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a4:	69 8d       	ldd	r22, Y+25	; 0x19
    14a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	40 e2       	ldi	r20, 0x20	; 32
    14b2:	51 e4       	ldi	r21, 0x41	; 65
    14b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	bc 01       	movw	r22, r24
    14be:	cd 01       	movw	r24, r26
    14c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c4:	dc 01       	movw	r26, r24
    14c6:	cb 01       	movw	r24, r22
    14c8:	9c 8b       	std	Y+20, r25	; 0x14
    14ca:	8b 8b       	std	Y+19, r24	; 0x13
    14cc:	0f c0       	rjmp	.+30     	; 0x14ec <CLCD_voidSendCommand+0x21c>
    14ce:	88 ec       	ldi	r24, 0xC8	; 200
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	9a 8b       	std	Y+18, r25	; 0x12
    14d4:	89 8b       	std	Y+17, r24	; 0x11
    14d6:	89 89       	ldd	r24, Y+17	; 0x11
    14d8:	9a 89       	ldd	r25, Y+18	; 0x12
    14da:	01 97       	sbiw	r24, 0x01	; 1
    14dc:	f1 f7       	brne	.-4      	; 0x14da <CLCD_voidSendCommand+0x20a>
    14de:	9a 8b       	std	Y+18, r25	; 0x12
    14e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e2:	8b 89       	ldd	r24, Y+19	; 0x13
    14e4:	9c 89       	ldd	r25, Y+20	; 0x14
    14e6:	01 97       	sbiw	r24, 0x01	; 1
    14e8:	9c 8b       	std	Y+20, r25	; 0x14
    14ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ec:	8b 89       	ldd	r24, Y+19	; 0x13
    14ee:	9c 89       	ldd	r25, Y+20	; 0x14
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	69 f7       	brne	.-38     	; 0x14ce <CLCD_voidSendCommand+0x1fe>
    14f4:	14 c0       	rjmp	.+40     	; 0x151e <CLCD_voidSendCommand+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f6:	6d 89       	ldd	r22, Y+21	; 0x15
    14f8:	7e 89       	ldd	r23, Y+22	; 0x16
    14fa:	8f 89       	ldd	r24, Y+23	; 0x17
    14fc:	98 8d       	ldd	r25, Y+24	; 0x18
    14fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1502:	dc 01       	movw	r26, r24
    1504:	cb 01       	movw	r24, r22
    1506:	9c 8b       	std	Y+20, r25	; 0x14
    1508:	8b 8b       	std	Y+19, r24	; 0x13
    150a:	8b 89       	ldd	r24, Y+19	; 0x13
    150c:	9c 89       	ldd	r25, Y+20	; 0x14
    150e:	98 8b       	std	Y+16, r25	; 0x10
    1510:	8f 87       	std	Y+15, r24	; 0x0f
    1512:	8f 85       	ldd	r24, Y+15	; 0x0f
    1514:	98 89       	ldd	r25, Y+16	; 0x10
    1516:	01 97       	sbiw	r24, 0x01	; 1
    1518:	f1 f7       	brne	.-4      	; 0x1516 <CLCD_voidSendCommand+0x246>
    151a:	98 8b       	std	Y+16, r25	; 0x10
    151c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	62 e0       	ldi	r22, 0x02	; 2
    1522:	40 e0       	ldi	r20, 0x00	; 0
    1524:	0e 94 27 10 	call	0x204e	; 0x204e <DIO_u8SetPinValue>
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	a0 e0       	ldi	r26, 0x00	; 0
    152e:	b0 e4       	ldi	r27, 0x40	; 64
    1530:	8b 87       	std	Y+11, r24	; 0x0b
    1532:	9c 87       	std	Y+12, r25	; 0x0c
    1534:	ad 87       	std	Y+13, r26	; 0x0d
    1536:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1538:	6b 85       	ldd	r22, Y+11	; 0x0b
    153a:	7c 85       	ldd	r23, Y+12	; 0x0c
    153c:	8d 85       	ldd	r24, Y+13	; 0x0d
    153e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	4a ef       	ldi	r20, 0xFA	; 250
    1546:	54 e4       	ldi	r21, 0x44	; 68
    1548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	8f 83       	std	Y+7, r24	; 0x07
    1552:	98 87       	std	Y+8, r25	; 0x08
    1554:	a9 87       	std	Y+9, r26	; 0x09
    1556:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1558:	6f 81       	ldd	r22, Y+7	; 0x07
    155a:	78 85       	ldd	r23, Y+8	; 0x08
    155c:	89 85       	ldd	r24, Y+9	; 0x09
    155e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	40 e8       	ldi	r20, 0x80	; 128
    1566:	5f e3       	ldi	r21, 0x3F	; 63
    1568:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    156c:	88 23       	and	r24, r24
    156e:	2c f4       	brge	.+10     	; 0x157a <CLCD_voidSendCommand+0x2aa>
		__ticks = 1;
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	9e 83       	std	Y+6, r25	; 0x06
    1576:	8d 83       	std	Y+5, r24	; 0x05
    1578:	3f c0       	rjmp	.+126    	; 0x15f8 <CLCD_voidSendCommand+0x328>
	else if (__tmp > 65535)
    157a:	6f 81       	ldd	r22, Y+7	; 0x07
    157c:	78 85       	ldd	r23, Y+8	; 0x08
    157e:	89 85       	ldd	r24, Y+9	; 0x09
    1580:	9a 85       	ldd	r25, Y+10	; 0x0a
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	3f ef       	ldi	r19, 0xFF	; 255
    1586:	4f e7       	ldi	r20, 0x7F	; 127
    1588:	57 e4       	ldi	r21, 0x47	; 71
    158a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    158e:	18 16       	cp	r1, r24
    1590:	4c f5       	brge	.+82     	; 0x15e4 <CLCD_voidSendCommand+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1592:	6b 85       	ldd	r22, Y+11	; 0x0b
    1594:	7c 85       	ldd	r23, Y+12	; 0x0c
    1596:	8d 85       	ldd	r24, Y+13	; 0x0d
    1598:	9e 85       	ldd	r25, Y+14	; 0x0e
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	40 e2       	ldi	r20, 0x20	; 32
    15a0:	51 e4       	ldi	r21, 0x41	; 65
    15a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	bc 01       	movw	r22, r24
    15ac:	cd 01       	movw	r24, r26
    15ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b2:	dc 01       	movw	r26, r24
    15b4:	cb 01       	movw	r24, r22
    15b6:	9e 83       	std	Y+6, r25	; 0x06
    15b8:	8d 83       	std	Y+5, r24	; 0x05
    15ba:	0f c0       	rjmp	.+30     	; 0x15da <CLCD_voidSendCommand+0x30a>
    15bc:	88 ec       	ldi	r24, 0xC8	; 200
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	9c 83       	std	Y+4, r25	; 0x04
    15c2:	8b 83       	std	Y+3, r24	; 0x03
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	9c 81       	ldd	r25, Y+4	; 0x04
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	f1 f7       	brne	.-4      	; 0x15c8 <CLCD_voidSendCommand+0x2f8>
    15cc:	9c 83       	std	Y+4, r25	; 0x04
    15ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d0:	8d 81       	ldd	r24, Y+5	; 0x05
    15d2:	9e 81       	ldd	r25, Y+6	; 0x06
    15d4:	01 97       	sbiw	r24, 0x01	; 1
    15d6:	9e 83       	std	Y+6, r25	; 0x06
    15d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15da:	8d 81       	ldd	r24, Y+5	; 0x05
    15dc:	9e 81       	ldd	r25, Y+6	; 0x06
    15de:	00 97       	sbiw	r24, 0x00	; 0
    15e0:	69 f7       	brne	.-38     	; 0x15bc <CLCD_voidSendCommand+0x2ec>
    15e2:	14 c0       	rjmp	.+40     	; 0x160c <CLCD_voidSendCommand+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e4:	6f 81       	ldd	r22, Y+7	; 0x07
    15e6:	78 85       	ldd	r23, Y+8	; 0x08
    15e8:	89 85       	ldd	r24, Y+9	; 0x09
    15ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f0:	dc 01       	movw	r26, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	9e 83       	std	Y+6, r25	; 0x06
    15f6:	8d 83       	std	Y+5, r24	; 0x05
    15f8:	8d 81       	ldd	r24, Y+5	; 0x05
    15fa:	9e 81       	ldd	r25, Y+6	; 0x06
    15fc:	9a 83       	std	Y+2, r25	; 0x02
    15fe:	89 83       	std	Y+1, r24	; 0x01
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	9a 81       	ldd	r25, Y+2	; 0x02
    1604:	01 97       	sbiw	r24, 0x01	; 1
    1606:	f1 f7       	brne	.-4      	; 0x1604 <CLCD_voidSendCommand+0x334>
    1608:	9a 83       	std	Y+2, r25	; 0x02
    160a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
#else
#error "In correct cconfigrtion of LCD_MODE"
#endif

}
    160c:	ac 96       	adiw	r28, 0x2c	; 44
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	f8 94       	cli
    1612:	de bf       	out	0x3e, r29	; 62
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	cd bf       	out	0x3d, r28	; 61
    1618:	cf 91       	pop	r28
    161a:	df 91       	pop	r29
    161c:	08 95       	ret

0000161e <CLCD_Read_BF_AC>:
u8 CLCD_Read_BF_AC() {
    161e:	df 93       	push	r29
    1620:	cf 93       	push	r28
    1622:	00 d0       	rcall	.+0      	; 0x1624 <CLCD_Read_BF_AC+0x6>
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Address = 0;
    1628:	1a 82       	std	Y+2, r1	; 0x02
	/*PIN RS SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_PIN_LOW);
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	60 e0       	ldi	r22, 0x00	; 0
    162e:	40 e0       	ldi	r20, 0x00	; 0
    1630:	0e 94 27 10 	call	0x204e	; 0x204e <DIO_u8SetPinValue>
	/*PIN RW SET HIGH  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_PIN_HIGH);
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	61 e0       	ldi	r22, 0x01	; 1
    1638:	41 e0       	ldi	r20, 0x01	; 1
    163a:	0e 94 27 10 	call	0x204e	; 0x204e <DIO_u8SetPinValue>
	/*PIN SET  send pulse (E) */
	for (u8 i = 0; i < 7; i++) {
    163e:	19 82       	std	Y+1, r1	; 0x01
    1640:	1c c0       	rjmp	.+56     	; 0x167a <CLCD_Read_BF_AC+0x5c>
		DIO_u8GetPinValue(CLCD_DATA_PORT, i, &Local_u8Address);
    1642:	9e 01       	movw	r18, r28
    1644:	2e 5f       	subi	r18, 0xFE	; 254
    1646:	3f 4f       	sbci	r19, 0xFF	; 255
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	69 81       	ldd	r22, Y+1	; 0x01
    164c:	a9 01       	movw	r20, r18
    164e:	0e 94 8e 11 	call	0x231c	; 0x231c <DIO_u8GetPinValue>
		Local_u8Address += Local_u8Address << i;
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	89 81       	ldd	r24, Y+1	; 0x01
    165a:	88 2f       	mov	r24, r24
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	a9 01       	movw	r20, r18
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <CLCD_Read_BF_AC+0x48>
    1662:	44 0f       	add	r20, r20
    1664:	55 1f       	adc	r21, r21
    1666:	8a 95       	dec	r24
    1668:	e2 f7       	brpl	.-8      	; 0x1662 <CLCD_Read_BF_AC+0x44>
    166a:	ca 01       	movw	r24, r20
    166c:	98 2f       	mov	r25, r24
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	89 0f       	add	r24, r25
    1672:	8a 83       	std	Y+2, r24	; 0x02
	/*PIN RS SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_PIN_LOW);
	/*PIN RW SET HIGH  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_PIN_HIGH);
	/*PIN SET  send pulse (E) */
	for (u8 i = 0; i < 7; i++) {
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	8f 5f       	subi	r24, 0xFF	; 255
    1678:	89 83       	std	Y+1, r24	; 0x01
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	87 30       	cpi	r24, 0x07	; 7
    167e:	08 f3       	brcs	.-62     	; 0x1642 <CLCD_Read_BF_AC+0x24>
		DIO_u8GetPinValue(CLCD_DATA_PORT, i, &Local_u8Address);
		Local_u8Address += Local_u8Address << i;
	}
	return Local_u8Address;
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	cf 91       	pop	r28
    1688:	df 91       	pop	r29
    168a:	08 95       	ret

0000168c <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    168c:	df 93       	push	r29
    168e:	cf 93       	push	r28
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
    1694:	ac 97       	sbiw	r28, 0x2c	; 44
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	de bf       	out	0x3e, r29	; 62
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	cd bf       	out	0x3d, r28	; 61
    16a0:	8c a7       	std	Y+44, r24	; 0x2c
	if (Local_u8Address > 0x0f)
		CLCD_voidSendCommand(0x0C);
	else
		CLCD_voidSendCommand(0x06);
#elif CLCD_CHIOCE_MODE==_4_BIT_MODE
	u8 Local_u8Mask = 0b11110000;
    16a2:	80 ef       	ldi	r24, 0xF0	; 240
    16a4:	8b a7       	std	Y+43, r24	; 0x2b
	/*PIN RS SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_PIN_HIGH);
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	60 e0       	ldi	r22, 0x00	; 0
    16aa:	41 e0       	ldi	r20, 0x01	; 1
    16ac:	0e 94 27 10 	call	0x204e	; 0x204e <DIO_u8SetPinValue>
	/*PIN RW SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_PIN_LOW);
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	61 e0       	ldi	r22, 0x01	; 1
    16b4:	40 e0       	ldi	r20, 0x00	; 0
    16b6:	0e 94 27 10 	call	0x204e	; 0x204e <DIO_u8SetPinValue>
	/*PORT SET COMMAND*/
	Local_u8Mask &= Copy_u8Data;
    16ba:	9b a5       	ldd	r25, Y+43	; 0x2b
    16bc:	8c a5       	ldd	r24, Y+44	; 0x2c
    16be:	89 23       	and	r24, r25
    16c0:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Mask);
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	6b a5       	ldd	r22, Y+43	; 0x2b
    16c6:	0e 94 40 11 	call	0x2280	; 0x2280 <DIO_u8SetPortValue>
	/*PIN SET send pulse (E) */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_HIGH);
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	62 e0       	ldi	r22, 0x02	; 2
    16ce:	41 e0       	ldi	r20, 0x01	; 1
    16d0:	0e 94 27 10 	call	0x204e	; 0x204e <DIO_u8SetPinValue>
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	a0 e0       	ldi	r26, 0x00	; 0
    16da:	b0 e4       	ldi	r27, 0x40	; 64
    16dc:	8f a3       	std	Y+39, r24	; 0x27
    16de:	98 a7       	std	Y+40, r25	; 0x28
    16e0:	a9 a7       	std	Y+41, r26	; 0x29
    16e2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e4:	6f a1       	ldd	r22, Y+39	; 0x27
    16e6:	78 a5       	ldd	r23, Y+40	; 0x28
    16e8:	89 a5       	ldd	r24, Y+41	; 0x29
    16ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	4a ef       	ldi	r20, 0xFA	; 250
    16f2:	54 e4       	ldi	r21, 0x44	; 68
    16f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	8b a3       	std	Y+35, r24	; 0x23
    16fe:	9c a3       	std	Y+36, r25	; 0x24
    1700:	ad a3       	std	Y+37, r26	; 0x25
    1702:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1704:	6b a1       	ldd	r22, Y+35	; 0x23
    1706:	7c a1       	ldd	r23, Y+36	; 0x24
    1708:	8d a1       	ldd	r24, Y+37	; 0x25
    170a:	9e a1       	ldd	r25, Y+38	; 0x26
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	40 e8       	ldi	r20, 0x80	; 128
    1712:	5f e3       	ldi	r21, 0x3F	; 63
    1714:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1718:	88 23       	and	r24, r24
    171a:	2c f4       	brge	.+10     	; 0x1726 <CLCD_voidSendData+0x9a>
		__ticks = 1;
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	9a a3       	std	Y+34, r25	; 0x22
    1722:	89 a3       	std	Y+33, r24	; 0x21
    1724:	3f c0       	rjmp	.+126    	; 0x17a4 <CLCD_voidSendData+0x118>
	else if (__tmp > 65535)
    1726:	6b a1       	ldd	r22, Y+35	; 0x23
    1728:	7c a1       	ldd	r23, Y+36	; 0x24
    172a:	8d a1       	ldd	r24, Y+37	; 0x25
    172c:	9e a1       	ldd	r25, Y+38	; 0x26
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	3f ef       	ldi	r19, 0xFF	; 255
    1732:	4f e7       	ldi	r20, 0x7F	; 127
    1734:	57 e4       	ldi	r21, 0x47	; 71
    1736:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    173a:	18 16       	cp	r1, r24
    173c:	4c f5       	brge	.+82     	; 0x1790 <CLCD_voidSendData+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    173e:	6f a1       	ldd	r22, Y+39	; 0x27
    1740:	78 a5       	ldd	r23, Y+40	; 0x28
    1742:	89 a5       	ldd	r24, Y+41	; 0x29
    1744:	9a a5       	ldd	r25, Y+42	; 0x2a
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	40 e2       	ldi	r20, 0x20	; 32
    174c:	51 e4       	ldi	r21, 0x41	; 65
    174e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	bc 01       	movw	r22, r24
    1758:	cd 01       	movw	r24, r26
    175a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	9a a3       	std	Y+34, r25	; 0x22
    1764:	89 a3       	std	Y+33, r24	; 0x21
    1766:	0f c0       	rjmp	.+30     	; 0x1786 <CLCD_voidSendData+0xfa>
    1768:	88 ec       	ldi	r24, 0xC8	; 200
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	98 a3       	std	Y+32, r25	; 0x20
    176e:	8f 8f       	std	Y+31, r24	; 0x1f
    1770:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1772:	98 a1       	ldd	r25, Y+32	; 0x20
    1774:	01 97       	sbiw	r24, 0x01	; 1
    1776:	f1 f7       	brne	.-4      	; 0x1774 <CLCD_voidSendData+0xe8>
    1778:	98 a3       	std	Y+32, r25	; 0x20
    177a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    177c:	89 a1       	ldd	r24, Y+33	; 0x21
    177e:	9a a1       	ldd	r25, Y+34	; 0x22
    1780:	01 97       	sbiw	r24, 0x01	; 1
    1782:	9a a3       	std	Y+34, r25	; 0x22
    1784:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1786:	89 a1       	ldd	r24, Y+33	; 0x21
    1788:	9a a1       	ldd	r25, Y+34	; 0x22
    178a:	00 97       	sbiw	r24, 0x00	; 0
    178c:	69 f7       	brne	.-38     	; 0x1768 <CLCD_voidSendData+0xdc>
    178e:	14 c0       	rjmp	.+40     	; 0x17b8 <CLCD_voidSendData+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1790:	6b a1       	ldd	r22, Y+35	; 0x23
    1792:	7c a1       	ldd	r23, Y+36	; 0x24
    1794:	8d a1       	ldd	r24, Y+37	; 0x25
    1796:	9e a1       	ldd	r25, Y+38	; 0x26
    1798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	9a a3       	std	Y+34, r25	; 0x22
    17a2:	89 a3       	std	Y+33, r24	; 0x21
    17a4:	89 a1       	ldd	r24, Y+33	; 0x21
    17a6:	9a a1       	ldd	r25, Y+34	; 0x22
    17a8:	9e 8f       	std	Y+30, r25	; 0x1e
    17aa:	8d 8f       	std	Y+29, r24	; 0x1d
    17ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17b0:	01 97       	sbiw	r24, 0x01	; 1
    17b2:	f1 f7       	brne	.-4      	; 0x17b0 <CLCD_voidSendData+0x124>
    17b4:	9e 8f       	std	Y+30, r25	; 0x1e
    17b6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	62 e0       	ldi	r22, 0x02	; 2
    17bc:	40 e0       	ldi	r20, 0x00	; 0
    17be:	0e 94 27 10 	call	0x204e	; 0x204e <DIO_u8SetPinValue>
	Local_u8Mask=0b11110000;
    17c2:	80 ef       	ldi	r24, 0xF0	; 240
    17c4:	8b a7       	std	Y+43, r24	; 0x2b
	Local_u8Mask = ~(Local_u8Mask) & Copy_u8Data;
    17c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    17c8:	98 2f       	mov	r25, r24
    17ca:	90 95       	com	r25
    17cc:	8c a5       	ldd	r24, Y+44	; 0x2c
    17ce:	89 23       	and	r24, r25
    17d0:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPortValue(CLCD_DATA_PORT, (Local_u8Mask << 4));
    17d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    17d4:	98 2f       	mov	r25, r24
    17d6:	92 95       	swap	r25
    17d8:	90 7f       	andi	r25, 0xF0	; 240
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	69 2f       	mov	r22, r25
    17de:	0e 94 40 11 	call	0x2280	; 0x2280 <DIO_u8SetPortValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_HIGH);
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	62 e0       	ldi	r22, 0x02	; 2
    17e6:	41 e0       	ldi	r20, 0x01	; 1
    17e8:	0e 94 27 10 	call	0x204e	; 0x204e <DIO_u8SetPinValue>
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	a0 e0       	ldi	r26, 0x00	; 0
    17f2:	b0 e4       	ldi	r27, 0x40	; 64
    17f4:	89 8f       	std	Y+25, r24	; 0x19
    17f6:	9a 8f       	std	Y+26, r25	; 0x1a
    17f8:	ab 8f       	std	Y+27, r26	; 0x1b
    17fa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17fc:	69 8d       	ldd	r22, Y+25	; 0x19
    17fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1800:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1802:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	4a ef       	ldi	r20, 0xFA	; 250
    180a:	54 e4       	ldi	r21, 0x44	; 68
    180c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	8d 8b       	std	Y+21, r24	; 0x15
    1816:	9e 8b       	std	Y+22, r25	; 0x16
    1818:	af 8b       	std	Y+23, r26	; 0x17
    181a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    181c:	6d 89       	ldd	r22, Y+21	; 0x15
    181e:	7e 89       	ldd	r23, Y+22	; 0x16
    1820:	8f 89       	ldd	r24, Y+23	; 0x17
    1822:	98 8d       	ldd	r25, Y+24	; 0x18
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	40 e8       	ldi	r20, 0x80	; 128
    182a:	5f e3       	ldi	r21, 0x3F	; 63
    182c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1830:	88 23       	and	r24, r24
    1832:	2c f4       	brge	.+10     	; 0x183e <CLCD_voidSendData+0x1b2>
		__ticks = 1;
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	9c 8b       	std	Y+20, r25	; 0x14
    183a:	8b 8b       	std	Y+19, r24	; 0x13
    183c:	3f c0       	rjmp	.+126    	; 0x18bc <CLCD_voidSendData+0x230>
	else if (__tmp > 65535)
    183e:	6d 89       	ldd	r22, Y+21	; 0x15
    1840:	7e 89       	ldd	r23, Y+22	; 0x16
    1842:	8f 89       	ldd	r24, Y+23	; 0x17
    1844:	98 8d       	ldd	r25, Y+24	; 0x18
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	3f ef       	ldi	r19, 0xFF	; 255
    184a:	4f e7       	ldi	r20, 0x7F	; 127
    184c:	57 e4       	ldi	r21, 0x47	; 71
    184e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1852:	18 16       	cp	r1, r24
    1854:	4c f5       	brge	.+82     	; 0x18a8 <CLCD_voidSendData+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1856:	69 8d       	ldd	r22, Y+25	; 0x19
    1858:	7a 8d       	ldd	r23, Y+26	; 0x1a
    185a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    185c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	40 e2       	ldi	r20, 0x20	; 32
    1864:	51 e4       	ldi	r21, 0x41	; 65
    1866:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	bc 01       	movw	r22, r24
    1870:	cd 01       	movw	r24, r26
    1872:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	9c 8b       	std	Y+20, r25	; 0x14
    187c:	8b 8b       	std	Y+19, r24	; 0x13
    187e:	0f c0       	rjmp	.+30     	; 0x189e <CLCD_voidSendData+0x212>
    1880:	88 ec       	ldi	r24, 0xC8	; 200
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	9a 8b       	std	Y+18, r25	; 0x12
    1886:	89 8b       	std	Y+17, r24	; 0x11
    1888:	89 89       	ldd	r24, Y+17	; 0x11
    188a:	9a 89       	ldd	r25, Y+18	; 0x12
    188c:	01 97       	sbiw	r24, 0x01	; 1
    188e:	f1 f7       	brne	.-4      	; 0x188c <CLCD_voidSendData+0x200>
    1890:	9a 8b       	std	Y+18, r25	; 0x12
    1892:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1894:	8b 89       	ldd	r24, Y+19	; 0x13
    1896:	9c 89       	ldd	r25, Y+20	; 0x14
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	9c 8b       	std	Y+20, r25	; 0x14
    189c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    189e:	8b 89       	ldd	r24, Y+19	; 0x13
    18a0:	9c 89       	ldd	r25, Y+20	; 0x14
    18a2:	00 97       	sbiw	r24, 0x00	; 0
    18a4:	69 f7       	brne	.-38     	; 0x1880 <CLCD_voidSendData+0x1f4>
    18a6:	14 c0       	rjmp	.+40     	; 0x18d0 <CLCD_voidSendData+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18a8:	6d 89       	ldd	r22, Y+21	; 0x15
    18aa:	7e 89       	ldd	r23, Y+22	; 0x16
    18ac:	8f 89       	ldd	r24, Y+23	; 0x17
    18ae:	98 8d       	ldd	r25, Y+24	; 0x18
    18b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b4:	dc 01       	movw	r26, r24
    18b6:	cb 01       	movw	r24, r22
    18b8:	9c 8b       	std	Y+20, r25	; 0x14
    18ba:	8b 8b       	std	Y+19, r24	; 0x13
    18bc:	8b 89       	ldd	r24, Y+19	; 0x13
    18be:	9c 89       	ldd	r25, Y+20	; 0x14
    18c0:	98 8b       	std	Y+16, r25	; 0x10
    18c2:	8f 87       	std	Y+15, r24	; 0x0f
    18c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    18c6:	98 89       	ldd	r25, Y+16	; 0x10
    18c8:	01 97       	sbiw	r24, 0x01	; 1
    18ca:	f1 f7       	brne	.-4      	; 0x18c8 <CLCD_voidSendData+0x23c>
    18cc:	98 8b       	std	Y+16, r25	; 0x10
    18ce:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	62 e0       	ldi	r22, 0x02	; 2
    18d4:	40 e0       	ldi	r20, 0x00	; 0
    18d6:	0e 94 27 10 	call	0x204e	; 0x204e <DIO_u8SetPinValue>
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	a0 e0       	ldi	r26, 0x00	; 0
    18e0:	b0 e4       	ldi	r27, 0x40	; 64
    18e2:	8b 87       	std	Y+11, r24	; 0x0b
    18e4:	9c 87       	std	Y+12, r25	; 0x0c
    18e6:	ad 87       	std	Y+13, r26	; 0x0d
    18e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    18f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	4a ef       	ldi	r20, 0xFA	; 250
    18f8:	54 e4       	ldi	r21, 0x44	; 68
    18fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fe:	dc 01       	movw	r26, r24
    1900:	cb 01       	movw	r24, r22
    1902:	8f 83       	std	Y+7, r24	; 0x07
    1904:	98 87       	std	Y+8, r25	; 0x08
    1906:	a9 87       	std	Y+9, r26	; 0x09
    1908:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    190a:	6f 81       	ldd	r22, Y+7	; 0x07
    190c:	78 85       	ldd	r23, Y+8	; 0x08
    190e:	89 85       	ldd	r24, Y+9	; 0x09
    1910:	9a 85       	ldd	r25, Y+10	; 0x0a
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	40 e8       	ldi	r20, 0x80	; 128
    1918:	5f e3       	ldi	r21, 0x3F	; 63
    191a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    191e:	88 23       	and	r24, r24
    1920:	2c f4       	brge	.+10     	; 0x192c <CLCD_voidSendData+0x2a0>
		__ticks = 1;
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	9e 83       	std	Y+6, r25	; 0x06
    1928:	8d 83       	std	Y+5, r24	; 0x05
    192a:	3f c0       	rjmp	.+126    	; 0x19aa <CLCD_voidSendData+0x31e>
	else if (__tmp > 65535)
    192c:	6f 81       	ldd	r22, Y+7	; 0x07
    192e:	78 85       	ldd	r23, Y+8	; 0x08
    1930:	89 85       	ldd	r24, Y+9	; 0x09
    1932:	9a 85       	ldd	r25, Y+10	; 0x0a
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	3f ef       	ldi	r19, 0xFF	; 255
    1938:	4f e7       	ldi	r20, 0x7F	; 127
    193a:	57 e4       	ldi	r21, 0x47	; 71
    193c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1940:	18 16       	cp	r1, r24
    1942:	4c f5       	brge	.+82     	; 0x1996 <CLCD_voidSendData+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1944:	6b 85       	ldd	r22, Y+11	; 0x0b
    1946:	7c 85       	ldd	r23, Y+12	; 0x0c
    1948:	8d 85       	ldd	r24, Y+13	; 0x0d
    194a:	9e 85       	ldd	r25, Y+14	; 0x0e
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	40 e2       	ldi	r20, 0x20	; 32
    1952:	51 e4       	ldi	r21, 0x41	; 65
    1954:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	bc 01       	movw	r22, r24
    195e:	cd 01       	movw	r24, r26
    1960:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	9e 83       	std	Y+6, r25	; 0x06
    196a:	8d 83       	std	Y+5, r24	; 0x05
    196c:	0f c0       	rjmp	.+30     	; 0x198c <CLCD_voidSendData+0x300>
    196e:	88 ec       	ldi	r24, 0xC8	; 200
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	9c 83       	std	Y+4, r25	; 0x04
    1974:	8b 83       	std	Y+3, r24	; 0x03
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	9c 81       	ldd	r25, Y+4	; 0x04
    197a:	01 97       	sbiw	r24, 0x01	; 1
    197c:	f1 f7       	brne	.-4      	; 0x197a <CLCD_voidSendData+0x2ee>
    197e:	9c 83       	std	Y+4, r25	; 0x04
    1980:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1982:	8d 81       	ldd	r24, Y+5	; 0x05
    1984:	9e 81       	ldd	r25, Y+6	; 0x06
    1986:	01 97       	sbiw	r24, 0x01	; 1
    1988:	9e 83       	std	Y+6, r25	; 0x06
    198a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    198c:	8d 81       	ldd	r24, Y+5	; 0x05
    198e:	9e 81       	ldd	r25, Y+6	; 0x06
    1990:	00 97       	sbiw	r24, 0x00	; 0
    1992:	69 f7       	brne	.-38     	; 0x196e <CLCD_voidSendData+0x2e2>
    1994:	14 c0       	rjmp	.+40     	; 0x19be <CLCD_voidSendData+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1996:	6f 81       	ldd	r22, Y+7	; 0x07
    1998:	78 85       	ldd	r23, Y+8	; 0x08
    199a:	89 85       	ldd	r24, Y+9	; 0x09
    199c:	9a 85       	ldd	r25, Y+10	; 0x0a
    199e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	9e 83       	std	Y+6, r25	; 0x06
    19a8:	8d 83       	std	Y+5, r24	; 0x05
    19aa:	8d 81       	ldd	r24, Y+5	; 0x05
    19ac:	9e 81       	ldd	r25, Y+6	; 0x06
    19ae:	9a 83       	std	Y+2, r25	; 0x02
    19b0:	89 83       	std	Y+1, r24	; 0x01
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	9a 81       	ldd	r25, Y+2	; 0x02
    19b6:	01 97       	sbiw	r24, 0x01	; 1
    19b8:	f1 f7       	brne	.-4      	; 0x19b6 <CLCD_voidSendData+0x32a>
    19ba:	9a 83       	std	Y+2, r25	; 0x02
    19bc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	CLCD_voidSendCommand(0x06);
    19be:	86 e0       	ldi	r24, 0x06	; 6
    19c0:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
#else
#error "In correct cconfigrtion of LCD_MODE"
#endif
}
    19c4:	ac 96       	adiw	r28, 0x2c	; 44
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	de bf       	out	0x3e, r29	; 62
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	cd bf       	out	0x3d, r28	; 61
    19d0:	cf 91       	pop	r28
    19d2:	df 91       	pop	r29
    19d4:	08 95       	ret

000019d6 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    19d6:	df 93       	push	r29
    19d8:	cf 93       	push	r28
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
    19de:	e8 97       	sbiw	r28, 0x38	; 56
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	de bf       	out	0x3e, r29	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	cd bf       	out	0x3d, r28	; 61
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	a0 e2       	ldi	r26, 0x20	; 32
    19f0:	b2 e4       	ldi	r27, 0x42	; 66
    19f2:	8d ab       	std	Y+53, r24	; 0x35
    19f4:	9e ab       	std	Y+54, r25	; 0x36
    19f6:	af ab       	std	Y+55, r26	; 0x37
    19f8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19fa:	6d a9       	ldd	r22, Y+53	; 0x35
    19fc:	7e a9       	ldd	r23, Y+54	; 0x36
    19fe:	8f a9       	ldd	r24, Y+55	; 0x37
    1a00:	98 ad       	ldd	r25, Y+56	; 0x38
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	4a ef       	ldi	r20, 0xFA	; 250
    1a08:	54 e4       	ldi	r21, 0x44	; 68
    1a0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	89 ab       	std	Y+49, r24	; 0x31
    1a14:	9a ab       	std	Y+50, r25	; 0x32
    1a16:	ab ab       	std	Y+51, r26	; 0x33
    1a18:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a1a:	69 a9       	ldd	r22, Y+49	; 0x31
    1a1c:	7a a9       	ldd	r23, Y+50	; 0x32
    1a1e:	8b a9       	ldd	r24, Y+51	; 0x33
    1a20:	9c a9       	ldd	r25, Y+52	; 0x34
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	40 e8       	ldi	r20, 0x80	; 128
    1a28:	5f e3       	ldi	r21, 0x3F	; 63
    1a2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a2e:	88 23       	and	r24, r24
    1a30:	2c f4       	brge	.+10     	; 0x1a3c <CLCD_voidInit+0x66>
		__ticks = 1;
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	98 ab       	std	Y+48, r25	; 0x30
    1a38:	8f a7       	std	Y+47, r24	; 0x2f
    1a3a:	3f c0       	rjmp	.+126    	; 0x1aba <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1a3c:	69 a9       	ldd	r22, Y+49	; 0x31
    1a3e:	7a a9       	ldd	r23, Y+50	; 0x32
    1a40:	8b a9       	ldd	r24, Y+51	; 0x33
    1a42:	9c a9       	ldd	r25, Y+52	; 0x34
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	3f ef       	ldi	r19, 0xFF	; 255
    1a48:	4f e7       	ldi	r20, 0x7F	; 127
    1a4a:	57 e4       	ldi	r21, 0x47	; 71
    1a4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a50:	18 16       	cp	r1, r24
    1a52:	4c f5       	brge	.+82     	; 0x1aa6 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a54:	6d a9       	ldd	r22, Y+53	; 0x35
    1a56:	7e a9       	ldd	r23, Y+54	; 0x36
    1a58:	8f a9       	ldd	r24, Y+55	; 0x37
    1a5a:	98 ad       	ldd	r25, Y+56	; 0x38
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	40 e2       	ldi	r20, 0x20	; 32
    1a62:	51 e4       	ldi	r21, 0x41	; 65
    1a64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	bc 01       	movw	r22, r24
    1a6e:	cd 01       	movw	r24, r26
    1a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	98 ab       	std	Y+48, r25	; 0x30
    1a7a:	8f a7       	std	Y+47, r24	; 0x2f
    1a7c:	0f c0       	rjmp	.+30     	; 0x1a9c <CLCD_voidInit+0xc6>
    1a7e:	88 ec       	ldi	r24, 0xC8	; 200
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	9e a7       	std	Y+46, r25	; 0x2e
    1a84:	8d a7       	std	Y+45, r24	; 0x2d
    1a86:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a88:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a8a:	01 97       	sbiw	r24, 0x01	; 1
    1a8c:	f1 f7       	brne	.-4      	; 0x1a8a <CLCD_voidInit+0xb4>
    1a8e:	9e a7       	std	Y+46, r25	; 0x2e
    1a90:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a92:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a94:	98 a9       	ldd	r25, Y+48	; 0x30
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	98 ab       	std	Y+48, r25	; 0x30
    1a9a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a9e:	98 a9       	ldd	r25, Y+48	; 0x30
    1aa0:	00 97       	sbiw	r24, 0x00	; 0
    1aa2:	69 f7       	brne	.-38     	; 0x1a7e <CLCD_voidInit+0xa8>
    1aa4:	14 c0       	rjmp	.+40     	; 0x1ace <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa6:	69 a9       	ldd	r22, Y+49	; 0x31
    1aa8:	7a a9       	ldd	r23, Y+50	; 0x32
    1aaa:	8b a9       	ldd	r24, Y+51	; 0x33
    1aac:	9c a9       	ldd	r25, Y+52	; 0x34
    1aae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	98 ab       	std	Y+48, r25	; 0x30
    1ab8:	8f a7       	std	Y+47, r24	; 0x2f
    1aba:	8f a5       	ldd	r24, Y+47	; 0x2f
    1abc:	98 a9       	ldd	r25, Y+48	; 0x30
    1abe:	9c a7       	std	Y+44, r25	; 0x2c
    1ac0:	8b a7       	std	Y+43, r24	; 0x2b
    1ac2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ac4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ac6:	01 97       	sbiw	r24, 0x01	; 1
    1ac8:	f1 f7       	brne	.-4      	; 0x1ac6 <CLCD_voidInit+0xf0>
    1aca:	9c a7       	std	Y+44, r25	; 0x2c
    1acc:	8b a7       	std	Y+43, r24	; 0x2b
	CLCD_voidSendCommand(0b00000001);
#elif CLCD_CHIOCE_MODE==_4_BIT_MODE
	/*WAIT FOR MORE THEN 30 MS*/
	_delay_ms(40);
	/*function set command: Set Bit 5 */
	CLCD_voidSendCommand(0b00100000);
    1ace:	80 e2       	ldi	r24, 0x20	; 32
    1ad0:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(0b00100000);
    1ad4:	80 e2       	ldi	r24, 0x20	; 32
    1ad6:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>

	/*function set command:(7_Bit) N --> Lines,(6_Bit) F --> 5*8 font */
	CLCD_voidSendCommand(0b10000000);
    1ada:	80 e8       	ldi	r24, 0x80	; 128
    1adc:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	a0 e8       	ldi	r26, 0x80	; 128
    1ae6:	bf e3       	ldi	r27, 0x3F	; 63
    1ae8:	8f a3       	std	Y+39, r24	; 0x27
    1aea:	98 a7       	std	Y+40, r25	; 0x28
    1aec:	a9 a7       	std	Y+41, r26	; 0x29
    1aee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af0:	6f a1       	ldd	r22, Y+39	; 0x27
    1af2:	78 a5       	ldd	r23, Y+40	; 0x28
    1af4:	89 a5       	ldd	r24, Y+41	; 0x29
    1af6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	4a ef       	ldi	r20, 0xFA	; 250
    1afe:	54 e4       	ldi	r21, 0x44	; 68
    1b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	8b a3       	std	Y+35, r24	; 0x23
    1b0a:	9c a3       	std	Y+36, r25	; 0x24
    1b0c:	ad a3       	std	Y+37, r26	; 0x25
    1b0e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b10:	6b a1       	ldd	r22, Y+35	; 0x23
    1b12:	7c a1       	ldd	r23, Y+36	; 0x24
    1b14:	8d a1       	ldd	r24, Y+37	; 0x25
    1b16:	9e a1       	ldd	r25, Y+38	; 0x26
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	40 e8       	ldi	r20, 0x80	; 128
    1b1e:	5f e3       	ldi	r21, 0x3F	; 63
    1b20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b24:	88 23       	and	r24, r24
    1b26:	2c f4       	brge	.+10     	; 0x1b32 <CLCD_voidInit+0x15c>
		__ticks = 1;
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	9a a3       	std	Y+34, r25	; 0x22
    1b2e:	89 a3       	std	Y+33, r24	; 0x21
    1b30:	3f c0       	rjmp	.+126    	; 0x1bb0 <CLCD_voidInit+0x1da>
	else if (__tmp > 65535)
    1b32:	6b a1       	ldd	r22, Y+35	; 0x23
    1b34:	7c a1       	ldd	r23, Y+36	; 0x24
    1b36:	8d a1       	ldd	r24, Y+37	; 0x25
    1b38:	9e a1       	ldd	r25, Y+38	; 0x26
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	3f ef       	ldi	r19, 0xFF	; 255
    1b3e:	4f e7       	ldi	r20, 0x7F	; 127
    1b40:	57 e4       	ldi	r21, 0x47	; 71
    1b42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b46:	18 16       	cp	r1, r24
    1b48:	4c f5       	brge	.+82     	; 0x1b9c <CLCD_voidInit+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b4a:	6f a1       	ldd	r22, Y+39	; 0x27
    1b4c:	78 a5       	ldd	r23, Y+40	; 0x28
    1b4e:	89 a5       	ldd	r24, Y+41	; 0x29
    1b50:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	40 e2       	ldi	r20, 0x20	; 32
    1b58:	51 e4       	ldi	r21, 0x41	; 65
    1b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	bc 01       	movw	r22, r24
    1b64:	cd 01       	movw	r24, r26
    1b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	9a a3       	std	Y+34, r25	; 0x22
    1b70:	89 a3       	std	Y+33, r24	; 0x21
    1b72:	0f c0       	rjmp	.+30     	; 0x1b92 <CLCD_voidInit+0x1bc>
    1b74:	88 ec       	ldi	r24, 0xC8	; 200
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	98 a3       	std	Y+32, r25	; 0x20
    1b7a:	8f 8f       	std	Y+31, r24	; 0x1f
    1b7c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b7e:	98 a1       	ldd	r25, Y+32	; 0x20
    1b80:	01 97       	sbiw	r24, 0x01	; 1
    1b82:	f1 f7       	brne	.-4      	; 0x1b80 <CLCD_voidInit+0x1aa>
    1b84:	98 a3       	std	Y+32, r25	; 0x20
    1b86:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b88:	89 a1       	ldd	r24, Y+33	; 0x21
    1b8a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b8c:	01 97       	sbiw	r24, 0x01	; 1
    1b8e:	9a a3       	std	Y+34, r25	; 0x22
    1b90:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b92:	89 a1       	ldd	r24, Y+33	; 0x21
    1b94:	9a a1       	ldd	r25, Y+34	; 0x22
    1b96:	00 97       	sbiw	r24, 0x00	; 0
    1b98:	69 f7       	brne	.-38     	; 0x1b74 <CLCD_voidInit+0x19e>
    1b9a:	14 c0       	rjmp	.+40     	; 0x1bc4 <CLCD_voidInit+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b9c:	6b a1       	ldd	r22, Y+35	; 0x23
    1b9e:	7c a1       	ldd	r23, Y+36	; 0x24
    1ba0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ba2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ba4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	9a a3       	std	Y+34, r25	; 0x22
    1bae:	89 a3       	std	Y+33, r24	; 0x21
    1bb0:	89 a1       	ldd	r24, Y+33	; 0x21
    1bb2:	9a a1       	ldd	r25, Y+34	; 0x22
    1bb4:	9e 8f       	std	Y+30, r25	; 0x1e
    1bb6:	8d 8f       	std	Y+29, r24	; 0x1d
    1bb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	f1 f7       	brne	.-4      	; 0x1bbc <CLCD_voidInit+0x1e6>
    1bc0:	9e 8f       	std	Y+30, r25	; 0x1e
    1bc2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	CLCD_voidSendCommand(0b0000);
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
	/*Display No/00f ctrl  */
	/*Set Bit 7 ,(6_Bit) D --> display enable ,C --> disable cursor ,B --> no blink cursor*/
	CLCD_voidSendCommand(0b11000000);
    1bca:	80 ec       	ldi	r24, 0xC0	; 192
    1bcc:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	a0 e8       	ldi	r26, 0x80	; 128
    1bd6:	bf e3       	ldi	r27, 0x3F	; 63
    1bd8:	89 8f       	std	Y+25, r24	; 0x19
    1bda:	9a 8f       	std	Y+26, r25	; 0x1a
    1bdc:	ab 8f       	std	Y+27, r26	; 0x1b
    1bde:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be0:	69 8d       	ldd	r22, Y+25	; 0x19
    1be2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1be4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1be6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	4a ef       	ldi	r20, 0xFA	; 250
    1bee:	54 e4       	ldi	r21, 0x44	; 68
    1bf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	8d 8b       	std	Y+21, r24	; 0x15
    1bfa:	9e 8b       	std	Y+22, r25	; 0x16
    1bfc:	af 8b       	std	Y+23, r26	; 0x17
    1bfe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c00:	6d 89       	ldd	r22, Y+21	; 0x15
    1c02:	7e 89       	ldd	r23, Y+22	; 0x16
    1c04:	8f 89       	ldd	r24, Y+23	; 0x17
    1c06:	98 8d       	ldd	r25, Y+24	; 0x18
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	40 e8       	ldi	r20, 0x80	; 128
    1c0e:	5f e3       	ldi	r21, 0x3F	; 63
    1c10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c14:	88 23       	and	r24, r24
    1c16:	2c f4       	brge	.+10     	; 0x1c22 <CLCD_voidInit+0x24c>
		__ticks = 1;
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	9c 8b       	std	Y+20, r25	; 0x14
    1c1e:	8b 8b       	std	Y+19, r24	; 0x13
    1c20:	3f c0       	rjmp	.+126    	; 0x1ca0 <CLCD_voidInit+0x2ca>
	else if (__tmp > 65535)
    1c22:	6d 89       	ldd	r22, Y+21	; 0x15
    1c24:	7e 89       	ldd	r23, Y+22	; 0x16
    1c26:	8f 89       	ldd	r24, Y+23	; 0x17
    1c28:	98 8d       	ldd	r25, Y+24	; 0x18
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	3f ef       	ldi	r19, 0xFF	; 255
    1c2e:	4f e7       	ldi	r20, 0x7F	; 127
    1c30:	57 e4       	ldi	r21, 0x47	; 71
    1c32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c36:	18 16       	cp	r1, r24
    1c38:	4c f5       	brge	.+82     	; 0x1c8c <CLCD_voidInit+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c3a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	40 e2       	ldi	r20, 0x20	; 32
    1c48:	51 e4       	ldi	r21, 0x41	; 65
    1c4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	bc 01       	movw	r22, r24
    1c54:	cd 01       	movw	r24, r26
    1c56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	9c 8b       	std	Y+20, r25	; 0x14
    1c60:	8b 8b       	std	Y+19, r24	; 0x13
    1c62:	0f c0       	rjmp	.+30     	; 0x1c82 <CLCD_voidInit+0x2ac>
    1c64:	88 ec       	ldi	r24, 0xC8	; 200
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	9a 8b       	std	Y+18, r25	; 0x12
    1c6a:	89 8b       	std	Y+17, r24	; 0x11
    1c6c:	89 89       	ldd	r24, Y+17	; 0x11
    1c6e:	9a 89       	ldd	r25, Y+18	; 0x12
    1c70:	01 97       	sbiw	r24, 0x01	; 1
    1c72:	f1 f7       	brne	.-4      	; 0x1c70 <CLCD_voidInit+0x29a>
    1c74:	9a 8b       	std	Y+18, r25	; 0x12
    1c76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c78:	8b 89       	ldd	r24, Y+19	; 0x13
    1c7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	9c 8b       	std	Y+20, r25	; 0x14
    1c80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c82:	8b 89       	ldd	r24, Y+19	; 0x13
    1c84:	9c 89       	ldd	r25, Y+20	; 0x14
    1c86:	00 97       	sbiw	r24, 0x00	; 0
    1c88:	69 f7       	brne	.-38     	; 0x1c64 <CLCD_voidInit+0x28e>
    1c8a:	14 c0       	rjmp	.+40     	; 0x1cb4 <CLCD_voidInit+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c8c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c8e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c90:	8f 89       	ldd	r24, Y+23	; 0x17
    1c92:	98 8d       	ldd	r25, Y+24	; 0x18
    1c94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	9c 8b       	std	Y+20, r25	; 0x14
    1c9e:	8b 8b       	std	Y+19, r24	; 0x13
    1ca0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ca2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ca4:	98 8b       	std	Y+16, r25	; 0x10
    1ca6:	8f 87       	std	Y+15, r24	; 0x0f
    1ca8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1caa:	98 89       	ldd	r25, Y+16	; 0x10
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	f1 f7       	brne	.-4      	; 0x1cac <CLCD_voidInit+0x2d6>
    1cb0:	98 8b       	std	Y+16, r25	; 0x10
    1cb2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLCD_voidSendCommand(0b0000);
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
	/*Display Clear */
	CLCD_voidSendCommand(0b00010000);
    1cba:	80 e1       	ldi	r24, 0x10	; 16
    1cbc:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	a0 e0       	ldi	r26, 0x00	; 0
    1cc6:	b0 e4       	ldi	r27, 0x40	; 64
    1cc8:	8b 87       	std	Y+11, r24	; 0x0b
    1cca:	9c 87       	std	Y+12, r25	; 0x0c
    1ccc:	ad 87       	std	Y+13, r26	; 0x0d
    1cce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	4a ef       	ldi	r20, 0xFA	; 250
    1cde:	54 e4       	ldi	r21, 0x44	; 68
    1ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	8f 83       	std	Y+7, r24	; 0x07
    1cea:	98 87       	std	Y+8, r25	; 0x08
    1cec:	a9 87       	std	Y+9, r26	; 0x09
    1cee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cf0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf2:	78 85       	ldd	r23, Y+8	; 0x08
    1cf4:	89 85       	ldd	r24, Y+9	; 0x09
    1cf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	40 e8       	ldi	r20, 0x80	; 128
    1cfe:	5f e3       	ldi	r21, 0x3F	; 63
    1d00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d04:	88 23       	and	r24, r24
    1d06:	2c f4       	brge	.+10     	; 0x1d12 <CLCD_voidInit+0x33c>
		__ticks = 1;
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	9e 83       	std	Y+6, r25	; 0x06
    1d0e:	8d 83       	std	Y+5, r24	; 0x05
    1d10:	3f c0       	rjmp	.+126    	; 0x1d90 <CLCD_voidInit+0x3ba>
	else if (__tmp > 65535)
    1d12:	6f 81       	ldd	r22, Y+7	; 0x07
    1d14:	78 85       	ldd	r23, Y+8	; 0x08
    1d16:	89 85       	ldd	r24, Y+9	; 0x09
    1d18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	3f ef       	ldi	r19, 0xFF	; 255
    1d1e:	4f e7       	ldi	r20, 0x7F	; 127
    1d20:	57 e4       	ldi	r21, 0x47	; 71
    1d22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d26:	18 16       	cp	r1, r24
    1d28:	4c f5       	brge	.+82     	; 0x1d7c <CLCD_voidInit+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	40 e2       	ldi	r20, 0x20	; 32
    1d38:	51 e4       	ldi	r21, 0x41	; 65
    1d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	bc 01       	movw	r22, r24
    1d44:	cd 01       	movw	r24, r26
    1d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	9e 83       	std	Y+6, r25	; 0x06
    1d50:	8d 83       	std	Y+5, r24	; 0x05
    1d52:	0f c0       	rjmp	.+30     	; 0x1d72 <CLCD_voidInit+0x39c>
    1d54:	88 ec       	ldi	r24, 0xC8	; 200
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	9c 83       	std	Y+4, r25	; 0x04
    1d5a:	8b 83       	std	Y+3, r24	; 0x03
    1d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	f1 f7       	brne	.-4      	; 0x1d60 <CLCD_voidInit+0x38a>
    1d64:	9c 83       	std	Y+4, r25	; 0x04
    1d66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d68:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6c:	01 97       	sbiw	r24, 0x01	; 1
    1d6e:	9e 83       	std	Y+6, r25	; 0x06
    1d70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d72:	8d 81       	ldd	r24, Y+5	; 0x05
    1d74:	9e 81       	ldd	r25, Y+6	; 0x06
    1d76:	00 97       	sbiw	r24, 0x00	; 0
    1d78:	69 f7       	brne	.-38     	; 0x1d54 <CLCD_voidInit+0x37e>
    1d7a:	14 c0       	rjmp	.+40     	; 0x1da4 <CLCD_voidInit+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d7e:	78 85       	ldd	r23, Y+8	; 0x08
    1d80:	89 85       	ldd	r24, Y+9	; 0x09
    1d82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	9e 83       	std	Y+6, r25	; 0x06
    1d8e:	8d 83       	std	Y+5, r24	; 0x05
    1d90:	8d 81       	ldd	r24, Y+5	; 0x05
    1d92:	9e 81       	ldd	r25, Y+6	; 0x06
    1d94:	9a 83       	std	Y+2, r25	; 0x02
    1d96:	89 83       	std	Y+1, r24	; 0x01
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9c:	01 97       	sbiw	r24, 0x01	; 1
    1d9e:	f1 f7       	brne	.-4      	; 0x1d9c <CLCD_voidInit+0x3c6>
    1da0:	9a 83       	std	Y+2, r25	; 0x02
    1da2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	iniIsFinich=1;
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	80 93 a0 01 	sts	0x01A0, r24
#else
#error "In correct cconfigrtion of LCD_MODE"
#endif
}
    1daa:	e8 96       	adiw	r28, 0x38	; 56
    1dac:	0f b6       	in	r0, 0x3f	; 63
    1dae:	f8 94       	cli
    1db0:	de bf       	out	0x3e, r29	; 62
    1db2:	0f be       	out	0x3f, r0	; 63
    1db4:	cd bf       	out	0x3d, r28	; 61
    1db6:	cf 91       	pop	r28
    1db8:	df 91       	pop	r29
    1dba:	08 95       	ret

00001dbc <CLCD_voidSendString>:
void CLCD_voidSendString(const char* Copy_pcString)//char ASCII Value Constant not allow the func to change the sent string
{
    1dbc:	df 93       	push	r29
    1dbe:	cf 93       	push	r28
    1dc0:	00 d0       	rcall	.+0      	; 0x1dc2 <CLCD_voidSendString+0x6>
    1dc2:	0f 92       	push	r0
    1dc4:	cd b7       	in	r28, 0x3d	; 61
    1dc6:	de b7       	in	r29, 0x3e	; 62
    1dc8:	9b 83       	std	Y+3, r25	; 0x03
    1dca:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8cnt=0;
    1dcc:	19 82       	std	Y+1, r1	; 0x01
    1dce:	0e c0       	rjmp	.+28     	; 0x1dec <CLCD_voidSendString+0x30>
	while(Copy_pcString[Local_u8cnt]!='\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8cnt]);
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dda:	fc 01       	movw	r30, r24
    1ddc:	e2 0f       	add	r30, r18
    1dde:	f3 1f       	adc	r31, r19
    1de0:	80 81       	ld	r24, Z
    1de2:	0e 94 46 0b 	call	0x168c	; 0x168c <CLCD_voidSendData>
		Local_u8cnt++;
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	8f 5f       	subi	r24, 0xFF	; 255
    1dea:	89 83       	std	Y+1, r24	; 0x01
#endif
}
void CLCD_voidSendString(const char* Copy_pcString)//char ASCII Value Constant not allow the func to change the sent string
{
	u8 Local_u8cnt=0;
	while(Copy_pcString[Local_u8cnt]!='\0')
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	28 2f       	mov	r18, r24
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	8a 81       	ldd	r24, Y+2	; 0x02
    1df4:	9b 81       	ldd	r25, Y+3	; 0x03
    1df6:	fc 01       	movw	r30, r24
    1df8:	e2 0f       	add	r30, r18
    1dfa:	f3 1f       	adc	r31, r19
    1dfc:	80 81       	ld	r24, Z
    1dfe:	88 23       	and	r24, r24
    1e00:	39 f7       	brne	.-50     	; 0x1dd0 <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8cnt]);
		Local_u8cnt++;
	}
}
    1e02:	0f 90       	pop	r0
    1e04:	0f 90       	pop	r0
    1e06:	0f 90       	pop	r0
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	08 95       	ret

00001e0e <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1e0e:	df 93       	push	r29
    1e10:	cf 93       	push	r28
    1e12:	00 d0       	rcall	.+0      	; 0x1e14 <CLCD_voidGoToXY+0x6>
    1e14:	0f 92       	push	r0
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62
    1e1a:	8a 83       	std	Y+2, r24	; 0x02
    1e1c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
    1e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e20:	88 23       	and	r24, r24
    1e22:	51 f4       	brne	.+20     	; 0x1e38 <CLCD_voidGoToXY+0x2a>
	{
		if (Copy_u8YPos > 15) {
    1e24:	8b 81       	ldd	r24, Y+3	; 0x03
    1e26:	80 31       	cpi	r24, 0x10	; 16
    1e28:	20 f0       	brcs	.+8      	; 0x1e32 <CLCD_voidGoToXY+0x24>
			Local_u8Address = 0x40 + Copy_u8YPos;
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	80 5c       	subi	r24, 0xC0	; 192
    1e2e:	89 83       	std	Y+1, r24	; 0x01
    1e30:	09 c0       	rjmp	.+18     	; 0x1e44 <CLCD_voidGoToXY+0x36>
		} else {
			Local_u8Address = Copy_u8YPos;
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	89 83       	std	Y+1, r24	; 0x01
    1e36:	06 c0       	rjmp	.+12     	; 0x1e44 <CLCD_voidGoToXY+0x36>
		}
	}
	else if(Copy_u8XPos==1)
    1e38:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3a:	81 30       	cpi	r24, 0x01	; 1
    1e3c:	19 f4       	brne	.+6      	; 0x1e44 <CLCD_voidGoToXY+0x36>
	{
		Local_u8Address=0x40+Copy_u8YPos;
    1e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e40:	80 5c       	subi	r24, 0xC0	; 192
    1e42:	89 83       	std	Y+1, r24	; 0x01
	}
	//put command from data sheet
	CLCD_voidSendCommand(Local_u8Address+128);
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	80 58       	subi	r24, 0x80	; 128
    1e48:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
}
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	cf 91       	pop	r28
    1e54:	df 91       	pop	r29
    1e56:	08 95       	ret

00001e58 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNmber,u8 Copy_u8XPos,u8 Copy_u8Ypos)
{
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	cd b7       	in	r28, 0x3d	; 61
    1e5e:	de b7       	in	r29, 0x3e	; 62
    1e60:	27 97       	sbiw	r28, 0x07	; 7
    1e62:	0f b6       	in	r0, 0x3f	; 63
    1e64:	f8 94       	cli
    1e66:	de bf       	out	0x3e, r29	; 62
    1e68:	0f be       	out	0x3f, r0	; 63
    1e6a:	cd bf       	out	0x3d, r28	; 61
    1e6c:	9c 83       	std	Y+4, r25	; 0x04
    1e6e:	8b 83       	std	Y+3, r24	; 0x03
    1e70:	6d 83       	std	Y+5, r22	; 0x05
    1e72:	4e 83       	std	Y+6, r20	; 0x06
    1e74:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress=0;
    1e76:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8iterator;
	/*Calculate the CGRAM address whose each block is 8 bytes */
	Local_u8CGRAMAddress= Copy_u8PatternNmber*8;
    1e78:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7a:	88 2f       	mov	r24, r24
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	88 0f       	add	r24, r24
    1e80:	99 1f       	adc	r25, r25
    1e82:	88 0f       	add	r24, r24
    1e84:	99 1f       	adc	r25, r25
    1e86:	88 0f       	add	r24, r24
    1e88:	99 1f       	adc	r25, r25
    1e8a:	8a 83       	std	Y+2, r24	; 0x02

	/*Send CGRAM address command to LCD, with setting bit 6 , clear bit 7 */
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
    1e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8e:	80 5c       	subi	r24, 0xC0	; 192
    1e90:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>

	/*Write the pattern into CGRAM */
	for(Local_u8iterator=0;Local_u8iterator<8;Local_u8iterator++)
    1e94:	19 82       	std	Y+1, r1	; 0x01
    1e96:	0e c0       	rjmp	.+28     	; 0x1eb4 <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8iterator]);
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	28 2f       	mov	r18, r24
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	e2 0f       	add	r30, r18
    1ea6:	f3 1f       	adc	r31, r19
    1ea8:	80 81       	ld	r24, Z
    1eaa:	0e 94 46 0b 	call	0x168c	; 0x168c <CLCD_voidSendData>

	/*Send CGRAM address command to LCD, with setting bit 6 , clear bit 7 */
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/*Write the pattern into CGRAM */
	for(Local_u8iterator=0;Local_u8iterator<8;Local_u8iterator++)
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
    1eb0:	8f 5f       	subi	r24, 0xFF	; 255
    1eb2:	89 83       	std	Y+1, r24	; 0x01
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
    1eb6:	88 30       	cpi	r24, 0x08	; 8
    1eb8:	78 f3       	brcs	.-34     	; 0x1e98 <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8iterator]);
	}
	/* Go back to DDRAM to display the pattern */
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8Ypos);
    1eba:	8e 81       	ldd	r24, Y+6	; 0x06
    1ebc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ebe:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <CLCD_voidGoToXY>

	/* Display the pattern written  in the CGRAM */
	CLCD_voidSendData(Copy_u8PatternNmber);
    1ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec4:	0e 94 46 0b 	call	0x168c	; 0x168c <CLCD_voidSendData>

}
    1ec8:	27 96       	adiw	r28, 0x07	; 7
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	f8 94       	cli
    1ece:	de bf       	out	0x3e, r29	; 62
    1ed0:	0f be       	out	0x3f, r0	; 63
    1ed2:	cd bf       	out	0x3d, r28	; 61
    1ed4:	cf 91       	pop	r28
    1ed6:	df 91       	pop	r29
    1ed8:	08 95       	ret

00001eda <CLCD_voidWriteNumber>:

void CLCD_voidWriteNumber(u16 Copy_u16Number)
{
    1eda:	df 93       	push	r29
    1edc:	cf 93       	push	r28
    1ede:	00 d0       	rcall	.+0      	; 0x1ee0 <CLCD_voidWriteNumber+0x6>
    1ee0:	00 d0       	rcall	.+0      	; 0x1ee2 <CLCD_voidWriteNumber+0x8>
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
    1ee6:	9c 83       	std	Y+4, r25	; 0x04
    1ee8:	8b 83       	std	Y+3, r24	; 0x03

	u8 Max_Digits = Num_length(Copy_u16Number);
    1eea:	8b 81       	ldd	r24, Y+3	; 0x03
    1eec:	9c 81       	ldd	r25, Y+4	; 0x04
    1eee:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <Num_length>
    1ef2:	8a 83       	std	Y+2, r24	; 0x02
	for (s8 i = Max_Digits; i > 0; i--) {
    1ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef6:	89 83       	std	Y+1, r24	; 0x01
    1ef8:	1d c0       	rjmp	.+58     	; 0x1f34 <CLCD_voidWriteNumber+0x5a>
		CLCD_voidSendData((Copy_u16Number / Multi_N_10(i - 1)) + '0');
    1efa:	89 81       	ldd	r24, Y+1	; 0x01
    1efc:	81 50       	subi	r24, 0x01	; 1
    1efe:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <Multi_N_10>
    1f02:	9c 01       	movw	r18, r24
    1f04:	8b 81       	ldd	r24, Y+3	; 0x03
    1f06:	9c 81       	ldd	r25, Y+4	; 0x04
    1f08:	b9 01       	movw	r22, r18
    1f0a:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <__udivmodhi4>
    1f0e:	cb 01       	movw	r24, r22
    1f10:	80 5d       	subi	r24, 0xD0	; 208
    1f12:	0e 94 46 0b 	call	0x168c	; 0x168c <CLCD_voidSendData>
		Copy_u16Number = (Copy_u16Number % Multi_N_10(i - 1));
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	81 50       	subi	r24, 0x01	; 1
    1f1a:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <Multi_N_10>
    1f1e:	9c 01       	movw	r18, r24
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	9c 81       	ldd	r25, Y+4	; 0x04
    1f24:	b9 01       	movw	r22, r18
    1f26:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <__udivmodhi4>
    1f2a:	9c 83       	std	Y+4, r25	; 0x04
    1f2c:	8b 83       	std	Y+3, r24	; 0x03

void CLCD_voidWriteNumber(u16 Copy_u16Number)
{

	u8 Max_Digits = Num_length(Copy_u16Number);
	for (s8 i = Max_Digits; i > 0; i--) {
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	81 50       	subi	r24, 0x01	; 1
    1f32:	89 83       	std	Y+1, r24	; 0x01
    1f34:	89 81       	ldd	r24, Y+1	; 0x01
    1f36:	18 16       	cp	r1, r24
    1f38:	04 f3       	brlt	.-64     	; 0x1efa <CLCD_voidWriteNumber+0x20>
		CLCD_voidSendData((Copy_u16Number / Multi_N_10(i - 1)) + '0');
		Copy_u16Number = (Copy_u16Number % Multi_N_10(i - 1));
	}
}
    1f3a:	0f 90       	pop	r0
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	cf 91       	pop	r28
    1f44:	df 91       	pop	r29
    1f46:	08 95       	ret

00001f48 <Num_length>:


static u8 Num_length(u16 num) {
    1f48:	df 93       	push	r29
    1f4a:	cf 93       	push	r28
    1f4c:	00 d0       	rcall	.+0      	; 0x1f4e <Num_length+0x6>
    1f4e:	00 d0       	rcall	.+0      	; 0x1f50 <Num_length+0x8>
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
    1f54:	9b 83       	std	Y+3, r25	; 0x03
    1f56:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Cnt = 0;
    1f58:	19 82       	std	Y+1, r1	; 0x01
	if(num == 0)
    1f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f5e:	00 97       	sbiw	r24, 0x00	; 0
    1f60:	81 f4       	brne	.+32     	; 0x1f82 <Num_length+0x3a>
		return 1;
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	8c 83       	std	Y+4, r24	; 0x04
    1f66:	13 c0       	rjmp	.+38     	; 0x1f8e <Num_length+0x46>
	while (num != 0) {
		num /= 10;
    1f68:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f6c:	2a e0       	ldi	r18, 0x0A	; 10
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	b9 01       	movw	r22, r18
    1f72:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <__udivmodhi4>
    1f76:	cb 01       	movw	r24, r22
    1f78:	9b 83       	std	Y+3, r25	; 0x03
    1f7a:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8Cnt++;
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	8f 5f       	subi	r24, 0xFF	; 255
    1f80:	89 83       	std	Y+1, r24	; 0x01

static u8 Num_length(u16 num) {
	u8 Local_u8Cnt = 0;
	if(num == 0)
		return 1;
	while (num != 0) {
    1f82:	8a 81       	ldd	r24, Y+2	; 0x02
    1f84:	9b 81       	ldd	r25, Y+3	; 0x03
    1f86:	00 97       	sbiw	r24, 0x00	; 0
    1f88:	79 f7       	brne	.-34     	; 0x1f68 <Num_length+0x20>
		num /= 10;
		Local_u8Cnt++;
	}
	return Local_u8Cnt;
    1f8a:	89 81       	ldd	r24, Y+1	; 0x01
    1f8c:	8c 83       	std	Y+4, r24	; 0x04
    1f8e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	0f 90       	pop	r0
    1f98:	cf 91       	pop	r28
    1f9a:	df 91       	pop	r29
    1f9c:	08 95       	ret

00001f9e <Multi_N_10>:
static u16 Multi_N_10(u8 N) {
    1f9e:	df 93       	push	r29
    1fa0:	cf 93       	push	r28
    1fa2:	00 d0       	rcall	.+0      	; 0x1fa4 <Multi_N_10+0x6>
    1fa4:	00 d0       	rcall	.+0      	; 0x1fa6 <Multi_N_10+0x8>
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
    1faa:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8Cnt;
	u16 p = 1;
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	9a 83       	std	Y+2, r25	; 0x02
    1fb2:	89 83       	std	Y+1, r24	; 0x01
	for (Local_u8Cnt = 0; Local_u8Cnt < N; Local_u8Cnt++)
    1fb4:	1b 82       	std	Y+3, r1	; 0x03
    1fb6:	11 c0       	rjmp	.+34     	; 0x1fda <Multi_N_10+0x3c>
		p *= 10;
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
    1fba:	9a 81       	ldd	r25, Y+2	; 0x02
    1fbc:	9c 01       	movw	r18, r24
    1fbe:	22 0f       	add	r18, r18
    1fc0:	33 1f       	adc	r19, r19
    1fc2:	c9 01       	movw	r24, r18
    1fc4:	88 0f       	add	r24, r24
    1fc6:	99 1f       	adc	r25, r25
    1fc8:	88 0f       	add	r24, r24
    1fca:	99 1f       	adc	r25, r25
    1fcc:	82 0f       	add	r24, r18
    1fce:	93 1f       	adc	r25, r19
    1fd0:	9a 83       	std	Y+2, r25	; 0x02
    1fd2:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8Cnt;
}
static u16 Multi_N_10(u8 N) {
	u8 Local_u8Cnt;
	u16 p = 1;
	for (Local_u8Cnt = 0; Local_u8Cnt < N; Local_u8Cnt++)
    1fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd6:	8f 5f       	subi	r24, 0xFF	; 255
    1fd8:	8b 83       	std	Y+3, r24	; 0x03
    1fda:	9b 81       	ldd	r25, Y+3	; 0x03
    1fdc:	8c 81       	ldd	r24, Y+4	; 0x04
    1fde:	98 17       	cp	r25, r24
    1fe0:	58 f3       	brcs	.-42     	; 0x1fb8 <Multi_N_10+0x1a>
		p *= 10;
	return p;
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	cf 91       	pop	r28
    1ff0:	df 91       	pop	r29
    1ff2:	08 95       	ret

00001ff4 <DAC_voidSetAnalogValue>:
#include "../HAL/DAC_interface.h"
#include "../HAL/DAC_config.h"
#include "../HAL/DAC_private.h"

void DAC_voidSetAnalogValue(u8 Copy_u8Port,u16 Copy_u16Value_mV)
{
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	00 d0       	rcall	.+0      	; 0x1ffa <DAC_voidSetAnalogValue+0x6>
    1ffa:	0f 92       	push	r0
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
    2000:	89 83       	std	Y+1, r24	; 0x01
    2002:	7b 83       	std	Y+3, r23	; 0x03
    2004:	6a 83       	std	Y+2, r22	; 0x02
	DIO_u8SetPortValue(Copy_u8Port,(u8)((u16)((Copy_u16Value_mV*255UL)/5000UL)));
    2006:	8a 81       	ldd	r24, Y+2	; 0x02
    2008:	9b 81       	ldd	r25, Y+3	; 0x03
    200a:	cc 01       	movw	r24, r24
    200c:	a0 e0       	ldi	r26, 0x00	; 0
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	2f ef       	ldi	r18, 0xFF	; 255
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	40 e0       	ldi	r20, 0x00	; 0
    2016:	50 e0       	ldi	r21, 0x00	; 0
    2018:	bc 01       	movw	r22, r24
    201a:	cd 01       	movw	r24, r26
    201c:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <__mulsi3>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	28 e8       	ldi	r18, 0x88	; 136
    2026:	33 e1       	ldi	r19, 0x13	; 19
    2028:	40 e0       	ldi	r20, 0x00	; 0
    202a:	50 e0       	ldi	r21, 0x00	; 0
    202c:	bc 01       	movw	r22, r24
    202e:	cd 01       	movw	r24, r26
    2030:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    2034:	da 01       	movw	r26, r20
    2036:	c9 01       	movw	r24, r18
    2038:	98 2f       	mov	r25, r24
    203a:	89 81       	ldd	r24, Y+1	; 0x01
    203c:	69 2f       	mov	r22, r25
    203e:	0e 94 40 11 	call	0x2280	; 0x2280 <DIO_u8SetPortValue>
}
    2042:	0f 90       	pop	r0
    2044:	0f 90       	pop	r0
    2046:	0f 90       	pop	r0
    2048:	cf 91       	pop	r28
    204a:	df 91       	pop	r29
    204c:	08 95       	ret

0000204e <DIO_u8SetPinValue>:
#include "../MCAL/DIO_config.h"
#include "../MCAL/DIO_interface.h"
#include "../MCAL/DIO_register.h"

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
    204e:	df 93       	push	r29
    2050:	cf 93       	push	r28
    2052:	cd b7       	in	r28, 0x3d	; 61
    2054:	de b7       	in	r29, 0x3e	; 62
    2056:	28 97       	sbiw	r28, 0x08	; 8
    2058:	0f b6       	in	r0, 0x3f	; 63
    205a:	f8 94       	cli
    205c:	de bf       	out	0x3e, r29	; 62
    205e:	0f be       	out	0x3f, r0	; 63
    2060:	cd bf       	out	0x3d, r28	; 61
    2062:	8a 83       	std	Y+2, r24	; 0x02
    2064:	6b 83       	std	Y+3, r22	; 0x03
    2066:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    2068:	19 82       	std	Y+1, r1	; 0x01
	if(DIO_PIN_HIGH==Copy_u8Value)
    206a:	8c 81       	ldd	r24, Y+4	; 0x04
    206c:	81 30       	cpi	r24, 0x01	; 1
    206e:	09 f0       	breq	.+2      	; 0x2072 <DIO_u8SetPinValue+0x24>
    2070:	79 c0       	rjmp	.+242    	; 0x2164 <DIO_u8SetPinValue+0x116>
	{
		if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    2072:	8b 81       	ldd	r24, Y+3	; 0x03
    2074:	88 30       	cpi	r24, 0x08	; 8
    2076:	08 f0       	brcs	.+2      	; 0x207a <DIO_u8SetPinValue+0x2c>
    2078:	72 c0       	rjmp	.+228    	; 0x215e <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
    207a:	8a 81       	ldd	r24, Y+2	; 0x02
    207c:	28 2f       	mov	r18, r24
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	38 87       	std	Y+8, r19	; 0x08
    2082:	2f 83       	std	Y+7, r18	; 0x07
    2084:	8f 81       	ldd	r24, Y+7	; 0x07
    2086:	98 85       	ldd	r25, Y+8	; 0x08
    2088:	81 30       	cpi	r24, 0x01	; 1
    208a:	91 05       	cpc	r25, r1
    208c:	49 f1       	breq	.+82     	; 0x20e0 <DIO_u8SetPinValue+0x92>
    208e:	2f 81       	ldd	r18, Y+7	; 0x07
    2090:	38 85       	ldd	r19, Y+8	; 0x08
    2092:	22 30       	cpi	r18, 0x02	; 2
    2094:	31 05       	cpc	r19, r1
    2096:	2c f4       	brge	.+10     	; 0x20a2 <DIO_u8SetPinValue+0x54>
    2098:	8f 81       	ldd	r24, Y+7	; 0x07
    209a:	98 85       	ldd	r25, Y+8	; 0x08
    209c:	00 97       	sbiw	r24, 0x00	; 0
    209e:	61 f0       	breq	.+24     	; 0x20b8 <DIO_u8SetPinValue+0x6a>
    20a0:	5b c0       	rjmp	.+182    	; 0x2158 <DIO_u8SetPinValue+0x10a>
    20a2:	2f 81       	ldd	r18, Y+7	; 0x07
    20a4:	38 85       	ldd	r19, Y+8	; 0x08
    20a6:	22 30       	cpi	r18, 0x02	; 2
    20a8:	31 05       	cpc	r19, r1
    20aa:	71 f1       	breq	.+92     	; 0x2108 <DIO_u8SetPinValue+0xba>
    20ac:	8f 81       	ldd	r24, Y+7	; 0x07
    20ae:	98 85       	ldd	r25, Y+8	; 0x08
    20b0:	83 30       	cpi	r24, 0x03	; 3
    20b2:	91 05       	cpc	r25, r1
    20b4:	e9 f1       	breq	.+122    	; 0x2130 <DIO_u8SetPinValue+0xe2>
    20b6:	50 c0       	rjmp	.+160    	; 0x2158 <DIO_u8SetPinValue+0x10a>
			{
				case DIO_PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
    20b8:	ab e3       	ldi	r26, 0x3B	; 59
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	eb e3       	ldi	r30, 0x3B	; 59
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	48 2f       	mov	r20, r24
    20c4:	8b 81       	ldd	r24, Y+3	; 0x03
    20c6:	28 2f       	mov	r18, r24
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	02 2e       	mov	r0, r18
    20d0:	02 c0       	rjmp	.+4      	; 0x20d6 <DIO_u8SetPinValue+0x88>
    20d2:	88 0f       	add	r24, r24
    20d4:	99 1f       	adc	r25, r25
    20d6:	0a 94       	dec	r0
    20d8:	e2 f7       	brpl	.-8      	; 0x20d2 <DIO_u8SetPinValue+0x84>
    20da:	84 2b       	or	r24, r20
    20dc:	8c 93       	st	X, r24
    20de:	c6 c0       	rjmp	.+396    	; 0x226c <DIO_u8SetPinValue+0x21e>
				case DIO_PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
    20e0:	a8 e3       	ldi	r26, 0x38	; 56
    20e2:	b0 e0       	ldi	r27, 0x00	; 0
    20e4:	e8 e3       	ldi	r30, 0x38	; 56
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	80 81       	ld	r24, Z
    20ea:	48 2f       	mov	r20, r24
    20ec:	8b 81       	ldd	r24, Y+3	; 0x03
    20ee:	28 2f       	mov	r18, r24
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	02 2e       	mov	r0, r18
    20f8:	02 c0       	rjmp	.+4      	; 0x20fe <DIO_u8SetPinValue+0xb0>
    20fa:	88 0f       	add	r24, r24
    20fc:	99 1f       	adc	r25, r25
    20fe:	0a 94       	dec	r0
    2100:	e2 f7       	brpl	.-8      	; 0x20fa <DIO_u8SetPinValue+0xac>
    2102:	84 2b       	or	r24, r20
    2104:	8c 93       	st	X, r24
    2106:	b2 c0       	rjmp	.+356    	; 0x226c <DIO_u8SetPinValue+0x21e>
				case DIO_PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
    2108:	a5 e3       	ldi	r26, 0x35	; 53
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	e5 e3       	ldi	r30, 0x35	; 53
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	48 2f       	mov	r20, r24
    2114:	8b 81       	ldd	r24, Y+3	; 0x03
    2116:	28 2f       	mov	r18, r24
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	02 2e       	mov	r0, r18
    2120:	02 c0       	rjmp	.+4      	; 0x2126 <DIO_u8SetPinValue+0xd8>
    2122:	88 0f       	add	r24, r24
    2124:	99 1f       	adc	r25, r25
    2126:	0a 94       	dec	r0
    2128:	e2 f7       	brpl	.-8      	; 0x2122 <DIO_u8SetPinValue+0xd4>
    212a:	84 2b       	or	r24, r20
    212c:	8c 93       	st	X, r24
    212e:	9e c0       	rjmp	.+316    	; 0x226c <DIO_u8SetPinValue+0x21e>
				case DIO_PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
    2130:	a2 e3       	ldi	r26, 0x32	; 50
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	e2 e3       	ldi	r30, 0x32	; 50
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	48 2f       	mov	r20, r24
    213c:	8b 81       	ldd	r24, Y+3	; 0x03
    213e:	28 2f       	mov	r18, r24
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	02 2e       	mov	r0, r18
    2148:	02 c0       	rjmp	.+4      	; 0x214e <DIO_u8SetPinValue+0x100>
    214a:	88 0f       	add	r24, r24
    214c:	99 1f       	adc	r25, r25
    214e:	0a 94       	dec	r0
    2150:	e2 f7       	brpl	.-8      	; 0x214a <DIO_u8SetPinValue+0xfc>
    2152:	84 2b       	or	r24, r20
    2154:	8c 93       	st	X, r24
    2156:	8a c0       	rjmp	.+276    	; 0x226c <DIO_u8SetPinValue+0x21e>
				default: Local_u8ErrorState=1;				
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	89 83       	std	Y+1, r24	; 0x01
    215c:	87 c0       	rjmp	.+270    	; 0x226c <DIO_u8SetPinValue+0x21e>
			}
		}
		else
			Local_u8ErrorState=1;
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	89 83       	std	Y+1, r24	; 0x01
    2162:	84 c0       	rjmp	.+264    	; 0x226c <DIO_u8SetPinValue+0x21e>
	}
	else if(DIO_PIN_LOW==Copy_u8Value)
    2164:	8c 81       	ldd	r24, Y+4	; 0x04
    2166:	88 23       	and	r24, r24
    2168:	09 f0       	breq	.+2      	; 0x216c <DIO_u8SetPinValue+0x11e>
    216a:	7e c0       	rjmp	.+252    	; 0x2268 <DIO_u8SetPinValue+0x21a>
	{
		if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    216c:	8b 81       	ldd	r24, Y+3	; 0x03
    216e:	88 30       	cpi	r24, 0x08	; 8
    2170:	08 f0       	brcs	.+2      	; 0x2174 <DIO_u8SetPinValue+0x126>
    2172:	77 c0       	rjmp	.+238    	; 0x2262 <DIO_u8SetPinValue+0x214>
		{
			switch(Copy_u8Port)
    2174:	8a 81       	ldd	r24, Y+2	; 0x02
    2176:	28 2f       	mov	r18, r24
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	3e 83       	std	Y+6, r19	; 0x06
    217c:	2d 83       	std	Y+5, r18	; 0x05
    217e:	8d 81       	ldd	r24, Y+5	; 0x05
    2180:	9e 81       	ldd	r25, Y+6	; 0x06
    2182:	81 30       	cpi	r24, 0x01	; 1
    2184:	91 05       	cpc	r25, r1
    2186:	59 f1       	breq	.+86     	; 0x21de <DIO_u8SetPinValue+0x190>
    2188:	2d 81       	ldd	r18, Y+5	; 0x05
    218a:	3e 81       	ldd	r19, Y+6	; 0x06
    218c:	22 30       	cpi	r18, 0x02	; 2
    218e:	31 05       	cpc	r19, r1
    2190:	2c f4       	brge	.+10     	; 0x219c <DIO_u8SetPinValue+0x14e>
    2192:	8d 81       	ldd	r24, Y+5	; 0x05
    2194:	9e 81       	ldd	r25, Y+6	; 0x06
    2196:	00 97       	sbiw	r24, 0x00	; 0
    2198:	69 f0       	breq	.+26     	; 0x21b4 <DIO_u8SetPinValue+0x166>
    219a:	60 c0       	rjmp	.+192    	; 0x225c <DIO_u8SetPinValue+0x20e>
    219c:	2d 81       	ldd	r18, Y+5	; 0x05
    219e:	3e 81       	ldd	r19, Y+6	; 0x06
    21a0:	22 30       	cpi	r18, 0x02	; 2
    21a2:	31 05       	cpc	r19, r1
    21a4:	89 f1       	breq	.+98     	; 0x2208 <DIO_u8SetPinValue+0x1ba>
    21a6:	8d 81       	ldd	r24, Y+5	; 0x05
    21a8:	9e 81       	ldd	r25, Y+6	; 0x06
    21aa:	83 30       	cpi	r24, 0x03	; 3
    21ac:	91 05       	cpc	r25, r1
    21ae:	09 f4       	brne	.+2      	; 0x21b2 <DIO_u8SetPinValue+0x164>
    21b0:	40 c0       	rjmp	.+128    	; 0x2232 <DIO_u8SetPinValue+0x1e4>
    21b2:	54 c0       	rjmp	.+168    	; 0x225c <DIO_u8SetPinValue+0x20e>
			{
				case DIO_PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
    21b4:	ab e3       	ldi	r26, 0x3B	; 59
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	eb e3       	ldi	r30, 0x3B	; 59
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	48 2f       	mov	r20, r24
    21c0:	8b 81       	ldd	r24, Y+3	; 0x03
    21c2:	28 2f       	mov	r18, r24
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	02 2e       	mov	r0, r18
    21cc:	02 c0       	rjmp	.+4      	; 0x21d2 <DIO_u8SetPinValue+0x184>
    21ce:	88 0f       	add	r24, r24
    21d0:	99 1f       	adc	r25, r25
    21d2:	0a 94       	dec	r0
    21d4:	e2 f7       	brpl	.-8      	; 0x21ce <DIO_u8SetPinValue+0x180>
    21d6:	80 95       	com	r24
    21d8:	84 23       	and	r24, r20
    21da:	8c 93       	st	X, r24
    21dc:	47 c0       	rjmp	.+142    	; 0x226c <DIO_u8SetPinValue+0x21e>
				case DIO_PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
    21de:	a8 e3       	ldi	r26, 0x38	; 56
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	e8 e3       	ldi	r30, 0x38	; 56
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	80 81       	ld	r24, Z
    21e8:	48 2f       	mov	r20, r24
    21ea:	8b 81       	ldd	r24, Y+3	; 0x03
    21ec:	28 2f       	mov	r18, r24
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	02 2e       	mov	r0, r18
    21f6:	02 c0       	rjmp	.+4      	; 0x21fc <DIO_u8SetPinValue+0x1ae>
    21f8:	88 0f       	add	r24, r24
    21fa:	99 1f       	adc	r25, r25
    21fc:	0a 94       	dec	r0
    21fe:	e2 f7       	brpl	.-8      	; 0x21f8 <DIO_u8SetPinValue+0x1aa>
    2200:	80 95       	com	r24
    2202:	84 23       	and	r24, r20
    2204:	8c 93       	st	X, r24
    2206:	32 c0       	rjmp	.+100    	; 0x226c <DIO_u8SetPinValue+0x21e>
				case DIO_PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
    2208:	a5 e3       	ldi	r26, 0x35	; 53
    220a:	b0 e0       	ldi	r27, 0x00	; 0
    220c:	e5 e3       	ldi	r30, 0x35	; 53
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	48 2f       	mov	r20, r24
    2214:	8b 81       	ldd	r24, Y+3	; 0x03
    2216:	28 2f       	mov	r18, r24
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	02 2e       	mov	r0, r18
    2220:	02 c0       	rjmp	.+4      	; 0x2226 <DIO_u8SetPinValue+0x1d8>
    2222:	88 0f       	add	r24, r24
    2224:	99 1f       	adc	r25, r25
    2226:	0a 94       	dec	r0
    2228:	e2 f7       	brpl	.-8      	; 0x2222 <DIO_u8SetPinValue+0x1d4>
    222a:	80 95       	com	r24
    222c:	84 23       	and	r24, r20
    222e:	8c 93       	st	X, r24
    2230:	1d c0       	rjmp	.+58     	; 0x226c <DIO_u8SetPinValue+0x21e>
				case DIO_PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
    2232:	a2 e3       	ldi	r26, 0x32	; 50
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	e2 e3       	ldi	r30, 0x32	; 50
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	48 2f       	mov	r20, r24
    223e:	8b 81       	ldd	r24, Y+3	; 0x03
    2240:	28 2f       	mov	r18, r24
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	02 2e       	mov	r0, r18
    224a:	02 c0       	rjmp	.+4      	; 0x2250 <DIO_u8SetPinValue+0x202>
    224c:	88 0f       	add	r24, r24
    224e:	99 1f       	adc	r25, r25
    2250:	0a 94       	dec	r0
    2252:	e2 f7       	brpl	.-8      	; 0x224c <DIO_u8SetPinValue+0x1fe>
    2254:	80 95       	com	r24
    2256:	84 23       	and	r24, r20
    2258:	8c 93       	st	X, r24
    225a:	08 c0       	rjmp	.+16     	; 0x226c <DIO_u8SetPinValue+0x21e>
				default: Local_u8ErrorState=1;	
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	89 83       	std	Y+1, r24	; 0x01
    2260:	05 c0       	rjmp	.+10     	; 0x226c <DIO_u8SetPinValue+0x21e>
			}
		}
		else
			Local_u8ErrorState=1;	
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	89 83       	std	Y+1, r24	; 0x01
    2266:	02 c0       	rjmp	.+4      	; 0x226c <DIO_u8SetPinValue+0x21e>
	}
	else
		Local_u8ErrorState=1;	
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    226c:	89 81       	ldd	r24, Y+1	; 0x01
}
    226e:	28 96       	adiw	r28, 0x08	; 8
    2270:	0f b6       	in	r0, 0x3f	; 63
    2272:	f8 94       	cli
    2274:	de bf       	out	0x3e, r29	; 62
    2276:	0f be       	out	0x3f, r0	; 63
    2278:	cd bf       	out	0x3d, r28	; 61
    227a:	cf 91       	pop	r28
    227c:	df 91       	pop	r29
    227e:	08 95       	ret

00002280 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    2280:	df 93       	push	r29
    2282:	cf 93       	push	r28
    2284:	00 d0       	rcall	.+0      	; 0x2286 <DIO_u8SetPortValue+0x6>
    2286:	00 d0       	rcall	.+0      	; 0x2288 <DIO_u8SetPortValue+0x8>
    2288:	0f 92       	push	r0
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
    228e:	8a 83       	std	Y+2, r24	; 0x02
    2290:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    2292:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port<=7)
    2294:	8a 81       	ldd	r24, Y+2	; 0x02
    2296:	88 30       	cpi	r24, 0x08	; 8
    2298:	b0 f5       	brcc	.+108    	; 0x2306 <DIO_u8SetPortValue+0x86>
	{
		switch(Copy_u8Port)
    229a:	8a 81       	ldd	r24, Y+2	; 0x02
    229c:	28 2f       	mov	r18, r24
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	3d 83       	std	Y+5, r19	; 0x05
    22a2:	2c 83       	std	Y+4, r18	; 0x04
    22a4:	8c 81       	ldd	r24, Y+4	; 0x04
    22a6:	9d 81       	ldd	r25, Y+5	; 0x05
    22a8:	81 30       	cpi	r24, 0x01	; 1
    22aa:	91 05       	cpc	r25, r1
    22ac:	d1 f0       	breq	.+52     	; 0x22e2 <DIO_u8SetPortValue+0x62>
    22ae:	2c 81       	ldd	r18, Y+4	; 0x04
    22b0:	3d 81       	ldd	r19, Y+5	; 0x05
    22b2:	22 30       	cpi	r18, 0x02	; 2
    22b4:	31 05       	cpc	r19, r1
    22b6:	2c f4       	brge	.+10     	; 0x22c2 <DIO_u8SetPortValue+0x42>
    22b8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ba:	9d 81       	ldd	r25, Y+5	; 0x05
    22bc:	00 97       	sbiw	r24, 0x00	; 0
    22be:	61 f0       	breq	.+24     	; 0x22d8 <DIO_u8SetPortValue+0x58>
    22c0:	1f c0       	rjmp	.+62     	; 0x2300 <DIO_u8SetPortValue+0x80>
    22c2:	2c 81       	ldd	r18, Y+4	; 0x04
    22c4:	3d 81       	ldd	r19, Y+5	; 0x05
    22c6:	22 30       	cpi	r18, 0x02	; 2
    22c8:	31 05       	cpc	r19, r1
    22ca:	81 f0       	breq	.+32     	; 0x22ec <DIO_u8SetPortValue+0x6c>
    22cc:	8c 81       	ldd	r24, Y+4	; 0x04
    22ce:	9d 81       	ldd	r25, Y+5	; 0x05
    22d0:	83 30       	cpi	r24, 0x03	; 3
    22d2:	91 05       	cpc	r25, r1
    22d4:	81 f0       	breq	.+32     	; 0x22f6 <DIO_u8SetPortValue+0x76>
    22d6:	14 c0       	rjmp	.+40     	; 0x2300 <DIO_u8SetPortValue+0x80>
		{
			case DIO_PORTA:PORTA=Copy_u8Value;break;
    22d8:	eb e3       	ldi	r30, 0x3B	; 59
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	8b 81       	ldd	r24, Y+3	; 0x03
    22de:	80 83       	st	Z, r24
    22e0:	14 c0       	rjmp	.+40     	; 0x230a <DIO_u8SetPortValue+0x8a>
			case DIO_PORTB:PORTB=Copy_u8Value;break;
    22e2:	e8 e3       	ldi	r30, 0x38	; 56
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	8b 81       	ldd	r24, Y+3	; 0x03
    22e8:	80 83       	st	Z, r24
    22ea:	0f c0       	rjmp	.+30     	; 0x230a <DIO_u8SetPortValue+0x8a>
			case DIO_PORTC:PORTC=Copy_u8Value;break;
    22ec:	e5 e3       	ldi	r30, 0x35	; 53
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	8b 81       	ldd	r24, Y+3	; 0x03
    22f2:	80 83       	st	Z, r24
    22f4:	0a c0       	rjmp	.+20     	; 0x230a <DIO_u8SetPortValue+0x8a>
			case DIO_PORTD:PORTD=Copy_u8Value;break;
    22f6:	e2 e3       	ldi	r30, 0x32	; 50
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	8b 81       	ldd	r24, Y+3	; 0x03
    22fc:	80 83       	st	Z, r24
    22fe:	05 c0       	rjmp	.+10     	; 0x230a <DIO_u8SetPortValue+0x8a>
			default: Local_u8ErrorState=1;
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	89 83       	std	Y+1, r24	; 0x01
    2304:	02 c0       	rjmp	.+4      	; 0x230a <DIO_u8SetPortValue+0x8a>
		}
	}
	else
		Local_u8ErrorState = NOTOK;
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    230a:	89 81       	ldd	r24, Y+1	; 0x01
}
    230c:	0f 90       	pop	r0
    230e:	0f 90       	pop	r0
    2310:	0f 90       	pop	r0
    2312:	0f 90       	pop	r0
    2314:	0f 90       	pop	r0
    2316:	cf 91       	pop	r28
    2318:	df 91       	pop	r29
    231a:	08 95       	ret

0000231c <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 *Copy_pu8Value)
{
    231c:	df 93       	push	r29
    231e:	cf 93       	push	r28
    2320:	cd b7       	in	r28, 0x3d	; 61
    2322:	de b7       	in	r29, 0x3e	; 62
    2324:	27 97       	sbiw	r28, 0x07	; 7
    2326:	0f b6       	in	r0, 0x3f	; 63
    2328:	f8 94       	cli
    232a:	de bf       	out	0x3e, r29	; 62
    232c:	0f be       	out	0x3f, r0	; 63
    232e:	cd bf       	out	0x3d, r28	; 61
    2330:	8a 83       	std	Y+2, r24	; 0x02
    2332:	6b 83       	std	Y+3, r22	; 0x03
    2334:	5d 83       	std	Y+5, r21	; 0x05
    2336:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    2338:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value!=NULL)
    233a:	8c 81       	ldd	r24, Y+4	; 0x04
    233c:	9d 81       	ldd	r25, Y+5	; 0x05
    233e:	00 97       	sbiw	r24, 0x00	; 0
    2340:	09 f4       	brne	.+2      	; 0x2344 <DIO_u8GetPinValue+0x28>
    2342:	7b c0       	rjmp	.+246    	; 0x243a <DIO_u8GetPinValue+0x11e>
	{


		if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    2344:	8b 81       	ldd	r24, Y+3	; 0x03
    2346:	88 30       	cpi	r24, 0x08	; 8
    2348:	08 f0       	brcs	.+2      	; 0x234c <DIO_u8GetPinValue+0x30>
    234a:	74 c0       	rjmp	.+232    	; 0x2434 <DIO_u8GetPinValue+0x118>
		{
			switch(Copy_u8Port)
    234c:	8a 81       	ldd	r24, Y+2	; 0x02
    234e:	28 2f       	mov	r18, r24
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	3f 83       	std	Y+7, r19	; 0x07
    2354:	2e 83       	std	Y+6, r18	; 0x06
    2356:	4e 81       	ldd	r20, Y+6	; 0x06
    2358:	5f 81       	ldd	r21, Y+7	; 0x07
    235a:	41 30       	cpi	r20, 0x01	; 1
    235c:	51 05       	cpc	r21, r1
    235e:	59 f1       	breq	.+86     	; 0x23b6 <DIO_u8GetPinValue+0x9a>
    2360:	8e 81       	ldd	r24, Y+6	; 0x06
    2362:	9f 81       	ldd	r25, Y+7	; 0x07
    2364:	82 30       	cpi	r24, 0x02	; 2
    2366:	91 05       	cpc	r25, r1
    2368:	34 f4       	brge	.+12     	; 0x2376 <DIO_u8GetPinValue+0x5a>
    236a:	2e 81       	ldd	r18, Y+6	; 0x06
    236c:	3f 81       	ldd	r19, Y+7	; 0x07
    236e:	21 15       	cp	r18, r1
    2370:	31 05       	cpc	r19, r1
    2372:	69 f0       	breq	.+26     	; 0x238e <DIO_u8GetPinValue+0x72>
    2374:	5c c0       	rjmp	.+184    	; 0x242e <DIO_u8GetPinValue+0x112>
    2376:	4e 81       	ldd	r20, Y+6	; 0x06
    2378:	5f 81       	ldd	r21, Y+7	; 0x07
    237a:	42 30       	cpi	r20, 0x02	; 2
    237c:	51 05       	cpc	r21, r1
    237e:	79 f1       	breq	.+94     	; 0x23de <DIO_u8GetPinValue+0xc2>
    2380:	8e 81       	ldd	r24, Y+6	; 0x06
    2382:	9f 81       	ldd	r25, Y+7	; 0x07
    2384:	83 30       	cpi	r24, 0x03	; 3
    2386:	91 05       	cpc	r25, r1
    2388:	09 f4       	brne	.+2      	; 0x238c <DIO_u8GetPinValue+0x70>
    238a:	3d c0       	rjmp	.+122    	; 0x2406 <DIO_u8GetPinValue+0xea>
    238c:	50 c0       	rjmp	.+160    	; 0x242e <DIO_u8GetPinValue+0x112>
			{
				case DIO_PORTA:*Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin);break;
    238e:	e9 e3       	ldi	r30, 0x39	; 57
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	80 81       	ld	r24, Z
    2394:	28 2f       	mov	r18, r24
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	8b 81       	ldd	r24, Y+3	; 0x03
    239a:	88 2f       	mov	r24, r24
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	a9 01       	movw	r20, r18
    23a0:	02 c0       	rjmp	.+4      	; 0x23a6 <DIO_u8GetPinValue+0x8a>
    23a2:	55 95       	asr	r21
    23a4:	47 95       	ror	r20
    23a6:	8a 95       	dec	r24
    23a8:	e2 f7       	brpl	.-8      	; 0x23a2 <DIO_u8GetPinValue+0x86>
    23aa:	ca 01       	movw	r24, r20
    23ac:	81 70       	andi	r24, 0x01	; 1
    23ae:	ec 81       	ldd	r30, Y+4	; 0x04
    23b0:	fd 81       	ldd	r31, Y+5	; 0x05
    23b2:	80 83       	st	Z, r24
    23b4:	44 c0       	rjmp	.+136    	; 0x243e <DIO_u8GetPinValue+0x122>
				case DIO_PORTB:*Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin);break;
    23b6:	e6 e3       	ldi	r30, 0x36	; 54
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	80 81       	ld	r24, Z
    23bc:	28 2f       	mov	r18, r24
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	8b 81       	ldd	r24, Y+3	; 0x03
    23c2:	88 2f       	mov	r24, r24
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	a9 01       	movw	r20, r18
    23c8:	02 c0       	rjmp	.+4      	; 0x23ce <DIO_u8GetPinValue+0xb2>
    23ca:	55 95       	asr	r21
    23cc:	47 95       	ror	r20
    23ce:	8a 95       	dec	r24
    23d0:	e2 f7       	brpl	.-8      	; 0x23ca <DIO_u8GetPinValue+0xae>
    23d2:	ca 01       	movw	r24, r20
    23d4:	81 70       	andi	r24, 0x01	; 1
    23d6:	ec 81       	ldd	r30, Y+4	; 0x04
    23d8:	fd 81       	ldd	r31, Y+5	; 0x05
    23da:	80 83       	st	Z, r24
    23dc:	30 c0       	rjmp	.+96     	; 0x243e <DIO_u8GetPinValue+0x122>
				case DIO_PORTC:*Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin);break;
    23de:	e3 e3       	ldi	r30, 0x33	; 51
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	28 2f       	mov	r18, r24
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ea:	88 2f       	mov	r24, r24
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	a9 01       	movw	r20, r18
    23f0:	02 c0       	rjmp	.+4      	; 0x23f6 <DIO_u8GetPinValue+0xda>
    23f2:	55 95       	asr	r21
    23f4:	47 95       	ror	r20
    23f6:	8a 95       	dec	r24
    23f8:	e2 f7       	brpl	.-8      	; 0x23f2 <DIO_u8GetPinValue+0xd6>
    23fa:	ca 01       	movw	r24, r20
    23fc:	81 70       	andi	r24, 0x01	; 1
    23fe:	ec 81       	ldd	r30, Y+4	; 0x04
    2400:	fd 81       	ldd	r31, Y+5	; 0x05
    2402:	80 83       	st	Z, r24
    2404:	1c c0       	rjmp	.+56     	; 0x243e <DIO_u8GetPinValue+0x122>
				case DIO_PORTD:*Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin);break;
    2406:	e0 e3       	ldi	r30, 0x30	; 48
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	80 81       	ld	r24, Z
    240c:	28 2f       	mov	r18, r24
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	8b 81       	ldd	r24, Y+3	; 0x03
    2412:	88 2f       	mov	r24, r24
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	a9 01       	movw	r20, r18
    2418:	02 c0       	rjmp	.+4      	; 0x241e <DIO_u8GetPinValue+0x102>
    241a:	55 95       	asr	r21
    241c:	47 95       	ror	r20
    241e:	8a 95       	dec	r24
    2420:	e2 f7       	brpl	.-8      	; 0x241a <DIO_u8GetPinValue+0xfe>
    2422:	ca 01       	movw	r24, r20
    2424:	81 70       	andi	r24, 0x01	; 1
    2426:	ec 81       	ldd	r30, Y+4	; 0x04
    2428:	fd 81       	ldd	r31, Y+5	; 0x05
    242a:	80 83       	st	Z, r24
    242c:	08 c0       	rjmp	.+16     	; 0x243e <DIO_u8GetPinValue+0x122>
				default: Local_u8ErrorState=1;
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	89 83       	std	Y+1, r24	; 0x01
    2432:	05 c0       	rjmp	.+10     	; 0x243e <DIO_u8GetPinValue+0x122>
			}
		}
		else
			Local_u8ErrorState=1;
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	89 83       	std	Y+1, r24	; 0x01
    2438:	02 c0       	rjmp	.+4      	; 0x243e <DIO_u8GetPinValue+0x122>
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    243a:	82 e0       	ldi	r24, 0x02	; 2
    243c:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    243e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2440:	27 96       	adiw	r28, 0x07	; 7
    2442:	0f b6       	in	r0, 0x3f	; 63
    2444:	f8 94       	cli
    2446:	de bf       	out	0x3e, r29	; 62
    2448:	0f be       	out	0x3f, r0	; 63
    244a:	cd bf       	out	0x3d, r28	; 61
    244c:	cf 91       	pop	r28
    244e:	df 91       	pop	r29
    2450:	08 95       	ret

00002452 <DIO_u8TogglePinValue>:
u8 DIO_u8TogglePinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
{
    2452:	df 93       	push	r29
    2454:	cf 93       	push	r28
    2456:	00 d0       	rcall	.+0      	; 0x2458 <DIO_u8TogglePinValue+0x6>
    2458:	00 d0       	rcall	.+0      	; 0x245a <DIO_u8TogglePinValue+0x8>
    245a:	0f 92       	push	r0
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62
    2460:	8a 83       	std	Y+2, r24	; 0x02
    2462:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    2464:	19 82       	std	Y+1, r1	; 0x01
	if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    2466:	8b 81       	ldd	r24, Y+3	; 0x03
    2468:	88 30       	cpi	r24, 0x08	; 8
    246a:	08 f0       	brcs	.+2      	; 0x246e <DIO_u8TogglePinValue+0x1c>
    246c:	72 c0       	rjmp	.+228    	; 0x2552 <DIO_u8TogglePinValue+0x100>
	{
		switch(Copy_u8Port)
    246e:	8a 81       	ldd	r24, Y+2	; 0x02
    2470:	28 2f       	mov	r18, r24
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	3d 83       	std	Y+5, r19	; 0x05
    2476:	2c 83       	std	Y+4, r18	; 0x04
    2478:	8c 81       	ldd	r24, Y+4	; 0x04
    247a:	9d 81       	ldd	r25, Y+5	; 0x05
    247c:	81 30       	cpi	r24, 0x01	; 1
    247e:	91 05       	cpc	r25, r1
    2480:	49 f1       	breq	.+82     	; 0x24d4 <DIO_u8TogglePinValue+0x82>
    2482:	2c 81       	ldd	r18, Y+4	; 0x04
    2484:	3d 81       	ldd	r19, Y+5	; 0x05
    2486:	22 30       	cpi	r18, 0x02	; 2
    2488:	31 05       	cpc	r19, r1
    248a:	2c f4       	brge	.+10     	; 0x2496 <DIO_u8TogglePinValue+0x44>
    248c:	8c 81       	ldd	r24, Y+4	; 0x04
    248e:	9d 81       	ldd	r25, Y+5	; 0x05
    2490:	00 97       	sbiw	r24, 0x00	; 0
    2492:	61 f0       	breq	.+24     	; 0x24ac <DIO_u8TogglePinValue+0x5a>
    2494:	5b c0       	rjmp	.+182    	; 0x254c <DIO_u8TogglePinValue+0xfa>
    2496:	2c 81       	ldd	r18, Y+4	; 0x04
    2498:	3d 81       	ldd	r19, Y+5	; 0x05
    249a:	22 30       	cpi	r18, 0x02	; 2
    249c:	31 05       	cpc	r19, r1
    249e:	71 f1       	breq	.+92     	; 0x24fc <DIO_u8TogglePinValue+0xaa>
    24a0:	8c 81       	ldd	r24, Y+4	; 0x04
    24a2:	9d 81       	ldd	r25, Y+5	; 0x05
    24a4:	83 30       	cpi	r24, 0x03	; 3
    24a6:	91 05       	cpc	r25, r1
    24a8:	e9 f1       	breq	.+122    	; 0x2524 <DIO_u8TogglePinValue+0xd2>
    24aa:	50 c0       	rjmp	.+160    	; 0x254c <DIO_u8TogglePinValue+0xfa>
		{
			case DIO_PORTA:TOG_BIT(PORTA,Copy_u8Pin);break;
    24ac:	ab e3       	ldi	r26, 0x3B	; 59
    24ae:	b0 e0       	ldi	r27, 0x00	; 0
    24b0:	eb e3       	ldi	r30, 0x3B	; 59
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	80 81       	ld	r24, Z
    24b6:	48 2f       	mov	r20, r24
    24b8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ba:	28 2f       	mov	r18, r24
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	02 2e       	mov	r0, r18
    24c4:	02 c0       	rjmp	.+4      	; 0x24ca <DIO_u8TogglePinValue+0x78>
    24c6:	88 0f       	add	r24, r24
    24c8:	99 1f       	adc	r25, r25
    24ca:	0a 94       	dec	r0
    24cc:	e2 f7       	brpl	.-8      	; 0x24c6 <DIO_u8TogglePinValue+0x74>
    24ce:	84 27       	eor	r24, r20
    24d0:	8c 93       	st	X, r24
    24d2:	41 c0       	rjmp	.+130    	; 0x2556 <DIO_u8TogglePinValue+0x104>
			case DIO_PORTB:TOG_BIT(PORTB,Copy_u8Pin);break;
    24d4:	a8 e3       	ldi	r26, 0x38	; 56
    24d6:	b0 e0       	ldi	r27, 0x00	; 0
    24d8:	e8 e3       	ldi	r30, 0x38	; 56
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	80 81       	ld	r24, Z
    24de:	48 2f       	mov	r20, r24
    24e0:	8b 81       	ldd	r24, Y+3	; 0x03
    24e2:	28 2f       	mov	r18, r24
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	02 2e       	mov	r0, r18
    24ec:	02 c0       	rjmp	.+4      	; 0x24f2 <DIO_u8TogglePinValue+0xa0>
    24ee:	88 0f       	add	r24, r24
    24f0:	99 1f       	adc	r25, r25
    24f2:	0a 94       	dec	r0
    24f4:	e2 f7       	brpl	.-8      	; 0x24ee <DIO_u8TogglePinValue+0x9c>
    24f6:	84 27       	eor	r24, r20
    24f8:	8c 93       	st	X, r24
    24fa:	2d c0       	rjmp	.+90     	; 0x2556 <DIO_u8TogglePinValue+0x104>
			case DIO_PORTC:TOG_BIT(PORTC,Copy_u8Pin);break;
    24fc:	a5 e3       	ldi	r26, 0x35	; 53
    24fe:	b0 e0       	ldi	r27, 0x00	; 0
    2500:	e5 e3       	ldi	r30, 0x35	; 53
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	80 81       	ld	r24, Z
    2506:	48 2f       	mov	r20, r24
    2508:	8b 81       	ldd	r24, Y+3	; 0x03
    250a:	28 2f       	mov	r18, r24
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	02 2e       	mov	r0, r18
    2514:	02 c0       	rjmp	.+4      	; 0x251a <DIO_u8TogglePinValue+0xc8>
    2516:	88 0f       	add	r24, r24
    2518:	99 1f       	adc	r25, r25
    251a:	0a 94       	dec	r0
    251c:	e2 f7       	brpl	.-8      	; 0x2516 <DIO_u8TogglePinValue+0xc4>
    251e:	84 27       	eor	r24, r20
    2520:	8c 93       	st	X, r24
    2522:	19 c0       	rjmp	.+50     	; 0x2556 <DIO_u8TogglePinValue+0x104>
			case DIO_PORTD:TOG_BIT(PORTD,Copy_u8Pin);break;
    2524:	a2 e3       	ldi	r26, 0x32	; 50
    2526:	b0 e0       	ldi	r27, 0x00	; 0
    2528:	e2 e3       	ldi	r30, 0x32	; 50
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	80 81       	ld	r24, Z
    252e:	48 2f       	mov	r20, r24
    2530:	8b 81       	ldd	r24, Y+3	; 0x03
    2532:	28 2f       	mov	r18, r24
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	02 2e       	mov	r0, r18
    253c:	02 c0       	rjmp	.+4      	; 0x2542 <DIO_u8TogglePinValue+0xf0>
    253e:	88 0f       	add	r24, r24
    2540:	99 1f       	adc	r25, r25
    2542:	0a 94       	dec	r0
    2544:	e2 f7       	brpl	.-8      	; 0x253e <DIO_u8TogglePinValue+0xec>
    2546:	84 27       	eor	r24, r20
    2548:	8c 93       	st	X, r24
    254a:	05 c0       	rjmp	.+10     	; 0x2556 <DIO_u8TogglePinValue+0x104>
			default: Local_u8ErrorState=1;
    254c:	81 e0       	ldi	r24, 0x01	; 1
    254e:	89 83       	std	Y+1, r24	; 0x01
    2550:	02 c0       	rjmp	.+4      	; 0x2556 <DIO_u8TogglePinValue+0x104>
		}
	}
	else
		Local_u8ErrorState=1;
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2556:	89 81       	ldd	r24, Y+1	; 0x01
}
    2558:	0f 90       	pop	r0
    255a:	0f 90       	pop	r0
    255c:	0f 90       	pop	r0
    255e:	0f 90       	pop	r0
    2560:	0f 90       	pop	r0
    2562:	cf 91       	pop	r28
    2564:	df 91       	pop	r29
    2566:	08 95       	ret

00002568 <DIO_u8SetLowNibbleValue>:

u8 DIO_u8SetLowNibbleValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    2568:	df 93       	push	r29
    256a:	cf 93       	push	r28
    256c:	00 d0       	rcall	.+0      	; 0x256e <DIO_u8SetLowNibbleValue+0x6>
    256e:	00 d0       	rcall	.+0      	; 0x2570 <DIO_u8SetLowNibbleValue+0x8>
    2570:	0f 92       	push	r0
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
    2576:	8a 83       	std	Y+2, r24	; 0x02
    2578:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    257a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port<=DIO_PORTD){
    257c:	8a 81       	ldd	r24, Y+2	; 0x02
    257e:	84 30       	cpi	r24, 0x04	; 4
    2580:	08 f0       	brcs	.+2      	; 0x2584 <DIO_u8SetLowNibbleValue+0x1c>
    2582:	62 c0       	rjmp	.+196    	; 0x2648 <DIO_u8SetLowNibbleValue+0xe0>
		switch(Copy_u8Port)
    2584:	8a 81       	ldd	r24, Y+2	; 0x02
    2586:	28 2f       	mov	r18, r24
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	3d 83       	std	Y+5, r19	; 0x05
    258c:	2c 83       	std	Y+4, r18	; 0x04
    258e:	8c 81       	ldd	r24, Y+4	; 0x04
    2590:	9d 81       	ldd	r25, Y+5	; 0x05
    2592:	81 30       	cpi	r24, 0x01	; 1
    2594:	91 05       	cpc	r25, r1
    2596:	29 f1       	breq	.+74     	; 0x25e2 <DIO_u8SetLowNibbleValue+0x7a>
    2598:	2c 81       	ldd	r18, Y+4	; 0x04
    259a:	3d 81       	ldd	r19, Y+5	; 0x05
    259c:	22 30       	cpi	r18, 0x02	; 2
    259e:	31 05       	cpc	r19, r1
    25a0:	2c f4       	brge	.+10     	; 0x25ac <DIO_u8SetLowNibbleValue+0x44>
    25a2:	8c 81       	ldd	r24, Y+4	; 0x04
    25a4:	9d 81       	ldd	r25, Y+5	; 0x05
    25a6:	00 97       	sbiw	r24, 0x00	; 0
    25a8:	61 f0       	breq	.+24     	; 0x25c2 <DIO_u8SetLowNibbleValue+0x5a>
    25aa:	4b c0       	rjmp	.+150    	; 0x2642 <DIO_u8SetLowNibbleValue+0xda>
    25ac:	2c 81       	ldd	r18, Y+4	; 0x04
    25ae:	3d 81       	ldd	r19, Y+5	; 0x05
    25b0:	22 30       	cpi	r18, 0x02	; 2
    25b2:	31 05       	cpc	r19, r1
    25b4:	31 f1       	breq	.+76     	; 0x2602 <DIO_u8SetLowNibbleValue+0x9a>
    25b6:	8c 81       	ldd	r24, Y+4	; 0x04
    25b8:	9d 81       	ldd	r25, Y+5	; 0x05
    25ba:	83 30       	cpi	r24, 0x03	; 3
    25bc:	91 05       	cpc	r25, r1
    25be:	89 f1       	breq	.+98     	; 0x2622 <DIO_u8SetLowNibbleValue+0xba>
    25c0:	40 c0       	rjmp	.+128    	; 0x2642 <DIO_u8SetLowNibbleValue+0xda>
		{
			case DIO_PORTA:PORTA&=DIO_LOWNIBBLE_MASK;PORTA|=Copy_u8Value;break;
    25c2:	ab e3       	ldi	r26, 0x3B	; 59
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	eb e3       	ldi	r30, 0x3B	; 59
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	80 81       	ld	r24, Z
    25cc:	80 7f       	andi	r24, 0xF0	; 240
    25ce:	8c 93       	st	X, r24
    25d0:	ab e3       	ldi	r26, 0x3B	; 59
    25d2:	b0 e0       	ldi	r27, 0x00	; 0
    25d4:	eb e3       	ldi	r30, 0x3B	; 59
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	90 81       	ld	r25, Z
    25da:	8b 81       	ldd	r24, Y+3	; 0x03
    25dc:	89 2b       	or	r24, r25
    25de:	8c 93       	st	X, r24
    25e0:	35 c0       	rjmp	.+106    	; 0x264c <DIO_u8SetLowNibbleValue+0xe4>
			case DIO_PORTB:PORTB&=DIO_LOWNIBBLE_MASK;PORTB|=Copy_u8Value;break;
    25e2:	a8 e3       	ldi	r26, 0x38	; 56
    25e4:	b0 e0       	ldi	r27, 0x00	; 0
    25e6:	e8 e3       	ldi	r30, 0x38	; 56
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	80 81       	ld	r24, Z
    25ec:	80 7f       	andi	r24, 0xF0	; 240
    25ee:	8c 93       	st	X, r24
    25f0:	a8 e3       	ldi	r26, 0x38	; 56
    25f2:	b0 e0       	ldi	r27, 0x00	; 0
    25f4:	e8 e3       	ldi	r30, 0x38	; 56
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	90 81       	ld	r25, Z
    25fa:	8b 81       	ldd	r24, Y+3	; 0x03
    25fc:	89 2b       	or	r24, r25
    25fe:	8c 93       	st	X, r24
    2600:	25 c0       	rjmp	.+74     	; 0x264c <DIO_u8SetLowNibbleValue+0xe4>
			case DIO_PORTC:PORTC&=DIO_LOWNIBBLE_MASK;PORTC|=Copy_u8Value;break;
    2602:	a5 e3       	ldi	r26, 0x35	; 53
    2604:	b0 e0       	ldi	r27, 0x00	; 0
    2606:	e5 e3       	ldi	r30, 0x35	; 53
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	80 81       	ld	r24, Z
    260c:	80 7f       	andi	r24, 0xF0	; 240
    260e:	8c 93       	st	X, r24
    2610:	a5 e3       	ldi	r26, 0x35	; 53
    2612:	b0 e0       	ldi	r27, 0x00	; 0
    2614:	e5 e3       	ldi	r30, 0x35	; 53
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	90 81       	ld	r25, Z
    261a:	8b 81       	ldd	r24, Y+3	; 0x03
    261c:	89 2b       	or	r24, r25
    261e:	8c 93       	st	X, r24
    2620:	15 c0       	rjmp	.+42     	; 0x264c <DIO_u8SetLowNibbleValue+0xe4>
			case DIO_PORTD:PORTD&=DIO_LOWNIBBLE_MASK;PORTD|=Copy_u8Value;break;
    2622:	a2 e3       	ldi	r26, 0x32	; 50
    2624:	b0 e0       	ldi	r27, 0x00	; 0
    2626:	e2 e3       	ldi	r30, 0x32	; 50
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	80 81       	ld	r24, Z
    262c:	80 7f       	andi	r24, 0xF0	; 240
    262e:	8c 93       	st	X, r24
    2630:	a2 e3       	ldi	r26, 0x32	; 50
    2632:	b0 e0       	ldi	r27, 0x00	; 0
    2634:	e2 e3       	ldi	r30, 0x32	; 50
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	90 81       	ld	r25, Z
    263a:	8b 81       	ldd	r24, Y+3	; 0x03
    263c:	89 2b       	or	r24, r25
    263e:	8c 93       	st	X, r24
    2640:	05 c0       	rjmp	.+10     	; 0x264c <DIO_u8SetLowNibbleValue+0xe4>
			default: Local_u8ErrorState=1;
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	89 83       	std	Y+1, r24	; 0x01
    2646:	02 c0       	rjmp	.+4      	; 0x264c <DIO_u8SetLowNibbleValue+0xe4>
		}
	}
	else
		Local_u8ErrorState=1;
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    264c:	89 81       	ldd	r24, Y+1	; 0x01
}
    264e:	0f 90       	pop	r0
    2650:	0f 90       	pop	r0
    2652:	0f 90       	pop	r0
    2654:	0f 90       	pop	r0
    2656:	0f 90       	pop	r0
    2658:	cf 91       	pop	r28
    265a:	df 91       	pop	r29
    265c:	08 95       	ret

0000265e <DIO_u8SetHighNibbleValue>:
u8 DIO_u8SetHighNibbleValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    265e:	df 93       	push	r29
    2660:	cf 93       	push	r28
    2662:	00 d0       	rcall	.+0      	; 0x2664 <DIO_u8SetHighNibbleValue+0x6>
    2664:	00 d0       	rcall	.+0      	; 0x2666 <DIO_u8SetHighNibbleValue+0x8>
    2666:	0f 92       	push	r0
    2668:	cd b7       	in	r28, 0x3d	; 61
    266a:	de b7       	in	r29, 0x3e	; 62
    266c:	8a 83       	std	Y+2, r24	; 0x02
    266e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    2670:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port<=DIO_PORTD){
    2672:	8a 81       	ldd	r24, Y+2	; 0x02
    2674:	84 30       	cpi	r24, 0x04	; 4
    2676:	08 f0       	brcs	.+2      	; 0x267a <DIO_u8SetHighNibbleValue+0x1c>
    2678:	87 c0       	rjmp	.+270    	; 0x2788 <DIO_u8SetHighNibbleValue+0x12a>
		switch(Copy_u8Port)
    267a:	8a 81       	ldd	r24, Y+2	; 0x02
    267c:	28 2f       	mov	r18, r24
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	3d 83       	std	Y+5, r19	; 0x05
    2682:	2c 83       	std	Y+4, r18	; 0x04
    2684:	8c 81       	ldd	r24, Y+4	; 0x04
    2686:	9d 81       	ldd	r25, Y+5	; 0x05
    2688:	81 30       	cpi	r24, 0x01	; 1
    268a:	91 05       	cpc	r25, r1
    268c:	79 f1       	breq	.+94     	; 0x26ec <DIO_u8SetHighNibbleValue+0x8e>
    268e:	2c 81       	ldd	r18, Y+4	; 0x04
    2690:	3d 81       	ldd	r19, Y+5	; 0x05
    2692:	22 30       	cpi	r18, 0x02	; 2
    2694:	31 05       	cpc	r19, r1
    2696:	2c f4       	brge	.+10     	; 0x26a2 <DIO_u8SetHighNibbleValue+0x44>
    2698:	8c 81       	ldd	r24, Y+4	; 0x04
    269a:	9d 81       	ldd	r25, Y+5	; 0x05
    269c:	00 97       	sbiw	r24, 0x00	; 0
    269e:	69 f0       	breq	.+26     	; 0x26ba <DIO_u8SetHighNibbleValue+0x5c>
    26a0:	70 c0       	rjmp	.+224    	; 0x2782 <DIO_u8SetHighNibbleValue+0x124>
    26a2:	2c 81       	ldd	r18, Y+4	; 0x04
    26a4:	3d 81       	ldd	r19, Y+5	; 0x05
    26a6:	22 30       	cpi	r18, 0x02	; 2
    26a8:	31 05       	cpc	r19, r1
    26aa:	c9 f1       	breq	.+114    	; 0x271e <DIO_u8SetHighNibbleValue+0xc0>
    26ac:	8c 81       	ldd	r24, Y+4	; 0x04
    26ae:	9d 81       	ldd	r25, Y+5	; 0x05
    26b0:	83 30       	cpi	r24, 0x03	; 3
    26b2:	91 05       	cpc	r25, r1
    26b4:	09 f4       	brne	.+2      	; 0x26b8 <DIO_u8SetHighNibbleValue+0x5a>
    26b6:	4c c0       	rjmp	.+152    	; 0x2750 <DIO_u8SetHighNibbleValue+0xf2>
    26b8:	64 c0       	rjmp	.+200    	; 0x2782 <DIO_u8SetHighNibbleValue+0x124>
		{
			case DIO_PORTA:PORTA &= DIO_HIGHNIBBLE_MASK;PORTA |= (Copy_u8Value<<4);break;
    26ba:	ab e3       	ldi	r26, 0x3B	; 59
    26bc:	b0 e0       	ldi	r27, 0x00	; 0
    26be:	eb e3       	ldi	r30, 0x3B	; 59
    26c0:	f0 e0       	ldi	r31, 0x00	; 0
    26c2:	80 81       	ld	r24, Z
    26c4:	8f 70       	andi	r24, 0x0F	; 15
    26c6:	8c 93       	st	X, r24
    26c8:	ab e3       	ldi	r26, 0x3B	; 59
    26ca:	b0 e0       	ldi	r27, 0x00	; 0
    26cc:	eb e3       	ldi	r30, 0x3B	; 59
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	80 81       	ld	r24, Z
    26d2:	28 2f       	mov	r18, r24
    26d4:	8b 81       	ldd	r24, Y+3	; 0x03
    26d6:	88 2f       	mov	r24, r24
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	82 95       	swap	r24
    26dc:	92 95       	swap	r25
    26de:	90 7f       	andi	r25, 0xF0	; 240
    26e0:	98 27       	eor	r25, r24
    26e2:	80 7f       	andi	r24, 0xF0	; 240
    26e4:	98 27       	eor	r25, r24
    26e6:	82 2b       	or	r24, r18
    26e8:	8c 93       	st	X, r24
    26ea:	50 c0       	rjmp	.+160    	; 0x278c <DIO_u8SetHighNibbleValue+0x12e>
			case DIO_PORTB:PORTB &= DIO_HIGHNIBBLE_MASK;PORTB |= (Copy_u8Value<<4);break;
    26ec:	a8 e3       	ldi	r26, 0x38	; 56
    26ee:	b0 e0       	ldi	r27, 0x00	; 0
    26f0:	e8 e3       	ldi	r30, 0x38	; 56
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	80 81       	ld	r24, Z
    26f6:	8f 70       	andi	r24, 0x0F	; 15
    26f8:	8c 93       	st	X, r24
    26fa:	a8 e3       	ldi	r26, 0x38	; 56
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	e8 e3       	ldi	r30, 0x38	; 56
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	80 81       	ld	r24, Z
    2704:	28 2f       	mov	r18, r24
    2706:	8b 81       	ldd	r24, Y+3	; 0x03
    2708:	88 2f       	mov	r24, r24
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	82 95       	swap	r24
    270e:	92 95       	swap	r25
    2710:	90 7f       	andi	r25, 0xF0	; 240
    2712:	98 27       	eor	r25, r24
    2714:	80 7f       	andi	r24, 0xF0	; 240
    2716:	98 27       	eor	r25, r24
    2718:	82 2b       	or	r24, r18
    271a:	8c 93       	st	X, r24
    271c:	37 c0       	rjmp	.+110    	; 0x278c <DIO_u8SetHighNibbleValue+0x12e>
			case DIO_PORTC:PORTC &= DIO_HIGHNIBBLE_MASK;PORTC |= (Copy_u8Value<<4);break;
    271e:	a5 e3       	ldi	r26, 0x35	; 53
    2720:	b0 e0       	ldi	r27, 0x00	; 0
    2722:	e5 e3       	ldi	r30, 0x35	; 53
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	8f 70       	andi	r24, 0x0F	; 15
    272a:	8c 93       	st	X, r24
    272c:	a5 e3       	ldi	r26, 0x35	; 53
    272e:	b0 e0       	ldi	r27, 0x00	; 0
    2730:	e5 e3       	ldi	r30, 0x35	; 53
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	80 81       	ld	r24, Z
    2736:	28 2f       	mov	r18, r24
    2738:	8b 81       	ldd	r24, Y+3	; 0x03
    273a:	88 2f       	mov	r24, r24
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	82 95       	swap	r24
    2740:	92 95       	swap	r25
    2742:	90 7f       	andi	r25, 0xF0	; 240
    2744:	98 27       	eor	r25, r24
    2746:	80 7f       	andi	r24, 0xF0	; 240
    2748:	98 27       	eor	r25, r24
    274a:	82 2b       	or	r24, r18
    274c:	8c 93       	st	X, r24
    274e:	1e c0       	rjmp	.+60     	; 0x278c <DIO_u8SetHighNibbleValue+0x12e>
			case DIO_PORTD:PORTD &= DIO_HIGHNIBBLE_MASK;PORTD |= (Copy_u8Value<<4);break;
    2750:	a2 e3       	ldi	r26, 0x32	; 50
    2752:	b0 e0       	ldi	r27, 0x00	; 0
    2754:	e2 e3       	ldi	r30, 0x32	; 50
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	80 81       	ld	r24, Z
    275a:	8f 70       	andi	r24, 0x0F	; 15
    275c:	8c 93       	st	X, r24
    275e:	a2 e3       	ldi	r26, 0x32	; 50
    2760:	b0 e0       	ldi	r27, 0x00	; 0
    2762:	e2 e3       	ldi	r30, 0x32	; 50
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	80 81       	ld	r24, Z
    2768:	28 2f       	mov	r18, r24
    276a:	8b 81       	ldd	r24, Y+3	; 0x03
    276c:	88 2f       	mov	r24, r24
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	82 95       	swap	r24
    2772:	92 95       	swap	r25
    2774:	90 7f       	andi	r25, 0xF0	; 240
    2776:	98 27       	eor	r25, r24
    2778:	80 7f       	andi	r24, 0xF0	; 240
    277a:	98 27       	eor	r25, r24
    277c:	82 2b       	or	r24, r18
    277e:	8c 93       	st	X, r24
    2780:	05 c0       	rjmp	.+10     	; 0x278c <DIO_u8SetHighNibbleValue+0x12e>
			default: Local_u8ErrorState=1;
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	89 83       	std	Y+1, r24	; 0x01
    2786:	02 c0       	rjmp	.+4      	; 0x278c <DIO_u8SetHighNibbleValue+0x12e>
		}
	}
	else
		Local_u8ErrorState=1;
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    278c:	89 81       	ldd	r24, Y+1	; 0x01
}
    278e:	0f 90       	pop	r0
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	0f 90       	pop	r0
    2796:	0f 90       	pop	r0
    2798:	cf 91       	pop	r28
    279a:	df 91       	pop	r29
    279c:	08 95       	ret

0000279e <EXTI_voidInt0Init>:

static void (*EXTI_voidCallBack[3])() = {NULL};


void EXTI_voidInt0Init()
{
    279e:	df 93       	push	r29
    27a0:	cf 93       	push	r28
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
	MCUCR &= MASK_SENCE_INT0;
    27a6:	a5 e5       	ldi	r26, 0x55	; 85
    27a8:	b0 e0       	ldi	r27, 0x00	; 0
    27aa:	e5 e5       	ldi	r30, 0x55	; 85
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	80 81       	ld	r24, Z
    27b0:	8c 7f       	andi	r24, 0xFC	; 252
    27b2:	8c 93       	st	X, r24
	MCUCR |= EXTI0_SENCECONTROL<<MCUCR_ISC00;
    27b4:	a5 e5       	ldi	r26, 0x55	; 85
    27b6:	b0 e0       	ldi	r27, 0x00	; 0
    27b8:	e5 e5       	ldi	r30, 0x55	; 85
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	80 81       	ld	r24, Z
    27be:	82 60       	ori	r24, 0x02	; 2
    27c0:	8c 93       	st	X, r24

	SET_BIT(GICR,GICR_INT0);
    27c2:	ab e5       	ldi	r26, 0x5B	; 91
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	eb e5       	ldi	r30, 0x5B	; 91
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	80 81       	ld	r24, Z
    27cc:	80 64       	ori	r24, 0x40	; 64
    27ce:	8c 93       	st	X, r24
}
    27d0:	cf 91       	pop	r28
    27d2:	df 91       	pop	r29
    27d4:	08 95       	ret

000027d6 <EXTI_u8Int0CallBack>:

u8 EXTI_u8Int0CallBack(void (*Notification)())
{
    27d6:	df 93       	push	r29
    27d8:	cf 93       	push	r28
    27da:	00 d0       	rcall	.+0      	; 0x27dc <EXTI_u8Int0CallBack+0x6>
    27dc:	0f 92       	push	r0
    27de:	cd b7       	in	r28, 0x3d	; 61
    27e0:	de b7       	in	r29, 0x3e	; 62
    27e2:	9b 83       	std	Y+3, r25	; 0x03
    27e4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    27e6:	19 82       	std	Y+1, r1	; 0x01
	if(Notification != NULL )
    27e8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ea:	9b 81       	ldd	r25, Y+3	; 0x03
    27ec:	00 97       	sbiw	r24, 0x00	; 0
    27ee:	39 f0       	breq	.+14     	; 0x27fe <EXTI_u8Int0CallBack+0x28>
	{
		EXTI_voidCallBack[EXTI0] = Notification;
    27f0:	8a 81       	ldd	r24, Y+2	; 0x02
    27f2:	9b 81       	ldd	r25, Y+3	; 0x03
    27f4:	90 93 a2 01 	sts	0x01A2, r25
    27f8:	80 93 a1 01 	sts	0x01A1, r24
    27fc:	02 c0       	rjmp	.+4      	; 0x2802 <EXTI_u8Int0CallBack+0x2c>
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    27fe:	82 e0       	ldi	r24, 0x02	; 2
    2800:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2802:	89 81       	ldd	r24, Y+1	; 0x01
}
    2804:	0f 90       	pop	r0
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	cf 91       	pop	r28
    280c:	df 91       	pop	r29
    280e:	08 95       	ret

00002810 <EXTI_voidInt0ChangeSence>:

u8 EXTI_voidInt0ChangeSence(u8 Copy_u8Sence)
{
    2810:	df 93       	push	r29
    2812:	cf 93       	push	r28
    2814:	00 d0       	rcall	.+0      	; 0x2816 <EXTI_voidInt0ChangeSence+0x6>
    2816:	cd b7       	in	r28, 0x3d	; 61
    2818:	de b7       	in	r29, 0x3e	; 62
    281a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    281c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Sence<=EXTI0_RISING_ADGE)
    281e:	8a 81       	ldd	r24, Y+2	; 0x02
    2820:	84 30       	cpi	r24, 0x04	; 4
    2822:	80 f4       	brcc	.+32     	; 0x2844 <EXTI_voidInt0ChangeSence+0x34>
	{
		MCUCR &= MASK_SENCE_INT0;
    2824:	a5 e5       	ldi	r26, 0x55	; 85
    2826:	b0 e0       	ldi	r27, 0x00	; 0
    2828:	e5 e5       	ldi	r30, 0x55	; 85
    282a:	f0 e0       	ldi	r31, 0x00	; 0
    282c:	80 81       	ld	r24, Z
    282e:	8c 7f       	andi	r24, 0xFC	; 252
    2830:	8c 93       	st	X, r24
		MCUCR |= Copy_u8Sence<<MCUCR_ISC00;
    2832:	a5 e5       	ldi	r26, 0x55	; 85
    2834:	b0 e0       	ldi	r27, 0x00	; 0
    2836:	e5 e5       	ldi	r30, 0x55	; 85
    2838:	f0 e0       	ldi	r31, 0x00	; 0
    283a:	90 81       	ld	r25, Z
    283c:	8a 81       	ldd	r24, Y+2	; 0x02
    283e:	89 2b       	or	r24, r25
    2840:	8c 93       	st	X, r24
    2842:	02 c0       	rjmp	.+4      	; 0x2848 <EXTI_voidInt0ChangeSence+0x38>
	}
	else
		Local_u8ErrorState = NOTOK;
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2848:	89 81       	ldd	r24, Y+1	; 0x01
}
    284a:	0f 90       	pop	r0
    284c:	0f 90       	pop	r0
    284e:	cf 91       	pop	r28
    2850:	df 91       	pop	r29
    2852:	08 95       	ret

00002854 <EXTI_voidInt1Init>:
void EXTI_voidInt1Init()
{
    2854:	df 93       	push	r29
    2856:	cf 93       	push	r28
    2858:	cd b7       	in	r28, 0x3d	; 61
    285a:	de b7       	in	r29, 0x3e	; 62
	MCUCR &= MASK_SENCE_INT1;
    285c:	a5 e5       	ldi	r26, 0x55	; 85
    285e:	b0 e0       	ldi	r27, 0x00	; 0
    2860:	e5 e5       	ldi	r30, 0x55	; 85
    2862:	f0 e0       	ldi	r31, 0x00	; 0
    2864:	80 81       	ld	r24, Z
    2866:	83 7f       	andi	r24, 0xF3	; 243
    2868:	8c 93       	st	X, r24
	MCUCR |= EXTI1_SENCECONTROL<<MCUCR_ISC10;
    286a:	a5 e5       	ldi	r26, 0x55	; 85
    286c:	b0 e0       	ldi	r27, 0x00	; 0
    286e:	e5 e5       	ldi	r30, 0x55	; 85
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	80 81       	ld	r24, Z
    2874:	88 60       	ori	r24, 0x08	; 8
    2876:	8c 93       	st	X, r24

	SET_BIT(GICR,GICR_INT1);
    2878:	ab e5       	ldi	r26, 0x5B	; 91
    287a:	b0 e0       	ldi	r27, 0x00	; 0
    287c:	eb e5       	ldi	r30, 0x5B	; 91
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	80 81       	ld	r24, Z
    2882:	80 68       	ori	r24, 0x80	; 128
    2884:	8c 93       	st	X, r24
}
    2886:	cf 91       	pop	r28
    2888:	df 91       	pop	r29
    288a:	08 95       	ret

0000288c <EXTI_u8Int1CallBack>:

u8 EXTI_u8Int1CallBack(void (*Notification)())
{
    288c:	df 93       	push	r29
    288e:	cf 93       	push	r28
    2890:	00 d0       	rcall	.+0      	; 0x2892 <EXTI_u8Int1CallBack+0x6>
    2892:	0f 92       	push	r0
    2894:	cd b7       	in	r28, 0x3d	; 61
    2896:	de b7       	in	r29, 0x3e	; 62
    2898:	9b 83       	std	Y+3, r25	; 0x03
    289a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    289c:	19 82       	std	Y+1, r1	; 0x01
	if(Notification != NULL )
    289e:	8a 81       	ldd	r24, Y+2	; 0x02
    28a0:	9b 81       	ldd	r25, Y+3	; 0x03
    28a2:	00 97       	sbiw	r24, 0x00	; 0
    28a4:	39 f0       	breq	.+14     	; 0x28b4 <EXTI_u8Int1CallBack+0x28>
	{
		EXTI_voidCallBack[EXTI1] = Notification;
    28a6:	8a 81       	ldd	r24, Y+2	; 0x02
    28a8:	9b 81       	ldd	r25, Y+3	; 0x03
    28aa:	90 93 a4 01 	sts	0x01A4, r25
    28ae:	80 93 a3 01 	sts	0x01A3, r24
    28b2:	02 c0       	rjmp	.+4      	; 0x28b8 <EXTI_u8Int1CallBack+0x2c>
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    28b4:	82 e0       	ldi	r24, 0x02	; 2
    28b6:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    28ba:	0f 90       	pop	r0
    28bc:	0f 90       	pop	r0
    28be:	0f 90       	pop	r0
    28c0:	cf 91       	pop	r28
    28c2:	df 91       	pop	r29
    28c4:	08 95       	ret

000028c6 <EXTI_voidInt1ChangeSence>:
u8 EXTI_voidInt1ChangeSence(u8 Copy_u8Sence)
{
    28c6:	df 93       	push	r29
    28c8:	cf 93       	push	r28
    28ca:	00 d0       	rcall	.+0      	; 0x28cc <EXTI_voidInt1ChangeSence+0x6>
    28cc:	cd b7       	in	r28, 0x3d	; 61
    28ce:	de b7       	in	r29, 0x3e	; 62
    28d0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    28d2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Sence<=EXTI1_RISING_ADGE)
    28d4:	8a 81       	ldd	r24, Y+2	; 0x02
    28d6:	84 30       	cpi	r24, 0x04	; 4
    28d8:	b8 f4       	brcc	.+46     	; 0x2908 <EXTI_voidInt1ChangeSence+0x42>
	{
		MCUCR &= MASK_SENCE_INT1;
    28da:	a5 e5       	ldi	r26, 0x55	; 85
    28dc:	b0 e0       	ldi	r27, 0x00	; 0
    28de:	e5 e5       	ldi	r30, 0x55	; 85
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	80 81       	ld	r24, Z
    28e4:	83 7f       	andi	r24, 0xF3	; 243
    28e6:	8c 93       	st	X, r24
		MCUCR |= Copy_u8Sence<<MCUCR_ISC10;
    28e8:	a5 e5       	ldi	r26, 0x55	; 85
    28ea:	b0 e0       	ldi	r27, 0x00	; 0
    28ec:	e5 e5       	ldi	r30, 0x55	; 85
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	80 81       	ld	r24, Z
    28f2:	28 2f       	mov	r18, r24
    28f4:	8a 81       	ldd	r24, Y+2	; 0x02
    28f6:	88 2f       	mov	r24, r24
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	88 0f       	add	r24, r24
    28fc:	99 1f       	adc	r25, r25
    28fe:	88 0f       	add	r24, r24
    2900:	99 1f       	adc	r25, r25
    2902:	82 2b       	or	r24, r18
    2904:	8c 93       	st	X, r24
    2906:	02 c0       	rjmp	.+4      	; 0x290c <EXTI_voidInt1ChangeSence+0x46>
	}
	else
		Local_u8ErrorState = NOTOK;
    2908:	81 e0       	ldi	r24, 0x01	; 1
    290a:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    290c:	89 81       	ldd	r24, Y+1	; 0x01
}
    290e:	0f 90       	pop	r0
    2910:	0f 90       	pop	r0
    2912:	cf 91       	pop	r28
    2914:	df 91       	pop	r29
    2916:	08 95       	ret

00002918 <EXTI_voidInt2Init>:
void EXTI_voidInt2Init()
{
    2918:	df 93       	push	r29
    291a:	cf 93       	push	r28
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
	MCUCSR &= MASK_SENCE_INT2;
    2920:	a4 e5       	ldi	r26, 0x54	; 84
    2922:	b0 e0       	ldi	r27, 0x00	; 0
    2924:	e4 e5       	ldi	r30, 0x54	; 84
    2926:	f0 e0       	ldi	r31, 0x00	; 0
    2928:	80 81       	ld	r24, Z
    292a:	8f 7b       	andi	r24, 0xBF	; 191
    292c:	8c 93       	st	X, r24
	MCUCSR |= EXTI2_SENCECONTROL<<MCUCSR_ISC2;
    292e:	a4 e5       	ldi	r26, 0x54	; 84
    2930:	b0 e0       	ldi	r27, 0x00	; 0
    2932:	e4 e5       	ldi	r30, 0x54	; 84
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	80 81       	ld	r24, Z
    2938:	8c 93       	st	X, r24

	SET_BIT(GICR,GICR_INT2);
    293a:	ab e5       	ldi	r26, 0x5B	; 91
    293c:	b0 e0       	ldi	r27, 0x00	; 0
    293e:	eb e5       	ldi	r30, 0x5B	; 91
    2940:	f0 e0       	ldi	r31, 0x00	; 0
    2942:	80 81       	ld	r24, Z
    2944:	80 62       	ori	r24, 0x20	; 32
    2946:	8c 93       	st	X, r24
}
    2948:	cf 91       	pop	r28
    294a:	df 91       	pop	r29
    294c:	08 95       	ret

0000294e <EXTI_u8Int2CallBack>:

u8 EXTI_u8Int2CallBack(void (*Notification)())
{
    294e:	df 93       	push	r29
    2950:	cf 93       	push	r28
    2952:	00 d0       	rcall	.+0      	; 0x2954 <EXTI_u8Int2CallBack+0x6>
    2954:	0f 92       	push	r0
    2956:	cd b7       	in	r28, 0x3d	; 61
    2958:	de b7       	in	r29, 0x3e	; 62
    295a:	9b 83       	std	Y+3, r25	; 0x03
    295c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    295e:	19 82       	std	Y+1, r1	; 0x01
	if(Notification != NULL )
    2960:	8a 81       	ldd	r24, Y+2	; 0x02
    2962:	9b 81       	ldd	r25, Y+3	; 0x03
    2964:	00 97       	sbiw	r24, 0x00	; 0
    2966:	39 f0       	breq	.+14     	; 0x2976 <EXTI_u8Int2CallBack+0x28>
	{
		EXTI_voidCallBack[EXTI2] = Notification;
    2968:	8a 81       	ldd	r24, Y+2	; 0x02
    296a:	9b 81       	ldd	r25, Y+3	; 0x03
    296c:	90 93 a6 01 	sts	0x01A6, r25
    2970:	80 93 a5 01 	sts	0x01A5, r24
    2974:	02 c0       	rjmp	.+4      	; 0x297a <EXTI_u8Int2CallBack+0x2c>
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    2976:	82 e0       	ldi	r24, 0x02	; 2
    2978:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    297a:	89 81       	ldd	r24, Y+1	; 0x01
}
    297c:	0f 90       	pop	r0
    297e:	0f 90       	pop	r0
    2980:	0f 90       	pop	r0
    2982:	cf 91       	pop	r28
    2984:	df 91       	pop	r29
    2986:	08 95       	ret

00002988 <EXTI_voidInt2ChangeSence>:

u8 EXTI_voidInt2ChangeSence(u8 Copy_u8Sence)
{
    2988:	df 93       	push	r29
    298a:	cf 93       	push	r28
    298c:	00 d0       	rcall	.+0      	; 0x298e <EXTI_voidInt2ChangeSence+0x6>
    298e:	cd b7       	in	r28, 0x3d	; 61
    2990:	de b7       	in	r29, 0x3e	; 62
    2992:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2994:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Sence<=EXTI2_RISING_ADGE)
    2996:	8a 81       	ldd	r24, Y+2	; 0x02
    2998:	82 30       	cpi	r24, 0x02	; 2
    299a:	e0 f4       	brcc	.+56     	; 0x29d4 <EXTI_voidInt2ChangeSence+0x4c>
	{
		MCUCSR &= MASK_SENCE_INT2;
    299c:	a4 e5       	ldi	r26, 0x54	; 84
    299e:	b0 e0       	ldi	r27, 0x00	; 0
    29a0:	e4 e5       	ldi	r30, 0x54	; 84
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	80 81       	ld	r24, Z
    29a6:	8f 7b       	andi	r24, 0xBF	; 191
    29a8:	8c 93       	st	X, r24
		MCUCSR |= Copy_u8Sence<<MCUCSR_ISC2;
    29aa:	a4 e5       	ldi	r26, 0x54	; 84
    29ac:	b0 e0       	ldi	r27, 0x00	; 0
    29ae:	e4 e5       	ldi	r30, 0x54	; 84
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	80 81       	ld	r24, Z
    29b4:	28 2f       	mov	r18, r24
    29b6:	8a 81       	ldd	r24, Y+2	; 0x02
    29b8:	88 2f       	mov	r24, r24
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	00 24       	eor	r0, r0
    29be:	96 95       	lsr	r25
    29c0:	87 95       	ror	r24
    29c2:	07 94       	ror	r0
    29c4:	96 95       	lsr	r25
    29c6:	87 95       	ror	r24
    29c8:	07 94       	ror	r0
    29ca:	98 2f       	mov	r25, r24
    29cc:	80 2d       	mov	r24, r0
    29ce:	82 2b       	or	r24, r18
    29d0:	8c 93       	st	X, r24
    29d2:	02 c0       	rjmp	.+4      	; 0x29d8 <EXTI_voidInt2ChangeSence+0x50>
	}
	else
		Local_u8ErrorState = NOTOK;
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    29d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    29da:	0f 90       	pop	r0
    29dc:	0f 90       	pop	r0
    29de:	cf 91       	pop	r28
    29e0:	df 91       	pop	r29
    29e2:	08 95       	ret

000029e4 <__vector_1>:
void __vector_1 (void)	__attribute__((signal));
void __vector_1 (void)
{
    29e4:	1f 92       	push	r1
    29e6:	0f 92       	push	r0
    29e8:	0f b6       	in	r0, 0x3f	; 63
    29ea:	0f 92       	push	r0
    29ec:	11 24       	eor	r1, r1
    29ee:	2f 93       	push	r18
    29f0:	3f 93       	push	r19
    29f2:	4f 93       	push	r20
    29f4:	5f 93       	push	r21
    29f6:	6f 93       	push	r22
    29f8:	7f 93       	push	r23
    29fa:	8f 93       	push	r24
    29fc:	9f 93       	push	r25
    29fe:	af 93       	push	r26
    2a00:	bf 93       	push	r27
    2a02:	ef 93       	push	r30
    2a04:	ff 93       	push	r31
    2a06:	df 93       	push	r29
    2a08:	cf 93       	push	r28
    2a0a:	cd b7       	in	r28, 0x3d	; 61
    2a0c:	de b7       	in	r29, 0x3e	; 62
	EXTI_voidCallBack[EXTI0]();
    2a0e:	e0 91 a1 01 	lds	r30, 0x01A1
    2a12:	f0 91 a2 01 	lds	r31, 0x01A2
    2a16:	09 95       	icall
}
    2a18:	cf 91       	pop	r28
    2a1a:	df 91       	pop	r29
    2a1c:	ff 91       	pop	r31
    2a1e:	ef 91       	pop	r30
    2a20:	bf 91       	pop	r27
    2a22:	af 91       	pop	r26
    2a24:	9f 91       	pop	r25
    2a26:	8f 91       	pop	r24
    2a28:	7f 91       	pop	r23
    2a2a:	6f 91       	pop	r22
    2a2c:	5f 91       	pop	r21
    2a2e:	4f 91       	pop	r20
    2a30:	3f 91       	pop	r19
    2a32:	2f 91       	pop	r18
    2a34:	0f 90       	pop	r0
    2a36:	0f be       	out	0x3f, r0	; 63
    2a38:	0f 90       	pop	r0
    2a3a:	1f 90       	pop	r1
    2a3c:	18 95       	reti

00002a3e <__vector_2>:

void __vector_2 (void)	__attribute__((signal));
void __vector_2 (void)
{
    2a3e:	1f 92       	push	r1
    2a40:	0f 92       	push	r0
    2a42:	0f b6       	in	r0, 0x3f	; 63
    2a44:	0f 92       	push	r0
    2a46:	11 24       	eor	r1, r1
    2a48:	2f 93       	push	r18
    2a4a:	3f 93       	push	r19
    2a4c:	4f 93       	push	r20
    2a4e:	5f 93       	push	r21
    2a50:	6f 93       	push	r22
    2a52:	7f 93       	push	r23
    2a54:	8f 93       	push	r24
    2a56:	9f 93       	push	r25
    2a58:	af 93       	push	r26
    2a5a:	bf 93       	push	r27
    2a5c:	ef 93       	push	r30
    2a5e:	ff 93       	push	r31
    2a60:	df 93       	push	r29
    2a62:	cf 93       	push	r28
    2a64:	cd b7       	in	r28, 0x3d	; 61
    2a66:	de b7       	in	r29, 0x3e	; 62
	EXTI_voidCallBack[EXTI1]();
    2a68:	e0 91 a3 01 	lds	r30, 0x01A3
    2a6c:	f0 91 a4 01 	lds	r31, 0x01A4
    2a70:	09 95       	icall
}
    2a72:	cf 91       	pop	r28
    2a74:	df 91       	pop	r29
    2a76:	ff 91       	pop	r31
    2a78:	ef 91       	pop	r30
    2a7a:	bf 91       	pop	r27
    2a7c:	af 91       	pop	r26
    2a7e:	9f 91       	pop	r25
    2a80:	8f 91       	pop	r24
    2a82:	7f 91       	pop	r23
    2a84:	6f 91       	pop	r22
    2a86:	5f 91       	pop	r21
    2a88:	4f 91       	pop	r20
    2a8a:	3f 91       	pop	r19
    2a8c:	2f 91       	pop	r18
    2a8e:	0f 90       	pop	r0
    2a90:	0f be       	out	0x3f, r0	; 63
    2a92:	0f 90       	pop	r0
    2a94:	1f 90       	pop	r1
    2a96:	18 95       	reti

00002a98 <__vector_3>:

void __vector_3 (void)	__attribute__((signal));
void __vector_3 (void)
{
    2a98:	1f 92       	push	r1
    2a9a:	0f 92       	push	r0
    2a9c:	0f b6       	in	r0, 0x3f	; 63
    2a9e:	0f 92       	push	r0
    2aa0:	11 24       	eor	r1, r1
    2aa2:	2f 93       	push	r18
    2aa4:	3f 93       	push	r19
    2aa6:	4f 93       	push	r20
    2aa8:	5f 93       	push	r21
    2aaa:	6f 93       	push	r22
    2aac:	7f 93       	push	r23
    2aae:	8f 93       	push	r24
    2ab0:	9f 93       	push	r25
    2ab2:	af 93       	push	r26
    2ab4:	bf 93       	push	r27
    2ab6:	ef 93       	push	r30
    2ab8:	ff 93       	push	r31
    2aba:	df 93       	push	r29
    2abc:	cf 93       	push	r28
    2abe:	cd b7       	in	r28, 0x3d	; 61
    2ac0:	de b7       	in	r29, 0x3e	; 62
	EXTI_voidCallBack[EXTI2]();
    2ac2:	e0 91 a5 01 	lds	r30, 0x01A5
    2ac6:	f0 91 a6 01 	lds	r31, 0x01A6
    2aca:	09 95       	icall
}
    2acc:	cf 91       	pop	r28
    2ace:	df 91       	pop	r29
    2ad0:	ff 91       	pop	r31
    2ad2:	ef 91       	pop	r30
    2ad4:	bf 91       	pop	r27
    2ad6:	af 91       	pop	r26
    2ad8:	9f 91       	pop	r25
    2ada:	8f 91       	pop	r24
    2adc:	7f 91       	pop	r23
    2ade:	6f 91       	pop	r22
    2ae0:	5f 91       	pop	r21
    2ae2:	4f 91       	pop	r20
    2ae4:	3f 91       	pop	r19
    2ae6:	2f 91       	pop	r18
    2ae8:	0f 90       	pop	r0
    2aea:	0f be       	out	0x3f, r0	; 63
    2aec:	0f 90       	pop	r0
    2aee:	1f 90       	pop	r1
    2af0:	18 95       	reti

00002af2 <GIE_voidEnable>:
#include "../MCAL/GIE_interface.h"
#include "../MCAL/GIE_register.h"


void GIE_voidEnable()
{
    2af2:	df 93       	push	r29
    2af4:	cf 93       	push	r28
    2af6:	cd b7       	in	r28, 0x3d	; 61
    2af8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    2afa:	af e5       	ldi	r26, 0x5F	; 95
    2afc:	b0 e0       	ldi	r27, 0x00	; 0
    2afe:	ef e5       	ldi	r30, 0x5F	; 95
    2b00:	f0 e0       	ldi	r31, 0x00	; 0
    2b02:	80 81       	ld	r24, Z
    2b04:	80 68       	ori	r24, 0x80	; 128
    2b06:	8c 93       	st	X, r24
}
    2b08:	cf 91       	pop	r28
    2b0a:	df 91       	pop	r29
    2b0c:	08 95       	ret

00002b0e <GIE_voidDisable>:

void GIE_voidDisable()
{
    2b0e:	df 93       	push	r29
    2b10:	cf 93       	push	r28
    2b12:	cd b7       	in	r28, 0x3d	; 61
    2b14:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    2b16:	af e5       	ldi	r26, 0x5F	; 95
    2b18:	b0 e0       	ldi	r27, 0x00	; 0
    2b1a:	ef e5       	ldi	r30, 0x5F	; 95
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	80 81       	ld	r24, Z
    2b20:	8f 77       	andi	r24, 0x7F	; 127
    2b22:	8c 93       	st	X, r24
}
    2b24:	cf 91       	pop	r28
    2b26:	df 91       	pop	r29
    2b28:	08 95       	ret

00002b2a <KPD_u8Key_pressed>:
#include "../HAL/KPD_config.h"
#include "../HAL/KPD_interface.h"
#include "../HAL/KPD_private.h"

u8 KPD_u8Key_pressed()
{
    2b2a:	df 93       	push	r29
    2b2c:	cf 93       	push	r28
    2b2e:	00 d0       	rcall	.+0      	; 0x2b30 <KPD_u8Key_pressed+0x6>
    2b30:	00 d0       	rcall	.+0      	; 0x2b32 <KPD_u8Key_pressed+0x8>
    2b32:	0f 92       	push	r0
    2b34:	cd b7       	in	r28, 0x3d	; 61
    2b36:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8RowItrator;
	u8 Local_u8ColItrator;
	u8 Local_u8GetState;
	u8 Local_u8KeyPressed = KPD_NO_PRESSED_KEY;
    2b38:	8f ef       	ldi	r24, 0xFF	; 255
    2b3a:	89 83       	std	Y+1, r24	; 0x01
	static u8 Local_u8KPD_ROW_PINS[Max_Rows] = { KPD_ROW_PIN0, KPD_ROW_PIN1,
			KPD_ROW_PIN2, KPD_ROW_PIN3 };
	static u8 Local_u8KPD_COL_PINS[Max_Cols] = { KPD_COL_PIN0, KPD_COL_PIN1,
			KPD_COL_PIN2, KPD_COL_PIN3 };
	static u8 Local_u8KPD_Nums[Max_Rows][Max_Cols] = KPD_u8ARR;
	for (Local_u8ColItrator = 0; Local_u8ColItrator < Max_Cols;
    2b3c:	1a 82       	std	Y+2, r1	; 0x02
    2b3e:	5e c0       	rjmp	.+188    	; 0x2bfc <KPD_u8Key_pressed+0xd2>
			Local_u8ColItrator++) {
		DIO_u8SetPinValue(KPD_INPUT_PORT,
    2b40:	8a 81       	ldd	r24, Y+2	; 0x02
    2b42:	88 2f       	mov	r24, r24
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	fc 01       	movw	r30, r24
    2b48:	e8 58       	subi	r30, 0x88	; 136
    2b4a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b4c:	90 81       	ld	r25, Z
    2b4e:	83 e0       	ldi	r24, 0x03	; 3
    2b50:	69 2f       	mov	r22, r25
    2b52:	40 e0       	ldi	r20, 0x00	; 0
    2b54:	0e 94 27 10 	call	0x204e	; 0x204e <DIO_u8SetPinValue>
				Local_u8KPD_COL_PINS[Local_u8ColItrator], DIO_PIN_LOW);
		/*Read the current Row*/
		for (Local_u8RowItrator = 0; Local_u8RowItrator < Max_Rows;
    2b58:	1b 82       	std	Y+3, r1	; 0x03
    2b5a:	3d c0       	rjmp	.+122    	; 0x2bd6 <KPD_u8Key_pressed+0xac>
				Local_u8RowItrator++) {
			DIO_u8GetPinValue(KPD_INPUT_PORT,
    2b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5e:	88 2f       	mov	r24, r24
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	fc 01       	movw	r30, r24
    2b64:	e4 58       	subi	r30, 0x84	; 132
    2b66:	fe 4f       	sbci	r31, 0xFE	; 254
    2b68:	90 81       	ld	r25, Z
    2b6a:	9e 01       	movw	r18, r28
    2b6c:	2c 5f       	subi	r18, 0xFC	; 252
    2b6e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b70:	83 e0       	ldi	r24, 0x03	; 3
    2b72:	69 2f       	mov	r22, r25
    2b74:	a9 01       	movw	r20, r18
    2b76:	0e 94 8e 11 	call	0x231c	; 0x231c <DIO_u8GetPinValue>
					Local_u8KPD_ROW_PINS[Local_u8RowItrator],
					&Local_u8GetState);
			/*chick switch id pressed */
			if (Local_u8GetState == DIO_PIN_LOW) {
    2b7a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b7c:	88 23       	and	r24, r24
    2b7e:	41 f5       	brne	.+80     	; 0x2bd0 <KPD_u8Key_pressed+0xa6>
				Local_u8KeyPressed =
    2b80:	8b 81       	ldd	r24, Y+3	; 0x03
    2b82:	48 2f       	mov	r20, r24
    2b84:	50 e0       	ldi	r21, 0x00	; 0
    2b86:	8a 81       	ldd	r24, Y+2	; 0x02
    2b88:	28 2f       	mov	r18, r24
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	ca 01       	movw	r24, r20
    2b8e:	88 0f       	add	r24, r24
    2b90:	99 1f       	adc	r25, r25
    2b92:	88 0f       	add	r24, r24
    2b94:	99 1f       	adc	r25, r25
    2b96:	82 0f       	add	r24, r18
    2b98:	93 1f       	adc	r25, r19
    2b9a:	fc 01       	movw	r30, r24
    2b9c:	e8 59       	subi	r30, 0x98	; 152
    2b9e:	fe 4f       	sbci	r31, 0xFE	; 254
    2ba0:	80 81       	ld	r24, Z
    2ba2:	89 83       	std	Y+1, r24	; 0x01
    2ba4:	0f c0       	rjmp	.+30     	; 0x2bc4 <KPD_u8Key_pressed+0x9a>
						Local_u8KPD_Nums[Local_u8RowItrator][Local_u8ColItrator];
				/*polling busy waiting until the key is released*/
				while (Local_u8GetState == DIO_PIN_LOW) {
					DIO_u8GetPinValue(KPD_INPUT_PORT,
    2ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba8:	88 2f       	mov	r24, r24
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	fc 01       	movw	r30, r24
    2bae:	e4 58       	subi	r30, 0x84	; 132
    2bb0:	fe 4f       	sbci	r31, 0xFE	; 254
    2bb2:	90 81       	ld	r25, Z
    2bb4:	9e 01       	movw	r18, r28
    2bb6:	2c 5f       	subi	r18, 0xFC	; 252
    2bb8:	3f 4f       	sbci	r19, 0xFF	; 255
    2bba:	83 e0       	ldi	r24, 0x03	; 3
    2bbc:	69 2f       	mov	r22, r25
    2bbe:	a9 01       	movw	r20, r18
    2bc0:	0e 94 8e 11 	call	0x231c	; 0x231c <DIO_u8GetPinValue>
			/*chick switch id pressed */
			if (Local_u8GetState == DIO_PIN_LOW) {
				Local_u8KeyPressed =
						Local_u8KPD_Nums[Local_u8RowItrator][Local_u8ColItrator];
				/*polling busy waiting until the key is released*/
				while (Local_u8GetState == DIO_PIN_LOW) {
    2bc4:	8c 81       	ldd	r24, Y+4	; 0x04
    2bc6:	88 23       	and	r24, r24
    2bc8:	71 f3       	breq	.-36     	; 0x2ba6 <KPD_u8Key_pressed+0x7c>
					DIO_u8GetPinValue(KPD_INPUT_PORT,
							Local_u8KPD_ROW_PINS[Local_u8RowItrator],
							&Local_u8GetState);
				}
				return Local_u8KeyPressed;
    2bca:	89 81       	ldd	r24, Y+1	; 0x01
    2bcc:	8d 83       	std	Y+5, r24	; 0x05
    2bce:	1c c0       	rjmp	.+56     	; 0x2c08 <KPD_u8Key_pressed+0xde>
			Local_u8ColItrator++) {
		DIO_u8SetPinValue(KPD_INPUT_PORT,
				Local_u8KPD_COL_PINS[Local_u8ColItrator], DIO_PIN_LOW);
		/*Read the current Row*/
		for (Local_u8RowItrator = 0; Local_u8RowItrator < Max_Rows;
				Local_u8RowItrator++) {
    2bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd2:	8f 5f       	subi	r24, 0xFF	; 255
    2bd4:	8b 83       	std	Y+3, r24	; 0x03
	for (Local_u8ColItrator = 0; Local_u8ColItrator < Max_Cols;
			Local_u8ColItrator++) {
		DIO_u8SetPinValue(KPD_INPUT_PORT,
				Local_u8KPD_COL_PINS[Local_u8ColItrator], DIO_PIN_LOW);
		/*Read the current Row*/
		for (Local_u8RowItrator = 0; Local_u8RowItrator < Max_Rows;
    2bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd8:	84 30       	cpi	r24, 0x04	; 4
    2bda:	08 f4       	brcc	.+2      	; 0x2bde <KPD_u8Key_pressed+0xb4>
    2bdc:	bf cf       	rjmp	.-130    	; 0x2b5c <KPD_u8Key_pressed+0x32>
							&Local_u8GetState);
				}
				return Local_u8KeyPressed;
			}
		}
		DIO_u8SetPinValue(KPD_INPUT_PORT,
    2bde:	8a 81       	ldd	r24, Y+2	; 0x02
    2be0:	88 2f       	mov	r24, r24
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	fc 01       	movw	r30, r24
    2be6:	e8 58       	subi	r30, 0x88	; 136
    2be8:	fe 4f       	sbci	r31, 0xFE	; 254
    2bea:	90 81       	ld	r25, Z
    2bec:	83 e0       	ldi	r24, 0x03	; 3
    2bee:	69 2f       	mov	r22, r25
    2bf0:	41 e0       	ldi	r20, 0x01	; 1
    2bf2:	0e 94 27 10 	call	0x204e	; 0x204e <DIO_u8SetPinValue>
			KPD_ROW_PIN2, KPD_ROW_PIN3 };
	static u8 Local_u8KPD_COL_PINS[Max_Cols] = { KPD_COL_PIN0, KPD_COL_PIN1,
			KPD_COL_PIN2, KPD_COL_PIN3 };
	static u8 Local_u8KPD_Nums[Max_Rows][Max_Cols] = KPD_u8ARR;
	for (Local_u8ColItrator = 0; Local_u8ColItrator < Max_Cols;
			Local_u8ColItrator++) {
    2bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf8:	8f 5f       	subi	r24, 0xFF	; 255
    2bfa:	8a 83       	std	Y+2, r24	; 0x02
	static u8 Local_u8KPD_ROW_PINS[Max_Rows] = { KPD_ROW_PIN0, KPD_ROW_PIN1,
			KPD_ROW_PIN2, KPD_ROW_PIN3 };
	static u8 Local_u8KPD_COL_PINS[Max_Cols] = { KPD_COL_PIN0, KPD_COL_PIN1,
			KPD_COL_PIN2, KPD_COL_PIN3 };
	static u8 Local_u8KPD_Nums[Max_Rows][Max_Cols] = KPD_u8ARR;
	for (Local_u8ColItrator = 0; Local_u8ColItrator < Max_Cols;
    2bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfe:	84 30       	cpi	r24, 0x04	; 4
    2c00:	08 f4       	brcc	.+2      	; 0x2c04 <KPD_u8Key_pressed+0xda>
    2c02:	9e cf       	rjmp	.-196    	; 0x2b40 <KPD_u8Key_pressed+0x16>
			}
		}
		DIO_u8SetPinValue(KPD_INPUT_PORT,
				Local_u8KPD_COL_PINS[Local_u8ColItrator], DIO_PIN_HIGH);
	}
	return Local_u8KeyPressed;
    2c04:	89 81       	ldd	r24, Y+1	; 0x01
    2c06:	8d 83       	std	Y+5, r24	; 0x05
    2c08:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2c0a:	0f 90       	pop	r0
    2c0c:	0f 90       	pop	r0
    2c0e:	0f 90       	pop	r0
    2c10:	0f 90       	pop	r0
    2c12:	0f 90       	pop	r0
    2c14:	cf 91       	pop	r28
    2c16:	df 91       	pop	r29
    2c18:	08 95       	ret

00002c1a <LED_u8TurnOn>:
#include "../HAL/LED_private.h"
#include "../HAL/LED_config.h"
#include "../HAL/LED_interface.h"

u8 LED_u8TurnOn(LED_t * Copy_LED)
{
    2c1a:	df 93       	push	r29
    2c1c:	cf 93       	push	r28
    2c1e:	00 d0       	rcall	.+0      	; 0x2c20 <LED_u8TurnOn+0x6>
    2c20:	0f 92       	push	r0
    2c22:	cd b7       	in	r28, 0x3d	; 61
    2c24:	de b7       	in	r29, 0x3e	; 62
    2c26:	9b 83       	std	Y+3, r25	; 0x03
    2c28:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2c2a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_LED->ConnType==LED_SOUCE)
    2c2c:	ea 81       	ldd	r30, Y+2	; 0x02
    2c2e:	fb 81       	ldd	r31, Y+3	; 0x03
    2c30:	82 81       	ldd	r24, Z+2	; 0x02
    2c32:	81 30       	cpi	r24, 0x01	; 1
    2c34:	59 f4       	brne	.+22     	; 0x2c4c <LED_u8TurnOn+0x32>
	{
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,DIO_PIN_HIGH);
    2c36:	ea 81       	ldd	r30, Y+2	; 0x02
    2c38:	fb 81       	ldd	r31, Y+3	; 0x03
    2c3a:	80 81       	ld	r24, Z
    2c3c:	ea 81       	ldd	r30, Y+2	; 0x02
    2c3e:	fb 81       	ldd	r31, Y+3	; 0x03
    2c40:	91 81       	ldd	r25, Z+1	; 0x01
    2c42:	69 2f       	mov	r22, r25
    2c44:	41 e0       	ldi	r20, 0x01	; 1
    2c46:	0e 94 27 10 	call	0x204e	; 0x204e <DIO_u8SetPinValue>
    2c4a:	12 c0       	rjmp	.+36     	; 0x2c70 <LED_u8TurnOn+0x56>
	}
	else if(Copy_LED->ConnType==LED_SINK)
    2c4c:	ea 81       	ldd	r30, Y+2	; 0x02
    2c4e:	fb 81       	ldd	r31, Y+3	; 0x03
    2c50:	82 81       	ldd	r24, Z+2	; 0x02
    2c52:	88 23       	and	r24, r24
    2c54:	59 f4       	brne	.+22     	; 0x2c6c <LED_u8TurnOn+0x52>
	{
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,DIO_PIN_LOW);
    2c56:	ea 81       	ldd	r30, Y+2	; 0x02
    2c58:	fb 81       	ldd	r31, Y+3	; 0x03
    2c5a:	80 81       	ld	r24, Z
    2c5c:	ea 81       	ldd	r30, Y+2	; 0x02
    2c5e:	fb 81       	ldd	r31, Y+3	; 0x03
    2c60:	91 81       	ldd	r25, Z+1	; 0x01
    2c62:	69 2f       	mov	r22, r25
    2c64:	40 e0       	ldi	r20, 0x00	; 0
    2c66:	0e 94 27 10 	call	0x204e	; 0x204e <DIO_u8SetPinValue>
    2c6a:	02 c0       	rjmp	.+4      	; 0x2c70 <LED_u8TurnOn+0x56>
	}
	else
		Local_u8ErrorState = NOTOK;
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    2c70:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c72:	0f 90       	pop	r0
    2c74:	0f 90       	pop	r0
    2c76:	0f 90       	pop	r0
    2c78:	cf 91       	pop	r28
    2c7a:	df 91       	pop	r29
    2c7c:	08 95       	ret

00002c7e <LED_u8TurnOff>:
u8 LED_u8TurnOff(LED_t * Copy_LED)
{
    2c7e:	df 93       	push	r29
    2c80:	cf 93       	push	r28
    2c82:	00 d0       	rcall	.+0      	; 0x2c84 <LED_u8TurnOff+0x6>
    2c84:	0f 92       	push	r0
    2c86:	cd b7       	in	r28, 0x3d	; 61
    2c88:	de b7       	in	r29, 0x3e	; 62
    2c8a:	9b 83       	std	Y+3, r25	; 0x03
    2c8c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2c8e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_LED->ConnType==LED_SOUCE)
    2c90:	ea 81       	ldd	r30, Y+2	; 0x02
    2c92:	fb 81       	ldd	r31, Y+3	; 0x03
    2c94:	82 81       	ldd	r24, Z+2	; 0x02
    2c96:	81 30       	cpi	r24, 0x01	; 1
    2c98:	59 f4       	brne	.+22     	; 0x2cb0 <LED_u8TurnOff+0x32>
	{
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,DIO_PIN_LOW);
    2c9a:	ea 81       	ldd	r30, Y+2	; 0x02
    2c9c:	fb 81       	ldd	r31, Y+3	; 0x03
    2c9e:	80 81       	ld	r24, Z
    2ca0:	ea 81       	ldd	r30, Y+2	; 0x02
    2ca2:	fb 81       	ldd	r31, Y+3	; 0x03
    2ca4:	91 81       	ldd	r25, Z+1	; 0x01
    2ca6:	69 2f       	mov	r22, r25
    2ca8:	40 e0       	ldi	r20, 0x00	; 0
    2caa:	0e 94 27 10 	call	0x204e	; 0x204e <DIO_u8SetPinValue>
    2cae:	12 c0       	rjmp	.+36     	; 0x2cd4 <LED_u8TurnOff+0x56>
	}
	else if(Copy_LED->ConnType==LED_SINK)
    2cb0:	ea 81       	ldd	r30, Y+2	; 0x02
    2cb2:	fb 81       	ldd	r31, Y+3	; 0x03
    2cb4:	82 81       	ldd	r24, Z+2	; 0x02
    2cb6:	88 23       	and	r24, r24
    2cb8:	59 f4       	brne	.+22     	; 0x2cd0 <LED_u8TurnOff+0x52>
	{
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,DIO_PIN_HIGH);
    2cba:	ea 81       	ldd	r30, Y+2	; 0x02
    2cbc:	fb 81       	ldd	r31, Y+3	; 0x03
    2cbe:	80 81       	ld	r24, Z
    2cc0:	ea 81       	ldd	r30, Y+2	; 0x02
    2cc2:	fb 81       	ldd	r31, Y+3	; 0x03
    2cc4:	91 81       	ldd	r25, Z+1	; 0x01
    2cc6:	69 2f       	mov	r22, r25
    2cc8:	41 e0       	ldi	r20, 0x01	; 1
    2cca:	0e 94 27 10 	call	0x204e	; 0x204e <DIO_u8SetPinValue>
    2cce:	02 c0       	rjmp	.+4      	; 0x2cd4 <LED_u8TurnOff+0x56>
	}
	else
		Local_u8ErrorState = NOTOK;
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    2cd4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cd6:	0f 90       	pop	r0
    2cd8:	0f 90       	pop	r0
    2cda:	0f 90       	pop	r0
    2cdc:	cf 91       	pop	r28
    2cde:	df 91       	pop	r29
    2ce0:	08 95       	ret

00002ce2 <LED_u8TogLed>:
u8 LED_u8TogLed(LED_t *Copy_LED)
{
    2ce2:	df 93       	push	r29
    2ce4:	cf 93       	push	r28
    2ce6:	00 d0       	rcall	.+0      	; 0x2ce8 <LED_u8TogLed+0x6>
    2ce8:	0f 92       	push	r0
    2cea:	cd b7       	in	r28, 0x3d	; 61
    2cec:	de b7       	in	r29, 0x3e	; 62
    2cee:	9b 83       	std	Y+3, r25	; 0x03
    2cf0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2cf2:	19 82       	std	Y+1, r1	; 0x01
	static u8 Local_u8State = 0;
	if(Copy_LED->ConnType==LED_SOUCE)
    2cf4:	ea 81       	ldd	r30, Y+2	; 0x02
    2cf6:	fb 81       	ldd	r31, Y+3	; 0x03
    2cf8:	82 81       	ldd	r24, Z+2	; 0x02
    2cfa:	81 30       	cpi	r24, 0x01	; 1
    2cfc:	99 f4       	brne	.+38     	; 0x2d24 <LED_u8TogLed+0x42>
	{
		TOG_BIT(Local_u8State,0);
    2cfe:	90 91 a7 01 	lds	r25, 0x01A7
    2d02:	81 e0       	ldi	r24, 0x01	; 1
    2d04:	89 27       	eor	r24, r25
    2d06:	80 93 a7 01 	sts	0x01A7, r24
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,Local_u8State);
    2d0a:	ea 81       	ldd	r30, Y+2	; 0x02
    2d0c:	fb 81       	ldd	r31, Y+3	; 0x03
    2d0e:	80 81       	ld	r24, Z
    2d10:	ea 81       	ldd	r30, Y+2	; 0x02
    2d12:	fb 81       	ldd	r31, Y+3	; 0x03
    2d14:	91 81       	ldd	r25, Z+1	; 0x01
    2d16:	20 91 a7 01 	lds	r18, 0x01A7
    2d1a:	69 2f       	mov	r22, r25
    2d1c:	42 2f       	mov	r20, r18
    2d1e:	0e 94 27 10 	call	0x204e	; 0x204e <DIO_u8SetPinValue>
    2d22:	1a c0       	rjmp	.+52     	; 0x2d58 <LED_u8TogLed+0x76>
	}
	else if(Copy_LED->ConnType==LED_SINK)
    2d24:	ea 81       	ldd	r30, Y+2	; 0x02
    2d26:	fb 81       	ldd	r31, Y+3	; 0x03
    2d28:	82 81       	ldd	r24, Z+2	; 0x02
    2d2a:	88 23       	and	r24, r24
    2d2c:	99 f4       	brne	.+38     	; 0x2d54 <LED_u8TogLed+0x72>
	{
		TOG_BIT(Local_u8State,0);
    2d2e:	90 91 a7 01 	lds	r25, 0x01A7
    2d32:	81 e0       	ldi	r24, 0x01	; 1
    2d34:	89 27       	eor	r24, r25
    2d36:	80 93 a7 01 	sts	0x01A7, r24
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,Local_u8State);
    2d3a:	ea 81       	ldd	r30, Y+2	; 0x02
    2d3c:	fb 81       	ldd	r31, Y+3	; 0x03
    2d3e:	80 81       	ld	r24, Z
    2d40:	ea 81       	ldd	r30, Y+2	; 0x02
    2d42:	fb 81       	ldd	r31, Y+3	; 0x03
    2d44:	91 81       	ldd	r25, Z+1	; 0x01
    2d46:	20 91 a7 01 	lds	r18, 0x01A7
    2d4a:	69 2f       	mov	r22, r25
    2d4c:	42 2f       	mov	r20, r18
    2d4e:	0e 94 27 10 	call	0x204e	; 0x204e <DIO_u8SetPinValue>
    2d52:	02 c0       	rjmp	.+4      	; 0x2d58 <LED_u8TogLed+0x76>
	}
	else
		Local_u8ErrorState = NOTOK;
    2d54:	81 e0       	ldi	r24, 0x01	; 1
    2d56:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    2d58:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d5a:	0f 90       	pop	r0
    2d5c:	0f 90       	pop	r0
    2d5e:	0f 90       	pop	r0
    2d60:	cf 91       	pop	r28
    2d62:	df 91       	pop	r29
    2d64:	08 95       	ret

00002d66 <PORT_voidInit>:
#include "../MCAL/PORT_config.h"
#include "../MCAL/PORT_register.h"
#include "../MCAL/PORT_interface.h"

void PORT_voidInit()
{
    2d66:	df 93       	push	r29
    2d68:	cf 93       	push	r28
    2d6a:	cd b7       	in	r28, 0x3d	; 61
    2d6c:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;	
    2d6e:	ea e3       	ldi	r30, 0x3A	; 58
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	87 ef       	ldi	r24, 0xF7	; 247
    2d74:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    2d76:	e7 e3       	ldi	r30, 0x37	; 55
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	8f e0       	ldi	r24, 0x0F	; 15
    2d7c:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    2d7e:	e4 e3       	ldi	r30, 0x34	; 52
    2d80:	f0 e0       	ldi	r31, 0x00	; 0
    2d82:	10 82       	st	Z, r1
	DDRD = PORTD_DIR;
    2d84:	e1 e3       	ldi	r30, 0x31	; 49
    2d86:	f0 e0       	ldi	r31, 0x00	; 0
    2d88:	80 e2       	ldi	r24, 0x20	; 32
    2d8a:	80 83       	st	Z, r24
	
	PORTA =PORTA_INIT_VALUE;
    2d8c:	eb e3       	ldi	r30, 0x3B	; 59
    2d8e:	f0 e0       	ldi	r31, 0x00	; 0
    2d90:	88 e0       	ldi	r24, 0x08	; 8
    2d92:	80 83       	st	Z, r24
	PORTB =PORTB_INIT_VALUE;
    2d94:	e8 e3       	ldi	r30, 0x38	; 56
    2d96:	f0 e0       	ldi	r31, 0x00	; 0
    2d98:	10 82       	st	Z, r1
	PORTC =PORTC_INIT_VALUE;
    2d9a:	e5 e3       	ldi	r30, 0x35	; 53
    2d9c:	f0 e0       	ldi	r31, 0x00	; 0
    2d9e:	10 82       	st	Z, r1
	PORTD =PORTD_INIT_VALUE;
    2da0:	e2 e3       	ldi	r30, 0x32	; 50
    2da2:	f0 e0       	ldi	r31, 0x00	; 0
    2da4:	10 82       	st	Z, r1
	
}
    2da6:	cf 91       	pop	r28
    2da8:	df 91       	pop	r29
    2daa:	08 95       	ret

00002dac <SERVO_voidSetAngle>:
#include "../HAL/SERVO_config.h"
#include "../HAL/SERVO_interface.h"


void SERVO_voidSetAngle(u16 Copy_u16Angle)
{
    2dac:	af 92       	push	r10
    2dae:	bf 92       	push	r11
    2db0:	cf 92       	push	r12
    2db2:	df 92       	push	r13
    2db4:	ef 92       	push	r14
    2db6:	ff 92       	push	r15
    2db8:	0f 93       	push	r16
    2dba:	1f 93       	push	r17
    2dbc:	df 93       	push	r29
    2dbe:	cf 93       	push	r28
    2dc0:	cd b7       	in	r28, 0x3d	; 61
    2dc2:	de b7       	in	r29, 0x3e	; 62
    2dc4:	60 97       	sbiw	r28, 0x10	; 16
    2dc6:	0f b6       	in	r0, 0x3f	; 63
    2dc8:	f8 94       	cli
    2dca:	de bf       	out	0x3e, r29	; 62
    2dcc:	0f be       	out	0x3f, r0	; 63
    2dce:	cd bf       	out	0x3d, r28	; 61
    2dd0:	9b 87       	std	Y+11, r25	; 0x0b
    2dd2:	8a 87       	std	Y+10, r24	; 0x0a
	u32 Local_u32Angle=0;
    2dd4:	19 82       	std	Y+1, r1	; 0x01
    2dd6:	1a 82       	std	Y+2, r1	; 0x02
    2dd8:	1b 82       	std	Y+3, r1	; 0x03
    2dda:	1c 82       	std	Y+4, r1	; 0x04
	Timer_t t1 = {TIMER1,TIMER1_IC_FAST_PWM,OC1A_CCST,TIMER_DIV_8,TIMER1A_INT_DISABLE};
    2ddc:	ce 01       	movw	r24, r28
    2dde:	05 96       	adiw	r24, 0x05	; 5
    2de0:	9d 87       	std	Y+13, r25	; 0x0d
    2de2:	8c 87       	std	Y+12, r24	; 0x0c
    2de4:	ed e8       	ldi	r30, 0x8D	; 141
    2de6:	f1 e0       	ldi	r31, 0x01	; 1
    2de8:	ff 87       	std	Y+15, r31	; 0x0f
    2dea:	ee 87       	std	Y+14, r30	; 0x0e
    2dec:	f5 e0       	ldi	r31, 0x05	; 5
    2dee:	f8 8b       	std	Y+16, r31	; 0x10
    2df0:	ee 85       	ldd	r30, Y+14	; 0x0e
    2df2:	ff 85       	ldd	r31, Y+15	; 0x0f
    2df4:	00 80       	ld	r0, Z
    2df6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2df8:	9f 85       	ldd	r25, Y+15	; 0x0f
    2dfa:	01 96       	adiw	r24, 0x01	; 1
    2dfc:	9f 87       	std	Y+15, r25	; 0x0f
    2dfe:	8e 87       	std	Y+14, r24	; 0x0e
    2e00:	ec 85       	ldd	r30, Y+12	; 0x0c
    2e02:	fd 85       	ldd	r31, Y+13	; 0x0d
    2e04:	00 82       	st	Z, r0
    2e06:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e08:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e0a:	01 96       	adiw	r24, 0x01	; 1
    2e0c:	9d 87       	std	Y+13, r25	; 0x0d
    2e0e:	8c 87       	std	Y+12, r24	; 0x0c
    2e10:	98 89       	ldd	r25, Y+16	; 0x10
    2e12:	91 50       	subi	r25, 0x01	; 1
    2e14:	98 8b       	std	Y+16, r25	; 0x10
    2e16:	e8 89       	ldd	r30, Y+16	; 0x10
    2e18:	ee 23       	and	r30, r30
    2e1a:	51 f7       	brne	.-44     	; 0x2df0 <SERVO_voidSetAngle+0x44>
	TIMER_voidInit(&t1);
    2e1c:	ce 01       	movw	r24, r28
    2e1e:	05 96       	adiw	r24, 0x05	; 5
    2e20:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <TIMER_voidInit>
	Local_u32Angle = Map(0,180,750,2500,Copy_u16Angle);
    2e24:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e26:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e28:	cc 01       	movw	r24, r24
    2e2a:	a0 e0       	ldi	r26, 0x00	; 0
    2e2c:	b0 e0       	ldi	r27, 0x00	; 0
    2e2e:	00 d0       	rcall	.+0      	; 0x2e30 <SERVO_voidSetAngle+0x84>
    2e30:	00 d0       	rcall	.+0      	; 0x2e32 <SERVO_voidSetAngle+0x86>
    2e32:	ed b7       	in	r30, 0x3d	; 61
    2e34:	fe b7       	in	r31, 0x3e	; 62
    2e36:	31 96       	adiw	r30, 0x01	; 1
    2e38:	80 83       	st	Z, r24
    2e3a:	91 83       	std	Z+1, r25	; 0x01
    2e3c:	a2 83       	std	Z+2, r26	; 0x02
    2e3e:	b3 83       	std	Z+3, r27	; 0x03
    2e40:	60 e0       	ldi	r22, 0x00	; 0
    2e42:	70 e0       	ldi	r23, 0x00	; 0
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	24 eb       	ldi	r18, 0xB4	; 180
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	40 e0       	ldi	r20, 0x00	; 0
    2e4e:	50 e0       	ldi	r21, 0x00	; 0
    2e50:	0f 2e       	mov	r0, r31
    2e52:	fe ee       	ldi	r31, 0xEE	; 238
    2e54:	ef 2e       	mov	r14, r31
    2e56:	f2 e0       	ldi	r31, 0x02	; 2
    2e58:	ff 2e       	mov	r15, r31
    2e5a:	f0 e0       	ldi	r31, 0x00	; 0
    2e5c:	0f 2f       	mov	r16, r31
    2e5e:	f0 e0       	ldi	r31, 0x00	; 0
    2e60:	1f 2f       	mov	r17, r31
    2e62:	f0 2d       	mov	r31, r0
    2e64:	0f 2e       	mov	r0, r31
    2e66:	f4 ec       	ldi	r31, 0xC4	; 196
    2e68:	af 2e       	mov	r10, r31
    2e6a:	f9 e0       	ldi	r31, 0x09	; 9
    2e6c:	bf 2e       	mov	r11, r31
    2e6e:	f0 e0       	ldi	r31, 0x00	; 0
    2e70:	cf 2e       	mov	r12, r31
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	df 2e       	mov	r13, r31
    2e76:	f0 2d       	mov	r31, r0
    2e78:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <Map>
    2e7c:	0f 90       	pop	r0
    2e7e:	0f 90       	pop	r0
    2e80:	0f 90       	pop	r0
    2e82:	0f 90       	pop	r0
    2e84:	dc 01       	movw	r26, r24
    2e86:	cb 01       	movw	r24, r22
    2e88:	89 83       	std	Y+1, r24	; 0x01
    2e8a:	9a 83       	std	Y+2, r25	; 0x02
    2e8c:	ab 83       	std	Y+3, r26	; 0x03
    2e8e:	bc 83       	std	Y+4, r27	; 0x04
	TIMER1_voidSetICR(20000);
    2e90:	80 e2       	ldi	r24, 0x20	; 32
    2e92:	9e e4       	ldi	r25, 0x4E	; 78
    2e94:	0e 94 12 24 	call	0x4824	; 0x4824 <TIMER1_voidSetICR>
	TIMER1_voidSetChannelACompMatch(Local_u32Angle);
    2e98:	89 81       	ldd	r24, Y+1	; 0x01
    2e9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e9c:	0e 94 36 24 	call	0x486c	; 0x486c <TIMER1_voidSetChannelACompMatch>
}
    2ea0:	60 96       	adiw	r28, 0x10	; 16
    2ea2:	0f b6       	in	r0, 0x3f	; 63
    2ea4:	f8 94       	cli
    2ea6:	de bf       	out	0x3e, r29	; 62
    2ea8:	0f be       	out	0x3f, r0	; 63
    2eaa:	cd bf       	out	0x3d, r28	; 61
    2eac:	cf 91       	pop	r28
    2eae:	df 91       	pop	r29
    2eb0:	1f 91       	pop	r17
    2eb2:	0f 91       	pop	r16
    2eb4:	ff 90       	pop	r15
    2eb6:	ef 90       	pop	r14
    2eb8:	df 90       	pop	r13
    2eba:	cf 90       	pop	r12
    2ebc:	bf 90       	pop	r11
    2ebe:	af 90       	pop	r10
    2ec0:	08 95       	ret

00002ec2 <Map>:


static u32 Map(u32 InMin,u32 InMax,u32 OutMin,u32 OutMax,u32 InVal)
{
    2ec2:	af 92       	push	r10
    2ec4:	bf 92       	push	r11
    2ec6:	cf 92       	push	r12
    2ec8:	df 92       	push	r13
    2eca:	ef 92       	push	r14
    2ecc:	ff 92       	push	r15
    2ece:	0f 93       	push	r16
    2ed0:	1f 93       	push	r17
    2ed2:	df 93       	push	r29
    2ed4:	cf 93       	push	r28
    2ed6:	cd b7       	in	r28, 0x3d	; 61
    2ed8:	de b7       	in	r29, 0x3e	; 62
    2eda:	64 97       	sbiw	r28, 0x14	; 20
    2edc:	0f b6       	in	r0, 0x3f	; 63
    2ede:	f8 94       	cli
    2ee0:	de bf       	out	0x3e, r29	; 62
    2ee2:	0f be       	out	0x3f, r0	; 63
    2ee4:	cd bf       	out	0x3d, r28	; 61
    2ee6:	6d 83       	std	Y+5, r22	; 0x05
    2ee8:	7e 83       	std	Y+6, r23	; 0x06
    2eea:	8f 83       	std	Y+7, r24	; 0x07
    2eec:	98 87       	std	Y+8, r25	; 0x08
    2eee:	29 87       	std	Y+9, r18	; 0x09
    2ef0:	3a 87       	std	Y+10, r19	; 0x0a
    2ef2:	4b 87       	std	Y+11, r20	; 0x0b
    2ef4:	5c 87       	std	Y+12, r21	; 0x0c
    2ef6:	ed 86       	std	Y+13, r14	; 0x0d
    2ef8:	fe 86       	std	Y+14, r15	; 0x0e
    2efa:	0f 87       	std	Y+15, r16	; 0x0f
    2efc:	18 8b       	std	Y+16, r17	; 0x10
    2efe:	a9 8a       	std	Y+17, r10	; 0x11
    2f00:	ba 8a       	std	Y+18, r11	; 0x12
    2f02:	cb 8a       	std	Y+19, r12	; 0x13
    2f04:	dc 8a       	std	Y+20, r13	; 0x14
	u32 Local=0;
    2f06:	19 82       	std	Y+1, r1	; 0x01
    2f08:	1a 82       	std	Y+2, r1	; 0x02
    2f0a:	1b 82       	std	Y+3, r1	; 0x03
    2f0c:	1c 82       	std	Y+4, r1	; 0x04
	Local = (((InVal-InMin)*(OutMax-OutMin))/(InMax-InMin))+OutMin;
    2f0e:	29 a1       	ldd	r18, Y+33	; 0x21
    2f10:	3a a1       	ldd	r19, Y+34	; 0x22
    2f12:	4b a1       	ldd	r20, Y+35	; 0x23
    2f14:	5c a1       	ldd	r21, Y+36	; 0x24
    2f16:	8d 81       	ldd	r24, Y+5	; 0x05
    2f18:	9e 81       	ldd	r25, Y+6	; 0x06
    2f1a:	af 81       	ldd	r26, Y+7	; 0x07
    2f1c:	b8 85       	ldd	r27, Y+8	; 0x08
    2f1e:	79 01       	movw	r14, r18
    2f20:	8a 01       	movw	r16, r20
    2f22:	e8 1a       	sub	r14, r24
    2f24:	f9 0a       	sbc	r15, r25
    2f26:	0a 0b       	sbc	r16, r26
    2f28:	1b 0b       	sbc	r17, r27
    2f2a:	29 89       	ldd	r18, Y+17	; 0x11
    2f2c:	3a 89       	ldd	r19, Y+18	; 0x12
    2f2e:	4b 89       	ldd	r20, Y+19	; 0x13
    2f30:	5c 89       	ldd	r21, Y+20	; 0x14
    2f32:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f34:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f36:	af 85       	ldd	r26, Y+15	; 0x0f
    2f38:	b8 89       	ldd	r27, Y+16	; 0x10
    2f3a:	28 1b       	sub	r18, r24
    2f3c:	39 0b       	sbc	r19, r25
    2f3e:	4a 0b       	sbc	r20, r26
    2f40:	5b 0b       	sbc	r21, r27
    2f42:	c8 01       	movw	r24, r16
    2f44:	b7 01       	movw	r22, r14
    2f46:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <__mulsi3>
    2f4a:	7b 01       	movw	r14, r22
    2f4c:	8c 01       	movw	r16, r24
    2f4e:	29 85       	ldd	r18, Y+9	; 0x09
    2f50:	3a 85       	ldd	r19, Y+10	; 0x0a
    2f52:	4b 85       	ldd	r20, Y+11	; 0x0b
    2f54:	5c 85       	ldd	r21, Y+12	; 0x0c
    2f56:	8d 81       	ldd	r24, Y+5	; 0x05
    2f58:	9e 81       	ldd	r25, Y+6	; 0x06
    2f5a:	af 81       	ldd	r26, Y+7	; 0x07
    2f5c:	b8 85       	ldd	r27, Y+8	; 0x08
    2f5e:	28 1b       	sub	r18, r24
    2f60:	39 0b       	sbc	r19, r25
    2f62:	4a 0b       	sbc	r20, r26
    2f64:	5b 0b       	sbc	r21, r27
    2f66:	c8 01       	movw	r24, r16
    2f68:	b7 01       	movw	r22, r14
    2f6a:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    2f6e:	da 01       	movw	r26, r20
    2f70:	c9 01       	movw	r24, r18
    2f72:	9c 01       	movw	r18, r24
    2f74:	ad 01       	movw	r20, r26
    2f76:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f78:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f7a:	af 85       	ldd	r26, Y+15	; 0x0f
    2f7c:	b8 89       	ldd	r27, Y+16	; 0x10
    2f7e:	82 0f       	add	r24, r18
    2f80:	93 1f       	adc	r25, r19
    2f82:	a4 1f       	adc	r26, r20
    2f84:	b5 1f       	adc	r27, r21
    2f86:	89 83       	std	Y+1, r24	; 0x01
    2f88:	9a 83       	std	Y+2, r25	; 0x02
    2f8a:	ab 83       	std	Y+3, r26	; 0x03
    2f8c:	bc 83       	std	Y+4, r27	; 0x04
	return Local;
    2f8e:	89 81       	ldd	r24, Y+1	; 0x01
    2f90:	9a 81       	ldd	r25, Y+2	; 0x02
    2f92:	ab 81       	ldd	r26, Y+3	; 0x03
    2f94:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2f96:	bc 01       	movw	r22, r24
    2f98:	cd 01       	movw	r24, r26
    2f9a:	64 96       	adiw	r28, 0x14	; 20
    2f9c:	0f b6       	in	r0, 0x3f	; 63
    2f9e:	f8 94       	cli
    2fa0:	de bf       	out	0x3e, r29	; 62
    2fa2:	0f be       	out	0x3f, r0	; 63
    2fa4:	cd bf       	out	0x3d, r28	; 61
    2fa6:	cf 91       	pop	r28
    2fa8:	df 91       	pop	r29
    2faa:	1f 91       	pop	r17
    2fac:	0f 91       	pop	r16
    2fae:	ff 90       	pop	r15
    2fb0:	ef 90       	pop	r14
    2fb2:	df 90       	pop	r13
    2fb4:	cf 90       	pop	r12
    2fb6:	bf 90       	pop	r11
    2fb8:	af 90       	pop	r10
    2fba:	08 95       	ret

00002fbc <SSD_u8SetNumber>:
#include "../HAL/SSD_private.h"
#include "../HAL/SSD_config.h"
#include "../HAL/SSD_interface.h"

u8 SSD_u8SetNumber(u8 Copy_u8Number,SSD_t *Copy_SSD)
{
    2fbc:	df 93       	push	r29
    2fbe:	cf 93       	push	r28
    2fc0:	00 d0       	rcall	.+0      	; 0x2fc2 <SSD_u8SetNumber+0x6>
    2fc2:	00 d0       	rcall	.+0      	; 0x2fc4 <SSD_u8SetNumber+0x8>
    2fc4:	cd b7       	in	r28, 0x3d	; 61
    2fc6:	de b7       	in	r29, 0x3e	; 62
    2fc8:	8a 83       	std	Y+2, r24	; 0x02
    2fca:	7c 83       	std	Y+4, r23	; 0x04
    2fcc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState= OK;
    2fce:	19 82       	std	Y+1, r1	; 0x01
	static u8 SSD_Arr[10] = SSD_ARR_OF_NUM;
	if(Copy_SSD->ComType==ANODE)
    2fd0:	eb 81       	ldd	r30, Y+3	; 0x03
    2fd2:	fc 81       	ldd	r31, Y+4	; 0x04
    2fd4:	80 81       	ld	r24, Z
    2fd6:	88 23       	and	r24, r24
    2fd8:	91 f4       	brne	.+36     	; 0x2ffe <SSD_u8SetNumber+0x42>
	{
		Local_u8ErrorState = DIO_u8SetPortValue(Copy_SSD->Port,~SSD_Arr[Copy_u8Number]);
    2fda:	eb 81       	ldd	r30, Y+3	; 0x03
    2fdc:	fc 81       	ldd	r31, Y+4	; 0x04
    2fde:	21 81       	ldd	r18, Z+1	; 0x01
    2fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe2:	88 2f       	mov	r24, r24
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	fc 01       	movw	r30, r24
    2fe8:	e0 58       	subi	r30, 0x80	; 128
    2fea:	fe 4f       	sbci	r31, 0xFE	; 254
    2fec:	80 81       	ld	r24, Z
    2fee:	98 2f       	mov	r25, r24
    2ff0:	90 95       	com	r25
    2ff2:	82 2f       	mov	r24, r18
    2ff4:	69 2f       	mov	r22, r25
    2ff6:	0e 94 40 11 	call	0x2280	; 0x2280 <DIO_u8SetPortValue>
    2ffa:	89 83       	std	Y+1, r24	; 0x01
    2ffc:	17 c0       	rjmp	.+46     	; 0x302c <SSD_u8SetNumber+0x70>
	}
	else if(Copy_SSD->ComType==CATHODE )
    2ffe:	eb 81       	ldd	r30, Y+3	; 0x03
    3000:	fc 81       	ldd	r31, Y+4	; 0x04
    3002:	80 81       	ld	r24, Z
    3004:	81 30       	cpi	r24, 0x01	; 1
    3006:	81 f4       	brne	.+32     	; 0x3028 <SSD_u8SetNumber+0x6c>
	{
		Local_u8ErrorState = DIO_u8SetPortValue(Copy_SSD->Port,SSD_Arr[Copy_u8Number]);
    3008:	eb 81       	ldd	r30, Y+3	; 0x03
    300a:	fc 81       	ldd	r31, Y+4	; 0x04
    300c:	21 81       	ldd	r18, Z+1	; 0x01
    300e:	8a 81       	ldd	r24, Y+2	; 0x02
    3010:	88 2f       	mov	r24, r24
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	fc 01       	movw	r30, r24
    3016:	e0 58       	subi	r30, 0x80	; 128
    3018:	fe 4f       	sbci	r31, 0xFE	; 254
    301a:	90 81       	ld	r25, Z
    301c:	82 2f       	mov	r24, r18
    301e:	69 2f       	mov	r22, r25
    3020:	0e 94 40 11 	call	0x2280	; 0x2280 <DIO_u8SetPortValue>
    3024:	89 83       	std	Y+1, r24	; 0x01
    3026:	02 c0       	rjmp	.+4      	; 0x302c <SSD_u8SetNumber+0x70>
	}
	else
		Local_u8ErrorState = NOTOK;
    3028:	81 e0       	ldi	r24, 0x01	; 1
    302a:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    302c:	89 81       	ldd	r24, Y+1	; 0x01

}
    302e:	0f 90       	pop	r0
    3030:	0f 90       	pop	r0
    3032:	0f 90       	pop	r0
    3034:	0f 90       	pop	r0
    3036:	cf 91       	pop	r28
    3038:	df 91       	pop	r29
    303a:	08 95       	ret

0000303c <SSD_u8Enable>:
u8 SSD_u8Enable(SSD_t *Copy_SSD)
{
    303c:	df 93       	push	r29
    303e:	cf 93       	push	r28
    3040:	00 d0       	rcall	.+0      	; 0x3042 <SSD_u8Enable+0x6>
    3042:	0f 92       	push	r0
    3044:	cd b7       	in	r28, 0x3d	; 61
    3046:	de b7       	in	r29, 0x3e	; 62
    3048:	9b 83       	std	Y+3, r25	; 0x03
    304a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState= OK;
    304c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_SSD->ComType==ANODE)
    304e:	ea 81       	ldd	r30, Y+2	; 0x02
    3050:	fb 81       	ldd	r31, Y+3	; 0x03
    3052:	80 81       	ld	r24, Z
    3054:	88 23       	and	r24, r24
    3056:	61 f4       	brne	.+24     	; 0x3070 <SSD_u8Enable+0x34>
	{
		Local_u8ErrorState = DIO_u8SetPinValue(Copy_SSD->EnablePort,Copy_SSD->EnablePin,DIO_PIN_HIGH);
    3058:	ea 81       	ldd	r30, Y+2	; 0x02
    305a:	fb 81       	ldd	r31, Y+3	; 0x03
    305c:	82 81       	ldd	r24, Z+2	; 0x02
    305e:	ea 81       	ldd	r30, Y+2	; 0x02
    3060:	fb 81       	ldd	r31, Y+3	; 0x03
    3062:	93 81       	ldd	r25, Z+3	; 0x03
    3064:	69 2f       	mov	r22, r25
    3066:	41 e0       	ldi	r20, 0x01	; 1
    3068:	0e 94 27 10 	call	0x204e	; 0x204e <DIO_u8SetPinValue>
    306c:	89 83       	std	Y+1, r24	; 0x01
    306e:	13 c0       	rjmp	.+38     	; 0x3096 <SSD_u8Enable+0x5a>
	}
	else if(Copy_SSD->ComType==CATHODE )
    3070:	ea 81       	ldd	r30, Y+2	; 0x02
    3072:	fb 81       	ldd	r31, Y+3	; 0x03
    3074:	80 81       	ld	r24, Z
    3076:	81 30       	cpi	r24, 0x01	; 1
    3078:	61 f4       	brne	.+24     	; 0x3092 <SSD_u8Enable+0x56>
	{
		Local_u8ErrorState = DIO_u8SetPinValue(Copy_SSD->EnablePort,Copy_SSD->EnablePin,DIO_PIN_LOW);
    307a:	ea 81       	ldd	r30, Y+2	; 0x02
    307c:	fb 81       	ldd	r31, Y+3	; 0x03
    307e:	82 81       	ldd	r24, Z+2	; 0x02
    3080:	ea 81       	ldd	r30, Y+2	; 0x02
    3082:	fb 81       	ldd	r31, Y+3	; 0x03
    3084:	93 81       	ldd	r25, Z+3	; 0x03
    3086:	69 2f       	mov	r22, r25
    3088:	40 e0       	ldi	r20, 0x00	; 0
    308a:	0e 94 27 10 	call	0x204e	; 0x204e <DIO_u8SetPinValue>
    308e:	89 83       	std	Y+1, r24	; 0x01
    3090:	02 c0       	rjmp	.+4      	; 0x3096 <SSD_u8Enable+0x5a>
	}
	else
		Local_u8ErrorState = NOTOK;
    3092:	81 e0       	ldi	r24, 0x01	; 1
    3094:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    3096:	89 81       	ldd	r24, Y+1	; 0x01
}
    3098:	0f 90       	pop	r0
    309a:	0f 90       	pop	r0
    309c:	0f 90       	pop	r0
    309e:	cf 91       	pop	r28
    30a0:	df 91       	pop	r29
    30a2:	08 95       	ret

000030a4 <SSD_u8Disable>:

u8 SSD_u8Disable(SSD_t *Copy_SSD)
{
    30a4:	df 93       	push	r29
    30a6:	cf 93       	push	r28
    30a8:	00 d0       	rcall	.+0      	; 0x30aa <SSD_u8Disable+0x6>
    30aa:	0f 92       	push	r0
    30ac:	cd b7       	in	r28, 0x3d	; 61
    30ae:	de b7       	in	r29, 0x3e	; 62
    30b0:	9b 83       	std	Y+3, r25	; 0x03
    30b2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState= OK;
    30b4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_SSD->ComType==ANODE)
    30b6:	ea 81       	ldd	r30, Y+2	; 0x02
    30b8:	fb 81       	ldd	r31, Y+3	; 0x03
    30ba:	80 81       	ld	r24, Z
    30bc:	88 23       	and	r24, r24
    30be:	61 f4       	brne	.+24     	; 0x30d8 <SSD_u8Disable+0x34>
	{
		Local_u8ErrorState = DIO_u8SetPinValue(Copy_SSD->EnablePort,Copy_SSD->EnablePin,DIO_PIN_LOW);
    30c0:	ea 81       	ldd	r30, Y+2	; 0x02
    30c2:	fb 81       	ldd	r31, Y+3	; 0x03
    30c4:	82 81       	ldd	r24, Z+2	; 0x02
    30c6:	ea 81       	ldd	r30, Y+2	; 0x02
    30c8:	fb 81       	ldd	r31, Y+3	; 0x03
    30ca:	93 81       	ldd	r25, Z+3	; 0x03
    30cc:	69 2f       	mov	r22, r25
    30ce:	40 e0       	ldi	r20, 0x00	; 0
    30d0:	0e 94 27 10 	call	0x204e	; 0x204e <DIO_u8SetPinValue>
    30d4:	89 83       	std	Y+1, r24	; 0x01
    30d6:	13 c0       	rjmp	.+38     	; 0x30fe <SSD_u8Disable+0x5a>
	}
	else if(Copy_SSD->ComType==CATHODE )
    30d8:	ea 81       	ldd	r30, Y+2	; 0x02
    30da:	fb 81       	ldd	r31, Y+3	; 0x03
    30dc:	80 81       	ld	r24, Z
    30de:	81 30       	cpi	r24, 0x01	; 1
    30e0:	61 f4       	brne	.+24     	; 0x30fa <SSD_u8Disable+0x56>
	{
		Local_u8ErrorState = DIO_u8SetPinValue(Copy_SSD->EnablePort,Copy_SSD->EnablePin,DIO_PIN_HIGH);
    30e2:	ea 81       	ldd	r30, Y+2	; 0x02
    30e4:	fb 81       	ldd	r31, Y+3	; 0x03
    30e6:	82 81       	ldd	r24, Z+2	; 0x02
    30e8:	ea 81       	ldd	r30, Y+2	; 0x02
    30ea:	fb 81       	ldd	r31, Y+3	; 0x03
    30ec:	93 81       	ldd	r25, Z+3	; 0x03
    30ee:	69 2f       	mov	r22, r25
    30f0:	41 e0       	ldi	r20, 0x01	; 1
    30f2:	0e 94 27 10 	call	0x204e	; 0x204e <DIO_u8SetPinValue>
    30f6:	89 83       	std	Y+1, r24	; 0x01
    30f8:	02 c0       	rjmp	.+4      	; 0x30fe <SSD_u8Disable+0x5a>
	}
	else
		Local_u8ErrorState = NOTOK;
    30fa:	81 e0       	ldi	r24, 0x01	; 1
    30fc:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    30fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    3100:	0f 90       	pop	r0
    3102:	0f 90       	pop	r0
    3104:	0f 90       	pop	r0
    3106:	cf 91       	pop	r28
    3108:	df 91       	pop	r29
    310a:	08 95       	ret

0000310c <STEP_MOTORu8StartFullMode>:
#include "../HAL/STEP_MOTOR_config.h"
#include "../HAL/STEP_MOTOR_private.h"
#include "../HAL/STEP_MOTOR_interface.h"
#include "../HAL/CLCD_interface.h"
u8 STEP_MOTORu8StartFullMode(STEP_t *Copy_pStep)
{
    310c:	df 93       	push	r29
    310e:	cf 93       	push	r28
    3110:	cd b7       	in	r28, 0x3d	; 61
    3112:	de b7       	in	r29, 0x3e	; 62
    3114:	c2 54       	subi	r28, 0x42	; 66
    3116:	d0 40       	sbci	r29, 0x00	; 0
    3118:	0f b6       	in	r0, 0x3f	; 63
    311a:	f8 94       	cli
    311c:	de bf       	out	0x3e, r29	; 62
    311e:	0f be       	out	0x3f, r0	; 63
    3120:	cd bf       	out	0x3d, r28	; 61
    3122:	fe 01       	movw	r30, r28
    3124:	ef 5b       	subi	r30, 0xBF	; 191
    3126:	ff 4f       	sbci	r31, 0xFF	; 255
    3128:	91 83       	std	Z+1, r25	; 0x01
    312a:	80 83       	st	Z, r24
	u8 Local_u8ErrorState = OK;
    312c:	fe 01       	movw	r30, r28
    312e:	e0 5c       	subi	r30, 0xC0	; 192
    3130:	ff 4f       	sbci	r31, 0xFF	; 255
    3132:	10 82       	st	Z, r1
	u16 Local_u16NumOfSteps = (u16)((((f32)Copy_pStep->AngleDegree)/11.2)*64.0);
    3134:	fe 01       	movw	r30, r28
    3136:	ef 5b       	subi	r30, 0xBF	; 191
    3138:	ff 4f       	sbci	r31, 0xFF	; 255
    313a:	01 90       	ld	r0, Z+
    313c:	f0 81       	ld	r31, Z
    313e:	e0 2d       	mov	r30, r0
    3140:	83 81       	ldd	r24, Z+3	; 0x03
    3142:	94 81       	ldd	r25, Z+4	; 0x04
    3144:	cc 01       	movw	r24, r24
    3146:	a0 e0       	ldi	r26, 0x00	; 0
    3148:	b0 e0       	ldi	r27, 0x00	; 0
    314a:	bc 01       	movw	r22, r24
    314c:	cd 01       	movw	r24, r26
    314e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3152:	dc 01       	movw	r26, r24
    3154:	cb 01       	movw	r24, r22
    3156:	bc 01       	movw	r22, r24
    3158:	cd 01       	movw	r24, r26
    315a:	23 e3       	ldi	r18, 0x33	; 51
    315c:	33 e3       	ldi	r19, 0x33	; 51
    315e:	43 e3       	ldi	r20, 0x33	; 51
    3160:	51 e4       	ldi	r21, 0x41	; 65
    3162:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3166:	dc 01       	movw	r26, r24
    3168:	cb 01       	movw	r24, r22
    316a:	bc 01       	movw	r22, r24
    316c:	cd 01       	movw	r24, r26
    316e:	20 e0       	ldi	r18, 0x00	; 0
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	40 e8       	ldi	r20, 0x80	; 128
    3174:	52 e4       	ldi	r21, 0x42	; 66
    3176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    317a:	dc 01       	movw	r26, r24
    317c:	cb 01       	movw	r24, r22
    317e:	bc 01       	movw	r22, r24
    3180:	cd 01       	movw	r24, r26
    3182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3186:	dc 01       	movw	r26, r24
    3188:	cb 01       	movw	r24, r22
    318a:	9f af       	std	Y+63, r25	; 0x3f
    318c:	8e af       	std	Y+62, r24	; 0x3e
	u16 Local_u16MaxItration = (Local_u16NumOfSteps/MAX_FULL_STEP );
    318e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3190:	9f ad       	ldd	r25, Y+63	; 0x3f
    3192:	96 95       	lsr	r25
    3194:	87 95       	ror	r24
    3196:	96 95       	lsr	r25
    3198:	87 95       	ror	r24
    319a:	9d af       	std	Y+61, r25	; 0x3d
    319c:	8c af       	std	Y+60, r24	; 0x3c
	u16 Local_u16Counter = 0;
    319e:	1b ae       	std	Y+59, r1	; 0x3b
    31a0:	1a ae       	std	Y+58, r1	; 0x3a
	u8 Local_u8ItrateStep = 0;
    31a2:	19 ae       	std	Y+57, r1	; 0x39
	if(STEP_LOWER_NIBBLE == Copy_pStep->Nibble)
    31a4:	fe 01       	movw	r30, r28
    31a6:	ef 5b       	subi	r30, 0xBF	; 191
    31a8:	ff 4f       	sbci	r31, 0xFF	; 255
    31aa:	01 90       	ld	r0, Z+
    31ac:	f0 81       	ld	r31, Z
    31ae:	e0 2d       	mov	r30, r0
    31b0:	81 81       	ldd	r24, Z+1	; 0x01
    31b2:	88 23       	and	r24, r24
    31b4:	09 f0       	breq	.+2      	; 0x31b8 <STEP_MOTORu8StartFullMode+0xac>
    31b6:	5e c1       	rjmp	.+700    	; 0x3474 <STEP_MOTORu8StartFullMode+0x368>
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
    31b8:	fe 01       	movw	r30, r28
    31ba:	ef 5b       	subi	r30, 0xBF	; 191
    31bc:	ff 4f       	sbci	r31, 0xFF	; 255
    31be:	01 90       	ld	r0, Z+
    31c0:	f0 81       	ld	r31, Z
    31c2:	e0 2d       	mov	r30, r0
    31c4:	82 81       	ldd	r24, Z+2	; 0x02
    31c6:	88 23       	and	r24, r24
    31c8:	09 f0       	breq	.+2      	; 0x31cc <STEP_MOTORu8StartFullMode+0xc0>
    31ca:	a2 c0       	rjmp	.+324    	; 0x3310 <STEP_MOTORu8StartFullMode+0x204>
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    31cc:	1b ae       	std	Y+59, r1	; 0x3b
    31ce:	1a ae       	std	Y+58, r1	; 0x3a
    31d0:	96 c0       	rjmp	.+300    	; 0x32fe <STEP_MOTORu8StartFullMode+0x1f2>
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    31d2:	19 ae       	std	Y+57, r1	; 0x39
    31d4:	8b c0       	rjmp	.+278    	; 0x32ec <STEP_MOTORu8StartFullMode+0x1e0>
				{
					DIO_u8SetLowNibbleValue(Copy_pStep->Port,(MASK_CW<<Local_u8ItrateStep));
    31d6:	fe 01       	movw	r30, r28
    31d8:	ef 5b       	subi	r30, 0xBF	; 191
    31da:	ff 4f       	sbci	r31, 0xFF	; 255
    31dc:	01 90       	ld	r0, Z+
    31de:	f0 81       	ld	r31, Z
    31e0:	e0 2d       	mov	r30, r0
    31e2:	40 81       	ld	r20, Z
    31e4:	89 ad       	ldd	r24, Y+57	; 0x39
    31e6:	28 2f       	mov	r18, r24
    31e8:	30 e0       	ldi	r19, 0x00	; 0
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	02 c0       	rjmp	.+4      	; 0x31f4 <STEP_MOTORu8StartFullMode+0xe8>
    31f0:	88 0f       	add	r24, r24
    31f2:	99 1f       	adc	r25, r25
    31f4:	2a 95       	dec	r18
    31f6:	e2 f7       	brpl	.-8      	; 0x31f0 <STEP_MOTORu8StartFullMode+0xe4>
    31f8:	98 2f       	mov	r25, r24
    31fa:	84 2f       	mov	r24, r20
    31fc:	69 2f       	mov	r22, r25
    31fe:	0e 94 b4 12 	call	0x2568	; 0x2568 <DIO_u8SetLowNibbleValue>
    3202:	80 e0       	ldi	r24, 0x00	; 0
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	a0 e0       	ldi	r26, 0x00	; 0
    3208:	b0 e4       	ldi	r27, 0x40	; 64
    320a:	8d ab       	std	Y+53, r24	; 0x35
    320c:	9e ab       	std	Y+54, r25	; 0x36
    320e:	af ab       	std	Y+55, r26	; 0x37
    3210:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3212:	6d a9       	ldd	r22, Y+53	; 0x35
    3214:	7e a9       	ldd	r23, Y+54	; 0x36
    3216:	8f a9       	ldd	r24, Y+55	; 0x37
    3218:	98 ad       	ldd	r25, Y+56	; 0x38
    321a:	20 e0       	ldi	r18, 0x00	; 0
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	4a ef       	ldi	r20, 0xFA	; 250
    3220:	54 e4       	ldi	r21, 0x44	; 68
    3222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3226:	dc 01       	movw	r26, r24
    3228:	cb 01       	movw	r24, r22
    322a:	89 ab       	std	Y+49, r24	; 0x31
    322c:	9a ab       	std	Y+50, r25	; 0x32
    322e:	ab ab       	std	Y+51, r26	; 0x33
    3230:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3232:	69 a9       	ldd	r22, Y+49	; 0x31
    3234:	7a a9       	ldd	r23, Y+50	; 0x32
    3236:	8b a9       	ldd	r24, Y+51	; 0x33
    3238:	9c a9       	ldd	r25, Y+52	; 0x34
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	40 e8       	ldi	r20, 0x80	; 128
    3240:	5f e3       	ldi	r21, 0x3F	; 63
    3242:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3246:	88 23       	and	r24, r24
    3248:	2c f4       	brge	.+10     	; 0x3254 <STEP_MOTORu8StartFullMode+0x148>
		__ticks = 1;
    324a:	81 e0       	ldi	r24, 0x01	; 1
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	98 ab       	std	Y+48, r25	; 0x30
    3250:	8f a7       	std	Y+47, r24	; 0x2f
    3252:	3f c0       	rjmp	.+126    	; 0x32d2 <STEP_MOTORu8StartFullMode+0x1c6>
	else if (__tmp > 65535)
    3254:	69 a9       	ldd	r22, Y+49	; 0x31
    3256:	7a a9       	ldd	r23, Y+50	; 0x32
    3258:	8b a9       	ldd	r24, Y+51	; 0x33
    325a:	9c a9       	ldd	r25, Y+52	; 0x34
    325c:	20 e0       	ldi	r18, 0x00	; 0
    325e:	3f ef       	ldi	r19, 0xFF	; 255
    3260:	4f e7       	ldi	r20, 0x7F	; 127
    3262:	57 e4       	ldi	r21, 0x47	; 71
    3264:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3268:	18 16       	cp	r1, r24
    326a:	4c f5       	brge	.+82     	; 0x32be <STEP_MOTORu8StartFullMode+0x1b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    326c:	6d a9       	ldd	r22, Y+53	; 0x35
    326e:	7e a9       	ldd	r23, Y+54	; 0x36
    3270:	8f a9       	ldd	r24, Y+55	; 0x37
    3272:	98 ad       	ldd	r25, Y+56	; 0x38
    3274:	20 e0       	ldi	r18, 0x00	; 0
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	40 e2       	ldi	r20, 0x20	; 32
    327a:	51 e4       	ldi	r21, 0x41	; 65
    327c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3280:	dc 01       	movw	r26, r24
    3282:	cb 01       	movw	r24, r22
    3284:	bc 01       	movw	r22, r24
    3286:	cd 01       	movw	r24, r26
    3288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    328c:	dc 01       	movw	r26, r24
    328e:	cb 01       	movw	r24, r22
    3290:	98 ab       	std	Y+48, r25	; 0x30
    3292:	8f a7       	std	Y+47, r24	; 0x2f
    3294:	0f c0       	rjmp	.+30     	; 0x32b4 <STEP_MOTORu8StartFullMode+0x1a8>
    3296:	88 ec       	ldi	r24, 0xC8	; 200
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	9e a7       	std	Y+46, r25	; 0x2e
    329c:	8d a7       	std	Y+45, r24	; 0x2d
    329e:	8d a5       	ldd	r24, Y+45	; 0x2d
    32a0:	9e a5       	ldd	r25, Y+46	; 0x2e
    32a2:	01 97       	sbiw	r24, 0x01	; 1
    32a4:	f1 f7       	brne	.-4      	; 0x32a2 <STEP_MOTORu8StartFullMode+0x196>
    32a6:	9e a7       	std	Y+46, r25	; 0x2e
    32a8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    32ac:	98 a9       	ldd	r25, Y+48	; 0x30
    32ae:	01 97       	sbiw	r24, 0x01	; 1
    32b0:	98 ab       	std	Y+48, r25	; 0x30
    32b2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    32b6:	98 a9       	ldd	r25, Y+48	; 0x30
    32b8:	00 97       	sbiw	r24, 0x00	; 0
    32ba:	69 f7       	brne	.-38     	; 0x3296 <STEP_MOTORu8StartFullMode+0x18a>
    32bc:	14 c0       	rjmp	.+40     	; 0x32e6 <STEP_MOTORu8StartFullMode+0x1da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32be:	69 a9       	ldd	r22, Y+49	; 0x31
    32c0:	7a a9       	ldd	r23, Y+50	; 0x32
    32c2:	8b a9       	ldd	r24, Y+51	; 0x33
    32c4:	9c a9       	ldd	r25, Y+52	; 0x34
    32c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ca:	dc 01       	movw	r26, r24
    32cc:	cb 01       	movw	r24, r22
    32ce:	98 ab       	std	Y+48, r25	; 0x30
    32d0:	8f a7       	std	Y+47, r24	; 0x2f
    32d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    32d4:	98 a9       	ldd	r25, Y+48	; 0x30
    32d6:	9c a7       	std	Y+44, r25	; 0x2c
    32d8:	8b a7       	std	Y+43, r24	; 0x2b
    32da:	8b a5       	ldd	r24, Y+43	; 0x2b
    32dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    32de:	01 97       	sbiw	r24, 0x01	; 1
    32e0:	f1 f7       	brne	.-4      	; 0x32de <STEP_MOTORu8StartFullMode+0x1d2>
    32e2:	9c a7       	std	Y+44, r25	; 0x2c
    32e4:	8b a7       	std	Y+43, r24	; 0x2b
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    32e6:	89 ad       	ldd	r24, Y+57	; 0x39
    32e8:	8f 5f       	subi	r24, 0xFF	; 255
    32ea:	89 af       	std	Y+57, r24	; 0x39
    32ec:	89 ad       	ldd	r24, Y+57	; 0x39
    32ee:	84 30       	cpi	r24, 0x04	; 4
    32f0:	08 f4       	brcc	.+2      	; 0x32f4 <STEP_MOTORu8StartFullMode+0x1e8>
    32f2:	71 cf       	rjmp	.-286    	; 0x31d6 <STEP_MOTORu8StartFullMode+0xca>
	u8 Local_u8ItrateStep = 0;
	if(STEP_LOWER_NIBBLE == Copy_pStep->Nibble)
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    32f4:	8a ad       	ldd	r24, Y+58	; 0x3a
    32f6:	9b ad       	ldd	r25, Y+59	; 0x3b
    32f8:	01 96       	adiw	r24, 0x01	; 1
    32fa:	9b af       	std	Y+59, r25	; 0x3b
    32fc:	8a af       	std	Y+58, r24	; 0x3a
    32fe:	2a ad       	ldd	r18, Y+58	; 0x3a
    3300:	3b ad       	ldd	r19, Y+59	; 0x3b
    3302:	8c ad       	ldd	r24, Y+60	; 0x3c
    3304:	9d ad       	ldd	r25, Y+61	; 0x3d
    3306:	28 17       	cp	r18, r24
    3308:	39 07       	cpc	r19, r25
    330a:	08 f4       	brcc	.+2      	; 0x330e <STEP_MOTORu8StartFullMode+0x202>
    330c:	62 cf       	rjmp	.-316    	; 0x31d2 <STEP_MOTORu8StartFullMode+0xc6>
    330e:	1f c2       	rjmp	.+1086   	; 0x374e <STEP_MOTORu8StartFullMode+0x642>
					DIO_u8SetLowNibbleValue(Copy_pStep->Port,(MASK_CW<<Local_u8ItrateStep));
					_delay_ms(2);
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
    3310:	fe 01       	movw	r30, r28
    3312:	ef 5b       	subi	r30, 0xBF	; 191
    3314:	ff 4f       	sbci	r31, 0xFF	; 255
    3316:	01 90       	ld	r0, Z+
    3318:	f0 81       	ld	r31, Z
    331a:	e0 2d       	mov	r30, r0
    331c:	82 81       	ldd	r24, Z+2	; 0x02
    331e:	81 30       	cpi	r24, 0x01	; 1
    3320:	09 f0       	breq	.+2      	; 0x3324 <STEP_MOTORu8StartFullMode+0x218>
    3322:	a2 c0       	rjmp	.+324    	; 0x3468 <STEP_MOTORu8StartFullMode+0x35c>
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3324:	1b ae       	std	Y+59, r1	; 0x3b
    3326:	1a ae       	std	Y+58, r1	; 0x3a
    3328:	96 c0       	rjmp	.+300    	; 0x3456 <STEP_MOTORu8StartFullMode+0x34a>
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    332a:	19 ae       	std	Y+57, r1	; 0x39
    332c:	8b c0       	rjmp	.+278    	; 0x3444 <STEP_MOTORu8StartFullMode+0x338>
				{
					DIO_u8SetLowNibbleValue(Copy_pStep->Port,(MASK_CCW>>Local_u8ItrateStep));
    332e:	fe 01       	movw	r30, r28
    3330:	ef 5b       	subi	r30, 0xBF	; 191
    3332:	ff 4f       	sbci	r31, 0xFF	; 255
    3334:	01 90       	ld	r0, Z+
    3336:	f0 81       	ld	r31, Z
    3338:	e0 2d       	mov	r30, r0
    333a:	40 81       	ld	r20, Z
    333c:	89 ad       	ldd	r24, Y+57	; 0x39
    333e:	28 2f       	mov	r18, r24
    3340:	30 e0       	ldi	r19, 0x00	; 0
    3342:	88 e0       	ldi	r24, 0x08	; 8
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	02 c0       	rjmp	.+4      	; 0x334c <STEP_MOTORu8StartFullMode+0x240>
    3348:	95 95       	asr	r25
    334a:	87 95       	ror	r24
    334c:	2a 95       	dec	r18
    334e:	e2 f7       	brpl	.-8      	; 0x3348 <STEP_MOTORu8StartFullMode+0x23c>
    3350:	98 2f       	mov	r25, r24
    3352:	84 2f       	mov	r24, r20
    3354:	69 2f       	mov	r22, r25
    3356:	0e 94 b4 12 	call	0x2568	; 0x2568 <DIO_u8SetLowNibbleValue>
    335a:	80 e0       	ldi	r24, 0x00	; 0
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	a0 e0       	ldi	r26, 0x00	; 0
    3360:	b0 e4       	ldi	r27, 0x40	; 64
    3362:	8f a3       	std	Y+39, r24	; 0x27
    3364:	98 a7       	std	Y+40, r25	; 0x28
    3366:	a9 a7       	std	Y+41, r26	; 0x29
    3368:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    336a:	6f a1       	ldd	r22, Y+39	; 0x27
    336c:	78 a5       	ldd	r23, Y+40	; 0x28
    336e:	89 a5       	ldd	r24, Y+41	; 0x29
    3370:	9a a5       	ldd	r25, Y+42	; 0x2a
    3372:	20 e0       	ldi	r18, 0x00	; 0
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	4a ef       	ldi	r20, 0xFA	; 250
    3378:	54 e4       	ldi	r21, 0x44	; 68
    337a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    337e:	dc 01       	movw	r26, r24
    3380:	cb 01       	movw	r24, r22
    3382:	8b a3       	std	Y+35, r24	; 0x23
    3384:	9c a3       	std	Y+36, r25	; 0x24
    3386:	ad a3       	std	Y+37, r26	; 0x25
    3388:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    338a:	6b a1       	ldd	r22, Y+35	; 0x23
    338c:	7c a1       	ldd	r23, Y+36	; 0x24
    338e:	8d a1       	ldd	r24, Y+37	; 0x25
    3390:	9e a1       	ldd	r25, Y+38	; 0x26
    3392:	20 e0       	ldi	r18, 0x00	; 0
    3394:	30 e0       	ldi	r19, 0x00	; 0
    3396:	40 e8       	ldi	r20, 0x80	; 128
    3398:	5f e3       	ldi	r21, 0x3F	; 63
    339a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    339e:	88 23       	and	r24, r24
    33a0:	2c f4       	brge	.+10     	; 0x33ac <STEP_MOTORu8StartFullMode+0x2a0>
		__ticks = 1;
    33a2:	81 e0       	ldi	r24, 0x01	; 1
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	9a a3       	std	Y+34, r25	; 0x22
    33a8:	89 a3       	std	Y+33, r24	; 0x21
    33aa:	3f c0       	rjmp	.+126    	; 0x342a <STEP_MOTORu8StartFullMode+0x31e>
	else if (__tmp > 65535)
    33ac:	6b a1       	ldd	r22, Y+35	; 0x23
    33ae:	7c a1       	ldd	r23, Y+36	; 0x24
    33b0:	8d a1       	ldd	r24, Y+37	; 0x25
    33b2:	9e a1       	ldd	r25, Y+38	; 0x26
    33b4:	20 e0       	ldi	r18, 0x00	; 0
    33b6:	3f ef       	ldi	r19, 0xFF	; 255
    33b8:	4f e7       	ldi	r20, 0x7F	; 127
    33ba:	57 e4       	ldi	r21, 0x47	; 71
    33bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33c0:	18 16       	cp	r1, r24
    33c2:	4c f5       	brge	.+82     	; 0x3416 <STEP_MOTORu8StartFullMode+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33c4:	6f a1       	ldd	r22, Y+39	; 0x27
    33c6:	78 a5       	ldd	r23, Y+40	; 0x28
    33c8:	89 a5       	ldd	r24, Y+41	; 0x29
    33ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    33cc:	20 e0       	ldi	r18, 0x00	; 0
    33ce:	30 e0       	ldi	r19, 0x00	; 0
    33d0:	40 e2       	ldi	r20, 0x20	; 32
    33d2:	51 e4       	ldi	r21, 0x41	; 65
    33d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33d8:	dc 01       	movw	r26, r24
    33da:	cb 01       	movw	r24, r22
    33dc:	bc 01       	movw	r22, r24
    33de:	cd 01       	movw	r24, r26
    33e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33e4:	dc 01       	movw	r26, r24
    33e6:	cb 01       	movw	r24, r22
    33e8:	9a a3       	std	Y+34, r25	; 0x22
    33ea:	89 a3       	std	Y+33, r24	; 0x21
    33ec:	0f c0       	rjmp	.+30     	; 0x340c <STEP_MOTORu8StartFullMode+0x300>
    33ee:	88 ec       	ldi	r24, 0xC8	; 200
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	98 a3       	std	Y+32, r25	; 0x20
    33f4:	8f 8f       	std	Y+31, r24	; 0x1f
    33f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33f8:	98 a1       	ldd	r25, Y+32	; 0x20
    33fa:	01 97       	sbiw	r24, 0x01	; 1
    33fc:	f1 f7       	brne	.-4      	; 0x33fa <STEP_MOTORu8StartFullMode+0x2ee>
    33fe:	98 a3       	std	Y+32, r25	; 0x20
    3400:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3402:	89 a1       	ldd	r24, Y+33	; 0x21
    3404:	9a a1       	ldd	r25, Y+34	; 0x22
    3406:	01 97       	sbiw	r24, 0x01	; 1
    3408:	9a a3       	std	Y+34, r25	; 0x22
    340a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    340c:	89 a1       	ldd	r24, Y+33	; 0x21
    340e:	9a a1       	ldd	r25, Y+34	; 0x22
    3410:	00 97       	sbiw	r24, 0x00	; 0
    3412:	69 f7       	brne	.-38     	; 0x33ee <STEP_MOTORu8StartFullMode+0x2e2>
    3414:	14 c0       	rjmp	.+40     	; 0x343e <STEP_MOTORu8StartFullMode+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3416:	6b a1       	ldd	r22, Y+35	; 0x23
    3418:	7c a1       	ldd	r23, Y+36	; 0x24
    341a:	8d a1       	ldd	r24, Y+37	; 0x25
    341c:	9e a1       	ldd	r25, Y+38	; 0x26
    341e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3422:	dc 01       	movw	r26, r24
    3424:	cb 01       	movw	r24, r22
    3426:	9a a3       	std	Y+34, r25	; 0x22
    3428:	89 a3       	std	Y+33, r24	; 0x21
    342a:	89 a1       	ldd	r24, Y+33	; 0x21
    342c:	9a a1       	ldd	r25, Y+34	; 0x22
    342e:	9e 8f       	std	Y+30, r25	; 0x1e
    3430:	8d 8f       	std	Y+29, r24	; 0x1d
    3432:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3434:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3436:	01 97       	sbiw	r24, 0x01	; 1
    3438:	f1 f7       	brne	.-4      	; 0x3436 <STEP_MOTORu8StartFullMode+0x32a>
    343a:	9e 8f       	std	Y+30, r25	; 0x1e
    343c:	8d 8f       	std	Y+29, r24	; 0x1d
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    343e:	89 ad       	ldd	r24, Y+57	; 0x39
    3440:	8f 5f       	subi	r24, 0xFF	; 255
    3442:	89 af       	std	Y+57, r24	; 0x39
    3444:	89 ad       	ldd	r24, Y+57	; 0x39
    3446:	84 30       	cpi	r24, 0x04	; 4
    3448:	08 f4       	brcc	.+2      	; 0x344c <STEP_MOTORu8StartFullMode+0x340>
    344a:	71 cf       	rjmp	.-286    	; 0x332e <STEP_MOTORu8StartFullMode+0x222>
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    344c:	8a ad       	ldd	r24, Y+58	; 0x3a
    344e:	9b ad       	ldd	r25, Y+59	; 0x3b
    3450:	01 96       	adiw	r24, 0x01	; 1
    3452:	9b af       	std	Y+59, r25	; 0x3b
    3454:	8a af       	std	Y+58, r24	; 0x3a
    3456:	2a ad       	ldd	r18, Y+58	; 0x3a
    3458:	3b ad       	ldd	r19, Y+59	; 0x3b
    345a:	8c ad       	ldd	r24, Y+60	; 0x3c
    345c:	9d ad       	ldd	r25, Y+61	; 0x3d
    345e:	28 17       	cp	r18, r24
    3460:	39 07       	cpc	r19, r25
    3462:	08 f4       	brcc	.+2      	; 0x3466 <STEP_MOTORu8StartFullMode+0x35a>
    3464:	62 cf       	rjmp	.-316    	; 0x332a <STEP_MOTORu8StartFullMode+0x21e>
    3466:	73 c1       	rjmp	.+742    	; 0x374e <STEP_MOTORu8StartFullMode+0x642>
					_delay_ms(2);
				}
			}
		}
		else
			Local_u8ErrorState = NOTOK;
    3468:	81 e0       	ldi	r24, 0x01	; 1
    346a:	fe 01       	movw	r30, r28
    346c:	e0 5c       	subi	r30, 0xC0	; 192
    346e:	ff 4f       	sbci	r31, 0xFF	; 255
    3470:	80 83       	st	Z, r24
    3472:	6d c1       	rjmp	.+730    	; 0x374e <STEP_MOTORu8StartFullMode+0x642>
	}
	else if(STEP_UPPER_NIBBLE == Copy_pStep->Nibble)
    3474:	fe 01       	movw	r30, r28
    3476:	ef 5b       	subi	r30, 0xBF	; 191
    3478:	ff 4f       	sbci	r31, 0xFF	; 255
    347a:	01 90       	ld	r0, Z+
    347c:	f0 81       	ld	r31, Z
    347e:	e0 2d       	mov	r30, r0
    3480:	81 81       	ldd	r24, Z+1	; 0x01
    3482:	81 30       	cpi	r24, 0x01	; 1
    3484:	09 f0       	breq	.+2      	; 0x3488 <STEP_MOTORu8StartFullMode+0x37c>
    3486:	5e c1       	rjmp	.+700    	; 0x3744 <STEP_MOTORu8StartFullMode+0x638>
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
    3488:	fe 01       	movw	r30, r28
    348a:	ef 5b       	subi	r30, 0xBF	; 191
    348c:	ff 4f       	sbci	r31, 0xFF	; 255
    348e:	01 90       	ld	r0, Z+
    3490:	f0 81       	ld	r31, Z
    3492:	e0 2d       	mov	r30, r0
    3494:	82 81       	ldd	r24, Z+2	; 0x02
    3496:	88 23       	and	r24, r24
    3498:	09 f0       	breq	.+2      	; 0x349c <STEP_MOTORu8StartFullMode+0x390>
    349a:	a2 c0       	rjmp	.+324    	; 0x35e0 <STEP_MOTORu8StartFullMode+0x4d4>
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    349c:	1b ae       	std	Y+59, r1	; 0x3b
    349e:	1a ae       	std	Y+58, r1	; 0x3a
    34a0:	96 c0       	rjmp	.+300    	; 0x35ce <STEP_MOTORu8StartFullMode+0x4c2>
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    34a2:	19 ae       	std	Y+57, r1	; 0x39
    34a4:	8b c0       	rjmp	.+278    	; 0x35bc <STEP_MOTORu8StartFullMode+0x4b0>
				{
					DIO_u8SetHighNibbleValue(Copy_pStep->Port,(MASK_CW<<Local_u8ItrateStep));
    34a6:	fe 01       	movw	r30, r28
    34a8:	ef 5b       	subi	r30, 0xBF	; 191
    34aa:	ff 4f       	sbci	r31, 0xFF	; 255
    34ac:	01 90       	ld	r0, Z+
    34ae:	f0 81       	ld	r31, Z
    34b0:	e0 2d       	mov	r30, r0
    34b2:	40 81       	ld	r20, Z
    34b4:	89 ad       	ldd	r24, Y+57	; 0x39
    34b6:	28 2f       	mov	r18, r24
    34b8:	30 e0       	ldi	r19, 0x00	; 0
    34ba:	81 e0       	ldi	r24, 0x01	; 1
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	02 c0       	rjmp	.+4      	; 0x34c4 <STEP_MOTORu8StartFullMode+0x3b8>
    34c0:	88 0f       	add	r24, r24
    34c2:	99 1f       	adc	r25, r25
    34c4:	2a 95       	dec	r18
    34c6:	e2 f7       	brpl	.-8      	; 0x34c0 <STEP_MOTORu8StartFullMode+0x3b4>
    34c8:	98 2f       	mov	r25, r24
    34ca:	84 2f       	mov	r24, r20
    34cc:	69 2f       	mov	r22, r25
    34ce:	0e 94 2f 13 	call	0x265e	; 0x265e <DIO_u8SetHighNibbleValue>
    34d2:	80 e0       	ldi	r24, 0x00	; 0
    34d4:	90 e0       	ldi	r25, 0x00	; 0
    34d6:	a0 e0       	ldi	r26, 0x00	; 0
    34d8:	b0 e4       	ldi	r27, 0x40	; 64
    34da:	89 8f       	std	Y+25, r24	; 0x19
    34dc:	9a 8f       	std	Y+26, r25	; 0x1a
    34de:	ab 8f       	std	Y+27, r26	; 0x1b
    34e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34e2:	69 8d       	ldd	r22, Y+25	; 0x19
    34e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34ea:	20 e0       	ldi	r18, 0x00	; 0
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	4a ef       	ldi	r20, 0xFA	; 250
    34f0:	54 e4       	ldi	r21, 0x44	; 68
    34f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f6:	dc 01       	movw	r26, r24
    34f8:	cb 01       	movw	r24, r22
    34fa:	8d 8b       	std	Y+21, r24	; 0x15
    34fc:	9e 8b       	std	Y+22, r25	; 0x16
    34fe:	af 8b       	std	Y+23, r26	; 0x17
    3500:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3502:	6d 89       	ldd	r22, Y+21	; 0x15
    3504:	7e 89       	ldd	r23, Y+22	; 0x16
    3506:	8f 89       	ldd	r24, Y+23	; 0x17
    3508:	98 8d       	ldd	r25, Y+24	; 0x18
    350a:	20 e0       	ldi	r18, 0x00	; 0
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	40 e8       	ldi	r20, 0x80	; 128
    3510:	5f e3       	ldi	r21, 0x3F	; 63
    3512:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3516:	88 23       	and	r24, r24
    3518:	2c f4       	brge	.+10     	; 0x3524 <STEP_MOTORu8StartFullMode+0x418>
		__ticks = 1;
    351a:	81 e0       	ldi	r24, 0x01	; 1
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	9c 8b       	std	Y+20, r25	; 0x14
    3520:	8b 8b       	std	Y+19, r24	; 0x13
    3522:	3f c0       	rjmp	.+126    	; 0x35a2 <STEP_MOTORu8StartFullMode+0x496>
	else if (__tmp > 65535)
    3524:	6d 89       	ldd	r22, Y+21	; 0x15
    3526:	7e 89       	ldd	r23, Y+22	; 0x16
    3528:	8f 89       	ldd	r24, Y+23	; 0x17
    352a:	98 8d       	ldd	r25, Y+24	; 0x18
    352c:	20 e0       	ldi	r18, 0x00	; 0
    352e:	3f ef       	ldi	r19, 0xFF	; 255
    3530:	4f e7       	ldi	r20, 0x7F	; 127
    3532:	57 e4       	ldi	r21, 0x47	; 71
    3534:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3538:	18 16       	cp	r1, r24
    353a:	4c f5       	brge	.+82     	; 0x358e <STEP_MOTORu8StartFullMode+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    353c:	69 8d       	ldd	r22, Y+25	; 0x19
    353e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3540:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3542:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3544:	20 e0       	ldi	r18, 0x00	; 0
    3546:	30 e0       	ldi	r19, 0x00	; 0
    3548:	40 e2       	ldi	r20, 0x20	; 32
    354a:	51 e4       	ldi	r21, 0x41	; 65
    354c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3550:	dc 01       	movw	r26, r24
    3552:	cb 01       	movw	r24, r22
    3554:	bc 01       	movw	r22, r24
    3556:	cd 01       	movw	r24, r26
    3558:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    355c:	dc 01       	movw	r26, r24
    355e:	cb 01       	movw	r24, r22
    3560:	9c 8b       	std	Y+20, r25	; 0x14
    3562:	8b 8b       	std	Y+19, r24	; 0x13
    3564:	0f c0       	rjmp	.+30     	; 0x3584 <STEP_MOTORu8StartFullMode+0x478>
    3566:	88 ec       	ldi	r24, 0xC8	; 200
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	9a 8b       	std	Y+18, r25	; 0x12
    356c:	89 8b       	std	Y+17, r24	; 0x11
    356e:	89 89       	ldd	r24, Y+17	; 0x11
    3570:	9a 89       	ldd	r25, Y+18	; 0x12
    3572:	01 97       	sbiw	r24, 0x01	; 1
    3574:	f1 f7       	brne	.-4      	; 0x3572 <STEP_MOTORu8StartFullMode+0x466>
    3576:	9a 8b       	std	Y+18, r25	; 0x12
    3578:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    357a:	8b 89       	ldd	r24, Y+19	; 0x13
    357c:	9c 89       	ldd	r25, Y+20	; 0x14
    357e:	01 97       	sbiw	r24, 0x01	; 1
    3580:	9c 8b       	std	Y+20, r25	; 0x14
    3582:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3584:	8b 89       	ldd	r24, Y+19	; 0x13
    3586:	9c 89       	ldd	r25, Y+20	; 0x14
    3588:	00 97       	sbiw	r24, 0x00	; 0
    358a:	69 f7       	brne	.-38     	; 0x3566 <STEP_MOTORu8StartFullMode+0x45a>
    358c:	14 c0       	rjmp	.+40     	; 0x35b6 <STEP_MOTORu8StartFullMode+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    358e:	6d 89       	ldd	r22, Y+21	; 0x15
    3590:	7e 89       	ldd	r23, Y+22	; 0x16
    3592:	8f 89       	ldd	r24, Y+23	; 0x17
    3594:	98 8d       	ldd	r25, Y+24	; 0x18
    3596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    359a:	dc 01       	movw	r26, r24
    359c:	cb 01       	movw	r24, r22
    359e:	9c 8b       	std	Y+20, r25	; 0x14
    35a0:	8b 8b       	std	Y+19, r24	; 0x13
    35a2:	8b 89       	ldd	r24, Y+19	; 0x13
    35a4:	9c 89       	ldd	r25, Y+20	; 0x14
    35a6:	98 8b       	std	Y+16, r25	; 0x10
    35a8:	8f 87       	std	Y+15, r24	; 0x0f
    35aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    35ac:	98 89       	ldd	r25, Y+16	; 0x10
    35ae:	01 97       	sbiw	r24, 0x01	; 1
    35b0:	f1 f7       	brne	.-4      	; 0x35ae <STEP_MOTORu8StartFullMode+0x4a2>
    35b2:	98 8b       	std	Y+16, r25	; 0x10
    35b4:	8f 87       	std	Y+15, r24	; 0x0f
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    35b6:	89 ad       	ldd	r24, Y+57	; 0x39
    35b8:	8f 5f       	subi	r24, 0xFF	; 255
    35ba:	89 af       	std	Y+57, r24	; 0x39
    35bc:	89 ad       	ldd	r24, Y+57	; 0x39
    35be:	84 30       	cpi	r24, 0x04	; 4
    35c0:	08 f4       	brcc	.+2      	; 0x35c4 <STEP_MOTORu8StartFullMode+0x4b8>
    35c2:	71 cf       	rjmp	.-286    	; 0x34a6 <STEP_MOTORu8StartFullMode+0x39a>
	}
	else if(STEP_UPPER_NIBBLE == Copy_pStep->Nibble)
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    35c4:	8a ad       	ldd	r24, Y+58	; 0x3a
    35c6:	9b ad       	ldd	r25, Y+59	; 0x3b
    35c8:	01 96       	adiw	r24, 0x01	; 1
    35ca:	9b af       	std	Y+59, r25	; 0x3b
    35cc:	8a af       	std	Y+58, r24	; 0x3a
    35ce:	2a ad       	ldd	r18, Y+58	; 0x3a
    35d0:	3b ad       	ldd	r19, Y+59	; 0x3b
    35d2:	8c ad       	ldd	r24, Y+60	; 0x3c
    35d4:	9d ad       	ldd	r25, Y+61	; 0x3d
    35d6:	28 17       	cp	r18, r24
    35d8:	39 07       	cpc	r19, r25
    35da:	08 f4       	brcc	.+2      	; 0x35de <STEP_MOTORu8StartFullMode+0x4d2>
    35dc:	62 cf       	rjmp	.-316    	; 0x34a2 <STEP_MOTORu8StartFullMode+0x396>
    35de:	b7 c0       	rjmp	.+366    	; 0x374e <STEP_MOTORu8StartFullMode+0x642>
					DIO_u8SetHighNibbleValue(Copy_pStep->Port,(MASK_CW<<Local_u8ItrateStep));
					_delay_ms(2);
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
    35e0:	fe 01       	movw	r30, r28
    35e2:	ef 5b       	subi	r30, 0xBF	; 191
    35e4:	ff 4f       	sbci	r31, 0xFF	; 255
    35e6:	01 90       	ld	r0, Z+
    35e8:	f0 81       	ld	r31, Z
    35ea:	e0 2d       	mov	r30, r0
    35ec:	82 81       	ldd	r24, Z+2	; 0x02
    35ee:	81 30       	cpi	r24, 0x01	; 1
    35f0:	09 f0       	breq	.+2      	; 0x35f4 <STEP_MOTORu8StartFullMode+0x4e8>
    35f2:	a2 c0       	rjmp	.+324    	; 0x3738 <STEP_MOTORu8StartFullMode+0x62c>
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    35f4:	1b ae       	std	Y+59, r1	; 0x3b
    35f6:	1a ae       	std	Y+58, r1	; 0x3a
    35f8:	96 c0       	rjmp	.+300    	; 0x3726 <STEP_MOTORu8StartFullMode+0x61a>
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    35fa:	19 ae       	std	Y+57, r1	; 0x39
    35fc:	8b c0       	rjmp	.+278    	; 0x3714 <STEP_MOTORu8StartFullMode+0x608>
				{
					DIO_u8SetHighNibbleValue(Copy_pStep->Port,(MASK_CCW>>Local_u8ItrateStep));
    35fe:	fe 01       	movw	r30, r28
    3600:	ef 5b       	subi	r30, 0xBF	; 191
    3602:	ff 4f       	sbci	r31, 0xFF	; 255
    3604:	01 90       	ld	r0, Z+
    3606:	f0 81       	ld	r31, Z
    3608:	e0 2d       	mov	r30, r0
    360a:	40 81       	ld	r20, Z
    360c:	89 ad       	ldd	r24, Y+57	; 0x39
    360e:	28 2f       	mov	r18, r24
    3610:	30 e0       	ldi	r19, 0x00	; 0
    3612:	88 e0       	ldi	r24, 0x08	; 8
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	02 c0       	rjmp	.+4      	; 0x361c <STEP_MOTORu8StartFullMode+0x510>
    3618:	95 95       	asr	r25
    361a:	87 95       	ror	r24
    361c:	2a 95       	dec	r18
    361e:	e2 f7       	brpl	.-8      	; 0x3618 <STEP_MOTORu8StartFullMode+0x50c>
    3620:	98 2f       	mov	r25, r24
    3622:	84 2f       	mov	r24, r20
    3624:	69 2f       	mov	r22, r25
    3626:	0e 94 2f 13 	call	0x265e	; 0x265e <DIO_u8SetHighNibbleValue>
    362a:	80 e0       	ldi	r24, 0x00	; 0
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	a0 e0       	ldi	r26, 0x00	; 0
    3630:	b0 e4       	ldi	r27, 0x40	; 64
    3632:	8b 87       	std	Y+11, r24	; 0x0b
    3634:	9c 87       	std	Y+12, r25	; 0x0c
    3636:	ad 87       	std	Y+13, r26	; 0x0d
    3638:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    363a:	6b 85       	ldd	r22, Y+11	; 0x0b
    363c:	7c 85       	ldd	r23, Y+12	; 0x0c
    363e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3640:	9e 85       	ldd	r25, Y+14	; 0x0e
    3642:	20 e0       	ldi	r18, 0x00	; 0
    3644:	30 e0       	ldi	r19, 0x00	; 0
    3646:	4a ef       	ldi	r20, 0xFA	; 250
    3648:	54 e4       	ldi	r21, 0x44	; 68
    364a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    364e:	dc 01       	movw	r26, r24
    3650:	cb 01       	movw	r24, r22
    3652:	8f 83       	std	Y+7, r24	; 0x07
    3654:	98 87       	std	Y+8, r25	; 0x08
    3656:	a9 87       	std	Y+9, r26	; 0x09
    3658:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    365a:	6f 81       	ldd	r22, Y+7	; 0x07
    365c:	78 85       	ldd	r23, Y+8	; 0x08
    365e:	89 85       	ldd	r24, Y+9	; 0x09
    3660:	9a 85       	ldd	r25, Y+10	; 0x0a
    3662:	20 e0       	ldi	r18, 0x00	; 0
    3664:	30 e0       	ldi	r19, 0x00	; 0
    3666:	40 e8       	ldi	r20, 0x80	; 128
    3668:	5f e3       	ldi	r21, 0x3F	; 63
    366a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    366e:	88 23       	and	r24, r24
    3670:	2c f4       	brge	.+10     	; 0x367c <STEP_MOTORu8StartFullMode+0x570>
		__ticks = 1;
    3672:	81 e0       	ldi	r24, 0x01	; 1
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	9e 83       	std	Y+6, r25	; 0x06
    3678:	8d 83       	std	Y+5, r24	; 0x05
    367a:	3f c0       	rjmp	.+126    	; 0x36fa <STEP_MOTORu8StartFullMode+0x5ee>
	else if (__tmp > 65535)
    367c:	6f 81       	ldd	r22, Y+7	; 0x07
    367e:	78 85       	ldd	r23, Y+8	; 0x08
    3680:	89 85       	ldd	r24, Y+9	; 0x09
    3682:	9a 85       	ldd	r25, Y+10	; 0x0a
    3684:	20 e0       	ldi	r18, 0x00	; 0
    3686:	3f ef       	ldi	r19, 0xFF	; 255
    3688:	4f e7       	ldi	r20, 0x7F	; 127
    368a:	57 e4       	ldi	r21, 0x47	; 71
    368c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3690:	18 16       	cp	r1, r24
    3692:	4c f5       	brge	.+82     	; 0x36e6 <STEP_MOTORu8StartFullMode+0x5da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3694:	6b 85       	ldd	r22, Y+11	; 0x0b
    3696:	7c 85       	ldd	r23, Y+12	; 0x0c
    3698:	8d 85       	ldd	r24, Y+13	; 0x0d
    369a:	9e 85       	ldd	r25, Y+14	; 0x0e
    369c:	20 e0       	ldi	r18, 0x00	; 0
    369e:	30 e0       	ldi	r19, 0x00	; 0
    36a0:	40 e2       	ldi	r20, 0x20	; 32
    36a2:	51 e4       	ldi	r21, 0x41	; 65
    36a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36a8:	dc 01       	movw	r26, r24
    36aa:	cb 01       	movw	r24, r22
    36ac:	bc 01       	movw	r22, r24
    36ae:	cd 01       	movw	r24, r26
    36b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36b4:	dc 01       	movw	r26, r24
    36b6:	cb 01       	movw	r24, r22
    36b8:	9e 83       	std	Y+6, r25	; 0x06
    36ba:	8d 83       	std	Y+5, r24	; 0x05
    36bc:	0f c0       	rjmp	.+30     	; 0x36dc <STEP_MOTORu8StartFullMode+0x5d0>
    36be:	88 ec       	ldi	r24, 0xC8	; 200
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	9c 83       	std	Y+4, r25	; 0x04
    36c4:	8b 83       	std	Y+3, r24	; 0x03
    36c6:	8b 81       	ldd	r24, Y+3	; 0x03
    36c8:	9c 81       	ldd	r25, Y+4	; 0x04
    36ca:	01 97       	sbiw	r24, 0x01	; 1
    36cc:	f1 f7       	brne	.-4      	; 0x36ca <STEP_MOTORu8StartFullMode+0x5be>
    36ce:	9c 83       	std	Y+4, r25	; 0x04
    36d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36d2:	8d 81       	ldd	r24, Y+5	; 0x05
    36d4:	9e 81       	ldd	r25, Y+6	; 0x06
    36d6:	01 97       	sbiw	r24, 0x01	; 1
    36d8:	9e 83       	std	Y+6, r25	; 0x06
    36da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36dc:	8d 81       	ldd	r24, Y+5	; 0x05
    36de:	9e 81       	ldd	r25, Y+6	; 0x06
    36e0:	00 97       	sbiw	r24, 0x00	; 0
    36e2:	69 f7       	brne	.-38     	; 0x36be <STEP_MOTORu8StartFullMode+0x5b2>
    36e4:	14 c0       	rjmp	.+40     	; 0x370e <STEP_MOTORu8StartFullMode+0x602>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36e6:	6f 81       	ldd	r22, Y+7	; 0x07
    36e8:	78 85       	ldd	r23, Y+8	; 0x08
    36ea:	89 85       	ldd	r24, Y+9	; 0x09
    36ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    36ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f2:	dc 01       	movw	r26, r24
    36f4:	cb 01       	movw	r24, r22
    36f6:	9e 83       	std	Y+6, r25	; 0x06
    36f8:	8d 83       	std	Y+5, r24	; 0x05
    36fa:	8d 81       	ldd	r24, Y+5	; 0x05
    36fc:	9e 81       	ldd	r25, Y+6	; 0x06
    36fe:	9a 83       	std	Y+2, r25	; 0x02
    3700:	89 83       	std	Y+1, r24	; 0x01
    3702:	89 81       	ldd	r24, Y+1	; 0x01
    3704:	9a 81       	ldd	r25, Y+2	; 0x02
    3706:	01 97       	sbiw	r24, 0x01	; 1
    3708:	f1 f7       	brne	.-4      	; 0x3706 <STEP_MOTORu8StartFullMode+0x5fa>
    370a:	9a 83       	std	Y+2, r25	; 0x02
    370c:	89 83       	std	Y+1, r24	; 0x01
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    370e:	89 ad       	ldd	r24, Y+57	; 0x39
    3710:	8f 5f       	subi	r24, 0xFF	; 255
    3712:	89 af       	std	Y+57, r24	; 0x39
    3714:	89 ad       	ldd	r24, Y+57	; 0x39
    3716:	84 30       	cpi	r24, 0x04	; 4
    3718:	08 f4       	brcc	.+2      	; 0x371c <STEP_MOTORu8StartFullMode+0x610>
    371a:	71 cf       	rjmp	.-286    	; 0x35fe <STEP_MOTORu8StartFullMode+0x4f2>
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    371c:	8a ad       	ldd	r24, Y+58	; 0x3a
    371e:	9b ad       	ldd	r25, Y+59	; 0x3b
    3720:	01 96       	adiw	r24, 0x01	; 1
    3722:	9b af       	std	Y+59, r25	; 0x3b
    3724:	8a af       	std	Y+58, r24	; 0x3a
    3726:	2a ad       	ldd	r18, Y+58	; 0x3a
    3728:	3b ad       	ldd	r19, Y+59	; 0x3b
    372a:	8c ad       	ldd	r24, Y+60	; 0x3c
    372c:	9d ad       	ldd	r25, Y+61	; 0x3d
    372e:	28 17       	cp	r18, r24
    3730:	39 07       	cpc	r19, r25
    3732:	08 f4       	brcc	.+2      	; 0x3736 <STEP_MOTORu8StartFullMode+0x62a>
    3734:	62 cf       	rjmp	.-316    	; 0x35fa <STEP_MOTORu8StartFullMode+0x4ee>
    3736:	0b c0       	rjmp	.+22     	; 0x374e <STEP_MOTORu8StartFullMode+0x642>
					_delay_ms(2);
				}
			}
		}
		else
			Local_u8ErrorState = NOTOK;
    3738:	81 e0       	ldi	r24, 0x01	; 1
    373a:	fe 01       	movw	r30, r28
    373c:	e0 5c       	subi	r30, 0xC0	; 192
    373e:	ff 4f       	sbci	r31, 0xFF	; 255
    3740:	80 83       	st	Z, r24
    3742:	05 c0       	rjmp	.+10     	; 0x374e <STEP_MOTORu8StartFullMode+0x642>
	}
	else
		Local_u8ErrorState = NOTOK;
    3744:	81 e0       	ldi	r24, 0x01	; 1
    3746:	fe 01       	movw	r30, r28
    3748:	e0 5c       	subi	r30, 0xC0	; 192
    374a:	ff 4f       	sbci	r31, 0xFF	; 255
    374c:	80 83       	st	Z, r24
	return Local_u8ErrorState;
    374e:	fe 01       	movw	r30, r28
    3750:	e0 5c       	subi	r30, 0xC0	; 192
    3752:	ff 4f       	sbci	r31, 0xFF	; 255
    3754:	80 81       	ld	r24, Z
}
    3756:	ce 5b       	subi	r28, 0xBE	; 190
    3758:	df 4f       	sbci	r29, 0xFF	; 255
    375a:	0f b6       	in	r0, 0x3f	; 63
    375c:	f8 94       	cli
    375e:	de bf       	out	0x3e, r29	; 62
    3760:	0f be       	out	0x3f, r0	; 63
    3762:	cd bf       	out	0x3d, r28	; 61
    3764:	cf 91       	pop	r28
    3766:	df 91       	pop	r29
    3768:	08 95       	ret

0000376a <STEP_MOTORu8StartHalfMode>:

u8 STEP_MOTORu8StartHalfMode(STEP_t *Copy_pStep)
{
    376a:	df 93       	push	r29
    376c:	cf 93       	push	r28
    376e:	cd b7       	in	r28, 0x3d	; 61
    3770:	de b7       	in	r29, 0x3e	; 62
    3772:	c4 54       	subi	r28, 0x44	; 68
    3774:	d0 40       	sbci	r29, 0x00	; 0
    3776:	0f b6       	in	r0, 0x3f	; 63
    3778:	f8 94       	cli
    377a:	de bf       	out	0x3e, r29	; 62
    377c:	0f be       	out	0x3f, r0	; 63
    377e:	cd bf       	out	0x3d, r28	; 61
    3780:	fe 01       	movw	r30, r28
    3782:	ed 5b       	subi	r30, 0xBD	; 189
    3784:	ff 4f       	sbci	r31, 0xFF	; 255
    3786:	91 83       	std	Z+1, r25	; 0x01
    3788:	80 83       	st	Z, r24
	u8 Local_u8ErrorState = OK;
    378a:	fe 01       	movw	r30, r28
    378c:	ee 5b       	subi	r30, 0xBE	; 190
    378e:	ff 4f       	sbci	r31, 0xFF	; 255
    3790:	10 82       	st	Z, r1
	u16 Local_u16Counter=0;
    3792:	fe 01       	movw	r30, r28
    3794:	e0 5c       	subi	r30, 0xC0	; 192
    3796:	ff 4f       	sbci	r31, 0xFF	; 255
    3798:	11 82       	std	Z+1, r1	; 0x01
    379a:	10 82       	st	Z, r1
	u16 Local_u16NumOfSteps = (u16)((((f32)Copy_pStep->AngleDegree)/5.625)*64.0);
    379c:	fe 01       	movw	r30, r28
    379e:	ed 5b       	subi	r30, 0xBD	; 189
    37a0:	ff 4f       	sbci	r31, 0xFF	; 255
    37a2:	01 90       	ld	r0, Z+
    37a4:	f0 81       	ld	r31, Z
    37a6:	e0 2d       	mov	r30, r0
    37a8:	83 81       	ldd	r24, Z+3	; 0x03
    37aa:	94 81       	ldd	r25, Z+4	; 0x04
    37ac:	cc 01       	movw	r24, r24
    37ae:	a0 e0       	ldi	r26, 0x00	; 0
    37b0:	b0 e0       	ldi	r27, 0x00	; 0
    37b2:	bc 01       	movw	r22, r24
    37b4:	cd 01       	movw	r24, r26
    37b6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    37ba:	dc 01       	movw	r26, r24
    37bc:	cb 01       	movw	r24, r22
    37be:	bc 01       	movw	r22, r24
    37c0:	cd 01       	movw	r24, r26
    37c2:	20 e0       	ldi	r18, 0x00	; 0
    37c4:	30 e0       	ldi	r19, 0x00	; 0
    37c6:	44 eb       	ldi	r20, 0xB4	; 180
    37c8:	50 e4       	ldi	r21, 0x40	; 64
    37ca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    37ce:	dc 01       	movw	r26, r24
    37d0:	cb 01       	movw	r24, r22
    37d2:	bc 01       	movw	r22, r24
    37d4:	cd 01       	movw	r24, r26
    37d6:	20 e0       	ldi	r18, 0x00	; 0
    37d8:	30 e0       	ldi	r19, 0x00	; 0
    37da:	40 e8       	ldi	r20, 0x80	; 128
    37dc:	52 e4       	ldi	r21, 0x42	; 66
    37de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37e2:	dc 01       	movw	r26, r24
    37e4:	cb 01       	movw	r24, r22
    37e6:	bc 01       	movw	r22, r24
    37e8:	cd 01       	movw	r24, r26
    37ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ee:	dc 01       	movw	r26, r24
    37f0:	cb 01       	movw	r24, r22
    37f2:	9f af       	std	Y+63, r25	; 0x3f
    37f4:	8e af       	std	Y+62, r24	; 0x3e
	u16 Local_u16MaxItration = Local_u16NumOfSteps/8;
    37f6:	8e ad       	ldd	r24, Y+62	; 0x3e
    37f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    37fa:	96 95       	lsr	r25
    37fc:	87 95       	ror	r24
    37fe:	96 95       	lsr	r25
    3800:	87 95       	ror	r24
    3802:	96 95       	lsr	r25
    3804:	87 95       	ror	r24
    3806:	9d af       	std	Y+61, r25	; 0x3d
    3808:	8c af       	std	Y+60, r24	; 0x3c
	u8 Local_u8ItrateStep = 0,con1,con2 ;
    380a:	1b ae       	std	Y+59, r1	; 0x3b
	if(STEP_LOWER_NIBBLE == Copy_pStep->Nibble)
    380c:	fe 01       	movw	r30, r28
    380e:	ed 5b       	subi	r30, 0xBD	; 189
    3810:	ff 4f       	sbci	r31, 0xFF	; 255
    3812:	01 90       	ld	r0, Z+
    3814:	f0 81       	ld	r31, Z
    3816:	e0 2d       	mov	r30, r0
    3818:	81 81       	ldd	r24, Z+1	; 0x01
    381a:	88 23       	and	r24, r24
    381c:	09 f0       	breq	.+2      	; 0x3820 <STEP_MOTORu8StartHalfMode+0xb6>
    381e:	96 c1       	rjmp	.+812    	; 0x3b4c <STEP_MOTORu8StartHalfMode+0x3e2>
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
    3820:	fe 01       	movw	r30, r28
    3822:	ed 5b       	subi	r30, 0xBD	; 189
    3824:	ff 4f       	sbci	r31, 0xFF	; 255
    3826:	01 90       	ld	r0, Z+
    3828:	f0 81       	ld	r31, Z
    382a:	e0 2d       	mov	r30, r0
    382c:	82 81       	ldd	r24, Z+2	; 0x02
    382e:	88 23       	and	r24, r24
    3830:	09 f0       	breq	.+2      	; 0x3834 <STEP_MOTORu8StartHalfMode+0xca>
    3832:	c1 c0       	rjmp	.+386    	; 0x39b6 <STEP_MOTORu8StartHalfMode+0x24c>
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3834:	fe 01       	movw	r30, r28
    3836:	e0 5c       	subi	r30, 0xC0	; 192
    3838:	ff 4f       	sbci	r31, 0xFF	; 255
    383a:	11 82       	std	Z+1, r1	; 0x01
    383c:	10 82       	st	Z, r1
    383e:	af c0       	rjmp	.+350    	; 0x399e <STEP_MOTORu8StartHalfMode+0x234>
			{
				con1 = 0x01;
    3840:	81 e0       	ldi	r24, 0x01	; 1
    3842:	8a af       	std	Y+58, r24	; 0x3a
				con2 = 0x03;
    3844:	83 e0       	ldi	r24, 0x03	; 3
    3846:	89 af       	std	Y+57, r24	; 0x39
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3848:	81 e0       	ldi	r24, 0x01	; 1
    384a:	8b af       	std	Y+59, r24	; 0x3b
    384c:	98 c0       	rjmp	.+304    	; 0x397e <STEP_MOTORu8StartHalfMode+0x214>
				{

					if(Local_u8ItrateStep%2==1)
    384e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3850:	88 2f       	mov	r24, r24
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	81 70       	andi	r24, 0x01	; 1
    3856:	90 70       	andi	r25, 0x00	; 0
    3858:	88 23       	and	r24, r24
    385a:	71 f0       	breq	.+28     	; 0x3878 <STEP_MOTORu8StartHalfMode+0x10e>
					{
						DIO_u8SetLowNibbleValue(Copy_pStep->Port,con1);
    385c:	fe 01       	movw	r30, r28
    385e:	ed 5b       	subi	r30, 0xBD	; 189
    3860:	ff 4f       	sbci	r31, 0xFF	; 255
    3862:	01 90       	ld	r0, Z+
    3864:	f0 81       	ld	r31, Z
    3866:	e0 2d       	mov	r30, r0
    3868:	80 81       	ld	r24, Z
    386a:	6a ad       	ldd	r22, Y+58	; 0x3a
    386c:	0e 94 b4 12 	call	0x2568	; 0x2568 <DIO_u8SetLowNibbleValue>
						con1<<=1;
    3870:	8a ad       	ldd	r24, Y+58	; 0x3a
    3872:	88 0f       	add	r24, r24
    3874:	8a af       	std	Y+58, r24	; 0x3a
    3876:	0e c0       	rjmp	.+28     	; 0x3894 <STEP_MOTORu8StartHalfMode+0x12a>
					}
					else
					{
						DIO_u8SetLowNibbleValue(Copy_pStep->Port,con2);
    3878:	fe 01       	movw	r30, r28
    387a:	ed 5b       	subi	r30, 0xBD	; 189
    387c:	ff 4f       	sbci	r31, 0xFF	; 255
    387e:	01 90       	ld	r0, Z+
    3880:	f0 81       	ld	r31, Z
    3882:	e0 2d       	mov	r30, r0
    3884:	80 81       	ld	r24, Z
    3886:	69 ad       	ldd	r22, Y+57	; 0x39
    3888:	0e 94 b4 12 	call	0x2568	; 0x2568 <DIO_u8SetLowNibbleValue>
						con2 = RotateLeftLowNibble(con2);
    388c:	89 ad       	ldd	r24, Y+57	; 0x39
    388e:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <RotateLeftLowNibble>
    3892:	89 af       	std	Y+57, r24	; 0x39
    3894:	80 e0       	ldi	r24, 0x00	; 0
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	a0 e0       	ldi	r26, 0x00	; 0
    389a:	b0 e4       	ldi	r27, 0x40	; 64
    389c:	8d ab       	std	Y+53, r24	; 0x35
    389e:	9e ab       	std	Y+54, r25	; 0x36
    38a0:	af ab       	std	Y+55, r26	; 0x37
    38a2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38a4:	6d a9       	ldd	r22, Y+53	; 0x35
    38a6:	7e a9       	ldd	r23, Y+54	; 0x36
    38a8:	8f a9       	ldd	r24, Y+55	; 0x37
    38aa:	98 ad       	ldd	r25, Y+56	; 0x38
    38ac:	20 e0       	ldi	r18, 0x00	; 0
    38ae:	30 e0       	ldi	r19, 0x00	; 0
    38b0:	4a ef       	ldi	r20, 0xFA	; 250
    38b2:	54 e4       	ldi	r21, 0x44	; 68
    38b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b8:	dc 01       	movw	r26, r24
    38ba:	cb 01       	movw	r24, r22
    38bc:	89 ab       	std	Y+49, r24	; 0x31
    38be:	9a ab       	std	Y+50, r25	; 0x32
    38c0:	ab ab       	std	Y+51, r26	; 0x33
    38c2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    38c4:	69 a9       	ldd	r22, Y+49	; 0x31
    38c6:	7a a9       	ldd	r23, Y+50	; 0x32
    38c8:	8b a9       	ldd	r24, Y+51	; 0x33
    38ca:	9c a9       	ldd	r25, Y+52	; 0x34
    38cc:	20 e0       	ldi	r18, 0x00	; 0
    38ce:	30 e0       	ldi	r19, 0x00	; 0
    38d0:	40 e8       	ldi	r20, 0x80	; 128
    38d2:	5f e3       	ldi	r21, 0x3F	; 63
    38d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38d8:	88 23       	and	r24, r24
    38da:	2c f4       	brge	.+10     	; 0x38e6 <STEP_MOTORu8StartHalfMode+0x17c>
		__ticks = 1;
    38dc:	81 e0       	ldi	r24, 0x01	; 1
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	98 ab       	std	Y+48, r25	; 0x30
    38e2:	8f a7       	std	Y+47, r24	; 0x2f
    38e4:	3f c0       	rjmp	.+126    	; 0x3964 <STEP_MOTORu8StartHalfMode+0x1fa>
	else if (__tmp > 65535)
    38e6:	69 a9       	ldd	r22, Y+49	; 0x31
    38e8:	7a a9       	ldd	r23, Y+50	; 0x32
    38ea:	8b a9       	ldd	r24, Y+51	; 0x33
    38ec:	9c a9       	ldd	r25, Y+52	; 0x34
    38ee:	20 e0       	ldi	r18, 0x00	; 0
    38f0:	3f ef       	ldi	r19, 0xFF	; 255
    38f2:	4f e7       	ldi	r20, 0x7F	; 127
    38f4:	57 e4       	ldi	r21, 0x47	; 71
    38f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38fa:	18 16       	cp	r1, r24
    38fc:	4c f5       	brge	.+82     	; 0x3950 <STEP_MOTORu8StartHalfMode+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38fe:	6d a9       	ldd	r22, Y+53	; 0x35
    3900:	7e a9       	ldd	r23, Y+54	; 0x36
    3902:	8f a9       	ldd	r24, Y+55	; 0x37
    3904:	98 ad       	ldd	r25, Y+56	; 0x38
    3906:	20 e0       	ldi	r18, 0x00	; 0
    3908:	30 e0       	ldi	r19, 0x00	; 0
    390a:	40 e2       	ldi	r20, 0x20	; 32
    390c:	51 e4       	ldi	r21, 0x41	; 65
    390e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3912:	dc 01       	movw	r26, r24
    3914:	cb 01       	movw	r24, r22
    3916:	bc 01       	movw	r22, r24
    3918:	cd 01       	movw	r24, r26
    391a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    391e:	dc 01       	movw	r26, r24
    3920:	cb 01       	movw	r24, r22
    3922:	98 ab       	std	Y+48, r25	; 0x30
    3924:	8f a7       	std	Y+47, r24	; 0x2f
    3926:	0f c0       	rjmp	.+30     	; 0x3946 <STEP_MOTORu8StartHalfMode+0x1dc>
    3928:	88 ec       	ldi	r24, 0xC8	; 200
    392a:	90 e0       	ldi	r25, 0x00	; 0
    392c:	9e a7       	std	Y+46, r25	; 0x2e
    392e:	8d a7       	std	Y+45, r24	; 0x2d
    3930:	8d a5       	ldd	r24, Y+45	; 0x2d
    3932:	9e a5       	ldd	r25, Y+46	; 0x2e
    3934:	01 97       	sbiw	r24, 0x01	; 1
    3936:	f1 f7       	brne	.-4      	; 0x3934 <STEP_MOTORu8StartHalfMode+0x1ca>
    3938:	9e a7       	std	Y+46, r25	; 0x2e
    393a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    393c:	8f a5       	ldd	r24, Y+47	; 0x2f
    393e:	98 a9       	ldd	r25, Y+48	; 0x30
    3940:	01 97       	sbiw	r24, 0x01	; 1
    3942:	98 ab       	std	Y+48, r25	; 0x30
    3944:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3946:	8f a5       	ldd	r24, Y+47	; 0x2f
    3948:	98 a9       	ldd	r25, Y+48	; 0x30
    394a:	00 97       	sbiw	r24, 0x00	; 0
    394c:	69 f7       	brne	.-38     	; 0x3928 <STEP_MOTORu8StartHalfMode+0x1be>
    394e:	14 c0       	rjmp	.+40     	; 0x3978 <STEP_MOTORu8StartHalfMode+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3950:	69 a9       	ldd	r22, Y+49	; 0x31
    3952:	7a a9       	ldd	r23, Y+50	; 0x32
    3954:	8b a9       	ldd	r24, Y+51	; 0x33
    3956:	9c a9       	ldd	r25, Y+52	; 0x34
    3958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    395c:	dc 01       	movw	r26, r24
    395e:	cb 01       	movw	r24, r22
    3960:	98 ab       	std	Y+48, r25	; 0x30
    3962:	8f a7       	std	Y+47, r24	; 0x2f
    3964:	8f a5       	ldd	r24, Y+47	; 0x2f
    3966:	98 a9       	ldd	r25, Y+48	; 0x30
    3968:	9c a7       	std	Y+44, r25	; 0x2c
    396a:	8b a7       	std	Y+43, r24	; 0x2b
    396c:	8b a5       	ldd	r24, Y+43	; 0x2b
    396e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3970:	01 97       	sbiw	r24, 0x01	; 1
    3972:	f1 f7       	brne	.-4      	; 0x3970 <STEP_MOTORu8StartHalfMode+0x206>
    3974:	9c a7       	std	Y+44, r25	; 0x2c
    3976:	8b a7       	std	Y+43, r24	; 0x2b

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				con1 = 0x01;
				con2 = 0x03;
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3978:	8b ad       	ldd	r24, Y+59	; 0x3b
    397a:	8f 5f       	subi	r24, 0xFF	; 255
    397c:	8b af       	std	Y+59, r24	; 0x3b
    397e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3980:	89 30       	cpi	r24, 0x09	; 9
    3982:	08 f4       	brcc	.+2      	; 0x3986 <STEP_MOTORu8StartHalfMode+0x21c>
    3984:	64 cf       	rjmp	.-312    	; 0x384e <STEP_MOTORu8StartHalfMode+0xe4>
	if(STEP_LOWER_NIBBLE == Copy_pStep->Nibble)
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3986:	de 01       	movw	r26, r28
    3988:	a0 5c       	subi	r26, 0xC0	; 192
    398a:	bf 4f       	sbci	r27, 0xFF	; 255
    398c:	fe 01       	movw	r30, r28
    398e:	e0 5c       	subi	r30, 0xC0	; 192
    3990:	ff 4f       	sbci	r31, 0xFF	; 255
    3992:	80 81       	ld	r24, Z
    3994:	91 81       	ldd	r25, Z+1	; 0x01
    3996:	01 96       	adiw	r24, 0x01	; 1
    3998:	11 96       	adiw	r26, 0x01	; 1
    399a:	9c 93       	st	X, r25
    399c:	8e 93       	st	-X, r24
    399e:	fe 01       	movw	r30, r28
    39a0:	e0 5c       	subi	r30, 0xC0	; 192
    39a2:	ff 4f       	sbci	r31, 0xFF	; 255
    39a4:	20 81       	ld	r18, Z
    39a6:	31 81       	ldd	r19, Z+1	; 0x01
    39a8:	8c ad       	ldd	r24, Y+60	; 0x3c
    39aa:	9d ad       	ldd	r25, Y+61	; 0x3d
    39ac:	28 17       	cp	r18, r24
    39ae:	39 07       	cpc	r19, r25
    39b0:	08 f4       	brcc	.+2      	; 0x39b4 <STEP_MOTORu8StartHalfMode+0x24a>
    39b2:	46 cf       	rjmp	.-372    	; 0x3840 <STEP_MOTORu8StartHalfMode+0xd6>
    39b4:	7e c2       	rjmp	.+1276   	; 0x3eb2 <STEP_MOTORu8StartHalfMode+0x748>
					}
					_delay_ms(2);
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
    39b6:	fe 01       	movw	r30, r28
    39b8:	ed 5b       	subi	r30, 0xBD	; 189
    39ba:	ff 4f       	sbci	r31, 0xFF	; 255
    39bc:	01 90       	ld	r0, Z+
    39be:	f0 81       	ld	r31, Z
    39c0:	e0 2d       	mov	r30, r0
    39c2:	82 81       	ldd	r24, Z+2	; 0x02
    39c4:	81 30       	cpi	r24, 0x01	; 1
    39c6:	09 f0       	breq	.+2      	; 0x39ca <STEP_MOTORu8StartHalfMode+0x260>
    39c8:	74 c2       	rjmp	.+1256   	; 0x3eb2 <STEP_MOTORu8StartHalfMode+0x748>
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    39ca:	fe 01       	movw	r30, r28
    39cc:	e0 5c       	subi	r30, 0xC0	; 192
    39ce:	ff 4f       	sbci	r31, 0xFF	; 255
    39d0:	11 82       	std	Z+1, r1	; 0x01
    39d2:	10 82       	st	Z, r1
    39d4:	af c0       	rjmp	.+350    	; 0x3b34 <STEP_MOTORu8StartHalfMode+0x3ca>
			{
				con1 = 0x08;
    39d6:	88 e0       	ldi	r24, 0x08	; 8
    39d8:	8a af       	std	Y+58, r24	; 0x3a
				con2 = 0x0c;
    39da:	8c e0       	ldi	r24, 0x0C	; 12
    39dc:	89 af       	std	Y+57, r24	; 0x39
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    39de:	81 e0       	ldi	r24, 0x01	; 1
    39e0:	8b af       	std	Y+59, r24	; 0x3b
    39e2:	98 c0       	rjmp	.+304    	; 0x3b14 <STEP_MOTORu8StartHalfMode+0x3aa>
				{

					if(Local_u8ItrateStep%2==1)
    39e4:	8b ad       	ldd	r24, Y+59	; 0x3b
    39e6:	88 2f       	mov	r24, r24
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	81 70       	andi	r24, 0x01	; 1
    39ec:	90 70       	andi	r25, 0x00	; 0
    39ee:	88 23       	and	r24, r24
    39f0:	71 f0       	breq	.+28     	; 0x3a0e <STEP_MOTORu8StartHalfMode+0x2a4>
					{
						DIO_u8SetLowNibbleValue(Copy_pStep->Port,con1);
    39f2:	fe 01       	movw	r30, r28
    39f4:	ed 5b       	subi	r30, 0xBD	; 189
    39f6:	ff 4f       	sbci	r31, 0xFF	; 255
    39f8:	01 90       	ld	r0, Z+
    39fa:	f0 81       	ld	r31, Z
    39fc:	e0 2d       	mov	r30, r0
    39fe:	80 81       	ld	r24, Z
    3a00:	6a ad       	ldd	r22, Y+58	; 0x3a
    3a02:	0e 94 b4 12 	call	0x2568	; 0x2568 <DIO_u8SetLowNibbleValue>
						con1>>=1;
    3a06:	8a ad       	ldd	r24, Y+58	; 0x3a
    3a08:	86 95       	lsr	r24
    3a0a:	8a af       	std	Y+58, r24	; 0x3a
    3a0c:	0e c0       	rjmp	.+28     	; 0x3a2a <STEP_MOTORu8StartHalfMode+0x2c0>
					}
					else
					{
						DIO_u8SetLowNibbleValue(Copy_pStep->Port,con2);
    3a0e:	fe 01       	movw	r30, r28
    3a10:	ed 5b       	subi	r30, 0xBD	; 189
    3a12:	ff 4f       	sbci	r31, 0xFF	; 255
    3a14:	01 90       	ld	r0, Z+
    3a16:	f0 81       	ld	r31, Z
    3a18:	e0 2d       	mov	r30, r0
    3a1a:	80 81       	ld	r24, Z
    3a1c:	69 ad       	ldd	r22, Y+57	; 0x39
    3a1e:	0e 94 b4 12 	call	0x2568	; 0x2568 <DIO_u8SetLowNibbleValue>
						con2 = RotateRightLowNibble(con2);
    3a22:	89 ad       	ldd	r24, Y+57	; 0x39
    3a24:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <RotateRightLowNibble>
    3a28:	89 af       	std	Y+57, r24	; 0x39
    3a2a:	80 e0       	ldi	r24, 0x00	; 0
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
    3a2e:	a0 e0       	ldi	r26, 0x00	; 0
    3a30:	b0 e4       	ldi	r27, 0x40	; 64
    3a32:	8f a3       	std	Y+39, r24	; 0x27
    3a34:	98 a7       	std	Y+40, r25	; 0x28
    3a36:	a9 a7       	std	Y+41, r26	; 0x29
    3a38:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a3a:	6f a1       	ldd	r22, Y+39	; 0x27
    3a3c:	78 a5       	ldd	r23, Y+40	; 0x28
    3a3e:	89 a5       	ldd	r24, Y+41	; 0x29
    3a40:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a42:	20 e0       	ldi	r18, 0x00	; 0
    3a44:	30 e0       	ldi	r19, 0x00	; 0
    3a46:	4a ef       	ldi	r20, 0xFA	; 250
    3a48:	54 e4       	ldi	r21, 0x44	; 68
    3a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a4e:	dc 01       	movw	r26, r24
    3a50:	cb 01       	movw	r24, r22
    3a52:	8b a3       	std	Y+35, r24	; 0x23
    3a54:	9c a3       	std	Y+36, r25	; 0x24
    3a56:	ad a3       	std	Y+37, r26	; 0x25
    3a58:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3a5a:	6b a1       	ldd	r22, Y+35	; 0x23
    3a5c:	7c a1       	ldd	r23, Y+36	; 0x24
    3a5e:	8d a1       	ldd	r24, Y+37	; 0x25
    3a60:	9e a1       	ldd	r25, Y+38	; 0x26
    3a62:	20 e0       	ldi	r18, 0x00	; 0
    3a64:	30 e0       	ldi	r19, 0x00	; 0
    3a66:	40 e8       	ldi	r20, 0x80	; 128
    3a68:	5f e3       	ldi	r21, 0x3F	; 63
    3a6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a6e:	88 23       	and	r24, r24
    3a70:	2c f4       	brge	.+10     	; 0x3a7c <STEP_MOTORu8StartHalfMode+0x312>
		__ticks = 1;
    3a72:	81 e0       	ldi	r24, 0x01	; 1
    3a74:	90 e0       	ldi	r25, 0x00	; 0
    3a76:	9a a3       	std	Y+34, r25	; 0x22
    3a78:	89 a3       	std	Y+33, r24	; 0x21
    3a7a:	3f c0       	rjmp	.+126    	; 0x3afa <STEP_MOTORu8StartHalfMode+0x390>
	else if (__tmp > 65535)
    3a7c:	6b a1       	ldd	r22, Y+35	; 0x23
    3a7e:	7c a1       	ldd	r23, Y+36	; 0x24
    3a80:	8d a1       	ldd	r24, Y+37	; 0x25
    3a82:	9e a1       	ldd	r25, Y+38	; 0x26
    3a84:	20 e0       	ldi	r18, 0x00	; 0
    3a86:	3f ef       	ldi	r19, 0xFF	; 255
    3a88:	4f e7       	ldi	r20, 0x7F	; 127
    3a8a:	57 e4       	ldi	r21, 0x47	; 71
    3a8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a90:	18 16       	cp	r1, r24
    3a92:	4c f5       	brge	.+82     	; 0x3ae6 <STEP_MOTORu8StartHalfMode+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a94:	6f a1       	ldd	r22, Y+39	; 0x27
    3a96:	78 a5       	ldd	r23, Y+40	; 0x28
    3a98:	89 a5       	ldd	r24, Y+41	; 0x29
    3a9a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a9c:	20 e0       	ldi	r18, 0x00	; 0
    3a9e:	30 e0       	ldi	r19, 0x00	; 0
    3aa0:	40 e2       	ldi	r20, 0x20	; 32
    3aa2:	51 e4       	ldi	r21, 0x41	; 65
    3aa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aa8:	dc 01       	movw	r26, r24
    3aaa:	cb 01       	movw	r24, r22
    3aac:	bc 01       	movw	r22, r24
    3aae:	cd 01       	movw	r24, r26
    3ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ab4:	dc 01       	movw	r26, r24
    3ab6:	cb 01       	movw	r24, r22
    3ab8:	9a a3       	std	Y+34, r25	; 0x22
    3aba:	89 a3       	std	Y+33, r24	; 0x21
    3abc:	0f c0       	rjmp	.+30     	; 0x3adc <STEP_MOTORu8StartHalfMode+0x372>
    3abe:	88 ec       	ldi	r24, 0xC8	; 200
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
    3ac2:	98 a3       	std	Y+32, r25	; 0x20
    3ac4:	8f 8f       	std	Y+31, r24	; 0x1f
    3ac6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ac8:	98 a1       	ldd	r25, Y+32	; 0x20
    3aca:	01 97       	sbiw	r24, 0x01	; 1
    3acc:	f1 f7       	brne	.-4      	; 0x3aca <STEP_MOTORu8StartHalfMode+0x360>
    3ace:	98 a3       	std	Y+32, r25	; 0x20
    3ad0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ad2:	89 a1       	ldd	r24, Y+33	; 0x21
    3ad4:	9a a1       	ldd	r25, Y+34	; 0x22
    3ad6:	01 97       	sbiw	r24, 0x01	; 1
    3ad8:	9a a3       	std	Y+34, r25	; 0x22
    3ada:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3adc:	89 a1       	ldd	r24, Y+33	; 0x21
    3ade:	9a a1       	ldd	r25, Y+34	; 0x22
    3ae0:	00 97       	sbiw	r24, 0x00	; 0
    3ae2:	69 f7       	brne	.-38     	; 0x3abe <STEP_MOTORu8StartHalfMode+0x354>
    3ae4:	14 c0       	rjmp	.+40     	; 0x3b0e <STEP_MOTORu8StartHalfMode+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ae6:	6b a1       	ldd	r22, Y+35	; 0x23
    3ae8:	7c a1       	ldd	r23, Y+36	; 0x24
    3aea:	8d a1       	ldd	r24, Y+37	; 0x25
    3aec:	9e a1       	ldd	r25, Y+38	; 0x26
    3aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3af2:	dc 01       	movw	r26, r24
    3af4:	cb 01       	movw	r24, r22
    3af6:	9a a3       	std	Y+34, r25	; 0x22
    3af8:	89 a3       	std	Y+33, r24	; 0x21
    3afa:	89 a1       	ldd	r24, Y+33	; 0x21
    3afc:	9a a1       	ldd	r25, Y+34	; 0x22
    3afe:	9e 8f       	std	Y+30, r25	; 0x1e
    3b00:	8d 8f       	std	Y+29, r24	; 0x1d
    3b02:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b04:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b06:	01 97       	sbiw	r24, 0x01	; 1
    3b08:	f1 f7       	brne	.-4      	; 0x3b06 <STEP_MOTORu8StartHalfMode+0x39c>
    3b0a:	9e 8f       	std	Y+30, r25	; 0x1e
    3b0c:	8d 8f       	std	Y+29, r24	; 0x1d

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				con1 = 0x08;
				con2 = 0x0c;
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3b0e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3b10:	8f 5f       	subi	r24, 0xFF	; 255
    3b12:	8b af       	std	Y+59, r24	; 0x3b
    3b14:	8b ad       	ldd	r24, Y+59	; 0x3b
    3b16:	89 30       	cpi	r24, 0x09	; 9
    3b18:	08 f4       	brcc	.+2      	; 0x3b1c <STEP_MOTORu8StartHalfMode+0x3b2>
    3b1a:	64 cf       	rjmp	.-312    	; 0x39e4 <STEP_MOTORu8StartHalfMode+0x27a>
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3b1c:	de 01       	movw	r26, r28
    3b1e:	a0 5c       	subi	r26, 0xC0	; 192
    3b20:	bf 4f       	sbci	r27, 0xFF	; 255
    3b22:	fe 01       	movw	r30, r28
    3b24:	e0 5c       	subi	r30, 0xC0	; 192
    3b26:	ff 4f       	sbci	r31, 0xFF	; 255
    3b28:	80 81       	ld	r24, Z
    3b2a:	91 81       	ldd	r25, Z+1	; 0x01
    3b2c:	01 96       	adiw	r24, 0x01	; 1
    3b2e:	11 96       	adiw	r26, 0x01	; 1
    3b30:	9c 93       	st	X, r25
    3b32:	8e 93       	st	-X, r24
    3b34:	fe 01       	movw	r30, r28
    3b36:	e0 5c       	subi	r30, 0xC0	; 192
    3b38:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3a:	20 81       	ld	r18, Z
    3b3c:	31 81       	ldd	r19, Z+1	; 0x01
    3b3e:	8c ad       	ldd	r24, Y+60	; 0x3c
    3b40:	9d ad       	ldd	r25, Y+61	; 0x3d
    3b42:	28 17       	cp	r18, r24
    3b44:	39 07       	cpc	r19, r25
    3b46:	08 f4       	brcc	.+2      	; 0x3b4a <STEP_MOTORu8StartHalfMode+0x3e0>
    3b48:	46 cf       	rjmp	.-372    	; 0x39d6 <STEP_MOTORu8StartHalfMode+0x26c>
    3b4a:	b3 c1       	rjmp	.+870    	; 0x3eb2 <STEP_MOTORu8StartHalfMode+0x748>
				}
			}
		}

	}
	else if(STEP_UPPER_NIBBLE == Copy_pStep->Nibble)
    3b4c:	fe 01       	movw	r30, r28
    3b4e:	ed 5b       	subi	r30, 0xBD	; 189
    3b50:	ff 4f       	sbci	r31, 0xFF	; 255
    3b52:	01 90       	ld	r0, Z+
    3b54:	f0 81       	ld	r31, Z
    3b56:	e0 2d       	mov	r30, r0
    3b58:	81 81       	ldd	r24, Z+1	; 0x01
    3b5a:	81 30       	cpi	r24, 0x01	; 1
    3b5c:	09 f0       	breq	.+2      	; 0x3b60 <STEP_MOTORu8StartHalfMode+0x3f6>
    3b5e:	a4 c1       	rjmp	.+840    	; 0x3ea8 <STEP_MOTORu8StartHalfMode+0x73e>
	{

		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
    3b60:	fe 01       	movw	r30, r28
    3b62:	ed 5b       	subi	r30, 0xBD	; 189
    3b64:	ff 4f       	sbci	r31, 0xFF	; 255
    3b66:	01 90       	ld	r0, Z+
    3b68:	f0 81       	ld	r31, Z
    3b6a:	e0 2d       	mov	r30, r0
    3b6c:	82 81       	ldd	r24, Z+2	; 0x02
    3b6e:	88 23       	and	r24, r24
    3b70:	09 f0       	breq	.+2      	; 0x3b74 <STEP_MOTORu8StartHalfMode+0x40a>
    3b72:	c9 c0       	rjmp	.+402    	; 0x3d06 <STEP_MOTORu8StartHalfMode+0x59c>
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3b74:	fe 01       	movw	r30, r28
    3b76:	e0 5c       	subi	r30, 0xC0	; 192
    3b78:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7a:	11 82       	std	Z+1, r1	; 0x01
    3b7c:	10 82       	st	Z, r1
    3b7e:	b7 c0       	rjmp	.+366    	; 0x3cee <STEP_MOTORu8StartHalfMode+0x584>
			{
				con1 = 0x01;
    3b80:	81 e0       	ldi	r24, 0x01	; 1
    3b82:	8a af       	std	Y+58, r24	; 0x3a
				con2 = 0x03;
    3b84:	83 e0       	ldi	r24, 0x03	; 3
    3b86:	89 af       	std	Y+57, r24	; 0x39
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3b88:	81 e0       	ldi	r24, 0x01	; 1
    3b8a:	8b af       	std	Y+59, r24	; 0x3b
    3b8c:	a0 c0       	rjmp	.+320    	; 0x3cce <STEP_MOTORu8StartHalfMode+0x564>
				{

					if(Local_u8ItrateStep%2==1)
    3b8e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3b90:	88 2f       	mov	r24, r24
    3b92:	90 e0       	ldi	r25, 0x00	; 0
    3b94:	81 70       	andi	r24, 0x01	; 1
    3b96:	90 70       	andi	r25, 0x00	; 0
    3b98:	88 23       	and	r24, r24
    3b9a:	71 f0       	breq	.+28     	; 0x3bb8 <STEP_MOTORu8StartHalfMode+0x44e>
					{
						DIO_u8SetHighNibbleValue(Copy_pStep->Port,con1);
    3b9c:	fe 01       	movw	r30, r28
    3b9e:	ed 5b       	subi	r30, 0xBD	; 189
    3ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba2:	01 90       	ld	r0, Z+
    3ba4:	f0 81       	ld	r31, Z
    3ba6:	e0 2d       	mov	r30, r0
    3ba8:	80 81       	ld	r24, Z
    3baa:	6a ad       	ldd	r22, Y+58	; 0x3a
    3bac:	0e 94 2f 13 	call	0x265e	; 0x265e <DIO_u8SetHighNibbleValue>
						con1<<=1;
    3bb0:	8a ad       	ldd	r24, Y+58	; 0x3a
    3bb2:	88 0f       	add	r24, r24
    3bb4:	8a af       	std	Y+58, r24	; 0x3a
    3bb6:	16 c0       	rjmp	.+44     	; 0x3be4 <STEP_MOTORu8StartHalfMode+0x47a>
					}
					else
					{
						DIO_u8SetHighNibbleValue(Copy_pStep->Port,con2);
    3bb8:	fe 01       	movw	r30, r28
    3bba:	ed 5b       	subi	r30, 0xBD	; 189
    3bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bbe:	01 90       	ld	r0, Z+
    3bc0:	f0 81       	ld	r31, Z
    3bc2:	e0 2d       	mov	r30, r0
    3bc4:	80 81       	ld	r24, Z
    3bc6:	69 ad       	ldd	r22, Y+57	; 0x39
    3bc8:	0e 94 2f 13 	call	0x265e	; 0x265e <DIO_u8SetHighNibbleValue>
						CLCD_voidWriteNumber(con2);
    3bcc:	89 ad       	ldd	r24, Y+57	; 0x39
    3bce:	88 2f       	mov	r24, r24
    3bd0:	90 e0       	ldi	r25, 0x00	; 0
    3bd2:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <CLCD_voidWriteNumber>
						CLCD_voidSendData(' ');
    3bd6:	80 e2       	ldi	r24, 0x20	; 32
    3bd8:	0e 94 46 0b 	call	0x168c	; 0x168c <CLCD_voidSendData>
						con2 = RotateLeftLowNibble(con2);
    3bdc:	89 ad       	ldd	r24, Y+57	; 0x39
    3bde:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <RotateLeftLowNibble>
    3be2:	89 af       	std	Y+57, r24	; 0x39
    3be4:	80 e0       	ldi	r24, 0x00	; 0
    3be6:	90 e0       	ldi	r25, 0x00	; 0
    3be8:	a0 e0       	ldi	r26, 0x00	; 0
    3bea:	b0 e4       	ldi	r27, 0x40	; 64
    3bec:	89 8f       	std	Y+25, r24	; 0x19
    3bee:	9a 8f       	std	Y+26, r25	; 0x1a
    3bf0:	ab 8f       	std	Y+27, r26	; 0x1b
    3bf2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bf4:	69 8d       	ldd	r22, Y+25	; 0x19
    3bf6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bf8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bfc:	20 e0       	ldi	r18, 0x00	; 0
    3bfe:	30 e0       	ldi	r19, 0x00	; 0
    3c00:	4a ef       	ldi	r20, 0xFA	; 250
    3c02:	54 e4       	ldi	r21, 0x44	; 68
    3c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c08:	dc 01       	movw	r26, r24
    3c0a:	cb 01       	movw	r24, r22
    3c0c:	8d 8b       	std	Y+21, r24	; 0x15
    3c0e:	9e 8b       	std	Y+22, r25	; 0x16
    3c10:	af 8b       	std	Y+23, r26	; 0x17
    3c12:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c14:	6d 89       	ldd	r22, Y+21	; 0x15
    3c16:	7e 89       	ldd	r23, Y+22	; 0x16
    3c18:	8f 89       	ldd	r24, Y+23	; 0x17
    3c1a:	98 8d       	ldd	r25, Y+24	; 0x18
    3c1c:	20 e0       	ldi	r18, 0x00	; 0
    3c1e:	30 e0       	ldi	r19, 0x00	; 0
    3c20:	40 e8       	ldi	r20, 0x80	; 128
    3c22:	5f e3       	ldi	r21, 0x3F	; 63
    3c24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c28:	88 23       	and	r24, r24
    3c2a:	2c f4       	brge	.+10     	; 0x3c36 <STEP_MOTORu8StartHalfMode+0x4cc>
		__ticks = 1;
    3c2c:	81 e0       	ldi	r24, 0x01	; 1
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	9c 8b       	std	Y+20, r25	; 0x14
    3c32:	8b 8b       	std	Y+19, r24	; 0x13
    3c34:	3f c0       	rjmp	.+126    	; 0x3cb4 <STEP_MOTORu8StartHalfMode+0x54a>
	else if (__tmp > 65535)
    3c36:	6d 89       	ldd	r22, Y+21	; 0x15
    3c38:	7e 89       	ldd	r23, Y+22	; 0x16
    3c3a:	8f 89       	ldd	r24, Y+23	; 0x17
    3c3c:	98 8d       	ldd	r25, Y+24	; 0x18
    3c3e:	20 e0       	ldi	r18, 0x00	; 0
    3c40:	3f ef       	ldi	r19, 0xFF	; 255
    3c42:	4f e7       	ldi	r20, 0x7F	; 127
    3c44:	57 e4       	ldi	r21, 0x47	; 71
    3c46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c4a:	18 16       	cp	r1, r24
    3c4c:	4c f5       	brge	.+82     	; 0x3ca0 <STEP_MOTORu8StartHalfMode+0x536>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c4e:	69 8d       	ldd	r22, Y+25	; 0x19
    3c50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c56:	20 e0       	ldi	r18, 0x00	; 0
    3c58:	30 e0       	ldi	r19, 0x00	; 0
    3c5a:	40 e2       	ldi	r20, 0x20	; 32
    3c5c:	51 e4       	ldi	r21, 0x41	; 65
    3c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c62:	dc 01       	movw	r26, r24
    3c64:	cb 01       	movw	r24, r22
    3c66:	bc 01       	movw	r22, r24
    3c68:	cd 01       	movw	r24, r26
    3c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c6e:	dc 01       	movw	r26, r24
    3c70:	cb 01       	movw	r24, r22
    3c72:	9c 8b       	std	Y+20, r25	; 0x14
    3c74:	8b 8b       	std	Y+19, r24	; 0x13
    3c76:	0f c0       	rjmp	.+30     	; 0x3c96 <STEP_MOTORu8StartHalfMode+0x52c>
    3c78:	88 ec       	ldi	r24, 0xC8	; 200
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	9a 8b       	std	Y+18, r25	; 0x12
    3c7e:	89 8b       	std	Y+17, r24	; 0x11
    3c80:	89 89       	ldd	r24, Y+17	; 0x11
    3c82:	9a 89       	ldd	r25, Y+18	; 0x12
    3c84:	01 97       	sbiw	r24, 0x01	; 1
    3c86:	f1 f7       	brne	.-4      	; 0x3c84 <STEP_MOTORu8StartHalfMode+0x51a>
    3c88:	9a 8b       	std	Y+18, r25	; 0x12
    3c8a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c8c:	8b 89       	ldd	r24, Y+19	; 0x13
    3c8e:	9c 89       	ldd	r25, Y+20	; 0x14
    3c90:	01 97       	sbiw	r24, 0x01	; 1
    3c92:	9c 8b       	std	Y+20, r25	; 0x14
    3c94:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c96:	8b 89       	ldd	r24, Y+19	; 0x13
    3c98:	9c 89       	ldd	r25, Y+20	; 0x14
    3c9a:	00 97       	sbiw	r24, 0x00	; 0
    3c9c:	69 f7       	brne	.-38     	; 0x3c78 <STEP_MOTORu8StartHalfMode+0x50e>
    3c9e:	14 c0       	rjmp	.+40     	; 0x3cc8 <STEP_MOTORu8StartHalfMode+0x55e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ca0:	6d 89       	ldd	r22, Y+21	; 0x15
    3ca2:	7e 89       	ldd	r23, Y+22	; 0x16
    3ca4:	8f 89       	ldd	r24, Y+23	; 0x17
    3ca6:	98 8d       	ldd	r25, Y+24	; 0x18
    3ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cac:	dc 01       	movw	r26, r24
    3cae:	cb 01       	movw	r24, r22
    3cb0:	9c 8b       	std	Y+20, r25	; 0x14
    3cb2:	8b 8b       	std	Y+19, r24	; 0x13
    3cb4:	8b 89       	ldd	r24, Y+19	; 0x13
    3cb6:	9c 89       	ldd	r25, Y+20	; 0x14
    3cb8:	98 8b       	std	Y+16, r25	; 0x10
    3cba:	8f 87       	std	Y+15, r24	; 0x0f
    3cbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cbe:	98 89       	ldd	r25, Y+16	; 0x10
    3cc0:	01 97       	sbiw	r24, 0x01	; 1
    3cc2:	f1 f7       	brne	.-4      	; 0x3cc0 <STEP_MOTORu8StartHalfMode+0x556>
    3cc4:	98 8b       	std	Y+16, r25	; 0x10
    3cc6:	8f 87       	std	Y+15, r24	; 0x0f

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				con1 = 0x01;
				con2 = 0x03;
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3cc8:	8b ad       	ldd	r24, Y+59	; 0x3b
    3cca:	8f 5f       	subi	r24, 0xFF	; 255
    3ccc:	8b af       	std	Y+59, r24	; 0x3b
    3cce:	8b ad       	ldd	r24, Y+59	; 0x3b
    3cd0:	89 30       	cpi	r24, 0x09	; 9
    3cd2:	08 f4       	brcc	.+2      	; 0x3cd6 <STEP_MOTORu8StartHalfMode+0x56c>
    3cd4:	5c cf       	rjmp	.-328    	; 0x3b8e <STEP_MOTORu8StartHalfMode+0x424>
	{

		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3cd6:	de 01       	movw	r26, r28
    3cd8:	a0 5c       	subi	r26, 0xC0	; 192
    3cda:	bf 4f       	sbci	r27, 0xFF	; 255
    3cdc:	fe 01       	movw	r30, r28
    3cde:	e0 5c       	subi	r30, 0xC0	; 192
    3ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce2:	80 81       	ld	r24, Z
    3ce4:	91 81       	ldd	r25, Z+1	; 0x01
    3ce6:	01 96       	adiw	r24, 0x01	; 1
    3ce8:	11 96       	adiw	r26, 0x01	; 1
    3cea:	9c 93       	st	X, r25
    3cec:	8e 93       	st	-X, r24
    3cee:	fe 01       	movw	r30, r28
    3cf0:	e0 5c       	subi	r30, 0xC0	; 192
    3cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf4:	20 81       	ld	r18, Z
    3cf6:	31 81       	ldd	r19, Z+1	; 0x01
    3cf8:	8c ad       	ldd	r24, Y+60	; 0x3c
    3cfa:	9d ad       	ldd	r25, Y+61	; 0x3d
    3cfc:	28 17       	cp	r18, r24
    3cfe:	39 07       	cpc	r19, r25
    3d00:	08 f4       	brcc	.+2      	; 0x3d04 <STEP_MOTORu8StartHalfMode+0x59a>
    3d02:	3e cf       	rjmp	.-388    	; 0x3b80 <STEP_MOTORu8StartHalfMode+0x416>
    3d04:	d6 c0       	rjmp	.+428    	; 0x3eb2 <STEP_MOTORu8StartHalfMode+0x748>
					}
					_delay_ms(2);
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
    3d06:	fe 01       	movw	r30, r28
    3d08:	ed 5b       	subi	r30, 0xBD	; 189
    3d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0c:	01 90       	ld	r0, Z+
    3d0e:	f0 81       	ld	r31, Z
    3d10:	e0 2d       	mov	r30, r0
    3d12:	82 81       	ldd	r24, Z+2	; 0x02
    3d14:	81 30       	cpi	r24, 0x01	; 1
    3d16:	09 f0       	breq	.+2      	; 0x3d1a <STEP_MOTORu8StartHalfMode+0x5b0>
    3d18:	c1 c0       	rjmp	.+386    	; 0x3e9c <STEP_MOTORu8StartHalfMode+0x732>
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3d1a:	fe 01       	movw	r30, r28
    3d1c:	e0 5c       	subi	r30, 0xC0	; 192
    3d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d20:	11 82       	std	Z+1, r1	; 0x01
    3d22:	10 82       	st	Z, r1
    3d24:	af c0       	rjmp	.+350    	; 0x3e84 <STEP_MOTORu8StartHalfMode+0x71a>
			{
				con1 = 0x08;
    3d26:	88 e0       	ldi	r24, 0x08	; 8
    3d28:	8a af       	std	Y+58, r24	; 0x3a
				con2 = 0x0c;
    3d2a:	8c e0       	ldi	r24, 0x0C	; 12
    3d2c:	89 af       	std	Y+57, r24	; 0x39
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3d2e:	81 e0       	ldi	r24, 0x01	; 1
    3d30:	8b af       	std	Y+59, r24	; 0x3b
    3d32:	98 c0       	rjmp	.+304    	; 0x3e64 <STEP_MOTORu8StartHalfMode+0x6fa>
				{

					if(Local_u8ItrateStep%2==1)
    3d34:	8b ad       	ldd	r24, Y+59	; 0x3b
    3d36:	88 2f       	mov	r24, r24
    3d38:	90 e0       	ldi	r25, 0x00	; 0
    3d3a:	81 70       	andi	r24, 0x01	; 1
    3d3c:	90 70       	andi	r25, 0x00	; 0
    3d3e:	88 23       	and	r24, r24
    3d40:	71 f0       	breq	.+28     	; 0x3d5e <STEP_MOTORu8StartHalfMode+0x5f4>
					{
						DIO_u8SetHighNibbleValue(Copy_pStep->Port,con1);
    3d42:	fe 01       	movw	r30, r28
    3d44:	ed 5b       	subi	r30, 0xBD	; 189
    3d46:	ff 4f       	sbci	r31, 0xFF	; 255
    3d48:	01 90       	ld	r0, Z+
    3d4a:	f0 81       	ld	r31, Z
    3d4c:	e0 2d       	mov	r30, r0
    3d4e:	80 81       	ld	r24, Z
    3d50:	6a ad       	ldd	r22, Y+58	; 0x3a
    3d52:	0e 94 2f 13 	call	0x265e	; 0x265e <DIO_u8SetHighNibbleValue>
						con1>>=1;
    3d56:	8a ad       	ldd	r24, Y+58	; 0x3a
    3d58:	86 95       	lsr	r24
    3d5a:	8a af       	std	Y+58, r24	; 0x3a
    3d5c:	0e c0       	rjmp	.+28     	; 0x3d7a <STEP_MOTORu8StartHalfMode+0x610>
					}
					else
					{
						DIO_u8SetHighNibbleValue(Copy_pStep->Port,con2);
    3d5e:	fe 01       	movw	r30, r28
    3d60:	ed 5b       	subi	r30, 0xBD	; 189
    3d62:	ff 4f       	sbci	r31, 0xFF	; 255
    3d64:	01 90       	ld	r0, Z+
    3d66:	f0 81       	ld	r31, Z
    3d68:	e0 2d       	mov	r30, r0
    3d6a:	80 81       	ld	r24, Z
    3d6c:	69 ad       	ldd	r22, Y+57	; 0x39
    3d6e:	0e 94 2f 13 	call	0x265e	; 0x265e <DIO_u8SetHighNibbleValue>
						con2 = RotateRightLowNibble(con2);
    3d72:	89 ad       	ldd	r24, Y+57	; 0x39
    3d74:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <RotateRightLowNibble>
    3d78:	89 af       	std	Y+57, r24	; 0x39
    3d7a:	80 e0       	ldi	r24, 0x00	; 0
    3d7c:	90 e0       	ldi	r25, 0x00	; 0
    3d7e:	a0 e0       	ldi	r26, 0x00	; 0
    3d80:	b0 e4       	ldi	r27, 0x40	; 64
    3d82:	8b 87       	std	Y+11, r24	; 0x0b
    3d84:	9c 87       	std	Y+12, r25	; 0x0c
    3d86:	ad 87       	std	Y+13, r26	; 0x0d
    3d88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d90:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d92:	20 e0       	ldi	r18, 0x00	; 0
    3d94:	30 e0       	ldi	r19, 0x00	; 0
    3d96:	4a ef       	ldi	r20, 0xFA	; 250
    3d98:	54 e4       	ldi	r21, 0x44	; 68
    3d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d9e:	dc 01       	movw	r26, r24
    3da0:	cb 01       	movw	r24, r22
    3da2:	8f 83       	std	Y+7, r24	; 0x07
    3da4:	98 87       	std	Y+8, r25	; 0x08
    3da6:	a9 87       	std	Y+9, r26	; 0x09
    3da8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3daa:	6f 81       	ldd	r22, Y+7	; 0x07
    3dac:	78 85       	ldd	r23, Y+8	; 0x08
    3dae:	89 85       	ldd	r24, Y+9	; 0x09
    3db0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3db2:	20 e0       	ldi	r18, 0x00	; 0
    3db4:	30 e0       	ldi	r19, 0x00	; 0
    3db6:	40 e8       	ldi	r20, 0x80	; 128
    3db8:	5f e3       	ldi	r21, 0x3F	; 63
    3dba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3dbe:	88 23       	and	r24, r24
    3dc0:	2c f4       	brge	.+10     	; 0x3dcc <STEP_MOTORu8StartHalfMode+0x662>
		__ticks = 1;
    3dc2:	81 e0       	ldi	r24, 0x01	; 1
    3dc4:	90 e0       	ldi	r25, 0x00	; 0
    3dc6:	9e 83       	std	Y+6, r25	; 0x06
    3dc8:	8d 83       	std	Y+5, r24	; 0x05
    3dca:	3f c0       	rjmp	.+126    	; 0x3e4a <STEP_MOTORu8StartHalfMode+0x6e0>
	else if (__tmp > 65535)
    3dcc:	6f 81       	ldd	r22, Y+7	; 0x07
    3dce:	78 85       	ldd	r23, Y+8	; 0x08
    3dd0:	89 85       	ldd	r24, Y+9	; 0x09
    3dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dd4:	20 e0       	ldi	r18, 0x00	; 0
    3dd6:	3f ef       	ldi	r19, 0xFF	; 255
    3dd8:	4f e7       	ldi	r20, 0x7F	; 127
    3dda:	57 e4       	ldi	r21, 0x47	; 71
    3ddc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3de0:	18 16       	cp	r1, r24
    3de2:	4c f5       	brge	.+82     	; 0x3e36 <STEP_MOTORu8StartHalfMode+0x6cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3de4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3de6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3de8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dea:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dec:	20 e0       	ldi	r18, 0x00	; 0
    3dee:	30 e0       	ldi	r19, 0x00	; 0
    3df0:	40 e2       	ldi	r20, 0x20	; 32
    3df2:	51 e4       	ldi	r21, 0x41	; 65
    3df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3df8:	dc 01       	movw	r26, r24
    3dfa:	cb 01       	movw	r24, r22
    3dfc:	bc 01       	movw	r22, r24
    3dfe:	cd 01       	movw	r24, r26
    3e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e04:	dc 01       	movw	r26, r24
    3e06:	cb 01       	movw	r24, r22
    3e08:	9e 83       	std	Y+6, r25	; 0x06
    3e0a:	8d 83       	std	Y+5, r24	; 0x05
    3e0c:	0f c0       	rjmp	.+30     	; 0x3e2c <STEP_MOTORu8StartHalfMode+0x6c2>
    3e0e:	88 ec       	ldi	r24, 0xC8	; 200
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	9c 83       	std	Y+4, r25	; 0x04
    3e14:	8b 83       	std	Y+3, r24	; 0x03
    3e16:	8b 81       	ldd	r24, Y+3	; 0x03
    3e18:	9c 81       	ldd	r25, Y+4	; 0x04
    3e1a:	01 97       	sbiw	r24, 0x01	; 1
    3e1c:	f1 f7       	brne	.-4      	; 0x3e1a <STEP_MOTORu8StartHalfMode+0x6b0>
    3e1e:	9c 83       	std	Y+4, r25	; 0x04
    3e20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e22:	8d 81       	ldd	r24, Y+5	; 0x05
    3e24:	9e 81       	ldd	r25, Y+6	; 0x06
    3e26:	01 97       	sbiw	r24, 0x01	; 1
    3e28:	9e 83       	std	Y+6, r25	; 0x06
    3e2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e2c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e2e:	9e 81       	ldd	r25, Y+6	; 0x06
    3e30:	00 97       	sbiw	r24, 0x00	; 0
    3e32:	69 f7       	brne	.-38     	; 0x3e0e <STEP_MOTORu8StartHalfMode+0x6a4>
    3e34:	14 c0       	rjmp	.+40     	; 0x3e5e <STEP_MOTORu8StartHalfMode+0x6f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e36:	6f 81       	ldd	r22, Y+7	; 0x07
    3e38:	78 85       	ldd	r23, Y+8	; 0x08
    3e3a:	89 85       	ldd	r24, Y+9	; 0x09
    3e3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e42:	dc 01       	movw	r26, r24
    3e44:	cb 01       	movw	r24, r22
    3e46:	9e 83       	std	Y+6, r25	; 0x06
    3e48:	8d 83       	std	Y+5, r24	; 0x05
    3e4a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e4c:	9e 81       	ldd	r25, Y+6	; 0x06
    3e4e:	9a 83       	std	Y+2, r25	; 0x02
    3e50:	89 83       	std	Y+1, r24	; 0x01
    3e52:	89 81       	ldd	r24, Y+1	; 0x01
    3e54:	9a 81       	ldd	r25, Y+2	; 0x02
    3e56:	01 97       	sbiw	r24, 0x01	; 1
    3e58:	f1 f7       	brne	.-4      	; 0x3e56 <STEP_MOTORu8StartHalfMode+0x6ec>
    3e5a:	9a 83       	std	Y+2, r25	; 0x02
    3e5c:	89 83       	std	Y+1, r24	; 0x01

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				con1 = 0x08;
				con2 = 0x0c;
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3e5e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3e60:	8f 5f       	subi	r24, 0xFF	; 255
    3e62:	8b af       	std	Y+59, r24	; 0x3b
    3e64:	8b ad       	ldd	r24, Y+59	; 0x3b
    3e66:	89 30       	cpi	r24, 0x09	; 9
    3e68:	08 f4       	brcc	.+2      	; 0x3e6c <STEP_MOTORu8StartHalfMode+0x702>
    3e6a:	64 cf       	rjmp	.-312    	; 0x3d34 <STEP_MOTORu8StartHalfMode+0x5ca>
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3e6c:	de 01       	movw	r26, r28
    3e6e:	a0 5c       	subi	r26, 0xC0	; 192
    3e70:	bf 4f       	sbci	r27, 0xFF	; 255
    3e72:	fe 01       	movw	r30, r28
    3e74:	e0 5c       	subi	r30, 0xC0	; 192
    3e76:	ff 4f       	sbci	r31, 0xFF	; 255
    3e78:	80 81       	ld	r24, Z
    3e7a:	91 81       	ldd	r25, Z+1	; 0x01
    3e7c:	01 96       	adiw	r24, 0x01	; 1
    3e7e:	11 96       	adiw	r26, 0x01	; 1
    3e80:	9c 93       	st	X, r25
    3e82:	8e 93       	st	-X, r24
    3e84:	fe 01       	movw	r30, r28
    3e86:	e0 5c       	subi	r30, 0xC0	; 192
    3e88:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8a:	20 81       	ld	r18, Z
    3e8c:	31 81       	ldd	r19, Z+1	; 0x01
    3e8e:	8c ad       	ldd	r24, Y+60	; 0x3c
    3e90:	9d ad       	ldd	r25, Y+61	; 0x3d
    3e92:	28 17       	cp	r18, r24
    3e94:	39 07       	cpc	r19, r25
    3e96:	08 f4       	brcc	.+2      	; 0x3e9a <STEP_MOTORu8StartHalfMode+0x730>
    3e98:	46 cf       	rjmp	.-372    	; 0x3d26 <STEP_MOTORu8StartHalfMode+0x5bc>
    3e9a:	0b c0       	rjmp	.+22     	; 0x3eb2 <STEP_MOTORu8StartHalfMode+0x748>
					_delay_ms(2);
				}
			}
		}
		else
			Local_u8ErrorState = NOTOK;
    3e9c:	fe 01       	movw	r30, r28
    3e9e:	ee 5b       	subi	r30, 0xBE	; 190
    3ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea2:	81 e0       	ldi	r24, 0x01	; 1
    3ea4:	80 83       	st	Z, r24
    3ea6:	05 c0       	rjmp	.+10     	; 0x3eb2 <STEP_MOTORu8StartHalfMode+0x748>
	}
	else
		Local_u8ErrorState = NOTOK;
    3ea8:	fe 01       	movw	r30, r28
    3eaa:	ee 5b       	subi	r30, 0xBE	; 190
    3eac:	ff 4f       	sbci	r31, 0xFF	; 255
    3eae:	81 e0       	ldi	r24, 0x01	; 1
    3eb0:	80 83       	st	Z, r24
	return Local_u8ErrorState;
    3eb2:	fe 01       	movw	r30, r28
    3eb4:	ee 5b       	subi	r30, 0xBE	; 190
    3eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb8:	80 81       	ld	r24, Z
}
    3eba:	cc 5b       	subi	r28, 0xBC	; 188
    3ebc:	df 4f       	sbci	r29, 0xFF	; 255
    3ebe:	0f b6       	in	r0, 0x3f	; 63
    3ec0:	f8 94       	cli
    3ec2:	de bf       	out	0x3e, r29	; 62
    3ec4:	0f be       	out	0x3f, r0	; 63
    3ec6:	cd bf       	out	0x3d, r28	; 61
    3ec8:	cf 91       	pop	r28
    3eca:	df 91       	pop	r29
    3ecc:	08 95       	ret

00003ece <STEP_MOTORvStop>:

void STEP_MOTORvStop(STEP_t *Copy_pStep)
{
    3ece:	df 93       	push	r29
    3ed0:	cf 93       	push	r28
    3ed2:	00 d0       	rcall	.+0      	; 0x3ed4 <STEP_MOTORvStop+0x6>
    3ed4:	cd b7       	in	r28, 0x3d	; 61
    3ed6:	de b7       	in	r29, 0x3e	; 62
    3ed8:	9a 83       	std	Y+2, r25	; 0x02
    3eda:	89 83       	std	Y+1, r24	; 0x01
	if(STEP_LOWER_NIBBLE == Copy_pStep->Nibble)
    3edc:	e9 81       	ldd	r30, Y+1	; 0x01
    3ede:	fa 81       	ldd	r31, Y+2	; 0x02
    3ee0:	81 81       	ldd	r24, Z+1	; 0x01
    3ee2:	88 23       	and	r24, r24
    3ee4:	39 f4       	brne	.+14     	; 0x3ef4 <STEP_MOTORvStop+0x26>
	{
		DIO_u8SetLowNibbleValue(Copy_pStep->Port,0);
    3ee6:	e9 81       	ldd	r30, Y+1	; 0x01
    3ee8:	fa 81       	ldd	r31, Y+2	; 0x02
    3eea:	80 81       	ld	r24, Z
    3eec:	60 e0       	ldi	r22, 0x00	; 0
    3eee:	0e 94 b4 12 	call	0x2568	; 0x2568 <DIO_u8SetLowNibbleValue>
    3ef2:	0b c0       	rjmp	.+22     	; 0x3f0a <STEP_MOTORvStop+0x3c>
	}
	else if(STEP_UPPER_NIBBLE == Copy_pStep->Nibble)
    3ef4:	e9 81       	ldd	r30, Y+1	; 0x01
    3ef6:	fa 81       	ldd	r31, Y+2	; 0x02
    3ef8:	81 81       	ldd	r24, Z+1	; 0x01
    3efa:	81 30       	cpi	r24, 0x01	; 1
    3efc:	31 f4       	brne	.+12     	; 0x3f0a <STEP_MOTORvStop+0x3c>
	{
		DIO_u8SetHighNibbleValue(Copy_pStep->Port,0);
    3efe:	e9 81       	ldd	r30, Y+1	; 0x01
    3f00:	fa 81       	ldd	r31, Y+2	; 0x02
    3f02:	80 81       	ld	r24, Z
    3f04:	60 e0       	ldi	r22, 0x00	; 0
    3f06:	0e 94 2f 13 	call	0x265e	; 0x265e <DIO_u8SetHighNibbleValue>
	}
}
    3f0a:	0f 90       	pop	r0
    3f0c:	0f 90       	pop	r0
    3f0e:	cf 91       	pop	r28
    3f10:	df 91       	pop	r29
    3f12:	08 95       	ret

00003f14 <RotateRightLowNibble>:


static u8 RotateRightLowNibble(u8 Val)
{
    3f14:	df 93       	push	r29
    3f16:	cf 93       	push	r28
    3f18:	00 d0       	rcall	.+0      	; 0x3f1a <RotateRightLowNibble+0x6>
    3f1a:	cd b7       	in	r28, 0x3d	; 61
    3f1c:	de b7       	in	r29, 0x3e	; 62
    3f1e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_xVal = 0;
    3f20:	19 82       	std	Y+1, r1	; 0x01
	Local_xVal = GET_BIT(Val,0);
    3f22:	8a 81       	ldd	r24, Y+2	; 0x02
    3f24:	81 70       	andi	r24, 0x01	; 1
    3f26:	89 83       	std	Y+1, r24	; 0x01
	Val>>=1;
    3f28:	8a 81       	ldd	r24, Y+2	; 0x02
    3f2a:	86 95       	lsr	r24
    3f2c:	8a 83       	std	Y+2, r24	; 0x02
	Local_xVal?SET_BIT(Val,3):CLR_BIT(Val,3);
    3f2e:	89 81       	ldd	r24, Y+1	; 0x01
    3f30:	88 23       	and	r24, r24
    3f32:	21 f0       	breq	.+8      	; 0x3f3c <RotateRightLowNibble+0x28>
    3f34:	8a 81       	ldd	r24, Y+2	; 0x02
    3f36:	88 60       	ori	r24, 0x08	; 8
    3f38:	8a 83       	std	Y+2, r24	; 0x02
    3f3a:	03 c0       	rjmp	.+6      	; 0x3f42 <RotateRightLowNibble+0x2e>
    3f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f3e:	87 7f       	andi	r24, 0xF7	; 247
    3f40:	8a 83       	std	Y+2, r24	; 0x02
	return Val;
    3f42:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3f44:	0f 90       	pop	r0
    3f46:	0f 90       	pop	r0
    3f48:	cf 91       	pop	r28
    3f4a:	df 91       	pop	r29
    3f4c:	08 95       	ret

00003f4e <RotateLeftLowNibble>:

static u8 RotateLeftLowNibble(u8 Val)
{
    3f4e:	df 93       	push	r29
    3f50:	cf 93       	push	r28
    3f52:	00 d0       	rcall	.+0      	; 0x3f54 <RotateLeftLowNibble+0x6>
    3f54:	cd b7       	in	r28, 0x3d	; 61
    3f56:	de b7       	in	r29, 0x3e	; 62
    3f58:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_xVal = 0;
    3f5a:	19 82       	std	Y+1, r1	; 0x01
	Local_xVal = GET_BIT(Val,3);
    3f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f5e:	86 95       	lsr	r24
    3f60:	86 95       	lsr	r24
    3f62:	86 95       	lsr	r24
    3f64:	81 70       	andi	r24, 0x01	; 1
    3f66:	89 83       	std	Y+1, r24	; 0x01
	Val<<=1;
    3f68:	8a 81       	ldd	r24, Y+2	; 0x02
    3f6a:	88 0f       	add	r24, r24
    3f6c:	8a 83       	std	Y+2, r24	; 0x02
	Local_xVal?SET_BIT(Val,0):CLR_BIT(Val,0);
    3f6e:	89 81       	ldd	r24, Y+1	; 0x01
    3f70:	88 23       	and	r24, r24
    3f72:	21 f0       	breq	.+8      	; 0x3f7c <RotateLeftLowNibble+0x2e>
    3f74:	8a 81       	ldd	r24, Y+2	; 0x02
    3f76:	81 60       	ori	r24, 0x01	; 1
    3f78:	8a 83       	std	Y+2, r24	; 0x02
    3f7a:	03 c0       	rjmp	.+6      	; 0x3f82 <RotateLeftLowNibble+0x34>
    3f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f7e:	8e 7f       	andi	r24, 0xFE	; 254
    3f80:	8a 83       	std	Y+2, r24	; 0x02
	return Val;
    3f82:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3f84:	0f 90       	pop	r0
    3f86:	0f 90       	pop	r0
    3f88:	cf 91       	pop	r28
    3f8a:	df 91       	pop	r29
    3f8c:	08 95       	ret

00003f8e <SW_u8GetState>:
 * 			Copy_SW     : Full with Port,Pin,SelfType,switch function
 * 			Copy_u8State: return State of switch as (0) Pressed , (1) Not pressed
 * use for: Get Switch by delay debouncing of switch as (0) Pressed , (1) Not pressed
 *  */
u8 SW_u8GetState(SW_t* Copy_SW,u8 *Copy_u8State)
{
    3f8e:	df 93       	push	r29
    3f90:	cf 93       	push	r28
    3f92:	cd b7       	in	r28, 0x3d	; 61
    3f94:	de b7       	in	r29, 0x3e	; 62
    3f96:	a1 97       	sbiw	r28, 0x21	; 33
    3f98:	0f b6       	in	r0, 0x3f	; 63
    3f9a:	f8 94       	cli
    3f9c:	de bf       	out	0x3e, r29	; 62
    3f9e:	0f be       	out	0x3f, r0	; 63
    3fa0:	cd bf       	out	0x3d, r28	; 61
    3fa2:	9f 8f       	std	Y+31, r25	; 0x1f
    3fa4:	8e 8f       	std	Y+30, r24	; 0x1e
    3fa6:	79 a3       	std	Y+33, r23	; 0x21
    3fa8:	68 a3       	std	Y+32, r22	; 0x20
	u8 Local_u8ErrorState = OK;
    3faa:	1d 8e       	std	Y+29, r1	; 0x1d
	//static u8 pressed_conf_level = 0;
	//static u8 released_conf_level = 0;
	//static u8 pressed = 0;
	//static u8 pressed2 = 0;
	*Copy_u8State = SW_NOT_PRESSED;
    3fac:	e8 a1       	ldd	r30, Y+32	; 0x20
    3fae:	f9 a1       	ldd	r31, Y+33	; 0x21
    3fb0:	81 e0       	ldi	r24, 0x01	; 1
    3fb2:	80 83       	st	Z, r24
	static u8 Local_u8SwState;
	if(Copy_SW->Pulltype == SW_PULL_UP)
    3fb4:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3fb6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3fb8:	82 81       	ldd	r24, Z+2	; 0x02
    3fba:	88 23       	and	r24, r24
    3fbc:	09 f0       	breq	.+2      	; 0x3fc0 <SW_u8GetState+0x32>
    3fbe:	c3 c0       	rjmp	.+390    	; 0x4146 <SW_u8GetState+0x1b8>
	{
		if(Copy_SW->SelfLockType == SW_SELF_LOCK)
    3fc0:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3fc2:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3fc4:	83 81       	ldd	r24, Z+3	; 0x03
    3fc6:	81 30       	cpi	r24, 0x01	; 1
    3fc8:	09 f0       	breq	.+2      	; 0x3fcc <SW_u8GetState+0x3e>
    3fca:	9c c0       	rjmp	.+312    	; 0x4104 <SW_u8GetState+0x176>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    3fcc:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3fce:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3fd0:	80 81       	ld	r24, Z
    3fd2:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3fd4:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3fd6:	91 81       	ldd	r25, Z+1	; 0x01
    3fd8:	28 ea       	ldi	r18, 0xA8	; 168
    3fda:	31 e0       	ldi	r19, 0x01	; 1
    3fdc:	69 2f       	mov	r22, r25
    3fde:	a9 01       	movw	r20, r18
    3fe0:	0e 94 8e 11 	call	0x231c	; 0x231c <DIO_u8GetPinValue>
			if(Local_u8SwState == DIO_PIN_LOW)
    3fe4:	80 91 a8 01 	lds	r24, 0x01A8
    3fe8:	88 23       	and	r24, r24
    3fea:	09 f0       	breq	.+2      	; 0x3fee <SW_u8GetState+0x60>
    3fec:	6d c1       	rjmp	.+730    	; 0x42c8 <SW_u8GetState+0x33a>
    3fee:	80 e0       	ldi	r24, 0x00	; 0
    3ff0:	90 e0       	ldi	r25, 0x00	; 0
    3ff2:	a6 e1       	ldi	r26, 0x16	; 22
    3ff4:	b3 e4       	ldi	r27, 0x43	; 67
    3ff6:	89 8f       	std	Y+25, r24	; 0x19
    3ff8:	9a 8f       	std	Y+26, r25	; 0x1a
    3ffa:	ab 8f       	std	Y+27, r26	; 0x1b
    3ffc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ffe:	69 8d       	ldd	r22, Y+25	; 0x19
    4000:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4002:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4004:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4006:	20 e0       	ldi	r18, 0x00	; 0
    4008:	30 e0       	ldi	r19, 0x00	; 0
    400a:	4a ef       	ldi	r20, 0xFA	; 250
    400c:	54 e4       	ldi	r21, 0x44	; 68
    400e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4012:	dc 01       	movw	r26, r24
    4014:	cb 01       	movw	r24, r22
    4016:	8d 8b       	std	Y+21, r24	; 0x15
    4018:	9e 8b       	std	Y+22, r25	; 0x16
    401a:	af 8b       	std	Y+23, r26	; 0x17
    401c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    401e:	6d 89       	ldd	r22, Y+21	; 0x15
    4020:	7e 89       	ldd	r23, Y+22	; 0x16
    4022:	8f 89       	ldd	r24, Y+23	; 0x17
    4024:	98 8d       	ldd	r25, Y+24	; 0x18
    4026:	20 e0       	ldi	r18, 0x00	; 0
    4028:	30 e0       	ldi	r19, 0x00	; 0
    402a:	40 e8       	ldi	r20, 0x80	; 128
    402c:	5f e3       	ldi	r21, 0x3F	; 63
    402e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4032:	88 23       	and	r24, r24
    4034:	2c f4       	brge	.+10     	; 0x4040 <SW_u8GetState+0xb2>
		__ticks = 1;
    4036:	81 e0       	ldi	r24, 0x01	; 1
    4038:	90 e0       	ldi	r25, 0x00	; 0
    403a:	9c 8b       	std	Y+20, r25	; 0x14
    403c:	8b 8b       	std	Y+19, r24	; 0x13
    403e:	3f c0       	rjmp	.+126    	; 0x40be <SW_u8GetState+0x130>
	else if (__tmp > 65535)
    4040:	6d 89       	ldd	r22, Y+21	; 0x15
    4042:	7e 89       	ldd	r23, Y+22	; 0x16
    4044:	8f 89       	ldd	r24, Y+23	; 0x17
    4046:	98 8d       	ldd	r25, Y+24	; 0x18
    4048:	20 e0       	ldi	r18, 0x00	; 0
    404a:	3f ef       	ldi	r19, 0xFF	; 255
    404c:	4f e7       	ldi	r20, 0x7F	; 127
    404e:	57 e4       	ldi	r21, 0x47	; 71
    4050:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4054:	18 16       	cp	r1, r24
    4056:	4c f5       	brge	.+82     	; 0x40aa <SW_u8GetState+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4058:	69 8d       	ldd	r22, Y+25	; 0x19
    405a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    405c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    405e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4060:	20 e0       	ldi	r18, 0x00	; 0
    4062:	30 e0       	ldi	r19, 0x00	; 0
    4064:	40 e2       	ldi	r20, 0x20	; 32
    4066:	51 e4       	ldi	r21, 0x41	; 65
    4068:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    406c:	dc 01       	movw	r26, r24
    406e:	cb 01       	movw	r24, r22
    4070:	bc 01       	movw	r22, r24
    4072:	cd 01       	movw	r24, r26
    4074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4078:	dc 01       	movw	r26, r24
    407a:	cb 01       	movw	r24, r22
    407c:	9c 8b       	std	Y+20, r25	; 0x14
    407e:	8b 8b       	std	Y+19, r24	; 0x13
    4080:	0f c0       	rjmp	.+30     	; 0x40a0 <SW_u8GetState+0x112>
    4082:	88 ec       	ldi	r24, 0xC8	; 200
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	9a 8b       	std	Y+18, r25	; 0x12
    4088:	89 8b       	std	Y+17, r24	; 0x11
    408a:	89 89       	ldd	r24, Y+17	; 0x11
    408c:	9a 89       	ldd	r25, Y+18	; 0x12
    408e:	01 97       	sbiw	r24, 0x01	; 1
    4090:	f1 f7       	brne	.-4      	; 0x408e <SW_u8GetState+0x100>
    4092:	9a 8b       	std	Y+18, r25	; 0x12
    4094:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4096:	8b 89       	ldd	r24, Y+19	; 0x13
    4098:	9c 89       	ldd	r25, Y+20	; 0x14
    409a:	01 97       	sbiw	r24, 0x01	; 1
    409c:	9c 8b       	std	Y+20, r25	; 0x14
    409e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40a0:	8b 89       	ldd	r24, Y+19	; 0x13
    40a2:	9c 89       	ldd	r25, Y+20	; 0x14
    40a4:	00 97       	sbiw	r24, 0x00	; 0
    40a6:	69 f7       	brne	.-38     	; 0x4082 <SW_u8GetState+0xf4>
    40a8:	14 c0       	rjmp	.+40     	; 0x40d2 <SW_u8GetState+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40aa:	6d 89       	ldd	r22, Y+21	; 0x15
    40ac:	7e 89       	ldd	r23, Y+22	; 0x16
    40ae:	8f 89       	ldd	r24, Y+23	; 0x17
    40b0:	98 8d       	ldd	r25, Y+24	; 0x18
    40b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40b6:	dc 01       	movw	r26, r24
    40b8:	cb 01       	movw	r24, r22
    40ba:	9c 8b       	std	Y+20, r25	; 0x14
    40bc:	8b 8b       	std	Y+19, r24	; 0x13
    40be:	8b 89       	ldd	r24, Y+19	; 0x13
    40c0:	9c 89       	ldd	r25, Y+20	; 0x14
    40c2:	98 8b       	std	Y+16, r25	; 0x10
    40c4:	8f 87       	std	Y+15, r24	; 0x0f
    40c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    40c8:	98 89       	ldd	r25, Y+16	; 0x10
    40ca:	01 97       	sbiw	r24, 0x01	; 1
    40cc:	f1 f7       	brne	.-4      	; 0x40ca <SW_u8GetState+0x13c>
    40ce:	98 8b       	std	Y+16, r25	; 0x10
    40d0:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(150);
				DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    40d2:	ee 8d       	ldd	r30, Y+30	; 0x1e
    40d4:	ff 8d       	ldd	r31, Y+31	; 0x1f
    40d6:	80 81       	ld	r24, Z
    40d8:	ee 8d       	ldd	r30, Y+30	; 0x1e
    40da:	ff 8d       	ldd	r31, Y+31	; 0x1f
    40dc:	91 81       	ldd	r25, Z+1	; 0x01
    40de:	28 ea       	ldi	r18, 0xA8	; 168
    40e0:	31 e0       	ldi	r19, 0x01	; 1
    40e2:	69 2f       	mov	r22, r25
    40e4:	a9 01       	movw	r20, r18
    40e6:	0e 94 8e 11 	call	0x231c	; 0x231c <DIO_u8GetPinValue>
				if(Local_u8SwState == DIO_PIN_LOW )
    40ea:	80 91 a8 01 	lds	r24, 0x01A8
    40ee:	88 23       	and	r24, r24
    40f0:	21 f4       	brne	.+8      	; 0x40fa <SW_u8GetState+0x16c>
				{
					*Copy_u8State = SW_PRESSED;
    40f2:	e8 a1       	ldd	r30, Y+32	; 0x20
    40f4:	f9 a1       	ldd	r31, Y+33	; 0x21
    40f6:	10 82       	st	Z, r1
    40f8:	e7 c0       	rjmp	.+462    	; 0x42c8 <SW_u8GetState+0x33a>
				}
				else
				{
					*Copy_u8State = SW_NOT_PRESSED;
    40fa:	e8 a1       	ldd	r30, Y+32	; 0x20
    40fc:	f9 a1       	ldd	r31, Y+33	; 0x21
    40fe:	81 e0       	ldi	r24, 0x01	; 1
    4100:	80 83       	st	Z, r24
    4102:	e2 c0       	rjmp	.+452    	; 0x42c8 <SW_u8GetState+0x33a>
				}
			}
		}
		else if(Copy_SW->SelfLockType == SW_NOT_SELF_LOCK)
    4104:	ee 8d       	ldd	r30, Y+30	; 0x1e
    4106:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4108:	83 81       	ldd	r24, Z+3	; 0x03
    410a:	88 23       	and	r24, r24
    410c:	c9 f4       	brne	.+50     	; 0x4140 <SW_u8GetState+0x1b2>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,Copy_u8State);
    410e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    4110:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4112:	80 81       	ld	r24, Z
    4114:	ee 8d       	ldd	r30, Y+30	; 0x1e
    4116:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4118:	91 81       	ldd	r25, Z+1	; 0x01
    411a:	28 a1       	ldd	r18, Y+32	; 0x20
    411c:	39 a1       	ldd	r19, Y+33	; 0x21
    411e:	69 2f       	mov	r22, r25
    4120:	a9 01       	movw	r20, r18
    4122:	0e 94 8e 11 	call	0x231c	; 0x231c <DIO_u8GetPinValue>
			if (Local_u8SwState == DIO_PIN_LOW)
    4126:	80 91 a8 01 	lds	r24, 0x01A8
    412a:	88 23       	and	r24, r24
    412c:	21 f4       	brne	.+8      	; 0x4136 <SW_u8GetState+0x1a8>
				*Copy_u8State = SW_PRESSED;
    412e:	e8 a1       	ldd	r30, Y+32	; 0x20
    4130:	f9 a1       	ldd	r31, Y+33	; 0x21
    4132:	10 82       	st	Z, r1
    4134:	c9 c0       	rjmp	.+402    	; 0x42c8 <SW_u8GetState+0x33a>
			else
				*Copy_u8State = SW_NOT_PRESSED;
    4136:	e8 a1       	ldd	r30, Y+32	; 0x20
    4138:	f9 a1       	ldd	r31, Y+33	; 0x21
    413a:	81 e0       	ldi	r24, 0x01	; 1
    413c:	80 83       	st	Z, r24
    413e:	c4 c0       	rjmp	.+392    	; 0x42c8 <SW_u8GetState+0x33a>
		}
		else
			Local_u8ErrorState = NOTOK;
    4140:	81 e0       	ldi	r24, 0x01	; 1
    4142:	8d 8f       	std	Y+29, r24	; 0x1d
    4144:	c1 c0       	rjmp	.+386    	; 0x42c8 <SW_u8GetState+0x33a>
	}
	else if(Copy_SW->Pulltype == SW_PULL_DOWN)
    4146:	ee 8d       	ldd	r30, Y+30	; 0x1e
    4148:	ff 8d       	ldd	r31, Y+31	; 0x1f
    414a:	82 81       	ldd	r24, Z+2	; 0x02
    414c:	81 30       	cpi	r24, 0x01	; 1
    414e:	09 f0       	breq	.+2      	; 0x4152 <SW_u8GetState+0x1c4>
    4150:	b9 c0       	rjmp	.+370    	; 0x42c4 <SW_u8GetState+0x336>
	{

		if(Copy_SW->SelfLockType == SW_SELF_LOCK)
    4152:	ee 8d       	ldd	r30, Y+30	; 0x1e
    4154:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4156:	83 81       	ldd	r24, Z+3	; 0x03
    4158:	81 30       	cpi	r24, 0x01	; 1
    415a:	09 f0       	breq	.+2      	; 0x415e <SW_u8GetState+0x1d0>
    415c:	97 c0       	rjmp	.+302    	; 0x428c <SW_u8GetState+0x2fe>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    415e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    4160:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4162:	80 81       	ld	r24, Z
    4164:	ee 8d       	ldd	r30, Y+30	; 0x1e
    4166:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4168:	91 81       	ldd	r25, Z+1	; 0x01
    416a:	28 ea       	ldi	r18, 0xA8	; 168
    416c:	31 e0       	ldi	r19, 0x01	; 1
    416e:	69 2f       	mov	r22, r25
    4170:	a9 01       	movw	r20, r18
    4172:	0e 94 8e 11 	call	0x231c	; 0x231c <DIO_u8GetPinValue>
			if(Local_u8SwState == DIO_PIN_HIGH)
    4176:	80 91 a8 01 	lds	r24, 0x01A8
    417a:	81 30       	cpi	r24, 0x01	; 1
    417c:	09 f0       	breq	.+2      	; 0x4180 <SW_u8GetState+0x1f2>
    417e:	a4 c0       	rjmp	.+328    	; 0x42c8 <SW_u8GetState+0x33a>
    4180:	80 e0       	ldi	r24, 0x00	; 0
    4182:	90 e0       	ldi	r25, 0x00	; 0
    4184:	a6 e1       	ldi	r26, 0x16	; 22
    4186:	b3 e4       	ldi	r27, 0x43	; 67
    4188:	8b 87       	std	Y+11, r24	; 0x0b
    418a:	9c 87       	std	Y+12, r25	; 0x0c
    418c:	ad 87       	std	Y+13, r26	; 0x0d
    418e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4190:	6b 85       	ldd	r22, Y+11	; 0x0b
    4192:	7c 85       	ldd	r23, Y+12	; 0x0c
    4194:	8d 85       	ldd	r24, Y+13	; 0x0d
    4196:	9e 85       	ldd	r25, Y+14	; 0x0e
    4198:	20 e0       	ldi	r18, 0x00	; 0
    419a:	30 e0       	ldi	r19, 0x00	; 0
    419c:	4a ef       	ldi	r20, 0xFA	; 250
    419e:	54 e4       	ldi	r21, 0x44	; 68
    41a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41a4:	dc 01       	movw	r26, r24
    41a6:	cb 01       	movw	r24, r22
    41a8:	8f 83       	std	Y+7, r24	; 0x07
    41aa:	98 87       	std	Y+8, r25	; 0x08
    41ac:	a9 87       	std	Y+9, r26	; 0x09
    41ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41b0:	6f 81       	ldd	r22, Y+7	; 0x07
    41b2:	78 85       	ldd	r23, Y+8	; 0x08
    41b4:	89 85       	ldd	r24, Y+9	; 0x09
    41b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    41b8:	20 e0       	ldi	r18, 0x00	; 0
    41ba:	30 e0       	ldi	r19, 0x00	; 0
    41bc:	40 e8       	ldi	r20, 0x80	; 128
    41be:	5f e3       	ldi	r21, 0x3F	; 63
    41c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41c4:	88 23       	and	r24, r24
    41c6:	2c f4       	brge	.+10     	; 0x41d2 <SW_u8GetState+0x244>
		__ticks = 1;
    41c8:	81 e0       	ldi	r24, 0x01	; 1
    41ca:	90 e0       	ldi	r25, 0x00	; 0
    41cc:	9e 83       	std	Y+6, r25	; 0x06
    41ce:	8d 83       	std	Y+5, r24	; 0x05
    41d0:	3f c0       	rjmp	.+126    	; 0x4250 <SW_u8GetState+0x2c2>
	else if (__tmp > 65535)
    41d2:	6f 81       	ldd	r22, Y+7	; 0x07
    41d4:	78 85       	ldd	r23, Y+8	; 0x08
    41d6:	89 85       	ldd	r24, Y+9	; 0x09
    41d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    41da:	20 e0       	ldi	r18, 0x00	; 0
    41dc:	3f ef       	ldi	r19, 0xFF	; 255
    41de:	4f e7       	ldi	r20, 0x7F	; 127
    41e0:	57 e4       	ldi	r21, 0x47	; 71
    41e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41e6:	18 16       	cp	r1, r24
    41e8:	4c f5       	brge	.+82     	; 0x423c <SW_u8GetState+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    41ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    41ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    41f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    41f2:	20 e0       	ldi	r18, 0x00	; 0
    41f4:	30 e0       	ldi	r19, 0x00	; 0
    41f6:	40 e2       	ldi	r20, 0x20	; 32
    41f8:	51 e4       	ldi	r21, 0x41	; 65
    41fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41fe:	dc 01       	movw	r26, r24
    4200:	cb 01       	movw	r24, r22
    4202:	bc 01       	movw	r22, r24
    4204:	cd 01       	movw	r24, r26
    4206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    420a:	dc 01       	movw	r26, r24
    420c:	cb 01       	movw	r24, r22
    420e:	9e 83       	std	Y+6, r25	; 0x06
    4210:	8d 83       	std	Y+5, r24	; 0x05
    4212:	0f c0       	rjmp	.+30     	; 0x4232 <SW_u8GetState+0x2a4>
    4214:	88 ec       	ldi	r24, 0xC8	; 200
    4216:	90 e0       	ldi	r25, 0x00	; 0
    4218:	9c 83       	std	Y+4, r25	; 0x04
    421a:	8b 83       	std	Y+3, r24	; 0x03
    421c:	8b 81       	ldd	r24, Y+3	; 0x03
    421e:	9c 81       	ldd	r25, Y+4	; 0x04
    4220:	01 97       	sbiw	r24, 0x01	; 1
    4222:	f1 f7       	brne	.-4      	; 0x4220 <SW_u8GetState+0x292>
    4224:	9c 83       	std	Y+4, r25	; 0x04
    4226:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4228:	8d 81       	ldd	r24, Y+5	; 0x05
    422a:	9e 81       	ldd	r25, Y+6	; 0x06
    422c:	01 97       	sbiw	r24, 0x01	; 1
    422e:	9e 83       	std	Y+6, r25	; 0x06
    4230:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4232:	8d 81       	ldd	r24, Y+5	; 0x05
    4234:	9e 81       	ldd	r25, Y+6	; 0x06
    4236:	00 97       	sbiw	r24, 0x00	; 0
    4238:	69 f7       	brne	.-38     	; 0x4214 <SW_u8GetState+0x286>
    423a:	14 c0       	rjmp	.+40     	; 0x4264 <SW_u8GetState+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    423c:	6f 81       	ldd	r22, Y+7	; 0x07
    423e:	78 85       	ldd	r23, Y+8	; 0x08
    4240:	89 85       	ldd	r24, Y+9	; 0x09
    4242:	9a 85       	ldd	r25, Y+10	; 0x0a
    4244:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4248:	dc 01       	movw	r26, r24
    424a:	cb 01       	movw	r24, r22
    424c:	9e 83       	std	Y+6, r25	; 0x06
    424e:	8d 83       	std	Y+5, r24	; 0x05
    4250:	8d 81       	ldd	r24, Y+5	; 0x05
    4252:	9e 81       	ldd	r25, Y+6	; 0x06
    4254:	9a 83       	std	Y+2, r25	; 0x02
    4256:	89 83       	std	Y+1, r24	; 0x01
    4258:	89 81       	ldd	r24, Y+1	; 0x01
    425a:	9a 81       	ldd	r25, Y+2	; 0x02
    425c:	01 97       	sbiw	r24, 0x01	; 1
    425e:	f1 f7       	brne	.-4      	; 0x425c <SW_u8GetState+0x2ce>
    4260:	9a 83       	std	Y+2, r25	; 0x02
    4262:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(150);
				DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    4264:	ee 8d       	ldd	r30, Y+30	; 0x1e
    4266:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4268:	80 81       	ld	r24, Z
    426a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    426c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    426e:	91 81       	ldd	r25, Z+1	; 0x01
    4270:	28 ea       	ldi	r18, 0xA8	; 168
    4272:	31 e0       	ldi	r19, 0x01	; 1
    4274:	69 2f       	mov	r22, r25
    4276:	a9 01       	movw	r20, r18
    4278:	0e 94 8e 11 	call	0x231c	; 0x231c <DIO_u8GetPinValue>
				if(Local_u8SwState == DIO_PIN_HIGH )
    427c:	80 91 a8 01 	lds	r24, 0x01A8
    4280:	81 30       	cpi	r24, 0x01	; 1
    4282:	11 f5       	brne	.+68     	; 0x42c8 <SW_u8GetState+0x33a>
				{
					*Copy_u8State = SW_PRESSED;
    4284:	e8 a1       	ldd	r30, Y+32	; 0x20
    4286:	f9 a1       	ldd	r31, Y+33	; 0x21
    4288:	10 82       	st	Z, r1
    428a:	1e c0       	rjmp	.+60     	; 0x42c8 <SW_u8GetState+0x33a>
				}
			}
		}
		else if(Copy_SW->SelfLockType == SW_NOT_SELF_LOCK)
    428c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    428e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4290:	83 81       	ldd	r24, Z+3	; 0x03
    4292:	88 23       	and	r24, r24
    4294:	a1 f4       	brne	.+40     	; 0x42be <SW_u8GetState+0x330>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,Copy_u8State);
    4296:	ee 8d       	ldd	r30, Y+30	; 0x1e
    4298:	ff 8d       	ldd	r31, Y+31	; 0x1f
    429a:	80 81       	ld	r24, Z
    429c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    429e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    42a0:	91 81       	ldd	r25, Z+1	; 0x01
    42a2:	28 a1       	ldd	r18, Y+32	; 0x20
    42a4:	39 a1       	ldd	r19, Y+33	; 0x21
    42a6:	69 2f       	mov	r22, r25
    42a8:	a9 01       	movw	r20, r18
    42aa:	0e 94 8e 11 	call	0x231c	; 0x231c <DIO_u8GetPinValue>
			if (Local_u8SwState == DIO_PIN_HIGH)
    42ae:	80 91 a8 01 	lds	r24, 0x01A8
    42b2:	81 30       	cpi	r24, 0x01	; 1
    42b4:	49 f4       	brne	.+18     	; 0x42c8 <SW_u8GetState+0x33a>
				*Copy_u8State = SW_PRESSED;
    42b6:	e8 a1       	ldd	r30, Y+32	; 0x20
    42b8:	f9 a1       	ldd	r31, Y+33	; 0x21
    42ba:	10 82       	st	Z, r1
    42bc:	05 c0       	rjmp	.+10     	; 0x42c8 <SW_u8GetState+0x33a>
		}
		else
			Local_u8ErrorState = NOTOK;
    42be:	81 e0       	ldi	r24, 0x01	; 1
    42c0:	8d 8f       	std	Y+29, r24	; 0x1d
    42c2:	02 c0       	rjmp	.+4      	; 0x42c8 <SW_u8GetState+0x33a>
	}
	else
		Local_u8ErrorState = NOTOK;
    42c4:	81 e0       	ldi	r24, 0x01	; 1
    42c6:	8d 8f       	std	Y+29, r24	; 0x1d

	return Local_u8ErrorState;
    42c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    42ca:	a1 96       	adiw	r28, 0x21	; 33
    42cc:	0f b6       	in	r0, 0x3f	; 63
    42ce:	f8 94       	cli
    42d0:	de bf       	out	0x3e, r29	; 62
    42d2:	0f be       	out	0x3f, r0	; 63
    42d4:	cd bf       	out	0x3d, r28	; 61
    42d6:	cf 91       	pop	r28
    42d8:	df 91       	pop	r29
    42da:	08 95       	ret

000042dc <SW_u8GetState2>:
 * 			Copy_SW     : Full with Port,Pin,SelfType,switch function
 * 			Copy_u8State: return State of switch as (0) Pressed , (1) Not pressed
 * use for: Get Switch by Function Call Back i.e (switch function )
 *  */
u8 SW_u8GetState2(SW_t* Copy_SW,u8 *Copy_u8State)
{
    42dc:	df 93       	push	r29
    42de:	cf 93       	push	r28
    42e0:	00 d0       	rcall	.+0      	; 0x42e2 <SW_u8GetState2+0x6>
    42e2:	00 d0       	rcall	.+0      	; 0x42e4 <SW_u8GetState2+0x8>
    42e4:	0f 92       	push	r0
    42e6:	cd b7       	in	r28, 0x3d	; 61
    42e8:	de b7       	in	r29, 0x3e	; 62
    42ea:	9b 83       	std	Y+3, r25	; 0x03
    42ec:	8a 83       	std	Y+2, r24	; 0x02
    42ee:	7d 83       	std	Y+5, r23	; 0x05
    42f0:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK;
    42f2:	19 82       	std	Y+1, r1	; 0x01
	static u8 pressed_conf_level = 0;
	static u8 released_conf_level = 0;
	static u8 pressed = 0;
	*Copy_u8State = SW_NOT_PRESSED;
    42f4:	ec 81       	ldd	r30, Y+4	; 0x04
    42f6:	fd 81       	ldd	r31, Y+5	; 0x05
    42f8:	81 e0       	ldi	r24, 0x01	; 1
    42fa:	80 83       	st	Z, r24
	static u8 Local_u8SwState;
	if(Copy_SW->Pulltype == SW_PULL_UP)
    42fc:	ea 81       	ldd	r30, Y+2	; 0x02
    42fe:	fb 81       	ldd	r31, Y+3	; 0x03
    4300:	82 81       	ldd	r24, Z+2	; 0x02
    4302:	88 23       	and	r24, r24
    4304:	09 f0       	breq	.+2      	; 0x4308 <SW_u8GetState2+0x2c>
    4306:	76 c0       	rjmp	.+236    	; 0x43f4 <SW_u8GetState2+0x118>
	{
		pressed = 0;
    4308:	10 92 aa 01 	sts	0x01AA, r1
		if(Copy_SW->SelfLockType == SW_SELF_LOCK)
    430c:	ea 81       	ldd	r30, Y+2	; 0x02
    430e:	fb 81       	ldd	r31, Y+3	; 0x03
    4310:	83 81       	ldd	r24, Z+3	; 0x03
    4312:	81 30       	cpi	r24, 0x01	; 1
    4314:	09 f0       	breq	.+2      	; 0x4318 <SW_u8GetState2+0x3c>
    4316:	4d c0       	rjmp	.+154    	; 0x43b2 <SW_u8GetState2+0xd6>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    4318:	ea 81       	ldd	r30, Y+2	; 0x02
    431a:	fb 81       	ldd	r31, Y+3	; 0x03
    431c:	80 81       	ld	r24, Z
    431e:	ea 81       	ldd	r30, Y+2	; 0x02
    4320:	fb 81       	ldd	r31, Y+3	; 0x03
    4322:	91 81       	ldd	r25, Z+1	; 0x01
    4324:	29 ea       	ldi	r18, 0xA9	; 169
    4326:	31 e0       	ldi	r19, 0x01	; 1
    4328:	69 2f       	mov	r22, r25
    432a:	a9 01       	movw	r20, r18
    432c:	0e 94 8e 11 	call	0x231c	; 0x231c <DIO_u8GetPinValue>
			if(Local_u8SwState == DIO_PIN_LOW)
    4330:	80 91 a9 01 	lds	r24, 0x01A9
    4334:	88 23       	and	r24, r24
    4336:	09 f0       	breq	.+2      	; 0x433a <SW_u8GetState2+0x5e>
    4338:	c4 c0       	rjmp	.+392    	; 0x44c2 <SW_u8GetState2+0x1e6>
			{
				DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    433a:	ea 81       	ldd	r30, Y+2	; 0x02
    433c:	fb 81       	ldd	r31, Y+3	; 0x03
    433e:	80 81       	ld	r24, Z
    4340:	ea 81       	ldd	r30, Y+2	; 0x02
    4342:	fb 81       	ldd	r31, Y+3	; 0x03
    4344:	91 81       	ldd	r25, Z+1	; 0x01
    4346:	29 ea       	ldi	r18, 0xA9	; 169
    4348:	31 e0       	ldi	r19, 0x01	; 1
    434a:	69 2f       	mov	r22, r25
    434c:	a9 01       	movw	r20, r18
    434e:	0e 94 8e 11 	call	0x231c	; 0x231c <DIO_u8GetPinValue>
				if(Local_u8SwState == DIO_PIN_LOW)
    4352:	80 91 a9 01 	lds	r24, 0x01A9
    4356:	88 23       	and	r24, r24
    4358:	09 f0       	breq	.+2      	; 0x435c <SW_u8GetState2+0x80>
    435a:	b3 c0       	rjmp	.+358    	; 0x44c2 <SW_u8GetState2+0x1e6>
				{
					pressed_conf_level++;
    435c:	80 91 ac 01 	lds	r24, 0x01AC
    4360:	8f 5f       	subi	r24, 0xFF	; 255
    4362:	80 93 ac 01 	sts	0x01AC, r24
					if(pressed_conf_level>20)
    4366:	80 91 ac 01 	lds	r24, 0x01AC
    436a:	85 31       	cpi	r24, 0x15	; 21
    436c:	98 f0       	brcs	.+38     	; 0x4394 <SW_u8GetState2+0xb8>
					{
						if(pressed==0)
    436e:	80 91 aa 01 	lds	r24, 0x01AA
    4372:	88 23       	and	r24, r24
    4374:	61 f4       	brne	.+24     	; 0x438e <SW_u8GetState2+0xb2>
						{
							*Copy_u8State = SW_PRESSED;
    4376:	ec 81       	ldd	r30, Y+4	; 0x04
    4378:	fd 81       	ldd	r31, Y+5	; 0x05
    437a:	10 82       	st	Z, r1
							Copy_SW->Notification();
    437c:	ea 81       	ldd	r30, Y+2	; 0x02
    437e:	fb 81       	ldd	r31, Y+3	; 0x03
    4380:	04 80       	ldd	r0, Z+4	; 0x04
    4382:	f5 81       	ldd	r31, Z+5	; 0x05
    4384:	e0 2d       	mov	r30, r0
    4386:	09 95       	icall
							pressed=1;
    4388:	81 e0       	ldi	r24, 0x01	; 1
    438a:	80 93 aa 01 	sts	0x01AA, r24
						}
						pressed_conf_level=0;
    438e:	10 92 ac 01 	sts	0x01AC, r1
    4392:	97 c0       	rjmp	.+302    	; 0x44c2 <SW_u8GetState2+0x1e6>
					}
					else
					{
						released_conf_level++;
    4394:	80 91 ab 01 	lds	r24, 0x01AB
    4398:	8f 5f       	subi	r24, 0xFF	; 255
    439a:	80 93 ab 01 	sts	0x01AB, r24
						if(released_conf_level>20)
    439e:	80 91 ab 01 	lds	r24, 0x01AB
    43a2:	85 31       	cpi	r24, 0x15	; 21
    43a4:	08 f4       	brcc	.+2      	; 0x43a8 <SW_u8GetState2+0xcc>
    43a6:	8d c0       	rjmp	.+282    	; 0x44c2 <SW_u8GetState2+0x1e6>
						{
							pressed = 0;
    43a8:	10 92 aa 01 	sts	0x01AA, r1
							released_conf_level = 0;
    43ac:	10 92 ab 01 	sts	0x01AB, r1
    43b0:	88 c0       	rjmp	.+272    	; 0x44c2 <SW_u8GetState2+0x1e6>
						}
					}
				}
			}
		}
		else if(Copy_SW->SelfLockType == SW_NOT_SELF_LOCK)
    43b2:	ea 81       	ldd	r30, Y+2	; 0x02
    43b4:	fb 81       	ldd	r31, Y+3	; 0x03
    43b6:	83 81       	ldd	r24, Z+3	; 0x03
    43b8:	88 23       	and	r24, r24
    43ba:	c9 f4       	brne	.+50     	; 0x43ee <SW_u8GetState2+0x112>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,Copy_u8State);
    43bc:	ea 81       	ldd	r30, Y+2	; 0x02
    43be:	fb 81       	ldd	r31, Y+3	; 0x03
    43c0:	80 81       	ld	r24, Z
    43c2:	ea 81       	ldd	r30, Y+2	; 0x02
    43c4:	fb 81       	ldd	r31, Y+3	; 0x03
    43c6:	91 81       	ldd	r25, Z+1	; 0x01
    43c8:	2c 81       	ldd	r18, Y+4	; 0x04
    43ca:	3d 81       	ldd	r19, Y+5	; 0x05
    43cc:	69 2f       	mov	r22, r25
    43ce:	a9 01       	movw	r20, r18
    43d0:	0e 94 8e 11 	call	0x231c	; 0x231c <DIO_u8GetPinValue>
			if (Local_u8SwState == DIO_PIN_LOW)
    43d4:	80 91 a9 01 	lds	r24, 0x01A9
    43d8:	88 23       	and	r24, r24
    43da:	21 f4       	brne	.+8      	; 0x43e4 <SW_u8GetState2+0x108>
				*Copy_u8State = SW_PRESSED;
    43dc:	ec 81       	ldd	r30, Y+4	; 0x04
    43de:	fd 81       	ldd	r31, Y+5	; 0x05
    43e0:	10 82       	st	Z, r1
    43e2:	6f c0       	rjmp	.+222    	; 0x44c2 <SW_u8GetState2+0x1e6>
			else
				*Copy_u8State = SW_NOT_PRESSED;
    43e4:	ec 81       	ldd	r30, Y+4	; 0x04
    43e6:	fd 81       	ldd	r31, Y+5	; 0x05
    43e8:	81 e0       	ldi	r24, 0x01	; 1
    43ea:	80 83       	st	Z, r24
    43ec:	6a c0       	rjmp	.+212    	; 0x44c2 <SW_u8GetState2+0x1e6>
		}
		else
			Local_u8ErrorState = NOTOK;
    43ee:	81 e0       	ldi	r24, 0x01	; 1
    43f0:	89 83       	std	Y+1, r24	; 0x01
    43f2:	67 c0       	rjmp	.+206    	; 0x44c2 <SW_u8GetState2+0x1e6>
	}
	else if(Copy_SW->Pulltype == SW_PULL_DOWN)
    43f4:	ea 81       	ldd	r30, Y+2	; 0x02
    43f6:	fb 81       	ldd	r31, Y+3	; 0x03
    43f8:	82 81       	ldd	r24, Z+2	; 0x02
    43fa:	81 30       	cpi	r24, 0x01	; 1
    43fc:	09 f0       	breq	.+2      	; 0x4400 <SW_u8GetState2+0x124>
    43fe:	5f c0       	rjmp	.+190    	; 0x44be <SW_u8GetState2+0x1e2>
	{
		pressed = 1;
    4400:	81 e0       	ldi	r24, 0x01	; 1
    4402:	80 93 aa 01 	sts	0x01AA, r24
		if(Copy_SW->SelfLockType == SW_SELF_LOCK)
    4406:	ea 81       	ldd	r30, Y+2	; 0x02
    4408:	fb 81       	ldd	r31, Y+3	; 0x03
    440a:	83 81       	ldd	r24, Z+3	; 0x03
    440c:	81 30       	cpi	r24, 0x01	; 1
    440e:	d9 f5       	brne	.+118    	; 0x4486 <SW_u8GetState2+0x1aa>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    4410:	ea 81       	ldd	r30, Y+2	; 0x02
    4412:	fb 81       	ldd	r31, Y+3	; 0x03
    4414:	80 81       	ld	r24, Z
    4416:	ea 81       	ldd	r30, Y+2	; 0x02
    4418:	fb 81       	ldd	r31, Y+3	; 0x03
    441a:	91 81       	ldd	r25, Z+1	; 0x01
    441c:	29 ea       	ldi	r18, 0xA9	; 169
    441e:	31 e0       	ldi	r19, 0x01	; 1
    4420:	69 2f       	mov	r22, r25
    4422:	a9 01       	movw	r20, r18
    4424:	0e 94 8e 11 	call	0x231c	; 0x231c <DIO_u8GetPinValue>
			if(Local_u8SwState == DIO_PIN_HIGH)
    4428:	80 91 a9 01 	lds	r24, 0x01A9
    442c:	81 30       	cpi	r24, 0x01	; 1
    442e:	09 f0       	breq	.+2      	; 0x4432 <SW_u8GetState2+0x156>
    4430:	48 c0       	rjmp	.+144    	; 0x44c2 <SW_u8GetState2+0x1e6>
			{
				pressed_conf_level++;
    4432:	80 91 ac 01 	lds	r24, 0x01AC
    4436:	8f 5f       	subi	r24, 0xFF	; 255
    4438:	80 93 ac 01 	sts	0x01AC, r24
				if(pressed_conf_level>20)
    443c:	80 91 ac 01 	lds	r24, 0x01AC
    4440:	85 31       	cpi	r24, 0x15	; 21
    4442:	90 f0       	brcs	.+36     	; 0x4468 <SW_u8GetState2+0x18c>
				{
					if(pressed==1)
    4444:	80 91 aa 01 	lds	r24, 0x01AA
    4448:	81 30       	cpi	r24, 0x01	; 1
    444a:	59 f4       	brne	.+22     	; 0x4462 <SW_u8GetState2+0x186>
					{
						*Copy_u8State = SW_PRESSED;
    444c:	ec 81       	ldd	r30, Y+4	; 0x04
    444e:	fd 81       	ldd	r31, Y+5	; 0x05
    4450:	10 82       	st	Z, r1
						Copy_SW->Notification();
    4452:	ea 81       	ldd	r30, Y+2	; 0x02
    4454:	fb 81       	ldd	r31, Y+3	; 0x03
    4456:	04 80       	ldd	r0, Z+4	; 0x04
    4458:	f5 81       	ldd	r31, Z+5	; 0x05
    445a:	e0 2d       	mov	r30, r0
    445c:	09 95       	icall
						pressed=0;
    445e:	10 92 aa 01 	sts	0x01AA, r1
					}
					pressed_conf_level=0;
    4462:	10 92 ac 01 	sts	0x01AC, r1
    4466:	2d c0       	rjmp	.+90     	; 0x44c2 <SW_u8GetState2+0x1e6>
				}
				else
				{
					released_conf_level++;
    4468:	80 91 ab 01 	lds	r24, 0x01AB
    446c:	8f 5f       	subi	r24, 0xFF	; 255
    446e:	80 93 ab 01 	sts	0x01AB, r24
					if(released_conf_level>20)
    4472:	80 91 ab 01 	lds	r24, 0x01AB
    4476:	85 31       	cpi	r24, 0x15	; 21
    4478:	20 f1       	brcs	.+72     	; 0x44c2 <SW_u8GetState2+0x1e6>
					{
						pressed = 1;
    447a:	81 e0       	ldi	r24, 0x01	; 1
    447c:	80 93 aa 01 	sts	0x01AA, r24
						released_conf_level = 0;
    4480:	10 92 ab 01 	sts	0x01AB, r1
    4484:	1e c0       	rjmp	.+60     	; 0x44c2 <SW_u8GetState2+0x1e6>
					}
				}
			}
		}
		else if(Copy_SW->SelfLockType == SW_NOT_SELF_LOCK)
    4486:	ea 81       	ldd	r30, Y+2	; 0x02
    4488:	fb 81       	ldd	r31, Y+3	; 0x03
    448a:	83 81       	ldd	r24, Z+3	; 0x03
    448c:	88 23       	and	r24, r24
    448e:	a1 f4       	brne	.+40     	; 0x44b8 <SW_u8GetState2+0x1dc>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,Copy_u8State);
    4490:	ea 81       	ldd	r30, Y+2	; 0x02
    4492:	fb 81       	ldd	r31, Y+3	; 0x03
    4494:	80 81       	ld	r24, Z
    4496:	ea 81       	ldd	r30, Y+2	; 0x02
    4498:	fb 81       	ldd	r31, Y+3	; 0x03
    449a:	91 81       	ldd	r25, Z+1	; 0x01
    449c:	2c 81       	ldd	r18, Y+4	; 0x04
    449e:	3d 81       	ldd	r19, Y+5	; 0x05
    44a0:	69 2f       	mov	r22, r25
    44a2:	a9 01       	movw	r20, r18
    44a4:	0e 94 8e 11 	call	0x231c	; 0x231c <DIO_u8GetPinValue>
			if (Local_u8SwState == DIO_PIN_HIGH)
    44a8:	80 91 a9 01 	lds	r24, 0x01A9
    44ac:	81 30       	cpi	r24, 0x01	; 1
    44ae:	49 f4       	brne	.+18     	; 0x44c2 <SW_u8GetState2+0x1e6>
				*Copy_u8State = SW_PRESSED;
    44b0:	ec 81       	ldd	r30, Y+4	; 0x04
    44b2:	fd 81       	ldd	r31, Y+5	; 0x05
    44b4:	10 82       	st	Z, r1
    44b6:	05 c0       	rjmp	.+10     	; 0x44c2 <SW_u8GetState2+0x1e6>
		}
		else
			Local_u8ErrorState = NOTOK;
    44b8:	81 e0       	ldi	r24, 0x01	; 1
    44ba:	89 83       	std	Y+1, r24	; 0x01
    44bc:	02 c0       	rjmp	.+4      	; 0x44c2 <SW_u8GetState2+0x1e6>
	}
	else
		Local_u8ErrorState = NOTOK;
    44be:	81 e0       	ldi	r24, 0x01	; 1
    44c0:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    44c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    44c4:	0f 90       	pop	r0
    44c6:	0f 90       	pop	r0
    44c8:	0f 90       	pop	r0
    44ca:	0f 90       	pop	r0
    44cc:	0f 90       	pop	r0
    44ce:	cf 91       	pop	r28
    44d0:	df 91       	pop	r29
    44d2:	08 95       	ret

000044d4 <TIMER_voidInit>:
#include "../MCAL/TIMER_interface.h"
#include "../MCAL/TIMER_register.h"

static void (*TIMER_pvCallBackFunc[8])() = {NULL};
void TIMER_voidInit(Timer_t* Copy_Timer)
{
    44d4:	df 93       	push	r29
    44d6:	cf 93       	push	r28
    44d8:	cd b7       	in	r28, 0x3d	; 61
    44da:	de b7       	in	r29, 0x3e	; 62
    44dc:	2a 97       	sbiw	r28, 0x0a	; 10
    44de:	0f b6       	in	r0, 0x3f	; 63
    44e0:	f8 94       	cli
    44e2:	de bf       	out	0x3e, r29	; 62
    44e4:	0f be       	out	0x3f, r0	; 63
    44e6:	cd bf       	out	0x3d, r28	; 61
    44e8:	9a 83       	std	Y+2, r25	; 0x02
    44ea:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_Timer->TimerNum)
    44ec:	e9 81       	ldd	r30, Y+1	; 0x01
    44ee:	fa 81       	ldd	r31, Y+2	; 0x02
    44f0:	80 81       	ld	r24, Z
    44f2:	28 2f       	mov	r18, r24
    44f4:	30 e0       	ldi	r19, 0x00	; 0
    44f6:	3a 87       	std	Y+10, r19	; 0x0a
    44f8:	29 87       	std	Y+9, r18	; 0x09
    44fa:	89 85       	ldd	r24, Y+9	; 0x09
    44fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    44fe:	00 97       	sbiw	r24, 0x00	; 0
    4500:	39 f0       	breq	.+14     	; 0x4510 <TIMER_voidInit+0x3c>
    4502:	29 85       	ldd	r18, Y+9	; 0x09
    4504:	3a 85       	ldd	r19, Y+10	; 0x0a
    4506:	21 30       	cpi	r18, 0x01	; 1
    4508:	31 05       	cpc	r19, r1
    450a:	09 f4       	brne	.+2      	; 0x450e <TIMER_voidInit+0x3a>
    450c:	b7 c0       	rjmp	.+366    	; 0x467c <TIMER_voidInit+0x1a8>
    450e:	23 c1       	rjmp	.+582    	; 0x4756 <TIMER_voidInit+0x282>
	{
		case TIMER0:
		switch(Copy_Timer->TimerMode)
    4510:	e9 81       	ldd	r30, Y+1	; 0x01
    4512:	fa 81       	ldd	r31, Y+2	; 0x02
    4514:	81 81       	ldd	r24, Z+1	; 0x01
    4516:	28 2f       	mov	r18, r24
    4518:	30 e0       	ldi	r19, 0x00	; 0
    451a:	38 87       	std	Y+8, r19	; 0x08
    451c:	2f 83       	std	Y+7, r18	; 0x07
    451e:	8f 81       	ldd	r24, Y+7	; 0x07
    4520:	98 85       	ldd	r25, Y+8	; 0x08
    4522:	81 30       	cpi	r24, 0x01	; 1
    4524:	91 05       	cpc	r25, r1
    4526:	09 f4       	brne	.+2      	; 0x452a <TIMER_voidInit+0x56>
    4528:	4a c0       	rjmp	.+148    	; 0x45be <TIMER_voidInit+0xea>
    452a:	2f 81       	ldd	r18, Y+7	; 0x07
    452c:	38 85       	ldd	r19, Y+8	; 0x08
    452e:	22 30       	cpi	r18, 0x02	; 2
    4530:	31 05       	cpc	r19, r1
    4532:	2c f4       	brge	.+10     	; 0x453e <TIMER_voidInit+0x6a>
    4534:	8f 81       	ldd	r24, Y+7	; 0x07
    4536:	98 85       	ldd	r25, Y+8	; 0x08
    4538:	00 97       	sbiw	r24, 0x00	; 0
    453a:	69 f0       	breq	.+26     	; 0x4556 <TIMER_voidInit+0x82>
    453c:	73 c0       	rjmp	.+230    	; 0x4624 <TIMER_voidInit+0x150>
    453e:	2f 81       	ldd	r18, Y+7	; 0x07
    4540:	38 85       	ldd	r19, Y+8	; 0x08
    4542:	22 30       	cpi	r18, 0x02	; 2
    4544:	31 05       	cpc	r19, r1
    4546:	09 f4       	brne	.+2      	; 0x454a <TIMER_voidInit+0x76>
    4548:	5f c0       	rjmp	.+190    	; 0x4608 <TIMER_voidInit+0x134>
    454a:	8f 81       	ldd	r24, Y+7	; 0x07
    454c:	98 85       	ldd	r25, Y+8	; 0x08
    454e:	83 30       	cpi	r24, 0x03	; 3
    4550:	91 05       	cpc	r25, r1
    4552:	31 f1       	breq	.+76     	; 0x45a0 <TIMER_voidInit+0xcc>
    4554:	67 c0       	rjmp	.+206    	; 0x4624 <TIMER_voidInit+0x150>
		{
		case TIMER0_NORMAL:CLR_BIT(TCCR0,TCCR0_WGM01);CLR_BIT(TCCR0,TCCR0_WGM00);
    4556:	a3 e5       	ldi	r26, 0x53	; 83
    4558:	b0 e0       	ldi	r27, 0x00	; 0
    455a:	e3 e5       	ldi	r30, 0x53	; 83
    455c:	f0 e0       	ldi	r31, 0x00	; 0
    455e:	80 81       	ld	r24, Z
    4560:	87 7f       	andi	r24, 0xF7	; 247
    4562:	8c 93       	st	X, r24
    4564:	a3 e5       	ldi	r26, 0x53	; 83
    4566:	b0 e0       	ldi	r27, 0x00	; 0
    4568:	e3 e5       	ldi	r30, 0x53	; 83
    456a:	f0 e0       	ldi	r31, 0x00	; 0
    456c:	80 81       	ld	r24, Z
    456e:	8f 7b       	andi	r24, 0xBF	; 191
    4570:	8c 93       	st	X, r24
		Copy_Timer->IntEnable?SET_BIT(TIMSK,TIMSK_TOIE0):CLR_BIT(TIMSK,TIMSK_TOIE0);
    4572:	e9 81       	ldd	r30, Y+1	; 0x01
    4574:	fa 81       	ldd	r31, Y+2	; 0x02
    4576:	84 81       	ldd	r24, Z+4	; 0x04
    4578:	88 23       	and	r24, r24
    457a:	49 f0       	breq	.+18     	; 0x458e <TIMER_voidInit+0xba>
    457c:	a9 e5       	ldi	r26, 0x59	; 89
    457e:	b0 e0       	ldi	r27, 0x00	; 0
    4580:	e9 e5       	ldi	r30, 0x59	; 89
    4582:	f0 e0       	ldi	r31, 0x00	; 0
    4584:	80 81       	ld	r24, Z
    4586:	81 60       	ori	r24, 0x01	; 1
    4588:	8c 93       	st	X, r24
    458a:	9c 91       	ld	r25, X
    458c:	4b c0       	rjmp	.+150    	; 0x4624 <TIMER_voidInit+0x150>
    458e:	a9 e5       	ldi	r26, 0x59	; 89
    4590:	b0 e0       	ldi	r27, 0x00	; 0
    4592:	e9 e5       	ldi	r30, 0x59	; 89
    4594:	f0 e0       	ldi	r31, 0x00	; 0
    4596:	80 81       	ld	r24, Z
    4598:	8e 7f       	andi	r24, 0xFE	; 254
    459a:	8c 93       	st	X, r24
    459c:	2c 91       	ld	r18, X
    459e:	42 c0       	rjmp	.+132    	; 0x4624 <TIMER_voidInit+0x150>
		break;
		case TIMER0_PHASE_CORRECT_PWM:CLR_BIT(TCCR0,TCCR0_WGM01);SET_BIT(TCCR0,TCCR0_WGM00);break;
    45a0:	a3 e5       	ldi	r26, 0x53	; 83
    45a2:	b0 e0       	ldi	r27, 0x00	; 0
    45a4:	e3 e5       	ldi	r30, 0x53	; 83
    45a6:	f0 e0       	ldi	r31, 0x00	; 0
    45a8:	80 81       	ld	r24, Z
    45aa:	87 7f       	andi	r24, 0xF7	; 247
    45ac:	8c 93       	st	X, r24
    45ae:	a3 e5       	ldi	r26, 0x53	; 83
    45b0:	b0 e0       	ldi	r27, 0x00	; 0
    45b2:	e3 e5       	ldi	r30, 0x53	; 83
    45b4:	f0 e0       	ldi	r31, 0x00	; 0
    45b6:	80 81       	ld	r24, Z
    45b8:	80 64       	ori	r24, 0x40	; 64
    45ba:	8c 93       	st	X, r24
    45bc:	33 c0       	rjmp	.+102    	; 0x4624 <TIMER_voidInit+0x150>
		case TIMER0_CTC:SET_BIT(TCCR0,TCCR0_WGM01);CLR_BIT(TCCR0,TCCR0_WGM00);
    45be:	a3 e5       	ldi	r26, 0x53	; 83
    45c0:	b0 e0       	ldi	r27, 0x00	; 0
    45c2:	e3 e5       	ldi	r30, 0x53	; 83
    45c4:	f0 e0       	ldi	r31, 0x00	; 0
    45c6:	80 81       	ld	r24, Z
    45c8:	88 60       	ori	r24, 0x08	; 8
    45ca:	8c 93       	st	X, r24
    45cc:	a3 e5       	ldi	r26, 0x53	; 83
    45ce:	b0 e0       	ldi	r27, 0x00	; 0
    45d0:	e3 e5       	ldi	r30, 0x53	; 83
    45d2:	f0 e0       	ldi	r31, 0x00	; 0
    45d4:	80 81       	ld	r24, Z
    45d6:	8f 7b       	andi	r24, 0xBF	; 191
    45d8:	8c 93       	st	X, r24
		Copy_Timer->IntEnable?SET_BIT(TIMSK,TIMSK_OCIE0):CLR_BIT(TIMSK,TIMSK_OCIE0);
    45da:	e9 81       	ldd	r30, Y+1	; 0x01
    45dc:	fa 81       	ldd	r31, Y+2	; 0x02
    45de:	84 81       	ldd	r24, Z+4	; 0x04
    45e0:	88 23       	and	r24, r24
    45e2:	49 f0       	breq	.+18     	; 0x45f6 <TIMER_voidInit+0x122>
    45e4:	a9 e5       	ldi	r26, 0x59	; 89
    45e6:	b0 e0       	ldi	r27, 0x00	; 0
    45e8:	e9 e5       	ldi	r30, 0x59	; 89
    45ea:	f0 e0       	ldi	r31, 0x00	; 0
    45ec:	80 81       	ld	r24, Z
    45ee:	82 60       	ori	r24, 0x02	; 2
    45f0:	8c 93       	st	X, r24
    45f2:	3c 91       	ld	r19, X
    45f4:	17 c0       	rjmp	.+46     	; 0x4624 <TIMER_voidInit+0x150>
    45f6:	a9 e5       	ldi	r26, 0x59	; 89
    45f8:	b0 e0       	ldi	r27, 0x00	; 0
    45fa:	e9 e5       	ldi	r30, 0x59	; 89
    45fc:	f0 e0       	ldi	r31, 0x00	; 0
    45fe:	80 81       	ld	r24, Z
    4600:	8d 7f       	andi	r24, 0xFD	; 253
    4602:	8c 93       	st	X, r24
    4604:	8c 91       	ld	r24, X
    4606:	0e c0       	rjmp	.+28     	; 0x4624 <TIMER_voidInit+0x150>
		break;
		case  TIMER0_FAST_PWM:SET_BIT(TCCR0,TCCR0_WGM01);SET_BIT(TCCR0,TCCR0_WGM00);break;
    4608:	a3 e5       	ldi	r26, 0x53	; 83
    460a:	b0 e0       	ldi	r27, 0x00	; 0
    460c:	e3 e5       	ldi	r30, 0x53	; 83
    460e:	f0 e0       	ldi	r31, 0x00	; 0
    4610:	80 81       	ld	r24, Z
    4612:	88 60       	ori	r24, 0x08	; 8
    4614:	8c 93       	st	X, r24
    4616:	a3 e5       	ldi	r26, 0x53	; 83
    4618:	b0 e0       	ldi	r27, 0x00	; 0
    461a:	e3 e5       	ldi	r30, 0x53	; 83
    461c:	f0 e0       	ldi	r31, 0x00	; 0
    461e:	80 81       	ld	r24, Z
    4620:	80 64       	ori	r24, 0x40	; 64
    4622:	8c 93       	st	X, r24
		}
		TCCR0 &= MASK_COMP_MATCH_MODE;
    4624:	a3 e5       	ldi	r26, 0x53	; 83
    4626:	b0 e0       	ldi	r27, 0x00	; 0
    4628:	e3 e5       	ldi	r30, 0x53	; 83
    462a:	f0 e0       	ldi	r31, 0x00	; 0
    462c:	80 81       	ld	r24, Z
    462e:	8f 7c       	andi	r24, 0xCF	; 207
    4630:	8c 93       	st	X, r24
		TCCR0 |= Copy_Timer->CompOutMode<<TCCR0_COM00;
    4632:	a3 e5       	ldi	r26, 0x53	; 83
    4634:	b0 e0       	ldi	r27, 0x00	; 0
    4636:	e3 e5       	ldi	r30, 0x53	; 83
    4638:	f0 e0       	ldi	r31, 0x00	; 0
    463a:	80 81       	ld	r24, Z
    463c:	28 2f       	mov	r18, r24
    463e:	e9 81       	ldd	r30, Y+1	; 0x01
    4640:	fa 81       	ldd	r31, Y+2	; 0x02
    4642:	82 81       	ldd	r24, Z+2	; 0x02
    4644:	88 2f       	mov	r24, r24
    4646:	90 e0       	ldi	r25, 0x00	; 0
    4648:	82 95       	swap	r24
    464a:	92 95       	swap	r25
    464c:	90 7f       	andi	r25, 0xF0	; 240
    464e:	98 27       	eor	r25, r24
    4650:	80 7f       	andi	r24, 0xF0	; 240
    4652:	98 27       	eor	r25, r24
    4654:	82 2b       	or	r24, r18
    4656:	8c 93       	st	X, r24
		TCCR0 &= MASK_CLOCK_MODE;
    4658:	a3 e5       	ldi	r26, 0x53	; 83
    465a:	b0 e0       	ldi	r27, 0x00	; 0
    465c:	e3 e5       	ldi	r30, 0x53	; 83
    465e:	f0 e0       	ldi	r31, 0x00	; 0
    4660:	80 81       	ld	r24, Z
    4662:	88 7f       	andi	r24, 0xF8	; 248
    4664:	8c 93       	st	X, r24
		TCCR0 |= Copy_Timer->ClockSel<<TCCR0_CS00;
    4666:	a3 e5       	ldi	r26, 0x53	; 83
    4668:	b0 e0       	ldi	r27, 0x00	; 0
    466a:	e3 e5       	ldi	r30, 0x53	; 83
    466c:	f0 e0       	ldi	r31, 0x00	; 0
    466e:	90 81       	ld	r25, Z
    4670:	e9 81       	ldd	r30, Y+1	; 0x01
    4672:	fa 81       	ldd	r31, Y+2	; 0x02
    4674:	83 81       	ldd	r24, Z+3	; 0x03
    4676:	89 2b       	or	r24, r25
    4678:	8c 93       	st	X, r24
    467a:	6d c0       	rjmp	.+218    	; 0x4756 <TIMER_voidInit+0x282>
		break;
		case TIMER1:
			TCCR1A &= MASK_TIMER1A_MODE;
    467c:	af e4       	ldi	r26, 0x4F	; 79
    467e:	b0 e0       	ldi	r27, 0x00	; 0
    4680:	ef e4       	ldi	r30, 0x4F	; 79
    4682:	f0 e0       	ldi	r31, 0x00	; 0
    4684:	80 81       	ld	r24, Z
    4686:	8c 7f       	andi	r24, 0xFC	; 252
    4688:	8c 93       	st	X, r24
			TCCR1A |= (Copy_Timer->TimerMode&(~(MASK_TIMER1A_MODE)));
    468a:	af e4       	ldi	r26, 0x4F	; 79
    468c:	b0 e0       	ldi	r27, 0x00	; 0
    468e:	ef e4       	ldi	r30, 0x4F	; 79
    4690:	f0 e0       	ldi	r31, 0x00	; 0
    4692:	80 81       	ld	r24, Z
    4694:	98 2f       	mov	r25, r24
    4696:	e9 81       	ldd	r30, Y+1	; 0x01
    4698:	fa 81       	ldd	r31, Y+2	; 0x02
    469a:	81 81       	ldd	r24, Z+1	; 0x01
    469c:	83 70       	andi	r24, 0x03	; 3
    469e:	89 2b       	or	r24, r25
    46a0:	8c 93       	st	X, r24
			TCCR1B &= MASK_TIMER1B_MODE;
    46a2:	ae e4       	ldi	r26, 0x4E	; 78
    46a4:	b0 e0       	ldi	r27, 0x00	; 0
    46a6:	ee e4       	ldi	r30, 0x4E	; 78
    46a8:	f0 e0       	ldi	r31, 0x00	; 0
    46aa:	80 81       	ld	r24, Z
    46ac:	87 7e       	andi	r24, 0xE7	; 231
    46ae:	8c 93       	st	X, r24
			TCCR1B |= ((Copy_Timer->TimerMode&(~(MASK_TIMER1B_MODE_VAL)))<<1);
    46b0:	ae e4       	ldi	r26, 0x4E	; 78
    46b2:	b0 e0       	ldi	r27, 0x00	; 0
    46b4:	ee e4       	ldi	r30, 0x4E	; 78
    46b6:	f0 e0       	ldi	r31, 0x00	; 0
    46b8:	80 81       	ld	r24, Z
    46ba:	28 2f       	mov	r18, r24
    46bc:	e9 81       	ldd	r30, Y+1	; 0x01
    46be:	fa 81       	ldd	r31, Y+2	; 0x02
    46c0:	81 81       	ldd	r24, Z+1	; 0x01
    46c2:	88 2f       	mov	r24, r24
    46c4:	90 e0       	ldi	r25, 0x00	; 0
    46c6:	8c 70       	andi	r24, 0x0C	; 12
    46c8:	88 0f       	add	r24, r24
    46ca:	99 1f       	adc	r25, r25
    46cc:	82 2b       	or	r24, r18
    46ce:	8c 93       	st	X, r24
			// set channel A , channel B
			TCCR1A &=MASK_COMP_MATCH1A_MODE;
    46d0:	af e4       	ldi	r26, 0x4F	; 79
    46d2:	b0 e0       	ldi	r27, 0x00	; 0
    46d4:	ef e4       	ldi	r30, 0x4F	; 79
    46d6:	f0 e0       	ldi	r31, 0x00	; 0
    46d8:	80 81       	ld	r24, Z
    46da:	8f 70       	andi	r24, 0x0F	; 15
    46dc:	8c 93       	st	X, r24
			TCCR1A |= Copy_Timer->CompOutMode<<TCCR1A_COM1B0;
    46de:	af e4       	ldi	r26, 0x4F	; 79
    46e0:	b0 e0       	ldi	r27, 0x00	; 0
    46e2:	ef e4       	ldi	r30, 0x4F	; 79
    46e4:	f0 e0       	ldi	r31, 0x00	; 0
    46e6:	80 81       	ld	r24, Z
    46e8:	28 2f       	mov	r18, r24
    46ea:	e9 81       	ldd	r30, Y+1	; 0x01
    46ec:	fa 81       	ldd	r31, Y+2	; 0x02
    46ee:	82 81       	ldd	r24, Z+2	; 0x02
    46f0:	88 2f       	mov	r24, r24
    46f2:	90 e0       	ldi	r25, 0x00	; 0
    46f4:	82 95       	swap	r24
    46f6:	92 95       	swap	r25
    46f8:	90 7f       	andi	r25, 0xF0	; 240
    46fa:	98 27       	eor	r25, r24
    46fc:	80 7f       	andi	r24, 0xF0	; 240
    46fe:	98 27       	eor	r25, r24
    4700:	82 2b       	or	r24, r18
    4702:	8c 93       	st	X, r24

			TCCR1B &= MASK_CLOCK_MODE;
    4704:	ae e4       	ldi	r26, 0x4E	; 78
    4706:	b0 e0       	ldi	r27, 0x00	; 0
    4708:	ee e4       	ldi	r30, 0x4E	; 78
    470a:	f0 e0       	ldi	r31, 0x00	; 0
    470c:	80 81       	ld	r24, Z
    470e:	88 7f       	andi	r24, 0xF8	; 248
    4710:	8c 93       	st	X, r24
			TCCR1B |= Copy_Timer->ClockSel<<TCCR1B_CS10;
    4712:	ae e4       	ldi	r26, 0x4E	; 78
    4714:	b0 e0       	ldi	r27, 0x00	; 0
    4716:	ee e4       	ldi	r30, 0x4E	; 78
    4718:	f0 e0       	ldi	r31, 0x00	; 0
    471a:	90 81       	ld	r25, Z
    471c:	e9 81       	ldd	r30, Y+1	; 0x01
    471e:	fa 81       	ldd	r31, Y+2	; 0x02
    4720:	83 81       	ldd	r24, Z+3	; 0x03
    4722:	89 2b       	or	r24, r25
    4724:	8c 93       	st	X, r24

			TIMSK &= MASK_TIMER1B_MODE;
    4726:	a9 e5       	ldi	r26, 0x59	; 89
    4728:	b0 e0       	ldi	r27, 0x00	; 0
    472a:	e9 e5       	ldi	r30, 0x59	; 89
    472c:	f0 e0       	ldi	r31, 0x00	; 0
    472e:	80 81       	ld	r24, Z
    4730:	87 7e       	andi	r24, 0xE7	; 231
    4732:	8c 93       	st	X, r24
			TIMSK |= Copy_Timer->IntEnable<<TIMSK_TOIE1;
    4734:	a9 e5       	ldi	r26, 0x59	; 89
    4736:	b0 e0       	ldi	r27, 0x00	; 0
    4738:	e9 e5       	ldi	r30, 0x59	; 89
    473a:	f0 e0       	ldi	r31, 0x00	; 0
    473c:	80 81       	ld	r24, Z
    473e:	28 2f       	mov	r18, r24
    4740:	e9 81       	ldd	r30, Y+1	; 0x01
    4742:	fa 81       	ldd	r31, Y+2	; 0x02
    4744:	84 81       	ldd	r24, Z+4	; 0x04
    4746:	88 2f       	mov	r24, r24
    4748:	90 e0       	ldi	r25, 0x00	; 0
    474a:	88 0f       	add	r24, r24
    474c:	99 1f       	adc	r25, r25
    474e:	88 0f       	add	r24, r24
    4750:	99 1f       	adc	r25, r25
    4752:	82 2b       	or	r24, r18
    4754:	8c 93       	st	X, r24
			break;
	}
}
    4756:	2a 96       	adiw	r28, 0x0a	; 10
    4758:	0f b6       	in	r0, 0x3f	; 63
    475a:	f8 94       	cli
    475c:	de bf       	out	0x3e, r29	; 62
    475e:	0f be       	out	0x3f, r0	; 63
    4760:	cd bf       	out	0x3d, r28	; 61
    4762:	cf 91       	pop	r28
    4764:	df 91       	pop	r29
    4766:	08 95       	ret

00004768 <TIMER0_voidSetPreloadValue>:

void TIMER0_voidSetPreloadValue(u8 Copy_u8PreloadValue)
{
    4768:	df 93       	push	r29
    476a:	cf 93       	push	r28
    476c:	0f 92       	push	r0
    476e:	cd b7       	in	r28, 0x3d	; 61
    4770:	de b7       	in	r29, 0x3e	; 62
    4772:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8PreloadValue;
    4774:	e2 e5       	ldi	r30, 0x52	; 82
    4776:	f0 e0       	ldi	r31, 0x00	; 0
    4778:	89 81       	ldd	r24, Y+1	; 0x01
    477a:	80 83       	st	Z, r24
}
    477c:	0f 90       	pop	r0
    477e:	cf 91       	pop	r28
    4780:	df 91       	pop	r29
    4782:	08 95       	ret

00004784 <TIMER0_voidSetCompMatchValue>:

void TIMER0_voidSetCompMatchValue(u8 Copy_u8CompVal)
{
    4784:	df 93       	push	r29
    4786:	cf 93       	push	r28
    4788:	0f 92       	push	r0
    478a:	cd b7       	in	r28, 0x3d	; 61
    478c:	de b7       	in	r29, 0x3e	; 62
    478e:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CompVal;
    4790:	ec e5       	ldi	r30, 0x5C	; 92
    4792:	f0 e0       	ldi	r31, 0x00	; 0
    4794:	89 81       	ldd	r24, Y+1	; 0x01
    4796:	80 83       	st	Z, r24
}
    4798:	0f 90       	pop	r0
    479a:	cf 91       	pop	r28
    479c:	df 91       	pop	r29
    479e:	08 95       	ret

000047a0 <TIMER0_u8SetCallBack>:

u8 TIMER0_u8SetCallBack(Timer_t *Copy_Timer,void (*Notifiction)())
{
    47a0:	df 93       	push	r29
    47a2:	cf 93       	push	r28
    47a4:	cd b7       	in	r28, 0x3d	; 61
    47a6:	de b7       	in	r29, 0x3e	; 62
    47a8:	27 97       	sbiw	r28, 0x07	; 7
    47aa:	0f b6       	in	r0, 0x3f	; 63
    47ac:	f8 94       	cli
    47ae:	de bf       	out	0x3e, r29	; 62
    47b0:	0f be       	out	0x3f, r0	; 63
    47b2:	cd bf       	out	0x3d, r28	; 61
    47b4:	9b 83       	std	Y+3, r25	; 0x03
    47b6:	8a 83       	std	Y+2, r24	; 0x02
    47b8:	7d 83       	std	Y+5, r23	; 0x05
    47ba:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK;
    47bc:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_Timer!=NULL)||(Notifiction !=NULL))
    47be:	8a 81       	ldd	r24, Y+2	; 0x02
    47c0:	9b 81       	ldd	r25, Y+3	; 0x03
    47c2:	00 97       	sbiw	r24, 0x00	; 0
    47c4:	21 f4       	brne	.+8      	; 0x47ce <TIMER0_u8SetCallBack+0x2e>
    47c6:	8c 81       	ldd	r24, Y+4	; 0x04
    47c8:	9d 81       	ldd	r25, Y+5	; 0x05
    47ca:	00 97       	sbiw	r24, 0x00	; 0
    47cc:	f9 f0       	breq	.+62     	; 0x480c <TIMER0_u8SetCallBack+0x6c>
	{

		switch(Copy_Timer->TimerMode)
    47ce:	ea 81       	ldd	r30, Y+2	; 0x02
    47d0:	fb 81       	ldd	r31, Y+3	; 0x03
    47d2:	81 81       	ldd	r24, Z+1	; 0x01
    47d4:	28 2f       	mov	r18, r24
    47d6:	30 e0       	ldi	r19, 0x00	; 0
    47d8:	3f 83       	std	Y+7, r19	; 0x07
    47da:	2e 83       	std	Y+6, r18	; 0x06
    47dc:	8e 81       	ldd	r24, Y+6	; 0x06
    47de:	9f 81       	ldd	r25, Y+7	; 0x07
    47e0:	00 97       	sbiw	r24, 0x00	; 0
    47e2:	31 f0       	breq	.+12     	; 0x47f0 <TIMER0_u8SetCallBack+0x50>
    47e4:	2e 81       	ldd	r18, Y+6	; 0x06
    47e6:	3f 81       	ldd	r19, Y+7	; 0x07
    47e8:	21 30       	cpi	r18, 0x01	; 1
    47ea:	31 05       	cpc	r19, r1
    47ec:	41 f0       	breq	.+16     	; 0x47fe <TIMER0_u8SetCallBack+0x5e>
    47ee:	10 c0       	rjmp	.+32     	; 0x4810 <TIMER0_u8SetCallBack+0x70>
		{
		case TIMER0_NORMAL:TIMER_pvCallBackFunc[TIMER0_OVF] = Notifiction;
    47f0:	8c 81       	ldd	r24, Y+4	; 0x04
    47f2:	9d 81       	ldd	r25, Y+5	; 0x05
    47f4:	90 93 ae 01 	sts	0x01AE, r25
    47f8:	80 93 ad 01 	sts	0x01AD, r24
    47fc:	09 c0       	rjmp	.+18     	; 0x4810 <TIMER0_u8SetCallBack+0x70>
		break;
		case TIMER0_CTC:TIMER_pvCallBackFunc[TIMER0_CMV] = Notifiction;
    47fe:	8c 81       	ldd	r24, Y+4	; 0x04
    4800:	9d 81       	ldd	r25, Y+5	; 0x05
    4802:	90 93 b0 01 	sts	0x01B0, r25
    4806:	80 93 af 01 	sts	0x01AF, r24
    480a:	02 c0       	rjmp	.+4      	; 0x4810 <TIMER0_u8SetCallBack+0x70>
		break;
		}

	}
	else
		Local_u8ErrorState = NULL_POINTER;
    480c:	82 e0       	ldi	r24, 0x02	; 2
    480e:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    4810:	89 81       	ldd	r24, Y+1	; 0x01
}
    4812:	27 96       	adiw	r28, 0x07	; 7
    4814:	0f b6       	in	r0, 0x3f	; 63
    4816:	f8 94       	cli
    4818:	de bf       	out	0x3e, r29	; 62
    481a:	0f be       	out	0x3f, r0	; 63
    481c:	cd bf       	out	0x3d, r28	; 61
    481e:	cf 91       	pop	r28
    4820:	df 91       	pop	r29
    4822:	08 95       	ret

00004824 <TIMER1_voidSetICR>:
	TIMER_voidInit(&t0);
	TIMER0_voidSetCompMatchValue((u8)((256UL*Copy_u8DutyCycle)/100UL));
}
*/
void TIMER1_voidSetICR(u16 Copy_u16Top)
{
    4824:	df 93       	push	r29
    4826:	cf 93       	push	r28
    4828:	00 d0       	rcall	.+0      	; 0x482a <TIMER1_voidSetICR+0x6>
    482a:	cd b7       	in	r28, 0x3d	; 61
    482c:	de b7       	in	r29, 0x3e	; 62
    482e:	9a 83       	std	Y+2, r25	; 0x02
    4830:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16Top;
    4832:	e6 e4       	ldi	r30, 0x46	; 70
    4834:	f0 e0       	ldi	r31, 0x00	; 0
    4836:	89 81       	ldd	r24, Y+1	; 0x01
    4838:	9a 81       	ldd	r25, Y+2	; 0x02
    483a:	91 83       	std	Z+1, r25	; 0x01
    483c:	80 83       	st	Z, r24
}
    483e:	0f 90       	pop	r0
    4840:	0f 90       	pop	r0
    4842:	cf 91       	pop	r28
    4844:	df 91       	pop	r29
    4846:	08 95       	ret

00004848 <TIMER1_voidSetPreloadValue>:
void TIMER1_voidSetPreloadValue(u16 Copy_u16PreloadValue)
{
    4848:	df 93       	push	r29
    484a:	cf 93       	push	r28
    484c:	00 d0       	rcall	.+0      	; 0x484e <TIMER1_voidSetPreloadValue+0x6>
    484e:	cd b7       	in	r28, 0x3d	; 61
    4850:	de b7       	in	r29, 0x3e	; 62
    4852:	9a 83       	std	Y+2, r25	; 0x02
    4854:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16PreloadValue;
    4856:	ec e4       	ldi	r30, 0x4C	; 76
    4858:	f0 e0       	ldi	r31, 0x00	; 0
    485a:	89 81       	ldd	r24, Y+1	; 0x01
    485c:	9a 81       	ldd	r25, Y+2	; 0x02
    485e:	91 83       	std	Z+1, r25	; 0x01
    4860:	80 83       	st	Z, r24
}
    4862:	0f 90       	pop	r0
    4864:	0f 90       	pop	r0
    4866:	cf 91       	pop	r28
    4868:	df 91       	pop	r29
    486a:	08 95       	ret

0000486c <TIMER1_voidSetChannelACompMatch>:

void TIMER1_voidSetChannelACompMatch(u16 Copy_u16CompVal)
{
    486c:	df 93       	push	r29
    486e:	cf 93       	push	r28
    4870:	00 d0       	rcall	.+0      	; 0x4872 <TIMER1_voidSetChannelACompMatch+0x6>
    4872:	cd b7       	in	r28, 0x3d	; 61
    4874:	de b7       	in	r29, 0x3e	; 62
    4876:	9a 83       	std	Y+2, r25	; 0x02
    4878:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompVal;
    487a:	ea e4       	ldi	r30, 0x4A	; 74
    487c:	f0 e0       	ldi	r31, 0x00	; 0
    487e:	89 81       	ldd	r24, Y+1	; 0x01
    4880:	9a 81       	ldd	r25, Y+2	; 0x02
    4882:	91 83       	std	Z+1, r25	; 0x01
    4884:	80 83       	st	Z, r24
}
    4886:	0f 90       	pop	r0
    4888:	0f 90       	pop	r0
    488a:	cf 91       	pop	r28
    488c:	df 91       	pop	r29
    488e:	08 95       	ret

00004890 <TIMER1_voidSetChannelBCompMatch>:
void TIMER1_voidSetChannelBCompMatch(u16 Copy_u16CompVal)
{
    4890:	df 93       	push	r29
    4892:	cf 93       	push	r28
    4894:	00 d0       	rcall	.+0      	; 0x4896 <TIMER1_voidSetChannelBCompMatch+0x6>
    4896:	cd b7       	in	r28, 0x3d	; 61
    4898:	de b7       	in	r29, 0x3e	; 62
    489a:	9a 83       	std	Y+2, r25	; 0x02
    489c:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Copy_u16CompVal;
    489e:	e8 e4       	ldi	r30, 0x48	; 72
    48a0:	f0 e0       	ldi	r31, 0x00	; 0
    48a2:	89 81       	ldd	r24, Y+1	; 0x01
    48a4:	9a 81       	ldd	r25, Y+2	; 0x02
    48a6:	91 83       	std	Z+1, r25	; 0x01
    48a8:	80 83       	st	Z, r24
}
    48aa:	0f 90       	pop	r0
    48ac:	0f 90       	pop	r0
    48ae:	cf 91       	pop	r28
    48b0:	df 91       	pop	r29
    48b2:	08 95       	ret

000048b4 <TIMER1_u8SetCallBack>:
u8 TIMER1_u8SetCallBack(Timer_t *Copy_Timer,void(*Notifiction)())
{
    48b4:	df 93       	push	r29
    48b6:	cf 93       	push	r28
    48b8:	cd b7       	in	r28, 0x3d	; 61
    48ba:	de b7       	in	r29, 0x3e	; 62
    48bc:	29 97       	sbiw	r28, 0x09	; 9
    48be:	0f b6       	in	r0, 0x3f	; 63
    48c0:	f8 94       	cli
    48c2:	de bf       	out	0x3e, r29	; 62
    48c4:	0f be       	out	0x3f, r0	; 63
    48c6:	cd bf       	out	0x3d, r28	; 61
    48c8:	9b 83       	std	Y+3, r25	; 0x03
    48ca:	8a 83       	std	Y+2, r24	; 0x02
    48cc:	7d 83       	std	Y+5, r23	; 0x05
    48ce:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK;
    48d0:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_Timer!=NULL)||(Notifiction !=NULL))
    48d2:	8a 81       	ldd	r24, Y+2	; 0x02
    48d4:	9b 81       	ldd	r25, Y+3	; 0x03
    48d6:	00 97       	sbiw	r24, 0x00	; 0
    48d8:	29 f4       	brne	.+10     	; 0x48e4 <TIMER1_u8SetCallBack+0x30>
    48da:	8c 81       	ldd	r24, Y+4	; 0x04
    48dc:	9d 81       	ldd	r25, Y+5	; 0x05
    48de:	00 97       	sbiw	r24, 0x00	; 0
    48e0:	09 f4       	brne	.+2      	; 0x48e4 <TIMER1_u8SetCallBack+0x30>
    48e2:	5b c0       	rjmp	.+182    	; 0x499a <TIMER1_u8SetCallBack+0xe6>
	{
		switch(Copy_Timer->TimerMode)
    48e4:	ea 81       	ldd	r30, Y+2	; 0x02
    48e6:	fb 81       	ldd	r31, Y+3	; 0x03
    48e8:	81 81       	ldd	r24, Z+1	; 0x01
    48ea:	28 2f       	mov	r18, r24
    48ec:	30 e0       	ldi	r19, 0x00	; 0
    48ee:	39 87       	std	Y+9, r19	; 0x09
    48f0:	28 87       	std	Y+8, r18	; 0x08
    48f2:	88 85       	ldd	r24, Y+8	; 0x08
    48f4:	99 85       	ldd	r25, Y+9	; 0x09
    48f6:	84 30       	cpi	r24, 0x04	; 4
    48f8:	91 05       	cpc	r25, r1
    48fa:	91 f0       	breq	.+36     	; 0x4920 <TIMER1_u8SetCallBack+0x6c>
    48fc:	28 85       	ldd	r18, Y+8	; 0x08
    48fe:	39 85       	ldd	r19, Y+9	; 0x09
    4900:	2c 30       	cpi	r18, 0x0C	; 12
    4902:	31 05       	cpc	r19, r1
    4904:	09 f4       	brne	.+2      	; 0x4908 <TIMER1_u8SetCallBack+0x54>
    4906:	42 c0       	rjmp	.+132    	; 0x498c <TIMER1_u8SetCallBack+0xd8>
    4908:	88 85       	ldd	r24, Y+8	; 0x08
    490a:	99 85       	ldd	r25, Y+9	; 0x09
    490c:	00 97       	sbiw	r24, 0x00	; 0
    490e:	09 f0       	breq	.+2      	; 0x4912 <TIMER1_u8SetCallBack+0x5e>
    4910:	46 c0       	rjmp	.+140    	; 0x499e <TIMER1_u8SetCallBack+0xea>
		{
		case TIMER1_NORMAL:TIMER_pvCallBackFunc[TIMER1_OVF] = Notifiction;
    4912:	8c 81       	ldd	r24, Y+4	; 0x04
    4914:	9d 81       	ldd	r25, Y+5	; 0x05
    4916:	90 93 b2 01 	sts	0x01B2, r25
    491a:	80 93 b1 01 	sts	0x01B1, r24
    491e:	3f c0       	rjmp	.+126    	; 0x499e <TIMER1_u8SetCallBack+0xea>
		break;
		case TIMER1_CTC:
			switch(Copy_Timer->CompOutMode)
    4920:	ea 81       	ldd	r30, Y+2	; 0x02
    4922:	fb 81       	ldd	r31, Y+3	; 0x03
    4924:	82 81       	ldd	r24, Z+2	; 0x02
    4926:	28 2f       	mov	r18, r24
    4928:	30 e0       	ldi	r19, 0x00	; 0
    492a:	3f 83       	std	Y+7, r19	; 0x07
    492c:	2e 83       	std	Y+6, r18	; 0x06
    492e:	8e 81       	ldd	r24, Y+6	; 0x06
    4930:	9f 81       	ldd	r25, Y+7	; 0x07
    4932:	84 30       	cpi	r24, 0x04	; 4
    4934:	91 05       	cpc	r25, r1
    4936:	a1 f0       	breq	.+40     	; 0x4960 <TIMER1_u8SetCallBack+0xac>
    4938:	2e 81       	ldd	r18, Y+6	; 0x06
    493a:	3f 81       	ldd	r19, Y+7	; 0x07
    493c:	25 30       	cpi	r18, 0x05	; 5
    493e:	31 05       	cpc	r19, r1
    4940:	2c f4       	brge	.+10     	; 0x494c <TIMER1_u8SetCallBack+0x98>
    4942:	8e 81       	ldd	r24, Y+6	; 0x06
    4944:	9f 81       	ldd	r25, Y+7	; 0x07
    4946:	00 97       	sbiw	r24, 0x00	; 0
    4948:	59 f0       	breq	.+22     	; 0x4960 <TIMER1_u8SetCallBack+0xac>
    494a:	10 c0       	rjmp	.+32     	; 0x496c <TIMER1_u8SetCallBack+0xb8>
    494c:	2e 81       	ldd	r18, Y+6	; 0x06
    494e:	3f 81       	ldd	r19, Y+7	; 0x07
    4950:	28 30       	cpi	r18, 0x08	; 8
    4952:	31 05       	cpc	r19, r1
    4954:	29 f0       	breq	.+10     	; 0x4960 <TIMER1_u8SetCallBack+0xac>
    4956:	8e 81       	ldd	r24, Y+6	; 0x06
    4958:	9f 81       	ldd	r25, Y+7	; 0x07
    495a:	8c 30       	cpi	r24, 0x0C	; 12
    495c:	91 05       	cpc	r25, r1
    495e:	31 f4       	brne	.+12     	; 0x496c <TIMER1_u8SetCallBack+0xb8>
			{
			case OC1A_DIS:case OC1A_TOG:case OC1A_CLR:case OC1A_SET:
				TIMER_pvCallBackFunc[TIMER1A_CMV] = Notifiction;
    4960:	8c 81       	ldd	r24, Y+4	; 0x04
    4962:	9d 81       	ldd	r25, Y+5	; 0x05
    4964:	90 93 b4 01 	sts	0x01B4, r25
    4968:	80 93 b3 01 	sts	0x01B3, r24
				break;
			}
			switch(Copy_Timer->CompOutMode)
    496c:	ea 81       	ldd	r30, Y+2	; 0x02
    496e:	fb 81       	ldd	r31, Y+3	; 0x03
    4970:	82 81       	ldd	r24, Z+2	; 0x02
    4972:	88 2f       	mov	r24, r24
    4974:	90 e0       	ldi	r25, 0x00	; 0
    4976:	00 96       	adiw	r24, 0x00	; 0
    4978:	84 30       	cpi	r24, 0x04	; 4
    497a:	91 05       	cpc	r25, r1
    497c:	80 f4       	brcc	.+32     	; 0x499e <TIMER1_u8SetCallBack+0xea>
			{
			case OC1B_DIS:case OC1B_TOG:case OC1B_CLR:case OC1B_SET:
				TIMER_pvCallBackFunc[TIMER1B_CMV] = Notifiction;
    497e:	8c 81       	ldd	r24, Y+4	; 0x04
    4980:	9d 81       	ldd	r25, Y+5	; 0x05
    4982:	90 93 b6 01 	sts	0x01B6, r25
    4986:	80 93 b5 01 	sts	0x01B5, r24
    498a:	09 c0       	rjmp	.+18     	; 0x499e <TIMER1_u8SetCallBack+0xea>
				break;
			}
			break;
		case TIMER1_IC_CTC:
			TIMER_pvCallBackFunc[TIMER1_CAPT] = Notifiction;
    498c:	8c 81       	ldd	r24, Y+4	; 0x04
    498e:	9d 81       	ldd	r25, Y+5	; 0x05
    4990:	90 93 b8 01 	sts	0x01B8, r25
    4994:	80 93 b7 01 	sts	0x01B7, r24
    4998:	02 c0       	rjmp	.+4      	; 0x499e <TIMER1_u8SetCallBack+0xea>
			break;

		}
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    499a:	82 e0       	ldi	r24, 0x02	; 2
    499c:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    499e:	89 81       	ldd	r24, Y+1	; 0x01
}
    49a0:	29 96       	adiw	r28, 0x09	; 9
    49a2:	0f b6       	in	r0, 0x3f	; 63
    49a4:	f8 94       	cli
    49a6:	de bf       	out	0x3e, r29	; 62
    49a8:	0f be       	out	0x3f, r0	; 63
    49aa:	cd bf       	out	0x3d, r28	; 61
    49ac:	cf 91       	pop	r28
    49ae:	df 91       	pop	r29
    49b0:	08 95       	ret

000049b2 <__vector_10>:
// CTC timer/counter0
void __vector_10 (void)	__attribute__((signal));
void __vector_10 (void)
{
    49b2:	1f 92       	push	r1
    49b4:	0f 92       	push	r0
    49b6:	0f b6       	in	r0, 0x3f	; 63
    49b8:	0f 92       	push	r0
    49ba:	11 24       	eor	r1, r1
    49bc:	2f 93       	push	r18
    49be:	3f 93       	push	r19
    49c0:	4f 93       	push	r20
    49c2:	5f 93       	push	r21
    49c4:	6f 93       	push	r22
    49c6:	7f 93       	push	r23
    49c8:	8f 93       	push	r24
    49ca:	9f 93       	push	r25
    49cc:	af 93       	push	r26
    49ce:	bf 93       	push	r27
    49d0:	ef 93       	push	r30
    49d2:	ff 93       	push	r31
    49d4:	df 93       	push	r29
    49d6:	cf 93       	push	r28
    49d8:	cd b7       	in	r28, 0x3d	; 61
    49da:	de b7       	in	r29, 0x3e	; 62
	TIMER_pvCallBackFunc[TIMER0_CMV]();
    49dc:	e0 91 af 01 	lds	r30, 0x01AF
    49e0:	f0 91 b0 01 	lds	r31, 0x01B0
    49e4:	09 95       	icall

}
    49e6:	cf 91       	pop	r28
    49e8:	df 91       	pop	r29
    49ea:	ff 91       	pop	r31
    49ec:	ef 91       	pop	r30
    49ee:	bf 91       	pop	r27
    49f0:	af 91       	pop	r26
    49f2:	9f 91       	pop	r25
    49f4:	8f 91       	pop	r24
    49f6:	7f 91       	pop	r23
    49f8:	6f 91       	pop	r22
    49fa:	5f 91       	pop	r21
    49fc:	4f 91       	pop	r20
    49fe:	3f 91       	pop	r19
    4a00:	2f 91       	pop	r18
    4a02:	0f 90       	pop	r0
    4a04:	0f be       	out	0x3f, r0	; 63
    4a06:	0f 90       	pop	r0
    4a08:	1f 90       	pop	r1
    4a0a:	18 95       	reti

00004a0c <__vector_11>:
// OVF timer/counter0
void __vector_11 (void)	__attribute__((signal));
void __vector_11 (void)
{
    4a0c:	1f 92       	push	r1
    4a0e:	0f 92       	push	r0
    4a10:	0f b6       	in	r0, 0x3f	; 63
    4a12:	0f 92       	push	r0
    4a14:	11 24       	eor	r1, r1
    4a16:	2f 93       	push	r18
    4a18:	3f 93       	push	r19
    4a1a:	4f 93       	push	r20
    4a1c:	5f 93       	push	r21
    4a1e:	6f 93       	push	r22
    4a20:	7f 93       	push	r23
    4a22:	8f 93       	push	r24
    4a24:	9f 93       	push	r25
    4a26:	af 93       	push	r26
    4a28:	bf 93       	push	r27
    4a2a:	ef 93       	push	r30
    4a2c:	ff 93       	push	r31
    4a2e:	df 93       	push	r29
    4a30:	cf 93       	push	r28
    4a32:	cd b7       	in	r28, 0x3d	; 61
    4a34:	de b7       	in	r29, 0x3e	; 62
	TIMER_pvCallBackFunc[TIMER0_OVF]();
    4a36:	e0 91 ad 01 	lds	r30, 0x01AD
    4a3a:	f0 91 ae 01 	lds	r31, 0x01AE
    4a3e:	09 95       	icall

}
    4a40:	cf 91       	pop	r28
    4a42:	df 91       	pop	r29
    4a44:	ff 91       	pop	r31
    4a46:	ef 91       	pop	r30
    4a48:	bf 91       	pop	r27
    4a4a:	af 91       	pop	r26
    4a4c:	9f 91       	pop	r25
    4a4e:	8f 91       	pop	r24
    4a50:	7f 91       	pop	r23
    4a52:	6f 91       	pop	r22
    4a54:	5f 91       	pop	r21
    4a56:	4f 91       	pop	r20
    4a58:	3f 91       	pop	r19
    4a5a:	2f 91       	pop	r18
    4a5c:	0f 90       	pop	r0
    4a5e:	0f be       	out	0x3f, r0	; 63
    4a60:	0f 90       	pop	r0
    4a62:	1f 90       	pop	r1
    4a64:	18 95       	reti

00004a66 <__vector_7>:
// CTC timer/counter1A
void __vector_7 (void)	__attribute__((signal));
void __vector_7 (void)
{
    4a66:	1f 92       	push	r1
    4a68:	0f 92       	push	r0
    4a6a:	0f b6       	in	r0, 0x3f	; 63
    4a6c:	0f 92       	push	r0
    4a6e:	11 24       	eor	r1, r1
    4a70:	2f 93       	push	r18
    4a72:	3f 93       	push	r19
    4a74:	4f 93       	push	r20
    4a76:	5f 93       	push	r21
    4a78:	6f 93       	push	r22
    4a7a:	7f 93       	push	r23
    4a7c:	8f 93       	push	r24
    4a7e:	9f 93       	push	r25
    4a80:	af 93       	push	r26
    4a82:	bf 93       	push	r27
    4a84:	ef 93       	push	r30
    4a86:	ff 93       	push	r31
    4a88:	df 93       	push	r29
    4a8a:	cf 93       	push	r28
    4a8c:	cd b7       	in	r28, 0x3d	; 61
    4a8e:	de b7       	in	r29, 0x3e	; 62
	TIMER_pvCallBackFunc[TIMER1A_CMV]();
    4a90:	e0 91 b3 01 	lds	r30, 0x01B3
    4a94:	f0 91 b4 01 	lds	r31, 0x01B4
    4a98:	09 95       	icall
}
    4a9a:	cf 91       	pop	r28
    4a9c:	df 91       	pop	r29
    4a9e:	ff 91       	pop	r31
    4aa0:	ef 91       	pop	r30
    4aa2:	bf 91       	pop	r27
    4aa4:	af 91       	pop	r26
    4aa6:	9f 91       	pop	r25
    4aa8:	8f 91       	pop	r24
    4aaa:	7f 91       	pop	r23
    4aac:	6f 91       	pop	r22
    4aae:	5f 91       	pop	r21
    4ab0:	4f 91       	pop	r20
    4ab2:	3f 91       	pop	r19
    4ab4:	2f 91       	pop	r18
    4ab6:	0f 90       	pop	r0
    4ab8:	0f be       	out	0x3f, r0	; 63
    4aba:	0f 90       	pop	r0
    4abc:	1f 90       	pop	r1
    4abe:	18 95       	reti

00004ac0 <__vector_8>:
// CTC timer/counter1B
void __vector_8 (void)	__attribute__((signal));
void __vector_8 (void)
{
    4ac0:	1f 92       	push	r1
    4ac2:	0f 92       	push	r0
    4ac4:	0f b6       	in	r0, 0x3f	; 63
    4ac6:	0f 92       	push	r0
    4ac8:	11 24       	eor	r1, r1
    4aca:	2f 93       	push	r18
    4acc:	3f 93       	push	r19
    4ace:	4f 93       	push	r20
    4ad0:	5f 93       	push	r21
    4ad2:	6f 93       	push	r22
    4ad4:	7f 93       	push	r23
    4ad6:	8f 93       	push	r24
    4ad8:	9f 93       	push	r25
    4ada:	af 93       	push	r26
    4adc:	bf 93       	push	r27
    4ade:	ef 93       	push	r30
    4ae0:	ff 93       	push	r31
    4ae2:	df 93       	push	r29
    4ae4:	cf 93       	push	r28
    4ae6:	cd b7       	in	r28, 0x3d	; 61
    4ae8:	de b7       	in	r29, 0x3e	; 62
	TIMER_pvCallBackFunc[TIMER1B_CMV]();
    4aea:	e0 91 b5 01 	lds	r30, 0x01B5
    4aee:	f0 91 b6 01 	lds	r31, 0x01B6
    4af2:	09 95       	icall
}
    4af4:	cf 91       	pop	r28
    4af6:	df 91       	pop	r29
    4af8:	ff 91       	pop	r31
    4afa:	ef 91       	pop	r30
    4afc:	bf 91       	pop	r27
    4afe:	af 91       	pop	r26
    4b00:	9f 91       	pop	r25
    4b02:	8f 91       	pop	r24
    4b04:	7f 91       	pop	r23
    4b06:	6f 91       	pop	r22
    4b08:	5f 91       	pop	r21
    4b0a:	4f 91       	pop	r20
    4b0c:	3f 91       	pop	r19
    4b0e:	2f 91       	pop	r18
    4b10:	0f 90       	pop	r0
    4b12:	0f be       	out	0x3f, r0	; 63
    4b14:	0f 90       	pop	r0
    4b16:	1f 90       	pop	r1
    4b18:	18 95       	reti

00004b1a <__vector_9>:
// OVF timer/counter1
void __vector_9 (void)	__attribute__((signal));
void __vector_9 (void)
{
    4b1a:	1f 92       	push	r1
    4b1c:	0f 92       	push	r0
    4b1e:	0f b6       	in	r0, 0x3f	; 63
    4b20:	0f 92       	push	r0
    4b22:	11 24       	eor	r1, r1
    4b24:	2f 93       	push	r18
    4b26:	3f 93       	push	r19
    4b28:	4f 93       	push	r20
    4b2a:	5f 93       	push	r21
    4b2c:	6f 93       	push	r22
    4b2e:	7f 93       	push	r23
    4b30:	8f 93       	push	r24
    4b32:	9f 93       	push	r25
    4b34:	af 93       	push	r26
    4b36:	bf 93       	push	r27
    4b38:	ef 93       	push	r30
    4b3a:	ff 93       	push	r31
    4b3c:	df 93       	push	r29
    4b3e:	cf 93       	push	r28
    4b40:	cd b7       	in	r28, 0x3d	; 61
    4b42:	de b7       	in	r29, 0x3e	; 62
	TIMER_pvCallBackFunc[TIMER1_OVF]();
    4b44:	e0 91 b1 01 	lds	r30, 0x01B1
    4b48:	f0 91 b2 01 	lds	r31, 0x01B2
    4b4c:	09 95       	icall
}
    4b4e:	cf 91       	pop	r28
    4b50:	df 91       	pop	r29
    4b52:	ff 91       	pop	r31
    4b54:	ef 91       	pop	r30
    4b56:	bf 91       	pop	r27
    4b58:	af 91       	pop	r26
    4b5a:	9f 91       	pop	r25
    4b5c:	8f 91       	pop	r24
    4b5e:	7f 91       	pop	r23
    4b60:	6f 91       	pop	r22
    4b62:	5f 91       	pop	r21
    4b64:	4f 91       	pop	r20
    4b66:	3f 91       	pop	r19
    4b68:	2f 91       	pop	r18
    4b6a:	0f 90       	pop	r0
    4b6c:	0f be       	out	0x3f, r0	; 63
    4b6e:	0f 90       	pop	r0
    4b70:	1f 90       	pop	r1
    4b72:	18 95       	reti

00004b74 <__vector_6>:


// Capture CTC Event timer/counter1
void __vector_6 (void)	__attribute__((signal));
void __vector_6 (void)
{
    4b74:	1f 92       	push	r1
    4b76:	0f 92       	push	r0
    4b78:	0f b6       	in	r0, 0x3f	; 63
    4b7a:	0f 92       	push	r0
    4b7c:	11 24       	eor	r1, r1
    4b7e:	2f 93       	push	r18
    4b80:	3f 93       	push	r19
    4b82:	4f 93       	push	r20
    4b84:	5f 93       	push	r21
    4b86:	6f 93       	push	r22
    4b88:	7f 93       	push	r23
    4b8a:	8f 93       	push	r24
    4b8c:	9f 93       	push	r25
    4b8e:	af 93       	push	r26
    4b90:	bf 93       	push	r27
    4b92:	ef 93       	push	r30
    4b94:	ff 93       	push	r31
    4b96:	df 93       	push	r29
    4b98:	cf 93       	push	r28
    4b9a:	cd b7       	in	r28, 0x3d	; 61
    4b9c:	de b7       	in	r29, 0x3e	; 62
	TIMER_pvCallBackFunc[TIMER1_CAPT]();
    4b9e:	e0 91 b7 01 	lds	r30, 0x01B7
    4ba2:	f0 91 b8 01 	lds	r31, 0x01B8
    4ba6:	09 95       	icall
}
    4ba8:	cf 91       	pop	r28
    4baa:	df 91       	pop	r29
    4bac:	ff 91       	pop	r31
    4bae:	ef 91       	pop	r30
    4bb0:	bf 91       	pop	r27
    4bb2:	af 91       	pop	r26
    4bb4:	9f 91       	pop	r25
    4bb6:	8f 91       	pop	r24
    4bb8:	7f 91       	pop	r23
    4bba:	6f 91       	pop	r22
    4bbc:	5f 91       	pop	r21
    4bbe:	4f 91       	pop	r20
    4bc0:	3f 91       	pop	r19
    4bc2:	2f 91       	pop	r18
    4bc4:	0f 90       	pop	r0
    4bc6:	0f be       	out	0x3f, r0	; 63
    4bc8:	0f 90       	pop	r0
    4bca:	1f 90       	pop	r1
    4bcc:	18 95       	reti

00004bce <AppMap>:
#include "../HAL/LED_interface.h"
#include "../HAL/SW_interface.h"
*/

u32 AppMap(u32 InMin,u32 InMax,u32 OutMin,u32 OutMax,u32 InVal)
{
    4bce:	af 92       	push	r10
    4bd0:	bf 92       	push	r11
    4bd2:	cf 92       	push	r12
    4bd4:	df 92       	push	r13
    4bd6:	ef 92       	push	r14
    4bd8:	ff 92       	push	r15
    4bda:	0f 93       	push	r16
    4bdc:	1f 93       	push	r17
    4bde:	df 93       	push	r29
    4be0:	cf 93       	push	r28
    4be2:	cd b7       	in	r28, 0x3d	; 61
    4be4:	de b7       	in	r29, 0x3e	; 62
    4be6:	64 97       	sbiw	r28, 0x14	; 20
    4be8:	0f b6       	in	r0, 0x3f	; 63
    4bea:	f8 94       	cli
    4bec:	de bf       	out	0x3e, r29	; 62
    4bee:	0f be       	out	0x3f, r0	; 63
    4bf0:	cd bf       	out	0x3d, r28	; 61
    4bf2:	6d 83       	std	Y+5, r22	; 0x05
    4bf4:	7e 83       	std	Y+6, r23	; 0x06
    4bf6:	8f 83       	std	Y+7, r24	; 0x07
    4bf8:	98 87       	std	Y+8, r25	; 0x08
    4bfa:	29 87       	std	Y+9, r18	; 0x09
    4bfc:	3a 87       	std	Y+10, r19	; 0x0a
    4bfe:	4b 87       	std	Y+11, r20	; 0x0b
    4c00:	5c 87       	std	Y+12, r21	; 0x0c
    4c02:	ed 86       	std	Y+13, r14	; 0x0d
    4c04:	fe 86       	std	Y+14, r15	; 0x0e
    4c06:	0f 87       	std	Y+15, r16	; 0x0f
    4c08:	18 8b       	std	Y+16, r17	; 0x10
    4c0a:	a9 8a       	std	Y+17, r10	; 0x11
    4c0c:	ba 8a       	std	Y+18, r11	; 0x12
    4c0e:	cb 8a       	std	Y+19, r12	; 0x13
    4c10:	dc 8a       	std	Y+20, r13	; 0x14
	u32 Local=0;
    4c12:	19 82       	std	Y+1, r1	; 0x01
    4c14:	1a 82       	std	Y+2, r1	; 0x02
    4c16:	1b 82       	std	Y+3, r1	; 0x03
    4c18:	1c 82       	std	Y+4, r1	; 0x04
	Local = (((InVal-InMin)*(OutMax-OutMin))/(InMax-InMin))+OutMin;
    4c1a:	29 a1       	ldd	r18, Y+33	; 0x21
    4c1c:	3a a1       	ldd	r19, Y+34	; 0x22
    4c1e:	4b a1       	ldd	r20, Y+35	; 0x23
    4c20:	5c a1       	ldd	r21, Y+36	; 0x24
    4c22:	8d 81       	ldd	r24, Y+5	; 0x05
    4c24:	9e 81       	ldd	r25, Y+6	; 0x06
    4c26:	af 81       	ldd	r26, Y+7	; 0x07
    4c28:	b8 85       	ldd	r27, Y+8	; 0x08
    4c2a:	79 01       	movw	r14, r18
    4c2c:	8a 01       	movw	r16, r20
    4c2e:	e8 1a       	sub	r14, r24
    4c30:	f9 0a       	sbc	r15, r25
    4c32:	0a 0b       	sbc	r16, r26
    4c34:	1b 0b       	sbc	r17, r27
    4c36:	29 89       	ldd	r18, Y+17	; 0x11
    4c38:	3a 89       	ldd	r19, Y+18	; 0x12
    4c3a:	4b 89       	ldd	r20, Y+19	; 0x13
    4c3c:	5c 89       	ldd	r21, Y+20	; 0x14
    4c3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c40:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c42:	af 85       	ldd	r26, Y+15	; 0x0f
    4c44:	b8 89       	ldd	r27, Y+16	; 0x10
    4c46:	28 1b       	sub	r18, r24
    4c48:	39 0b       	sbc	r19, r25
    4c4a:	4a 0b       	sbc	r20, r26
    4c4c:	5b 0b       	sbc	r21, r27
    4c4e:	c8 01       	movw	r24, r16
    4c50:	b7 01       	movw	r22, r14
    4c52:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <__mulsi3>
    4c56:	7b 01       	movw	r14, r22
    4c58:	8c 01       	movw	r16, r24
    4c5a:	29 85       	ldd	r18, Y+9	; 0x09
    4c5c:	3a 85       	ldd	r19, Y+10	; 0x0a
    4c5e:	4b 85       	ldd	r20, Y+11	; 0x0b
    4c60:	5c 85       	ldd	r21, Y+12	; 0x0c
    4c62:	8d 81       	ldd	r24, Y+5	; 0x05
    4c64:	9e 81       	ldd	r25, Y+6	; 0x06
    4c66:	af 81       	ldd	r26, Y+7	; 0x07
    4c68:	b8 85       	ldd	r27, Y+8	; 0x08
    4c6a:	28 1b       	sub	r18, r24
    4c6c:	39 0b       	sbc	r19, r25
    4c6e:	4a 0b       	sbc	r20, r26
    4c70:	5b 0b       	sbc	r21, r27
    4c72:	c8 01       	movw	r24, r16
    4c74:	b7 01       	movw	r22, r14
    4c76:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    4c7a:	da 01       	movw	r26, r20
    4c7c:	c9 01       	movw	r24, r18
    4c7e:	9c 01       	movw	r18, r24
    4c80:	ad 01       	movw	r20, r26
    4c82:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c84:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c86:	af 85       	ldd	r26, Y+15	; 0x0f
    4c88:	b8 89       	ldd	r27, Y+16	; 0x10
    4c8a:	82 0f       	add	r24, r18
    4c8c:	93 1f       	adc	r25, r19
    4c8e:	a4 1f       	adc	r26, r20
    4c90:	b5 1f       	adc	r27, r21
    4c92:	89 83       	std	Y+1, r24	; 0x01
    4c94:	9a 83       	std	Y+2, r25	; 0x02
    4c96:	ab 83       	std	Y+3, r26	; 0x03
    4c98:	bc 83       	std	Y+4, r27	; 0x04
	return Local;
    4c9a:	89 81       	ldd	r24, Y+1	; 0x01
    4c9c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c9e:	ab 81       	ldd	r26, Y+3	; 0x03
    4ca0:	bc 81       	ldd	r27, Y+4	; 0x04
}
    4ca2:	bc 01       	movw	r22, r24
    4ca4:	cd 01       	movw	r24, r26
    4ca6:	64 96       	adiw	r28, 0x14	; 20
    4ca8:	0f b6       	in	r0, 0x3f	; 63
    4caa:	f8 94       	cli
    4cac:	de bf       	out	0x3e, r29	; 62
    4cae:	0f be       	out	0x3f, r0	; 63
    4cb0:	cd bf       	out	0x3d, r28	; 61
    4cb2:	cf 91       	pop	r28
    4cb4:	df 91       	pop	r29
    4cb6:	1f 91       	pop	r17
    4cb8:	0f 91       	pop	r16
    4cba:	ff 90       	pop	r15
    4cbc:	ef 90       	pop	r14
    4cbe:	df 90       	pop	r13
    4cc0:	cf 90       	pop	r12
    4cc2:	bf 90       	pop	r11
    4cc4:	af 90       	pop	r10
    4cc6:	08 95       	ret

00004cc8 <main>:
void NotLed();

void SwPWM();
LED_t led1 = {DIO_PORTA,DIO_PIN0,LED_SOUCE};
void main()
{
    4cc8:	df 93       	push	r29
    4cca:	cf 93       	push	r28
    4ccc:	cd b7       	in	r28, 0x3d	; 61
    4cce:	de b7       	in	r29, 0x3e	; 62
    4cd0:	64 97       	sbiw	r28, 0x14	; 20
    4cd2:	0f b6       	in	r0, 0x3f	; 63
    4cd4:	f8 94       	cli
    4cd6:	de bf       	out	0x3e, r29	; 62
    4cd8:	0f be       	out	0x3f, r0	; 63
    4cda:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
    4cdc:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <PORT_voidInit>
	ADC_voidInit();
    4ce0:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_voidInit>
	CLCD_voidInit();
    4ce4:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <CLCD_voidInit>
	/*
	Timer_t t1 = {TIMER1,TIMER1_IC_FAST_PWM,OC1A_CCST,TIMER_DIV_8,TIMER1A_INT_DISABLE};
	TIMER_voidInit(&t1);

	TIMER1_voidSetICR(20000);*/
	u16 Local_data=0;
    4ce8:	1c 8a       	std	Y+20, r1	; 0x14
    4cea:	1b 8a       	std	Y+19, r1	; 0x13
	u32 map=0;
    4cec:	1f 86       	std	Y+15, r1	; 0x0f
    4cee:	18 8a       	std	Y+16, r1	; 0x10
    4cf0:	19 8a       	std	Y+17, r1	; 0x11
    4cf2:	1a 8a       	std	Y+18, r1	; 0x12
	SERVO_voidSetAngle(180);
    4cf4:	84 eb       	ldi	r24, 0xB4	; 180
    4cf6:	90 e0       	ldi	r25, 0x00	; 0
    4cf8:	0e 94 d6 16 	call	0x2dac	; 0x2dac <SERVO_voidSetAngle>
    4cfc:	80 e0       	ldi	r24, 0x00	; 0
    4cfe:	90 e0       	ldi	r25, 0x00	; 0
    4d00:	aa e7       	ldi	r26, 0x7A	; 122
    4d02:	b4 e4       	ldi	r27, 0x44	; 68
    4d04:	8b 87       	std	Y+11, r24	; 0x0b
    4d06:	9c 87       	std	Y+12, r25	; 0x0c
    4d08:	ad 87       	std	Y+13, r26	; 0x0d
    4d0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d10:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d12:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d14:	20 e0       	ldi	r18, 0x00	; 0
    4d16:	30 e0       	ldi	r19, 0x00	; 0
    4d18:	4a ef       	ldi	r20, 0xFA	; 250
    4d1a:	54 e4       	ldi	r21, 0x44	; 68
    4d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d20:	dc 01       	movw	r26, r24
    4d22:	cb 01       	movw	r24, r22
    4d24:	8f 83       	std	Y+7, r24	; 0x07
    4d26:	98 87       	std	Y+8, r25	; 0x08
    4d28:	a9 87       	std	Y+9, r26	; 0x09
    4d2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4d2c:	6f 81       	ldd	r22, Y+7	; 0x07
    4d2e:	78 85       	ldd	r23, Y+8	; 0x08
    4d30:	89 85       	ldd	r24, Y+9	; 0x09
    4d32:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d34:	20 e0       	ldi	r18, 0x00	; 0
    4d36:	30 e0       	ldi	r19, 0x00	; 0
    4d38:	40 e8       	ldi	r20, 0x80	; 128
    4d3a:	5f e3       	ldi	r21, 0x3F	; 63
    4d3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d40:	88 23       	and	r24, r24
    4d42:	2c f4       	brge	.+10     	; 0x4d4e <main+0x86>
		__ticks = 1;
    4d44:	81 e0       	ldi	r24, 0x01	; 1
    4d46:	90 e0       	ldi	r25, 0x00	; 0
    4d48:	9e 83       	std	Y+6, r25	; 0x06
    4d4a:	8d 83       	std	Y+5, r24	; 0x05
    4d4c:	3f c0       	rjmp	.+126    	; 0x4dcc <main+0x104>
	else if (__tmp > 65535)
    4d4e:	6f 81       	ldd	r22, Y+7	; 0x07
    4d50:	78 85       	ldd	r23, Y+8	; 0x08
    4d52:	89 85       	ldd	r24, Y+9	; 0x09
    4d54:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d56:	20 e0       	ldi	r18, 0x00	; 0
    4d58:	3f ef       	ldi	r19, 0xFF	; 255
    4d5a:	4f e7       	ldi	r20, 0x7F	; 127
    4d5c:	57 e4       	ldi	r21, 0x47	; 71
    4d5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d62:	18 16       	cp	r1, r24
    4d64:	4c f5       	brge	.+82     	; 0x4db8 <main+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d66:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d68:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d6e:	20 e0       	ldi	r18, 0x00	; 0
    4d70:	30 e0       	ldi	r19, 0x00	; 0
    4d72:	40 e2       	ldi	r20, 0x20	; 32
    4d74:	51 e4       	ldi	r21, 0x41	; 65
    4d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d7a:	dc 01       	movw	r26, r24
    4d7c:	cb 01       	movw	r24, r22
    4d7e:	bc 01       	movw	r22, r24
    4d80:	cd 01       	movw	r24, r26
    4d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d86:	dc 01       	movw	r26, r24
    4d88:	cb 01       	movw	r24, r22
    4d8a:	9e 83       	std	Y+6, r25	; 0x06
    4d8c:	8d 83       	std	Y+5, r24	; 0x05
    4d8e:	0f c0       	rjmp	.+30     	; 0x4dae <main+0xe6>
    4d90:	88 ec       	ldi	r24, 0xC8	; 200
    4d92:	90 e0       	ldi	r25, 0x00	; 0
    4d94:	9c 83       	std	Y+4, r25	; 0x04
    4d96:	8b 83       	std	Y+3, r24	; 0x03
    4d98:	8b 81       	ldd	r24, Y+3	; 0x03
    4d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    4d9c:	01 97       	sbiw	r24, 0x01	; 1
    4d9e:	f1 f7       	brne	.-4      	; 0x4d9c <main+0xd4>
    4da0:	9c 83       	std	Y+4, r25	; 0x04
    4da2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4da4:	8d 81       	ldd	r24, Y+5	; 0x05
    4da6:	9e 81       	ldd	r25, Y+6	; 0x06
    4da8:	01 97       	sbiw	r24, 0x01	; 1
    4daa:	9e 83       	std	Y+6, r25	; 0x06
    4dac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dae:	8d 81       	ldd	r24, Y+5	; 0x05
    4db0:	9e 81       	ldd	r25, Y+6	; 0x06
    4db2:	00 97       	sbiw	r24, 0x00	; 0
    4db4:	69 f7       	brne	.-38     	; 0x4d90 <main+0xc8>
    4db6:	14 c0       	rjmp	.+40     	; 0x4de0 <main+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4db8:	6f 81       	ldd	r22, Y+7	; 0x07
    4dba:	78 85       	ldd	r23, Y+8	; 0x08
    4dbc:	89 85       	ldd	r24, Y+9	; 0x09
    4dbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4dc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dc4:	dc 01       	movw	r26, r24
    4dc6:	cb 01       	movw	r24, r22
    4dc8:	9e 83       	std	Y+6, r25	; 0x06
    4dca:	8d 83       	std	Y+5, r24	; 0x05
    4dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    4dce:	9e 81       	ldd	r25, Y+6	; 0x06
    4dd0:	9a 83       	std	Y+2, r25	; 0x02
    4dd2:	89 83       	std	Y+1, r24	; 0x01
    4dd4:	89 81       	ldd	r24, Y+1	; 0x01
    4dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    4dd8:	01 97       	sbiw	r24, 0x01	; 1
    4dda:	f1 f7       	brne	.-4      	; 0x4dd8 <main+0x110>
    4ddc:	9a 83       	std	Y+2, r25	; 0x02
    4dde:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	SERVO_voidSetAngle(0);
    4de0:	80 e0       	ldi	r24, 0x00	; 0
    4de2:	90 e0       	ldi	r25, 0x00	; 0
    4de4:	0e 94 d6 16 	call	0x2dac	; 0x2dac <SERVO_voidSetAngle>
    4de8:	ff cf       	rjmp	.-2      	; 0x4de8 <main+0x120>

00004dea <NotLed>:

	while(1);
}

void NotLed()
{
    4dea:	df 93       	push	r29
    4dec:	cf 93       	push	r28
    4dee:	cd b7       	in	r28, 0x3d	; 61
    4df0:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter = 0;
	//static u8 Local_u16led = 0;
	Local_u16Counter++;
    4df2:	80 91 bd 01 	lds	r24, 0x01BD
    4df6:	90 91 be 01 	lds	r25, 0x01BE
    4dfa:	01 96       	adiw	r24, 0x01	; 1
    4dfc:	90 93 be 01 	sts	0x01BE, r25
    4e00:	80 93 bd 01 	sts	0x01BD, r24
	if(Local_u16Counter== 4000)
    4e04:	80 91 bd 01 	lds	r24, 0x01BD
    4e08:	90 91 be 01 	lds	r25, 0x01BE
    4e0c:	2f e0       	ldi	r18, 0x0F	; 15
    4e0e:	80 3a       	cpi	r24, 0xA0	; 160
    4e10:	92 07       	cpc	r25, r18
    4e12:	41 f4       	brne	.+16     	; 0x4e24 <NotLed+0x3a>
	{
		LED_u8TogLed(&led1);
    4e14:	8a e8       	ldi	r24, 0x8A	; 138
    4e16:	91 e0       	ldi	r25, 0x01	; 1
    4e18:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <LED_u8TogLed>
		Local_u16Counter=0;
    4e1c:	10 92 be 01 	sts	0x01BE, r1
    4e20:	10 92 bd 01 	sts	0x01BD, r1
		TOG_BIT(Local_u16led,0);
		DIO_u8SetPinValue(DIO_PORTA,DIO_PIN0,Local_u16led);
		Local_u16Counter=0;
		*/
	}
}
    4e24:	cf 91       	pop	r28
    4e26:	df 91       	pop	r29
    4e28:	08 95       	ret

00004e2a <SwPWM>:

void SwPWM()
{
    4e2a:	df 93       	push	r29
    4e2c:	cf 93       	push	r28
    4e2e:	cd b7       	in	r28, 0x3d	; 61
    4e30:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter = 0;
	Local_u16Counter++;
    4e32:	80 91 bf 01 	lds	r24, 0x01BF
    4e36:	90 91 c0 01 	lds	r25, 0x01C0
    4e3a:	01 96       	adiw	r24, 0x01	; 1
    4e3c:	90 93 c0 01 	sts	0x01C0, r25
    4e40:	80 93 bf 01 	sts	0x01BF, r24
	if(Local_u16Counter == 5)
    4e44:	80 91 bf 01 	lds	r24, 0x01BF
    4e48:	90 91 c0 01 	lds	r25, 0x01C0
    4e4c:	85 30       	cpi	r24, 0x05	; 5
    4e4e:	91 05       	cpc	r25, r1
    4e50:	31 f4       	brne	.+12     	; 0x4e5e <SwPWM+0x34>
		DIO_u8SetPinValue(DIO_PORTA,DIO_PIN0,DIO_PIN_LOW);
    4e52:	80 e0       	ldi	r24, 0x00	; 0
    4e54:	60 e0       	ldi	r22, 0x00	; 0
    4e56:	40 e0       	ldi	r20, 0x00	; 0
    4e58:	0e 94 27 10 	call	0x204e	; 0x204e <DIO_u8SetPinValue>
    4e5c:	34 c0       	rjmp	.+104    	; 0x4ec6 <SwPWM+0x9c>
	else if(Local_u16Counter == 10)
    4e5e:	80 91 bf 01 	lds	r24, 0x01BF
    4e62:	90 91 c0 01 	lds	r25, 0x01C0
    4e66:	8a 30       	cpi	r24, 0x0A	; 10
    4e68:	91 05       	cpc	r25, r1
    4e6a:	31 f4       	brne	.+12     	; 0x4e78 <SwPWM+0x4e>
		DIO_u8SetPinValue(DIO_PORTA,DIO_PIN1,DIO_PIN_LOW);
    4e6c:	80 e0       	ldi	r24, 0x00	; 0
    4e6e:	61 e0       	ldi	r22, 0x01	; 1
    4e70:	40 e0       	ldi	r20, 0x00	; 0
    4e72:	0e 94 27 10 	call	0x204e	; 0x204e <DIO_u8SetPinValue>
    4e76:	27 c0       	rjmp	.+78     	; 0x4ec6 <SwPWM+0x9c>
	else if(Local_u16Counter == 15)
    4e78:	80 91 bf 01 	lds	r24, 0x01BF
    4e7c:	90 91 c0 01 	lds	r25, 0x01C0
    4e80:	8f 30       	cpi	r24, 0x0F	; 15
    4e82:	91 05       	cpc	r25, r1
    4e84:	31 f4       	brne	.+12     	; 0x4e92 <SwPWM+0x68>
		DIO_u8SetPinValue(DIO_PORTA,DIO_PIN2,DIO_PIN_LOW);
    4e86:	80 e0       	ldi	r24, 0x00	; 0
    4e88:	62 e0       	ldi	r22, 0x02	; 2
    4e8a:	40 e0       	ldi	r20, 0x00	; 0
    4e8c:	0e 94 27 10 	call	0x204e	; 0x204e <DIO_u8SetPinValue>
    4e90:	1a c0       	rjmp	.+52     	; 0x4ec6 <SwPWM+0x9c>
	else if(Local_u16Counter == 20)
    4e92:	80 91 bf 01 	lds	r24, 0x01BF
    4e96:	90 91 c0 01 	lds	r25, 0x01C0
    4e9a:	84 31       	cpi	r24, 0x14	; 20
    4e9c:	91 05       	cpc	r25, r1
    4e9e:	99 f4       	brne	.+38     	; 0x4ec6 <SwPWM+0x9c>
	{
		DIO_u8SetPinValue(DIO_PORTA,DIO_PIN0,DIO_PIN_HIGH);
    4ea0:	80 e0       	ldi	r24, 0x00	; 0
    4ea2:	60 e0       	ldi	r22, 0x00	; 0
    4ea4:	41 e0       	ldi	r20, 0x01	; 1
    4ea6:	0e 94 27 10 	call	0x204e	; 0x204e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_PORTA,DIO_PIN1,DIO_PIN_HIGH);
    4eaa:	80 e0       	ldi	r24, 0x00	; 0
    4eac:	61 e0       	ldi	r22, 0x01	; 1
    4eae:	41 e0       	ldi	r20, 0x01	; 1
    4eb0:	0e 94 27 10 	call	0x204e	; 0x204e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_PORTA,DIO_PIN2,DIO_PIN_HIGH);
    4eb4:	80 e0       	ldi	r24, 0x00	; 0
    4eb6:	62 e0       	ldi	r22, 0x02	; 2
    4eb8:	41 e0       	ldi	r20, 0x01	; 1
    4eba:	0e 94 27 10 	call	0x204e	; 0x204e <DIO_u8SetPinValue>
		Local_u16Counter = 0;
    4ebe:	10 92 c0 01 	sts	0x01C0, r1
    4ec2:	10 92 bf 01 	sts	0x01BF, r1
	}
}
    4ec6:	cf 91       	pop	r28
    4ec8:	df 91       	pop	r29
    4eca:	08 95       	ret

00004ecc <__mulsi3>:
    4ecc:	62 9f       	mul	r22, r18
    4ece:	d0 01       	movw	r26, r0
    4ed0:	73 9f       	mul	r23, r19
    4ed2:	f0 01       	movw	r30, r0
    4ed4:	82 9f       	mul	r24, r18
    4ed6:	e0 0d       	add	r30, r0
    4ed8:	f1 1d       	adc	r31, r1
    4eda:	64 9f       	mul	r22, r20
    4edc:	e0 0d       	add	r30, r0
    4ede:	f1 1d       	adc	r31, r1
    4ee0:	92 9f       	mul	r25, r18
    4ee2:	f0 0d       	add	r31, r0
    4ee4:	83 9f       	mul	r24, r19
    4ee6:	f0 0d       	add	r31, r0
    4ee8:	74 9f       	mul	r23, r20
    4eea:	f0 0d       	add	r31, r0
    4eec:	65 9f       	mul	r22, r21
    4eee:	f0 0d       	add	r31, r0
    4ef0:	99 27       	eor	r25, r25
    4ef2:	72 9f       	mul	r23, r18
    4ef4:	b0 0d       	add	r27, r0
    4ef6:	e1 1d       	adc	r30, r1
    4ef8:	f9 1f       	adc	r31, r25
    4efa:	63 9f       	mul	r22, r19
    4efc:	b0 0d       	add	r27, r0
    4efe:	e1 1d       	adc	r30, r1
    4f00:	f9 1f       	adc	r31, r25
    4f02:	bd 01       	movw	r22, r26
    4f04:	cf 01       	movw	r24, r30
    4f06:	11 24       	eor	r1, r1
    4f08:	08 95       	ret

00004f0a <__udivmodhi4>:
    4f0a:	aa 1b       	sub	r26, r26
    4f0c:	bb 1b       	sub	r27, r27
    4f0e:	51 e1       	ldi	r21, 0x11	; 17
    4f10:	07 c0       	rjmp	.+14     	; 0x4f20 <__udivmodhi4_ep>

00004f12 <__udivmodhi4_loop>:
    4f12:	aa 1f       	adc	r26, r26
    4f14:	bb 1f       	adc	r27, r27
    4f16:	a6 17       	cp	r26, r22
    4f18:	b7 07       	cpc	r27, r23
    4f1a:	10 f0       	brcs	.+4      	; 0x4f20 <__udivmodhi4_ep>
    4f1c:	a6 1b       	sub	r26, r22
    4f1e:	b7 0b       	sbc	r27, r23

00004f20 <__udivmodhi4_ep>:
    4f20:	88 1f       	adc	r24, r24
    4f22:	99 1f       	adc	r25, r25
    4f24:	5a 95       	dec	r21
    4f26:	a9 f7       	brne	.-22     	; 0x4f12 <__udivmodhi4_loop>
    4f28:	80 95       	com	r24
    4f2a:	90 95       	com	r25
    4f2c:	bc 01       	movw	r22, r24
    4f2e:	cd 01       	movw	r24, r26
    4f30:	08 95       	ret

00004f32 <__udivmodsi4>:
    4f32:	a1 e2       	ldi	r26, 0x21	; 33
    4f34:	1a 2e       	mov	r1, r26
    4f36:	aa 1b       	sub	r26, r26
    4f38:	bb 1b       	sub	r27, r27
    4f3a:	fd 01       	movw	r30, r26
    4f3c:	0d c0       	rjmp	.+26     	; 0x4f58 <__udivmodsi4_ep>

00004f3e <__udivmodsi4_loop>:
    4f3e:	aa 1f       	adc	r26, r26
    4f40:	bb 1f       	adc	r27, r27
    4f42:	ee 1f       	adc	r30, r30
    4f44:	ff 1f       	adc	r31, r31
    4f46:	a2 17       	cp	r26, r18
    4f48:	b3 07       	cpc	r27, r19
    4f4a:	e4 07       	cpc	r30, r20
    4f4c:	f5 07       	cpc	r31, r21
    4f4e:	20 f0       	brcs	.+8      	; 0x4f58 <__udivmodsi4_ep>
    4f50:	a2 1b       	sub	r26, r18
    4f52:	b3 0b       	sbc	r27, r19
    4f54:	e4 0b       	sbc	r30, r20
    4f56:	f5 0b       	sbc	r31, r21

00004f58 <__udivmodsi4_ep>:
    4f58:	66 1f       	adc	r22, r22
    4f5a:	77 1f       	adc	r23, r23
    4f5c:	88 1f       	adc	r24, r24
    4f5e:	99 1f       	adc	r25, r25
    4f60:	1a 94       	dec	r1
    4f62:	69 f7       	brne	.-38     	; 0x4f3e <__udivmodsi4_loop>
    4f64:	60 95       	com	r22
    4f66:	70 95       	com	r23
    4f68:	80 95       	com	r24
    4f6a:	90 95       	com	r25
    4f6c:	9b 01       	movw	r18, r22
    4f6e:	ac 01       	movw	r20, r24
    4f70:	bd 01       	movw	r22, r26
    4f72:	cf 01       	movw	r24, r30
    4f74:	08 95       	ret

00004f76 <__prologue_saves__>:
    4f76:	2f 92       	push	r2
    4f78:	3f 92       	push	r3
    4f7a:	4f 92       	push	r4
    4f7c:	5f 92       	push	r5
    4f7e:	6f 92       	push	r6
    4f80:	7f 92       	push	r7
    4f82:	8f 92       	push	r8
    4f84:	9f 92       	push	r9
    4f86:	af 92       	push	r10
    4f88:	bf 92       	push	r11
    4f8a:	cf 92       	push	r12
    4f8c:	df 92       	push	r13
    4f8e:	ef 92       	push	r14
    4f90:	ff 92       	push	r15
    4f92:	0f 93       	push	r16
    4f94:	1f 93       	push	r17
    4f96:	cf 93       	push	r28
    4f98:	df 93       	push	r29
    4f9a:	cd b7       	in	r28, 0x3d	; 61
    4f9c:	de b7       	in	r29, 0x3e	; 62
    4f9e:	ca 1b       	sub	r28, r26
    4fa0:	db 0b       	sbc	r29, r27
    4fa2:	0f b6       	in	r0, 0x3f	; 63
    4fa4:	f8 94       	cli
    4fa6:	de bf       	out	0x3e, r29	; 62
    4fa8:	0f be       	out	0x3f, r0	; 63
    4faa:	cd bf       	out	0x3d, r28	; 61
    4fac:	09 94       	ijmp

00004fae <__epilogue_restores__>:
    4fae:	2a 88       	ldd	r2, Y+18	; 0x12
    4fb0:	39 88       	ldd	r3, Y+17	; 0x11
    4fb2:	48 88       	ldd	r4, Y+16	; 0x10
    4fb4:	5f 84       	ldd	r5, Y+15	; 0x0f
    4fb6:	6e 84       	ldd	r6, Y+14	; 0x0e
    4fb8:	7d 84       	ldd	r7, Y+13	; 0x0d
    4fba:	8c 84       	ldd	r8, Y+12	; 0x0c
    4fbc:	9b 84       	ldd	r9, Y+11	; 0x0b
    4fbe:	aa 84       	ldd	r10, Y+10	; 0x0a
    4fc0:	b9 84       	ldd	r11, Y+9	; 0x09
    4fc2:	c8 84       	ldd	r12, Y+8	; 0x08
    4fc4:	df 80       	ldd	r13, Y+7	; 0x07
    4fc6:	ee 80       	ldd	r14, Y+6	; 0x06
    4fc8:	fd 80       	ldd	r15, Y+5	; 0x05
    4fca:	0c 81       	ldd	r16, Y+4	; 0x04
    4fcc:	1b 81       	ldd	r17, Y+3	; 0x03
    4fce:	aa 81       	ldd	r26, Y+2	; 0x02
    4fd0:	b9 81       	ldd	r27, Y+1	; 0x01
    4fd2:	ce 0f       	add	r28, r30
    4fd4:	d1 1d       	adc	r29, r1
    4fd6:	0f b6       	in	r0, 0x3f	; 63
    4fd8:	f8 94       	cli
    4fda:	de bf       	out	0x3e, r29	; 62
    4fdc:	0f be       	out	0x3f, r0	; 63
    4fde:	cd bf       	out	0x3d, r28	; 61
    4fe0:	ed 01       	movw	r28, r26
    4fe2:	08 95       	ret

00004fe4 <_exit>:
    4fe4:	f8 94       	cli

00004fe6 <__stop_program>:
    4fe6:	ff cf       	rjmp	.-2      	; 0x4fe6 <__stop_program>
