
TIMER3_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000079ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002a8  00800060  000079ee  00007a82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002d  00800308  00800308  00007d2a  2**0
                  ALLOC
  3 .stab         00006f78  00000000  00000000  00007d2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001f3a  00000000  00000000  0000eca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00010bde  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00010d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00010f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0001337b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00014701  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000158d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00015a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00015d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000166fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__vector_1>
       8:	0c 94 15 15 	jmp	0x2a2a	; 0x2a2a <__vector_2>
       c:	0c 94 42 15 	jmp	0x2a84	; 0x2a84 <__vector_3>
      10:	0c 94 a8 27 	jmp	0x4f50	; 0x4f50 <__vector_4>
      14:	0c 94 7b 27 	jmp	0x4ef6	; 0x4ef6 <__vector_5>
      18:	0c 94 4e 27 	jmp	0x4e9c	; 0x4e9c <__vector_6>
      1c:	0c 94 c7 26 	jmp	0x4d8e	; 0x4d8e <__vector_7>
      20:	0c 94 f4 26 	jmp	0x4de8	; 0x4de8 <__vector_8>
      24:	0c 94 21 27 	jmp	0x4e42	; 0x4e42 <__vector_9>
      28:	0c 94 6d 26 	jmp	0x4cda	; 0x4cda <__vector_10>
      2c:	0c 94 9a 26 	jmp	0x4d34	; 0x4d34 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 c9 08 	jmp	0x1192	; 0x1192 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ee       	ldi	r30, 0xEE	; 238
      68:	f9 e7       	ldi	r31, 0x79	; 121
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 30       	cpi	r26, 0x08	; 8
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a8 e0       	ldi	r26, 0x08	; 8
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 33       	cpi	r26, 0x35	; 53
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 52 28 	call	0x50a4	; 0x50a4 <main>
      8a:	0c 94 f5 3c 	jmp	0x79ea	; 0x79ea <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 be 3c 	jmp	0x797c	; 0x797c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 ec       	ldi	r26, 0xC7	; 199
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 da 3c 	jmp	0x79b4	; 0x79b4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ca 3c 	jmp	0x7994	; 0x7994 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e6 3c 	jmp	0x79cc	; 0x79cc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ca 3c 	jmp	0x7994	; 0x7994 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e6 3c 	jmp	0x79cc	; 0x79cc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 be 3c 	jmp	0x797c	; 0x797c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 ec       	ldi	r24, 0xC7	; 199
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 da 3c 	jmp	0x79b4	; 0x79b4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c6 3c 	jmp	0x798c	; 0x798c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	67 ec       	ldi	r22, 0xC7	; 199
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e2 3c 	jmp	0x79c4	; 0x79c4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ca 3c 	jmp	0x7994	; 0x7994 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e6 3c 	jmp	0x79cc	; 0x79cc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ca 3c 	jmp	0x7994	; 0x7994 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e6 3c 	jmp	0x79cc	; 0x79cc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ca 3c 	jmp	0x7994	; 0x7994 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e6 3c 	jmp	0x79cc	; 0x79cc <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ce 3c 	jmp	0x799c	; 0x799c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ea 3c 	jmp	0x79d4	; 0x79d4 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 c6 3c 	jmp	0x798c	; 0x798c <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 e2 3c 	jmp	0x79c4	; 0x79c4 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e1 53       	subi	r30, 0x31	; 49
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_voidInit>:
static u8 * ADC_pu8ChannelNum = NULL;
static u8 ADC_u8ChannelSize ;
static void (*Global_vChainCallBackFunc)() = NULL;
static u16 * ADC_pu16ChannelReading = NULL;
void ADC_voidInit()
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	ADMUX &= MASK_AREF;
     e36:	a7 e2       	ldi	r26, 0x27	; 39
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e7 e2       	ldi	r30, 0x27	; 39
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	8f 73       	andi	r24, 0x3F	; 63
     e42:	8c 93       	st	X, r24
	ADMUX |= ADC_REF_VOLT<<ADMUX_REFS0;
     e44:	a7 e2       	ldi	r26, 0x27	; 39
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e7 e2       	ldi	r30, 0x27	; 39
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	80 64       	ori	r24, 0x40	; 64
     e50:	8c 93       	st	X, r24
#if ADC_ADJUST_BIT == LEFT_ADJUST
	SET_BIT(ADMUX,ADMUX_ADLAR);
     e52:	a7 e2       	ldi	r26, 0x27	; 39
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e7 e2       	ldi	r30, 0x27	; 39
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	80 62       	ori	r24, 0x20	; 32
     e5e:	8c 93       	st	X, r24
#elif ADC_ADJUST_BIT == RIGHT_ADJUST
	CLR_BIT(ADMUX,ADMUX_ADLAR);
#else
#error "Wrong in choosing configuration of ADC_ADJUST_BIT "
#endif
	ADCSRA &= MASK_CLK_RATE;
     e60:	a6 e2       	ldi	r26, 0x26	; 38
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e6 e2       	ldi	r30, 0x26	; 38
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	88 7f       	andi	r24, 0xF8	; 248
     e6c:	8c 93       	st	X, r24
	ADCSRA |= ADC_CLK_RATE<<ADCSRA_ADPS0;
     e6e:	a6 e2       	ldi	r26, 0x26	; 38
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e6 e2       	ldi	r30, 0x26	; 38
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	86 60       	ori	r24, 0x06	; 6
     e7a:	8c 93       	st	X, r24
	SFIOR &= MASK_AUTO_TRIGGER;
	SFIOR |= ADC_AUTO_TRIGGER_SRC << SFIOR_ADTS0;

	SET_BIT(ADCSRA,ADCSRA_ADSC);
#elif ADC_AUTO_TRIGGER_MODE == DISABLE
	CLR_BIT(ADCSRA,ADCSRA_ADATE);
     e7c:	a6 e2       	ldi	r26, 0x26	; 38
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e6 e2       	ldi	r30, 0x26	; 38
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	8f 7d       	andi	r24, 0xDF	; 223
     e88:	8c 93       	st	X, r24
#else
#error "Wrong in choosing configuration of ADC_AUTO_TRIGGER_MODE "
#endif
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     e8a:	a6 e2       	ldi	r26, 0x26	; 38
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e6 e2       	ldi	r30, 0x26	; 38
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	80 68       	ori	r24, 0x80	; 128
     e96:	8c 93       	st	X, r24
}
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <ADC_u8StartSingleConvPoll>:
// Synch applay Busy Flag For reenterrant
u8 ADC_u8StartSingleConvPoll(u8 Copy_u8Channel,u16 *Copy_pu16Read)
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	28 97       	sbiw	r28, 0x08	; 8
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	f8 94       	cli
     eac:	de bf       	out	0x3e, r29	; 62
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	cd bf       	out	0x3d, r28	; 61
     eb2:	8e 83       	std	Y+6, r24	; 0x06
     eb4:	78 87       	std	Y+8, r23	; 0x08
     eb6:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = OK;
     eb8:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Counter = 0;
     eba:	19 82       	std	Y+1, r1	; 0x01
     ebc:	1a 82       	std	Y+2, r1	; 0x02
     ebe:	1b 82       	std	Y+3, r1	; 0x03
     ec0:	1c 82       	std	Y+4, r1	; 0x04
	if(Global_u8BusyFlag==IDLE)
     ec2:	80 91 08 03 	lds	r24, 0x0308
     ec6:	88 23       	and	r24, r24
     ec8:	09 f0       	breq	.+2      	; 0xecc <ADC_u8StartSingleConvPoll+0x2e>
     eca:	6e c0       	rjmp	.+220    	; 0xfa8 <ADC_u8StartSingleConvPoll+0x10a>
	{
		Global_u8BusyFlag = BUSY;
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	80 93 08 03 	sts	0x0308, r24
		if(Copy_pu16Read != NULL)
     ed2:	8f 81       	ldd	r24, Y+7	; 0x07
     ed4:	98 85       	ldd	r25, Y+8	; 0x08
     ed6:	00 97       	sbiw	r24, 0x00	; 0
     ed8:	09 f4       	brne	.+2      	; 0xedc <ADC_u8StartSingleConvPoll+0x3e>
     eda:	63 c0       	rjmp	.+198    	; 0xfa2 <ADC_u8StartSingleConvPoll+0x104>
		{
				if(Copy_u8Channel<=MAX_OPTION_CHANNEL)
     edc:	8e 81       	ldd	r24, Y+6	; 0x06
     ede:	80 32       	cpi	r24, 0x20	; 32
     ee0:	08 f0       	brcs	.+2      	; 0xee4 <ADC_u8StartSingleConvPoll+0x46>
     ee2:	5c c0       	rjmp	.+184    	; 0xf9c <ADC_u8StartSingleConvPoll+0xfe>
				{
					ADMUX &= MASK_CHANNEL;
     ee4:	a7 e2       	ldi	r26, 0x27	; 39
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e7 e2       	ldi	r30, 0x27	; 39
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	80 7e       	andi	r24, 0xE0	; 224
     ef0:	8c 93       	st	X, r24
					ADMUX |= Copy_u8Channel<<ADMUX_MUX0;
     ef2:	a7 e2       	ldi	r26, 0x27	; 39
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e7 e2       	ldi	r30, 0x27	; 39
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	90 81       	ld	r25, Z
     efc:	8e 81       	ldd	r24, Y+6	; 0x06
     efe:	89 2b       	or	r24, r25
     f00:	8c 93       	st	X, r24
					SET_BIT(ADCSRA,ADCSRA_ADSC);
     f02:	a6 e2       	ldi	r26, 0x26	; 38
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e6 e2       	ldi	r30, 0x26	; 38
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	80 64       	ori	r24, 0x40	; 64
     f0e:	8c 93       	st	X, r24
     f10:	0b c0       	rjmp	.+22     	; 0xf28 <ADC_u8StartSingleConvPoll+0x8a>
					while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0)&&(Local_u32Counter<ADC_U32_TIMEOUT))
					{
						Local_u32Counter++;
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	9a 81       	ldd	r25, Y+2	; 0x02
     f16:	ab 81       	ldd	r26, Y+3	; 0x03
     f18:	bc 81       	ldd	r27, Y+4	; 0x04
     f1a:	01 96       	adiw	r24, 0x01	; 1
     f1c:	a1 1d       	adc	r26, r1
     f1e:	b1 1d       	adc	r27, r1
     f20:	89 83       	std	Y+1, r24	; 0x01
     f22:	9a 83       	std	Y+2, r25	; 0x02
     f24:	ab 83       	std	Y+3, r26	; 0x03
     f26:	bc 83       	std	Y+4, r27	; 0x04
				if(Copy_u8Channel<=MAX_OPTION_CHANNEL)
				{
					ADMUX &= MASK_CHANNEL;
					ADMUX |= Copy_u8Channel<<ADMUX_MUX0;
					SET_BIT(ADCSRA,ADCSRA_ADSC);
					while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0)&&(Local_u32Counter<ADC_U32_TIMEOUT))
     f28:	e6 e2       	ldi	r30, 0x26	; 38
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	82 95       	swap	r24
     f30:	8f 70       	andi	r24, 0x0F	; 15
     f32:	88 2f       	mov	r24, r24
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	81 70       	andi	r24, 0x01	; 1
     f38:	90 70       	andi	r25, 0x00	; 0
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	61 f4       	brne	.+24     	; 0xf56 <ADC_u8StartSingleConvPoll+0xb8>
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	9a 81       	ldd	r25, Y+2	; 0x02
     f42:	ab 81       	ldd	r26, Y+3	; 0x03
     f44:	bc 81       	ldd	r27, Y+4	; 0x04
     f46:	80 35       	cpi	r24, 0x50	; 80
     f48:	23 ec       	ldi	r18, 0xC3	; 195
     f4a:	92 07       	cpc	r25, r18
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	a2 07       	cpc	r26, r18
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	b2 07       	cpc	r27, r18
     f54:	f0 f2       	brcs	.-68     	; 0xf12 <ADC_u8StartSingleConvPoll+0x74>
					{
						Local_u32Counter++;
					}
					if(Local_u32Counter==ADC_U32_TIMEOUT)
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	9a 81       	ldd	r25, Y+2	; 0x02
     f5a:	ab 81       	ldd	r26, Y+3	; 0x03
     f5c:	bc 81       	ldd	r27, Y+4	; 0x04
     f5e:	80 35       	cpi	r24, 0x50	; 80
     f60:	23 ec       	ldi	r18, 0xC3	; 195
     f62:	92 07       	cpc	r25, r18
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	a2 07       	cpc	r26, r18
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	b2 07       	cpc	r27, r18
     f6c:	19 f4       	brne	.+6      	; 0xf74 <ADC_u8StartSingleConvPoll+0xd6>
					{
						Local_u8ErrorState = NOTOK;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	8d 83       	std	Y+5, r24	; 0x05
     f72:	1c c0       	rjmp	.+56     	; 0xfac <ADC_u8StartSingleConvPoll+0x10e>
					}
					else{

						CLR_BIT(ADCSRA,ADCSRA_ADIF);
     f74:	a6 e2       	ldi	r26, 0x26	; 38
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e6 e2       	ldi	r30, 0x26	; 38
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	8f 7e       	andi	r24, 0xEF	; 239
     f80:	8c 93       	st	X, r24
						if(ADC_ADJUST_BIT == LEFT_ADJUST)
							*Copy_pu16Read = ADC_REG>>8;
     f82:	e4 e2       	ldi	r30, 0x24	; 36
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	91 81       	ldd	r25, Z+1	; 0x01
     f8a:	89 2f       	mov	r24, r25
     f8c:	99 27       	eor	r25, r25
     f8e:	ef 81       	ldd	r30, Y+7	; 0x07
     f90:	f8 85       	ldd	r31, Y+8	; 0x08
     f92:	91 83       	std	Z+1, r25	; 0x01
     f94:	80 83       	st	Z, r24
						else if(ADC_ADJUST_BIT == RIGHT_ADJUST)
							*Copy_pu16Read = ADC_REG;
						Global_u8BusyFlag = IDLE;
     f96:	10 92 08 03 	sts	0x0308, r1
     f9a:	08 c0       	rjmp	.+16     	; 0xfac <ADC_u8StartSingleConvPoll+0x10e>
					}
				}
				else
					Local_u8ErrorState = NOTOK;
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	8d 83       	std	Y+5, r24	; 0x05
     fa0:	05 c0       	rjmp	.+10     	; 0xfac <ADC_u8StartSingleConvPoll+0x10e>
			}
			else
				Local_u8ErrorState = NULL_POINTER;
     fa2:	82 e0       	ldi	r24, 0x02	; 2
     fa4:	8d 83       	std	Y+5, r24	; 0x05
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <ADC_u8StartSingleConvPoll+0x10e>
	}
	else
		Local_u8ErrorState = BUSY_FUNC;
     fa8:	83 e0       	ldi	r24, 0x03	; 3
     faa:	8d 83       	std	Y+5, r24	; 0x05
	return Local_u8ErrorState;
     fac:	8d 81       	ldd	r24, Y+5	; 0x05
}
     fae:	28 96       	adiw	r28, 0x08	; 8
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	08 95       	ret

00000fc0 <ADC_u8StartSingleConvInt>:

u8 ADC_u8StartSingleConvInt(u8 Copy_u8Channel,u16 *Copy_pu16Read,void (*Notifiction)())
{
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	00 d0       	rcall	.+0      	; 0xfc6 <ADC_u8StartSingleConvInt+0x6>
     fc6:	00 d0       	rcall	.+0      	; 0xfc8 <ADC_u8StartSingleConvInt+0x8>
     fc8:	00 d0       	rcall	.+0      	; 0xfca <ADC_u8StartSingleConvInt+0xa>
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	8a 83       	std	Y+2, r24	; 0x02
     fd0:	7c 83       	std	Y+4, r23	; 0x04
     fd2:	6b 83       	std	Y+3, r22	; 0x03
     fd4:	5e 83       	std	Y+6, r21	; 0x06
     fd6:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = OK;
     fd8:	19 82       	std	Y+1, r1	; 0x01
	if(Global_u8BusyFlag==IDLE)
     fda:	80 91 08 03 	lds	r24, 0x0308
     fde:	88 23       	and	r24, r24
     fe0:	09 f0       	breq	.+2      	; 0xfe4 <ADC_u8StartSingleConvInt+0x24>
     fe2:	40 c0       	rjmp	.+128    	; 0x1064 <ADC_u8StartSingleConvInt+0xa4>
	{
		Global_u8BusyFlag = BUSY;
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	80 93 08 03 	sts	0x0308, r24
		ADC_u8DirectionOfConvFunc = SINGLE_CONVERISION;
     fea:	10 92 0d 03 	sts	0x030D, r1
		if((Copy_pu16Read != NULL)||(Notifiction != NULL))
     fee:	8b 81       	ldd	r24, Y+3	; 0x03
     ff0:	9c 81       	ldd	r25, Y+4	; 0x04
     ff2:	00 97       	sbiw	r24, 0x00	; 0
     ff4:	21 f4       	brne	.+8      	; 0xffe <ADC_u8StartSingleConvInt+0x3e>
     ff6:	8d 81       	ldd	r24, Y+5	; 0x05
     ff8:	9e 81       	ldd	r25, Y+6	; 0x06
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	81 f1       	breq	.+96     	; 0x105e <ADC_u8StartSingleConvInt+0x9e>
		{

				if(Copy_u8Channel<=MAX_OPTION_CHANNEL)
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	80 32       	cpi	r24, 0x20	; 32
    1002:	50 f5       	brcc	.+84     	; 0x1058 <ADC_u8StartSingleConvInt+0x98>
				{
					ADMUX &= MASK_CHANNEL;
    1004:	a7 e2       	ldi	r26, 0x27	; 39
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e7 e2       	ldi	r30, 0x27	; 39
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	80 7e       	andi	r24, 0xE0	; 224
    1010:	8c 93       	st	X, r24
					ADMUX |= Copy_u8Channel<<ADMUX_MUX0;
    1012:	a7 e2       	ldi	r26, 0x27	; 39
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e7 e2       	ldi	r30, 0x27	; 39
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	90 81       	ld	r25, Z
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	89 2b       	or	r24, r25
    1020:	8c 93       	st	X, r24
					Global_vCallBackFunc = Notifiction;
    1022:	8d 81       	ldd	r24, Y+5	; 0x05
    1024:	9e 81       	ldd	r25, Y+6	; 0x06
    1026:	90 93 0a 03 	sts	0x030A, r25
    102a:	80 93 09 03 	sts	0x0309, r24
					Global_pu8Read = Copy_pu16Read;
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	9c 81       	ldd	r25, Y+4	; 0x04
    1032:	90 93 0c 03 	sts	0x030C, r25
    1036:	80 93 0b 03 	sts	0x030B, r24
					SET_BIT(ADCSRA,ADCSRA_ADSC);
    103a:	a6 e2       	ldi	r26, 0x26	; 38
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e6 e2       	ldi	r30, 0x26	; 38
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	80 64       	ori	r24, 0x40	; 64
    1046:	8c 93       	st	X, r24
					SET_BIT(ADCSRA,ADCSRA_ADIE);
    1048:	a6 e2       	ldi	r26, 0x26	; 38
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e6 e2       	ldi	r30, 0x26	; 38
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	88 60       	ori	r24, 0x08	; 8
    1054:	8c 93       	st	X, r24
    1056:	08 c0       	rjmp	.+16     	; 0x1068 <ADC_u8StartSingleConvInt+0xa8>
				}
				else
					Local_u8ErrorState = NOTOK;
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	89 83       	std	Y+1, r24	; 0x01
    105c:	05 c0       	rjmp	.+10     	; 0x1068 <ADC_u8StartSingleConvInt+0xa8>
		}
		else
			Local_u8ErrorState = NULL_POINTER;
    105e:	82 e0       	ldi	r24, 0x02	; 2
    1060:	89 83       	std	Y+1, r24	; 0x01
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <ADC_u8StartSingleConvInt+0xa8>
	}
	else
		Local_u8ErrorState = BUSY_FUNC;
    1064:	83 e0       	ldi	r24, 0x03	; 3
    1066:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    1068:	89 81       	ldd	r24, Y+1	; 0x01
}
    106a:	26 96       	adiw	r28, 0x06	; 6
    106c:	0f b6       	in	r0, 0x3f	; 63
    106e:	f8 94       	cli
    1070:	de bf       	out	0x3e, r29	; 62
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	cd bf       	out	0x3d, r28	; 61
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	08 95       	ret

0000107c <ADC_u8StartChainConvAsynch>:
u8 ADC_u8StartChainConvAsynch(ADC_Chain *Copy_Chain)
{
    107c:	df 93       	push	r29
    107e:	cf 93       	push	r28
    1080:	00 d0       	rcall	.+0      	; 0x1082 <ADC_u8StartChainConvAsynch+0x6>
    1082:	0f 92       	push	r0
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	9b 83       	std	Y+3, r25	; 0x03
    108a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    108c:	19 82       	std	Y+1, r1	; 0x01
	if(Global_u8BusyFlag==IDLE)
    108e:	80 91 08 03 	lds	r24, 0x0308
    1092:	88 23       	and	r24, r24
    1094:	09 f0       	breq	.+2      	; 0x1098 <ADC_u8StartChainConvAsynch+0x1c>
    1096:	74 c0       	rjmp	.+232    	; 0x1180 <ADC_u8StartChainConvAsynch+0x104>
	{
		Global_u8BusyFlag = BUSY;
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	80 93 08 03 	sts	0x0308, r24
		ADC_u8DirectionOfConvFunc = CHAIN_CONVERISION;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	80 93 0d 03 	sts	0x030D, r24
		if((Copy_Chain->ChainId != NULL)||(Copy_Chain->Notifction != NULL)||(Copy_Chain->Result != NULL))
    10a4:	ea 81       	ldd	r30, Y+2	; 0x02
    10a6:	fb 81       	ldd	r31, Y+3	; 0x03
    10a8:	80 81       	ld	r24, Z
    10aa:	91 81       	ldd	r25, Z+1	; 0x01
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	69 f4       	brne	.+26     	; 0x10ca <ADC_u8StartChainConvAsynch+0x4e>
    10b0:	ea 81       	ldd	r30, Y+2	; 0x02
    10b2:	fb 81       	ldd	r31, Y+3	; 0x03
    10b4:	83 81       	ldd	r24, Z+3	; 0x03
    10b6:	94 81       	ldd	r25, Z+4	; 0x04
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	39 f4       	brne	.+14     	; 0x10ca <ADC_u8StartChainConvAsynch+0x4e>
    10bc:	ea 81       	ldd	r30, Y+2	; 0x02
    10be:	fb 81       	ldd	r31, Y+3	; 0x03
    10c0:	85 81       	ldd	r24, Z+5	; 0x05
    10c2:	96 81       	ldd	r25, Z+6	; 0x06
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	09 f4       	brne	.+2      	; 0x10ca <ADC_u8StartChainConvAsynch+0x4e>
    10c8:	58 c0       	rjmp	.+176    	; 0x117a <ADC_u8StartChainConvAsynch+0xfe>
		{
			if(Copy_Chain->ChainId[ADC_u8ChainIndex]<=MAX_OPTION_CHANNEL)
    10ca:	ea 81       	ldd	r30, Y+2	; 0x02
    10cc:	fb 81       	ldd	r31, Y+3	; 0x03
    10ce:	20 81       	ld	r18, Z
    10d0:	31 81       	ldd	r19, Z+1	; 0x01
    10d2:	80 91 0e 03 	lds	r24, 0x030E
    10d6:	88 2f       	mov	r24, r24
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	f9 01       	movw	r30, r18
    10dc:	e8 0f       	add	r30, r24
    10de:	f9 1f       	adc	r31, r25
    10e0:	80 81       	ld	r24, Z
    10e2:	80 32       	cpi	r24, 0x20	; 32
    10e4:	08 f0       	brcs	.+2      	; 0x10e8 <ADC_u8StartChainConvAsynch+0x6c>
    10e6:	46 c0       	rjmp	.+140    	; 0x1174 <ADC_u8StartChainConvAsynch+0xf8>
			{
				ADMUX &= MASK_CHANNEL;
    10e8:	a7 e2       	ldi	r26, 0x27	; 39
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e7 e2       	ldi	r30, 0x27	; 39
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	80 7e       	andi	r24, 0xE0	; 224
    10f4:	8c 93       	st	X, r24
				ADMUX |= Copy_Chain->ChainId[ADC_u8ChainIndex]<<ADMUX_MUX0;
    10f6:	a7 e2       	ldi	r26, 0x27	; 39
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e7 e2       	ldi	r30, 0x27	; 39
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	40 81       	ld	r20, Z
    1100:	ea 81       	ldd	r30, Y+2	; 0x02
    1102:	fb 81       	ldd	r31, Y+3	; 0x03
    1104:	20 81       	ld	r18, Z
    1106:	31 81       	ldd	r19, Z+1	; 0x01
    1108:	80 91 0e 03 	lds	r24, 0x030E
    110c:	88 2f       	mov	r24, r24
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	f9 01       	movw	r30, r18
    1112:	e8 0f       	add	r30, r24
    1114:	f9 1f       	adc	r31, r25
    1116:	80 81       	ld	r24, Z
    1118:	84 2b       	or	r24, r20
    111a:	8c 93       	st	X, r24
				ADC_pu8ChannelNum = Copy_Chain->ChainId;
    111c:	ea 81       	ldd	r30, Y+2	; 0x02
    111e:	fb 81       	ldd	r31, Y+3	; 0x03
    1120:	80 81       	ld	r24, Z
    1122:	91 81       	ldd	r25, Z+1	; 0x01
    1124:	90 93 10 03 	sts	0x0310, r25
    1128:	80 93 0f 03 	sts	0x030F, r24
				Global_vChainCallBackFunc = Copy_Chain->Notifction;
    112c:	ea 81       	ldd	r30, Y+2	; 0x02
    112e:	fb 81       	ldd	r31, Y+3	; 0x03
    1130:	83 81       	ldd	r24, Z+3	; 0x03
    1132:	94 81       	ldd	r25, Z+4	; 0x04
    1134:	90 93 12 03 	sts	0x0312, r25
    1138:	80 93 11 03 	sts	0x0311, r24
				ADC_pu16ChannelReading = Copy_Chain->Result;
    113c:	ea 81       	ldd	r30, Y+2	; 0x02
    113e:	fb 81       	ldd	r31, Y+3	; 0x03
    1140:	85 81       	ldd	r24, Z+5	; 0x05
    1142:	96 81       	ldd	r25, Z+6	; 0x06
    1144:	90 93 14 03 	sts	0x0314, r25
    1148:	80 93 13 03 	sts	0x0313, r24
				ADC_u8ChannelSize = Copy_Chain->ChannelSize;
    114c:	ea 81       	ldd	r30, Y+2	; 0x02
    114e:	fb 81       	ldd	r31, Y+3	; 0x03
    1150:	82 81       	ldd	r24, Z+2	; 0x02
    1152:	80 93 15 03 	sts	0x0315, r24
				SET_BIT(ADCSRA,ADCSRA_ADSC);
    1156:	a6 e2       	ldi	r26, 0x26	; 38
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e6 e2       	ldi	r30, 0x26	; 38
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	80 64       	ori	r24, 0x40	; 64
    1162:	8c 93       	st	X, r24
				SET_BIT(ADCSRA,ADCSRA_ADIE);
    1164:	a6 e2       	ldi	r26, 0x26	; 38
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e6 e2       	ldi	r30, 0x26	; 38
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	88 60       	ori	r24, 0x08	; 8
    1170:	8c 93       	st	X, r24
    1172:	08 c0       	rjmp	.+16     	; 0x1184 <ADC_u8StartChainConvAsynch+0x108>
			}
			else
				Local_u8ErrorState = NOTOK;
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	89 83       	std	Y+1, r24	; 0x01
    1178:	05 c0       	rjmp	.+10     	; 0x1184 <ADC_u8StartChainConvAsynch+0x108>
		}
		else
			Local_u8ErrorState = NULL_POINTER;
    117a:	82 e0       	ldi	r24, 0x02	; 2
    117c:	89 83       	std	Y+1, r24	; 0x01
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <ADC_u8StartChainConvAsynch+0x108>
	}
	else
		Local_u8ErrorState = BUSY_FUNC;
    1180:	83 e0       	ldi	r24, 0x03	; 3
    1182:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    1184:	89 81       	ldd	r24, Y+1	; 0x01

}
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <__vector_16>:
void __vector_16 (void)	__attribute__((signal));
void __vector_16 (void)
{
    1192:	1f 92       	push	r1
    1194:	0f 92       	push	r0
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	0f 92       	push	r0
    119a:	11 24       	eor	r1, r1
    119c:	2f 93       	push	r18
    119e:	3f 93       	push	r19
    11a0:	4f 93       	push	r20
    11a2:	5f 93       	push	r21
    11a4:	6f 93       	push	r22
    11a6:	7f 93       	push	r23
    11a8:	8f 93       	push	r24
    11aa:	9f 93       	push	r25
    11ac:	af 93       	push	r26
    11ae:	bf 93       	push	r27
    11b0:	ef 93       	push	r30
    11b2:	ff 93       	push	r31
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8DirectionOfConvFunc == SINGLE_CONVERISION)
    11bc:	80 91 0d 03 	lds	r24, 0x030D
    11c0:	88 23       	and	r24, r24
    11c2:	d9 f4       	brne	.+54     	; 0x11fa <__vector_16+0x68>
	{
		if(ADC_ADJUST_BIT == LEFT_ADJUST)
			*Global_pu8Read = ADC_REG>>8;
    11c4:	a0 91 0b 03 	lds	r26, 0x030B
    11c8:	b0 91 0c 03 	lds	r27, 0x030C
    11cc:	e4 e2       	ldi	r30, 0x24	; 36
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	91 81       	ldd	r25, Z+1	; 0x01
    11d4:	89 2f       	mov	r24, r25
    11d6:	99 27       	eor	r25, r25
    11d8:	8d 93       	st	X+, r24
    11da:	9c 93       	st	X, r25
		else if(ADC_ADJUST_BIT == RIGHT_ADJUST)
			*Global_pu8Read = ADC_REG;

		Global_u8BusyFlag = IDLE;
    11dc:	10 92 08 03 	sts	0x0308, r1

		Global_vCallBackFunc();
    11e0:	e0 91 09 03 	lds	r30, 0x0309
    11e4:	f0 91 0a 03 	lds	r31, 0x030A
    11e8:	09 95       	icall

		CLR_BIT(ADCSRA,ADCSRA_ADIE);
    11ea:	a6 e2       	ldi	r26, 0x26	; 38
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	e6 e2       	ldi	r30, 0x26	; 38
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	87 7f       	andi	r24, 0xF7	; 247
    11f6:	8c 93       	st	X, r24
    11f8:	58 c0       	rjmp	.+176    	; 0x12aa <__vector_16+0x118>
	}
	else if(ADC_u8DirectionOfConvFunc == CHAIN_CONVERISION)
    11fa:	80 91 0d 03 	lds	r24, 0x030D
    11fe:	81 30       	cpi	r24, 0x01	; 1
    1200:	09 f0       	breq	.+2      	; 0x1204 <__vector_16+0x72>
    1202:	53 c0       	rjmp	.+166    	; 0x12aa <__vector_16+0x118>
	{
		if(ADC_ADJUST_BIT == LEFT_ADJUST)
			ADC_pu16ChannelReading[ADC_u8ChainIndex] = ADC_REG>>8;
    1204:	20 91 13 03 	lds	r18, 0x0313
    1208:	30 91 14 03 	lds	r19, 0x0314
    120c:	80 91 0e 03 	lds	r24, 0x030E
    1210:	88 2f       	mov	r24, r24
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	d9 01       	movw	r26, r18
    121a:	a8 0f       	add	r26, r24
    121c:	b9 1f       	adc	r27, r25
    121e:	e4 e2       	ldi	r30, 0x24	; 36
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	91 81       	ldd	r25, Z+1	; 0x01
    1226:	89 2f       	mov	r24, r25
    1228:	99 27       	eor	r25, r25
    122a:	11 96       	adiw	r26, 0x01	; 1
    122c:	9c 93       	st	X, r25
    122e:	8e 93       	st	-X, r24
		else if(ADC_ADJUST_BIT == RIGHT_ADJUST)
			ADC_pu16ChannelReading[ADC_u8ChainIndex] = ADC_REG;

		ADC_u8ChainIndex++;
    1230:	80 91 0e 03 	lds	r24, 0x030E
    1234:	8f 5f       	subi	r24, 0xFF	; 255
    1236:	80 93 0e 03 	sts	0x030E, r24
		if(ADC_u8ChainIndex==ADC_u8ChannelSize)
    123a:	90 91 0e 03 	lds	r25, 0x030E
    123e:	80 91 15 03 	lds	r24, 0x0315
    1242:	98 17       	cp	r25, r24
    1244:	89 f4       	brne	.+34     	; 0x1268 <__vector_16+0xd6>
		{
			Global_u8BusyFlag = IDLE;
    1246:	10 92 08 03 	sts	0x0308, r1

			Global_vChainCallBackFunc();
    124a:	e0 91 11 03 	lds	r30, 0x0311
    124e:	f0 91 12 03 	lds	r31, 0x0312
    1252:	09 95       	icall

			CLR_BIT(ADCSRA,ADCSRA_ADIE);
    1254:	a6 e2       	ldi	r26, 0x26	; 38
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e6 e2       	ldi	r30, 0x26	; 38
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	87 7f       	andi	r24, 0xF7	; 247
    1260:	8c 93       	st	X, r24

			ADC_u8ChainIndex = 0;
    1262:	10 92 0e 03 	sts	0x030E, r1
    1266:	21 c0       	rjmp	.+66     	; 0x12aa <__vector_16+0x118>
		}
		else
		{
			ADMUX &= MASK_CHANNEL;
    1268:	a7 e2       	ldi	r26, 0x27	; 39
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e7 e2       	ldi	r30, 0x27	; 39
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	80 7e       	andi	r24, 0xE0	; 224
    1274:	8c 93       	st	X, r24
			ADMUX |= ADC_pu8ChannelNum[ADC_u8ChainIndex]<<ADMUX_MUX0;
    1276:	a7 e2       	ldi	r26, 0x27	; 39
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e7 e2       	ldi	r30, 0x27	; 39
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	40 81       	ld	r20, Z
    1280:	20 91 0f 03 	lds	r18, 0x030F
    1284:	30 91 10 03 	lds	r19, 0x0310
    1288:	80 91 0e 03 	lds	r24, 0x030E
    128c:	88 2f       	mov	r24, r24
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	f9 01       	movw	r30, r18
    1292:	e8 0f       	add	r30, r24
    1294:	f9 1f       	adc	r31, r25
    1296:	80 81       	ld	r24, Z
    1298:	84 2b       	or	r24, r20
    129a:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADSC);
    129c:	a6 e2       	ldi	r26, 0x26	; 38
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e6 e2       	ldi	r30, 0x26	; 38
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	80 64       	ori	r24, 0x40	; 64
    12a8:	8c 93       	st	X, r24
		}

	}
}
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	ff 91       	pop	r31
    12b0:	ef 91       	pop	r30
    12b2:	bf 91       	pop	r27
    12b4:	af 91       	pop	r26
    12b6:	9f 91       	pop	r25
    12b8:	8f 91       	pop	r24
    12ba:	7f 91       	pop	r23
    12bc:	6f 91       	pop	r22
    12be:	5f 91       	pop	r21
    12c0:	4f 91       	pop	r20
    12c2:	3f 91       	pop	r19
    12c4:	2f 91       	pop	r18
    12c6:	0f 90       	pop	r0
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	0f 90       	pop	r0
    12cc:	1f 90       	pop	r1
    12ce:	18 95       	reti

000012d0 <CLCD_voidSendCommand>:
#include "../HAL/CLCD_interface.h"
#include "../HAL/CLCD_private.h"

static u8 iniIsFinich=0;
void CLCD_voidSendCommand(u8 Copy_u8Command)//math
{
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
    12d8:	ac 97       	sbiw	r28, 0x2c	; 44
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	f8 94       	cli
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	cd bf       	out	0x3d, r28	; 61
    12e4:	8c a7       	std	Y+44, r24	; 0x2c
	/*PIN SET  send pulse (E) */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_HIGH);
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_LOW);
#elif CLCD_CHIOCE_MODE==_4_BIT_MODE
	u8 Local_u8Mask = 0b11110000;
    12e6:	80 ef       	ldi	r24, 0xF0	; 240
    12e8:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_PIN_LOW);
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	60 e0       	ldi	r22, 0x00	; 0
    12ee:	40 e0       	ldi	r20, 0x00	; 0
    12f0:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_u8SetPinValue>
	/*PIN RW SET LOW  */
//	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_PIN_LOW);
	/*PORT SET COMMAND*/
	Local_u8Mask &= Copy_u8Command;
    12f4:	9b a5       	ldd	r25, Y+43	; 0x2b
    12f6:	8c a5       	ldd	r24, Y+44	; 0x2c
    12f8:	89 23       	and	r24, r25
    12fa:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPortValue(CLCD_DATA_PORT, Local_u8Mask);
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	6b a5       	ldd	r22, Y+43	; 0x2b
    1300:	0e 94 36 11 	call	0x226c	; 0x226c <DIO_u8SetPortValue>
	/*PIN SET  send pulse (E) */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_HIGH);
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	62 e0       	ldi	r22, 0x02	; 2
    1308:	41 e0       	ldi	r20, 0x01	; 1
    130a:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_u8SetPinValue>
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	a0 e0       	ldi	r26, 0x00	; 0
    1314:	b0 e4       	ldi	r27, 0x40	; 64
    1316:	8f a3       	std	Y+39, r24	; 0x27
    1318:	98 a7       	std	Y+40, r25	; 0x28
    131a:	a9 a7       	std	Y+41, r26	; 0x29
    131c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    131e:	6f a1       	ldd	r22, Y+39	; 0x27
    1320:	78 a5       	ldd	r23, Y+40	; 0x28
    1322:	89 a5       	ldd	r24, Y+41	; 0x29
    1324:	9a a5       	ldd	r25, Y+42	; 0x2a
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	4a ef       	ldi	r20, 0xFA	; 250
    132c:	54 e4       	ldi	r21, 0x44	; 68
    132e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	8b a3       	std	Y+35, r24	; 0x23
    1338:	9c a3       	std	Y+36, r25	; 0x24
    133a:	ad a3       	std	Y+37, r26	; 0x25
    133c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    133e:	6b a1       	ldd	r22, Y+35	; 0x23
    1340:	7c a1       	ldd	r23, Y+36	; 0x24
    1342:	8d a1       	ldd	r24, Y+37	; 0x25
    1344:	9e a1       	ldd	r25, Y+38	; 0x26
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	40 e8       	ldi	r20, 0x80	; 128
    134c:	5f e3       	ldi	r21, 0x3F	; 63
    134e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1352:	88 23       	and	r24, r24
    1354:	2c f4       	brge	.+10     	; 0x1360 <CLCD_voidSendCommand+0x90>
		__ticks = 1;
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	9a a3       	std	Y+34, r25	; 0x22
    135c:	89 a3       	std	Y+33, r24	; 0x21
    135e:	3f c0       	rjmp	.+126    	; 0x13de <CLCD_voidSendCommand+0x10e>
	else if (__tmp > 65535)
    1360:	6b a1       	ldd	r22, Y+35	; 0x23
    1362:	7c a1       	ldd	r23, Y+36	; 0x24
    1364:	8d a1       	ldd	r24, Y+37	; 0x25
    1366:	9e a1       	ldd	r25, Y+38	; 0x26
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	3f ef       	ldi	r19, 0xFF	; 255
    136c:	4f e7       	ldi	r20, 0x7F	; 127
    136e:	57 e4       	ldi	r21, 0x47	; 71
    1370:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1374:	18 16       	cp	r1, r24
    1376:	4c f5       	brge	.+82     	; 0x13ca <CLCD_voidSendCommand+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1378:	6f a1       	ldd	r22, Y+39	; 0x27
    137a:	78 a5       	ldd	r23, Y+40	; 0x28
    137c:	89 a5       	ldd	r24, Y+41	; 0x29
    137e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	40 e2       	ldi	r20, 0x20	; 32
    1386:	51 e4       	ldi	r21, 0x41	; 65
    1388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	bc 01       	movw	r22, r24
    1392:	cd 01       	movw	r24, r26
    1394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1398:	dc 01       	movw	r26, r24
    139a:	cb 01       	movw	r24, r22
    139c:	9a a3       	std	Y+34, r25	; 0x22
    139e:	89 a3       	std	Y+33, r24	; 0x21
    13a0:	0f c0       	rjmp	.+30     	; 0x13c0 <CLCD_voidSendCommand+0xf0>
    13a2:	88 ec       	ldi	r24, 0xC8	; 200
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	98 a3       	std	Y+32, r25	; 0x20
    13a8:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13ac:	98 a1       	ldd	r25, Y+32	; 0x20
    13ae:	01 97       	sbiw	r24, 0x01	; 1
    13b0:	f1 f7       	brne	.-4      	; 0x13ae <CLCD_voidSendCommand+0xde>
    13b2:	98 a3       	std	Y+32, r25	; 0x20
    13b4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b6:	89 a1       	ldd	r24, Y+33	; 0x21
    13b8:	9a a1       	ldd	r25, Y+34	; 0x22
    13ba:	01 97       	sbiw	r24, 0x01	; 1
    13bc:	9a a3       	std	Y+34, r25	; 0x22
    13be:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c0:	89 a1       	ldd	r24, Y+33	; 0x21
    13c2:	9a a1       	ldd	r25, Y+34	; 0x22
    13c4:	00 97       	sbiw	r24, 0x00	; 0
    13c6:	69 f7       	brne	.-38     	; 0x13a2 <CLCD_voidSendCommand+0xd2>
    13c8:	14 c0       	rjmp	.+40     	; 0x13f2 <CLCD_voidSendCommand+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ca:	6b a1       	ldd	r22, Y+35	; 0x23
    13cc:	7c a1       	ldd	r23, Y+36	; 0x24
    13ce:	8d a1       	ldd	r24, Y+37	; 0x25
    13d0:	9e a1       	ldd	r25, Y+38	; 0x26
    13d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d6:	dc 01       	movw	r26, r24
    13d8:	cb 01       	movw	r24, r22
    13da:	9a a3       	std	Y+34, r25	; 0x22
    13dc:	89 a3       	std	Y+33, r24	; 0x21
    13de:	89 a1       	ldd	r24, Y+33	; 0x21
    13e0:	9a a1       	ldd	r25, Y+34	; 0x22
    13e2:	9e 8f       	std	Y+30, r25	; 0x1e
    13e4:	8d 8f       	std	Y+29, r24	; 0x1d
    13e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13ea:	01 97       	sbiw	r24, 0x01	; 1
    13ec:	f1 f7       	brne	.-4      	; 0x13ea <CLCD_voidSendCommand+0x11a>
    13ee:	9e 8f       	std	Y+30, r25	; 0x1e
    13f0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	62 e0       	ldi	r22, 0x02	; 2
    13f6:	40 e0       	ldi	r20, 0x00	; 0
    13f8:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_u8SetPinValue>
	if(iniIsFinich)
    13fc:	80 91 16 03 	lds	r24, 0x0316
    1400:	88 23       	and	r24, r24
    1402:	09 f4       	brne	.+2      	; 0x1406 <CLCD_voidSendCommand+0x136>
    1404:	8c c0       	rjmp	.+280    	; 0x151e <CLCD_voidSendCommand+0x24e>
	{
		Local_u8Mask = 0b11110000;
    1406:	80 ef       	ldi	r24, 0xF0	; 240
    1408:	8b a7       	std	Y+43, r24	; 0x2b
		Local_u8Mask = ~(Local_u8Mask) & Copy_u8Command;
    140a:	8b a5       	ldd	r24, Y+43	; 0x2b
    140c:	98 2f       	mov	r25, r24
    140e:	90 95       	com	r25
    1410:	8c a5       	ldd	r24, Y+44	; 0x2c
    1412:	89 23       	and	r24, r25
    1414:	8b a7       	std	Y+43, r24	; 0x2b
		DIO_u8SetPortValue(CLCD_DATA_PORT, (Local_u8Mask << 4));
    1416:	8b a5       	ldd	r24, Y+43	; 0x2b
    1418:	98 2f       	mov	r25, r24
    141a:	92 95       	swap	r25
    141c:	90 7f       	andi	r25, 0xF0	; 240
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	69 2f       	mov	r22, r25
    1422:	0e 94 36 11 	call	0x226c	; 0x226c <DIO_u8SetPortValue>
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_HIGH);
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	62 e0       	ldi	r22, 0x02	; 2
    142a:	41 e0       	ldi	r20, 0x01	; 1
    142c:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_u8SetPinValue>
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	a0 e0       	ldi	r26, 0x00	; 0
    1436:	b0 e4       	ldi	r27, 0x40	; 64
    1438:	89 8f       	std	Y+25, r24	; 0x19
    143a:	9a 8f       	std	Y+26, r25	; 0x1a
    143c:	ab 8f       	std	Y+27, r26	; 0x1b
    143e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1440:	69 8d       	ldd	r22, Y+25	; 0x19
    1442:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1444:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1446:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	4a ef       	ldi	r20, 0xFA	; 250
    144e:	54 e4       	ldi	r21, 0x44	; 68
    1450:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1454:	dc 01       	movw	r26, r24
    1456:	cb 01       	movw	r24, r22
    1458:	8d 8b       	std	Y+21, r24	; 0x15
    145a:	9e 8b       	std	Y+22, r25	; 0x16
    145c:	af 8b       	std	Y+23, r26	; 0x17
    145e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1460:	6d 89       	ldd	r22, Y+21	; 0x15
    1462:	7e 89       	ldd	r23, Y+22	; 0x16
    1464:	8f 89       	ldd	r24, Y+23	; 0x17
    1466:	98 8d       	ldd	r25, Y+24	; 0x18
    1468:	20 e0       	ldi	r18, 0x00	; 0
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	40 e8       	ldi	r20, 0x80	; 128
    146e:	5f e3       	ldi	r21, 0x3F	; 63
    1470:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1474:	88 23       	and	r24, r24
    1476:	2c f4       	brge	.+10     	; 0x1482 <CLCD_voidSendCommand+0x1b2>
		__ticks = 1;
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	9c 8b       	std	Y+20, r25	; 0x14
    147e:	8b 8b       	std	Y+19, r24	; 0x13
    1480:	3f c0       	rjmp	.+126    	; 0x1500 <CLCD_voidSendCommand+0x230>
	else if (__tmp > 65535)
    1482:	6d 89       	ldd	r22, Y+21	; 0x15
    1484:	7e 89       	ldd	r23, Y+22	; 0x16
    1486:	8f 89       	ldd	r24, Y+23	; 0x17
    1488:	98 8d       	ldd	r25, Y+24	; 0x18
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	3f ef       	ldi	r19, 0xFF	; 255
    148e:	4f e7       	ldi	r20, 0x7F	; 127
    1490:	57 e4       	ldi	r21, 0x47	; 71
    1492:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1496:	18 16       	cp	r1, r24
    1498:	4c f5       	brge	.+82     	; 0x14ec <CLCD_voidSendCommand+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    149a:	69 8d       	ldd	r22, Y+25	; 0x19
    149c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    149e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	40 e2       	ldi	r20, 0x20	; 32
    14a8:	51 e4       	ldi	r21, 0x41	; 65
    14aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	bc 01       	movw	r22, r24
    14b4:	cd 01       	movw	r24, r26
    14b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ba:	dc 01       	movw	r26, r24
    14bc:	cb 01       	movw	r24, r22
    14be:	9c 8b       	std	Y+20, r25	; 0x14
    14c0:	8b 8b       	std	Y+19, r24	; 0x13
    14c2:	0f c0       	rjmp	.+30     	; 0x14e2 <CLCD_voidSendCommand+0x212>
    14c4:	88 ec       	ldi	r24, 0xC8	; 200
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	9a 8b       	std	Y+18, r25	; 0x12
    14ca:	89 8b       	std	Y+17, r24	; 0x11
    14cc:	89 89       	ldd	r24, Y+17	; 0x11
    14ce:	9a 89       	ldd	r25, Y+18	; 0x12
    14d0:	01 97       	sbiw	r24, 0x01	; 1
    14d2:	f1 f7       	brne	.-4      	; 0x14d0 <CLCD_voidSendCommand+0x200>
    14d4:	9a 8b       	std	Y+18, r25	; 0x12
    14d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d8:	8b 89       	ldd	r24, Y+19	; 0x13
    14da:	9c 89       	ldd	r25, Y+20	; 0x14
    14dc:	01 97       	sbiw	r24, 0x01	; 1
    14de:	9c 8b       	std	Y+20, r25	; 0x14
    14e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e2:	8b 89       	ldd	r24, Y+19	; 0x13
    14e4:	9c 89       	ldd	r25, Y+20	; 0x14
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	69 f7       	brne	.-38     	; 0x14c4 <CLCD_voidSendCommand+0x1f4>
    14ea:	14 c0       	rjmp	.+40     	; 0x1514 <CLCD_voidSendCommand+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ec:	6d 89       	ldd	r22, Y+21	; 0x15
    14ee:	7e 89       	ldd	r23, Y+22	; 0x16
    14f0:	8f 89       	ldd	r24, Y+23	; 0x17
    14f2:	98 8d       	ldd	r25, Y+24	; 0x18
    14f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f8:	dc 01       	movw	r26, r24
    14fa:	cb 01       	movw	r24, r22
    14fc:	9c 8b       	std	Y+20, r25	; 0x14
    14fe:	8b 8b       	std	Y+19, r24	; 0x13
    1500:	8b 89       	ldd	r24, Y+19	; 0x13
    1502:	9c 89       	ldd	r25, Y+20	; 0x14
    1504:	98 8b       	std	Y+16, r25	; 0x10
    1506:	8f 87       	std	Y+15, r24	; 0x0f
    1508:	8f 85       	ldd	r24, Y+15	; 0x0f
    150a:	98 89       	ldd	r25, Y+16	; 0x10
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	f1 f7       	brne	.-4      	; 0x150c <CLCD_voidSendCommand+0x23c>
    1510:	98 8b       	std	Y+16, r25	; 0x10
    1512:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	62 e0       	ldi	r22, 0x02	; 2
    1518:	40 e0       	ldi	r20, 0x00	; 0
    151a:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_u8SetPinValue>
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	a0 e0       	ldi	r26, 0x00	; 0
    1524:	b0 e4       	ldi	r27, 0x40	; 64
    1526:	8b 87       	std	Y+11, r24	; 0x0b
    1528:	9c 87       	std	Y+12, r25	; 0x0c
    152a:	ad 87       	std	Y+13, r26	; 0x0d
    152c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    152e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1530:	7c 85       	ldd	r23, Y+12	; 0x0c
    1532:	8d 85       	ldd	r24, Y+13	; 0x0d
    1534:	9e 85       	ldd	r25, Y+14	; 0x0e
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	4a ef       	ldi	r20, 0xFA	; 250
    153c:	54 e4       	ldi	r21, 0x44	; 68
    153e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1542:	dc 01       	movw	r26, r24
    1544:	cb 01       	movw	r24, r22
    1546:	8f 83       	std	Y+7, r24	; 0x07
    1548:	98 87       	std	Y+8, r25	; 0x08
    154a:	a9 87       	std	Y+9, r26	; 0x09
    154c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    154e:	6f 81       	ldd	r22, Y+7	; 0x07
    1550:	78 85       	ldd	r23, Y+8	; 0x08
    1552:	89 85       	ldd	r24, Y+9	; 0x09
    1554:	9a 85       	ldd	r25, Y+10	; 0x0a
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	40 e8       	ldi	r20, 0x80	; 128
    155c:	5f e3       	ldi	r21, 0x3F	; 63
    155e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1562:	88 23       	and	r24, r24
    1564:	2c f4       	brge	.+10     	; 0x1570 <CLCD_voidSendCommand+0x2a0>
		__ticks = 1;
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	9e 83       	std	Y+6, r25	; 0x06
    156c:	8d 83       	std	Y+5, r24	; 0x05
    156e:	3f c0       	rjmp	.+126    	; 0x15ee <CLCD_voidSendCommand+0x31e>
	else if (__tmp > 65535)
    1570:	6f 81       	ldd	r22, Y+7	; 0x07
    1572:	78 85       	ldd	r23, Y+8	; 0x08
    1574:	89 85       	ldd	r24, Y+9	; 0x09
    1576:	9a 85       	ldd	r25, Y+10	; 0x0a
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	3f ef       	ldi	r19, 0xFF	; 255
    157c:	4f e7       	ldi	r20, 0x7F	; 127
    157e:	57 e4       	ldi	r21, 0x47	; 71
    1580:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1584:	18 16       	cp	r1, r24
    1586:	4c f5       	brge	.+82     	; 0x15da <CLCD_voidSendCommand+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1588:	6b 85       	ldd	r22, Y+11	; 0x0b
    158a:	7c 85       	ldd	r23, Y+12	; 0x0c
    158c:	8d 85       	ldd	r24, Y+13	; 0x0d
    158e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	40 e2       	ldi	r20, 0x20	; 32
    1596:	51 e4       	ldi	r21, 0x41	; 65
    1598:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
    15a0:	bc 01       	movw	r22, r24
    15a2:	cd 01       	movw	r24, r26
    15a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a8:	dc 01       	movw	r26, r24
    15aa:	cb 01       	movw	r24, r22
    15ac:	9e 83       	std	Y+6, r25	; 0x06
    15ae:	8d 83       	std	Y+5, r24	; 0x05
    15b0:	0f c0       	rjmp	.+30     	; 0x15d0 <CLCD_voidSendCommand+0x300>
    15b2:	88 ec       	ldi	r24, 0xC8	; 200
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	9c 83       	std	Y+4, r25	; 0x04
    15b8:	8b 83       	std	Y+3, r24	; 0x03
    15ba:	8b 81       	ldd	r24, Y+3	; 0x03
    15bc:	9c 81       	ldd	r25, Y+4	; 0x04
    15be:	01 97       	sbiw	r24, 0x01	; 1
    15c0:	f1 f7       	brne	.-4      	; 0x15be <CLCD_voidSendCommand+0x2ee>
    15c2:	9c 83       	std	Y+4, r25	; 0x04
    15c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15c6:	8d 81       	ldd	r24, Y+5	; 0x05
    15c8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ca:	01 97       	sbiw	r24, 0x01	; 1
    15cc:	9e 83       	std	Y+6, r25	; 0x06
    15ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d0:	8d 81       	ldd	r24, Y+5	; 0x05
    15d2:	9e 81       	ldd	r25, Y+6	; 0x06
    15d4:	00 97       	sbiw	r24, 0x00	; 0
    15d6:	69 f7       	brne	.-38     	; 0x15b2 <CLCD_voidSendCommand+0x2e2>
    15d8:	14 c0       	rjmp	.+40     	; 0x1602 <CLCD_voidSendCommand+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15da:	6f 81       	ldd	r22, Y+7	; 0x07
    15dc:	78 85       	ldd	r23, Y+8	; 0x08
    15de:	89 85       	ldd	r24, Y+9	; 0x09
    15e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e6:	dc 01       	movw	r26, r24
    15e8:	cb 01       	movw	r24, r22
    15ea:	9e 83       	std	Y+6, r25	; 0x06
    15ec:	8d 83       	std	Y+5, r24	; 0x05
    15ee:	8d 81       	ldd	r24, Y+5	; 0x05
    15f0:	9e 81       	ldd	r25, Y+6	; 0x06
    15f2:	9a 83       	std	Y+2, r25	; 0x02
    15f4:	89 83       	std	Y+1, r24	; 0x01
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	9a 81       	ldd	r25, Y+2	; 0x02
    15fa:	01 97       	sbiw	r24, 0x01	; 1
    15fc:	f1 f7       	brne	.-4      	; 0x15fa <CLCD_voidSendCommand+0x32a>
    15fe:	9a 83       	std	Y+2, r25	; 0x02
    1600:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
#else
#error "In correct cconfigrtion of LCD_MODE"
#endif

}
    1602:	ac 96       	adiw	r28, 0x2c	; 44
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	f8 94       	cli
    1608:	de bf       	out	0x3e, r29	; 62
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	cd bf       	out	0x3d, r28	; 61
    160e:	cf 91       	pop	r28
    1610:	df 91       	pop	r29
    1612:	08 95       	ret

00001614 <CLCD_Read_BF_AC>:
u8 CLCD_Read_BF_AC() {
    1614:	df 93       	push	r29
    1616:	cf 93       	push	r28
    1618:	00 d0       	rcall	.+0      	; 0x161a <CLCD_Read_BF_AC+0x6>
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Address = 0;
    161e:	1a 82       	std	Y+2, r1	; 0x02
	/*PIN RS SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_PIN_LOW);
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	40 e0       	ldi	r20, 0x00	; 0
    1626:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_u8SetPinValue>
	/*PIN RW SET HIGH  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_PIN_HIGH);
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	61 e0       	ldi	r22, 0x01	; 1
    162e:	41 e0       	ldi	r20, 0x01	; 1
    1630:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_u8SetPinValue>
	/*PIN SET  send pulse (E) */
	for (u8 i = 0; i < 7; i++) {
    1634:	19 82       	std	Y+1, r1	; 0x01
    1636:	1c c0       	rjmp	.+56     	; 0x1670 <CLCD_Read_BF_AC+0x5c>
		DIO_u8GetPinValue(CLCD_DATA_PORT, i, &Local_u8Address);
    1638:	9e 01       	movw	r18, r28
    163a:	2e 5f       	subi	r18, 0xFE	; 254
    163c:	3f 4f       	sbci	r19, 0xFF	; 255
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	69 81       	ldd	r22, Y+1	; 0x01
    1642:	a9 01       	movw	r20, r18
    1644:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_u8GetPinValue>
		Local_u8Address += Local_u8Address << i;
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	88 2f       	mov	r24, r24
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	a9 01       	movw	r20, r18
    1656:	02 c0       	rjmp	.+4      	; 0x165c <CLCD_Read_BF_AC+0x48>
    1658:	44 0f       	add	r20, r20
    165a:	55 1f       	adc	r21, r21
    165c:	8a 95       	dec	r24
    165e:	e2 f7       	brpl	.-8      	; 0x1658 <CLCD_Read_BF_AC+0x44>
    1660:	ca 01       	movw	r24, r20
    1662:	98 2f       	mov	r25, r24
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	89 0f       	add	r24, r25
    1668:	8a 83       	std	Y+2, r24	; 0x02
	/*PIN RS SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_PIN_LOW);
	/*PIN RW SET HIGH  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_PIN_HIGH);
	/*PIN SET  send pulse (E) */
	for (u8 i = 0; i < 7; i++) {
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	8f 5f       	subi	r24, 0xFF	; 255
    166e:	89 83       	std	Y+1, r24	; 0x01
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	87 30       	cpi	r24, 0x07	; 7
    1674:	08 f3       	brcs	.-62     	; 0x1638 <CLCD_Read_BF_AC+0x24>
		DIO_u8GetPinValue(CLCD_DATA_PORT, i, &Local_u8Address);
		Local_u8Address += Local_u8Address << i;
	}
	return Local_u8Address;
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	cf 91       	pop	r28
    167e:	df 91       	pop	r29
    1680:	08 95       	ret

00001682 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    1682:	df 93       	push	r29
    1684:	cf 93       	push	r28
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
    168a:	ac 97       	sbiw	r28, 0x2c	; 44
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	f8 94       	cli
    1690:	de bf       	out	0x3e, r29	; 62
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	cd bf       	out	0x3d, r28	; 61
    1696:	8c a7       	std	Y+44, r24	; 0x2c
	if (Local_u8Address > 0x0f)
		CLCD_voidSendCommand(0x0C);
	else
		CLCD_voidSendCommand(0x06);
#elif CLCD_CHIOCE_MODE==_4_BIT_MODE
	u8 Local_u8Mask = 0b11110000;
    1698:	80 ef       	ldi	r24, 0xF0	; 240
    169a:	8b a7       	std	Y+43, r24	; 0x2b
	/*PIN RS SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_PIN_HIGH);
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	60 e0       	ldi	r22, 0x00	; 0
    16a0:	41 e0       	ldi	r20, 0x01	; 1
    16a2:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_u8SetPinValue>
	/*PIN RW SET LOW  */
	//DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_PIN_LOW);
	/*PORT SET COMMAND*/
	Local_u8Mask &= Copy_u8Data;
    16a6:	9b a5       	ldd	r25, Y+43	; 0x2b
    16a8:	8c a5       	ldd	r24, Y+44	; 0x2c
    16aa:	89 23       	and	r24, r25
    16ac:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Mask);
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	6b a5       	ldd	r22, Y+43	; 0x2b
    16b2:	0e 94 36 11 	call	0x226c	; 0x226c <DIO_u8SetPortValue>
	/*PIN SET send pulse (E) */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_HIGH);
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	62 e0       	ldi	r22, 0x02	; 2
    16ba:	41 e0       	ldi	r20, 0x01	; 1
    16bc:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_u8SetPinValue>
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	a0 e0       	ldi	r26, 0x00	; 0
    16c6:	b0 e4       	ldi	r27, 0x40	; 64
    16c8:	8f a3       	std	Y+39, r24	; 0x27
    16ca:	98 a7       	std	Y+40, r25	; 0x28
    16cc:	a9 a7       	std	Y+41, r26	; 0x29
    16ce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16d0:	6f a1       	ldd	r22, Y+39	; 0x27
    16d2:	78 a5       	ldd	r23, Y+40	; 0x28
    16d4:	89 a5       	ldd	r24, Y+41	; 0x29
    16d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	4a ef       	ldi	r20, 0xFA	; 250
    16de:	54 e4       	ldi	r21, 0x44	; 68
    16e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	8b a3       	std	Y+35, r24	; 0x23
    16ea:	9c a3       	std	Y+36, r25	; 0x24
    16ec:	ad a3       	std	Y+37, r26	; 0x25
    16ee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16f0:	6b a1       	ldd	r22, Y+35	; 0x23
    16f2:	7c a1       	ldd	r23, Y+36	; 0x24
    16f4:	8d a1       	ldd	r24, Y+37	; 0x25
    16f6:	9e a1       	ldd	r25, Y+38	; 0x26
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	40 e8       	ldi	r20, 0x80	; 128
    16fe:	5f e3       	ldi	r21, 0x3F	; 63
    1700:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1704:	88 23       	and	r24, r24
    1706:	2c f4       	brge	.+10     	; 0x1712 <CLCD_voidSendData+0x90>
		__ticks = 1;
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	9a a3       	std	Y+34, r25	; 0x22
    170e:	89 a3       	std	Y+33, r24	; 0x21
    1710:	3f c0       	rjmp	.+126    	; 0x1790 <CLCD_voidSendData+0x10e>
	else if (__tmp > 65535)
    1712:	6b a1       	ldd	r22, Y+35	; 0x23
    1714:	7c a1       	ldd	r23, Y+36	; 0x24
    1716:	8d a1       	ldd	r24, Y+37	; 0x25
    1718:	9e a1       	ldd	r25, Y+38	; 0x26
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	3f ef       	ldi	r19, 0xFF	; 255
    171e:	4f e7       	ldi	r20, 0x7F	; 127
    1720:	57 e4       	ldi	r21, 0x47	; 71
    1722:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1726:	18 16       	cp	r1, r24
    1728:	4c f5       	brge	.+82     	; 0x177c <CLCD_voidSendData+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    172a:	6f a1       	ldd	r22, Y+39	; 0x27
    172c:	78 a5       	ldd	r23, Y+40	; 0x28
    172e:	89 a5       	ldd	r24, Y+41	; 0x29
    1730:	9a a5       	ldd	r25, Y+42	; 0x2a
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	40 e2       	ldi	r20, 0x20	; 32
    1738:	51 e4       	ldi	r21, 0x41	; 65
    173a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	bc 01       	movw	r22, r24
    1744:	cd 01       	movw	r24, r26
    1746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	9a a3       	std	Y+34, r25	; 0x22
    1750:	89 a3       	std	Y+33, r24	; 0x21
    1752:	0f c0       	rjmp	.+30     	; 0x1772 <CLCD_voidSendData+0xf0>
    1754:	88 ec       	ldi	r24, 0xC8	; 200
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	98 a3       	std	Y+32, r25	; 0x20
    175a:	8f 8f       	std	Y+31, r24	; 0x1f
    175c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    175e:	98 a1       	ldd	r25, Y+32	; 0x20
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	f1 f7       	brne	.-4      	; 0x1760 <CLCD_voidSendData+0xde>
    1764:	98 a3       	std	Y+32, r25	; 0x20
    1766:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1768:	89 a1       	ldd	r24, Y+33	; 0x21
    176a:	9a a1       	ldd	r25, Y+34	; 0x22
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	9a a3       	std	Y+34, r25	; 0x22
    1770:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1772:	89 a1       	ldd	r24, Y+33	; 0x21
    1774:	9a a1       	ldd	r25, Y+34	; 0x22
    1776:	00 97       	sbiw	r24, 0x00	; 0
    1778:	69 f7       	brne	.-38     	; 0x1754 <CLCD_voidSendData+0xd2>
    177a:	14 c0       	rjmp	.+40     	; 0x17a4 <CLCD_voidSendData+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    177c:	6b a1       	ldd	r22, Y+35	; 0x23
    177e:	7c a1       	ldd	r23, Y+36	; 0x24
    1780:	8d a1       	ldd	r24, Y+37	; 0x25
    1782:	9e a1       	ldd	r25, Y+38	; 0x26
    1784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	9a a3       	std	Y+34, r25	; 0x22
    178e:	89 a3       	std	Y+33, r24	; 0x21
    1790:	89 a1       	ldd	r24, Y+33	; 0x21
    1792:	9a a1       	ldd	r25, Y+34	; 0x22
    1794:	9e 8f       	std	Y+30, r25	; 0x1e
    1796:	8d 8f       	std	Y+29, r24	; 0x1d
    1798:	8d 8d       	ldd	r24, Y+29	; 0x1d
    179a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	f1 f7       	brne	.-4      	; 0x179c <CLCD_voidSendData+0x11a>
    17a0:	9e 8f       	std	Y+30, r25	; 0x1e
    17a2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	62 e0       	ldi	r22, 0x02	; 2
    17a8:	40 e0       	ldi	r20, 0x00	; 0
    17aa:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_u8SetPinValue>
	Local_u8Mask=0b11110000;
    17ae:	80 ef       	ldi	r24, 0xF0	; 240
    17b0:	8b a7       	std	Y+43, r24	; 0x2b
	Local_u8Mask = ~(Local_u8Mask) & Copy_u8Data;
    17b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    17b4:	98 2f       	mov	r25, r24
    17b6:	90 95       	com	r25
    17b8:	8c a5       	ldd	r24, Y+44	; 0x2c
    17ba:	89 23       	and	r24, r25
    17bc:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPortValue(CLCD_DATA_PORT, (Local_u8Mask << 4));
    17be:	8b a5       	ldd	r24, Y+43	; 0x2b
    17c0:	98 2f       	mov	r25, r24
    17c2:	92 95       	swap	r25
    17c4:	90 7f       	andi	r25, 0xF0	; 240
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	69 2f       	mov	r22, r25
    17ca:	0e 94 36 11 	call	0x226c	; 0x226c <DIO_u8SetPortValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_HIGH);
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	62 e0       	ldi	r22, 0x02	; 2
    17d2:	41 e0       	ldi	r20, 0x01	; 1
    17d4:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_u8SetPinValue>
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	a0 e0       	ldi	r26, 0x00	; 0
    17de:	b0 e4       	ldi	r27, 0x40	; 64
    17e0:	89 8f       	std	Y+25, r24	; 0x19
    17e2:	9a 8f       	std	Y+26, r25	; 0x1a
    17e4:	ab 8f       	std	Y+27, r26	; 0x1b
    17e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e8:	69 8d       	ldd	r22, Y+25	; 0x19
    17ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	4a ef       	ldi	r20, 0xFA	; 250
    17f6:	54 e4       	ldi	r21, 0x44	; 68
    17f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	8d 8b       	std	Y+21, r24	; 0x15
    1802:	9e 8b       	std	Y+22, r25	; 0x16
    1804:	af 8b       	std	Y+23, r26	; 0x17
    1806:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1808:	6d 89       	ldd	r22, Y+21	; 0x15
    180a:	7e 89       	ldd	r23, Y+22	; 0x16
    180c:	8f 89       	ldd	r24, Y+23	; 0x17
    180e:	98 8d       	ldd	r25, Y+24	; 0x18
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	40 e8       	ldi	r20, 0x80	; 128
    1816:	5f e3       	ldi	r21, 0x3F	; 63
    1818:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    181c:	88 23       	and	r24, r24
    181e:	2c f4       	brge	.+10     	; 0x182a <CLCD_voidSendData+0x1a8>
		__ticks = 1;
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	9c 8b       	std	Y+20, r25	; 0x14
    1826:	8b 8b       	std	Y+19, r24	; 0x13
    1828:	3f c0       	rjmp	.+126    	; 0x18a8 <CLCD_voidSendData+0x226>
	else if (__tmp > 65535)
    182a:	6d 89       	ldd	r22, Y+21	; 0x15
    182c:	7e 89       	ldd	r23, Y+22	; 0x16
    182e:	8f 89       	ldd	r24, Y+23	; 0x17
    1830:	98 8d       	ldd	r25, Y+24	; 0x18
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	3f ef       	ldi	r19, 0xFF	; 255
    1836:	4f e7       	ldi	r20, 0x7F	; 127
    1838:	57 e4       	ldi	r21, 0x47	; 71
    183a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    183e:	18 16       	cp	r1, r24
    1840:	4c f5       	brge	.+82     	; 0x1894 <CLCD_voidSendData+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1842:	69 8d       	ldd	r22, Y+25	; 0x19
    1844:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1846:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1848:	9c 8d       	ldd	r25, Y+28	; 0x1c
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	40 e2       	ldi	r20, 0x20	; 32
    1850:	51 e4       	ldi	r21, 0x41	; 65
    1852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	bc 01       	movw	r22, r24
    185c:	cd 01       	movw	r24, r26
    185e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	9c 8b       	std	Y+20, r25	; 0x14
    1868:	8b 8b       	std	Y+19, r24	; 0x13
    186a:	0f c0       	rjmp	.+30     	; 0x188a <CLCD_voidSendData+0x208>
    186c:	88 ec       	ldi	r24, 0xC8	; 200
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	9a 8b       	std	Y+18, r25	; 0x12
    1872:	89 8b       	std	Y+17, r24	; 0x11
    1874:	89 89       	ldd	r24, Y+17	; 0x11
    1876:	9a 89       	ldd	r25, Y+18	; 0x12
    1878:	01 97       	sbiw	r24, 0x01	; 1
    187a:	f1 f7       	brne	.-4      	; 0x1878 <CLCD_voidSendData+0x1f6>
    187c:	9a 8b       	std	Y+18, r25	; 0x12
    187e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1880:	8b 89       	ldd	r24, Y+19	; 0x13
    1882:	9c 89       	ldd	r25, Y+20	; 0x14
    1884:	01 97       	sbiw	r24, 0x01	; 1
    1886:	9c 8b       	std	Y+20, r25	; 0x14
    1888:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    188a:	8b 89       	ldd	r24, Y+19	; 0x13
    188c:	9c 89       	ldd	r25, Y+20	; 0x14
    188e:	00 97       	sbiw	r24, 0x00	; 0
    1890:	69 f7       	brne	.-38     	; 0x186c <CLCD_voidSendData+0x1ea>
    1892:	14 c0       	rjmp	.+40     	; 0x18bc <CLCD_voidSendData+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1894:	6d 89       	ldd	r22, Y+21	; 0x15
    1896:	7e 89       	ldd	r23, Y+22	; 0x16
    1898:	8f 89       	ldd	r24, Y+23	; 0x17
    189a:	98 8d       	ldd	r25, Y+24	; 0x18
    189c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	9c 8b       	std	Y+20, r25	; 0x14
    18a6:	8b 8b       	std	Y+19, r24	; 0x13
    18a8:	8b 89       	ldd	r24, Y+19	; 0x13
    18aa:	9c 89       	ldd	r25, Y+20	; 0x14
    18ac:	98 8b       	std	Y+16, r25	; 0x10
    18ae:	8f 87       	std	Y+15, r24	; 0x0f
    18b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    18b2:	98 89       	ldd	r25, Y+16	; 0x10
    18b4:	01 97       	sbiw	r24, 0x01	; 1
    18b6:	f1 f7       	brne	.-4      	; 0x18b4 <CLCD_voidSendData+0x232>
    18b8:	98 8b       	std	Y+16, r25	; 0x10
    18ba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	62 e0       	ldi	r22, 0x02	; 2
    18c0:	40 e0       	ldi	r20, 0x00	; 0
    18c2:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_u8SetPinValue>
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	a0 e0       	ldi	r26, 0x00	; 0
    18cc:	b0 e4       	ldi	r27, 0x40	; 64
    18ce:	8b 87       	std	Y+11, r24	; 0x0b
    18d0:	9c 87       	std	Y+12, r25	; 0x0c
    18d2:	ad 87       	std	Y+13, r26	; 0x0d
    18d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    18d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    18da:	8d 85       	ldd	r24, Y+13	; 0x0d
    18dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	4a ef       	ldi	r20, 0xFA	; 250
    18e4:	54 e4       	ldi	r21, 0x44	; 68
    18e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	8f 83       	std	Y+7, r24	; 0x07
    18f0:	98 87       	std	Y+8, r25	; 0x08
    18f2:	a9 87       	std	Y+9, r26	; 0x09
    18f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18f6:	6f 81       	ldd	r22, Y+7	; 0x07
    18f8:	78 85       	ldd	r23, Y+8	; 0x08
    18fa:	89 85       	ldd	r24, Y+9	; 0x09
    18fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	40 e8       	ldi	r20, 0x80	; 128
    1904:	5f e3       	ldi	r21, 0x3F	; 63
    1906:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    190a:	88 23       	and	r24, r24
    190c:	2c f4       	brge	.+10     	; 0x1918 <CLCD_voidSendData+0x296>
		__ticks = 1;
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	9e 83       	std	Y+6, r25	; 0x06
    1914:	8d 83       	std	Y+5, r24	; 0x05
    1916:	3f c0       	rjmp	.+126    	; 0x1996 <CLCD_voidSendData+0x314>
	else if (__tmp > 65535)
    1918:	6f 81       	ldd	r22, Y+7	; 0x07
    191a:	78 85       	ldd	r23, Y+8	; 0x08
    191c:	89 85       	ldd	r24, Y+9	; 0x09
    191e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	3f ef       	ldi	r19, 0xFF	; 255
    1924:	4f e7       	ldi	r20, 0x7F	; 127
    1926:	57 e4       	ldi	r21, 0x47	; 71
    1928:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    192c:	18 16       	cp	r1, r24
    192e:	4c f5       	brge	.+82     	; 0x1982 <CLCD_voidSendData+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1930:	6b 85       	ldd	r22, Y+11	; 0x0b
    1932:	7c 85       	ldd	r23, Y+12	; 0x0c
    1934:	8d 85       	ldd	r24, Y+13	; 0x0d
    1936:	9e 85       	ldd	r25, Y+14	; 0x0e
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e2       	ldi	r20, 0x20	; 32
    193e:	51 e4       	ldi	r21, 0x41	; 65
    1940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	bc 01       	movw	r22, r24
    194a:	cd 01       	movw	r24, r26
    194c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1950:	dc 01       	movw	r26, r24
    1952:	cb 01       	movw	r24, r22
    1954:	9e 83       	std	Y+6, r25	; 0x06
    1956:	8d 83       	std	Y+5, r24	; 0x05
    1958:	0f c0       	rjmp	.+30     	; 0x1978 <CLCD_voidSendData+0x2f6>
    195a:	88 ec       	ldi	r24, 0xC8	; 200
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	9c 83       	std	Y+4, r25	; 0x04
    1960:	8b 83       	std	Y+3, r24	; 0x03
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	9c 81       	ldd	r25, Y+4	; 0x04
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	f1 f7       	brne	.-4      	; 0x1966 <CLCD_voidSendData+0x2e4>
    196a:	9c 83       	std	Y+4, r25	; 0x04
    196c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196e:	8d 81       	ldd	r24, Y+5	; 0x05
    1970:	9e 81       	ldd	r25, Y+6	; 0x06
    1972:	01 97       	sbiw	r24, 0x01	; 1
    1974:	9e 83       	std	Y+6, r25	; 0x06
    1976:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1978:	8d 81       	ldd	r24, Y+5	; 0x05
    197a:	9e 81       	ldd	r25, Y+6	; 0x06
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	69 f7       	brne	.-38     	; 0x195a <CLCD_voidSendData+0x2d8>
    1980:	14 c0       	rjmp	.+40     	; 0x19aa <CLCD_voidSendData+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1982:	6f 81       	ldd	r22, Y+7	; 0x07
    1984:	78 85       	ldd	r23, Y+8	; 0x08
    1986:	89 85       	ldd	r24, Y+9	; 0x09
    1988:	9a 85       	ldd	r25, Y+10	; 0x0a
    198a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	9e 83       	std	Y+6, r25	; 0x06
    1994:	8d 83       	std	Y+5, r24	; 0x05
    1996:	8d 81       	ldd	r24, Y+5	; 0x05
    1998:	9e 81       	ldd	r25, Y+6	; 0x06
    199a:	9a 83       	std	Y+2, r25	; 0x02
    199c:	89 83       	std	Y+1, r24	; 0x01
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	9a 81       	ldd	r25, Y+2	; 0x02
    19a2:	01 97       	sbiw	r24, 0x01	; 1
    19a4:	f1 f7       	brne	.-4      	; 0x19a2 <CLCD_voidSendData+0x320>
    19a6:	9a 83       	std	Y+2, r25	; 0x02
    19a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	CLCD_voidSendCommand(0x06);
    19aa:	86 e0       	ldi	r24, 0x06	; 6
    19ac:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
#else
#error "In correct cconfigrtion of LCD_MODE"
#endif
}
    19b0:	ac 96       	adiw	r28, 0x2c	; 44
    19b2:	0f b6       	in	r0, 0x3f	; 63
    19b4:	f8 94       	cli
    19b6:	de bf       	out	0x3e, r29	; 62
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	cd bf       	out	0x3d, r28	; 61
    19bc:	cf 91       	pop	r28
    19be:	df 91       	pop	r29
    19c0:	08 95       	ret

000019c2 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    19c2:	df 93       	push	r29
    19c4:	cf 93       	push	r28
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
    19ca:	e8 97       	sbiw	r28, 0x38	; 56
    19cc:	0f b6       	in	r0, 0x3f	; 63
    19ce:	f8 94       	cli
    19d0:	de bf       	out	0x3e, r29	; 62
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	cd bf       	out	0x3d, r28	; 61
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	a0 e2       	ldi	r26, 0x20	; 32
    19dc:	b2 e4       	ldi	r27, 0x42	; 66
    19de:	8d ab       	std	Y+53, r24	; 0x35
    19e0:	9e ab       	std	Y+54, r25	; 0x36
    19e2:	af ab       	std	Y+55, r26	; 0x37
    19e4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e6:	6d a9       	ldd	r22, Y+53	; 0x35
    19e8:	7e a9       	ldd	r23, Y+54	; 0x36
    19ea:	8f a9       	ldd	r24, Y+55	; 0x37
    19ec:	98 ad       	ldd	r25, Y+56	; 0x38
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	4a ef       	ldi	r20, 0xFA	; 250
    19f4:	54 e4       	ldi	r21, 0x44	; 68
    19f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	89 ab       	std	Y+49, r24	; 0x31
    1a00:	9a ab       	std	Y+50, r25	; 0x32
    1a02:	ab ab       	std	Y+51, r26	; 0x33
    1a04:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a06:	69 a9       	ldd	r22, Y+49	; 0x31
    1a08:	7a a9       	ldd	r23, Y+50	; 0x32
    1a0a:	8b a9       	ldd	r24, Y+51	; 0x33
    1a0c:	9c a9       	ldd	r25, Y+52	; 0x34
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	40 e8       	ldi	r20, 0x80	; 128
    1a14:	5f e3       	ldi	r21, 0x3F	; 63
    1a16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a1a:	88 23       	and	r24, r24
    1a1c:	2c f4       	brge	.+10     	; 0x1a28 <CLCD_voidInit+0x66>
		__ticks = 1;
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	98 ab       	std	Y+48, r25	; 0x30
    1a24:	8f a7       	std	Y+47, r24	; 0x2f
    1a26:	3f c0       	rjmp	.+126    	; 0x1aa6 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1a28:	69 a9       	ldd	r22, Y+49	; 0x31
    1a2a:	7a a9       	ldd	r23, Y+50	; 0x32
    1a2c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a2e:	9c a9       	ldd	r25, Y+52	; 0x34
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	3f ef       	ldi	r19, 0xFF	; 255
    1a34:	4f e7       	ldi	r20, 0x7F	; 127
    1a36:	57 e4       	ldi	r21, 0x47	; 71
    1a38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a3c:	18 16       	cp	r1, r24
    1a3e:	4c f5       	brge	.+82     	; 0x1a92 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a40:	6d a9       	ldd	r22, Y+53	; 0x35
    1a42:	7e a9       	ldd	r23, Y+54	; 0x36
    1a44:	8f a9       	ldd	r24, Y+55	; 0x37
    1a46:	98 ad       	ldd	r25, Y+56	; 0x38
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	40 e2       	ldi	r20, 0x20	; 32
    1a4e:	51 e4       	ldi	r21, 0x41	; 65
    1a50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	bc 01       	movw	r22, r24
    1a5a:	cd 01       	movw	r24, r26
    1a5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a60:	dc 01       	movw	r26, r24
    1a62:	cb 01       	movw	r24, r22
    1a64:	98 ab       	std	Y+48, r25	; 0x30
    1a66:	8f a7       	std	Y+47, r24	; 0x2f
    1a68:	0f c0       	rjmp	.+30     	; 0x1a88 <CLCD_voidInit+0xc6>
    1a6a:	88 ec       	ldi	r24, 0xC8	; 200
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	9e a7       	std	Y+46, r25	; 0x2e
    1a70:	8d a7       	std	Y+45, r24	; 0x2d
    1a72:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a74:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a76:	01 97       	sbiw	r24, 0x01	; 1
    1a78:	f1 f7       	brne	.-4      	; 0x1a76 <CLCD_voidInit+0xb4>
    1a7a:	9e a7       	std	Y+46, r25	; 0x2e
    1a7c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a80:	98 a9       	ldd	r25, Y+48	; 0x30
    1a82:	01 97       	sbiw	r24, 0x01	; 1
    1a84:	98 ab       	std	Y+48, r25	; 0x30
    1a86:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a88:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a8a:	98 a9       	ldd	r25, Y+48	; 0x30
    1a8c:	00 97       	sbiw	r24, 0x00	; 0
    1a8e:	69 f7       	brne	.-38     	; 0x1a6a <CLCD_voidInit+0xa8>
    1a90:	14 c0       	rjmp	.+40     	; 0x1aba <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a92:	69 a9       	ldd	r22, Y+49	; 0x31
    1a94:	7a a9       	ldd	r23, Y+50	; 0x32
    1a96:	8b a9       	ldd	r24, Y+51	; 0x33
    1a98:	9c a9       	ldd	r25, Y+52	; 0x34
    1a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	98 ab       	std	Y+48, r25	; 0x30
    1aa4:	8f a7       	std	Y+47, r24	; 0x2f
    1aa6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aa8:	98 a9       	ldd	r25, Y+48	; 0x30
    1aaa:	9c a7       	std	Y+44, r25	; 0x2c
    1aac:	8b a7       	std	Y+43, r24	; 0x2b
    1aae:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ab0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ab2:	01 97       	sbiw	r24, 0x01	; 1
    1ab4:	f1 f7       	brne	.-4      	; 0x1ab2 <CLCD_voidInit+0xf0>
    1ab6:	9c a7       	std	Y+44, r25	; 0x2c
    1ab8:	8b a7       	std	Y+43, r24	; 0x2b
	CLCD_voidSendCommand(0b00000001);
#elif CLCD_CHIOCE_MODE==_4_BIT_MODE
	/*WAIT FOR MORE THEN 30 MS*/
	_delay_ms(40);
	/*function set command: Set Bit 5 */
	CLCD_voidSendCommand(0b00100000);
    1aba:	80 e2       	ldi	r24, 0x20	; 32
    1abc:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(0b00100000);
    1ac0:	80 e2       	ldi	r24, 0x20	; 32
    1ac2:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>

	/*function set command:(7_Bit) N --> Lines,(6_Bit) F --> 5*8 font */
	CLCD_voidSendCommand(0b10000000);
    1ac6:	80 e8       	ldi	r24, 0x80	; 128
    1ac8:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	a0 e8       	ldi	r26, 0x80	; 128
    1ad2:	bf e3       	ldi	r27, 0x3F	; 63
    1ad4:	8f a3       	std	Y+39, r24	; 0x27
    1ad6:	98 a7       	std	Y+40, r25	; 0x28
    1ad8:	a9 a7       	std	Y+41, r26	; 0x29
    1ada:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1adc:	6f a1       	ldd	r22, Y+39	; 0x27
    1ade:	78 a5       	ldd	r23, Y+40	; 0x28
    1ae0:	89 a5       	ldd	r24, Y+41	; 0x29
    1ae2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	4a ef       	ldi	r20, 0xFA	; 250
    1aea:	54 e4       	ldi	r21, 0x44	; 68
    1aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	8b a3       	std	Y+35, r24	; 0x23
    1af6:	9c a3       	std	Y+36, r25	; 0x24
    1af8:	ad a3       	std	Y+37, r26	; 0x25
    1afa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1afc:	6b a1       	ldd	r22, Y+35	; 0x23
    1afe:	7c a1       	ldd	r23, Y+36	; 0x24
    1b00:	8d a1       	ldd	r24, Y+37	; 0x25
    1b02:	9e a1       	ldd	r25, Y+38	; 0x26
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	40 e8       	ldi	r20, 0x80	; 128
    1b0a:	5f e3       	ldi	r21, 0x3F	; 63
    1b0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b10:	88 23       	and	r24, r24
    1b12:	2c f4       	brge	.+10     	; 0x1b1e <CLCD_voidInit+0x15c>
		__ticks = 1;
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	9a a3       	std	Y+34, r25	; 0x22
    1b1a:	89 a3       	std	Y+33, r24	; 0x21
    1b1c:	3f c0       	rjmp	.+126    	; 0x1b9c <CLCD_voidInit+0x1da>
	else if (__tmp > 65535)
    1b1e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b20:	7c a1       	ldd	r23, Y+36	; 0x24
    1b22:	8d a1       	ldd	r24, Y+37	; 0x25
    1b24:	9e a1       	ldd	r25, Y+38	; 0x26
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	3f ef       	ldi	r19, 0xFF	; 255
    1b2a:	4f e7       	ldi	r20, 0x7F	; 127
    1b2c:	57 e4       	ldi	r21, 0x47	; 71
    1b2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b32:	18 16       	cp	r1, r24
    1b34:	4c f5       	brge	.+82     	; 0x1b88 <CLCD_voidInit+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b36:	6f a1       	ldd	r22, Y+39	; 0x27
    1b38:	78 a5       	ldd	r23, Y+40	; 0x28
    1b3a:	89 a5       	ldd	r24, Y+41	; 0x29
    1b3c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	40 e2       	ldi	r20, 0x20	; 32
    1b44:	51 e4       	ldi	r21, 0x41	; 65
    1b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	bc 01       	movw	r22, r24
    1b50:	cd 01       	movw	r24, r26
    1b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	9a a3       	std	Y+34, r25	; 0x22
    1b5c:	89 a3       	std	Y+33, r24	; 0x21
    1b5e:	0f c0       	rjmp	.+30     	; 0x1b7e <CLCD_voidInit+0x1bc>
    1b60:	88 ec       	ldi	r24, 0xC8	; 200
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	98 a3       	std	Y+32, r25	; 0x20
    1b66:	8f 8f       	std	Y+31, r24	; 0x1f
    1b68:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b6a:	98 a1       	ldd	r25, Y+32	; 0x20
    1b6c:	01 97       	sbiw	r24, 0x01	; 1
    1b6e:	f1 f7       	brne	.-4      	; 0x1b6c <CLCD_voidInit+0x1aa>
    1b70:	98 a3       	std	Y+32, r25	; 0x20
    1b72:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b74:	89 a1       	ldd	r24, Y+33	; 0x21
    1b76:	9a a1       	ldd	r25, Y+34	; 0x22
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	9a a3       	std	Y+34, r25	; 0x22
    1b7c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b7e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b80:	9a a1       	ldd	r25, Y+34	; 0x22
    1b82:	00 97       	sbiw	r24, 0x00	; 0
    1b84:	69 f7       	brne	.-38     	; 0x1b60 <CLCD_voidInit+0x19e>
    1b86:	14 c0       	rjmp	.+40     	; 0x1bb0 <CLCD_voidInit+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b88:	6b a1       	ldd	r22, Y+35	; 0x23
    1b8a:	7c a1       	ldd	r23, Y+36	; 0x24
    1b8c:	8d a1       	ldd	r24, Y+37	; 0x25
    1b8e:	9e a1       	ldd	r25, Y+38	; 0x26
    1b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	9a a3       	std	Y+34, r25	; 0x22
    1b9a:	89 a3       	std	Y+33, r24	; 0x21
    1b9c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b9e:	9a a1       	ldd	r25, Y+34	; 0x22
    1ba0:	9e 8f       	std	Y+30, r25	; 0x1e
    1ba2:	8d 8f       	std	Y+29, r24	; 0x1d
    1ba4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ba6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <CLCD_voidInit+0x1e6>
    1bac:	9e 8f       	std	Y+30, r25	; 0x1e
    1bae:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	CLCD_voidSendCommand(0b0000);
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
	/*Display No/00f ctrl  */
	/*Set Bit 7 ,(6_Bit) D --> display enable ,C --> disable cursor ,B --> no blink cursor*/
	CLCD_voidSendCommand(0b11000000);
    1bb6:	80 ec       	ldi	r24, 0xC0	; 192
    1bb8:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	a0 e8       	ldi	r26, 0x80	; 128
    1bc2:	bf e3       	ldi	r27, 0x3F	; 63
    1bc4:	89 8f       	std	Y+25, r24	; 0x19
    1bc6:	9a 8f       	std	Y+26, r25	; 0x1a
    1bc8:	ab 8f       	std	Y+27, r26	; 0x1b
    1bca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bcc:	69 8d       	ldd	r22, Y+25	; 0x19
    1bce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	4a ef       	ldi	r20, 0xFA	; 250
    1bda:	54 e4       	ldi	r21, 0x44	; 68
    1bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	8d 8b       	std	Y+21, r24	; 0x15
    1be6:	9e 8b       	std	Y+22, r25	; 0x16
    1be8:	af 8b       	std	Y+23, r26	; 0x17
    1bea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bec:	6d 89       	ldd	r22, Y+21	; 0x15
    1bee:	7e 89       	ldd	r23, Y+22	; 0x16
    1bf0:	8f 89       	ldd	r24, Y+23	; 0x17
    1bf2:	98 8d       	ldd	r25, Y+24	; 0x18
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	40 e8       	ldi	r20, 0x80	; 128
    1bfa:	5f e3       	ldi	r21, 0x3F	; 63
    1bfc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c00:	88 23       	and	r24, r24
    1c02:	2c f4       	brge	.+10     	; 0x1c0e <CLCD_voidInit+0x24c>
		__ticks = 1;
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	9c 8b       	std	Y+20, r25	; 0x14
    1c0a:	8b 8b       	std	Y+19, r24	; 0x13
    1c0c:	3f c0       	rjmp	.+126    	; 0x1c8c <CLCD_voidInit+0x2ca>
	else if (__tmp > 65535)
    1c0e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c10:	7e 89       	ldd	r23, Y+22	; 0x16
    1c12:	8f 89       	ldd	r24, Y+23	; 0x17
    1c14:	98 8d       	ldd	r25, Y+24	; 0x18
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	3f ef       	ldi	r19, 0xFF	; 255
    1c1a:	4f e7       	ldi	r20, 0x7F	; 127
    1c1c:	57 e4       	ldi	r21, 0x47	; 71
    1c1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c22:	18 16       	cp	r1, r24
    1c24:	4c f5       	brge	.+82     	; 0x1c78 <CLCD_voidInit+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c26:	69 8d       	ldd	r22, Y+25	; 0x19
    1c28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e2       	ldi	r20, 0x20	; 32
    1c34:	51 e4       	ldi	r21, 0x41	; 65
    1c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	bc 01       	movw	r22, r24
    1c40:	cd 01       	movw	r24, r26
    1c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	9c 8b       	std	Y+20, r25	; 0x14
    1c4c:	8b 8b       	std	Y+19, r24	; 0x13
    1c4e:	0f c0       	rjmp	.+30     	; 0x1c6e <CLCD_voidInit+0x2ac>
    1c50:	88 ec       	ldi	r24, 0xC8	; 200
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	9a 8b       	std	Y+18, r25	; 0x12
    1c56:	89 8b       	std	Y+17, r24	; 0x11
    1c58:	89 89       	ldd	r24, Y+17	; 0x11
    1c5a:	9a 89       	ldd	r25, Y+18	; 0x12
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	f1 f7       	brne	.-4      	; 0x1c5c <CLCD_voidInit+0x29a>
    1c60:	9a 8b       	std	Y+18, r25	; 0x12
    1c62:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c64:	8b 89       	ldd	r24, Y+19	; 0x13
    1c66:	9c 89       	ldd	r25, Y+20	; 0x14
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	9c 8b       	std	Y+20, r25	; 0x14
    1c6c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c70:	9c 89       	ldd	r25, Y+20	; 0x14
    1c72:	00 97       	sbiw	r24, 0x00	; 0
    1c74:	69 f7       	brne	.-38     	; 0x1c50 <CLCD_voidInit+0x28e>
    1c76:	14 c0       	rjmp	.+40     	; 0x1ca0 <CLCD_voidInit+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c78:	6d 89       	ldd	r22, Y+21	; 0x15
    1c7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	9c 8b       	std	Y+20, r25	; 0x14
    1c8a:	8b 8b       	std	Y+19, r24	; 0x13
    1c8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c8e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c90:	98 8b       	std	Y+16, r25	; 0x10
    1c92:	8f 87       	std	Y+15, r24	; 0x0f
    1c94:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c96:	98 89       	ldd	r25, Y+16	; 0x10
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	f1 f7       	brne	.-4      	; 0x1c98 <CLCD_voidInit+0x2d6>
    1c9c:	98 8b       	std	Y+16, r25	; 0x10
    1c9e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLCD_voidSendCommand(0b0000);
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
	/*Display Clear */
	CLCD_voidSendCommand(0b00010000);
    1ca6:	80 e1       	ldi	r24, 0x10	; 16
    1ca8:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	a0 e0       	ldi	r26, 0x00	; 0
    1cb2:	b0 e4       	ldi	r27, 0x40	; 64
    1cb4:	8b 87       	std	Y+11, r24	; 0x0b
    1cb6:	9c 87       	std	Y+12, r25	; 0x0c
    1cb8:	ad 87       	std	Y+13, r26	; 0x0d
    1cba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	4a ef       	ldi	r20, 0xFA	; 250
    1cca:	54 e4       	ldi	r21, 0x44	; 68
    1ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	8f 83       	std	Y+7, r24	; 0x07
    1cd6:	98 87       	std	Y+8, r25	; 0x08
    1cd8:	a9 87       	std	Y+9, r26	; 0x09
    1cda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cdc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cde:	78 85       	ldd	r23, Y+8	; 0x08
    1ce0:	89 85       	ldd	r24, Y+9	; 0x09
    1ce2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	40 e8       	ldi	r20, 0x80	; 128
    1cea:	5f e3       	ldi	r21, 0x3F	; 63
    1cec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cf0:	88 23       	and	r24, r24
    1cf2:	2c f4       	brge	.+10     	; 0x1cfe <CLCD_voidInit+0x33c>
		__ticks = 1;
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	9e 83       	std	Y+6, r25	; 0x06
    1cfa:	8d 83       	std	Y+5, r24	; 0x05
    1cfc:	3f c0       	rjmp	.+126    	; 0x1d7c <CLCD_voidInit+0x3ba>
	else if (__tmp > 65535)
    1cfe:	6f 81       	ldd	r22, Y+7	; 0x07
    1d00:	78 85       	ldd	r23, Y+8	; 0x08
    1d02:	89 85       	ldd	r24, Y+9	; 0x09
    1d04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	3f ef       	ldi	r19, 0xFF	; 255
    1d0a:	4f e7       	ldi	r20, 0x7F	; 127
    1d0c:	57 e4       	ldi	r21, 0x47	; 71
    1d0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d12:	18 16       	cp	r1, r24
    1d14:	4c f5       	brge	.+82     	; 0x1d68 <CLCD_voidInit+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	40 e2       	ldi	r20, 0x20	; 32
    1d24:	51 e4       	ldi	r21, 0x41	; 65
    1d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	bc 01       	movw	r22, r24
    1d30:	cd 01       	movw	r24, r26
    1d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	9e 83       	std	Y+6, r25	; 0x06
    1d3c:	8d 83       	std	Y+5, r24	; 0x05
    1d3e:	0f c0       	rjmp	.+30     	; 0x1d5e <CLCD_voidInit+0x39c>
    1d40:	88 ec       	ldi	r24, 0xC8	; 200
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	9c 83       	std	Y+4, r25	; 0x04
    1d46:	8b 83       	std	Y+3, r24	; 0x03
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	f1 f7       	brne	.-4      	; 0x1d4c <CLCD_voidInit+0x38a>
    1d50:	9c 83       	std	Y+4, r25	; 0x04
    1d52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d54:	8d 81       	ldd	r24, Y+5	; 0x05
    1d56:	9e 81       	ldd	r25, Y+6	; 0x06
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	9e 83       	std	Y+6, r25	; 0x06
    1d5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d60:	9e 81       	ldd	r25, Y+6	; 0x06
    1d62:	00 97       	sbiw	r24, 0x00	; 0
    1d64:	69 f7       	brne	.-38     	; 0x1d40 <CLCD_voidInit+0x37e>
    1d66:	14 c0       	rjmp	.+40     	; 0x1d90 <CLCD_voidInit+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d68:	6f 81       	ldd	r22, Y+7	; 0x07
    1d6a:	78 85       	ldd	r23, Y+8	; 0x08
    1d6c:	89 85       	ldd	r24, Y+9	; 0x09
    1d6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	9e 83       	std	Y+6, r25	; 0x06
    1d7a:	8d 83       	std	Y+5, r24	; 0x05
    1d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d80:	9a 83       	std	Y+2, r25	; 0x02
    1d82:	89 83       	std	Y+1, r24	; 0x01
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	9a 81       	ldd	r25, Y+2	; 0x02
    1d88:	01 97       	sbiw	r24, 0x01	; 1
    1d8a:	f1 f7       	brne	.-4      	; 0x1d88 <CLCD_voidInit+0x3c6>
    1d8c:	9a 83       	std	Y+2, r25	; 0x02
    1d8e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	iniIsFinich=1;
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	80 93 16 03 	sts	0x0316, r24
#else
#error "In correct cconfigrtion of LCD_MODE"
#endif
}
    1d96:	e8 96       	adiw	r28, 0x38	; 56
    1d98:	0f b6       	in	r0, 0x3f	; 63
    1d9a:	f8 94       	cli
    1d9c:	de bf       	out	0x3e, r29	; 62
    1d9e:	0f be       	out	0x3f, r0	; 63
    1da0:	cd bf       	out	0x3d, r28	; 61
    1da2:	cf 91       	pop	r28
    1da4:	df 91       	pop	r29
    1da6:	08 95       	ret

00001da8 <CLCD_voidSendString>:
void CLCD_voidSendString(const char* Copy_pcString)//char ASCII Value Constant not allow the func to change the sent string
{
    1da8:	df 93       	push	r29
    1daa:	cf 93       	push	r28
    1dac:	00 d0       	rcall	.+0      	; 0x1dae <CLCD_voidSendString+0x6>
    1dae:	0f 92       	push	r0
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	9b 83       	std	Y+3, r25	; 0x03
    1db6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8cnt=0;
    1db8:	19 82       	std	Y+1, r1	; 0x01
    1dba:	0e c0       	rjmp	.+28     	; 0x1dd8 <CLCD_voidSendString+0x30>
	while(Copy_pcString[Local_u8cnt]!='\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8cnt]);
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
    1dbe:	28 2f       	mov	r18, r24
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	e2 0f       	add	r30, r18
    1dca:	f3 1f       	adc	r31, r19
    1dcc:	80 81       	ld	r24, Z
    1dce:	0e 94 41 0b 	call	0x1682	; 0x1682 <CLCD_voidSendData>
		Local_u8cnt++;
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01
    1dd4:	8f 5f       	subi	r24, 0xFF	; 255
    1dd6:	89 83       	std	Y+1, r24	; 0x01
#endif
}
void CLCD_voidSendString(const char* Copy_pcString)//char ASCII Value Constant not allow the func to change the sent string
{
	u8 Local_u8cnt=0;
	while(Copy_pcString[Local_u8cnt]!='\0')
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	28 2f       	mov	r18, r24
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	9b 81       	ldd	r25, Y+3	; 0x03
    1de2:	fc 01       	movw	r30, r24
    1de4:	e2 0f       	add	r30, r18
    1de6:	f3 1f       	adc	r31, r19
    1de8:	80 81       	ld	r24, Z
    1dea:	88 23       	and	r24, r24
    1dec:	39 f7       	brne	.-50     	; 0x1dbc <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8cnt]);
		Local_u8cnt++;
	}
}
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	cf 91       	pop	r28
    1df6:	df 91       	pop	r29
    1df8:	08 95       	ret

00001dfa <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	00 d0       	rcall	.+0      	; 0x1e00 <CLCD_voidGoToXY+0x6>
    1e00:	0f 92       	push	r0
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    1e06:	8a 83       	std	Y+2, r24	; 0x02
    1e08:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	88 23       	and	r24, r24
    1e0e:	51 f4       	brne	.+20     	; 0x1e24 <CLCD_voidGoToXY+0x2a>
	{
		if (Copy_u8YPos > 15) {
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	80 31       	cpi	r24, 0x10	; 16
    1e14:	20 f0       	brcs	.+8      	; 0x1e1e <CLCD_voidGoToXY+0x24>
			Local_u8Address = 0x40 + Copy_u8YPos;
    1e16:	8b 81       	ldd	r24, Y+3	; 0x03
    1e18:	80 5c       	subi	r24, 0xC0	; 192
    1e1a:	89 83       	std	Y+1, r24	; 0x01
    1e1c:	09 c0       	rjmp	.+18     	; 0x1e30 <CLCD_voidGoToXY+0x36>
		} else {
			Local_u8Address = Copy_u8YPos;
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	89 83       	std	Y+1, r24	; 0x01
    1e22:	06 c0       	rjmp	.+12     	; 0x1e30 <CLCD_voidGoToXY+0x36>
		}
	}
	else if(Copy_u8XPos==1)
    1e24:	8a 81       	ldd	r24, Y+2	; 0x02
    1e26:	81 30       	cpi	r24, 0x01	; 1
    1e28:	19 f4       	brne	.+6      	; 0x1e30 <CLCD_voidGoToXY+0x36>
	{
		Local_u8Address=0x40+Copy_u8YPos;
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	80 5c       	subi	r24, 0xC0	; 192
    1e2e:	89 83       	std	Y+1, r24	; 0x01
	}
	//put command from data sheet
	CLCD_voidSendCommand(Local_u8Address+128);
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	80 58       	subi	r24, 0x80	; 128
    1e34:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
}
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	cf 91       	pop	r28
    1e40:	df 91       	pop	r29
    1e42:	08 95       	ret

00001e44 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNmber,u8 Copy_u8XPos,u8 Copy_u8Ypos)
{
    1e44:	df 93       	push	r29
    1e46:	cf 93       	push	r28
    1e48:	cd b7       	in	r28, 0x3d	; 61
    1e4a:	de b7       	in	r29, 0x3e	; 62
    1e4c:	27 97       	sbiw	r28, 0x07	; 7
    1e4e:	0f b6       	in	r0, 0x3f	; 63
    1e50:	f8 94       	cli
    1e52:	de bf       	out	0x3e, r29	; 62
    1e54:	0f be       	out	0x3f, r0	; 63
    1e56:	cd bf       	out	0x3d, r28	; 61
    1e58:	9c 83       	std	Y+4, r25	; 0x04
    1e5a:	8b 83       	std	Y+3, r24	; 0x03
    1e5c:	6d 83       	std	Y+5, r22	; 0x05
    1e5e:	4e 83       	std	Y+6, r20	; 0x06
    1e60:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress=0;
    1e62:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8iterator;
	/*Calculate the CGRAM address whose each block is 8 bytes */
	Local_u8CGRAMAddress= Copy_u8PatternNmber*8;
    1e64:	8d 81       	ldd	r24, Y+5	; 0x05
    1e66:	88 2f       	mov	r24, r24
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	88 0f       	add	r24, r24
    1e6c:	99 1f       	adc	r25, r25
    1e6e:	88 0f       	add	r24, r24
    1e70:	99 1f       	adc	r25, r25
    1e72:	88 0f       	add	r24, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	8a 83       	std	Y+2, r24	; 0x02

	/*Send CGRAM address command to LCD, with setting bit 6 , clear bit 7 */
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
    1e78:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7a:	80 5c       	subi	r24, 0xC0	; 192
    1e7c:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>

	/*Write the pattern into CGRAM */
	for(Local_u8iterator=0;Local_u8iterator<8;Local_u8iterator++)
    1e80:	19 82       	std	Y+1, r1	; 0x01
    1e82:	0e c0       	rjmp	.+28     	; 0x1ea0 <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8iterator]);
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
    1e86:	28 2f       	mov	r18, r24
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8e:	fc 01       	movw	r30, r24
    1e90:	e2 0f       	add	r30, r18
    1e92:	f3 1f       	adc	r31, r19
    1e94:	80 81       	ld	r24, Z
    1e96:	0e 94 41 0b 	call	0x1682	; 0x1682 <CLCD_voidSendData>

	/*Send CGRAM address command to LCD, with setting bit 6 , clear bit 7 */
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/*Write the pattern into CGRAM */
	for(Local_u8iterator=0;Local_u8iterator<8;Local_u8iterator++)
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	8f 5f       	subi	r24, 0xFF	; 255
    1e9e:	89 83       	std	Y+1, r24	; 0x01
    1ea0:	89 81       	ldd	r24, Y+1	; 0x01
    1ea2:	88 30       	cpi	r24, 0x08	; 8
    1ea4:	78 f3       	brcs	.-34     	; 0x1e84 <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8iterator]);
	}
	/* Go back to DDRAM to display the pattern */
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8Ypos);
    1ea6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ea8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eaa:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>

	/* Display the pattern written  in the CGRAM */
	CLCD_voidSendData(Copy_u8PatternNmber);
    1eae:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb0:	0e 94 41 0b 	call	0x1682	; 0x1682 <CLCD_voidSendData>

}
    1eb4:	27 96       	adiw	r28, 0x07	; 7
    1eb6:	0f b6       	in	r0, 0x3f	; 63
    1eb8:	f8 94       	cli
    1eba:	de bf       	out	0x3e, r29	; 62
    1ebc:	0f be       	out	0x3f, r0	; 63
    1ebe:	cd bf       	out	0x3d, r28	; 61
    1ec0:	cf 91       	pop	r28
    1ec2:	df 91       	pop	r29
    1ec4:	08 95       	ret

00001ec6 <CLCD_voidWriteNumber>:

void CLCD_voidWriteNumber(u16 Copy_u16Number)
{
    1ec6:	df 93       	push	r29
    1ec8:	cf 93       	push	r28
    1eca:	00 d0       	rcall	.+0      	; 0x1ecc <CLCD_voidWriteNumber+0x6>
    1ecc:	00 d0       	rcall	.+0      	; 0x1ece <CLCD_voidWriteNumber+0x8>
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
    1ed2:	9c 83       	std	Y+4, r25	; 0x04
    1ed4:	8b 83       	std	Y+3, r24	; 0x03

	u8 Max_Digits = Num_length(Copy_u16Number);
    1ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eda:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <Num_length>
    1ede:	8a 83       	std	Y+2, r24	; 0x02
	for (s8 i = Max_Digits; i > 0; i--) {
    1ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee2:	89 83       	std	Y+1, r24	; 0x01
    1ee4:	1d c0       	rjmp	.+58     	; 0x1f20 <CLCD_voidWriteNumber+0x5a>
		CLCD_voidSendData((Copy_u16Number / Multi_N_10(i - 1)) + '0');
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	81 50       	subi	r24, 0x01	; 1
    1eea:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <Multi_N_10>
    1eee:	9c 01       	movw	r18, r24
    1ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef4:	b9 01       	movw	r22, r18
    1ef6:	0e 94 88 3c 	call	0x7910	; 0x7910 <__udivmodhi4>
    1efa:	cb 01       	movw	r24, r22
    1efc:	80 5d       	subi	r24, 0xD0	; 208
    1efe:	0e 94 41 0b 	call	0x1682	; 0x1682 <CLCD_voidSendData>
		Copy_u16Number = (Copy_u16Number % Multi_N_10(i - 1));
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	81 50       	subi	r24, 0x01	; 1
    1f06:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <Multi_N_10>
    1f0a:	9c 01       	movw	r18, r24
    1f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f10:	b9 01       	movw	r22, r18
    1f12:	0e 94 88 3c 	call	0x7910	; 0x7910 <__udivmodhi4>
    1f16:	9c 83       	std	Y+4, r25	; 0x04
    1f18:	8b 83       	std	Y+3, r24	; 0x03

void CLCD_voidWriteNumber(u16 Copy_u16Number)
{

	u8 Max_Digits = Num_length(Copy_u16Number);
	for (s8 i = Max_Digits; i > 0; i--) {
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	81 50       	subi	r24, 0x01	; 1
    1f1e:	89 83       	std	Y+1, r24	; 0x01
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
    1f22:	18 16       	cp	r1, r24
    1f24:	04 f3       	brlt	.-64     	; 0x1ee6 <CLCD_voidWriteNumber+0x20>
		CLCD_voidSendData((Copy_u16Number / Multi_N_10(i - 1)) + '0');
		Copy_u16Number = (Copy_u16Number % Multi_N_10(i - 1));
	}
}
    1f26:	0f 90       	pop	r0
    1f28:	0f 90       	pop	r0
    1f2a:	0f 90       	pop	r0
    1f2c:	0f 90       	pop	r0
    1f2e:	cf 91       	pop	r28
    1f30:	df 91       	pop	r29
    1f32:	08 95       	ret

00001f34 <Num_length>:


static u8 Num_length(u16 num) {
    1f34:	df 93       	push	r29
    1f36:	cf 93       	push	r28
    1f38:	00 d0       	rcall	.+0      	; 0x1f3a <Num_length+0x6>
    1f3a:	00 d0       	rcall	.+0      	; 0x1f3c <Num_length+0x8>
    1f3c:	cd b7       	in	r28, 0x3d	; 61
    1f3e:	de b7       	in	r29, 0x3e	; 62
    1f40:	9b 83       	std	Y+3, r25	; 0x03
    1f42:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Cnt = 0;
    1f44:	19 82       	std	Y+1, r1	; 0x01
	if(num == 0)
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
    1f48:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4a:	00 97       	sbiw	r24, 0x00	; 0
    1f4c:	81 f4       	brne	.+32     	; 0x1f6e <Num_length+0x3a>
		return 1;
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	8c 83       	std	Y+4, r24	; 0x04
    1f52:	13 c0       	rjmp	.+38     	; 0x1f7a <Num_length+0x46>
	while (num != 0) {
		num /= 10;
    1f54:	8a 81       	ldd	r24, Y+2	; 0x02
    1f56:	9b 81       	ldd	r25, Y+3	; 0x03
    1f58:	2a e0       	ldi	r18, 0x0A	; 10
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	b9 01       	movw	r22, r18
    1f5e:	0e 94 88 3c 	call	0x7910	; 0x7910 <__udivmodhi4>
    1f62:	cb 01       	movw	r24, r22
    1f64:	9b 83       	std	Y+3, r25	; 0x03
    1f66:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8Cnt++;
    1f68:	89 81       	ldd	r24, Y+1	; 0x01
    1f6a:	8f 5f       	subi	r24, 0xFF	; 255
    1f6c:	89 83       	std	Y+1, r24	; 0x01

static u8 Num_length(u16 num) {
	u8 Local_u8Cnt = 0;
	if(num == 0)
		return 1;
	while (num != 0) {
    1f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f70:	9b 81       	ldd	r25, Y+3	; 0x03
    1f72:	00 97       	sbiw	r24, 0x00	; 0
    1f74:	79 f7       	brne	.-34     	; 0x1f54 <Num_length+0x20>
		num /= 10;
		Local_u8Cnt++;
	}
	return Local_u8Cnt;
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	8c 83       	std	Y+4, r24	; 0x04
    1f7a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1f7c:	0f 90       	pop	r0
    1f7e:	0f 90       	pop	r0
    1f80:	0f 90       	pop	r0
    1f82:	0f 90       	pop	r0
    1f84:	cf 91       	pop	r28
    1f86:	df 91       	pop	r29
    1f88:	08 95       	ret

00001f8a <Multi_N_10>:
static u16 Multi_N_10(u8 N) {
    1f8a:	df 93       	push	r29
    1f8c:	cf 93       	push	r28
    1f8e:	00 d0       	rcall	.+0      	; 0x1f90 <Multi_N_10+0x6>
    1f90:	00 d0       	rcall	.+0      	; 0x1f92 <Multi_N_10+0x8>
    1f92:	cd b7       	in	r28, 0x3d	; 61
    1f94:	de b7       	in	r29, 0x3e	; 62
    1f96:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8Cnt;
	u16 p = 1;
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	9a 83       	std	Y+2, r25	; 0x02
    1f9e:	89 83       	std	Y+1, r24	; 0x01
	for (Local_u8Cnt = 0; Local_u8Cnt < N; Local_u8Cnt++)
    1fa0:	1b 82       	std	Y+3, r1	; 0x03
    1fa2:	11 c0       	rjmp	.+34     	; 0x1fc6 <Multi_N_10+0x3c>
		p *= 10;
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa8:	9c 01       	movw	r18, r24
    1faa:	22 0f       	add	r18, r18
    1fac:	33 1f       	adc	r19, r19
    1fae:	c9 01       	movw	r24, r18
    1fb0:	88 0f       	add	r24, r24
    1fb2:	99 1f       	adc	r25, r25
    1fb4:	88 0f       	add	r24, r24
    1fb6:	99 1f       	adc	r25, r25
    1fb8:	82 0f       	add	r24, r18
    1fba:	93 1f       	adc	r25, r19
    1fbc:	9a 83       	std	Y+2, r25	; 0x02
    1fbe:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8Cnt;
}
static u16 Multi_N_10(u8 N) {
	u8 Local_u8Cnt;
	u16 p = 1;
	for (Local_u8Cnt = 0; Local_u8Cnt < N; Local_u8Cnt++)
    1fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc2:	8f 5f       	subi	r24, 0xFF	; 255
    1fc4:	8b 83       	std	Y+3, r24	; 0x03
    1fc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fca:	98 17       	cp	r25, r24
    1fcc:	58 f3       	brcs	.-42     	; 0x1fa4 <Multi_N_10+0x1a>
		p *= 10;
	return p;
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1fd2:	0f 90       	pop	r0
    1fd4:	0f 90       	pop	r0
    1fd6:	0f 90       	pop	r0
    1fd8:	0f 90       	pop	r0
    1fda:	cf 91       	pop	r28
    1fdc:	df 91       	pop	r29
    1fde:	08 95       	ret

00001fe0 <DAC_voidSetAnalogValue>:
#include "../HAL/DAC_interface.h"
#include "../HAL/DAC_config.h"
#include "../HAL/DAC_private.h"

void DAC_voidSetAnalogValue(u8 Copy_u8Port,u16 Copy_u16Value_mV)
{
    1fe0:	df 93       	push	r29
    1fe2:	cf 93       	push	r28
    1fe4:	00 d0       	rcall	.+0      	; 0x1fe6 <DAC_voidSetAnalogValue+0x6>
    1fe6:	0f 92       	push	r0
    1fe8:	cd b7       	in	r28, 0x3d	; 61
    1fea:	de b7       	in	r29, 0x3e	; 62
    1fec:	89 83       	std	Y+1, r24	; 0x01
    1fee:	7b 83       	std	Y+3, r23	; 0x03
    1ff0:	6a 83       	std	Y+2, r22	; 0x02
	DIO_u8SetPortValue(Copy_u8Port,(u8)((u16)((Copy_u16Value_mV*255UL)/5000UL)));
    1ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff6:	cc 01       	movw	r24, r24
    1ff8:	a0 e0       	ldi	r26, 0x00	; 0
    1ffa:	b0 e0       	ldi	r27, 0x00	; 0
    1ffc:	2f ef       	ldi	r18, 0xFF	; 255
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	40 e0       	ldi	r20, 0x00	; 0
    2002:	50 e0       	ldi	r21, 0x00	; 0
    2004:	bc 01       	movw	r22, r24
    2006:	cd 01       	movw	r24, r26
    2008:	0e 94 69 3c 	call	0x78d2	; 0x78d2 <__mulsi3>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	28 e8       	ldi	r18, 0x88	; 136
    2012:	33 e1       	ldi	r19, 0x13	; 19
    2014:	40 e0       	ldi	r20, 0x00	; 0
    2016:	50 e0       	ldi	r21, 0x00	; 0
    2018:	bc 01       	movw	r22, r24
    201a:	cd 01       	movw	r24, r26
    201c:	0e 94 9c 3c 	call	0x7938	; 0x7938 <__udivmodsi4>
    2020:	da 01       	movw	r26, r20
    2022:	c9 01       	movw	r24, r18
    2024:	98 2f       	mov	r25, r24
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	69 2f       	mov	r22, r25
    202a:	0e 94 36 11 	call	0x226c	; 0x226c <DIO_u8SetPortValue>
}
    202e:	0f 90       	pop	r0
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
    2034:	cf 91       	pop	r28
    2036:	df 91       	pop	r29
    2038:	08 95       	ret

0000203a <DIO_u8SetPinValue>:
#include "../MCAL/DIO_config.h"
#include "../MCAL/DIO_interface.h"
#include "../MCAL/DIO_register.h"

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
    203a:	df 93       	push	r29
    203c:	cf 93       	push	r28
    203e:	cd b7       	in	r28, 0x3d	; 61
    2040:	de b7       	in	r29, 0x3e	; 62
    2042:	28 97       	sbiw	r28, 0x08	; 8
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	f8 94       	cli
    2048:	de bf       	out	0x3e, r29	; 62
    204a:	0f be       	out	0x3f, r0	; 63
    204c:	cd bf       	out	0x3d, r28	; 61
    204e:	8a 83       	std	Y+2, r24	; 0x02
    2050:	6b 83       	std	Y+3, r22	; 0x03
    2052:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    2054:	19 82       	std	Y+1, r1	; 0x01
	if(DIO_PIN_HIGH==Copy_u8Value)
    2056:	8c 81       	ldd	r24, Y+4	; 0x04
    2058:	81 30       	cpi	r24, 0x01	; 1
    205a:	09 f0       	breq	.+2      	; 0x205e <DIO_u8SetPinValue+0x24>
    205c:	79 c0       	rjmp	.+242    	; 0x2150 <DIO_u8SetPinValue+0x116>
	{
		if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	88 30       	cpi	r24, 0x08	; 8
    2062:	08 f0       	brcs	.+2      	; 0x2066 <DIO_u8SetPinValue+0x2c>
    2064:	72 c0       	rjmp	.+228    	; 0x214a <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	28 2f       	mov	r18, r24
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	38 87       	std	Y+8, r19	; 0x08
    206e:	2f 83       	std	Y+7, r18	; 0x07
    2070:	8f 81       	ldd	r24, Y+7	; 0x07
    2072:	98 85       	ldd	r25, Y+8	; 0x08
    2074:	81 30       	cpi	r24, 0x01	; 1
    2076:	91 05       	cpc	r25, r1
    2078:	49 f1       	breq	.+82     	; 0x20cc <DIO_u8SetPinValue+0x92>
    207a:	2f 81       	ldd	r18, Y+7	; 0x07
    207c:	38 85       	ldd	r19, Y+8	; 0x08
    207e:	22 30       	cpi	r18, 0x02	; 2
    2080:	31 05       	cpc	r19, r1
    2082:	2c f4       	brge	.+10     	; 0x208e <DIO_u8SetPinValue+0x54>
    2084:	8f 81       	ldd	r24, Y+7	; 0x07
    2086:	98 85       	ldd	r25, Y+8	; 0x08
    2088:	00 97       	sbiw	r24, 0x00	; 0
    208a:	61 f0       	breq	.+24     	; 0x20a4 <DIO_u8SetPinValue+0x6a>
    208c:	5b c0       	rjmp	.+182    	; 0x2144 <DIO_u8SetPinValue+0x10a>
    208e:	2f 81       	ldd	r18, Y+7	; 0x07
    2090:	38 85       	ldd	r19, Y+8	; 0x08
    2092:	22 30       	cpi	r18, 0x02	; 2
    2094:	31 05       	cpc	r19, r1
    2096:	71 f1       	breq	.+92     	; 0x20f4 <DIO_u8SetPinValue+0xba>
    2098:	8f 81       	ldd	r24, Y+7	; 0x07
    209a:	98 85       	ldd	r25, Y+8	; 0x08
    209c:	83 30       	cpi	r24, 0x03	; 3
    209e:	91 05       	cpc	r25, r1
    20a0:	e9 f1       	breq	.+122    	; 0x211c <DIO_u8SetPinValue+0xe2>
    20a2:	50 c0       	rjmp	.+160    	; 0x2144 <DIO_u8SetPinValue+0x10a>
			{
				case DIO_PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
    20a4:	ab e3       	ldi	r26, 0x3B	; 59
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	eb e3       	ldi	r30, 0x3B	; 59
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	48 2f       	mov	r20, r24
    20b0:	8b 81       	ldd	r24, Y+3	; 0x03
    20b2:	28 2f       	mov	r18, r24
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	02 2e       	mov	r0, r18
    20bc:	02 c0       	rjmp	.+4      	; 0x20c2 <DIO_u8SetPinValue+0x88>
    20be:	88 0f       	add	r24, r24
    20c0:	99 1f       	adc	r25, r25
    20c2:	0a 94       	dec	r0
    20c4:	e2 f7       	brpl	.-8      	; 0x20be <DIO_u8SetPinValue+0x84>
    20c6:	84 2b       	or	r24, r20
    20c8:	8c 93       	st	X, r24
    20ca:	c6 c0       	rjmp	.+396    	; 0x2258 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
    20cc:	a8 e3       	ldi	r26, 0x38	; 56
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	e8 e3       	ldi	r30, 0x38	; 56
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	48 2f       	mov	r20, r24
    20d8:	8b 81       	ldd	r24, Y+3	; 0x03
    20da:	28 2f       	mov	r18, r24
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	02 2e       	mov	r0, r18
    20e4:	02 c0       	rjmp	.+4      	; 0x20ea <DIO_u8SetPinValue+0xb0>
    20e6:	88 0f       	add	r24, r24
    20e8:	99 1f       	adc	r25, r25
    20ea:	0a 94       	dec	r0
    20ec:	e2 f7       	brpl	.-8      	; 0x20e6 <DIO_u8SetPinValue+0xac>
    20ee:	84 2b       	or	r24, r20
    20f0:	8c 93       	st	X, r24
    20f2:	b2 c0       	rjmp	.+356    	; 0x2258 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
    20f4:	a5 e3       	ldi	r26, 0x35	; 53
    20f6:	b0 e0       	ldi	r27, 0x00	; 0
    20f8:	e5 e3       	ldi	r30, 0x35	; 53
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	80 81       	ld	r24, Z
    20fe:	48 2f       	mov	r20, r24
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	28 2f       	mov	r18, r24
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	02 2e       	mov	r0, r18
    210c:	02 c0       	rjmp	.+4      	; 0x2112 <DIO_u8SetPinValue+0xd8>
    210e:	88 0f       	add	r24, r24
    2110:	99 1f       	adc	r25, r25
    2112:	0a 94       	dec	r0
    2114:	e2 f7       	brpl	.-8      	; 0x210e <DIO_u8SetPinValue+0xd4>
    2116:	84 2b       	or	r24, r20
    2118:	8c 93       	st	X, r24
    211a:	9e c0       	rjmp	.+316    	; 0x2258 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
    211c:	a2 e3       	ldi	r26, 0x32	; 50
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	e2 e3       	ldi	r30, 0x32	; 50
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	48 2f       	mov	r20, r24
    2128:	8b 81       	ldd	r24, Y+3	; 0x03
    212a:	28 2f       	mov	r18, r24
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	02 2e       	mov	r0, r18
    2134:	02 c0       	rjmp	.+4      	; 0x213a <DIO_u8SetPinValue+0x100>
    2136:	88 0f       	add	r24, r24
    2138:	99 1f       	adc	r25, r25
    213a:	0a 94       	dec	r0
    213c:	e2 f7       	brpl	.-8      	; 0x2136 <DIO_u8SetPinValue+0xfc>
    213e:	84 2b       	or	r24, r20
    2140:	8c 93       	st	X, r24
    2142:	8a c0       	rjmp	.+276    	; 0x2258 <DIO_u8SetPinValue+0x21e>
				default: Local_u8ErrorState=1;				
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	89 83       	std	Y+1, r24	; 0x01
    2148:	87 c0       	rjmp	.+270    	; 0x2258 <DIO_u8SetPinValue+0x21e>
			}
		}
		else
			Local_u8ErrorState=1;
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	89 83       	std	Y+1, r24	; 0x01
    214e:	84 c0       	rjmp	.+264    	; 0x2258 <DIO_u8SetPinValue+0x21e>
	}
	else if(DIO_PIN_LOW==Copy_u8Value)
    2150:	8c 81       	ldd	r24, Y+4	; 0x04
    2152:	88 23       	and	r24, r24
    2154:	09 f0       	breq	.+2      	; 0x2158 <DIO_u8SetPinValue+0x11e>
    2156:	7e c0       	rjmp	.+252    	; 0x2254 <DIO_u8SetPinValue+0x21a>
	{
		if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    2158:	8b 81       	ldd	r24, Y+3	; 0x03
    215a:	88 30       	cpi	r24, 0x08	; 8
    215c:	08 f0       	brcs	.+2      	; 0x2160 <DIO_u8SetPinValue+0x126>
    215e:	77 c0       	rjmp	.+238    	; 0x224e <DIO_u8SetPinValue+0x214>
		{
			switch(Copy_u8Port)
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	28 2f       	mov	r18, r24
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	3e 83       	std	Y+6, r19	; 0x06
    2168:	2d 83       	std	Y+5, r18	; 0x05
    216a:	8d 81       	ldd	r24, Y+5	; 0x05
    216c:	9e 81       	ldd	r25, Y+6	; 0x06
    216e:	81 30       	cpi	r24, 0x01	; 1
    2170:	91 05       	cpc	r25, r1
    2172:	59 f1       	breq	.+86     	; 0x21ca <DIO_u8SetPinValue+0x190>
    2174:	2d 81       	ldd	r18, Y+5	; 0x05
    2176:	3e 81       	ldd	r19, Y+6	; 0x06
    2178:	22 30       	cpi	r18, 0x02	; 2
    217a:	31 05       	cpc	r19, r1
    217c:	2c f4       	brge	.+10     	; 0x2188 <DIO_u8SetPinValue+0x14e>
    217e:	8d 81       	ldd	r24, Y+5	; 0x05
    2180:	9e 81       	ldd	r25, Y+6	; 0x06
    2182:	00 97       	sbiw	r24, 0x00	; 0
    2184:	69 f0       	breq	.+26     	; 0x21a0 <DIO_u8SetPinValue+0x166>
    2186:	60 c0       	rjmp	.+192    	; 0x2248 <DIO_u8SetPinValue+0x20e>
    2188:	2d 81       	ldd	r18, Y+5	; 0x05
    218a:	3e 81       	ldd	r19, Y+6	; 0x06
    218c:	22 30       	cpi	r18, 0x02	; 2
    218e:	31 05       	cpc	r19, r1
    2190:	89 f1       	breq	.+98     	; 0x21f4 <DIO_u8SetPinValue+0x1ba>
    2192:	8d 81       	ldd	r24, Y+5	; 0x05
    2194:	9e 81       	ldd	r25, Y+6	; 0x06
    2196:	83 30       	cpi	r24, 0x03	; 3
    2198:	91 05       	cpc	r25, r1
    219a:	09 f4       	brne	.+2      	; 0x219e <DIO_u8SetPinValue+0x164>
    219c:	40 c0       	rjmp	.+128    	; 0x221e <DIO_u8SetPinValue+0x1e4>
    219e:	54 c0       	rjmp	.+168    	; 0x2248 <DIO_u8SetPinValue+0x20e>
			{
				case DIO_PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
    21a0:	ab e3       	ldi	r26, 0x3B	; 59
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	eb e3       	ldi	r30, 0x3B	; 59
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	48 2f       	mov	r20, r24
    21ac:	8b 81       	ldd	r24, Y+3	; 0x03
    21ae:	28 2f       	mov	r18, r24
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	02 2e       	mov	r0, r18
    21b8:	02 c0       	rjmp	.+4      	; 0x21be <DIO_u8SetPinValue+0x184>
    21ba:	88 0f       	add	r24, r24
    21bc:	99 1f       	adc	r25, r25
    21be:	0a 94       	dec	r0
    21c0:	e2 f7       	brpl	.-8      	; 0x21ba <DIO_u8SetPinValue+0x180>
    21c2:	80 95       	com	r24
    21c4:	84 23       	and	r24, r20
    21c6:	8c 93       	st	X, r24
    21c8:	47 c0       	rjmp	.+142    	; 0x2258 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
    21ca:	a8 e3       	ldi	r26, 0x38	; 56
    21cc:	b0 e0       	ldi	r27, 0x00	; 0
    21ce:	e8 e3       	ldi	r30, 0x38	; 56
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	80 81       	ld	r24, Z
    21d4:	48 2f       	mov	r20, r24
    21d6:	8b 81       	ldd	r24, Y+3	; 0x03
    21d8:	28 2f       	mov	r18, r24
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	02 2e       	mov	r0, r18
    21e2:	02 c0       	rjmp	.+4      	; 0x21e8 <DIO_u8SetPinValue+0x1ae>
    21e4:	88 0f       	add	r24, r24
    21e6:	99 1f       	adc	r25, r25
    21e8:	0a 94       	dec	r0
    21ea:	e2 f7       	brpl	.-8      	; 0x21e4 <DIO_u8SetPinValue+0x1aa>
    21ec:	80 95       	com	r24
    21ee:	84 23       	and	r24, r20
    21f0:	8c 93       	st	X, r24
    21f2:	32 c0       	rjmp	.+100    	; 0x2258 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
    21f4:	a5 e3       	ldi	r26, 0x35	; 53
    21f6:	b0 e0       	ldi	r27, 0x00	; 0
    21f8:	e5 e3       	ldi	r30, 0x35	; 53
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	48 2f       	mov	r20, r24
    2200:	8b 81       	ldd	r24, Y+3	; 0x03
    2202:	28 2f       	mov	r18, r24
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	02 2e       	mov	r0, r18
    220c:	02 c0       	rjmp	.+4      	; 0x2212 <DIO_u8SetPinValue+0x1d8>
    220e:	88 0f       	add	r24, r24
    2210:	99 1f       	adc	r25, r25
    2212:	0a 94       	dec	r0
    2214:	e2 f7       	brpl	.-8      	; 0x220e <DIO_u8SetPinValue+0x1d4>
    2216:	80 95       	com	r24
    2218:	84 23       	and	r24, r20
    221a:	8c 93       	st	X, r24
    221c:	1d c0       	rjmp	.+58     	; 0x2258 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
    221e:	a2 e3       	ldi	r26, 0x32	; 50
    2220:	b0 e0       	ldi	r27, 0x00	; 0
    2222:	e2 e3       	ldi	r30, 0x32	; 50
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
    2228:	48 2f       	mov	r20, r24
    222a:	8b 81       	ldd	r24, Y+3	; 0x03
    222c:	28 2f       	mov	r18, r24
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	02 2e       	mov	r0, r18
    2236:	02 c0       	rjmp	.+4      	; 0x223c <DIO_u8SetPinValue+0x202>
    2238:	88 0f       	add	r24, r24
    223a:	99 1f       	adc	r25, r25
    223c:	0a 94       	dec	r0
    223e:	e2 f7       	brpl	.-8      	; 0x2238 <DIO_u8SetPinValue+0x1fe>
    2240:	80 95       	com	r24
    2242:	84 23       	and	r24, r20
    2244:	8c 93       	st	X, r24
    2246:	08 c0       	rjmp	.+16     	; 0x2258 <DIO_u8SetPinValue+0x21e>
				default: Local_u8ErrorState=1;	
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	89 83       	std	Y+1, r24	; 0x01
    224c:	05 c0       	rjmp	.+10     	; 0x2258 <DIO_u8SetPinValue+0x21e>
			}
		}
		else
			Local_u8ErrorState=1;	
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	89 83       	std	Y+1, r24	; 0x01
    2252:	02 c0       	rjmp	.+4      	; 0x2258 <DIO_u8SetPinValue+0x21e>
	}
	else
		Local_u8ErrorState=1;	
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2258:	89 81       	ldd	r24, Y+1	; 0x01
}
    225a:	28 96       	adiw	r28, 0x08	; 8
    225c:	0f b6       	in	r0, 0x3f	; 63
    225e:	f8 94       	cli
    2260:	de bf       	out	0x3e, r29	; 62
    2262:	0f be       	out	0x3f, r0	; 63
    2264:	cd bf       	out	0x3d, r28	; 61
    2266:	cf 91       	pop	r28
    2268:	df 91       	pop	r29
    226a:	08 95       	ret

0000226c <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    226c:	df 93       	push	r29
    226e:	cf 93       	push	r28
    2270:	00 d0       	rcall	.+0      	; 0x2272 <DIO_u8SetPortValue+0x6>
    2272:	00 d0       	rcall	.+0      	; 0x2274 <DIO_u8SetPortValue+0x8>
    2274:	0f 92       	push	r0
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62
    227a:	8a 83       	std	Y+2, r24	; 0x02
    227c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    227e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port<=7)
    2280:	8a 81       	ldd	r24, Y+2	; 0x02
    2282:	88 30       	cpi	r24, 0x08	; 8
    2284:	b0 f5       	brcc	.+108    	; 0x22f2 <DIO_u8SetPortValue+0x86>
	{
		switch(Copy_u8Port)
    2286:	8a 81       	ldd	r24, Y+2	; 0x02
    2288:	28 2f       	mov	r18, r24
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	3d 83       	std	Y+5, r19	; 0x05
    228e:	2c 83       	std	Y+4, r18	; 0x04
    2290:	8c 81       	ldd	r24, Y+4	; 0x04
    2292:	9d 81       	ldd	r25, Y+5	; 0x05
    2294:	81 30       	cpi	r24, 0x01	; 1
    2296:	91 05       	cpc	r25, r1
    2298:	d1 f0       	breq	.+52     	; 0x22ce <DIO_u8SetPortValue+0x62>
    229a:	2c 81       	ldd	r18, Y+4	; 0x04
    229c:	3d 81       	ldd	r19, Y+5	; 0x05
    229e:	22 30       	cpi	r18, 0x02	; 2
    22a0:	31 05       	cpc	r19, r1
    22a2:	2c f4       	brge	.+10     	; 0x22ae <DIO_u8SetPortValue+0x42>
    22a4:	8c 81       	ldd	r24, Y+4	; 0x04
    22a6:	9d 81       	ldd	r25, Y+5	; 0x05
    22a8:	00 97       	sbiw	r24, 0x00	; 0
    22aa:	61 f0       	breq	.+24     	; 0x22c4 <DIO_u8SetPortValue+0x58>
    22ac:	1f c0       	rjmp	.+62     	; 0x22ec <DIO_u8SetPortValue+0x80>
    22ae:	2c 81       	ldd	r18, Y+4	; 0x04
    22b0:	3d 81       	ldd	r19, Y+5	; 0x05
    22b2:	22 30       	cpi	r18, 0x02	; 2
    22b4:	31 05       	cpc	r19, r1
    22b6:	81 f0       	breq	.+32     	; 0x22d8 <DIO_u8SetPortValue+0x6c>
    22b8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ba:	9d 81       	ldd	r25, Y+5	; 0x05
    22bc:	83 30       	cpi	r24, 0x03	; 3
    22be:	91 05       	cpc	r25, r1
    22c0:	81 f0       	breq	.+32     	; 0x22e2 <DIO_u8SetPortValue+0x76>
    22c2:	14 c0       	rjmp	.+40     	; 0x22ec <DIO_u8SetPortValue+0x80>
		{
			case DIO_PORTA:PORTA=Copy_u8Value;break;
    22c4:	eb e3       	ldi	r30, 0x3B	; 59
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ca:	80 83       	st	Z, r24
    22cc:	14 c0       	rjmp	.+40     	; 0x22f6 <DIO_u8SetPortValue+0x8a>
			case DIO_PORTB:PORTB=Copy_u8Value;break;
    22ce:	e8 e3       	ldi	r30, 0x38	; 56
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	8b 81       	ldd	r24, Y+3	; 0x03
    22d4:	80 83       	st	Z, r24
    22d6:	0f c0       	rjmp	.+30     	; 0x22f6 <DIO_u8SetPortValue+0x8a>
			case DIO_PORTC:PORTC=Copy_u8Value;break;
    22d8:	e5 e3       	ldi	r30, 0x35	; 53
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	8b 81       	ldd	r24, Y+3	; 0x03
    22de:	80 83       	st	Z, r24
    22e0:	0a c0       	rjmp	.+20     	; 0x22f6 <DIO_u8SetPortValue+0x8a>
			case DIO_PORTD:PORTD=Copy_u8Value;break;
    22e2:	e2 e3       	ldi	r30, 0x32	; 50
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	8b 81       	ldd	r24, Y+3	; 0x03
    22e8:	80 83       	st	Z, r24
    22ea:	05 c0       	rjmp	.+10     	; 0x22f6 <DIO_u8SetPortValue+0x8a>
			default: Local_u8ErrorState=1;
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	89 83       	std	Y+1, r24	; 0x01
    22f0:	02 c0       	rjmp	.+4      	; 0x22f6 <DIO_u8SetPortValue+0x8a>
		}
	}
	else
		Local_u8ErrorState = NOTOK;
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    22f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	0f 90       	pop	r0
    22fe:	0f 90       	pop	r0
    2300:	0f 90       	pop	r0
    2302:	cf 91       	pop	r28
    2304:	df 91       	pop	r29
    2306:	08 95       	ret

00002308 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 *Copy_pu8Value)
{
    2308:	df 93       	push	r29
    230a:	cf 93       	push	r28
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    2310:	27 97       	sbiw	r28, 0x07	; 7
    2312:	0f b6       	in	r0, 0x3f	; 63
    2314:	f8 94       	cli
    2316:	de bf       	out	0x3e, r29	; 62
    2318:	0f be       	out	0x3f, r0	; 63
    231a:	cd bf       	out	0x3d, r28	; 61
    231c:	8a 83       	std	Y+2, r24	; 0x02
    231e:	6b 83       	std	Y+3, r22	; 0x03
    2320:	5d 83       	std	Y+5, r21	; 0x05
    2322:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    2324:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value!=NULL)
    2326:	8c 81       	ldd	r24, Y+4	; 0x04
    2328:	9d 81       	ldd	r25, Y+5	; 0x05
    232a:	00 97       	sbiw	r24, 0x00	; 0
    232c:	09 f4       	brne	.+2      	; 0x2330 <DIO_u8GetPinValue+0x28>
    232e:	7b c0       	rjmp	.+246    	; 0x2426 <DIO_u8GetPinValue+0x11e>
	{


		if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    2330:	8b 81       	ldd	r24, Y+3	; 0x03
    2332:	88 30       	cpi	r24, 0x08	; 8
    2334:	08 f0       	brcs	.+2      	; 0x2338 <DIO_u8GetPinValue+0x30>
    2336:	74 c0       	rjmp	.+232    	; 0x2420 <DIO_u8GetPinValue+0x118>
		{
			switch(Copy_u8Port)
    2338:	8a 81       	ldd	r24, Y+2	; 0x02
    233a:	28 2f       	mov	r18, r24
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	3f 83       	std	Y+7, r19	; 0x07
    2340:	2e 83       	std	Y+6, r18	; 0x06
    2342:	4e 81       	ldd	r20, Y+6	; 0x06
    2344:	5f 81       	ldd	r21, Y+7	; 0x07
    2346:	41 30       	cpi	r20, 0x01	; 1
    2348:	51 05       	cpc	r21, r1
    234a:	59 f1       	breq	.+86     	; 0x23a2 <DIO_u8GetPinValue+0x9a>
    234c:	8e 81       	ldd	r24, Y+6	; 0x06
    234e:	9f 81       	ldd	r25, Y+7	; 0x07
    2350:	82 30       	cpi	r24, 0x02	; 2
    2352:	91 05       	cpc	r25, r1
    2354:	34 f4       	brge	.+12     	; 0x2362 <DIO_u8GetPinValue+0x5a>
    2356:	2e 81       	ldd	r18, Y+6	; 0x06
    2358:	3f 81       	ldd	r19, Y+7	; 0x07
    235a:	21 15       	cp	r18, r1
    235c:	31 05       	cpc	r19, r1
    235e:	69 f0       	breq	.+26     	; 0x237a <DIO_u8GetPinValue+0x72>
    2360:	5c c0       	rjmp	.+184    	; 0x241a <DIO_u8GetPinValue+0x112>
    2362:	4e 81       	ldd	r20, Y+6	; 0x06
    2364:	5f 81       	ldd	r21, Y+7	; 0x07
    2366:	42 30       	cpi	r20, 0x02	; 2
    2368:	51 05       	cpc	r21, r1
    236a:	79 f1       	breq	.+94     	; 0x23ca <DIO_u8GetPinValue+0xc2>
    236c:	8e 81       	ldd	r24, Y+6	; 0x06
    236e:	9f 81       	ldd	r25, Y+7	; 0x07
    2370:	83 30       	cpi	r24, 0x03	; 3
    2372:	91 05       	cpc	r25, r1
    2374:	09 f4       	brne	.+2      	; 0x2378 <DIO_u8GetPinValue+0x70>
    2376:	3d c0       	rjmp	.+122    	; 0x23f2 <DIO_u8GetPinValue+0xea>
    2378:	50 c0       	rjmp	.+160    	; 0x241a <DIO_u8GetPinValue+0x112>
			{
				case DIO_PORTA:*Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin);break;
    237a:	e9 e3       	ldi	r30, 0x39	; 57
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	80 81       	ld	r24, Z
    2380:	28 2f       	mov	r18, r24
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	8b 81       	ldd	r24, Y+3	; 0x03
    2386:	88 2f       	mov	r24, r24
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	a9 01       	movw	r20, r18
    238c:	02 c0       	rjmp	.+4      	; 0x2392 <DIO_u8GetPinValue+0x8a>
    238e:	55 95       	asr	r21
    2390:	47 95       	ror	r20
    2392:	8a 95       	dec	r24
    2394:	e2 f7       	brpl	.-8      	; 0x238e <DIO_u8GetPinValue+0x86>
    2396:	ca 01       	movw	r24, r20
    2398:	81 70       	andi	r24, 0x01	; 1
    239a:	ec 81       	ldd	r30, Y+4	; 0x04
    239c:	fd 81       	ldd	r31, Y+5	; 0x05
    239e:	80 83       	st	Z, r24
    23a0:	44 c0       	rjmp	.+136    	; 0x242a <DIO_u8GetPinValue+0x122>
				case DIO_PORTB:*Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin);break;
    23a2:	e6 e3       	ldi	r30, 0x36	; 54
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	80 81       	ld	r24, Z
    23a8:	28 2f       	mov	r18, r24
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	8b 81       	ldd	r24, Y+3	; 0x03
    23ae:	88 2f       	mov	r24, r24
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	a9 01       	movw	r20, r18
    23b4:	02 c0       	rjmp	.+4      	; 0x23ba <DIO_u8GetPinValue+0xb2>
    23b6:	55 95       	asr	r21
    23b8:	47 95       	ror	r20
    23ba:	8a 95       	dec	r24
    23bc:	e2 f7       	brpl	.-8      	; 0x23b6 <DIO_u8GetPinValue+0xae>
    23be:	ca 01       	movw	r24, r20
    23c0:	81 70       	andi	r24, 0x01	; 1
    23c2:	ec 81       	ldd	r30, Y+4	; 0x04
    23c4:	fd 81       	ldd	r31, Y+5	; 0x05
    23c6:	80 83       	st	Z, r24
    23c8:	30 c0       	rjmp	.+96     	; 0x242a <DIO_u8GetPinValue+0x122>
				case DIO_PORTC:*Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin);break;
    23ca:	e3 e3       	ldi	r30, 0x33	; 51
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	80 81       	ld	r24, Z
    23d0:	28 2f       	mov	r18, r24
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	88 2f       	mov	r24, r24
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	a9 01       	movw	r20, r18
    23dc:	02 c0       	rjmp	.+4      	; 0x23e2 <DIO_u8GetPinValue+0xda>
    23de:	55 95       	asr	r21
    23e0:	47 95       	ror	r20
    23e2:	8a 95       	dec	r24
    23e4:	e2 f7       	brpl	.-8      	; 0x23de <DIO_u8GetPinValue+0xd6>
    23e6:	ca 01       	movw	r24, r20
    23e8:	81 70       	andi	r24, 0x01	; 1
    23ea:	ec 81       	ldd	r30, Y+4	; 0x04
    23ec:	fd 81       	ldd	r31, Y+5	; 0x05
    23ee:	80 83       	st	Z, r24
    23f0:	1c c0       	rjmp	.+56     	; 0x242a <DIO_u8GetPinValue+0x122>
				case DIO_PORTD:*Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin);break;
    23f2:	e0 e3       	ldi	r30, 0x30	; 48
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	80 81       	ld	r24, Z
    23f8:	28 2f       	mov	r18, r24
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	8b 81       	ldd	r24, Y+3	; 0x03
    23fe:	88 2f       	mov	r24, r24
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	a9 01       	movw	r20, r18
    2404:	02 c0       	rjmp	.+4      	; 0x240a <DIO_u8GetPinValue+0x102>
    2406:	55 95       	asr	r21
    2408:	47 95       	ror	r20
    240a:	8a 95       	dec	r24
    240c:	e2 f7       	brpl	.-8      	; 0x2406 <DIO_u8GetPinValue+0xfe>
    240e:	ca 01       	movw	r24, r20
    2410:	81 70       	andi	r24, 0x01	; 1
    2412:	ec 81       	ldd	r30, Y+4	; 0x04
    2414:	fd 81       	ldd	r31, Y+5	; 0x05
    2416:	80 83       	st	Z, r24
    2418:	08 c0       	rjmp	.+16     	; 0x242a <DIO_u8GetPinValue+0x122>
				default: Local_u8ErrorState=1;
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	89 83       	std	Y+1, r24	; 0x01
    241e:	05 c0       	rjmp	.+10     	; 0x242a <DIO_u8GetPinValue+0x122>
			}
		}
		else
			Local_u8ErrorState=1;
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	89 83       	std	Y+1, r24	; 0x01
    2424:	02 c0       	rjmp	.+4      	; 0x242a <DIO_u8GetPinValue+0x122>
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    2426:	82 e0       	ldi	r24, 0x02	; 2
    2428:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    242a:	89 81       	ldd	r24, Y+1	; 0x01
}
    242c:	27 96       	adiw	r28, 0x07	; 7
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	cd bf       	out	0x3d, r28	; 61
    2438:	cf 91       	pop	r28
    243a:	df 91       	pop	r29
    243c:	08 95       	ret

0000243e <DIO_u8TogglePinValue>:
u8 DIO_u8TogglePinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
{
    243e:	df 93       	push	r29
    2440:	cf 93       	push	r28
    2442:	00 d0       	rcall	.+0      	; 0x2444 <DIO_u8TogglePinValue+0x6>
    2444:	00 d0       	rcall	.+0      	; 0x2446 <DIO_u8TogglePinValue+0x8>
    2446:	0f 92       	push	r0
    2448:	cd b7       	in	r28, 0x3d	; 61
    244a:	de b7       	in	r29, 0x3e	; 62
    244c:	8a 83       	std	Y+2, r24	; 0x02
    244e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    2450:	19 82       	std	Y+1, r1	; 0x01
	if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    2452:	8b 81       	ldd	r24, Y+3	; 0x03
    2454:	88 30       	cpi	r24, 0x08	; 8
    2456:	08 f0       	brcs	.+2      	; 0x245a <DIO_u8TogglePinValue+0x1c>
    2458:	72 c0       	rjmp	.+228    	; 0x253e <DIO_u8TogglePinValue+0x100>
	{
		switch(Copy_u8Port)
    245a:	8a 81       	ldd	r24, Y+2	; 0x02
    245c:	28 2f       	mov	r18, r24
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	3d 83       	std	Y+5, r19	; 0x05
    2462:	2c 83       	std	Y+4, r18	; 0x04
    2464:	8c 81       	ldd	r24, Y+4	; 0x04
    2466:	9d 81       	ldd	r25, Y+5	; 0x05
    2468:	81 30       	cpi	r24, 0x01	; 1
    246a:	91 05       	cpc	r25, r1
    246c:	49 f1       	breq	.+82     	; 0x24c0 <DIO_u8TogglePinValue+0x82>
    246e:	2c 81       	ldd	r18, Y+4	; 0x04
    2470:	3d 81       	ldd	r19, Y+5	; 0x05
    2472:	22 30       	cpi	r18, 0x02	; 2
    2474:	31 05       	cpc	r19, r1
    2476:	2c f4       	brge	.+10     	; 0x2482 <DIO_u8TogglePinValue+0x44>
    2478:	8c 81       	ldd	r24, Y+4	; 0x04
    247a:	9d 81       	ldd	r25, Y+5	; 0x05
    247c:	00 97       	sbiw	r24, 0x00	; 0
    247e:	61 f0       	breq	.+24     	; 0x2498 <DIO_u8TogglePinValue+0x5a>
    2480:	5b c0       	rjmp	.+182    	; 0x2538 <DIO_u8TogglePinValue+0xfa>
    2482:	2c 81       	ldd	r18, Y+4	; 0x04
    2484:	3d 81       	ldd	r19, Y+5	; 0x05
    2486:	22 30       	cpi	r18, 0x02	; 2
    2488:	31 05       	cpc	r19, r1
    248a:	71 f1       	breq	.+92     	; 0x24e8 <DIO_u8TogglePinValue+0xaa>
    248c:	8c 81       	ldd	r24, Y+4	; 0x04
    248e:	9d 81       	ldd	r25, Y+5	; 0x05
    2490:	83 30       	cpi	r24, 0x03	; 3
    2492:	91 05       	cpc	r25, r1
    2494:	e9 f1       	breq	.+122    	; 0x2510 <DIO_u8TogglePinValue+0xd2>
    2496:	50 c0       	rjmp	.+160    	; 0x2538 <DIO_u8TogglePinValue+0xfa>
		{
			case DIO_PORTA:TOG_BIT(PORTA,Copy_u8Pin);break;
    2498:	ab e3       	ldi	r26, 0x3B	; 59
    249a:	b0 e0       	ldi	r27, 0x00	; 0
    249c:	eb e3       	ldi	r30, 0x3B	; 59
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	80 81       	ld	r24, Z
    24a2:	48 2f       	mov	r20, r24
    24a4:	8b 81       	ldd	r24, Y+3	; 0x03
    24a6:	28 2f       	mov	r18, r24
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	02 2e       	mov	r0, r18
    24b0:	02 c0       	rjmp	.+4      	; 0x24b6 <DIO_u8TogglePinValue+0x78>
    24b2:	88 0f       	add	r24, r24
    24b4:	99 1f       	adc	r25, r25
    24b6:	0a 94       	dec	r0
    24b8:	e2 f7       	brpl	.-8      	; 0x24b2 <DIO_u8TogglePinValue+0x74>
    24ba:	84 27       	eor	r24, r20
    24bc:	8c 93       	st	X, r24
    24be:	41 c0       	rjmp	.+130    	; 0x2542 <DIO_u8TogglePinValue+0x104>
			case DIO_PORTB:TOG_BIT(PORTB,Copy_u8Pin);break;
    24c0:	a8 e3       	ldi	r26, 0x38	; 56
    24c2:	b0 e0       	ldi	r27, 0x00	; 0
    24c4:	e8 e3       	ldi	r30, 0x38	; 56
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	48 2f       	mov	r20, r24
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	28 2f       	mov	r18, r24
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	02 2e       	mov	r0, r18
    24d8:	02 c0       	rjmp	.+4      	; 0x24de <DIO_u8TogglePinValue+0xa0>
    24da:	88 0f       	add	r24, r24
    24dc:	99 1f       	adc	r25, r25
    24de:	0a 94       	dec	r0
    24e0:	e2 f7       	brpl	.-8      	; 0x24da <DIO_u8TogglePinValue+0x9c>
    24e2:	84 27       	eor	r24, r20
    24e4:	8c 93       	st	X, r24
    24e6:	2d c0       	rjmp	.+90     	; 0x2542 <DIO_u8TogglePinValue+0x104>
			case DIO_PORTC:TOG_BIT(PORTC,Copy_u8Pin);break;
    24e8:	a5 e3       	ldi	r26, 0x35	; 53
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	e5 e3       	ldi	r30, 0x35	; 53
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	80 81       	ld	r24, Z
    24f2:	48 2f       	mov	r20, r24
    24f4:	8b 81       	ldd	r24, Y+3	; 0x03
    24f6:	28 2f       	mov	r18, r24
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	02 2e       	mov	r0, r18
    2500:	02 c0       	rjmp	.+4      	; 0x2506 <DIO_u8TogglePinValue+0xc8>
    2502:	88 0f       	add	r24, r24
    2504:	99 1f       	adc	r25, r25
    2506:	0a 94       	dec	r0
    2508:	e2 f7       	brpl	.-8      	; 0x2502 <DIO_u8TogglePinValue+0xc4>
    250a:	84 27       	eor	r24, r20
    250c:	8c 93       	st	X, r24
    250e:	19 c0       	rjmp	.+50     	; 0x2542 <DIO_u8TogglePinValue+0x104>
			case DIO_PORTD:TOG_BIT(PORTD,Copy_u8Pin);break;
    2510:	a2 e3       	ldi	r26, 0x32	; 50
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	e2 e3       	ldi	r30, 0x32	; 50
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	80 81       	ld	r24, Z
    251a:	48 2f       	mov	r20, r24
    251c:	8b 81       	ldd	r24, Y+3	; 0x03
    251e:	28 2f       	mov	r18, r24
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	02 2e       	mov	r0, r18
    2528:	02 c0       	rjmp	.+4      	; 0x252e <DIO_u8TogglePinValue+0xf0>
    252a:	88 0f       	add	r24, r24
    252c:	99 1f       	adc	r25, r25
    252e:	0a 94       	dec	r0
    2530:	e2 f7       	brpl	.-8      	; 0x252a <DIO_u8TogglePinValue+0xec>
    2532:	84 27       	eor	r24, r20
    2534:	8c 93       	st	X, r24
    2536:	05 c0       	rjmp	.+10     	; 0x2542 <DIO_u8TogglePinValue+0x104>
			default: Local_u8ErrorState=1;
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	89 83       	std	Y+1, r24	; 0x01
    253c:	02 c0       	rjmp	.+4      	; 0x2542 <DIO_u8TogglePinValue+0x104>
		}
	}
	else
		Local_u8ErrorState=1;
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2542:	89 81       	ldd	r24, Y+1	; 0x01
}
    2544:	0f 90       	pop	r0
    2546:	0f 90       	pop	r0
    2548:	0f 90       	pop	r0
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	cf 91       	pop	r28
    2550:	df 91       	pop	r29
    2552:	08 95       	ret

00002554 <DIO_u8SetLowNibbleValue>:

u8 DIO_u8SetLowNibbleValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    2554:	df 93       	push	r29
    2556:	cf 93       	push	r28
    2558:	00 d0       	rcall	.+0      	; 0x255a <DIO_u8SetLowNibbleValue+0x6>
    255a:	00 d0       	rcall	.+0      	; 0x255c <DIO_u8SetLowNibbleValue+0x8>
    255c:	0f 92       	push	r0
    255e:	cd b7       	in	r28, 0x3d	; 61
    2560:	de b7       	in	r29, 0x3e	; 62
    2562:	8a 83       	std	Y+2, r24	; 0x02
    2564:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    2566:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port<=DIO_PORTD){
    2568:	8a 81       	ldd	r24, Y+2	; 0x02
    256a:	84 30       	cpi	r24, 0x04	; 4
    256c:	08 f0       	brcs	.+2      	; 0x2570 <DIO_u8SetLowNibbleValue+0x1c>
    256e:	62 c0       	rjmp	.+196    	; 0x2634 <DIO_u8SetLowNibbleValue+0xe0>
		switch(Copy_u8Port)
    2570:	8a 81       	ldd	r24, Y+2	; 0x02
    2572:	28 2f       	mov	r18, r24
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	3d 83       	std	Y+5, r19	; 0x05
    2578:	2c 83       	std	Y+4, r18	; 0x04
    257a:	8c 81       	ldd	r24, Y+4	; 0x04
    257c:	9d 81       	ldd	r25, Y+5	; 0x05
    257e:	81 30       	cpi	r24, 0x01	; 1
    2580:	91 05       	cpc	r25, r1
    2582:	29 f1       	breq	.+74     	; 0x25ce <DIO_u8SetLowNibbleValue+0x7a>
    2584:	2c 81       	ldd	r18, Y+4	; 0x04
    2586:	3d 81       	ldd	r19, Y+5	; 0x05
    2588:	22 30       	cpi	r18, 0x02	; 2
    258a:	31 05       	cpc	r19, r1
    258c:	2c f4       	brge	.+10     	; 0x2598 <DIO_u8SetLowNibbleValue+0x44>
    258e:	8c 81       	ldd	r24, Y+4	; 0x04
    2590:	9d 81       	ldd	r25, Y+5	; 0x05
    2592:	00 97       	sbiw	r24, 0x00	; 0
    2594:	61 f0       	breq	.+24     	; 0x25ae <DIO_u8SetLowNibbleValue+0x5a>
    2596:	4b c0       	rjmp	.+150    	; 0x262e <DIO_u8SetLowNibbleValue+0xda>
    2598:	2c 81       	ldd	r18, Y+4	; 0x04
    259a:	3d 81       	ldd	r19, Y+5	; 0x05
    259c:	22 30       	cpi	r18, 0x02	; 2
    259e:	31 05       	cpc	r19, r1
    25a0:	31 f1       	breq	.+76     	; 0x25ee <DIO_u8SetLowNibbleValue+0x9a>
    25a2:	8c 81       	ldd	r24, Y+4	; 0x04
    25a4:	9d 81       	ldd	r25, Y+5	; 0x05
    25a6:	83 30       	cpi	r24, 0x03	; 3
    25a8:	91 05       	cpc	r25, r1
    25aa:	89 f1       	breq	.+98     	; 0x260e <DIO_u8SetLowNibbleValue+0xba>
    25ac:	40 c0       	rjmp	.+128    	; 0x262e <DIO_u8SetLowNibbleValue+0xda>
		{
			case DIO_PORTA:PORTA&=DIO_LOWNIBBLE_MASK;PORTA|=Copy_u8Value;break;
    25ae:	ab e3       	ldi	r26, 0x3B	; 59
    25b0:	b0 e0       	ldi	r27, 0x00	; 0
    25b2:	eb e3       	ldi	r30, 0x3B	; 59
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	80 81       	ld	r24, Z
    25b8:	80 7f       	andi	r24, 0xF0	; 240
    25ba:	8c 93       	st	X, r24
    25bc:	ab e3       	ldi	r26, 0x3B	; 59
    25be:	b0 e0       	ldi	r27, 0x00	; 0
    25c0:	eb e3       	ldi	r30, 0x3B	; 59
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	90 81       	ld	r25, Z
    25c6:	8b 81       	ldd	r24, Y+3	; 0x03
    25c8:	89 2b       	or	r24, r25
    25ca:	8c 93       	st	X, r24
    25cc:	35 c0       	rjmp	.+106    	; 0x2638 <DIO_u8SetLowNibbleValue+0xe4>
			case DIO_PORTB:PORTB&=DIO_LOWNIBBLE_MASK;PORTB|=Copy_u8Value;break;
    25ce:	a8 e3       	ldi	r26, 0x38	; 56
    25d0:	b0 e0       	ldi	r27, 0x00	; 0
    25d2:	e8 e3       	ldi	r30, 0x38	; 56
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	80 81       	ld	r24, Z
    25d8:	80 7f       	andi	r24, 0xF0	; 240
    25da:	8c 93       	st	X, r24
    25dc:	a8 e3       	ldi	r26, 0x38	; 56
    25de:	b0 e0       	ldi	r27, 0x00	; 0
    25e0:	e8 e3       	ldi	r30, 0x38	; 56
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	90 81       	ld	r25, Z
    25e6:	8b 81       	ldd	r24, Y+3	; 0x03
    25e8:	89 2b       	or	r24, r25
    25ea:	8c 93       	st	X, r24
    25ec:	25 c0       	rjmp	.+74     	; 0x2638 <DIO_u8SetLowNibbleValue+0xe4>
			case DIO_PORTC:PORTC&=DIO_LOWNIBBLE_MASK;PORTC|=Copy_u8Value;break;
    25ee:	a5 e3       	ldi	r26, 0x35	; 53
    25f0:	b0 e0       	ldi	r27, 0x00	; 0
    25f2:	e5 e3       	ldi	r30, 0x35	; 53
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	80 81       	ld	r24, Z
    25f8:	80 7f       	andi	r24, 0xF0	; 240
    25fa:	8c 93       	st	X, r24
    25fc:	a5 e3       	ldi	r26, 0x35	; 53
    25fe:	b0 e0       	ldi	r27, 0x00	; 0
    2600:	e5 e3       	ldi	r30, 0x35	; 53
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	90 81       	ld	r25, Z
    2606:	8b 81       	ldd	r24, Y+3	; 0x03
    2608:	89 2b       	or	r24, r25
    260a:	8c 93       	st	X, r24
    260c:	15 c0       	rjmp	.+42     	; 0x2638 <DIO_u8SetLowNibbleValue+0xe4>
			case DIO_PORTD:PORTD&=DIO_LOWNIBBLE_MASK;PORTD|=Copy_u8Value;break;
    260e:	a2 e3       	ldi	r26, 0x32	; 50
    2610:	b0 e0       	ldi	r27, 0x00	; 0
    2612:	e2 e3       	ldi	r30, 0x32	; 50
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	80 81       	ld	r24, Z
    2618:	80 7f       	andi	r24, 0xF0	; 240
    261a:	8c 93       	st	X, r24
    261c:	a2 e3       	ldi	r26, 0x32	; 50
    261e:	b0 e0       	ldi	r27, 0x00	; 0
    2620:	e2 e3       	ldi	r30, 0x32	; 50
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	90 81       	ld	r25, Z
    2626:	8b 81       	ldd	r24, Y+3	; 0x03
    2628:	89 2b       	or	r24, r25
    262a:	8c 93       	st	X, r24
    262c:	05 c0       	rjmp	.+10     	; 0x2638 <DIO_u8SetLowNibbleValue+0xe4>
			default: Local_u8ErrorState=1;
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	89 83       	std	Y+1, r24	; 0x01
    2632:	02 c0       	rjmp	.+4      	; 0x2638 <DIO_u8SetLowNibbleValue+0xe4>
		}
	}
	else
		Local_u8ErrorState=1;
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2638:	89 81       	ldd	r24, Y+1	; 0x01
}
    263a:	0f 90       	pop	r0
    263c:	0f 90       	pop	r0
    263e:	0f 90       	pop	r0
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	cf 91       	pop	r28
    2646:	df 91       	pop	r29
    2648:	08 95       	ret

0000264a <DIO_u8SetHighNibbleValue>:
u8 DIO_u8SetHighNibbleValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    264a:	df 93       	push	r29
    264c:	cf 93       	push	r28
    264e:	00 d0       	rcall	.+0      	; 0x2650 <DIO_u8SetHighNibbleValue+0x6>
    2650:	00 d0       	rcall	.+0      	; 0x2652 <DIO_u8SetHighNibbleValue+0x8>
    2652:	0f 92       	push	r0
    2654:	cd b7       	in	r28, 0x3d	; 61
    2656:	de b7       	in	r29, 0x3e	; 62
    2658:	8a 83       	std	Y+2, r24	; 0x02
    265a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    265c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port<=DIO_PORTD){
    265e:	8a 81       	ldd	r24, Y+2	; 0x02
    2660:	84 30       	cpi	r24, 0x04	; 4
    2662:	08 f0       	brcs	.+2      	; 0x2666 <DIO_u8SetHighNibbleValue+0x1c>
    2664:	87 c0       	rjmp	.+270    	; 0x2774 <DIO_u8SetHighNibbleValue+0x12a>
		switch(Copy_u8Port)
    2666:	8a 81       	ldd	r24, Y+2	; 0x02
    2668:	28 2f       	mov	r18, r24
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	3d 83       	std	Y+5, r19	; 0x05
    266e:	2c 83       	std	Y+4, r18	; 0x04
    2670:	8c 81       	ldd	r24, Y+4	; 0x04
    2672:	9d 81       	ldd	r25, Y+5	; 0x05
    2674:	81 30       	cpi	r24, 0x01	; 1
    2676:	91 05       	cpc	r25, r1
    2678:	79 f1       	breq	.+94     	; 0x26d8 <DIO_u8SetHighNibbleValue+0x8e>
    267a:	2c 81       	ldd	r18, Y+4	; 0x04
    267c:	3d 81       	ldd	r19, Y+5	; 0x05
    267e:	22 30       	cpi	r18, 0x02	; 2
    2680:	31 05       	cpc	r19, r1
    2682:	2c f4       	brge	.+10     	; 0x268e <DIO_u8SetHighNibbleValue+0x44>
    2684:	8c 81       	ldd	r24, Y+4	; 0x04
    2686:	9d 81       	ldd	r25, Y+5	; 0x05
    2688:	00 97       	sbiw	r24, 0x00	; 0
    268a:	69 f0       	breq	.+26     	; 0x26a6 <DIO_u8SetHighNibbleValue+0x5c>
    268c:	70 c0       	rjmp	.+224    	; 0x276e <DIO_u8SetHighNibbleValue+0x124>
    268e:	2c 81       	ldd	r18, Y+4	; 0x04
    2690:	3d 81       	ldd	r19, Y+5	; 0x05
    2692:	22 30       	cpi	r18, 0x02	; 2
    2694:	31 05       	cpc	r19, r1
    2696:	c9 f1       	breq	.+114    	; 0x270a <DIO_u8SetHighNibbleValue+0xc0>
    2698:	8c 81       	ldd	r24, Y+4	; 0x04
    269a:	9d 81       	ldd	r25, Y+5	; 0x05
    269c:	83 30       	cpi	r24, 0x03	; 3
    269e:	91 05       	cpc	r25, r1
    26a0:	09 f4       	brne	.+2      	; 0x26a4 <DIO_u8SetHighNibbleValue+0x5a>
    26a2:	4c c0       	rjmp	.+152    	; 0x273c <DIO_u8SetHighNibbleValue+0xf2>
    26a4:	64 c0       	rjmp	.+200    	; 0x276e <DIO_u8SetHighNibbleValue+0x124>
		{
			case DIO_PORTA:PORTA &= DIO_HIGHNIBBLE_MASK;PORTA |= (Copy_u8Value<<4);break;
    26a6:	ab e3       	ldi	r26, 0x3B	; 59
    26a8:	b0 e0       	ldi	r27, 0x00	; 0
    26aa:	eb e3       	ldi	r30, 0x3B	; 59
    26ac:	f0 e0       	ldi	r31, 0x00	; 0
    26ae:	80 81       	ld	r24, Z
    26b0:	8f 70       	andi	r24, 0x0F	; 15
    26b2:	8c 93       	st	X, r24
    26b4:	ab e3       	ldi	r26, 0x3B	; 59
    26b6:	b0 e0       	ldi	r27, 0x00	; 0
    26b8:	eb e3       	ldi	r30, 0x3B	; 59
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	80 81       	ld	r24, Z
    26be:	28 2f       	mov	r18, r24
    26c0:	8b 81       	ldd	r24, Y+3	; 0x03
    26c2:	88 2f       	mov	r24, r24
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	82 95       	swap	r24
    26c8:	92 95       	swap	r25
    26ca:	90 7f       	andi	r25, 0xF0	; 240
    26cc:	98 27       	eor	r25, r24
    26ce:	80 7f       	andi	r24, 0xF0	; 240
    26d0:	98 27       	eor	r25, r24
    26d2:	82 2b       	or	r24, r18
    26d4:	8c 93       	st	X, r24
    26d6:	50 c0       	rjmp	.+160    	; 0x2778 <DIO_u8SetHighNibbleValue+0x12e>
			case DIO_PORTB:PORTB &= DIO_HIGHNIBBLE_MASK;PORTB |= (Copy_u8Value<<4);break;
    26d8:	a8 e3       	ldi	r26, 0x38	; 56
    26da:	b0 e0       	ldi	r27, 0x00	; 0
    26dc:	e8 e3       	ldi	r30, 0x38	; 56
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	80 81       	ld	r24, Z
    26e2:	8f 70       	andi	r24, 0x0F	; 15
    26e4:	8c 93       	st	X, r24
    26e6:	a8 e3       	ldi	r26, 0x38	; 56
    26e8:	b0 e0       	ldi	r27, 0x00	; 0
    26ea:	e8 e3       	ldi	r30, 0x38	; 56
    26ec:	f0 e0       	ldi	r31, 0x00	; 0
    26ee:	80 81       	ld	r24, Z
    26f0:	28 2f       	mov	r18, r24
    26f2:	8b 81       	ldd	r24, Y+3	; 0x03
    26f4:	88 2f       	mov	r24, r24
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	82 95       	swap	r24
    26fa:	92 95       	swap	r25
    26fc:	90 7f       	andi	r25, 0xF0	; 240
    26fe:	98 27       	eor	r25, r24
    2700:	80 7f       	andi	r24, 0xF0	; 240
    2702:	98 27       	eor	r25, r24
    2704:	82 2b       	or	r24, r18
    2706:	8c 93       	st	X, r24
    2708:	37 c0       	rjmp	.+110    	; 0x2778 <DIO_u8SetHighNibbleValue+0x12e>
			case DIO_PORTC:PORTC &= DIO_HIGHNIBBLE_MASK;PORTC |= (Copy_u8Value<<4);break;
    270a:	a5 e3       	ldi	r26, 0x35	; 53
    270c:	b0 e0       	ldi	r27, 0x00	; 0
    270e:	e5 e3       	ldi	r30, 0x35	; 53
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	80 81       	ld	r24, Z
    2714:	8f 70       	andi	r24, 0x0F	; 15
    2716:	8c 93       	st	X, r24
    2718:	a5 e3       	ldi	r26, 0x35	; 53
    271a:	b0 e0       	ldi	r27, 0x00	; 0
    271c:	e5 e3       	ldi	r30, 0x35	; 53
    271e:	f0 e0       	ldi	r31, 0x00	; 0
    2720:	80 81       	ld	r24, Z
    2722:	28 2f       	mov	r18, r24
    2724:	8b 81       	ldd	r24, Y+3	; 0x03
    2726:	88 2f       	mov	r24, r24
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	82 95       	swap	r24
    272c:	92 95       	swap	r25
    272e:	90 7f       	andi	r25, 0xF0	; 240
    2730:	98 27       	eor	r25, r24
    2732:	80 7f       	andi	r24, 0xF0	; 240
    2734:	98 27       	eor	r25, r24
    2736:	82 2b       	or	r24, r18
    2738:	8c 93       	st	X, r24
    273a:	1e c0       	rjmp	.+60     	; 0x2778 <DIO_u8SetHighNibbleValue+0x12e>
			case DIO_PORTD:PORTD &= DIO_HIGHNIBBLE_MASK;PORTD |= (Copy_u8Value<<4);break;
    273c:	a2 e3       	ldi	r26, 0x32	; 50
    273e:	b0 e0       	ldi	r27, 0x00	; 0
    2740:	e2 e3       	ldi	r30, 0x32	; 50
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	80 81       	ld	r24, Z
    2746:	8f 70       	andi	r24, 0x0F	; 15
    2748:	8c 93       	st	X, r24
    274a:	a2 e3       	ldi	r26, 0x32	; 50
    274c:	b0 e0       	ldi	r27, 0x00	; 0
    274e:	e2 e3       	ldi	r30, 0x32	; 50
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	80 81       	ld	r24, Z
    2754:	28 2f       	mov	r18, r24
    2756:	8b 81       	ldd	r24, Y+3	; 0x03
    2758:	88 2f       	mov	r24, r24
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	82 95       	swap	r24
    275e:	92 95       	swap	r25
    2760:	90 7f       	andi	r25, 0xF0	; 240
    2762:	98 27       	eor	r25, r24
    2764:	80 7f       	andi	r24, 0xF0	; 240
    2766:	98 27       	eor	r25, r24
    2768:	82 2b       	or	r24, r18
    276a:	8c 93       	st	X, r24
    276c:	05 c0       	rjmp	.+10     	; 0x2778 <DIO_u8SetHighNibbleValue+0x12e>
			default: Local_u8ErrorState=1;
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	89 83       	std	Y+1, r24	; 0x01
    2772:	02 c0       	rjmp	.+4      	; 0x2778 <DIO_u8SetHighNibbleValue+0x12e>
		}
	}
	else
		Local_u8ErrorState=1;
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2778:	89 81       	ldd	r24, Y+1	; 0x01
}
    277a:	0f 90       	pop	r0
    277c:	0f 90       	pop	r0
    277e:	0f 90       	pop	r0
    2780:	0f 90       	pop	r0
    2782:	0f 90       	pop	r0
    2784:	cf 91       	pop	r28
    2786:	df 91       	pop	r29
    2788:	08 95       	ret

0000278a <EXTI_voidInt0Init>:

static void (*EXTI_voidCallBack[3])() = {NULL};


void EXTI_voidInt0Init()
{
    278a:	df 93       	push	r29
    278c:	cf 93       	push	r28
    278e:	cd b7       	in	r28, 0x3d	; 61
    2790:	de b7       	in	r29, 0x3e	; 62
	MCUCR &= MASK_SENCE_INT0;
    2792:	a5 e5       	ldi	r26, 0x55	; 85
    2794:	b0 e0       	ldi	r27, 0x00	; 0
    2796:	e5 e5       	ldi	r30, 0x55	; 85
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	80 81       	ld	r24, Z
    279c:	8c 7f       	andi	r24, 0xFC	; 252
    279e:	8c 93       	st	X, r24
	MCUCR |= EXTI0_SENCECONTROL<<MCUCR_ISC00;
    27a0:	a5 e5       	ldi	r26, 0x55	; 85
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	e5 e5       	ldi	r30, 0x55	; 85
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	80 81       	ld	r24, Z
    27aa:	82 60       	ori	r24, 0x02	; 2
    27ac:	8c 93       	st	X, r24

	SET_BIT(GICR,GICR_INT0);
    27ae:	ab e5       	ldi	r26, 0x5B	; 91
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	eb e5       	ldi	r30, 0x5B	; 91
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	80 81       	ld	r24, Z
    27b8:	80 64       	ori	r24, 0x40	; 64
    27ba:	8c 93       	st	X, r24
}
    27bc:	cf 91       	pop	r28
    27be:	df 91       	pop	r29
    27c0:	08 95       	ret

000027c2 <EXTI_u8Int0CallBack>:

u8 EXTI_u8Int0CallBack(void (*Notification)())
{
    27c2:	df 93       	push	r29
    27c4:	cf 93       	push	r28
    27c6:	00 d0       	rcall	.+0      	; 0x27c8 <EXTI_u8Int0CallBack+0x6>
    27c8:	0f 92       	push	r0
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
    27ce:	9b 83       	std	Y+3, r25	; 0x03
    27d0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    27d2:	19 82       	std	Y+1, r1	; 0x01
	if(Notification != NULL )
    27d4:	8a 81       	ldd	r24, Y+2	; 0x02
    27d6:	9b 81       	ldd	r25, Y+3	; 0x03
    27d8:	00 97       	sbiw	r24, 0x00	; 0
    27da:	39 f0       	breq	.+14     	; 0x27ea <EXTI_u8Int0CallBack+0x28>
	{
		EXTI_voidCallBack[EXTI0] = Notification;
    27dc:	8a 81       	ldd	r24, Y+2	; 0x02
    27de:	9b 81       	ldd	r25, Y+3	; 0x03
    27e0:	90 93 18 03 	sts	0x0318, r25
    27e4:	80 93 17 03 	sts	0x0317, r24
    27e8:	02 c0       	rjmp	.+4      	; 0x27ee <EXTI_u8Int0CallBack+0x2c>
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    27ea:	82 e0       	ldi	r24, 0x02	; 2
    27ec:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    27ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    27f0:	0f 90       	pop	r0
    27f2:	0f 90       	pop	r0
    27f4:	0f 90       	pop	r0
    27f6:	cf 91       	pop	r28
    27f8:	df 91       	pop	r29
    27fa:	08 95       	ret

000027fc <EXTI_voidInt0ChangeSence>:

u8 EXTI_voidInt0ChangeSence(u8 Copy_u8Sence)
{
    27fc:	df 93       	push	r29
    27fe:	cf 93       	push	r28
    2800:	00 d0       	rcall	.+0      	; 0x2802 <EXTI_voidInt0ChangeSence+0x6>
    2802:	cd b7       	in	r28, 0x3d	; 61
    2804:	de b7       	in	r29, 0x3e	; 62
    2806:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2808:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Sence<=EXTI0_RISING_ADGE)
    280a:	8a 81       	ldd	r24, Y+2	; 0x02
    280c:	84 30       	cpi	r24, 0x04	; 4
    280e:	80 f4       	brcc	.+32     	; 0x2830 <EXTI_voidInt0ChangeSence+0x34>
	{
		MCUCR &= MASK_SENCE_INT0;
    2810:	a5 e5       	ldi	r26, 0x55	; 85
    2812:	b0 e0       	ldi	r27, 0x00	; 0
    2814:	e5 e5       	ldi	r30, 0x55	; 85
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	80 81       	ld	r24, Z
    281a:	8c 7f       	andi	r24, 0xFC	; 252
    281c:	8c 93       	st	X, r24
		MCUCR |= Copy_u8Sence<<MCUCR_ISC00;
    281e:	a5 e5       	ldi	r26, 0x55	; 85
    2820:	b0 e0       	ldi	r27, 0x00	; 0
    2822:	e5 e5       	ldi	r30, 0x55	; 85
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	90 81       	ld	r25, Z
    2828:	8a 81       	ldd	r24, Y+2	; 0x02
    282a:	89 2b       	or	r24, r25
    282c:	8c 93       	st	X, r24
    282e:	02 c0       	rjmp	.+4      	; 0x2834 <EXTI_voidInt0ChangeSence+0x38>
	}
	else
		Local_u8ErrorState = NOTOK;
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2834:	89 81       	ldd	r24, Y+1	; 0x01
}
    2836:	0f 90       	pop	r0
    2838:	0f 90       	pop	r0
    283a:	cf 91       	pop	r28
    283c:	df 91       	pop	r29
    283e:	08 95       	ret

00002840 <EXTI_voidInt1Init>:
void EXTI_voidInt1Init()
{
    2840:	df 93       	push	r29
    2842:	cf 93       	push	r28
    2844:	cd b7       	in	r28, 0x3d	; 61
    2846:	de b7       	in	r29, 0x3e	; 62
	MCUCR &= MASK_SENCE_INT1;
    2848:	a5 e5       	ldi	r26, 0x55	; 85
    284a:	b0 e0       	ldi	r27, 0x00	; 0
    284c:	e5 e5       	ldi	r30, 0x55	; 85
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	80 81       	ld	r24, Z
    2852:	83 7f       	andi	r24, 0xF3	; 243
    2854:	8c 93       	st	X, r24
	MCUCR |= EXTI1_SENCECONTROL<<MCUCR_ISC10;
    2856:	a5 e5       	ldi	r26, 0x55	; 85
    2858:	b0 e0       	ldi	r27, 0x00	; 0
    285a:	e5 e5       	ldi	r30, 0x55	; 85
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	80 81       	ld	r24, Z
    2860:	88 60       	ori	r24, 0x08	; 8
    2862:	8c 93       	st	X, r24

	SET_BIT(GICR,GICR_INT1);
    2864:	ab e5       	ldi	r26, 0x5B	; 91
    2866:	b0 e0       	ldi	r27, 0x00	; 0
    2868:	eb e5       	ldi	r30, 0x5B	; 91
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	80 81       	ld	r24, Z
    286e:	80 68       	ori	r24, 0x80	; 128
    2870:	8c 93       	st	X, r24
}
    2872:	cf 91       	pop	r28
    2874:	df 91       	pop	r29
    2876:	08 95       	ret

00002878 <EXTI_u8Int1CallBack>:

u8 EXTI_u8Int1CallBack(void (*Notification)())
{
    2878:	df 93       	push	r29
    287a:	cf 93       	push	r28
    287c:	00 d0       	rcall	.+0      	; 0x287e <EXTI_u8Int1CallBack+0x6>
    287e:	0f 92       	push	r0
    2880:	cd b7       	in	r28, 0x3d	; 61
    2882:	de b7       	in	r29, 0x3e	; 62
    2884:	9b 83       	std	Y+3, r25	; 0x03
    2886:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2888:	19 82       	std	Y+1, r1	; 0x01
	if(Notification != NULL )
    288a:	8a 81       	ldd	r24, Y+2	; 0x02
    288c:	9b 81       	ldd	r25, Y+3	; 0x03
    288e:	00 97       	sbiw	r24, 0x00	; 0
    2890:	39 f0       	breq	.+14     	; 0x28a0 <EXTI_u8Int1CallBack+0x28>
	{
		EXTI_voidCallBack[EXTI1] = Notification;
    2892:	8a 81       	ldd	r24, Y+2	; 0x02
    2894:	9b 81       	ldd	r25, Y+3	; 0x03
    2896:	90 93 1a 03 	sts	0x031A, r25
    289a:	80 93 19 03 	sts	0x0319, r24
    289e:	02 c0       	rjmp	.+4      	; 0x28a4 <EXTI_u8Int1CallBack+0x2c>
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    28a0:	82 e0       	ldi	r24, 0x02	; 2
    28a2:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    28a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    28a6:	0f 90       	pop	r0
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
    28ac:	cf 91       	pop	r28
    28ae:	df 91       	pop	r29
    28b0:	08 95       	ret

000028b2 <EXTI_voidInt1ChangeSence>:
u8 EXTI_voidInt1ChangeSence(u8 Copy_u8Sence)
{
    28b2:	df 93       	push	r29
    28b4:	cf 93       	push	r28
    28b6:	00 d0       	rcall	.+0      	; 0x28b8 <EXTI_voidInt1ChangeSence+0x6>
    28b8:	cd b7       	in	r28, 0x3d	; 61
    28ba:	de b7       	in	r29, 0x3e	; 62
    28bc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    28be:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Sence<=EXTI1_RISING_ADGE)
    28c0:	8a 81       	ldd	r24, Y+2	; 0x02
    28c2:	84 30       	cpi	r24, 0x04	; 4
    28c4:	b8 f4       	brcc	.+46     	; 0x28f4 <EXTI_voidInt1ChangeSence+0x42>
	{
		MCUCR &= MASK_SENCE_INT1;
    28c6:	a5 e5       	ldi	r26, 0x55	; 85
    28c8:	b0 e0       	ldi	r27, 0x00	; 0
    28ca:	e5 e5       	ldi	r30, 0x55	; 85
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	80 81       	ld	r24, Z
    28d0:	83 7f       	andi	r24, 0xF3	; 243
    28d2:	8c 93       	st	X, r24
		MCUCR |= Copy_u8Sence<<MCUCR_ISC10;
    28d4:	a5 e5       	ldi	r26, 0x55	; 85
    28d6:	b0 e0       	ldi	r27, 0x00	; 0
    28d8:	e5 e5       	ldi	r30, 0x55	; 85
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	80 81       	ld	r24, Z
    28de:	28 2f       	mov	r18, r24
    28e0:	8a 81       	ldd	r24, Y+2	; 0x02
    28e2:	88 2f       	mov	r24, r24
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	88 0f       	add	r24, r24
    28e8:	99 1f       	adc	r25, r25
    28ea:	88 0f       	add	r24, r24
    28ec:	99 1f       	adc	r25, r25
    28ee:	82 2b       	or	r24, r18
    28f0:	8c 93       	st	X, r24
    28f2:	02 c0       	rjmp	.+4      	; 0x28f8 <EXTI_voidInt1ChangeSence+0x46>
	}
	else
		Local_u8ErrorState = NOTOK;
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    28f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    28fa:	0f 90       	pop	r0
    28fc:	0f 90       	pop	r0
    28fe:	cf 91       	pop	r28
    2900:	df 91       	pop	r29
    2902:	08 95       	ret

00002904 <EXTI_voidInt2Init>:
void EXTI_voidInt2Init()
{
    2904:	df 93       	push	r29
    2906:	cf 93       	push	r28
    2908:	cd b7       	in	r28, 0x3d	; 61
    290a:	de b7       	in	r29, 0x3e	; 62
	MCUCSR &= MASK_SENCE_INT2;
    290c:	a4 e5       	ldi	r26, 0x54	; 84
    290e:	b0 e0       	ldi	r27, 0x00	; 0
    2910:	e4 e5       	ldi	r30, 0x54	; 84
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	80 81       	ld	r24, Z
    2916:	8f 7b       	andi	r24, 0xBF	; 191
    2918:	8c 93       	st	X, r24
	MCUCSR |= EXTI2_SENCECONTROL<<MCUCSR_ISC2;
    291a:	a4 e5       	ldi	r26, 0x54	; 84
    291c:	b0 e0       	ldi	r27, 0x00	; 0
    291e:	e4 e5       	ldi	r30, 0x54	; 84
    2920:	f0 e0       	ldi	r31, 0x00	; 0
    2922:	80 81       	ld	r24, Z
    2924:	8c 93       	st	X, r24

	SET_BIT(GICR,GICR_INT2);
    2926:	ab e5       	ldi	r26, 0x5B	; 91
    2928:	b0 e0       	ldi	r27, 0x00	; 0
    292a:	eb e5       	ldi	r30, 0x5B	; 91
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	80 81       	ld	r24, Z
    2930:	80 62       	ori	r24, 0x20	; 32
    2932:	8c 93       	st	X, r24
}
    2934:	cf 91       	pop	r28
    2936:	df 91       	pop	r29
    2938:	08 95       	ret

0000293a <EXTI_u8Int2CallBack>:

u8 EXTI_u8Int2CallBack(void (*Notification)())
{
    293a:	df 93       	push	r29
    293c:	cf 93       	push	r28
    293e:	00 d0       	rcall	.+0      	; 0x2940 <EXTI_u8Int2CallBack+0x6>
    2940:	0f 92       	push	r0
    2942:	cd b7       	in	r28, 0x3d	; 61
    2944:	de b7       	in	r29, 0x3e	; 62
    2946:	9b 83       	std	Y+3, r25	; 0x03
    2948:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    294a:	19 82       	std	Y+1, r1	; 0x01
	if(Notification != NULL )
    294c:	8a 81       	ldd	r24, Y+2	; 0x02
    294e:	9b 81       	ldd	r25, Y+3	; 0x03
    2950:	00 97       	sbiw	r24, 0x00	; 0
    2952:	39 f0       	breq	.+14     	; 0x2962 <EXTI_u8Int2CallBack+0x28>
	{
		EXTI_voidCallBack[EXTI2] = Notification;
    2954:	8a 81       	ldd	r24, Y+2	; 0x02
    2956:	9b 81       	ldd	r25, Y+3	; 0x03
    2958:	90 93 1c 03 	sts	0x031C, r25
    295c:	80 93 1b 03 	sts	0x031B, r24
    2960:	02 c0       	rjmp	.+4      	; 0x2966 <EXTI_u8Int2CallBack+0x2c>
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    2962:	82 e0       	ldi	r24, 0x02	; 2
    2964:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2966:	89 81       	ldd	r24, Y+1	; 0x01
}
    2968:	0f 90       	pop	r0
    296a:	0f 90       	pop	r0
    296c:	0f 90       	pop	r0
    296e:	cf 91       	pop	r28
    2970:	df 91       	pop	r29
    2972:	08 95       	ret

00002974 <EXTI_voidInt2ChangeSence>:

u8 EXTI_voidInt2ChangeSence(u8 Copy_u8Sence)
{
    2974:	df 93       	push	r29
    2976:	cf 93       	push	r28
    2978:	00 d0       	rcall	.+0      	; 0x297a <EXTI_voidInt2ChangeSence+0x6>
    297a:	cd b7       	in	r28, 0x3d	; 61
    297c:	de b7       	in	r29, 0x3e	; 62
    297e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2980:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Sence<=EXTI2_RISING_ADGE)
    2982:	8a 81       	ldd	r24, Y+2	; 0x02
    2984:	82 30       	cpi	r24, 0x02	; 2
    2986:	e0 f4       	brcc	.+56     	; 0x29c0 <EXTI_voidInt2ChangeSence+0x4c>
	{
		MCUCSR &= MASK_SENCE_INT2;
    2988:	a4 e5       	ldi	r26, 0x54	; 84
    298a:	b0 e0       	ldi	r27, 0x00	; 0
    298c:	e4 e5       	ldi	r30, 0x54	; 84
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	80 81       	ld	r24, Z
    2992:	8f 7b       	andi	r24, 0xBF	; 191
    2994:	8c 93       	st	X, r24
		MCUCSR |= Copy_u8Sence<<MCUCSR_ISC2;
    2996:	a4 e5       	ldi	r26, 0x54	; 84
    2998:	b0 e0       	ldi	r27, 0x00	; 0
    299a:	e4 e5       	ldi	r30, 0x54	; 84
    299c:	f0 e0       	ldi	r31, 0x00	; 0
    299e:	80 81       	ld	r24, Z
    29a0:	28 2f       	mov	r18, r24
    29a2:	8a 81       	ldd	r24, Y+2	; 0x02
    29a4:	88 2f       	mov	r24, r24
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	00 24       	eor	r0, r0
    29aa:	96 95       	lsr	r25
    29ac:	87 95       	ror	r24
    29ae:	07 94       	ror	r0
    29b0:	96 95       	lsr	r25
    29b2:	87 95       	ror	r24
    29b4:	07 94       	ror	r0
    29b6:	98 2f       	mov	r25, r24
    29b8:	80 2d       	mov	r24, r0
    29ba:	82 2b       	or	r24, r18
    29bc:	8c 93       	st	X, r24
    29be:	02 c0       	rjmp	.+4      	; 0x29c4 <EXTI_voidInt2ChangeSence+0x50>
	}
	else
		Local_u8ErrorState = NOTOK;
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    29c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    29c6:	0f 90       	pop	r0
    29c8:	0f 90       	pop	r0
    29ca:	cf 91       	pop	r28
    29cc:	df 91       	pop	r29
    29ce:	08 95       	ret

000029d0 <__vector_1>:
void __vector_1 (void)	__attribute__((signal));
void __vector_1 (void)
{
    29d0:	1f 92       	push	r1
    29d2:	0f 92       	push	r0
    29d4:	0f b6       	in	r0, 0x3f	; 63
    29d6:	0f 92       	push	r0
    29d8:	11 24       	eor	r1, r1
    29da:	2f 93       	push	r18
    29dc:	3f 93       	push	r19
    29de:	4f 93       	push	r20
    29e0:	5f 93       	push	r21
    29e2:	6f 93       	push	r22
    29e4:	7f 93       	push	r23
    29e6:	8f 93       	push	r24
    29e8:	9f 93       	push	r25
    29ea:	af 93       	push	r26
    29ec:	bf 93       	push	r27
    29ee:	ef 93       	push	r30
    29f0:	ff 93       	push	r31
    29f2:	df 93       	push	r29
    29f4:	cf 93       	push	r28
    29f6:	cd b7       	in	r28, 0x3d	; 61
    29f8:	de b7       	in	r29, 0x3e	; 62
	EXTI_voidCallBack[EXTI0]();
    29fa:	e0 91 17 03 	lds	r30, 0x0317
    29fe:	f0 91 18 03 	lds	r31, 0x0318
    2a02:	09 95       	icall
}
    2a04:	cf 91       	pop	r28
    2a06:	df 91       	pop	r29
    2a08:	ff 91       	pop	r31
    2a0a:	ef 91       	pop	r30
    2a0c:	bf 91       	pop	r27
    2a0e:	af 91       	pop	r26
    2a10:	9f 91       	pop	r25
    2a12:	8f 91       	pop	r24
    2a14:	7f 91       	pop	r23
    2a16:	6f 91       	pop	r22
    2a18:	5f 91       	pop	r21
    2a1a:	4f 91       	pop	r20
    2a1c:	3f 91       	pop	r19
    2a1e:	2f 91       	pop	r18
    2a20:	0f 90       	pop	r0
    2a22:	0f be       	out	0x3f, r0	; 63
    2a24:	0f 90       	pop	r0
    2a26:	1f 90       	pop	r1
    2a28:	18 95       	reti

00002a2a <__vector_2>:

void __vector_2 (void)	__attribute__((signal));
void __vector_2 (void)
{
    2a2a:	1f 92       	push	r1
    2a2c:	0f 92       	push	r0
    2a2e:	0f b6       	in	r0, 0x3f	; 63
    2a30:	0f 92       	push	r0
    2a32:	11 24       	eor	r1, r1
    2a34:	2f 93       	push	r18
    2a36:	3f 93       	push	r19
    2a38:	4f 93       	push	r20
    2a3a:	5f 93       	push	r21
    2a3c:	6f 93       	push	r22
    2a3e:	7f 93       	push	r23
    2a40:	8f 93       	push	r24
    2a42:	9f 93       	push	r25
    2a44:	af 93       	push	r26
    2a46:	bf 93       	push	r27
    2a48:	ef 93       	push	r30
    2a4a:	ff 93       	push	r31
    2a4c:	df 93       	push	r29
    2a4e:	cf 93       	push	r28
    2a50:	cd b7       	in	r28, 0x3d	; 61
    2a52:	de b7       	in	r29, 0x3e	; 62
	EXTI_voidCallBack[EXTI1]();
    2a54:	e0 91 19 03 	lds	r30, 0x0319
    2a58:	f0 91 1a 03 	lds	r31, 0x031A
    2a5c:	09 95       	icall
}
    2a5e:	cf 91       	pop	r28
    2a60:	df 91       	pop	r29
    2a62:	ff 91       	pop	r31
    2a64:	ef 91       	pop	r30
    2a66:	bf 91       	pop	r27
    2a68:	af 91       	pop	r26
    2a6a:	9f 91       	pop	r25
    2a6c:	8f 91       	pop	r24
    2a6e:	7f 91       	pop	r23
    2a70:	6f 91       	pop	r22
    2a72:	5f 91       	pop	r21
    2a74:	4f 91       	pop	r20
    2a76:	3f 91       	pop	r19
    2a78:	2f 91       	pop	r18
    2a7a:	0f 90       	pop	r0
    2a7c:	0f be       	out	0x3f, r0	; 63
    2a7e:	0f 90       	pop	r0
    2a80:	1f 90       	pop	r1
    2a82:	18 95       	reti

00002a84 <__vector_3>:

void __vector_3 (void)	__attribute__((signal));
void __vector_3 (void)
{
    2a84:	1f 92       	push	r1
    2a86:	0f 92       	push	r0
    2a88:	0f b6       	in	r0, 0x3f	; 63
    2a8a:	0f 92       	push	r0
    2a8c:	11 24       	eor	r1, r1
    2a8e:	2f 93       	push	r18
    2a90:	3f 93       	push	r19
    2a92:	4f 93       	push	r20
    2a94:	5f 93       	push	r21
    2a96:	6f 93       	push	r22
    2a98:	7f 93       	push	r23
    2a9a:	8f 93       	push	r24
    2a9c:	9f 93       	push	r25
    2a9e:	af 93       	push	r26
    2aa0:	bf 93       	push	r27
    2aa2:	ef 93       	push	r30
    2aa4:	ff 93       	push	r31
    2aa6:	df 93       	push	r29
    2aa8:	cf 93       	push	r28
    2aaa:	cd b7       	in	r28, 0x3d	; 61
    2aac:	de b7       	in	r29, 0x3e	; 62
	EXTI_voidCallBack[EXTI2]();
    2aae:	e0 91 1b 03 	lds	r30, 0x031B
    2ab2:	f0 91 1c 03 	lds	r31, 0x031C
    2ab6:	09 95       	icall
}
    2ab8:	cf 91       	pop	r28
    2aba:	df 91       	pop	r29
    2abc:	ff 91       	pop	r31
    2abe:	ef 91       	pop	r30
    2ac0:	bf 91       	pop	r27
    2ac2:	af 91       	pop	r26
    2ac4:	9f 91       	pop	r25
    2ac6:	8f 91       	pop	r24
    2ac8:	7f 91       	pop	r23
    2aca:	6f 91       	pop	r22
    2acc:	5f 91       	pop	r21
    2ace:	4f 91       	pop	r20
    2ad0:	3f 91       	pop	r19
    2ad2:	2f 91       	pop	r18
    2ad4:	0f 90       	pop	r0
    2ad6:	0f be       	out	0x3f, r0	; 63
    2ad8:	0f 90       	pop	r0
    2ada:	1f 90       	pop	r1
    2adc:	18 95       	reti

00002ade <GIE_voidEnable>:
#include "../MCAL/GIE_interface.h"
#include "../MCAL/GIE_register.h"


void GIE_voidEnable()
{
    2ade:	df 93       	push	r29
    2ae0:	cf 93       	push	r28
    2ae2:	cd b7       	in	r28, 0x3d	; 61
    2ae4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    2ae6:	af e5       	ldi	r26, 0x5F	; 95
    2ae8:	b0 e0       	ldi	r27, 0x00	; 0
    2aea:	ef e5       	ldi	r30, 0x5F	; 95
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	80 81       	ld	r24, Z
    2af0:	80 68       	ori	r24, 0x80	; 128
    2af2:	8c 93       	st	X, r24
}
    2af4:	cf 91       	pop	r28
    2af6:	df 91       	pop	r29
    2af8:	08 95       	ret

00002afa <GIE_voidDisable>:

void GIE_voidDisable()
{
    2afa:	df 93       	push	r29
    2afc:	cf 93       	push	r28
    2afe:	cd b7       	in	r28, 0x3d	; 61
    2b00:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    2b02:	af e5       	ldi	r26, 0x5F	; 95
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	ef e5       	ldi	r30, 0x5F	; 95
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	80 81       	ld	r24, Z
    2b0c:	8f 77       	andi	r24, 0x7F	; 127
    2b0e:	8c 93       	st	X, r24
}
    2b10:	cf 91       	pop	r28
    2b12:	df 91       	pop	r29
    2b14:	08 95       	ret

00002b16 <KPD_u8Key_pressed>:
#include "../HAL/KPD_config.h"
#include "../HAL/KPD_interface.h"
#include "../HAL/KPD_private.h"

u8 KPD_u8Key_pressed()
{
    2b16:	df 93       	push	r29
    2b18:	cf 93       	push	r28
    2b1a:	00 d0       	rcall	.+0      	; 0x2b1c <KPD_u8Key_pressed+0x6>
    2b1c:	00 d0       	rcall	.+0      	; 0x2b1e <KPD_u8Key_pressed+0x8>
    2b1e:	0f 92       	push	r0
    2b20:	cd b7       	in	r28, 0x3d	; 61
    2b22:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8RowItrator;
	u8 Local_u8ColItrator;
	u8 Local_u8GetState;
	u8 Local_u8KeyPressed = KPD_NO_PRESSED_KEY;
    2b24:	8f ef       	ldi	r24, 0xFF	; 255
    2b26:	89 83       	std	Y+1, r24	; 0x01
	static u8 Local_u8KPD_ROW_PINS[Max_Rows] = { KPD_ROW_PIN0, KPD_ROW_PIN1,
			KPD_ROW_PIN2, KPD_ROW_PIN3 };
	static u8 Local_u8KPD_COL_PINS[Max_Cols] = { KPD_COL_PIN0, KPD_COL_PIN1,
			KPD_COL_PIN2, KPD_COL_PIN3 };
	static u8 Local_u8KPD_Nums[Max_Rows][Max_Cols] = KPD_u8ARR;
	for (Local_u8ColItrator = 0; Local_u8ColItrator < Max_Cols;
    2b28:	1a 82       	std	Y+2, r1	; 0x02
    2b2a:	5e c0       	rjmp	.+188    	; 0x2be8 <KPD_u8Key_pressed+0xd2>
			Local_u8ColItrator++) {
		DIO_u8SetPinValue(KPD_INPUT_PORT,
    2b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2e:	88 2f       	mov	r24, r24
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	fc 01       	movw	r30, r24
    2b34:	e1 52       	subi	r30, 0x21	; 33
    2b36:	fd 4f       	sbci	r31, 0xFD	; 253
    2b38:	90 81       	ld	r25, Z
    2b3a:	82 e0       	ldi	r24, 0x02	; 2
    2b3c:	69 2f       	mov	r22, r25
    2b3e:	40 e0       	ldi	r20, 0x00	; 0
    2b40:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_u8SetPinValue>
				Local_u8KPD_COL_PINS[Local_u8ColItrator], DIO_PIN_LOW);
		/*Read the current Row*/
		for (Local_u8RowItrator = 0; Local_u8RowItrator < Max_Rows;
    2b44:	1b 82       	std	Y+3, r1	; 0x03
    2b46:	3d c0       	rjmp	.+122    	; 0x2bc2 <KPD_u8Key_pressed+0xac>
				Local_u8RowItrator++) {
			DIO_u8GetPinValue(KPD_INPUT_PORT,
    2b48:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4a:	88 2f       	mov	r24, r24
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	fc 01       	movw	r30, r24
    2b50:	ed 51       	subi	r30, 0x1D	; 29
    2b52:	fd 4f       	sbci	r31, 0xFD	; 253
    2b54:	90 81       	ld	r25, Z
    2b56:	9e 01       	movw	r18, r28
    2b58:	2c 5f       	subi	r18, 0xFC	; 252
    2b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b5c:	82 e0       	ldi	r24, 0x02	; 2
    2b5e:	69 2f       	mov	r22, r25
    2b60:	a9 01       	movw	r20, r18
    2b62:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_u8GetPinValue>
					Local_u8KPD_ROW_PINS[Local_u8RowItrator],
					&Local_u8GetState);
			/*chick switch id pressed */
			if (Local_u8GetState == DIO_PIN_LOW) {
    2b66:	8c 81       	ldd	r24, Y+4	; 0x04
    2b68:	88 23       	and	r24, r24
    2b6a:	41 f5       	brne	.+80     	; 0x2bbc <KPD_u8Key_pressed+0xa6>
				Local_u8KeyPressed =
    2b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6e:	48 2f       	mov	r20, r24
    2b70:	50 e0       	ldi	r21, 0x00	; 0
    2b72:	8a 81       	ldd	r24, Y+2	; 0x02
    2b74:	28 2f       	mov	r18, r24
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	ca 01       	movw	r24, r20
    2b7a:	88 0f       	add	r24, r24
    2b7c:	99 1f       	adc	r25, r25
    2b7e:	88 0f       	add	r24, r24
    2b80:	99 1f       	adc	r25, r25
    2b82:	82 0f       	add	r24, r18
    2b84:	93 1f       	adc	r25, r19
    2b86:	fc 01       	movw	r30, r24
    2b88:	e1 53       	subi	r30, 0x31	; 49
    2b8a:	fd 4f       	sbci	r31, 0xFD	; 253
    2b8c:	80 81       	ld	r24, Z
    2b8e:	89 83       	std	Y+1, r24	; 0x01
    2b90:	0f c0       	rjmp	.+30     	; 0x2bb0 <KPD_u8Key_pressed+0x9a>
						Local_u8KPD_Nums[Local_u8RowItrator][Local_u8ColItrator];
				/*polling busy waiting until the key is released*/
				while (Local_u8GetState == DIO_PIN_LOW) {
					DIO_u8GetPinValue(KPD_INPUT_PORT,
    2b92:	8b 81       	ldd	r24, Y+3	; 0x03
    2b94:	88 2f       	mov	r24, r24
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	fc 01       	movw	r30, r24
    2b9a:	ed 51       	subi	r30, 0x1D	; 29
    2b9c:	fd 4f       	sbci	r31, 0xFD	; 253
    2b9e:	90 81       	ld	r25, Z
    2ba0:	9e 01       	movw	r18, r28
    2ba2:	2c 5f       	subi	r18, 0xFC	; 252
    2ba4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ba6:	82 e0       	ldi	r24, 0x02	; 2
    2ba8:	69 2f       	mov	r22, r25
    2baa:	a9 01       	movw	r20, r18
    2bac:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_u8GetPinValue>
			/*chick switch id pressed */
			if (Local_u8GetState == DIO_PIN_LOW) {
				Local_u8KeyPressed =
						Local_u8KPD_Nums[Local_u8RowItrator][Local_u8ColItrator];
				/*polling busy waiting until the key is released*/
				while (Local_u8GetState == DIO_PIN_LOW) {
    2bb0:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb2:	88 23       	and	r24, r24
    2bb4:	71 f3       	breq	.-36     	; 0x2b92 <KPD_u8Key_pressed+0x7c>
					DIO_u8GetPinValue(KPD_INPUT_PORT,
							Local_u8KPD_ROW_PINS[Local_u8RowItrator],
							&Local_u8GetState);
				}
				return Local_u8KeyPressed;
    2bb6:	89 81       	ldd	r24, Y+1	; 0x01
    2bb8:	8d 83       	std	Y+5, r24	; 0x05
    2bba:	1c c0       	rjmp	.+56     	; 0x2bf4 <KPD_u8Key_pressed+0xde>
			Local_u8ColItrator++) {
		DIO_u8SetPinValue(KPD_INPUT_PORT,
				Local_u8KPD_COL_PINS[Local_u8ColItrator], DIO_PIN_LOW);
		/*Read the current Row*/
		for (Local_u8RowItrator = 0; Local_u8RowItrator < Max_Rows;
				Local_u8RowItrator++) {
    2bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bbe:	8f 5f       	subi	r24, 0xFF	; 255
    2bc0:	8b 83       	std	Y+3, r24	; 0x03
	for (Local_u8ColItrator = 0; Local_u8ColItrator < Max_Cols;
			Local_u8ColItrator++) {
		DIO_u8SetPinValue(KPD_INPUT_PORT,
				Local_u8KPD_COL_PINS[Local_u8ColItrator], DIO_PIN_LOW);
		/*Read the current Row*/
		for (Local_u8RowItrator = 0; Local_u8RowItrator < Max_Rows;
    2bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc4:	84 30       	cpi	r24, 0x04	; 4
    2bc6:	08 f4       	brcc	.+2      	; 0x2bca <KPD_u8Key_pressed+0xb4>
    2bc8:	bf cf       	rjmp	.-130    	; 0x2b48 <KPD_u8Key_pressed+0x32>
							&Local_u8GetState);
				}
				return Local_u8KeyPressed;
			}
		}
		DIO_u8SetPinValue(KPD_INPUT_PORT,
    2bca:	8a 81       	ldd	r24, Y+2	; 0x02
    2bcc:	88 2f       	mov	r24, r24
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	fc 01       	movw	r30, r24
    2bd2:	e1 52       	subi	r30, 0x21	; 33
    2bd4:	fd 4f       	sbci	r31, 0xFD	; 253
    2bd6:	90 81       	ld	r25, Z
    2bd8:	82 e0       	ldi	r24, 0x02	; 2
    2bda:	69 2f       	mov	r22, r25
    2bdc:	41 e0       	ldi	r20, 0x01	; 1
    2bde:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_u8SetPinValue>
			KPD_ROW_PIN2, KPD_ROW_PIN3 };
	static u8 Local_u8KPD_COL_PINS[Max_Cols] = { KPD_COL_PIN0, KPD_COL_PIN1,
			KPD_COL_PIN2, KPD_COL_PIN3 };
	static u8 Local_u8KPD_Nums[Max_Rows][Max_Cols] = KPD_u8ARR;
	for (Local_u8ColItrator = 0; Local_u8ColItrator < Max_Cols;
			Local_u8ColItrator++) {
    2be2:	8a 81       	ldd	r24, Y+2	; 0x02
    2be4:	8f 5f       	subi	r24, 0xFF	; 255
    2be6:	8a 83       	std	Y+2, r24	; 0x02
	static u8 Local_u8KPD_ROW_PINS[Max_Rows] = { KPD_ROW_PIN0, KPD_ROW_PIN1,
			KPD_ROW_PIN2, KPD_ROW_PIN3 };
	static u8 Local_u8KPD_COL_PINS[Max_Cols] = { KPD_COL_PIN0, KPD_COL_PIN1,
			KPD_COL_PIN2, KPD_COL_PIN3 };
	static u8 Local_u8KPD_Nums[Max_Rows][Max_Cols] = KPD_u8ARR;
	for (Local_u8ColItrator = 0; Local_u8ColItrator < Max_Cols;
    2be8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bea:	84 30       	cpi	r24, 0x04	; 4
    2bec:	08 f4       	brcc	.+2      	; 0x2bf0 <KPD_u8Key_pressed+0xda>
    2bee:	9e cf       	rjmp	.-196    	; 0x2b2c <KPD_u8Key_pressed+0x16>
			}
		}
		DIO_u8SetPinValue(KPD_INPUT_PORT,
				Local_u8KPD_COL_PINS[Local_u8ColItrator], DIO_PIN_HIGH);
	}
	return Local_u8KeyPressed;
    2bf0:	89 81       	ldd	r24, Y+1	; 0x01
    2bf2:	8d 83       	std	Y+5, r24	; 0x05
    2bf4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2bf6:	0f 90       	pop	r0
    2bf8:	0f 90       	pop	r0
    2bfa:	0f 90       	pop	r0
    2bfc:	0f 90       	pop	r0
    2bfe:	0f 90       	pop	r0
    2c00:	cf 91       	pop	r28
    2c02:	df 91       	pop	r29
    2c04:	08 95       	ret

00002c06 <LED_u8TurnOn>:
#include "../HAL/LED_private.h"
#include "../HAL/LED_config.h"
#include "../HAL/LED_interface.h"

u8 LED_u8TurnOn(LED_t * Copy_LED)
{
    2c06:	df 93       	push	r29
    2c08:	cf 93       	push	r28
    2c0a:	00 d0       	rcall	.+0      	; 0x2c0c <LED_u8TurnOn+0x6>
    2c0c:	0f 92       	push	r0
    2c0e:	cd b7       	in	r28, 0x3d	; 61
    2c10:	de b7       	in	r29, 0x3e	; 62
    2c12:	9b 83       	std	Y+3, r25	; 0x03
    2c14:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2c16:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_LED->ConnType==LED_SOUCE)
    2c18:	ea 81       	ldd	r30, Y+2	; 0x02
    2c1a:	fb 81       	ldd	r31, Y+3	; 0x03
    2c1c:	82 81       	ldd	r24, Z+2	; 0x02
    2c1e:	81 30       	cpi	r24, 0x01	; 1
    2c20:	59 f4       	brne	.+22     	; 0x2c38 <LED_u8TurnOn+0x32>
	{
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,DIO_PIN_HIGH);
    2c22:	ea 81       	ldd	r30, Y+2	; 0x02
    2c24:	fb 81       	ldd	r31, Y+3	; 0x03
    2c26:	80 81       	ld	r24, Z
    2c28:	ea 81       	ldd	r30, Y+2	; 0x02
    2c2a:	fb 81       	ldd	r31, Y+3	; 0x03
    2c2c:	91 81       	ldd	r25, Z+1	; 0x01
    2c2e:	69 2f       	mov	r22, r25
    2c30:	41 e0       	ldi	r20, 0x01	; 1
    2c32:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_u8SetPinValue>
    2c36:	12 c0       	rjmp	.+36     	; 0x2c5c <LED_u8TurnOn+0x56>
	}
	else if(Copy_LED->ConnType==LED_SINK)
    2c38:	ea 81       	ldd	r30, Y+2	; 0x02
    2c3a:	fb 81       	ldd	r31, Y+3	; 0x03
    2c3c:	82 81       	ldd	r24, Z+2	; 0x02
    2c3e:	88 23       	and	r24, r24
    2c40:	59 f4       	brne	.+22     	; 0x2c58 <LED_u8TurnOn+0x52>
	{
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,DIO_PIN_LOW);
    2c42:	ea 81       	ldd	r30, Y+2	; 0x02
    2c44:	fb 81       	ldd	r31, Y+3	; 0x03
    2c46:	80 81       	ld	r24, Z
    2c48:	ea 81       	ldd	r30, Y+2	; 0x02
    2c4a:	fb 81       	ldd	r31, Y+3	; 0x03
    2c4c:	91 81       	ldd	r25, Z+1	; 0x01
    2c4e:	69 2f       	mov	r22, r25
    2c50:	40 e0       	ldi	r20, 0x00	; 0
    2c52:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_u8SetPinValue>
    2c56:	02 c0       	rjmp	.+4      	; 0x2c5c <LED_u8TurnOn+0x56>
	}
	else
		Local_u8ErrorState = NOTOK;
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    2c5c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c5e:	0f 90       	pop	r0
    2c60:	0f 90       	pop	r0
    2c62:	0f 90       	pop	r0
    2c64:	cf 91       	pop	r28
    2c66:	df 91       	pop	r29
    2c68:	08 95       	ret

00002c6a <LED_u8TurnOff>:
u8 LED_u8TurnOff(LED_t * Copy_LED)
{
    2c6a:	df 93       	push	r29
    2c6c:	cf 93       	push	r28
    2c6e:	00 d0       	rcall	.+0      	; 0x2c70 <LED_u8TurnOff+0x6>
    2c70:	0f 92       	push	r0
    2c72:	cd b7       	in	r28, 0x3d	; 61
    2c74:	de b7       	in	r29, 0x3e	; 62
    2c76:	9b 83       	std	Y+3, r25	; 0x03
    2c78:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2c7a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_LED->ConnType==LED_SOUCE)
    2c7c:	ea 81       	ldd	r30, Y+2	; 0x02
    2c7e:	fb 81       	ldd	r31, Y+3	; 0x03
    2c80:	82 81       	ldd	r24, Z+2	; 0x02
    2c82:	81 30       	cpi	r24, 0x01	; 1
    2c84:	59 f4       	brne	.+22     	; 0x2c9c <LED_u8TurnOff+0x32>
	{
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,DIO_PIN_LOW);
    2c86:	ea 81       	ldd	r30, Y+2	; 0x02
    2c88:	fb 81       	ldd	r31, Y+3	; 0x03
    2c8a:	80 81       	ld	r24, Z
    2c8c:	ea 81       	ldd	r30, Y+2	; 0x02
    2c8e:	fb 81       	ldd	r31, Y+3	; 0x03
    2c90:	91 81       	ldd	r25, Z+1	; 0x01
    2c92:	69 2f       	mov	r22, r25
    2c94:	40 e0       	ldi	r20, 0x00	; 0
    2c96:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_u8SetPinValue>
    2c9a:	12 c0       	rjmp	.+36     	; 0x2cc0 <LED_u8TurnOff+0x56>
	}
	else if(Copy_LED->ConnType==LED_SINK)
    2c9c:	ea 81       	ldd	r30, Y+2	; 0x02
    2c9e:	fb 81       	ldd	r31, Y+3	; 0x03
    2ca0:	82 81       	ldd	r24, Z+2	; 0x02
    2ca2:	88 23       	and	r24, r24
    2ca4:	59 f4       	brne	.+22     	; 0x2cbc <LED_u8TurnOff+0x52>
	{
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,DIO_PIN_HIGH);
    2ca6:	ea 81       	ldd	r30, Y+2	; 0x02
    2ca8:	fb 81       	ldd	r31, Y+3	; 0x03
    2caa:	80 81       	ld	r24, Z
    2cac:	ea 81       	ldd	r30, Y+2	; 0x02
    2cae:	fb 81       	ldd	r31, Y+3	; 0x03
    2cb0:	91 81       	ldd	r25, Z+1	; 0x01
    2cb2:	69 2f       	mov	r22, r25
    2cb4:	41 e0       	ldi	r20, 0x01	; 1
    2cb6:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_u8SetPinValue>
    2cba:	02 c0       	rjmp	.+4      	; 0x2cc0 <LED_u8TurnOff+0x56>
	}
	else
		Local_u8ErrorState = NOTOK;
    2cbc:	81 e0       	ldi	r24, 0x01	; 1
    2cbe:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    2cc0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cc2:	0f 90       	pop	r0
    2cc4:	0f 90       	pop	r0
    2cc6:	0f 90       	pop	r0
    2cc8:	cf 91       	pop	r28
    2cca:	df 91       	pop	r29
    2ccc:	08 95       	ret

00002cce <LED_u8TogLed>:
u8 LED_u8TogLed(LED_t *Copy_LED)
{
    2cce:	df 93       	push	r29
    2cd0:	cf 93       	push	r28
    2cd2:	00 d0       	rcall	.+0      	; 0x2cd4 <LED_u8TogLed+0x6>
    2cd4:	0f 92       	push	r0
    2cd6:	cd b7       	in	r28, 0x3d	; 61
    2cd8:	de b7       	in	r29, 0x3e	; 62
    2cda:	9b 83       	std	Y+3, r25	; 0x03
    2cdc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2cde:	19 82       	std	Y+1, r1	; 0x01
	static u8 Local_u8State = 0;
	if(Copy_LED->ConnType==LED_SOUCE)
    2ce0:	ea 81       	ldd	r30, Y+2	; 0x02
    2ce2:	fb 81       	ldd	r31, Y+3	; 0x03
    2ce4:	82 81       	ldd	r24, Z+2	; 0x02
    2ce6:	81 30       	cpi	r24, 0x01	; 1
    2ce8:	99 f4       	brne	.+38     	; 0x2d10 <LED_u8TogLed+0x42>
	{
		TOG_BIT(Local_u8State,0);
    2cea:	90 91 1d 03 	lds	r25, 0x031D
    2cee:	81 e0       	ldi	r24, 0x01	; 1
    2cf0:	89 27       	eor	r24, r25
    2cf2:	80 93 1d 03 	sts	0x031D, r24
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,Local_u8State);
    2cf6:	ea 81       	ldd	r30, Y+2	; 0x02
    2cf8:	fb 81       	ldd	r31, Y+3	; 0x03
    2cfa:	80 81       	ld	r24, Z
    2cfc:	ea 81       	ldd	r30, Y+2	; 0x02
    2cfe:	fb 81       	ldd	r31, Y+3	; 0x03
    2d00:	91 81       	ldd	r25, Z+1	; 0x01
    2d02:	20 91 1d 03 	lds	r18, 0x031D
    2d06:	69 2f       	mov	r22, r25
    2d08:	42 2f       	mov	r20, r18
    2d0a:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_u8SetPinValue>
    2d0e:	1a c0       	rjmp	.+52     	; 0x2d44 <LED_u8TogLed+0x76>
	}
	else if(Copy_LED->ConnType==LED_SINK)
    2d10:	ea 81       	ldd	r30, Y+2	; 0x02
    2d12:	fb 81       	ldd	r31, Y+3	; 0x03
    2d14:	82 81       	ldd	r24, Z+2	; 0x02
    2d16:	88 23       	and	r24, r24
    2d18:	99 f4       	brne	.+38     	; 0x2d40 <LED_u8TogLed+0x72>
	{
		TOG_BIT(Local_u8State,0);
    2d1a:	90 91 1d 03 	lds	r25, 0x031D
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	89 27       	eor	r24, r25
    2d22:	80 93 1d 03 	sts	0x031D, r24
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,Local_u8State);
    2d26:	ea 81       	ldd	r30, Y+2	; 0x02
    2d28:	fb 81       	ldd	r31, Y+3	; 0x03
    2d2a:	80 81       	ld	r24, Z
    2d2c:	ea 81       	ldd	r30, Y+2	; 0x02
    2d2e:	fb 81       	ldd	r31, Y+3	; 0x03
    2d30:	91 81       	ldd	r25, Z+1	; 0x01
    2d32:	20 91 1d 03 	lds	r18, 0x031D
    2d36:	69 2f       	mov	r22, r25
    2d38:	42 2f       	mov	r20, r18
    2d3a:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_u8SetPinValue>
    2d3e:	02 c0       	rjmp	.+4      	; 0x2d44 <LED_u8TogLed+0x76>
	}
	else
		Local_u8ErrorState = NOTOK;
    2d40:	81 e0       	ldi	r24, 0x01	; 1
    2d42:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    2d44:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d46:	0f 90       	pop	r0
    2d48:	0f 90       	pop	r0
    2d4a:	0f 90       	pop	r0
    2d4c:	cf 91       	pop	r28
    2d4e:	df 91       	pop	r29
    2d50:	08 95       	ret

00002d52 <PORT_voidInit>:
#include "../MCAL/PORT_config.h"
#include "../MCAL/PORT_register.h"
#include "../MCAL/PORT_interface.h"

void PORT_voidInit()
{
    2d52:	df 93       	push	r29
    2d54:	cf 93       	push	r28
    2d56:	cd b7       	in	r28, 0x3d	; 61
    2d58:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;	
    2d5a:	ea e3       	ldi	r30, 0x3A	; 58
    2d5c:	f0 e0       	ldi	r31, 0x00	; 0
    2d5e:	85 ef       	ldi	r24, 0xF5	; 245
    2d60:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    2d62:	e7 e3       	ldi	r30, 0x37	; 55
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	8b ef       	ldi	r24, 0xFB	; 251
    2d68:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    2d6a:	e4 e3       	ldi	r30, 0x34	; 52
    2d6c:	f0 e0       	ldi	r31, 0x00	; 0
    2d6e:	80 ef       	ldi	r24, 0xF0	; 240
    2d70:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    2d72:	e1 e3       	ldi	r30, 0x31	; 49
    2d74:	f0 e0       	ldi	r31, 0x00	; 0
    2d76:	80 ea       	ldi	r24, 0xA0	; 160
    2d78:	80 83       	st	Z, r24
	
	PORTA =PORTA_INIT_VALUE;
    2d7a:	eb e3       	ldi	r30, 0x3B	; 59
    2d7c:	f0 e0       	ldi	r31, 0x00	; 0
    2d7e:	8a e0       	ldi	r24, 0x0A	; 10
    2d80:	80 83       	st	Z, r24
	PORTB =PORTB_INIT_VALUE;
    2d82:	e8 e3       	ldi	r30, 0x38	; 56
    2d84:	f0 e0       	ldi	r31, 0x00	; 0
    2d86:	10 82       	st	Z, r1
	PORTC =PORTC_INIT_VALUE;
    2d88:	e5 e3       	ldi	r30, 0x35	; 53
    2d8a:	f0 e0       	ldi	r31, 0x00	; 0
    2d8c:	8f ef       	ldi	r24, 0xFF	; 255
    2d8e:	80 83       	st	Z, r24
	PORTD =PORTD_INIT_VALUE;
    2d90:	e2 e3       	ldi	r30, 0x32	; 50
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	10 82       	st	Z, r1
	
}
    2d96:	cf 91       	pop	r28
    2d98:	df 91       	pop	r29
    2d9a:	08 95       	ret

00002d9c <SERVO_voidInit>:
#include "../HAL/SERVO_private.h"
#include "../HAL/SERVO_config.h"
#include "../HAL/SERVO_interface.h"

void SERVO_voidInit()
{
    2d9c:	df 93       	push	r29
    2d9e:	cf 93       	push	r28
    2da0:	cd b7       	in	r28, 0x3d	; 61
    2da2:	de b7       	in	r29, 0x3e	; 62
    2da4:	2a 97       	sbiw	r28, 0x0a	; 10
    2da6:	0f b6       	in	r0, 0x3f	; 63
    2da8:	f8 94       	cli
    2daa:	de bf       	out	0x3e, r29	; 62
    2dac:	0f be       	out	0x3f, r0	; 63
    2dae:	cd bf       	out	0x3d, r28	; 61
	Timer_t t1 = {TIMER1,TIMER1_IC_FAST_PWM,SERVO_CHANNAL_CON,TIMER10_DIV_8,TIMER1A_INT_DISABLE|TIMER1B_INT_DISABLE};
    2db0:	ce 01       	movw	r24, r28
    2db2:	01 96       	adiw	r24, 0x01	; 1
    2db4:	9f 83       	std	Y+7, r25	; 0x07
    2db6:	8e 83       	std	Y+6, r24	; 0x06
    2db8:	e4 ef       	ldi	r30, 0xF4	; 244
    2dba:	f2 e0       	ldi	r31, 0x02	; 2
    2dbc:	f9 87       	std	Y+9, r31	; 0x09
    2dbe:	e8 87       	std	Y+8, r30	; 0x08
    2dc0:	f5 e0       	ldi	r31, 0x05	; 5
    2dc2:	fa 87       	std	Y+10, r31	; 0x0a
    2dc4:	e8 85       	ldd	r30, Y+8	; 0x08
    2dc6:	f9 85       	ldd	r31, Y+9	; 0x09
    2dc8:	00 80       	ld	r0, Z
    2dca:	88 85       	ldd	r24, Y+8	; 0x08
    2dcc:	99 85       	ldd	r25, Y+9	; 0x09
    2dce:	01 96       	adiw	r24, 0x01	; 1
    2dd0:	99 87       	std	Y+9, r25	; 0x09
    2dd2:	88 87       	std	Y+8, r24	; 0x08
    2dd4:	ee 81       	ldd	r30, Y+6	; 0x06
    2dd6:	ff 81       	ldd	r31, Y+7	; 0x07
    2dd8:	00 82       	st	Z, r0
    2dda:	8e 81       	ldd	r24, Y+6	; 0x06
    2ddc:	9f 81       	ldd	r25, Y+7	; 0x07
    2dde:	01 96       	adiw	r24, 0x01	; 1
    2de0:	9f 83       	std	Y+7, r25	; 0x07
    2de2:	8e 83       	std	Y+6, r24	; 0x06
    2de4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2de6:	91 50       	subi	r25, 0x01	; 1
    2de8:	9a 87       	std	Y+10, r25	; 0x0a
    2dea:	ea 85       	ldd	r30, Y+10	; 0x0a
    2dec:	ee 23       	and	r30, r30
    2dee:	51 f7       	brne	.-44     	; 0x2dc4 <SERVO_voidInit+0x28>
	TIMER1_voidSetICR(20000);
    2df0:	80 e2       	ldi	r24, 0x20	; 32
    2df2:	9e e4       	ldi	r25, 0x4E	; 78
    2df4:	0e 94 22 25 	call	0x4a44	; 0x4a44 <TIMER1_voidSetICR>
	TIMER_voidInit(&t1);
    2df8:	ce 01       	movw	r24, r28
    2dfa:	01 96       	adiw	r24, 0x01	; 1
    2dfc:	0e 94 72 22 	call	0x44e4	; 0x44e4 <TIMER_voidInit>
}
    2e00:	2a 96       	adiw	r28, 0x0a	; 10
    2e02:	0f b6       	in	r0, 0x3f	; 63
    2e04:	f8 94       	cli
    2e06:	de bf       	out	0x3e, r29	; 62
    2e08:	0f be       	out	0x3f, r0	; 63
    2e0a:	cd bf       	out	0x3d, r28	; 61
    2e0c:	cf 91       	pop	r28
    2e0e:	df 91       	pop	r29
    2e10:	08 95       	ret

00002e12 <SERVO_voidSetAngle>:

void SERVO_voidSetAngle(u16 Copy_u16Angle)
{
    2e12:	af 92       	push	r10
    2e14:	bf 92       	push	r11
    2e16:	cf 92       	push	r12
    2e18:	df 92       	push	r13
    2e1a:	ef 92       	push	r14
    2e1c:	ff 92       	push	r15
    2e1e:	0f 93       	push	r16
    2e20:	1f 93       	push	r17
    2e22:	df 93       	push	r29
    2e24:	cf 93       	push	r28
    2e26:	00 d0       	rcall	.+0      	; 0x2e28 <SERVO_voidSetAngle+0x16>
    2e28:	00 d0       	rcall	.+0      	; 0x2e2a <SERVO_voidSetAngle+0x18>
    2e2a:	00 d0       	rcall	.+0      	; 0x2e2c <SERVO_voidSetAngle+0x1a>
    2e2c:	cd b7       	in	r28, 0x3d	; 61
    2e2e:	de b7       	in	r29, 0x3e	; 62
    2e30:	9e 83       	std	Y+6, r25	; 0x06
    2e32:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32Angle=0;
    2e34:	19 82       	std	Y+1, r1	; 0x01
    2e36:	1a 82       	std	Y+2, r1	; 0x02
    2e38:	1b 82       	std	Y+3, r1	; 0x03
    2e3a:	1c 82       	std	Y+4, r1	; 0x04
	Local_u32Angle = Map(0,180,750,2499,Copy_u16Angle);
    2e3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e40:	cc 01       	movw	r24, r24
    2e42:	a0 e0       	ldi	r26, 0x00	; 0
    2e44:	b0 e0       	ldi	r27, 0x00	; 0
    2e46:	00 d0       	rcall	.+0      	; 0x2e48 <SERVO_voidSetAngle+0x36>
    2e48:	00 d0       	rcall	.+0      	; 0x2e4a <SERVO_voidSetAngle+0x38>
    2e4a:	ed b7       	in	r30, 0x3d	; 61
    2e4c:	fe b7       	in	r31, 0x3e	; 62
    2e4e:	31 96       	adiw	r30, 0x01	; 1
    2e50:	80 83       	st	Z, r24
    2e52:	91 83       	std	Z+1, r25	; 0x01
    2e54:	a2 83       	std	Z+2, r26	; 0x02
    2e56:	b3 83       	std	Z+3, r27	; 0x03
    2e58:	60 e0       	ldi	r22, 0x00	; 0
    2e5a:	70 e0       	ldi	r23, 0x00	; 0
    2e5c:	80 e0       	ldi	r24, 0x00	; 0
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	24 eb       	ldi	r18, 0xB4	; 180
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	40 e0       	ldi	r20, 0x00	; 0
    2e66:	50 e0       	ldi	r21, 0x00	; 0
    2e68:	0f 2e       	mov	r0, r31
    2e6a:	fe ee       	ldi	r31, 0xEE	; 238
    2e6c:	ef 2e       	mov	r14, r31
    2e6e:	f2 e0       	ldi	r31, 0x02	; 2
    2e70:	ff 2e       	mov	r15, r31
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	0f 2f       	mov	r16, r31
    2e76:	f0 e0       	ldi	r31, 0x00	; 0
    2e78:	1f 2f       	mov	r17, r31
    2e7a:	f0 2d       	mov	r31, r0
    2e7c:	0f 2e       	mov	r0, r31
    2e7e:	f3 ec       	ldi	r31, 0xC3	; 195
    2e80:	af 2e       	mov	r10, r31
    2e82:	f9 e0       	ldi	r31, 0x09	; 9
    2e84:	bf 2e       	mov	r11, r31
    2e86:	f0 e0       	ldi	r31, 0x00	; 0
    2e88:	cf 2e       	mov	r12, r31
    2e8a:	f0 e0       	ldi	r31, 0x00	; 0
    2e8c:	df 2e       	mov	r13, r31
    2e8e:	f0 2d       	mov	r31, r0
    2e90:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <Map>
    2e94:	0f 90       	pop	r0
    2e96:	0f 90       	pop	r0
    2e98:	0f 90       	pop	r0
    2e9a:	0f 90       	pop	r0
    2e9c:	dc 01       	movw	r26, r24
    2e9e:	cb 01       	movw	r24, r22
    2ea0:	89 83       	std	Y+1, r24	; 0x01
    2ea2:	9a 83       	std	Y+2, r25	; 0x02
    2ea4:	ab 83       	std	Y+3, r26	; 0x03
    2ea6:	bc 83       	std	Y+4, r27	; 0x04
	if(SERVO_CHANNAL_CON<=3)
	TIMER1_voidSetChannelBCompMatch(Local_u32Angle);
	else if(SERVO_CHANNAL_CON<=12)
	TIMER1_voidSetChannelACompMatch(Local_u32Angle);
    2ea8:	89 81       	ldd	r24, Y+1	; 0x01
    2eaa:	9a 81       	ldd	r25, Y+2	; 0x02
    2eac:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <TIMER1_voidSetChannelACompMatch>

}
    2eb0:	26 96       	adiw	r28, 0x06	; 6
    2eb2:	0f b6       	in	r0, 0x3f	; 63
    2eb4:	f8 94       	cli
    2eb6:	de bf       	out	0x3e, r29	; 62
    2eb8:	0f be       	out	0x3f, r0	; 63
    2eba:	cd bf       	out	0x3d, r28	; 61
    2ebc:	cf 91       	pop	r28
    2ebe:	df 91       	pop	r29
    2ec0:	1f 91       	pop	r17
    2ec2:	0f 91       	pop	r16
    2ec4:	ff 90       	pop	r15
    2ec6:	ef 90       	pop	r14
    2ec8:	df 90       	pop	r13
    2eca:	cf 90       	pop	r12
    2ecc:	bf 90       	pop	r11
    2ece:	af 90       	pop	r10
    2ed0:	08 95       	ret

00002ed2 <Map>:


static u32 Map(u32 InMin,u32 InMax,u32 OutMin,u32 OutMax,u32 InVal)
{
    2ed2:	af 92       	push	r10
    2ed4:	bf 92       	push	r11
    2ed6:	cf 92       	push	r12
    2ed8:	df 92       	push	r13
    2eda:	ef 92       	push	r14
    2edc:	ff 92       	push	r15
    2ede:	0f 93       	push	r16
    2ee0:	1f 93       	push	r17
    2ee2:	df 93       	push	r29
    2ee4:	cf 93       	push	r28
    2ee6:	cd b7       	in	r28, 0x3d	; 61
    2ee8:	de b7       	in	r29, 0x3e	; 62
    2eea:	64 97       	sbiw	r28, 0x14	; 20
    2eec:	0f b6       	in	r0, 0x3f	; 63
    2eee:	f8 94       	cli
    2ef0:	de bf       	out	0x3e, r29	; 62
    2ef2:	0f be       	out	0x3f, r0	; 63
    2ef4:	cd bf       	out	0x3d, r28	; 61
    2ef6:	6d 83       	std	Y+5, r22	; 0x05
    2ef8:	7e 83       	std	Y+6, r23	; 0x06
    2efa:	8f 83       	std	Y+7, r24	; 0x07
    2efc:	98 87       	std	Y+8, r25	; 0x08
    2efe:	29 87       	std	Y+9, r18	; 0x09
    2f00:	3a 87       	std	Y+10, r19	; 0x0a
    2f02:	4b 87       	std	Y+11, r20	; 0x0b
    2f04:	5c 87       	std	Y+12, r21	; 0x0c
    2f06:	ed 86       	std	Y+13, r14	; 0x0d
    2f08:	fe 86       	std	Y+14, r15	; 0x0e
    2f0a:	0f 87       	std	Y+15, r16	; 0x0f
    2f0c:	18 8b       	std	Y+16, r17	; 0x10
    2f0e:	a9 8a       	std	Y+17, r10	; 0x11
    2f10:	ba 8a       	std	Y+18, r11	; 0x12
    2f12:	cb 8a       	std	Y+19, r12	; 0x13
    2f14:	dc 8a       	std	Y+20, r13	; 0x14
	u32 Local=0;
    2f16:	19 82       	std	Y+1, r1	; 0x01
    2f18:	1a 82       	std	Y+2, r1	; 0x02
    2f1a:	1b 82       	std	Y+3, r1	; 0x03
    2f1c:	1c 82       	std	Y+4, r1	; 0x04
	Local = (((InVal-InMin)*(OutMax-OutMin))/(InMax-InMin))+OutMin;
    2f1e:	29 a1       	ldd	r18, Y+33	; 0x21
    2f20:	3a a1       	ldd	r19, Y+34	; 0x22
    2f22:	4b a1       	ldd	r20, Y+35	; 0x23
    2f24:	5c a1       	ldd	r21, Y+36	; 0x24
    2f26:	8d 81       	ldd	r24, Y+5	; 0x05
    2f28:	9e 81       	ldd	r25, Y+6	; 0x06
    2f2a:	af 81       	ldd	r26, Y+7	; 0x07
    2f2c:	b8 85       	ldd	r27, Y+8	; 0x08
    2f2e:	79 01       	movw	r14, r18
    2f30:	8a 01       	movw	r16, r20
    2f32:	e8 1a       	sub	r14, r24
    2f34:	f9 0a       	sbc	r15, r25
    2f36:	0a 0b       	sbc	r16, r26
    2f38:	1b 0b       	sbc	r17, r27
    2f3a:	29 89       	ldd	r18, Y+17	; 0x11
    2f3c:	3a 89       	ldd	r19, Y+18	; 0x12
    2f3e:	4b 89       	ldd	r20, Y+19	; 0x13
    2f40:	5c 89       	ldd	r21, Y+20	; 0x14
    2f42:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f44:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f46:	af 85       	ldd	r26, Y+15	; 0x0f
    2f48:	b8 89       	ldd	r27, Y+16	; 0x10
    2f4a:	28 1b       	sub	r18, r24
    2f4c:	39 0b       	sbc	r19, r25
    2f4e:	4a 0b       	sbc	r20, r26
    2f50:	5b 0b       	sbc	r21, r27
    2f52:	c8 01       	movw	r24, r16
    2f54:	b7 01       	movw	r22, r14
    2f56:	0e 94 69 3c 	call	0x78d2	; 0x78d2 <__mulsi3>
    2f5a:	7b 01       	movw	r14, r22
    2f5c:	8c 01       	movw	r16, r24
    2f5e:	29 85       	ldd	r18, Y+9	; 0x09
    2f60:	3a 85       	ldd	r19, Y+10	; 0x0a
    2f62:	4b 85       	ldd	r20, Y+11	; 0x0b
    2f64:	5c 85       	ldd	r21, Y+12	; 0x0c
    2f66:	8d 81       	ldd	r24, Y+5	; 0x05
    2f68:	9e 81       	ldd	r25, Y+6	; 0x06
    2f6a:	af 81       	ldd	r26, Y+7	; 0x07
    2f6c:	b8 85       	ldd	r27, Y+8	; 0x08
    2f6e:	28 1b       	sub	r18, r24
    2f70:	39 0b       	sbc	r19, r25
    2f72:	4a 0b       	sbc	r20, r26
    2f74:	5b 0b       	sbc	r21, r27
    2f76:	c8 01       	movw	r24, r16
    2f78:	b7 01       	movw	r22, r14
    2f7a:	0e 94 9c 3c 	call	0x7938	; 0x7938 <__udivmodsi4>
    2f7e:	da 01       	movw	r26, r20
    2f80:	c9 01       	movw	r24, r18
    2f82:	9c 01       	movw	r18, r24
    2f84:	ad 01       	movw	r20, r26
    2f86:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f88:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f8a:	af 85       	ldd	r26, Y+15	; 0x0f
    2f8c:	b8 89       	ldd	r27, Y+16	; 0x10
    2f8e:	82 0f       	add	r24, r18
    2f90:	93 1f       	adc	r25, r19
    2f92:	a4 1f       	adc	r26, r20
    2f94:	b5 1f       	adc	r27, r21
    2f96:	89 83       	std	Y+1, r24	; 0x01
    2f98:	9a 83       	std	Y+2, r25	; 0x02
    2f9a:	ab 83       	std	Y+3, r26	; 0x03
    2f9c:	bc 83       	std	Y+4, r27	; 0x04
	return Local;
    2f9e:	89 81       	ldd	r24, Y+1	; 0x01
    2fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa2:	ab 81       	ldd	r26, Y+3	; 0x03
    2fa4:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2fa6:	bc 01       	movw	r22, r24
    2fa8:	cd 01       	movw	r24, r26
    2faa:	64 96       	adiw	r28, 0x14	; 20
    2fac:	0f b6       	in	r0, 0x3f	; 63
    2fae:	f8 94       	cli
    2fb0:	de bf       	out	0x3e, r29	; 62
    2fb2:	0f be       	out	0x3f, r0	; 63
    2fb4:	cd bf       	out	0x3d, r28	; 61
    2fb6:	cf 91       	pop	r28
    2fb8:	df 91       	pop	r29
    2fba:	1f 91       	pop	r17
    2fbc:	0f 91       	pop	r16
    2fbe:	ff 90       	pop	r15
    2fc0:	ef 90       	pop	r14
    2fc2:	df 90       	pop	r13
    2fc4:	cf 90       	pop	r12
    2fc6:	bf 90       	pop	r11
    2fc8:	af 90       	pop	r10
    2fca:	08 95       	ret

00002fcc <SSD_u8SetNumber>:
#include "../HAL/SSD_private.h"
#include "../HAL/SSD_config.h"
#include "../HAL/SSD_interface.h"

u8 SSD_u8SetNumber(u8 Copy_u8Number,SSD_t *Copy_SSD)
{
    2fcc:	df 93       	push	r29
    2fce:	cf 93       	push	r28
    2fd0:	00 d0       	rcall	.+0      	; 0x2fd2 <SSD_u8SetNumber+0x6>
    2fd2:	00 d0       	rcall	.+0      	; 0x2fd4 <SSD_u8SetNumber+0x8>
    2fd4:	cd b7       	in	r28, 0x3d	; 61
    2fd6:	de b7       	in	r29, 0x3e	; 62
    2fd8:	8a 83       	std	Y+2, r24	; 0x02
    2fda:	7c 83       	std	Y+4, r23	; 0x04
    2fdc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState= OK;
    2fde:	19 82       	std	Y+1, r1	; 0x01
	static u8 SSD_Arr[10] = SSD_ARR_OF_NUM;
	if(Copy_SSD->ComType==ANODE)
    2fe0:	eb 81       	ldd	r30, Y+3	; 0x03
    2fe2:	fc 81       	ldd	r31, Y+4	; 0x04
    2fe4:	80 81       	ld	r24, Z
    2fe6:	88 23       	and	r24, r24
    2fe8:	91 f4       	brne	.+36     	; 0x300e <SSD_u8SetNumber+0x42>
	{
		Local_u8ErrorState = DIO_u8SetPortValue(Copy_SSD->Port,~SSD_Arr[Copy_u8Number]);
    2fea:	eb 81       	ldd	r30, Y+3	; 0x03
    2fec:	fc 81       	ldd	r31, Y+4	; 0x04
    2fee:	21 81       	ldd	r18, Z+1	; 0x01
    2ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff2:	88 2f       	mov	r24, r24
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	fc 01       	movw	r30, r24
    2ff8:	e9 51       	subi	r30, 0x19	; 25
    2ffa:	fd 4f       	sbci	r31, 0xFD	; 253
    2ffc:	80 81       	ld	r24, Z
    2ffe:	98 2f       	mov	r25, r24
    3000:	90 95       	com	r25
    3002:	82 2f       	mov	r24, r18
    3004:	69 2f       	mov	r22, r25
    3006:	0e 94 36 11 	call	0x226c	; 0x226c <DIO_u8SetPortValue>
    300a:	89 83       	std	Y+1, r24	; 0x01
    300c:	17 c0       	rjmp	.+46     	; 0x303c <SSD_u8SetNumber+0x70>
	}
	else if(Copy_SSD->ComType==CATHODE )
    300e:	eb 81       	ldd	r30, Y+3	; 0x03
    3010:	fc 81       	ldd	r31, Y+4	; 0x04
    3012:	80 81       	ld	r24, Z
    3014:	81 30       	cpi	r24, 0x01	; 1
    3016:	81 f4       	brne	.+32     	; 0x3038 <SSD_u8SetNumber+0x6c>
	{
		Local_u8ErrorState = DIO_u8SetPortValue(Copy_SSD->Port,SSD_Arr[Copy_u8Number]);
    3018:	eb 81       	ldd	r30, Y+3	; 0x03
    301a:	fc 81       	ldd	r31, Y+4	; 0x04
    301c:	21 81       	ldd	r18, Z+1	; 0x01
    301e:	8a 81       	ldd	r24, Y+2	; 0x02
    3020:	88 2f       	mov	r24, r24
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	fc 01       	movw	r30, r24
    3026:	e9 51       	subi	r30, 0x19	; 25
    3028:	fd 4f       	sbci	r31, 0xFD	; 253
    302a:	90 81       	ld	r25, Z
    302c:	82 2f       	mov	r24, r18
    302e:	69 2f       	mov	r22, r25
    3030:	0e 94 36 11 	call	0x226c	; 0x226c <DIO_u8SetPortValue>
    3034:	89 83       	std	Y+1, r24	; 0x01
    3036:	02 c0       	rjmp	.+4      	; 0x303c <SSD_u8SetNumber+0x70>
	}
	else
		Local_u8ErrorState = NOTOK;
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    303c:	89 81       	ldd	r24, Y+1	; 0x01

}
    303e:	0f 90       	pop	r0
    3040:	0f 90       	pop	r0
    3042:	0f 90       	pop	r0
    3044:	0f 90       	pop	r0
    3046:	cf 91       	pop	r28
    3048:	df 91       	pop	r29
    304a:	08 95       	ret

0000304c <SSD_u8Enable>:
u8 SSD_u8Enable(SSD_t *Copy_SSD)
{
    304c:	df 93       	push	r29
    304e:	cf 93       	push	r28
    3050:	00 d0       	rcall	.+0      	; 0x3052 <SSD_u8Enable+0x6>
    3052:	0f 92       	push	r0
    3054:	cd b7       	in	r28, 0x3d	; 61
    3056:	de b7       	in	r29, 0x3e	; 62
    3058:	9b 83       	std	Y+3, r25	; 0x03
    305a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState= OK;
    305c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_SSD->ComType==ANODE)
    305e:	ea 81       	ldd	r30, Y+2	; 0x02
    3060:	fb 81       	ldd	r31, Y+3	; 0x03
    3062:	80 81       	ld	r24, Z
    3064:	88 23       	and	r24, r24
    3066:	61 f4       	brne	.+24     	; 0x3080 <SSD_u8Enable+0x34>
	{
		Local_u8ErrorState = DIO_u8SetPinValue(Copy_SSD->EnablePort,Copy_SSD->EnablePin,DIO_PIN_HIGH);
    3068:	ea 81       	ldd	r30, Y+2	; 0x02
    306a:	fb 81       	ldd	r31, Y+3	; 0x03
    306c:	82 81       	ldd	r24, Z+2	; 0x02
    306e:	ea 81       	ldd	r30, Y+2	; 0x02
    3070:	fb 81       	ldd	r31, Y+3	; 0x03
    3072:	93 81       	ldd	r25, Z+3	; 0x03
    3074:	69 2f       	mov	r22, r25
    3076:	41 e0       	ldi	r20, 0x01	; 1
    3078:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_u8SetPinValue>
    307c:	89 83       	std	Y+1, r24	; 0x01
    307e:	13 c0       	rjmp	.+38     	; 0x30a6 <SSD_u8Enable+0x5a>
	}
	else if(Copy_SSD->ComType==CATHODE )
    3080:	ea 81       	ldd	r30, Y+2	; 0x02
    3082:	fb 81       	ldd	r31, Y+3	; 0x03
    3084:	80 81       	ld	r24, Z
    3086:	81 30       	cpi	r24, 0x01	; 1
    3088:	61 f4       	brne	.+24     	; 0x30a2 <SSD_u8Enable+0x56>
	{
		Local_u8ErrorState = DIO_u8SetPinValue(Copy_SSD->EnablePort,Copy_SSD->EnablePin,DIO_PIN_LOW);
    308a:	ea 81       	ldd	r30, Y+2	; 0x02
    308c:	fb 81       	ldd	r31, Y+3	; 0x03
    308e:	82 81       	ldd	r24, Z+2	; 0x02
    3090:	ea 81       	ldd	r30, Y+2	; 0x02
    3092:	fb 81       	ldd	r31, Y+3	; 0x03
    3094:	93 81       	ldd	r25, Z+3	; 0x03
    3096:	69 2f       	mov	r22, r25
    3098:	40 e0       	ldi	r20, 0x00	; 0
    309a:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_u8SetPinValue>
    309e:	89 83       	std	Y+1, r24	; 0x01
    30a0:	02 c0       	rjmp	.+4      	; 0x30a6 <SSD_u8Enable+0x5a>
	}
	else
		Local_u8ErrorState = NOTOK;
    30a2:	81 e0       	ldi	r24, 0x01	; 1
    30a4:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    30a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    30a8:	0f 90       	pop	r0
    30aa:	0f 90       	pop	r0
    30ac:	0f 90       	pop	r0
    30ae:	cf 91       	pop	r28
    30b0:	df 91       	pop	r29
    30b2:	08 95       	ret

000030b4 <SSD_u8Disable>:

u8 SSD_u8Disable(SSD_t *Copy_SSD)
{
    30b4:	df 93       	push	r29
    30b6:	cf 93       	push	r28
    30b8:	00 d0       	rcall	.+0      	; 0x30ba <SSD_u8Disable+0x6>
    30ba:	0f 92       	push	r0
    30bc:	cd b7       	in	r28, 0x3d	; 61
    30be:	de b7       	in	r29, 0x3e	; 62
    30c0:	9b 83       	std	Y+3, r25	; 0x03
    30c2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState= OK;
    30c4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_SSD->ComType==ANODE)
    30c6:	ea 81       	ldd	r30, Y+2	; 0x02
    30c8:	fb 81       	ldd	r31, Y+3	; 0x03
    30ca:	80 81       	ld	r24, Z
    30cc:	88 23       	and	r24, r24
    30ce:	61 f4       	brne	.+24     	; 0x30e8 <SSD_u8Disable+0x34>
	{
		Local_u8ErrorState = DIO_u8SetPinValue(Copy_SSD->EnablePort,Copy_SSD->EnablePin,DIO_PIN_LOW);
    30d0:	ea 81       	ldd	r30, Y+2	; 0x02
    30d2:	fb 81       	ldd	r31, Y+3	; 0x03
    30d4:	82 81       	ldd	r24, Z+2	; 0x02
    30d6:	ea 81       	ldd	r30, Y+2	; 0x02
    30d8:	fb 81       	ldd	r31, Y+3	; 0x03
    30da:	93 81       	ldd	r25, Z+3	; 0x03
    30dc:	69 2f       	mov	r22, r25
    30de:	40 e0       	ldi	r20, 0x00	; 0
    30e0:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_u8SetPinValue>
    30e4:	89 83       	std	Y+1, r24	; 0x01
    30e6:	13 c0       	rjmp	.+38     	; 0x310e <SSD_u8Disable+0x5a>
	}
	else if(Copy_SSD->ComType==CATHODE )
    30e8:	ea 81       	ldd	r30, Y+2	; 0x02
    30ea:	fb 81       	ldd	r31, Y+3	; 0x03
    30ec:	80 81       	ld	r24, Z
    30ee:	81 30       	cpi	r24, 0x01	; 1
    30f0:	61 f4       	brne	.+24     	; 0x310a <SSD_u8Disable+0x56>
	{
		Local_u8ErrorState = DIO_u8SetPinValue(Copy_SSD->EnablePort,Copy_SSD->EnablePin,DIO_PIN_HIGH);
    30f2:	ea 81       	ldd	r30, Y+2	; 0x02
    30f4:	fb 81       	ldd	r31, Y+3	; 0x03
    30f6:	82 81       	ldd	r24, Z+2	; 0x02
    30f8:	ea 81       	ldd	r30, Y+2	; 0x02
    30fa:	fb 81       	ldd	r31, Y+3	; 0x03
    30fc:	93 81       	ldd	r25, Z+3	; 0x03
    30fe:	69 2f       	mov	r22, r25
    3100:	41 e0       	ldi	r20, 0x01	; 1
    3102:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_u8SetPinValue>
    3106:	89 83       	std	Y+1, r24	; 0x01
    3108:	02 c0       	rjmp	.+4      	; 0x310e <SSD_u8Disable+0x5a>
	}
	else
		Local_u8ErrorState = NOTOK;
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    310e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3110:	0f 90       	pop	r0
    3112:	0f 90       	pop	r0
    3114:	0f 90       	pop	r0
    3116:	cf 91       	pop	r28
    3118:	df 91       	pop	r29
    311a:	08 95       	ret

0000311c <STEP_MOTORu8StartFullMode>:
#include "../HAL/STEP_MOTOR_config.h"
#include "../HAL/STEP_MOTOR_private.h"
#include "../HAL/STEP_MOTOR_interface.h"
#include "../HAL/CLCD_interface.h"
u8 STEP_MOTORu8StartFullMode(STEP_t *Copy_pStep)
{
    311c:	df 93       	push	r29
    311e:	cf 93       	push	r28
    3120:	cd b7       	in	r28, 0x3d	; 61
    3122:	de b7       	in	r29, 0x3e	; 62
    3124:	c2 54       	subi	r28, 0x42	; 66
    3126:	d0 40       	sbci	r29, 0x00	; 0
    3128:	0f b6       	in	r0, 0x3f	; 63
    312a:	f8 94       	cli
    312c:	de bf       	out	0x3e, r29	; 62
    312e:	0f be       	out	0x3f, r0	; 63
    3130:	cd bf       	out	0x3d, r28	; 61
    3132:	fe 01       	movw	r30, r28
    3134:	ef 5b       	subi	r30, 0xBF	; 191
    3136:	ff 4f       	sbci	r31, 0xFF	; 255
    3138:	91 83       	std	Z+1, r25	; 0x01
    313a:	80 83       	st	Z, r24
	u8 Local_u8ErrorState = OK;
    313c:	fe 01       	movw	r30, r28
    313e:	e0 5c       	subi	r30, 0xC0	; 192
    3140:	ff 4f       	sbci	r31, 0xFF	; 255
    3142:	10 82       	st	Z, r1
	u16 Local_u16NumOfSteps = (u16)((((f32)Copy_pStep->AngleDegree)/11.2)*64.0);
    3144:	fe 01       	movw	r30, r28
    3146:	ef 5b       	subi	r30, 0xBF	; 191
    3148:	ff 4f       	sbci	r31, 0xFF	; 255
    314a:	01 90       	ld	r0, Z+
    314c:	f0 81       	ld	r31, Z
    314e:	e0 2d       	mov	r30, r0
    3150:	83 81       	ldd	r24, Z+3	; 0x03
    3152:	94 81       	ldd	r25, Z+4	; 0x04
    3154:	cc 01       	movw	r24, r24
    3156:	a0 e0       	ldi	r26, 0x00	; 0
    3158:	b0 e0       	ldi	r27, 0x00	; 0
    315a:	bc 01       	movw	r22, r24
    315c:	cd 01       	movw	r24, r26
    315e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3162:	dc 01       	movw	r26, r24
    3164:	cb 01       	movw	r24, r22
    3166:	bc 01       	movw	r22, r24
    3168:	cd 01       	movw	r24, r26
    316a:	23 e3       	ldi	r18, 0x33	; 51
    316c:	33 e3       	ldi	r19, 0x33	; 51
    316e:	43 e3       	ldi	r20, 0x33	; 51
    3170:	51 e4       	ldi	r21, 0x41	; 65
    3172:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3176:	dc 01       	movw	r26, r24
    3178:	cb 01       	movw	r24, r22
    317a:	bc 01       	movw	r22, r24
    317c:	cd 01       	movw	r24, r26
    317e:	20 e0       	ldi	r18, 0x00	; 0
    3180:	30 e0       	ldi	r19, 0x00	; 0
    3182:	40 e8       	ldi	r20, 0x80	; 128
    3184:	52 e4       	ldi	r21, 0x42	; 66
    3186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    318a:	dc 01       	movw	r26, r24
    318c:	cb 01       	movw	r24, r22
    318e:	bc 01       	movw	r22, r24
    3190:	cd 01       	movw	r24, r26
    3192:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3196:	dc 01       	movw	r26, r24
    3198:	cb 01       	movw	r24, r22
    319a:	9f af       	std	Y+63, r25	; 0x3f
    319c:	8e af       	std	Y+62, r24	; 0x3e
	u16 Local_u16MaxItration = (Local_u16NumOfSteps/MAX_FULL_STEP );
    319e:	8e ad       	ldd	r24, Y+62	; 0x3e
    31a0:	9f ad       	ldd	r25, Y+63	; 0x3f
    31a2:	96 95       	lsr	r25
    31a4:	87 95       	ror	r24
    31a6:	96 95       	lsr	r25
    31a8:	87 95       	ror	r24
    31aa:	9d af       	std	Y+61, r25	; 0x3d
    31ac:	8c af       	std	Y+60, r24	; 0x3c
	u16 Local_u16Counter = 0;
    31ae:	1b ae       	std	Y+59, r1	; 0x3b
    31b0:	1a ae       	std	Y+58, r1	; 0x3a
	u8 Local_u8ItrateStep = 0;
    31b2:	19 ae       	std	Y+57, r1	; 0x39
	if(STEP_LOWER_NIBBLE == Copy_pStep->Nibble)
    31b4:	fe 01       	movw	r30, r28
    31b6:	ef 5b       	subi	r30, 0xBF	; 191
    31b8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ba:	01 90       	ld	r0, Z+
    31bc:	f0 81       	ld	r31, Z
    31be:	e0 2d       	mov	r30, r0
    31c0:	81 81       	ldd	r24, Z+1	; 0x01
    31c2:	88 23       	and	r24, r24
    31c4:	09 f0       	breq	.+2      	; 0x31c8 <STEP_MOTORu8StartFullMode+0xac>
    31c6:	5e c1       	rjmp	.+700    	; 0x3484 <STEP_MOTORu8StartFullMode+0x368>
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
    31c8:	fe 01       	movw	r30, r28
    31ca:	ef 5b       	subi	r30, 0xBF	; 191
    31cc:	ff 4f       	sbci	r31, 0xFF	; 255
    31ce:	01 90       	ld	r0, Z+
    31d0:	f0 81       	ld	r31, Z
    31d2:	e0 2d       	mov	r30, r0
    31d4:	82 81       	ldd	r24, Z+2	; 0x02
    31d6:	88 23       	and	r24, r24
    31d8:	09 f0       	breq	.+2      	; 0x31dc <STEP_MOTORu8StartFullMode+0xc0>
    31da:	a2 c0       	rjmp	.+324    	; 0x3320 <STEP_MOTORu8StartFullMode+0x204>
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    31dc:	1b ae       	std	Y+59, r1	; 0x3b
    31de:	1a ae       	std	Y+58, r1	; 0x3a
    31e0:	96 c0       	rjmp	.+300    	; 0x330e <STEP_MOTORu8StartFullMode+0x1f2>
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    31e2:	19 ae       	std	Y+57, r1	; 0x39
    31e4:	8b c0       	rjmp	.+278    	; 0x32fc <STEP_MOTORu8StartFullMode+0x1e0>
				{
					DIO_u8SetLowNibbleValue(Copy_pStep->Port,(MASK_CW<<Local_u8ItrateStep));
    31e6:	fe 01       	movw	r30, r28
    31e8:	ef 5b       	subi	r30, 0xBF	; 191
    31ea:	ff 4f       	sbci	r31, 0xFF	; 255
    31ec:	01 90       	ld	r0, Z+
    31ee:	f0 81       	ld	r31, Z
    31f0:	e0 2d       	mov	r30, r0
    31f2:	40 81       	ld	r20, Z
    31f4:	89 ad       	ldd	r24, Y+57	; 0x39
    31f6:	28 2f       	mov	r18, r24
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	81 e0       	ldi	r24, 0x01	; 1
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	02 c0       	rjmp	.+4      	; 0x3204 <STEP_MOTORu8StartFullMode+0xe8>
    3200:	88 0f       	add	r24, r24
    3202:	99 1f       	adc	r25, r25
    3204:	2a 95       	dec	r18
    3206:	e2 f7       	brpl	.-8      	; 0x3200 <STEP_MOTORu8StartFullMode+0xe4>
    3208:	98 2f       	mov	r25, r24
    320a:	84 2f       	mov	r24, r20
    320c:	69 2f       	mov	r22, r25
    320e:	0e 94 aa 12 	call	0x2554	; 0x2554 <DIO_u8SetLowNibbleValue>
    3212:	80 e0       	ldi	r24, 0x00	; 0
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	a0 e0       	ldi	r26, 0x00	; 0
    3218:	b0 e4       	ldi	r27, 0x40	; 64
    321a:	8d ab       	std	Y+53, r24	; 0x35
    321c:	9e ab       	std	Y+54, r25	; 0x36
    321e:	af ab       	std	Y+55, r26	; 0x37
    3220:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3222:	6d a9       	ldd	r22, Y+53	; 0x35
    3224:	7e a9       	ldd	r23, Y+54	; 0x36
    3226:	8f a9       	ldd	r24, Y+55	; 0x37
    3228:	98 ad       	ldd	r25, Y+56	; 0x38
    322a:	20 e0       	ldi	r18, 0x00	; 0
    322c:	30 e0       	ldi	r19, 0x00	; 0
    322e:	4a ef       	ldi	r20, 0xFA	; 250
    3230:	54 e4       	ldi	r21, 0x44	; 68
    3232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3236:	dc 01       	movw	r26, r24
    3238:	cb 01       	movw	r24, r22
    323a:	89 ab       	std	Y+49, r24	; 0x31
    323c:	9a ab       	std	Y+50, r25	; 0x32
    323e:	ab ab       	std	Y+51, r26	; 0x33
    3240:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3242:	69 a9       	ldd	r22, Y+49	; 0x31
    3244:	7a a9       	ldd	r23, Y+50	; 0x32
    3246:	8b a9       	ldd	r24, Y+51	; 0x33
    3248:	9c a9       	ldd	r25, Y+52	; 0x34
    324a:	20 e0       	ldi	r18, 0x00	; 0
    324c:	30 e0       	ldi	r19, 0x00	; 0
    324e:	40 e8       	ldi	r20, 0x80	; 128
    3250:	5f e3       	ldi	r21, 0x3F	; 63
    3252:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3256:	88 23       	and	r24, r24
    3258:	2c f4       	brge	.+10     	; 0x3264 <STEP_MOTORu8StartFullMode+0x148>
		__ticks = 1;
    325a:	81 e0       	ldi	r24, 0x01	; 1
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	98 ab       	std	Y+48, r25	; 0x30
    3260:	8f a7       	std	Y+47, r24	; 0x2f
    3262:	3f c0       	rjmp	.+126    	; 0x32e2 <STEP_MOTORu8StartFullMode+0x1c6>
	else if (__tmp > 65535)
    3264:	69 a9       	ldd	r22, Y+49	; 0x31
    3266:	7a a9       	ldd	r23, Y+50	; 0x32
    3268:	8b a9       	ldd	r24, Y+51	; 0x33
    326a:	9c a9       	ldd	r25, Y+52	; 0x34
    326c:	20 e0       	ldi	r18, 0x00	; 0
    326e:	3f ef       	ldi	r19, 0xFF	; 255
    3270:	4f e7       	ldi	r20, 0x7F	; 127
    3272:	57 e4       	ldi	r21, 0x47	; 71
    3274:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3278:	18 16       	cp	r1, r24
    327a:	4c f5       	brge	.+82     	; 0x32ce <STEP_MOTORu8StartFullMode+0x1b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    327c:	6d a9       	ldd	r22, Y+53	; 0x35
    327e:	7e a9       	ldd	r23, Y+54	; 0x36
    3280:	8f a9       	ldd	r24, Y+55	; 0x37
    3282:	98 ad       	ldd	r25, Y+56	; 0x38
    3284:	20 e0       	ldi	r18, 0x00	; 0
    3286:	30 e0       	ldi	r19, 0x00	; 0
    3288:	40 e2       	ldi	r20, 0x20	; 32
    328a:	51 e4       	ldi	r21, 0x41	; 65
    328c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3290:	dc 01       	movw	r26, r24
    3292:	cb 01       	movw	r24, r22
    3294:	bc 01       	movw	r22, r24
    3296:	cd 01       	movw	r24, r26
    3298:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    329c:	dc 01       	movw	r26, r24
    329e:	cb 01       	movw	r24, r22
    32a0:	98 ab       	std	Y+48, r25	; 0x30
    32a2:	8f a7       	std	Y+47, r24	; 0x2f
    32a4:	0f c0       	rjmp	.+30     	; 0x32c4 <STEP_MOTORu8StartFullMode+0x1a8>
    32a6:	88 ec       	ldi	r24, 0xC8	; 200
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	9e a7       	std	Y+46, r25	; 0x2e
    32ac:	8d a7       	std	Y+45, r24	; 0x2d
    32ae:	8d a5       	ldd	r24, Y+45	; 0x2d
    32b0:	9e a5       	ldd	r25, Y+46	; 0x2e
    32b2:	01 97       	sbiw	r24, 0x01	; 1
    32b4:	f1 f7       	brne	.-4      	; 0x32b2 <STEP_MOTORu8StartFullMode+0x196>
    32b6:	9e a7       	std	Y+46, r25	; 0x2e
    32b8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    32bc:	98 a9       	ldd	r25, Y+48	; 0x30
    32be:	01 97       	sbiw	r24, 0x01	; 1
    32c0:	98 ab       	std	Y+48, r25	; 0x30
    32c2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    32c6:	98 a9       	ldd	r25, Y+48	; 0x30
    32c8:	00 97       	sbiw	r24, 0x00	; 0
    32ca:	69 f7       	brne	.-38     	; 0x32a6 <STEP_MOTORu8StartFullMode+0x18a>
    32cc:	14 c0       	rjmp	.+40     	; 0x32f6 <STEP_MOTORu8StartFullMode+0x1da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ce:	69 a9       	ldd	r22, Y+49	; 0x31
    32d0:	7a a9       	ldd	r23, Y+50	; 0x32
    32d2:	8b a9       	ldd	r24, Y+51	; 0x33
    32d4:	9c a9       	ldd	r25, Y+52	; 0x34
    32d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	98 ab       	std	Y+48, r25	; 0x30
    32e0:	8f a7       	std	Y+47, r24	; 0x2f
    32e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    32e4:	98 a9       	ldd	r25, Y+48	; 0x30
    32e6:	9c a7       	std	Y+44, r25	; 0x2c
    32e8:	8b a7       	std	Y+43, r24	; 0x2b
    32ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    32ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    32ee:	01 97       	sbiw	r24, 0x01	; 1
    32f0:	f1 f7       	brne	.-4      	; 0x32ee <STEP_MOTORu8StartFullMode+0x1d2>
    32f2:	9c a7       	std	Y+44, r25	; 0x2c
    32f4:	8b a7       	std	Y+43, r24	; 0x2b
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    32f6:	89 ad       	ldd	r24, Y+57	; 0x39
    32f8:	8f 5f       	subi	r24, 0xFF	; 255
    32fa:	89 af       	std	Y+57, r24	; 0x39
    32fc:	89 ad       	ldd	r24, Y+57	; 0x39
    32fe:	84 30       	cpi	r24, 0x04	; 4
    3300:	08 f4       	brcc	.+2      	; 0x3304 <STEP_MOTORu8StartFullMode+0x1e8>
    3302:	71 cf       	rjmp	.-286    	; 0x31e6 <STEP_MOTORu8StartFullMode+0xca>
	u8 Local_u8ItrateStep = 0;
	if(STEP_LOWER_NIBBLE == Copy_pStep->Nibble)
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3304:	8a ad       	ldd	r24, Y+58	; 0x3a
    3306:	9b ad       	ldd	r25, Y+59	; 0x3b
    3308:	01 96       	adiw	r24, 0x01	; 1
    330a:	9b af       	std	Y+59, r25	; 0x3b
    330c:	8a af       	std	Y+58, r24	; 0x3a
    330e:	2a ad       	ldd	r18, Y+58	; 0x3a
    3310:	3b ad       	ldd	r19, Y+59	; 0x3b
    3312:	8c ad       	ldd	r24, Y+60	; 0x3c
    3314:	9d ad       	ldd	r25, Y+61	; 0x3d
    3316:	28 17       	cp	r18, r24
    3318:	39 07       	cpc	r19, r25
    331a:	08 f4       	brcc	.+2      	; 0x331e <STEP_MOTORu8StartFullMode+0x202>
    331c:	62 cf       	rjmp	.-316    	; 0x31e2 <STEP_MOTORu8StartFullMode+0xc6>
    331e:	1f c2       	rjmp	.+1086   	; 0x375e <STEP_MOTORu8StartFullMode+0x642>
					DIO_u8SetLowNibbleValue(Copy_pStep->Port,(MASK_CW<<Local_u8ItrateStep));
					_delay_ms(2);
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
    3320:	fe 01       	movw	r30, r28
    3322:	ef 5b       	subi	r30, 0xBF	; 191
    3324:	ff 4f       	sbci	r31, 0xFF	; 255
    3326:	01 90       	ld	r0, Z+
    3328:	f0 81       	ld	r31, Z
    332a:	e0 2d       	mov	r30, r0
    332c:	82 81       	ldd	r24, Z+2	; 0x02
    332e:	81 30       	cpi	r24, 0x01	; 1
    3330:	09 f0       	breq	.+2      	; 0x3334 <STEP_MOTORu8StartFullMode+0x218>
    3332:	a2 c0       	rjmp	.+324    	; 0x3478 <STEP_MOTORu8StartFullMode+0x35c>
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3334:	1b ae       	std	Y+59, r1	; 0x3b
    3336:	1a ae       	std	Y+58, r1	; 0x3a
    3338:	96 c0       	rjmp	.+300    	; 0x3466 <STEP_MOTORu8StartFullMode+0x34a>
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    333a:	19 ae       	std	Y+57, r1	; 0x39
    333c:	8b c0       	rjmp	.+278    	; 0x3454 <STEP_MOTORu8StartFullMode+0x338>
				{
					DIO_u8SetLowNibbleValue(Copy_pStep->Port,(MASK_CCW>>Local_u8ItrateStep));
    333e:	fe 01       	movw	r30, r28
    3340:	ef 5b       	subi	r30, 0xBF	; 191
    3342:	ff 4f       	sbci	r31, 0xFF	; 255
    3344:	01 90       	ld	r0, Z+
    3346:	f0 81       	ld	r31, Z
    3348:	e0 2d       	mov	r30, r0
    334a:	40 81       	ld	r20, Z
    334c:	89 ad       	ldd	r24, Y+57	; 0x39
    334e:	28 2f       	mov	r18, r24
    3350:	30 e0       	ldi	r19, 0x00	; 0
    3352:	88 e0       	ldi	r24, 0x08	; 8
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	02 c0       	rjmp	.+4      	; 0x335c <STEP_MOTORu8StartFullMode+0x240>
    3358:	95 95       	asr	r25
    335a:	87 95       	ror	r24
    335c:	2a 95       	dec	r18
    335e:	e2 f7       	brpl	.-8      	; 0x3358 <STEP_MOTORu8StartFullMode+0x23c>
    3360:	98 2f       	mov	r25, r24
    3362:	84 2f       	mov	r24, r20
    3364:	69 2f       	mov	r22, r25
    3366:	0e 94 aa 12 	call	0x2554	; 0x2554 <DIO_u8SetLowNibbleValue>
    336a:	80 e0       	ldi	r24, 0x00	; 0
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	a0 e0       	ldi	r26, 0x00	; 0
    3370:	b0 e4       	ldi	r27, 0x40	; 64
    3372:	8f a3       	std	Y+39, r24	; 0x27
    3374:	98 a7       	std	Y+40, r25	; 0x28
    3376:	a9 a7       	std	Y+41, r26	; 0x29
    3378:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    337a:	6f a1       	ldd	r22, Y+39	; 0x27
    337c:	78 a5       	ldd	r23, Y+40	; 0x28
    337e:	89 a5       	ldd	r24, Y+41	; 0x29
    3380:	9a a5       	ldd	r25, Y+42	; 0x2a
    3382:	20 e0       	ldi	r18, 0x00	; 0
    3384:	30 e0       	ldi	r19, 0x00	; 0
    3386:	4a ef       	ldi	r20, 0xFA	; 250
    3388:	54 e4       	ldi	r21, 0x44	; 68
    338a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    338e:	dc 01       	movw	r26, r24
    3390:	cb 01       	movw	r24, r22
    3392:	8b a3       	std	Y+35, r24	; 0x23
    3394:	9c a3       	std	Y+36, r25	; 0x24
    3396:	ad a3       	std	Y+37, r26	; 0x25
    3398:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    339a:	6b a1       	ldd	r22, Y+35	; 0x23
    339c:	7c a1       	ldd	r23, Y+36	; 0x24
    339e:	8d a1       	ldd	r24, Y+37	; 0x25
    33a0:	9e a1       	ldd	r25, Y+38	; 0x26
    33a2:	20 e0       	ldi	r18, 0x00	; 0
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	40 e8       	ldi	r20, 0x80	; 128
    33a8:	5f e3       	ldi	r21, 0x3F	; 63
    33aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33ae:	88 23       	and	r24, r24
    33b0:	2c f4       	brge	.+10     	; 0x33bc <STEP_MOTORu8StartFullMode+0x2a0>
		__ticks = 1;
    33b2:	81 e0       	ldi	r24, 0x01	; 1
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	9a a3       	std	Y+34, r25	; 0x22
    33b8:	89 a3       	std	Y+33, r24	; 0x21
    33ba:	3f c0       	rjmp	.+126    	; 0x343a <STEP_MOTORu8StartFullMode+0x31e>
	else if (__tmp > 65535)
    33bc:	6b a1       	ldd	r22, Y+35	; 0x23
    33be:	7c a1       	ldd	r23, Y+36	; 0x24
    33c0:	8d a1       	ldd	r24, Y+37	; 0x25
    33c2:	9e a1       	ldd	r25, Y+38	; 0x26
    33c4:	20 e0       	ldi	r18, 0x00	; 0
    33c6:	3f ef       	ldi	r19, 0xFF	; 255
    33c8:	4f e7       	ldi	r20, 0x7F	; 127
    33ca:	57 e4       	ldi	r21, 0x47	; 71
    33cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33d0:	18 16       	cp	r1, r24
    33d2:	4c f5       	brge	.+82     	; 0x3426 <STEP_MOTORu8StartFullMode+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33d4:	6f a1       	ldd	r22, Y+39	; 0x27
    33d6:	78 a5       	ldd	r23, Y+40	; 0x28
    33d8:	89 a5       	ldd	r24, Y+41	; 0x29
    33da:	9a a5       	ldd	r25, Y+42	; 0x2a
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	40 e2       	ldi	r20, 0x20	; 32
    33e2:	51 e4       	ldi	r21, 0x41	; 65
    33e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e8:	dc 01       	movw	r26, r24
    33ea:	cb 01       	movw	r24, r22
    33ec:	bc 01       	movw	r22, r24
    33ee:	cd 01       	movw	r24, r26
    33f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f4:	dc 01       	movw	r26, r24
    33f6:	cb 01       	movw	r24, r22
    33f8:	9a a3       	std	Y+34, r25	; 0x22
    33fa:	89 a3       	std	Y+33, r24	; 0x21
    33fc:	0f c0       	rjmp	.+30     	; 0x341c <STEP_MOTORu8StartFullMode+0x300>
    33fe:	88 ec       	ldi	r24, 0xC8	; 200
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	98 a3       	std	Y+32, r25	; 0x20
    3404:	8f 8f       	std	Y+31, r24	; 0x1f
    3406:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3408:	98 a1       	ldd	r25, Y+32	; 0x20
    340a:	01 97       	sbiw	r24, 0x01	; 1
    340c:	f1 f7       	brne	.-4      	; 0x340a <STEP_MOTORu8StartFullMode+0x2ee>
    340e:	98 a3       	std	Y+32, r25	; 0x20
    3410:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3412:	89 a1       	ldd	r24, Y+33	; 0x21
    3414:	9a a1       	ldd	r25, Y+34	; 0x22
    3416:	01 97       	sbiw	r24, 0x01	; 1
    3418:	9a a3       	std	Y+34, r25	; 0x22
    341a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    341c:	89 a1       	ldd	r24, Y+33	; 0x21
    341e:	9a a1       	ldd	r25, Y+34	; 0x22
    3420:	00 97       	sbiw	r24, 0x00	; 0
    3422:	69 f7       	brne	.-38     	; 0x33fe <STEP_MOTORu8StartFullMode+0x2e2>
    3424:	14 c0       	rjmp	.+40     	; 0x344e <STEP_MOTORu8StartFullMode+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3426:	6b a1       	ldd	r22, Y+35	; 0x23
    3428:	7c a1       	ldd	r23, Y+36	; 0x24
    342a:	8d a1       	ldd	r24, Y+37	; 0x25
    342c:	9e a1       	ldd	r25, Y+38	; 0x26
    342e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3432:	dc 01       	movw	r26, r24
    3434:	cb 01       	movw	r24, r22
    3436:	9a a3       	std	Y+34, r25	; 0x22
    3438:	89 a3       	std	Y+33, r24	; 0x21
    343a:	89 a1       	ldd	r24, Y+33	; 0x21
    343c:	9a a1       	ldd	r25, Y+34	; 0x22
    343e:	9e 8f       	std	Y+30, r25	; 0x1e
    3440:	8d 8f       	std	Y+29, r24	; 0x1d
    3442:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3444:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3446:	01 97       	sbiw	r24, 0x01	; 1
    3448:	f1 f7       	brne	.-4      	; 0x3446 <STEP_MOTORu8StartFullMode+0x32a>
    344a:	9e 8f       	std	Y+30, r25	; 0x1e
    344c:	8d 8f       	std	Y+29, r24	; 0x1d
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    344e:	89 ad       	ldd	r24, Y+57	; 0x39
    3450:	8f 5f       	subi	r24, 0xFF	; 255
    3452:	89 af       	std	Y+57, r24	; 0x39
    3454:	89 ad       	ldd	r24, Y+57	; 0x39
    3456:	84 30       	cpi	r24, 0x04	; 4
    3458:	08 f4       	brcc	.+2      	; 0x345c <STEP_MOTORu8StartFullMode+0x340>
    345a:	71 cf       	rjmp	.-286    	; 0x333e <STEP_MOTORu8StartFullMode+0x222>
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    345c:	8a ad       	ldd	r24, Y+58	; 0x3a
    345e:	9b ad       	ldd	r25, Y+59	; 0x3b
    3460:	01 96       	adiw	r24, 0x01	; 1
    3462:	9b af       	std	Y+59, r25	; 0x3b
    3464:	8a af       	std	Y+58, r24	; 0x3a
    3466:	2a ad       	ldd	r18, Y+58	; 0x3a
    3468:	3b ad       	ldd	r19, Y+59	; 0x3b
    346a:	8c ad       	ldd	r24, Y+60	; 0x3c
    346c:	9d ad       	ldd	r25, Y+61	; 0x3d
    346e:	28 17       	cp	r18, r24
    3470:	39 07       	cpc	r19, r25
    3472:	08 f4       	brcc	.+2      	; 0x3476 <STEP_MOTORu8StartFullMode+0x35a>
    3474:	62 cf       	rjmp	.-316    	; 0x333a <STEP_MOTORu8StartFullMode+0x21e>
    3476:	73 c1       	rjmp	.+742    	; 0x375e <STEP_MOTORu8StartFullMode+0x642>
					_delay_ms(2);
				}
			}
		}
		else
			Local_u8ErrorState = NOTOK;
    3478:	81 e0       	ldi	r24, 0x01	; 1
    347a:	fe 01       	movw	r30, r28
    347c:	e0 5c       	subi	r30, 0xC0	; 192
    347e:	ff 4f       	sbci	r31, 0xFF	; 255
    3480:	80 83       	st	Z, r24
    3482:	6d c1       	rjmp	.+730    	; 0x375e <STEP_MOTORu8StartFullMode+0x642>
	}
	else if(STEP_UPPER_NIBBLE == Copy_pStep->Nibble)
    3484:	fe 01       	movw	r30, r28
    3486:	ef 5b       	subi	r30, 0xBF	; 191
    3488:	ff 4f       	sbci	r31, 0xFF	; 255
    348a:	01 90       	ld	r0, Z+
    348c:	f0 81       	ld	r31, Z
    348e:	e0 2d       	mov	r30, r0
    3490:	81 81       	ldd	r24, Z+1	; 0x01
    3492:	81 30       	cpi	r24, 0x01	; 1
    3494:	09 f0       	breq	.+2      	; 0x3498 <STEP_MOTORu8StartFullMode+0x37c>
    3496:	5e c1       	rjmp	.+700    	; 0x3754 <STEP_MOTORu8StartFullMode+0x638>
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
    3498:	fe 01       	movw	r30, r28
    349a:	ef 5b       	subi	r30, 0xBF	; 191
    349c:	ff 4f       	sbci	r31, 0xFF	; 255
    349e:	01 90       	ld	r0, Z+
    34a0:	f0 81       	ld	r31, Z
    34a2:	e0 2d       	mov	r30, r0
    34a4:	82 81       	ldd	r24, Z+2	; 0x02
    34a6:	88 23       	and	r24, r24
    34a8:	09 f0       	breq	.+2      	; 0x34ac <STEP_MOTORu8StartFullMode+0x390>
    34aa:	a2 c0       	rjmp	.+324    	; 0x35f0 <STEP_MOTORu8StartFullMode+0x4d4>
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    34ac:	1b ae       	std	Y+59, r1	; 0x3b
    34ae:	1a ae       	std	Y+58, r1	; 0x3a
    34b0:	96 c0       	rjmp	.+300    	; 0x35de <STEP_MOTORu8StartFullMode+0x4c2>
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    34b2:	19 ae       	std	Y+57, r1	; 0x39
    34b4:	8b c0       	rjmp	.+278    	; 0x35cc <STEP_MOTORu8StartFullMode+0x4b0>
				{
					DIO_u8SetHighNibbleValue(Copy_pStep->Port,(MASK_CW<<Local_u8ItrateStep));
    34b6:	fe 01       	movw	r30, r28
    34b8:	ef 5b       	subi	r30, 0xBF	; 191
    34ba:	ff 4f       	sbci	r31, 0xFF	; 255
    34bc:	01 90       	ld	r0, Z+
    34be:	f0 81       	ld	r31, Z
    34c0:	e0 2d       	mov	r30, r0
    34c2:	40 81       	ld	r20, Z
    34c4:	89 ad       	ldd	r24, Y+57	; 0x39
    34c6:	28 2f       	mov	r18, r24
    34c8:	30 e0       	ldi	r19, 0x00	; 0
    34ca:	81 e0       	ldi	r24, 0x01	; 1
    34cc:	90 e0       	ldi	r25, 0x00	; 0
    34ce:	02 c0       	rjmp	.+4      	; 0x34d4 <STEP_MOTORu8StartFullMode+0x3b8>
    34d0:	88 0f       	add	r24, r24
    34d2:	99 1f       	adc	r25, r25
    34d4:	2a 95       	dec	r18
    34d6:	e2 f7       	brpl	.-8      	; 0x34d0 <STEP_MOTORu8StartFullMode+0x3b4>
    34d8:	98 2f       	mov	r25, r24
    34da:	84 2f       	mov	r24, r20
    34dc:	69 2f       	mov	r22, r25
    34de:	0e 94 25 13 	call	0x264a	; 0x264a <DIO_u8SetHighNibbleValue>
    34e2:	80 e0       	ldi	r24, 0x00	; 0
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	a0 e0       	ldi	r26, 0x00	; 0
    34e8:	b0 e4       	ldi	r27, 0x40	; 64
    34ea:	89 8f       	std	Y+25, r24	; 0x19
    34ec:	9a 8f       	std	Y+26, r25	; 0x1a
    34ee:	ab 8f       	std	Y+27, r26	; 0x1b
    34f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34f2:	69 8d       	ldd	r22, Y+25	; 0x19
    34f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34fa:	20 e0       	ldi	r18, 0x00	; 0
    34fc:	30 e0       	ldi	r19, 0x00	; 0
    34fe:	4a ef       	ldi	r20, 0xFA	; 250
    3500:	54 e4       	ldi	r21, 0x44	; 68
    3502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3506:	dc 01       	movw	r26, r24
    3508:	cb 01       	movw	r24, r22
    350a:	8d 8b       	std	Y+21, r24	; 0x15
    350c:	9e 8b       	std	Y+22, r25	; 0x16
    350e:	af 8b       	std	Y+23, r26	; 0x17
    3510:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3512:	6d 89       	ldd	r22, Y+21	; 0x15
    3514:	7e 89       	ldd	r23, Y+22	; 0x16
    3516:	8f 89       	ldd	r24, Y+23	; 0x17
    3518:	98 8d       	ldd	r25, Y+24	; 0x18
    351a:	20 e0       	ldi	r18, 0x00	; 0
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	40 e8       	ldi	r20, 0x80	; 128
    3520:	5f e3       	ldi	r21, 0x3F	; 63
    3522:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3526:	88 23       	and	r24, r24
    3528:	2c f4       	brge	.+10     	; 0x3534 <STEP_MOTORu8StartFullMode+0x418>
		__ticks = 1;
    352a:	81 e0       	ldi	r24, 0x01	; 1
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	9c 8b       	std	Y+20, r25	; 0x14
    3530:	8b 8b       	std	Y+19, r24	; 0x13
    3532:	3f c0       	rjmp	.+126    	; 0x35b2 <STEP_MOTORu8StartFullMode+0x496>
	else if (__tmp > 65535)
    3534:	6d 89       	ldd	r22, Y+21	; 0x15
    3536:	7e 89       	ldd	r23, Y+22	; 0x16
    3538:	8f 89       	ldd	r24, Y+23	; 0x17
    353a:	98 8d       	ldd	r25, Y+24	; 0x18
    353c:	20 e0       	ldi	r18, 0x00	; 0
    353e:	3f ef       	ldi	r19, 0xFF	; 255
    3540:	4f e7       	ldi	r20, 0x7F	; 127
    3542:	57 e4       	ldi	r21, 0x47	; 71
    3544:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3548:	18 16       	cp	r1, r24
    354a:	4c f5       	brge	.+82     	; 0x359e <STEP_MOTORu8StartFullMode+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    354c:	69 8d       	ldd	r22, Y+25	; 0x19
    354e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3550:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3552:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3554:	20 e0       	ldi	r18, 0x00	; 0
    3556:	30 e0       	ldi	r19, 0x00	; 0
    3558:	40 e2       	ldi	r20, 0x20	; 32
    355a:	51 e4       	ldi	r21, 0x41	; 65
    355c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3560:	dc 01       	movw	r26, r24
    3562:	cb 01       	movw	r24, r22
    3564:	bc 01       	movw	r22, r24
    3566:	cd 01       	movw	r24, r26
    3568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    356c:	dc 01       	movw	r26, r24
    356e:	cb 01       	movw	r24, r22
    3570:	9c 8b       	std	Y+20, r25	; 0x14
    3572:	8b 8b       	std	Y+19, r24	; 0x13
    3574:	0f c0       	rjmp	.+30     	; 0x3594 <STEP_MOTORu8StartFullMode+0x478>
    3576:	88 ec       	ldi	r24, 0xC8	; 200
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	9a 8b       	std	Y+18, r25	; 0x12
    357c:	89 8b       	std	Y+17, r24	; 0x11
    357e:	89 89       	ldd	r24, Y+17	; 0x11
    3580:	9a 89       	ldd	r25, Y+18	; 0x12
    3582:	01 97       	sbiw	r24, 0x01	; 1
    3584:	f1 f7       	brne	.-4      	; 0x3582 <STEP_MOTORu8StartFullMode+0x466>
    3586:	9a 8b       	std	Y+18, r25	; 0x12
    3588:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    358a:	8b 89       	ldd	r24, Y+19	; 0x13
    358c:	9c 89       	ldd	r25, Y+20	; 0x14
    358e:	01 97       	sbiw	r24, 0x01	; 1
    3590:	9c 8b       	std	Y+20, r25	; 0x14
    3592:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3594:	8b 89       	ldd	r24, Y+19	; 0x13
    3596:	9c 89       	ldd	r25, Y+20	; 0x14
    3598:	00 97       	sbiw	r24, 0x00	; 0
    359a:	69 f7       	brne	.-38     	; 0x3576 <STEP_MOTORu8StartFullMode+0x45a>
    359c:	14 c0       	rjmp	.+40     	; 0x35c6 <STEP_MOTORu8StartFullMode+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    359e:	6d 89       	ldd	r22, Y+21	; 0x15
    35a0:	7e 89       	ldd	r23, Y+22	; 0x16
    35a2:	8f 89       	ldd	r24, Y+23	; 0x17
    35a4:	98 8d       	ldd	r25, Y+24	; 0x18
    35a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35aa:	dc 01       	movw	r26, r24
    35ac:	cb 01       	movw	r24, r22
    35ae:	9c 8b       	std	Y+20, r25	; 0x14
    35b0:	8b 8b       	std	Y+19, r24	; 0x13
    35b2:	8b 89       	ldd	r24, Y+19	; 0x13
    35b4:	9c 89       	ldd	r25, Y+20	; 0x14
    35b6:	98 8b       	std	Y+16, r25	; 0x10
    35b8:	8f 87       	std	Y+15, r24	; 0x0f
    35ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    35bc:	98 89       	ldd	r25, Y+16	; 0x10
    35be:	01 97       	sbiw	r24, 0x01	; 1
    35c0:	f1 f7       	brne	.-4      	; 0x35be <STEP_MOTORu8StartFullMode+0x4a2>
    35c2:	98 8b       	std	Y+16, r25	; 0x10
    35c4:	8f 87       	std	Y+15, r24	; 0x0f
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    35c6:	89 ad       	ldd	r24, Y+57	; 0x39
    35c8:	8f 5f       	subi	r24, 0xFF	; 255
    35ca:	89 af       	std	Y+57, r24	; 0x39
    35cc:	89 ad       	ldd	r24, Y+57	; 0x39
    35ce:	84 30       	cpi	r24, 0x04	; 4
    35d0:	08 f4       	brcc	.+2      	; 0x35d4 <STEP_MOTORu8StartFullMode+0x4b8>
    35d2:	71 cf       	rjmp	.-286    	; 0x34b6 <STEP_MOTORu8StartFullMode+0x39a>
	}
	else if(STEP_UPPER_NIBBLE == Copy_pStep->Nibble)
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    35d4:	8a ad       	ldd	r24, Y+58	; 0x3a
    35d6:	9b ad       	ldd	r25, Y+59	; 0x3b
    35d8:	01 96       	adiw	r24, 0x01	; 1
    35da:	9b af       	std	Y+59, r25	; 0x3b
    35dc:	8a af       	std	Y+58, r24	; 0x3a
    35de:	2a ad       	ldd	r18, Y+58	; 0x3a
    35e0:	3b ad       	ldd	r19, Y+59	; 0x3b
    35e2:	8c ad       	ldd	r24, Y+60	; 0x3c
    35e4:	9d ad       	ldd	r25, Y+61	; 0x3d
    35e6:	28 17       	cp	r18, r24
    35e8:	39 07       	cpc	r19, r25
    35ea:	08 f4       	brcc	.+2      	; 0x35ee <STEP_MOTORu8StartFullMode+0x4d2>
    35ec:	62 cf       	rjmp	.-316    	; 0x34b2 <STEP_MOTORu8StartFullMode+0x396>
    35ee:	b7 c0       	rjmp	.+366    	; 0x375e <STEP_MOTORu8StartFullMode+0x642>
					DIO_u8SetHighNibbleValue(Copy_pStep->Port,(MASK_CW<<Local_u8ItrateStep));
					_delay_ms(2);
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
    35f0:	fe 01       	movw	r30, r28
    35f2:	ef 5b       	subi	r30, 0xBF	; 191
    35f4:	ff 4f       	sbci	r31, 0xFF	; 255
    35f6:	01 90       	ld	r0, Z+
    35f8:	f0 81       	ld	r31, Z
    35fa:	e0 2d       	mov	r30, r0
    35fc:	82 81       	ldd	r24, Z+2	; 0x02
    35fe:	81 30       	cpi	r24, 0x01	; 1
    3600:	09 f0       	breq	.+2      	; 0x3604 <STEP_MOTORu8StartFullMode+0x4e8>
    3602:	a2 c0       	rjmp	.+324    	; 0x3748 <STEP_MOTORu8StartFullMode+0x62c>
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3604:	1b ae       	std	Y+59, r1	; 0x3b
    3606:	1a ae       	std	Y+58, r1	; 0x3a
    3608:	96 c0       	rjmp	.+300    	; 0x3736 <STEP_MOTORu8StartFullMode+0x61a>
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    360a:	19 ae       	std	Y+57, r1	; 0x39
    360c:	8b c0       	rjmp	.+278    	; 0x3724 <STEP_MOTORu8StartFullMode+0x608>
				{
					DIO_u8SetHighNibbleValue(Copy_pStep->Port,(MASK_CCW>>Local_u8ItrateStep));
    360e:	fe 01       	movw	r30, r28
    3610:	ef 5b       	subi	r30, 0xBF	; 191
    3612:	ff 4f       	sbci	r31, 0xFF	; 255
    3614:	01 90       	ld	r0, Z+
    3616:	f0 81       	ld	r31, Z
    3618:	e0 2d       	mov	r30, r0
    361a:	40 81       	ld	r20, Z
    361c:	89 ad       	ldd	r24, Y+57	; 0x39
    361e:	28 2f       	mov	r18, r24
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	88 e0       	ldi	r24, 0x08	; 8
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	02 c0       	rjmp	.+4      	; 0x362c <STEP_MOTORu8StartFullMode+0x510>
    3628:	95 95       	asr	r25
    362a:	87 95       	ror	r24
    362c:	2a 95       	dec	r18
    362e:	e2 f7       	brpl	.-8      	; 0x3628 <STEP_MOTORu8StartFullMode+0x50c>
    3630:	98 2f       	mov	r25, r24
    3632:	84 2f       	mov	r24, r20
    3634:	69 2f       	mov	r22, r25
    3636:	0e 94 25 13 	call	0x264a	; 0x264a <DIO_u8SetHighNibbleValue>
    363a:	80 e0       	ldi	r24, 0x00	; 0
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	a0 e0       	ldi	r26, 0x00	; 0
    3640:	b0 e4       	ldi	r27, 0x40	; 64
    3642:	8b 87       	std	Y+11, r24	; 0x0b
    3644:	9c 87       	std	Y+12, r25	; 0x0c
    3646:	ad 87       	std	Y+13, r26	; 0x0d
    3648:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    364a:	6b 85       	ldd	r22, Y+11	; 0x0b
    364c:	7c 85       	ldd	r23, Y+12	; 0x0c
    364e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3650:	9e 85       	ldd	r25, Y+14	; 0x0e
    3652:	20 e0       	ldi	r18, 0x00	; 0
    3654:	30 e0       	ldi	r19, 0x00	; 0
    3656:	4a ef       	ldi	r20, 0xFA	; 250
    3658:	54 e4       	ldi	r21, 0x44	; 68
    365a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    365e:	dc 01       	movw	r26, r24
    3660:	cb 01       	movw	r24, r22
    3662:	8f 83       	std	Y+7, r24	; 0x07
    3664:	98 87       	std	Y+8, r25	; 0x08
    3666:	a9 87       	std	Y+9, r26	; 0x09
    3668:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    366a:	6f 81       	ldd	r22, Y+7	; 0x07
    366c:	78 85       	ldd	r23, Y+8	; 0x08
    366e:	89 85       	ldd	r24, Y+9	; 0x09
    3670:	9a 85       	ldd	r25, Y+10	; 0x0a
    3672:	20 e0       	ldi	r18, 0x00	; 0
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	40 e8       	ldi	r20, 0x80	; 128
    3678:	5f e3       	ldi	r21, 0x3F	; 63
    367a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    367e:	88 23       	and	r24, r24
    3680:	2c f4       	brge	.+10     	; 0x368c <STEP_MOTORu8StartFullMode+0x570>
		__ticks = 1;
    3682:	81 e0       	ldi	r24, 0x01	; 1
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	9e 83       	std	Y+6, r25	; 0x06
    3688:	8d 83       	std	Y+5, r24	; 0x05
    368a:	3f c0       	rjmp	.+126    	; 0x370a <STEP_MOTORu8StartFullMode+0x5ee>
	else if (__tmp > 65535)
    368c:	6f 81       	ldd	r22, Y+7	; 0x07
    368e:	78 85       	ldd	r23, Y+8	; 0x08
    3690:	89 85       	ldd	r24, Y+9	; 0x09
    3692:	9a 85       	ldd	r25, Y+10	; 0x0a
    3694:	20 e0       	ldi	r18, 0x00	; 0
    3696:	3f ef       	ldi	r19, 0xFF	; 255
    3698:	4f e7       	ldi	r20, 0x7F	; 127
    369a:	57 e4       	ldi	r21, 0x47	; 71
    369c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36a0:	18 16       	cp	r1, r24
    36a2:	4c f5       	brge	.+82     	; 0x36f6 <STEP_MOTORu8StartFullMode+0x5da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    36a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    36a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    36aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    36ac:	20 e0       	ldi	r18, 0x00	; 0
    36ae:	30 e0       	ldi	r19, 0x00	; 0
    36b0:	40 e2       	ldi	r20, 0x20	; 32
    36b2:	51 e4       	ldi	r21, 0x41	; 65
    36b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36b8:	dc 01       	movw	r26, r24
    36ba:	cb 01       	movw	r24, r22
    36bc:	bc 01       	movw	r22, r24
    36be:	cd 01       	movw	r24, r26
    36c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36c4:	dc 01       	movw	r26, r24
    36c6:	cb 01       	movw	r24, r22
    36c8:	9e 83       	std	Y+6, r25	; 0x06
    36ca:	8d 83       	std	Y+5, r24	; 0x05
    36cc:	0f c0       	rjmp	.+30     	; 0x36ec <STEP_MOTORu8StartFullMode+0x5d0>
    36ce:	88 ec       	ldi	r24, 0xC8	; 200
    36d0:	90 e0       	ldi	r25, 0x00	; 0
    36d2:	9c 83       	std	Y+4, r25	; 0x04
    36d4:	8b 83       	std	Y+3, r24	; 0x03
    36d6:	8b 81       	ldd	r24, Y+3	; 0x03
    36d8:	9c 81       	ldd	r25, Y+4	; 0x04
    36da:	01 97       	sbiw	r24, 0x01	; 1
    36dc:	f1 f7       	brne	.-4      	; 0x36da <STEP_MOTORu8StartFullMode+0x5be>
    36de:	9c 83       	std	Y+4, r25	; 0x04
    36e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36e2:	8d 81       	ldd	r24, Y+5	; 0x05
    36e4:	9e 81       	ldd	r25, Y+6	; 0x06
    36e6:	01 97       	sbiw	r24, 0x01	; 1
    36e8:	9e 83       	std	Y+6, r25	; 0x06
    36ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ec:	8d 81       	ldd	r24, Y+5	; 0x05
    36ee:	9e 81       	ldd	r25, Y+6	; 0x06
    36f0:	00 97       	sbiw	r24, 0x00	; 0
    36f2:	69 f7       	brne	.-38     	; 0x36ce <STEP_MOTORu8StartFullMode+0x5b2>
    36f4:	14 c0       	rjmp	.+40     	; 0x371e <STEP_MOTORu8StartFullMode+0x602>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36f6:	6f 81       	ldd	r22, Y+7	; 0x07
    36f8:	78 85       	ldd	r23, Y+8	; 0x08
    36fa:	89 85       	ldd	r24, Y+9	; 0x09
    36fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    36fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3702:	dc 01       	movw	r26, r24
    3704:	cb 01       	movw	r24, r22
    3706:	9e 83       	std	Y+6, r25	; 0x06
    3708:	8d 83       	std	Y+5, r24	; 0x05
    370a:	8d 81       	ldd	r24, Y+5	; 0x05
    370c:	9e 81       	ldd	r25, Y+6	; 0x06
    370e:	9a 83       	std	Y+2, r25	; 0x02
    3710:	89 83       	std	Y+1, r24	; 0x01
    3712:	89 81       	ldd	r24, Y+1	; 0x01
    3714:	9a 81       	ldd	r25, Y+2	; 0x02
    3716:	01 97       	sbiw	r24, 0x01	; 1
    3718:	f1 f7       	brne	.-4      	; 0x3716 <STEP_MOTORu8StartFullMode+0x5fa>
    371a:	9a 83       	std	Y+2, r25	; 0x02
    371c:	89 83       	std	Y+1, r24	; 0x01
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    371e:	89 ad       	ldd	r24, Y+57	; 0x39
    3720:	8f 5f       	subi	r24, 0xFF	; 255
    3722:	89 af       	std	Y+57, r24	; 0x39
    3724:	89 ad       	ldd	r24, Y+57	; 0x39
    3726:	84 30       	cpi	r24, 0x04	; 4
    3728:	08 f4       	brcc	.+2      	; 0x372c <STEP_MOTORu8StartFullMode+0x610>
    372a:	71 cf       	rjmp	.-286    	; 0x360e <STEP_MOTORu8StartFullMode+0x4f2>
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    372c:	8a ad       	ldd	r24, Y+58	; 0x3a
    372e:	9b ad       	ldd	r25, Y+59	; 0x3b
    3730:	01 96       	adiw	r24, 0x01	; 1
    3732:	9b af       	std	Y+59, r25	; 0x3b
    3734:	8a af       	std	Y+58, r24	; 0x3a
    3736:	2a ad       	ldd	r18, Y+58	; 0x3a
    3738:	3b ad       	ldd	r19, Y+59	; 0x3b
    373a:	8c ad       	ldd	r24, Y+60	; 0x3c
    373c:	9d ad       	ldd	r25, Y+61	; 0x3d
    373e:	28 17       	cp	r18, r24
    3740:	39 07       	cpc	r19, r25
    3742:	08 f4       	brcc	.+2      	; 0x3746 <STEP_MOTORu8StartFullMode+0x62a>
    3744:	62 cf       	rjmp	.-316    	; 0x360a <STEP_MOTORu8StartFullMode+0x4ee>
    3746:	0b c0       	rjmp	.+22     	; 0x375e <STEP_MOTORu8StartFullMode+0x642>
					_delay_ms(2);
				}
			}
		}
		else
			Local_u8ErrorState = NOTOK;
    3748:	81 e0       	ldi	r24, 0x01	; 1
    374a:	fe 01       	movw	r30, r28
    374c:	e0 5c       	subi	r30, 0xC0	; 192
    374e:	ff 4f       	sbci	r31, 0xFF	; 255
    3750:	80 83       	st	Z, r24
    3752:	05 c0       	rjmp	.+10     	; 0x375e <STEP_MOTORu8StartFullMode+0x642>
	}
	else
		Local_u8ErrorState = NOTOK;
    3754:	81 e0       	ldi	r24, 0x01	; 1
    3756:	fe 01       	movw	r30, r28
    3758:	e0 5c       	subi	r30, 0xC0	; 192
    375a:	ff 4f       	sbci	r31, 0xFF	; 255
    375c:	80 83       	st	Z, r24
	return Local_u8ErrorState;
    375e:	fe 01       	movw	r30, r28
    3760:	e0 5c       	subi	r30, 0xC0	; 192
    3762:	ff 4f       	sbci	r31, 0xFF	; 255
    3764:	80 81       	ld	r24, Z
}
    3766:	ce 5b       	subi	r28, 0xBE	; 190
    3768:	df 4f       	sbci	r29, 0xFF	; 255
    376a:	0f b6       	in	r0, 0x3f	; 63
    376c:	f8 94       	cli
    376e:	de bf       	out	0x3e, r29	; 62
    3770:	0f be       	out	0x3f, r0	; 63
    3772:	cd bf       	out	0x3d, r28	; 61
    3774:	cf 91       	pop	r28
    3776:	df 91       	pop	r29
    3778:	08 95       	ret

0000377a <STEP_MOTORu8StartHalfMode>:

u8 STEP_MOTORu8StartHalfMode(STEP_t *Copy_pStep)
{
    377a:	df 93       	push	r29
    377c:	cf 93       	push	r28
    377e:	cd b7       	in	r28, 0x3d	; 61
    3780:	de b7       	in	r29, 0x3e	; 62
    3782:	c4 54       	subi	r28, 0x44	; 68
    3784:	d0 40       	sbci	r29, 0x00	; 0
    3786:	0f b6       	in	r0, 0x3f	; 63
    3788:	f8 94       	cli
    378a:	de bf       	out	0x3e, r29	; 62
    378c:	0f be       	out	0x3f, r0	; 63
    378e:	cd bf       	out	0x3d, r28	; 61
    3790:	fe 01       	movw	r30, r28
    3792:	ed 5b       	subi	r30, 0xBD	; 189
    3794:	ff 4f       	sbci	r31, 0xFF	; 255
    3796:	91 83       	std	Z+1, r25	; 0x01
    3798:	80 83       	st	Z, r24
	u8 Local_u8ErrorState = OK;
    379a:	fe 01       	movw	r30, r28
    379c:	ee 5b       	subi	r30, 0xBE	; 190
    379e:	ff 4f       	sbci	r31, 0xFF	; 255
    37a0:	10 82       	st	Z, r1
	u16 Local_u16Counter=0;
    37a2:	fe 01       	movw	r30, r28
    37a4:	e0 5c       	subi	r30, 0xC0	; 192
    37a6:	ff 4f       	sbci	r31, 0xFF	; 255
    37a8:	11 82       	std	Z+1, r1	; 0x01
    37aa:	10 82       	st	Z, r1
	u16 Local_u16NumOfSteps = (u16)((((f32)Copy_pStep->AngleDegree)/5.625)*64.0);
    37ac:	fe 01       	movw	r30, r28
    37ae:	ed 5b       	subi	r30, 0xBD	; 189
    37b0:	ff 4f       	sbci	r31, 0xFF	; 255
    37b2:	01 90       	ld	r0, Z+
    37b4:	f0 81       	ld	r31, Z
    37b6:	e0 2d       	mov	r30, r0
    37b8:	83 81       	ldd	r24, Z+3	; 0x03
    37ba:	94 81       	ldd	r25, Z+4	; 0x04
    37bc:	cc 01       	movw	r24, r24
    37be:	a0 e0       	ldi	r26, 0x00	; 0
    37c0:	b0 e0       	ldi	r27, 0x00	; 0
    37c2:	bc 01       	movw	r22, r24
    37c4:	cd 01       	movw	r24, r26
    37c6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    37ca:	dc 01       	movw	r26, r24
    37cc:	cb 01       	movw	r24, r22
    37ce:	bc 01       	movw	r22, r24
    37d0:	cd 01       	movw	r24, r26
    37d2:	20 e0       	ldi	r18, 0x00	; 0
    37d4:	30 e0       	ldi	r19, 0x00	; 0
    37d6:	44 eb       	ldi	r20, 0xB4	; 180
    37d8:	50 e4       	ldi	r21, 0x40	; 64
    37da:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    37de:	dc 01       	movw	r26, r24
    37e0:	cb 01       	movw	r24, r22
    37e2:	bc 01       	movw	r22, r24
    37e4:	cd 01       	movw	r24, r26
    37e6:	20 e0       	ldi	r18, 0x00	; 0
    37e8:	30 e0       	ldi	r19, 0x00	; 0
    37ea:	40 e8       	ldi	r20, 0x80	; 128
    37ec:	52 e4       	ldi	r21, 0x42	; 66
    37ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f2:	dc 01       	movw	r26, r24
    37f4:	cb 01       	movw	r24, r22
    37f6:	bc 01       	movw	r22, r24
    37f8:	cd 01       	movw	r24, r26
    37fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37fe:	dc 01       	movw	r26, r24
    3800:	cb 01       	movw	r24, r22
    3802:	9f af       	std	Y+63, r25	; 0x3f
    3804:	8e af       	std	Y+62, r24	; 0x3e
	u16 Local_u16MaxItration = Local_u16NumOfSteps/8;
    3806:	8e ad       	ldd	r24, Y+62	; 0x3e
    3808:	9f ad       	ldd	r25, Y+63	; 0x3f
    380a:	96 95       	lsr	r25
    380c:	87 95       	ror	r24
    380e:	96 95       	lsr	r25
    3810:	87 95       	ror	r24
    3812:	96 95       	lsr	r25
    3814:	87 95       	ror	r24
    3816:	9d af       	std	Y+61, r25	; 0x3d
    3818:	8c af       	std	Y+60, r24	; 0x3c
	u8 Local_u8ItrateStep = 0,con1,con2 ;
    381a:	1b ae       	std	Y+59, r1	; 0x3b
	if(STEP_LOWER_NIBBLE == Copy_pStep->Nibble)
    381c:	fe 01       	movw	r30, r28
    381e:	ed 5b       	subi	r30, 0xBD	; 189
    3820:	ff 4f       	sbci	r31, 0xFF	; 255
    3822:	01 90       	ld	r0, Z+
    3824:	f0 81       	ld	r31, Z
    3826:	e0 2d       	mov	r30, r0
    3828:	81 81       	ldd	r24, Z+1	; 0x01
    382a:	88 23       	and	r24, r24
    382c:	09 f0       	breq	.+2      	; 0x3830 <STEP_MOTORu8StartHalfMode+0xb6>
    382e:	96 c1       	rjmp	.+812    	; 0x3b5c <STEP_MOTORu8StartHalfMode+0x3e2>
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
    3830:	fe 01       	movw	r30, r28
    3832:	ed 5b       	subi	r30, 0xBD	; 189
    3834:	ff 4f       	sbci	r31, 0xFF	; 255
    3836:	01 90       	ld	r0, Z+
    3838:	f0 81       	ld	r31, Z
    383a:	e0 2d       	mov	r30, r0
    383c:	82 81       	ldd	r24, Z+2	; 0x02
    383e:	88 23       	and	r24, r24
    3840:	09 f0       	breq	.+2      	; 0x3844 <STEP_MOTORu8StartHalfMode+0xca>
    3842:	c1 c0       	rjmp	.+386    	; 0x39c6 <STEP_MOTORu8StartHalfMode+0x24c>
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3844:	fe 01       	movw	r30, r28
    3846:	e0 5c       	subi	r30, 0xC0	; 192
    3848:	ff 4f       	sbci	r31, 0xFF	; 255
    384a:	11 82       	std	Z+1, r1	; 0x01
    384c:	10 82       	st	Z, r1
    384e:	af c0       	rjmp	.+350    	; 0x39ae <STEP_MOTORu8StartHalfMode+0x234>
			{
				con1 = 0x01;
    3850:	81 e0       	ldi	r24, 0x01	; 1
    3852:	8a af       	std	Y+58, r24	; 0x3a
				con2 = 0x03;
    3854:	83 e0       	ldi	r24, 0x03	; 3
    3856:	89 af       	std	Y+57, r24	; 0x39
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3858:	81 e0       	ldi	r24, 0x01	; 1
    385a:	8b af       	std	Y+59, r24	; 0x3b
    385c:	98 c0       	rjmp	.+304    	; 0x398e <STEP_MOTORu8StartHalfMode+0x214>
				{

					if(Local_u8ItrateStep%2==1)
    385e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3860:	88 2f       	mov	r24, r24
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	81 70       	andi	r24, 0x01	; 1
    3866:	90 70       	andi	r25, 0x00	; 0
    3868:	88 23       	and	r24, r24
    386a:	71 f0       	breq	.+28     	; 0x3888 <STEP_MOTORu8StartHalfMode+0x10e>
					{
						DIO_u8SetLowNibbleValue(Copy_pStep->Port,con1);
    386c:	fe 01       	movw	r30, r28
    386e:	ed 5b       	subi	r30, 0xBD	; 189
    3870:	ff 4f       	sbci	r31, 0xFF	; 255
    3872:	01 90       	ld	r0, Z+
    3874:	f0 81       	ld	r31, Z
    3876:	e0 2d       	mov	r30, r0
    3878:	80 81       	ld	r24, Z
    387a:	6a ad       	ldd	r22, Y+58	; 0x3a
    387c:	0e 94 aa 12 	call	0x2554	; 0x2554 <DIO_u8SetLowNibbleValue>
						con1<<=1;
    3880:	8a ad       	ldd	r24, Y+58	; 0x3a
    3882:	88 0f       	add	r24, r24
    3884:	8a af       	std	Y+58, r24	; 0x3a
    3886:	0e c0       	rjmp	.+28     	; 0x38a4 <STEP_MOTORu8StartHalfMode+0x12a>
					}
					else
					{
						DIO_u8SetLowNibbleValue(Copy_pStep->Port,con2);
    3888:	fe 01       	movw	r30, r28
    388a:	ed 5b       	subi	r30, 0xBD	; 189
    388c:	ff 4f       	sbci	r31, 0xFF	; 255
    388e:	01 90       	ld	r0, Z+
    3890:	f0 81       	ld	r31, Z
    3892:	e0 2d       	mov	r30, r0
    3894:	80 81       	ld	r24, Z
    3896:	69 ad       	ldd	r22, Y+57	; 0x39
    3898:	0e 94 aa 12 	call	0x2554	; 0x2554 <DIO_u8SetLowNibbleValue>
						con2 = RotateLeftLowNibble(con2);
    389c:	89 ad       	ldd	r24, Y+57	; 0x39
    389e:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <RotateLeftLowNibble>
    38a2:	89 af       	std	Y+57, r24	; 0x39
    38a4:	80 e0       	ldi	r24, 0x00	; 0
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	a0 e0       	ldi	r26, 0x00	; 0
    38aa:	b0 e4       	ldi	r27, 0x40	; 64
    38ac:	8d ab       	std	Y+53, r24	; 0x35
    38ae:	9e ab       	std	Y+54, r25	; 0x36
    38b0:	af ab       	std	Y+55, r26	; 0x37
    38b2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38b4:	6d a9       	ldd	r22, Y+53	; 0x35
    38b6:	7e a9       	ldd	r23, Y+54	; 0x36
    38b8:	8f a9       	ldd	r24, Y+55	; 0x37
    38ba:	98 ad       	ldd	r25, Y+56	; 0x38
    38bc:	20 e0       	ldi	r18, 0x00	; 0
    38be:	30 e0       	ldi	r19, 0x00	; 0
    38c0:	4a ef       	ldi	r20, 0xFA	; 250
    38c2:	54 e4       	ldi	r21, 0x44	; 68
    38c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c8:	dc 01       	movw	r26, r24
    38ca:	cb 01       	movw	r24, r22
    38cc:	89 ab       	std	Y+49, r24	; 0x31
    38ce:	9a ab       	std	Y+50, r25	; 0x32
    38d0:	ab ab       	std	Y+51, r26	; 0x33
    38d2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    38d4:	69 a9       	ldd	r22, Y+49	; 0x31
    38d6:	7a a9       	ldd	r23, Y+50	; 0x32
    38d8:	8b a9       	ldd	r24, Y+51	; 0x33
    38da:	9c a9       	ldd	r25, Y+52	; 0x34
    38dc:	20 e0       	ldi	r18, 0x00	; 0
    38de:	30 e0       	ldi	r19, 0x00	; 0
    38e0:	40 e8       	ldi	r20, 0x80	; 128
    38e2:	5f e3       	ldi	r21, 0x3F	; 63
    38e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38e8:	88 23       	and	r24, r24
    38ea:	2c f4       	brge	.+10     	; 0x38f6 <STEP_MOTORu8StartHalfMode+0x17c>
		__ticks = 1;
    38ec:	81 e0       	ldi	r24, 0x01	; 1
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	98 ab       	std	Y+48, r25	; 0x30
    38f2:	8f a7       	std	Y+47, r24	; 0x2f
    38f4:	3f c0       	rjmp	.+126    	; 0x3974 <STEP_MOTORu8StartHalfMode+0x1fa>
	else if (__tmp > 65535)
    38f6:	69 a9       	ldd	r22, Y+49	; 0x31
    38f8:	7a a9       	ldd	r23, Y+50	; 0x32
    38fa:	8b a9       	ldd	r24, Y+51	; 0x33
    38fc:	9c a9       	ldd	r25, Y+52	; 0x34
    38fe:	20 e0       	ldi	r18, 0x00	; 0
    3900:	3f ef       	ldi	r19, 0xFF	; 255
    3902:	4f e7       	ldi	r20, 0x7F	; 127
    3904:	57 e4       	ldi	r21, 0x47	; 71
    3906:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    390a:	18 16       	cp	r1, r24
    390c:	4c f5       	brge	.+82     	; 0x3960 <STEP_MOTORu8StartHalfMode+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    390e:	6d a9       	ldd	r22, Y+53	; 0x35
    3910:	7e a9       	ldd	r23, Y+54	; 0x36
    3912:	8f a9       	ldd	r24, Y+55	; 0x37
    3914:	98 ad       	ldd	r25, Y+56	; 0x38
    3916:	20 e0       	ldi	r18, 0x00	; 0
    3918:	30 e0       	ldi	r19, 0x00	; 0
    391a:	40 e2       	ldi	r20, 0x20	; 32
    391c:	51 e4       	ldi	r21, 0x41	; 65
    391e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3922:	dc 01       	movw	r26, r24
    3924:	cb 01       	movw	r24, r22
    3926:	bc 01       	movw	r22, r24
    3928:	cd 01       	movw	r24, r26
    392a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    392e:	dc 01       	movw	r26, r24
    3930:	cb 01       	movw	r24, r22
    3932:	98 ab       	std	Y+48, r25	; 0x30
    3934:	8f a7       	std	Y+47, r24	; 0x2f
    3936:	0f c0       	rjmp	.+30     	; 0x3956 <STEP_MOTORu8StartHalfMode+0x1dc>
    3938:	88 ec       	ldi	r24, 0xC8	; 200
    393a:	90 e0       	ldi	r25, 0x00	; 0
    393c:	9e a7       	std	Y+46, r25	; 0x2e
    393e:	8d a7       	std	Y+45, r24	; 0x2d
    3940:	8d a5       	ldd	r24, Y+45	; 0x2d
    3942:	9e a5       	ldd	r25, Y+46	; 0x2e
    3944:	01 97       	sbiw	r24, 0x01	; 1
    3946:	f1 f7       	brne	.-4      	; 0x3944 <STEP_MOTORu8StartHalfMode+0x1ca>
    3948:	9e a7       	std	Y+46, r25	; 0x2e
    394a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    394c:	8f a5       	ldd	r24, Y+47	; 0x2f
    394e:	98 a9       	ldd	r25, Y+48	; 0x30
    3950:	01 97       	sbiw	r24, 0x01	; 1
    3952:	98 ab       	std	Y+48, r25	; 0x30
    3954:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3956:	8f a5       	ldd	r24, Y+47	; 0x2f
    3958:	98 a9       	ldd	r25, Y+48	; 0x30
    395a:	00 97       	sbiw	r24, 0x00	; 0
    395c:	69 f7       	brne	.-38     	; 0x3938 <STEP_MOTORu8StartHalfMode+0x1be>
    395e:	14 c0       	rjmp	.+40     	; 0x3988 <STEP_MOTORu8StartHalfMode+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3960:	69 a9       	ldd	r22, Y+49	; 0x31
    3962:	7a a9       	ldd	r23, Y+50	; 0x32
    3964:	8b a9       	ldd	r24, Y+51	; 0x33
    3966:	9c a9       	ldd	r25, Y+52	; 0x34
    3968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    396c:	dc 01       	movw	r26, r24
    396e:	cb 01       	movw	r24, r22
    3970:	98 ab       	std	Y+48, r25	; 0x30
    3972:	8f a7       	std	Y+47, r24	; 0x2f
    3974:	8f a5       	ldd	r24, Y+47	; 0x2f
    3976:	98 a9       	ldd	r25, Y+48	; 0x30
    3978:	9c a7       	std	Y+44, r25	; 0x2c
    397a:	8b a7       	std	Y+43, r24	; 0x2b
    397c:	8b a5       	ldd	r24, Y+43	; 0x2b
    397e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3980:	01 97       	sbiw	r24, 0x01	; 1
    3982:	f1 f7       	brne	.-4      	; 0x3980 <STEP_MOTORu8StartHalfMode+0x206>
    3984:	9c a7       	std	Y+44, r25	; 0x2c
    3986:	8b a7       	std	Y+43, r24	; 0x2b

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				con1 = 0x01;
				con2 = 0x03;
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3988:	8b ad       	ldd	r24, Y+59	; 0x3b
    398a:	8f 5f       	subi	r24, 0xFF	; 255
    398c:	8b af       	std	Y+59, r24	; 0x3b
    398e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3990:	89 30       	cpi	r24, 0x09	; 9
    3992:	08 f4       	brcc	.+2      	; 0x3996 <STEP_MOTORu8StartHalfMode+0x21c>
    3994:	64 cf       	rjmp	.-312    	; 0x385e <STEP_MOTORu8StartHalfMode+0xe4>
	if(STEP_LOWER_NIBBLE == Copy_pStep->Nibble)
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3996:	de 01       	movw	r26, r28
    3998:	a0 5c       	subi	r26, 0xC0	; 192
    399a:	bf 4f       	sbci	r27, 0xFF	; 255
    399c:	fe 01       	movw	r30, r28
    399e:	e0 5c       	subi	r30, 0xC0	; 192
    39a0:	ff 4f       	sbci	r31, 0xFF	; 255
    39a2:	80 81       	ld	r24, Z
    39a4:	91 81       	ldd	r25, Z+1	; 0x01
    39a6:	01 96       	adiw	r24, 0x01	; 1
    39a8:	11 96       	adiw	r26, 0x01	; 1
    39aa:	9c 93       	st	X, r25
    39ac:	8e 93       	st	-X, r24
    39ae:	fe 01       	movw	r30, r28
    39b0:	e0 5c       	subi	r30, 0xC0	; 192
    39b2:	ff 4f       	sbci	r31, 0xFF	; 255
    39b4:	20 81       	ld	r18, Z
    39b6:	31 81       	ldd	r19, Z+1	; 0x01
    39b8:	8c ad       	ldd	r24, Y+60	; 0x3c
    39ba:	9d ad       	ldd	r25, Y+61	; 0x3d
    39bc:	28 17       	cp	r18, r24
    39be:	39 07       	cpc	r19, r25
    39c0:	08 f4       	brcc	.+2      	; 0x39c4 <STEP_MOTORu8StartHalfMode+0x24a>
    39c2:	46 cf       	rjmp	.-372    	; 0x3850 <STEP_MOTORu8StartHalfMode+0xd6>
    39c4:	7e c2       	rjmp	.+1276   	; 0x3ec2 <STEP_MOTORu8StartHalfMode+0x748>
					}
					_delay_ms(2);
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
    39c6:	fe 01       	movw	r30, r28
    39c8:	ed 5b       	subi	r30, 0xBD	; 189
    39ca:	ff 4f       	sbci	r31, 0xFF	; 255
    39cc:	01 90       	ld	r0, Z+
    39ce:	f0 81       	ld	r31, Z
    39d0:	e0 2d       	mov	r30, r0
    39d2:	82 81       	ldd	r24, Z+2	; 0x02
    39d4:	81 30       	cpi	r24, 0x01	; 1
    39d6:	09 f0       	breq	.+2      	; 0x39da <STEP_MOTORu8StartHalfMode+0x260>
    39d8:	74 c2       	rjmp	.+1256   	; 0x3ec2 <STEP_MOTORu8StartHalfMode+0x748>
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    39da:	fe 01       	movw	r30, r28
    39dc:	e0 5c       	subi	r30, 0xC0	; 192
    39de:	ff 4f       	sbci	r31, 0xFF	; 255
    39e0:	11 82       	std	Z+1, r1	; 0x01
    39e2:	10 82       	st	Z, r1
    39e4:	af c0       	rjmp	.+350    	; 0x3b44 <STEP_MOTORu8StartHalfMode+0x3ca>
			{
				con1 = 0x08;
    39e6:	88 e0       	ldi	r24, 0x08	; 8
    39e8:	8a af       	std	Y+58, r24	; 0x3a
				con2 = 0x0c;
    39ea:	8c e0       	ldi	r24, 0x0C	; 12
    39ec:	89 af       	std	Y+57, r24	; 0x39
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    39ee:	81 e0       	ldi	r24, 0x01	; 1
    39f0:	8b af       	std	Y+59, r24	; 0x3b
    39f2:	98 c0       	rjmp	.+304    	; 0x3b24 <STEP_MOTORu8StartHalfMode+0x3aa>
				{

					if(Local_u8ItrateStep%2==1)
    39f4:	8b ad       	ldd	r24, Y+59	; 0x3b
    39f6:	88 2f       	mov	r24, r24
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	81 70       	andi	r24, 0x01	; 1
    39fc:	90 70       	andi	r25, 0x00	; 0
    39fe:	88 23       	and	r24, r24
    3a00:	71 f0       	breq	.+28     	; 0x3a1e <STEP_MOTORu8StartHalfMode+0x2a4>
					{
						DIO_u8SetLowNibbleValue(Copy_pStep->Port,con1);
    3a02:	fe 01       	movw	r30, r28
    3a04:	ed 5b       	subi	r30, 0xBD	; 189
    3a06:	ff 4f       	sbci	r31, 0xFF	; 255
    3a08:	01 90       	ld	r0, Z+
    3a0a:	f0 81       	ld	r31, Z
    3a0c:	e0 2d       	mov	r30, r0
    3a0e:	80 81       	ld	r24, Z
    3a10:	6a ad       	ldd	r22, Y+58	; 0x3a
    3a12:	0e 94 aa 12 	call	0x2554	; 0x2554 <DIO_u8SetLowNibbleValue>
						con1>>=1;
    3a16:	8a ad       	ldd	r24, Y+58	; 0x3a
    3a18:	86 95       	lsr	r24
    3a1a:	8a af       	std	Y+58, r24	; 0x3a
    3a1c:	0e c0       	rjmp	.+28     	; 0x3a3a <STEP_MOTORu8StartHalfMode+0x2c0>
					}
					else
					{
						DIO_u8SetLowNibbleValue(Copy_pStep->Port,con2);
    3a1e:	fe 01       	movw	r30, r28
    3a20:	ed 5b       	subi	r30, 0xBD	; 189
    3a22:	ff 4f       	sbci	r31, 0xFF	; 255
    3a24:	01 90       	ld	r0, Z+
    3a26:	f0 81       	ld	r31, Z
    3a28:	e0 2d       	mov	r30, r0
    3a2a:	80 81       	ld	r24, Z
    3a2c:	69 ad       	ldd	r22, Y+57	; 0x39
    3a2e:	0e 94 aa 12 	call	0x2554	; 0x2554 <DIO_u8SetLowNibbleValue>
						con2 = RotateRightLowNibble(con2);
    3a32:	89 ad       	ldd	r24, Y+57	; 0x39
    3a34:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <RotateRightLowNibble>
    3a38:	89 af       	std	Y+57, r24	; 0x39
    3a3a:	80 e0       	ldi	r24, 0x00	; 0
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	a0 e0       	ldi	r26, 0x00	; 0
    3a40:	b0 e4       	ldi	r27, 0x40	; 64
    3a42:	8f a3       	std	Y+39, r24	; 0x27
    3a44:	98 a7       	std	Y+40, r25	; 0x28
    3a46:	a9 a7       	std	Y+41, r26	; 0x29
    3a48:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a4a:	6f a1       	ldd	r22, Y+39	; 0x27
    3a4c:	78 a5       	ldd	r23, Y+40	; 0x28
    3a4e:	89 a5       	ldd	r24, Y+41	; 0x29
    3a50:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a52:	20 e0       	ldi	r18, 0x00	; 0
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	4a ef       	ldi	r20, 0xFA	; 250
    3a58:	54 e4       	ldi	r21, 0x44	; 68
    3a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a5e:	dc 01       	movw	r26, r24
    3a60:	cb 01       	movw	r24, r22
    3a62:	8b a3       	std	Y+35, r24	; 0x23
    3a64:	9c a3       	std	Y+36, r25	; 0x24
    3a66:	ad a3       	std	Y+37, r26	; 0x25
    3a68:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3a6a:	6b a1       	ldd	r22, Y+35	; 0x23
    3a6c:	7c a1       	ldd	r23, Y+36	; 0x24
    3a6e:	8d a1       	ldd	r24, Y+37	; 0x25
    3a70:	9e a1       	ldd	r25, Y+38	; 0x26
    3a72:	20 e0       	ldi	r18, 0x00	; 0
    3a74:	30 e0       	ldi	r19, 0x00	; 0
    3a76:	40 e8       	ldi	r20, 0x80	; 128
    3a78:	5f e3       	ldi	r21, 0x3F	; 63
    3a7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a7e:	88 23       	and	r24, r24
    3a80:	2c f4       	brge	.+10     	; 0x3a8c <STEP_MOTORu8StartHalfMode+0x312>
		__ticks = 1;
    3a82:	81 e0       	ldi	r24, 0x01	; 1
    3a84:	90 e0       	ldi	r25, 0x00	; 0
    3a86:	9a a3       	std	Y+34, r25	; 0x22
    3a88:	89 a3       	std	Y+33, r24	; 0x21
    3a8a:	3f c0       	rjmp	.+126    	; 0x3b0a <STEP_MOTORu8StartHalfMode+0x390>
	else if (__tmp > 65535)
    3a8c:	6b a1       	ldd	r22, Y+35	; 0x23
    3a8e:	7c a1       	ldd	r23, Y+36	; 0x24
    3a90:	8d a1       	ldd	r24, Y+37	; 0x25
    3a92:	9e a1       	ldd	r25, Y+38	; 0x26
    3a94:	20 e0       	ldi	r18, 0x00	; 0
    3a96:	3f ef       	ldi	r19, 0xFF	; 255
    3a98:	4f e7       	ldi	r20, 0x7F	; 127
    3a9a:	57 e4       	ldi	r21, 0x47	; 71
    3a9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3aa0:	18 16       	cp	r1, r24
    3aa2:	4c f5       	brge	.+82     	; 0x3af6 <STEP_MOTORu8StartHalfMode+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aa4:	6f a1       	ldd	r22, Y+39	; 0x27
    3aa6:	78 a5       	ldd	r23, Y+40	; 0x28
    3aa8:	89 a5       	ldd	r24, Y+41	; 0x29
    3aaa:	9a a5       	ldd	r25, Y+42	; 0x2a
    3aac:	20 e0       	ldi	r18, 0x00	; 0
    3aae:	30 e0       	ldi	r19, 0x00	; 0
    3ab0:	40 e2       	ldi	r20, 0x20	; 32
    3ab2:	51 e4       	ldi	r21, 0x41	; 65
    3ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ab8:	dc 01       	movw	r26, r24
    3aba:	cb 01       	movw	r24, r22
    3abc:	bc 01       	movw	r22, r24
    3abe:	cd 01       	movw	r24, r26
    3ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ac4:	dc 01       	movw	r26, r24
    3ac6:	cb 01       	movw	r24, r22
    3ac8:	9a a3       	std	Y+34, r25	; 0x22
    3aca:	89 a3       	std	Y+33, r24	; 0x21
    3acc:	0f c0       	rjmp	.+30     	; 0x3aec <STEP_MOTORu8StartHalfMode+0x372>
    3ace:	88 ec       	ldi	r24, 0xC8	; 200
    3ad0:	90 e0       	ldi	r25, 0x00	; 0
    3ad2:	98 a3       	std	Y+32, r25	; 0x20
    3ad4:	8f 8f       	std	Y+31, r24	; 0x1f
    3ad6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ad8:	98 a1       	ldd	r25, Y+32	; 0x20
    3ada:	01 97       	sbiw	r24, 0x01	; 1
    3adc:	f1 f7       	brne	.-4      	; 0x3ada <STEP_MOTORu8StartHalfMode+0x360>
    3ade:	98 a3       	std	Y+32, r25	; 0x20
    3ae0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ae2:	89 a1       	ldd	r24, Y+33	; 0x21
    3ae4:	9a a1       	ldd	r25, Y+34	; 0x22
    3ae6:	01 97       	sbiw	r24, 0x01	; 1
    3ae8:	9a a3       	std	Y+34, r25	; 0x22
    3aea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aec:	89 a1       	ldd	r24, Y+33	; 0x21
    3aee:	9a a1       	ldd	r25, Y+34	; 0x22
    3af0:	00 97       	sbiw	r24, 0x00	; 0
    3af2:	69 f7       	brne	.-38     	; 0x3ace <STEP_MOTORu8StartHalfMode+0x354>
    3af4:	14 c0       	rjmp	.+40     	; 0x3b1e <STEP_MOTORu8StartHalfMode+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3af6:	6b a1       	ldd	r22, Y+35	; 0x23
    3af8:	7c a1       	ldd	r23, Y+36	; 0x24
    3afa:	8d a1       	ldd	r24, Y+37	; 0x25
    3afc:	9e a1       	ldd	r25, Y+38	; 0x26
    3afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b02:	dc 01       	movw	r26, r24
    3b04:	cb 01       	movw	r24, r22
    3b06:	9a a3       	std	Y+34, r25	; 0x22
    3b08:	89 a3       	std	Y+33, r24	; 0x21
    3b0a:	89 a1       	ldd	r24, Y+33	; 0x21
    3b0c:	9a a1       	ldd	r25, Y+34	; 0x22
    3b0e:	9e 8f       	std	Y+30, r25	; 0x1e
    3b10:	8d 8f       	std	Y+29, r24	; 0x1d
    3b12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b14:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b16:	01 97       	sbiw	r24, 0x01	; 1
    3b18:	f1 f7       	brne	.-4      	; 0x3b16 <STEP_MOTORu8StartHalfMode+0x39c>
    3b1a:	9e 8f       	std	Y+30, r25	; 0x1e
    3b1c:	8d 8f       	std	Y+29, r24	; 0x1d

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				con1 = 0x08;
				con2 = 0x0c;
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3b1e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3b20:	8f 5f       	subi	r24, 0xFF	; 255
    3b22:	8b af       	std	Y+59, r24	; 0x3b
    3b24:	8b ad       	ldd	r24, Y+59	; 0x3b
    3b26:	89 30       	cpi	r24, 0x09	; 9
    3b28:	08 f4       	brcc	.+2      	; 0x3b2c <STEP_MOTORu8StartHalfMode+0x3b2>
    3b2a:	64 cf       	rjmp	.-312    	; 0x39f4 <STEP_MOTORu8StartHalfMode+0x27a>
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3b2c:	de 01       	movw	r26, r28
    3b2e:	a0 5c       	subi	r26, 0xC0	; 192
    3b30:	bf 4f       	sbci	r27, 0xFF	; 255
    3b32:	fe 01       	movw	r30, r28
    3b34:	e0 5c       	subi	r30, 0xC0	; 192
    3b36:	ff 4f       	sbci	r31, 0xFF	; 255
    3b38:	80 81       	ld	r24, Z
    3b3a:	91 81       	ldd	r25, Z+1	; 0x01
    3b3c:	01 96       	adiw	r24, 0x01	; 1
    3b3e:	11 96       	adiw	r26, 0x01	; 1
    3b40:	9c 93       	st	X, r25
    3b42:	8e 93       	st	-X, r24
    3b44:	fe 01       	movw	r30, r28
    3b46:	e0 5c       	subi	r30, 0xC0	; 192
    3b48:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4a:	20 81       	ld	r18, Z
    3b4c:	31 81       	ldd	r19, Z+1	; 0x01
    3b4e:	8c ad       	ldd	r24, Y+60	; 0x3c
    3b50:	9d ad       	ldd	r25, Y+61	; 0x3d
    3b52:	28 17       	cp	r18, r24
    3b54:	39 07       	cpc	r19, r25
    3b56:	08 f4       	brcc	.+2      	; 0x3b5a <STEP_MOTORu8StartHalfMode+0x3e0>
    3b58:	46 cf       	rjmp	.-372    	; 0x39e6 <STEP_MOTORu8StartHalfMode+0x26c>
    3b5a:	b3 c1       	rjmp	.+870    	; 0x3ec2 <STEP_MOTORu8StartHalfMode+0x748>
				}
			}
		}

	}
	else if(STEP_UPPER_NIBBLE == Copy_pStep->Nibble)
    3b5c:	fe 01       	movw	r30, r28
    3b5e:	ed 5b       	subi	r30, 0xBD	; 189
    3b60:	ff 4f       	sbci	r31, 0xFF	; 255
    3b62:	01 90       	ld	r0, Z+
    3b64:	f0 81       	ld	r31, Z
    3b66:	e0 2d       	mov	r30, r0
    3b68:	81 81       	ldd	r24, Z+1	; 0x01
    3b6a:	81 30       	cpi	r24, 0x01	; 1
    3b6c:	09 f0       	breq	.+2      	; 0x3b70 <STEP_MOTORu8StartHalfMode+0x3f6>
    3b6e:	a4 c1       	rjmp	.+840    	; 0x3eb8 <STEP_MOTORu8StartHalfMode+0x73e>
	{

		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
    3b70:	fe 01       	movw	r30, r28
    3b72:	ed 5b       	subi	r30, 0xBD	; 189
    3b74:	ff 4f       	sbci	r31, 0xFF	; 255
    3b76:	01 90       	ld	r0, Z+
    3b78:	f0 81       	ld	r31, Z
    3b7a:	e0 2d       	mov	r30, r0
    3b7c:	82 81       	ldd	r24, Z+2	; 0x02
    3b7e:	88 23       	and	r24, r24
    3b80:	09 f0       	breq	.+2      	; 0x3b84 <STEP_MOTORu8StartHalfMode+0x40a>
    3b82:	c9 c0       	rjmp	.+402    	; 0x3d16 <STEP_MOTORu8StartHalfMode+0x59c>
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3b84:	fe 01       	movw	r30, r28
    3b86:	e0 5c       	subi	r30, 0xC0	; 192
    3b88:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8a:	11 82       	std	Z+1, r1	; 0x01
    3b8c:	10 82       	st	Z, r1
    3b8e:	b7 c0       	rjmp	.+366    	; 0x3cfe <STEP_MOTORu8StartHalfMode+0x584>
			{
				con1 = 0x01;
    3b90:	81 e0       	ldi	r24, 0x01	; 1
    3b92:	8a af       	std	Y+58, r24	; 0x3a
				con2 = 0x03;
    3b94:	83 e0       	ldi	r24, 0x03	; 3
    3b96:	89 af       	std	Y+57, r24	; 0x39
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3b98:	81 e0       	ldi	r24, 0x01	; 1
    3b9a:	8b af       	std	Y+59, r24	; 0x3b
    3b9c:	a0 c0       	rjmp	.+320    	; 0x3cde <STEP_MOTORu8StartHalfMode+0x564>
				{

					if(Local_u8ItrateStep%2==1)
    3b9e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3ba0:	88 2f       	mov	r24, r24
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	81 70       	andi	r24, 0x01	; 1
    3ba6:	90 70       	andi	r25, 0x00	; 0
    3ba8:	88 23       	and	r24, r24
    3baa:	71 f0       	breq	.+28     	; 0x3bc8 <STEP_MOTORu8StartHalfMode+0x44e>
					{
						DIO_u8SetHighNibbleValue(Copy_pStep->Port,con1);
    3bac:	fe 01       	movw	r30, r28
    3bae:	ed 5b       	subi	r30, 0xBD	; 189
    3bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb2:	01 90       	ld	r0, Z+
    3bb4:	f0 81       	ld	r31, Z
    3bb6:	e0 2d       	mov	r30, r0
    3bb8:	80 81       	ld	r24, Z
    3bba:	6a ad       	ldd	r22, Y+58	; 0x3a
    3bbc:	0e 94 25 13 	call	0x264a	; 0x264a <DIO_u8SetHighNibbleValue>
						con1<<=1;
    3bc0:	8a ad       	ldd	r24, Y+58	; 0x3a
    3bc2:	88 0f       	add	r24, r24
    3bc4:	8a af       	std	Y+58, r24	; 0x3a
    3bc6:	16 c0       	rjmp	.+44     	; 0x3bf4 <STEP_MOTORu8StartHalfMode+0x47a>
					}
					else
					{
						DIO_u8SetHighNibbleValue(Copy_pStep->Port,con2);
    3bc8:	fe 01       	movw	r30, r28
    3bca:	ed 5b       	subi	r30, 0xBD	; 189
    3bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bce:	01 90       	ld	r0, Z+
    3bd0:	f0 81       	ld	r31, Z
    3bd2:	e0 2d       	mov	r30, r0
    3bd4:	80 81       	ld	r24, Z
    3bd6:	69 ad       	ldd	r22, Y+57	; 0x39
    3bd8:	0e 94 25 13 	call	0x264a	; 0x264a <DIO_u8SetHighNibbleValue>
						CLCD_voidWriteNumber(con2);
    3bdc:	89 ad       	ldd	r24, Y+57	; 0x39
    3bde:	88 2f       	mov	r24, r24
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <CLCD_voidWriteNumber>
						CLCD_voidSendData(' ');
    3be6:	80 e2       	ldi	r24, 0x20	; 32
    3be8:	0e 94 41 0b 	call	0x1682	; 0x1682 <CLCD_voidSendData>
						con2 = RotateLeftLowNibble(con2);
    3bec:	89 ad       	ldd	r24, Y+57	; 0x39
    3bee:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <RotateLeftLowNibble>
    3bf2:	89 af       	std	Y+57, r24	; 0x39
    3bf4:	80 e0       	ldi	r24, 0x00	; 0
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	a0 e0       	ldi	r26, 0x00	; 0
    3bfa:	b0 e4       	ldi	r27, 0x40	; 64
    3bfc:	89 8f       	std	Y+25, r24	; 0x19
    3bfe:	9a 8f       	std	Y+26, r25	; 0x1a
    3c00:	ab 8f       	std	Y+27, r26	; 0x1b
    3c02:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c04:	69 8d       	ldd	r22, Y+25	; 0x19
    3c06:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c0c:	20 e0       	ldi	r18, 0x00	; 0
    3c0e:	30 e0       	ldi	r19, 0x00	; 0
    3c10:	4a ef       	ldi	r20, 0xFA	; 250
    3c12:	54 e4       	ldi	r21, 0x44	; 68
    3c14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c18:	dc 01       	movw	r26, r24
    3c1a:	cb 01       	movw	r24, r22
    3c1c:	8d 8b       	std	Y+21, r24	; 0x15
    3c1e:	9e 8b       	std	Y+22, r25	; 0x16
    3c20:	af 8b       	std	Y+23, r26	; 0x17
    3c22:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c24:	6d 89       	ldd	r22, Y+21	; 0x15
    3c26:	7e 89       	ldd	r23, Y+22	; 0x16
    3c28:	8f 89       	ldd	r24, Y+23	; 0x17
    3c2a:	98 8d       	ldd	r25, Y+24	; 0x18
    3c2c:	20 e0       	ldi	r18, 0x00	; 0
    3c2e:	30 e0       	ldi	r19, 0x00	; 0
    3c30:	40 e8       	ldi	r20, 0x80	; 128
    3c32:	5f e3       	ldi	r21, 0x3F	; 63
    3c34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c38:	88 23       	and	r24, r24
    3c3a:	2c f4       	brge	.+10     	; 0x3c46 <STEP_MOTORu8StartHalfMode+0x4cc>
		__ticks = 1;
    3c3c:	81 e0       	ldi	r24, 0x01	; 1
    3c3e:	90 e0       	ldi	r25, 0x00	; 0
    3c40:	9c 8b       	std	Y+20, r25	; 0x14
    3c42:	8b 8b       	std	Y+19, r24	; 0x13
    3c44:	3f c0       	rjmp	.+126    	; 0x3cc4 <STEP_MOTORu8StartHalfMode+0x54a>
	else if (__tmp > 65535)
    3c46:	6d 89       	ldd	r22, Y+21	; 0x15
    3c48:	7e 89       	ldd	r23, Y+22	; 0x16
    3c4a:	8f 89       	ldd	r24, Y+23	; 0x17
    3c4c:	98 8d       	ldd	r25, Y+24	; 0x18
    3c4e:	20 e0       	ldi	r18, 0x00	; 0
    3c50:	3f ef       	ldi	r19, 0xFF	; 255
    3c52:	4f e7       	ldi	r20, 0x7F	; 127
    3c54:	57 e4       	ldi	r21, 0x47	; 71
    3c56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c5a:	18 16       	cp	r1, r24
    3c5c:	4c f5       	brge	.+82     	; 0x3cb0 <STEP_MOTORu8StartHalfMode+0x536>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c5e:	69 8d       	ldd	r22, Y+25	; 0x19
    3c60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c66:	20 e0       	ldi	r18, 0x00	; 0
    3c68:	30 e0       	ldi	r19, 0x00	; 0
    3c6a:	40 e2       	ldi	r20, 0x20	; 32
    3c6c:	51 e4       	ldi	r21, 0x41	; 65
    3c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c72:	dc 01       	movw	r26, r24
    3c74:	cb 01       	movw	r24, r22
    3c76:	bc 01       	movw	r22, r24
    3c78:	cd 01       	movw	r24, r26
    3c7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c7e:	dc 01       	movw	r26, r24
    3c80:	cb 01       	movw	r24, r22
    3c82:	9c 8b       	std	Y+20, r25	; 0x14
    3c84:	8b 8b       	std	Y+19, r24	; 0x13
    3c86:	0f c0       	rjmp	.+30     	; 0x3ca6 <STEP_MOTORu8StartHalfMode+0x52c>
    3c88:	88 ec       	ldi	r24, 0xC8	; 200
    3c8a:	90 e0       	ldi	r25, 0x00	; 0
    3c8c:	9a 8b       	std	Y+18, r25	; 0x12
    3c8e:	89 8b       	std	Y+17, r24	; 0x11
    3c90:	89 89       	ldd	r24, Y+17	; 0x11
    3c92:	9a 89       	ldd	r25, Y+18	; 0x12
    3c94:	01 97       	sbiw	r24, 0x01	; 1
    3c96:	f1 f7       	brne	.-4      	; 0x3c94 <STEP_MOTORu8StartHalfMode+0x51a>
    3c98:	9a 8b       	std	Y+18, r25	; 0x12
    3c9a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c9c:	8b 89       	ldd	r24, Y+19	; 0x13
    3c9e:	9c 89       	ldd	r25, Y+20	; 0x14
    3ca0:	01 97       	sbiw	r24, 0x01	; 1
    3ca2:	9c 8b       	std	Y+20, r25	; 0x14
    3ca4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ca6:	8b 89       	ldd	r24, Y+19	; 0x13
    3ca8:	9c 89       	ldd	r25, Y+20	; 0x14
    3caa:	00 97       	sbiw	r24, 0x00	; 0
    3cac:	69 f7       	brne	.-38     	; 0x3c88 <STEP_MOTORu8StartHalfMode+0x50e>
    3cae:	14 c0       	rjmp	.+40     	; 0x3cd8 <STEP_MOTORu8StartHalfMode+0x55e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cb0:	6d 89       	ldd	r22, Y+21	; 0x15
    3cb2:	7e 89       	ldd	r23, Y+22	; 0x16
    3cb4:	8f 89       	ldd	r24, Y+23	; 0x17
    3cb6:	98 8d       	ldd	r25, Y+24	; 0x18
    3cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cbc:	dc 01       	movw	r26, r24
    3cbe:	cb 01       	movw	r24, r22
    3cc0:	9c 8b       	std	Y+20, r25	; 0x14
    3cc2:	8b 8b       	std	Y+19, r24	; 0x13
    3cc4:	8b 89       	ldd	r24, Y+19	; 0x13
    3cc6:	9c 89       	ldd	r25, Y+20	; 0x14
    3cc8:	98 8b       	std	Y+16, r25	; 0x10
    3cca:	8f 87       	std	Y+15, r24	; 0x0f
    3ccc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cce:	98 89       	ldd	r25, Y+16	; 0x10
    3cd0:	01 97       	sbiw	r24, 0x01	; 1
    3cd2:	f1 f7       	brne	.-4      	; 0x3cd0 <STEP_MOTORu8StartHalfMode+0x556>
    3cd4:	98 8b       	std	Y+16, r25	; 0x10
    3cd6:	8f 87       	std	Y+15, r24	; 0x0f

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				con1 = 0x01;
				con2 = 0x03;
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3cd8:	8b ad       	ldd	r24, Y+59	; 0x3b
    3cda:	8f 5f       	subi	r24, 0xFF	; 255
    3cdc:	8b af       	std	Y+59, r24	; 0x3b
    3cde:	8b ad       	ldd	r24, Y+59	; 0x3b
    3ce0:	89 30       	cpi	r24, 0x09	; 9
    3ce2:	08 f4       	brcc	.+2      	; 0x3ce6 <STEP_MOTORu8StartHalfMode+0x56c>
    3ce4:	5c cf       	rjmp	.-328    	; 0x3b9e <STEP_MOTORu8StartHalfMode+0x424>
	{

		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3ce6:	de 01       	movw	r26, r28
    3ce8:	a0 5c       	subi	r26, 0xC0	; 192
    3cea:	bf 4f       	sbci	r27, 0xFF	; 255
    3cec:	fe 01       	movw	r30, r28
    3cee:	e0 5c       	subi	r30, 0xC0	; 192
    3cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf2:	80 81       	ld	r24, Z
    3cf4:	91 81       	ldd	r25, Z+1	; 0x01
    3cf6:	01 96       	adiw	r24, 0x01	; 1
    3cf8:	11 96       	adiw	r26, 0x01	; 1
    3cfa:	9c 93       	st	X, r25
    3cfc:	8e 93       	st	-X, r24
    3cfe:	fe 01       	movw	r30, r28
    3d00:	e0 5c       	subi	r30, 0xC0	; 192
    3d02:	ff 4f       	sbci	r31, 0xFF	; 255
    3d04:	20 81       	ld	r18, Z
    3d06:	31 81       	ldd	r19, Z+1	; 0x01
    3d08:	8c ad       	ldd	r24, Y+60	; 0x3c
    3d0a:	9d ad       	ldd	r25, Y+61	; 0x3d
    3d0c:	28 17       	cp	r18, r24
    3d0e:	39 07       	cpc	r19, r25
    3d10:	08 f4       	brcc	.+2      	; 0x3d14 <STEP_MOTORu8StartHalfMode+0x59a>
    3d12:	3e cf       	rjmp	.-388    	; 0x3b90 <STEP_MOTORu8StartHalfMode+0x416>
    3d14:	d6 c0       	rjmp	.+428    	; 0x3ec2 <STEP_MOTORu8StartHalfMode+0x748>
					}
					_delay_ms(2);
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
    3d16:	fe 01       	movw	r30, r28
    3d18:	ed 5b       	subi	r30, 0xBD	; 189
    3d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1c:	01 90       	ld	r0, Z+
    3d1e:	f0 81       	ld	r31, Z
    3d20:	e0 2d       	mov	r30, r0
    3d22:	82 81       	ldd	r24, Z+2	; 0x02
    3d24:	81 30       	cpi	r24, 0x01	; 1
    3d26:	09 f0       	breq	.+2      	; 0x3d2a <STEP_MOTORu8StartHalfMode+0x5b0>
    3d28:	c1 c0       	rjmp	.+386    	; 0x3eac <STEP_MOTORu8StartHalfMode+0x732>
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3d2a:	fe 01       	movw	r30, r28
    3d2c:	e0 5c       	subi	r30, 0xC0	; 192
    3d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d30:	11 82       	std	Z+1, r1	; 0x01
    3d32:	10 82       	st	Z, r1
    3d34:	af c0       	rjmp	.+350    	; 0x3e94 <STEP_MOTORu8StartHalfMode+0x71a>
			{
				con1 = 0x08;
    3d36:	88 e0       	ldi	r24, 0x08	; 8
    3d38:	8a af       	std	Y+58, r24	; 0x3a
				con2 = 0x0c;
    3d3a:	8c e0       	ldi	r24, 0x0C	; 12
    3d3c:	89 af       	std	Y+57, r24	; 0x39
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3d3e:	81 e0       	ldi	r24, 0x01	; 1
    3d40:	8b af       	std	Y+59, r24	; 0x3b
    3d42:	98 c0       	rjmp	.+304    	; 0x3e74 <STEP_MOTORu8StartHalfMode+0x6fa>
				{

					if(Local_u8ItrateStep%2==1)
    3d44:	8b ad       	ldd	r24, Y+59	; 0x3b
    3d46:	88 2f       	mov	r24, r24
    3d48:	90 e0       	ldi	r25, 0x00	; 0
    3d4a:	81 70       	andi	r24, 0x01	; 1
    3d4c:	90 70       	andi	r25, 0x00	; 0
    3d4e:	88 23       	and	r24, r24
    3d50:	71 f0       	breq	.+28     	; 0x3d6e <STEP_MOTORu8StartHalfMode+0x5f4>
					{
						DIO_u8SetHighNibbleValue(Copy_pStep->Port,con1);
    3d52:	fe 01       	movw	r30, r28
    3d54:	ed 5b       	subi	r30, 0xBD	; 189
    3d56:	ff 4f       	sbci	r31, 0xFF	; 255
    3d58:	01 90       	ld	r0, Z+
    3d5a:	f0 81       	ld	r31, Z
    3d5c:	e0 2d       	mov	r30, r0
    3d5e:	80 81       	ld	r24, Z
    3d60:	6a ad       	ldd	r22, Y+58	; 0x3a
    3d62:	0e 94 25 13 	call	0x264a	; 0x264a <DIO_u8SetHighNibbleValue>
						con1>>=1;
    3d66:	8a ad       	ldd	r24, Y+58	; 0x3a
    3d68:	86 95       	lsr	r24
    3d6a:	8a af       	std	Y+58, r24	; 0x3a
    3d6c:	0e c0       	rjmp	.+28     	; 0x3d8a <STEP_MOTORu8StartHalfMode+0x610>
					}
					else
					{
						DIO_u8SetHighNibbleValue(Copy_pStep->Port,con2);
    3d6e:	fe 01       	movw	r30, r28
    3d70:	ed 5b       	subi	r30, 0xBD	; 189
    3d72:	ff 4f       	sbci	r31, 0xFF	; 255
    3d74:	01 90       	ld	r0, Z+
    3d76:	f0 81       	ld	r31, Z
    3d78:	e0 2d       	mov	r30, r0
    3d7a:	80 81       	ld	r24, Z
    3d7c:	69 ad       	ldd	r22, Y+57	; 0x39
    3d7e:	0e 94 25 13 	call	0x264a	; 0x264a <DIO_u8SetHighNibbleValue>
						con2 = RotateRightLowNibble(con2);
    3d82:	89 ad       	ldd	r24, Y+57	; 0x39
    3d84:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <RotateRightLowNibble>
    3d88:	89 af       	std	Y+57, r24	; 0x39
    3d8a:	80 e0       	ldi	r24, 0x00	; 0
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	a0 e0       	ldi	r26, 0x00	; 0
    3d90:	b0 e4       	ldi	r27, 0x40	; 64
    3d92:	8b 87       	std	Y+11, r24	; 0x0b
    3d94:	9c 87       	std	Y+12, r25	; 0x0c
    3d96:	ad 87       	std	Y+13, r26	; 0x0d
    3d98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3da0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3da2:	20 e0       	ldi	r18, 0x00	; 0
    3da4:	30 e0       	ldi	r19, 0x00	; 0
    3da6:	4a ef       	ldi	r20, 0xFA	; 250
    3da8:	54 e4       	ldi	r21, 0x44	; 68
    3daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dae:	dc 01       	movw	r26, r24
    3db0:	cb 01       	movw	r24, r22
    3db2:	8f 83       	std	Y+7, r24	; 0x07
    3db4:	98 87       	std	Y+8, r25	; 0x08
    3db6:	a9 87       	std	Y+9, r26	; 0x09
    3db8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3dba:	6f 81       	ldd	r22, Y+7	; 0x07
    3dbc:	78 85       	ldd	r23, Y+8	; 0x08
    3dbe:	89 85       	ldd	r24, Y+9	; 0x09
    3dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dc2:	20 e0       	ldi	r18, 0x00	; 0
    3dc4:	30 e0       	ldi	r19, 0x00	; 0
    3dc6:	40 e8       	ldi	r20, 0x80	; 128
    3dc8:	5f e3       	ldi	r21, 0x3F	; 63
    3dca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3dce:	88 23       	and	r24, r24
    3dd0:	2c f4       	brge	.+10     	; 0x3ddc <STEP_MOTORu8StartHalfMode+0x662>
		__ticks = 1;
    3dd2:	81 e0       	ldi	r24, 0x01	; 1
    3dd4:	90 e0       	ldi	r25, 0x00	; 0
    3dd6:	9e 83       	std	Y+6, r25	; 0x06
    3dd8:	8d 83       	std	Y+5, r24	; 0x05
    3dda:	3f c0       	rjmp	.+126    	; 0x3e5a <STEP_MOTORu8StartHalfMode+0x6e0>
	else if (__tmp > 65535)
    3ddc:	6f 81       	ldd	r22, Y+7	; 0x07
    3dde:	78 85       	ldd	r23, Y+8	; 0x08
    3de0:	89 85       	ldd	r24, Y+9	; 0x09
    3de2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3de4:	20 e0       	ldi	r18, 0x00	; 0
    3de6:	3f ef       	ldi	r19, 0xFF	; 255
    3de8:	4f e7       	ldi	r20, 0x7F	; 127
    3dea:	57 e4       	ldi	r21, 0x47	; 71
    3dec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3df0:	18 16       	cp	r1, r24
    3df2:	4c f5       	brge	.+82     	; 0x3e46 <STEP_MOTORu8StartHalfMode+0x6cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3df4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3df6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3df8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dfa:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dfc:	20 e0       	ldi	r18, 0x00	; 0
    3dfe:	30 e0       	ldi	r19, 0x00	; 0
    3e00:	40 e2       	ldi	r20, 0x20	; 32
    3e02:	51 e4       	ldi	r21, 0x41	; 65
    3e04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e08:	dc 01       	movw	r26, r24
    3e0a:	cb 01       	movw	r24, r22
    3e0c:	bc 01       	movw	r22, r24
    3e0e:	cd 01       	movw	r24, r26
    3e10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e14:	dc 01       	movw	r26, r24
    3e16:	cb 01       	movw	r24, r22
    3e18:	9e 83       	std	Y+6, r25	; 0x06
    3e1a:	8d 83       	std	Y+5, r24	; 0x05
    3e1c:	0f c0       	rjmp	.+30     	; 0x3e3c <STEP_MOTORu8StartHalfMode+0x6c2>
    3e1e:	88 ec       	ldi	r24, 0xC8	; 200
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	9c 83       	std	Y+4, r25	; 0x04
    3e24:	8b 83       	std	Y+3, r24	; 0x03
    3e26:	8b 81       	ldd	r24, Y+3	; 0x03
    3e28:	9c 81       	ldd	r25, Y+4	; 0x04
    3e2a:	01 97       	sbiw	r24, 0x01	; 1
    3e2c:	f1 f7       	brne	.-4      	; 0x3e2a <STEP_MOTORu8StartHalfMode+0x6b0>
    3e2e:	9c 83       	std	Y+4, r25	; 0x04
    3e30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e32:	8d 81       	ldd	r24, Y+5	; 0x05
    3e34:	9e 81       	ldd	r25, Y+6	; 0x06
    3e36:	01 97       	sbiw	r24, 0x01	; 1
    3e38:	9e 83       	std	Y+6, r25	; 0x06
    3e3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e3c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e3e:	9e 81       	ldd	r25, Y+6	; 0x06
    3e40:	00 97       	sbiw	r24, 0x00	; 0
    3e42:	69 f7       	brne	.-38     	; 0x3e1e <STEP_MOTORu8StartHalfMode+0x6a4>
    3e44:	14 c0       	rjmp	.+40     	; 0x3e6e <STEP_MOTORu8StartHalfMode+0x6f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e46:	6f 81       	ldd	r22, Y+7	; 0x07
    3e48:	78 85       	ldd	r23, Y+8	; 0x08
    3e4a:	89 85       	ldd	r24, Y+9	; 0x09
    3e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e52:	dc 01       	movw	r26, r24
    3e54:	cb 01       	movw	r24, r22
    3e56:	9e 83       	std	Y+6, r25	; 0x06
    3e58:	8d 83       	std	Y+5, r24	; 0x05
    3e5a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e5c:	9e 81       	ldd	r25, Y+6	; 0x06
    3e5e:	9a 83       	std	Y+2, r25	; 0x02
    3e60:	89 83       	std	Y+1, r24	; 0x01
    3e62:	89 81       	ldd	r24, Y+1	; 0x01
    3e64:	9a 81       	ldd	r25, Y+2	; 0x02
    3e66:	01 97       	sbiw	r24, 0x01	; 1
    3e68:	f1 f7       	brne	.-4      	; 0x3e66 <STEP_MOTORu8StartHalfMode+0x6ec>
    3e6a:	9a 83       	std	Y+2, r25	; 0x02
    3e6c:	89 83       	std	Y+1, r24	; 0x01

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				con1 = 0x08;
				con2 = 0x0c;
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3e6e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3e70:	8f 5f       	subi	r24, 0xFF	; 255
    3e72:	8b af       	std	Y+59, r24	; 0x3b
    3e74:	8b ad       	ldd	r24, Y+59	; 0x3b
    3e76:	89 30       	cpi	r24, 0x09	; 9
    3e78:	08 f4       	brcc	.+2      	; 0x3e7c <STEP_MOTORu8StartHalfMode+0x702>
    3e7a:	64 cf       	rjmp	.-312    	; 0x3d44 <STEP_MOTORu8StartHalfMode+0x5ca>
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3e7c:	de 01       	movw	r26, r28
    3e7e:	a0 5c       	subi	r26, 0xC0	; 192
    3e80:	bf 4f       	sbci	r27, 0xFF	; 255
    3e82:	fe 01       	movw	r30, r28
    3e84:	e0 5c       	subi	r30, 0xC0	; 192
    3e86:	ff 4f       	sbci	r31, 0xFF	; 255
    3e88:	80 81       	ld	r24, Z
    3e8a:	91 81       	ldd	r25, Z+1	; 0x01
    3e8c:	01 96       	adiw	r24, 0x01	; 1
    3e8e:	11 96       	adiw	r26, 0x01	; 1
    3e90:	9c 93       	st	X, r25
    3e92:	8e 93       	st	-X, r24
    3e94:	fe 01       	movw	r30, r28
    3e96:	e0 5c       	subi	r30, 0xC0	; 192
    3e98:	ff 4f       	sbci	r31, 0xFF	; 255
    3e9a:	20 81       	ld	r18, Z
    3e9c:	31 81       	ldd	r19, Z+1	; 0x01
    3e9e:	8c ad       	ldd	r24, Y+60	; 0x3c
    3ea0:	9d ad       	ldd	r25, Y+61	; 0x3d
    3ea2:	28 17       	cp	r18, r24
    3ea4:	39 07       	cpc	r19, r25
    3ea6:	08 f4       	brcc	.+2      	; 0x3eaa <STEP_MOTORu8StartHalfMode+0x730>
    3ea8:	46 cf       	rjmp	.-372    	; 0x3d36 <STEP_MOTORu8StartHalfMode+0x5bc>
    3eaa:	0b c0       	rjmp	.+22     	; 0x3ec2 <STEP_MOTORu8StartHalfMode+0x748>
					_delay_ms(2);
				}
			}
		}
		else
			Local_u8ErrorState = NOTOK;
    3eac:	fe 01       	movw	r30, r28
    3eae:	ee 5b       	subi	r30, 0xBE	; 190
    3eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb2:	81 e0       	ldi	r24, 0x01	; 1
    3eb4:	80 83       	st	Z, r24
    3eb6:	05 c0       	rjmp	.+10     	; 0x3ec2 <STEP_MOTORu8StartHalfMode+0x748>
	}
	else
		Local_u8ErrorState = NOTOK;
    3eb8:	fe 01       	movw	r30, r28
    3eba:	ee 5b       	subi	r30, 0xBE	; 190
    3ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ebe:	81 e0       	ldi	r24, 0x01	; 1
    3ec0:	80 83       	st	Z, r24
	return Local_u8ErrorState;
    3ec2:	fe 01       	movw	r30, r28
    3ec4:	ee 5b       	subi	r30, 0xBE	; 190
    3ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec8:	80 81       	ld	r24, Z
}
    3eca:	cc 5b       	subi	r28, 0xBC	; 188
    3ecc:	df 4f       	sbci	r29, 0xFF	; 255
    3ece:	0f b6       	in	r0, 0x3f	; 63
    3ed0:	f8 94       	cli
    3ed2:	de bf       	out	0x3e, r29	; 62
    3ed4:	0f be       	out	0x3f, r0	; 63
    3ed6:	cd bf       	out	0x3d, r28	; 61
    3ed8:	cf 91       	pop	r28
    3eda:	df 91       	pop	r29
    3edc:	08 95       	ret

00003ede <STEP_MOTORvStop>:

void STEP_MOTORvStop(STEP_t *Copy_pStep)
{
    3ede:	df 93       	push	r29
    3ee0:	cf 93       	push	r28
    3ee2:	00 d0       	rcall	.+0      	; 0x3ee4 <STEP_MOTORvStop+0x6>
    3ee4:	cd b7       	in	r28, 0x3d	; 61
    3ee6:	de b7       	in	r29, 0x3e	; 62
    3ee8:	9a 83       	std	Y+2, r25	; 0x02
    3eea:	89 83       	std	Y+1, r24	; 0x01
	if(STEP_LOWER_NIBBLE == Copy_pStep->Nibble)
    3eec:	e9 81       	ldd	r30, Y+1	; 0x01
    3eee:	fa 81       	ldd	r31, Y+2	; 0x02
    3ef0:	81 81       	ldd	r24, Z+1	; 0x01
    3ef2:	88 23       	and	r24, r24
    3ef4:	39 f4       	brne	.+14     	; 0x3f04 <STEP_MOTORvStop+0x26>
	{
		DIO_u8SetLowNibbleValue(Copy_pStep->Port,0);
    3ef6:	e9 81       	ldd	r30, Y+1	; 0x01
    3ef8:	fa 81       	ldd	r31, Y+2	; 0x02
    3efa:	80 81       	ld	r24, Z
    3efc:	60 e0       	ldi	r22, 0x00	; 0
    3efe:	0e 94 aa 12 	call	0x2554	; 0x2554 <DIO_u8SetLowNibbleValue>
    3f02:	0b c0       	rjmp	.+22     	; 0x3f1a <STEP_MOTORvStop+0x3c>
	}
	else if(STEP_UPPER_NIBBLE == Copy_pStep->Nibble)
    3f04:	e9 81       	ldd	r30, Y+1	; 0x01
    3f06:	fa 81       	ldd	r31, Y+2	; 0x02
    3f08:	81 81       	ldd	r24, Z+1	; 0x01
    3f0a:	81 30       	cpi	r24, 0x01	; 1
    3f0c:	31 f4       	brne	.+12     	; 0x3f1a <STEP_MOTORvStop+0x3c>
	{
		DIO_u8SetHighNibbleValue(Copy_pStep->Port,0);
    3f0e:	e9 81       	ldd	r30, Y+1	; 0x01
    3f10:	fa 81       	ldd	r31, Y+2	; 0x02
    3f12:	80 81       	ld	r24, Z
    3f14:	60 e0       	ldi	r22, 0x00	; 0
    3f16:	0e 94 25 13 	call	0x264a	; 0x264a <DIO_u8SetHighNibbleValue>
	}
}
    3f1a:	0f 90       	pop	r0
    3f1c:	0f 90       	pop	r0
    3f1e:	cf 91       	pop	r28
    3f20:	df 91       	pop	r29
    3f22:	08 95       	ret

00003f24 <RotateRightLowNibble>:


static u8 RotateRightLowNibble(u8 Val)
{
    3f24:	df 93       	push	r29
    3f26:	cf 93       	push	r28
    3f28:	00 d0       	rcall	.+0      	; 0x3f2a <RotateRightLowNibble+0x6>
    3f2a:	cd b7       	in	r28, 0x3d	; 61
    3f2c:	de b7       	in	r29, 0x3e	; 62
    3f2e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_xVal = 0;
    3f30:	19 82       	std	Y+1, r1	; 0x01
	Local_xVal = GET_BIT(Val,0);
    3f32:	8a 81       	ldd	r24, Y+2	; 0x02
    3f34:	81 70       	andi	r24, 0x01	; 1
    3f36:	89 83       	std	Y+1, r24	; 0x01
	Val>>=1;
    3f38:	8a 81       	ldd	r24, Y+2	; 0x02
    3f3a:	86 95       	lsr	r24
    3f3c:	8a 83       	std	Y+2, r24	; 0x02
	Local_xVal?SET_BIT(Val,3):CLR_BIT(Val,3);
    3f3e:	89 81       	ldd	r24, Y+1	; 0x01
    3f40:	88 23       	and	r24, r24
    3f42:	21 f0       	breq	.+8      	; 0x3f4c <RotateRightLowNibble+0x28>
    3f44:	8a 81       	ldd	r24, Y+2	; 0x02
    3f46:	88 60       	ori	r24, 0x08	; 8
    3f48:	8a 83       	std	Y+2, r24	; 0x02
    3f4a:	03 c0       	rjmp	.+6      	; 0x3f52 <RotateRightLowNibble+0x2e>
    3f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f4e:	87 7f       	andi	r24, 0xF7	; 247
    3f50:	8a 83       	std	Y+2, r24	; 0x02
	return Val;
    3f52:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3f54:	0f 90       	pop	r0
    3f56:	0f 90       	pop	r0
    3f58:	cf 91       	pop	r28
    3f5a:	df 91       	pop	r29
    3f5c:	08 95       	ret

00003f5e <RotateLeftLowNibble>:

static u8 RotateLeftLowNibble(u8 Val)
{
    3f5e:	df 93       	push	r29
    3f60:	cf 93       	push	r28
    3f62:	00 d0       	rcall	.+0      	; 0x3f64 <RotateLeftLowNibble+0x6>
    3f64:	cd b7       	in	r28, 0x3d	; 61
    3f66:	de b7       	in	r29, 0x3e	; 62
    3f68:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_xVal = 0;
    3f6a:	19 82       	std	Y+1, r1	; 0x01
	Local_xVal = GET_BIT(Val,3);
    3f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f6e:	86 95       	lsr	r24
    3f70:	86 95       	lsr	r24
    3f72:	86 95       	lsr	r24
    3f74:	81 70       	andi	r24, 0x01	; 1
    3f76:	89 83       	std	Y+1, r24	; 0x01
	Val<<=1;
    3f78:	8a 81       	ldd	r24, Y+2	; 0x02
    3f7a:	88 0f       	add	r24, r24
    3f7c:	8a 83       	std	Y+2, r24	; 0x02
	Local_xVal?SET_BIT(Val,0):CLR_BIT(Val,0);
    3f7e:	89 81       	ldd	r24, Y+1	; 0x01
    3f80:	88 23       	and	r24, r24
    3f82:	21 f0       	breq	.+8      	; 0x3f8c <RotateLeftLowNibble+0x2e>
    3f84:	8a 81       	ldd	r24, Y+2	; 0x02
    3f86:	81 60       	ori	r24, 0x01	; 1
    3f88:	8a 83       	std	Y+2, r24	; 0x02
    3f8a:	03 c0       	rjmp	.+6      	; 0x3f92 <RotateLeftLowNibble+0x34>
    3f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f8e:	8e 7f       	andi	r24, 0xFE	; 254
    3f90:	8a 83       	std	Y+2, r24	; 0x02
	return Val;
    3f92:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3f94:	0f 90       	pop	r0
    3f96:	0f 90       	pop	r0
    3f98:	cf 91       	pop	r28
    3f9a:	df 91       	pop	r29
    3f9c:	08 95       	ret

00003f9e <SW_u8GetState>:
 * 			Copy_SW     : Full with Port,Pin,SelfType,switch function
 * 			Copy_u8State: return State of switch as (0) Pressed , (1) Not pressed
 * use for: Get Switch by delay debouncing of switch as (0) Pressed , (1) Not pressed
 *  */
u8 SW_u8GetState(SW_t* Copy_SW,u8 *Copy_u8State)
{
    3f9e:	df 93       	push	r29
    3fa0:	cf 93       	push	r28
    3fa2:	cd b7       	in	r28, 0x3d	; 61
    3fa4:	de b7       	in	r29, 0x3e	; 62
    3fa6:	a1 97       	sbiw	r28, 0x21	; 33
    3fa8:	0f b6       	in	r0, 0x3f	; 63
    3faa:	f8 94       	cli
    3fac:	de bf       	out	0x3e, r29	; 62
    3fae:	0f be       	out	0x3f, r0	; 63
    3fb0:	cd bf       	out	0x3d, r28	; 61
    3fb2:	9f 8f       	std	Y+31, r25	; 0x1f
    3fb4:	8e 8f       	std	Y+30, r24	; 0x1e
    3fb6:	79 a3       	std	Y+33, r23	; 0x21
    3fb8:	68 a3       	std	Y+32, r22	; 0x20
	u8 Local_u8ErrorState = OK;
    3fba:	1d 8e       	std	Y+29, r1	; 0x1d
	//static u8 pressed_conf_level = 0;
	//static u8 released_conf_level = 0;
	//static u8 pressed = 0;
	//static u8 pressed2 = 0;
	*Copy_u8State = SW_NOT_PRESSED;
    3fbc:	e8 a1       	ldd	r30, Y+32	; 0x20
    3fbe:	f9 a1       	ldd	r31, Y+33	; 0x21
    3fc0:	81 e0       	ldi	r24, 0x01	; 1
    3fc2:	80 83       	st	Z, r24
	static u8 Local_u8SwState;
	if(Copy_SW->Pulltype == SW_PULL_UP)
    3fc4:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3fc6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3fc8:	82 81       	ldd	r24, Z+2	; 0x02
    3fca:	88 23       	and	r24, r24
    3fcc:	09 f0       	breq	.+2      	; 0x3fd0 <SW_u8GetState+0x32>
    3fce:	c3 c0       	rjmp	.+390    	; 0x4156 <SW_u8GetState+0x1b8>
	{
		if(Copy_SW->SelfLockType == SW_SELF_LOCK)
    3fd0:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3fd2:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3fd4:	83 81       	ldd	r24, Z+3	; 0x03
    3fd6:	81 30       	cpi	r24, 0x01	; 1
    3fd8:	09 f0       	breq	.+2      	; 0x3fdc <SW_u8GetState+0x3e>
    3fda:	9c c0       	rjmp	.+312    	; 0x4114 <SW_u8GetState+0x176>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    3fdc:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3fde:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3fe0:	80 81       	ld	r24, Z
    3fe2:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3fe4:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3fe6:	91 81       	ldd	r25, Z+1	; 0x01
    3fe8:	2e e1       	ldi	r18, 0x1E	; 30
    3fea:	33 e0       	ldi	r19, 0x03	; 3
    3fec:	69 2f       	mov	r22, r25
    3fee:	a9 01       	movw	r20, r18
    3ff0:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_u8GetPinValue>
			if(Local_u8SwState == DIO_PIN_LOW)
    3ff4:	80 91 1e 03 	lds	r24, 0x031E
    3ff8:	88 23       	and	r24, r24
    3ffa:	09 f0       	breq	.+2      	; 0x3ffe <SW_u8GetState+0x60>
    3ffc:	6d c1       	rjmp	.+730    	; 0x42d8 <SW_u8GetState+0x33a>
    3ffe:	80 e0       	ldi	r24, 0x00	; 0
    4000:	90 e0       	ldi	r25, 0x00	; 0
    4002:	a6 e1       	ldi	r26, 0x16	; 22
    4004:	b3 e4       	ldi	r27, 0x43	; 67
    4006:	89 8f       	std	Y+25, r24	; 0x19
    4008:	9a 8f       	std	Y+26, r25	; 0x1a
    400a:	ab 8f       	std	Y+27, r26	; 0x1b
    400c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    400e:	69 8d       	ldd	r22, Y+25	; 0x19
    4010:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4012:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4014:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4016:	20 e0       	ldi	r18, 0x00	; 0
    4018:	30 e0       	ldi	r19, 0x00	; 0
    401a:	4a ef       	ldi	r20, 0xFA	; 250
    401c:	54 e4       	ldi	r21, 0x44	; 68
    401e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4022:	dc 01       	movw	r26, r24
    4024:	cb 01       	movw	r24, r22
    4026:	8d 8b       	std	Y+21, r24	; 0x15
    4028:	9e 8b       	std	Y+22, r25	; 0x16
    402a:	af 8b       	std	Y+23, r26	; 0x17
    402c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    402e:	6d 89       	ldd	r22, Y+21	; 0x15
    4030:	7e 89       	ldd	r23, Y+22	; 0x16
    4032:	8f 89       	ldd	r24, Y+23	; 0x17
    4034:	98 8d       	ldd	r25, Y+24	; 0x18
    4036:	20 e0       	ldi	r18, 0x00	; 0
    4038:	30 e0       	ldi	r19, 0x00	; 0
    403a:	40 e8       	ldi	r20, 0x80	; 128
    403c:	5f e3       	ldi	r21, 0x3F	; 63
    403e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4042:	88 23       	and	r24, r24
    4044:	2c f4       	brge	.+10     	; 0x4050 <SW_u8GetState+0xb2>
		__ticks = 1;
    4046:	81 e0       	ldi	r24, 0x01	; 1
    4048:	90 e0       	ldi	r25, 0x00	; 0
    404a:	9c 8b       	std	Y+20, r25	; 0x14
    404c:	8b 8b       	std	Y+19, r24	; 0x13
    404e:	3f c0       	rjmp	.+126    	; 0x40ce <SW_u8GetState+0x130>
	else if (__tmp > 65535)
    4050:	6d 89       	ldd	r22, Y+21	; 0x15
    4052:	7e 89       	ldd	r23, Y+22	; 0x16
    4054:	8f 89       	ldd	r24, Y+23	; 0x17
    4056:	98 8d       	ldd	r25, Y+24	; 0x18
    4058:	20 e0       	ldi	r18, 0x00	; 0
    405a:	3f ef       	ldi	r19, 0xFF	; 255
    405c:	4f e7       	ldi	r20, 0x7F	; 127
    405e:	57 e4       	ldi	r21, 0x47	; 71
    4060:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4064:	18 16       	cp	r1, r24
    4066:	4c f5       	brge	.+82     	; 0x40ba <SW_u8GetState+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4068:	69 8d       	ldd	r22, Y+25	; 0x19
    406a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    406c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    406e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4070:	20 e0       	ldi	r18, 0x00	; 0
    4072:	30 e0       	ldi	r19, 0x00	; 0
    4074:	40 e2       	ldi	r20, 0x20	; 32
    4076:	51 e4       	ldi	r21, 0x41	; 65
    4078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    407c:	dc 01       	movw	r26, r24
    407e:	cb 01       	movw	r24, r22
    4080:	bc 01       	movw	r22, r24
    4082:	cd 01       	movw	r24, r26
    4084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4088:	dc 01       	movw	r26, r24
    408a:	cb 01       	movw	r24, r22
    408c:	9c 8b       	std	Y+20, r25	; 0x14
    408e:	8b 8b       	std	Y+19, r24	; 0x13
    4090:	0f c0       	rjmp	.+30     	; 0x40b0 <SW_u8GetState+0x112>
    4092:	88 ec       	ldi	r24, 0xC8	; 200
    4094:	90 e0       	ldi	r25, 0x00	; 0
    4096:	9a 8b       	std	Y+18, r25	; 0x12
    4098:	89 8b       	std	Y+17, r24	; 0x11
    409a:	89 89       	ldd	r24, Y+17	; 0x11
    409c:	9a 89       	ldd	r25, Y+18	; 0x12
    409e:	01 97       	sbiw	r24, 0x01	; 1
    40a0:	f1 f7       	brne	.-4      	; 0x409e <SW_u8GetState+0x100>
    40a2:	9a 8b       	std	Y+18, r25	; 0x12
    40a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40a6:	8b 89       	ldd	r24, Y+19	; 0x13
    40a8:	9c 89       	ldd	r25, Y+20	; 0x14
    40aa:	01 97       	sbiw	r24, 0x01	; 1
    40ac:	9c 8b       	std	Y+20, r25	; 0x14
    40ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40b0:	8b 89       	ldd	r24, Y+19	; 0x13
    40b2:	9c 89       	ldd	r25, Y+20	; 0x14
    40b4:	00 97       	sbiw	r24, 0x00	; 0
    40b6:	69 f7       	brne	.-38     	; 0x4092 <SW_u8GetState+0xf4>
    40b8:	14 c0       	rjmp	.+40     	; 0x40e2 <SW_u8GetState+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40ba:	6d 89       	ldd	r22, Y+21	; 0x15
    40bc:	7e 89       	ldd	r23, Y+22	; 0x16
    40be:	8f 89       	ldd	r24, Y+23	; 0x17
    40c0:	98 8d       	ldd	r25, Y+24	; 0x18
    40c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40c6:	dc 01       	movw	r26, r24
    40c8:	cb 01       	movw	r24, r22
    40ca:	9c 8b       	std	Y+20, r25	; 0x14
    40cc:	8b 8b       	std	Y+19, r24	; 0x13
    40ce:	8b 89       	ldd	r24, Y+19	; 0x13
    40d0:	9c 89       	ldd	r25, Y+20	; 0x14
    40d2:	98 8b       	std	Y+16, r25	; 0x10
    40d4:	8f 87       	std	Y+15, r24	; 0x0f
    40d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    40d8:	98 89       	ldd	r25, Y+16	; 0x10
    40da:	01 97       	sbiw	r24, 0x01	; 1
    40dc:	f1 f7       	brne	.-4      	; 0x40da <SW_u8GetState+0x13c>
    40de:	98 8b       	std	Y+16, r25	; 0x10
    40e0:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(150);
				DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    40e2:	ee 8d       	ldd	r30, Y+30	; 0x1e
    40e4:	ff 8d       	ldd	r31, Y+31	; 0x1f
    40e6:	80 81       	ld	r24, Z
    40e8:	ee 8d       	ldd	r30, Y+30	; 0x1e
    40ea:	ff 8d       	ldd	r31, Y+31	; 0x1f
    40ec:	91 81       	ldd	r25, Z+1	; 0x01
    40ee:	2e e1       	ldi	r18, 0x1E	; 30
    40f0:	33 e0       	ldi	r19, 0x03	; 3
    40f2:	69 2f       	mov	r22, r25
    40f4:	a9 01       	movw	r20, r18
    40f6:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_u8GetPinValue>
				if(Local_u8SwState == DIO_PIN_LOW )
    40fa:	80 91 1e 03 	lds	r24, 0x031E
    40fe:	88 23       	and	r24, r24
    4100:	21 f4       	brne	.+8      	; 0x410a <SW_u8GetState+0x16c>
				{
					*Copy_u8State = SW_PRESSED;
    4102:	e8 a1       	ldd	r30, Y+32	; 0x20
    4104:	f9 a1       	ldd	r31, Y+33	; 0x21
    4106:	10 82       	st	Z, r1
    4108:	e7 c0       	rjmp	.+462    	; 0x42d8 <SW_u8GetState+0x33a>
				}
				else
				{
					*Copy_u8State = SW_NOT_PRESSED;
    410a:	e8 a1       	ldd	r30, Y+32	; 0x20
    410c:	f9 a1       	ldd	r31, Y+33	; 0x21
    410e:	81 e0       	ldi	r24, 0x01	; 1
    4110:	80 83       	st	Z, r24
    4112:	e2 c0       	rjmp	.+452    	; 0x42d8 <SW_u8GetState+0x33a>
				}
			}
		}
		else if(Copy_SW->SelfLockType == SW_NOT_SELF_LOCK)
    4114:	ee 8d       	ldd	r30, Y+30	; 0x1e
    4116:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4118:	83 81       	ldd	r24, Z+3	; 0x03
    411a:	88 23       	and	r24, r24
    411c:	c9 f4       	brne	.+50     	; 0x4150 <SW_u8GetState+0x1b2>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,Copy_u8State);
    411e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    4120:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4122:	80 81       	ld	r24, Z
    4124:	ee 8d       	ldd	r30, Y+30	; 0x1e
    4126:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4128:	91 81       	ldd	r25, Z+1	; 0x01
    412a:	28 a1       	ldd	r18, Y+32	; 0x20
    412c:	39 a1       	ldd	r19, Y+33	; 0x21
    412e:	69 2f       	mov	r22, r25
    4130:	a9 01       	movw	r20, r18
    4132:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_u8GetPinValue>
			if (Local_u8SwState == DIO_PIN_LOW)
    4136:	80 91 1e 03 	lds	r24, 0x031E
    413a:	88 23       	and	r24, r24
    413c:	21 f4       	brne	.+8      	; 0x4146 <SW_u8GetState+0x1a8>
				*Copy_u8State = SW_PRESSED;
    413e:	e8 a1       	ldd	r30, Y+32	; 0x20
    4140:	f9 a1       	ldd	r31, Y+33	; 0x21
    4142:	10 82       	st	Z, r1
    4144:	c9 c0       	rjmp	.+402    	; 0x42d8 <SW_u8GetState+0x33a>
			else
				*Copy_u8State = SW_NOT_PRESSED;
    4146:	e8 a1       	ldd	r30, Y+32	; 0x20
    4148:	f9 a1       	ldd	r31, Y+33	; 0x21
    414a:	81 e0       	ldi	r24, 0x01	; 1
    414c:	80 83       	st	Z, r24
    414e:	c4 c0       	rjmp	.+392    	; 0x42d8 <SW_u8GetState+0x33a>
		}
		else
			Local_u8ErrorState = NOTOK;
    4150:	81 e0       	ldi	r24, 0x01	; 1
    4152:	8d 8f       	std	Y+29, r24	; 0x1d
    4154:	c1 c0       	rjmp	.+386    	; 0x42d8 <SW_u8GetState+0x33a>
	}
	else if(Copy_SW->Pulltype == SW_PULL_DOWN)
    4156:	ee 8d       	ldd	r30, Y+30	; 0x1e
    4158:	ff 8d       	ldd	r31, Y+31	; 0x1f
    415a:	82 81       	ldd	r24, Z+2	; 0x02
    415c:	81 30       	cpi	r24, 0x01	; 1
    415e:	09 f0       	breq	.+2      	; 0x4162 <SW_u8GetState+0x1c4>
    4160:	b9 c0       	rjmp	.+370    	; 0x42d4 <SW_u8GetState+0x336>
	{

		if(Copy_SW->SelfLockType == SW_SELF_LOCK)
    4162:	ee 8d       	ldd	r30, Y+30	; 0x1e
    4164:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4166:	83 81       	ldd	r24, Z+3	; 0x03
    4168:	81 30       	cpi	r24, 0x01	; 1
    416a:	09 f0       	breq	.+2      	; 0x416e <SW_u8GetState+0x1d0>
    416c:	97 c0       	rjmp	.+302    	; 0x429c <SW_u8GetState+0x2fe>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    416e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    4170:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4172:	80 81       	ld	r24, Z
    4174:	ee 8d       	ldd	r30, Y+30	; 0x1e
    4176:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4178:	91 81       	ldd	r25, Z+1	; 0x01
    417a:	2e e1       	ldi	r18, 0x1E	; 30
    417c:	33 e0       	ldi	r19, 0x03	; 3
    417e:	69 2f       	mov	r22, r25
    4180:	a9 01       	movw	r20, r18
    4182:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_u8GetPinValue>
			if(Local_u8SwState == DIO_PIN_HIGH)
    4186:	80 91 1e 03 	lds	r24, 0x031E
    418a:	81 30       	cpi	r24, 0x01	; 1
    418c:	09 f0       	breq	.+2      	; 0x4190 <SW_u8GetState+0x1f2>
    418e:	a4 c0       	rjmp	.+328    	; 0x42d8 <SW_u8GetState+0x33a>
    4190:	80 e0       	ldi	r24, 0x00	; 0
    4192:	90 e0       	ldi	r25, 0x00	; 0
    4194:	a6 e1       	ldi	r26, 0x16	; 22
    4196:	b3 e4       	ldi	r27, 0x43	; 67
    4198:	8b 87       	std	Y+11, r24	; 0x0b
    419a:	9c 87       	std	Y+12, r25	; 0x0c
    419c:	ad 87       	std	Y+13, r26	; 0x0d
    419e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    41a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    41a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    41a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    41a8:	20 e0       	ldi	r18, 0x00	; 0
    41aa:	30 e0       	ldi	r19, 0x00	; 0
    41ac:	4a ef       	ldi	r20, 0xFA	; 250
    41ae:	54 e4       	ldi	r21, 0x44	; 68
    41b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41b4:	dc 01       	movw	r26, r24
    41b6:	cb 01       	movw	r24, r22
    41b8:	8f 83       	std	Y+7, r24	; 0x07
    41ba:	98 87       	std	Y+8, r25	; 0x08
    41bc:	a9 87       	std	Y+9, r26	; 0x09
    41be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41c0:	6f 81       	ldd	r22, Y+7	; 0x07
    41c2:	78 85       	ldd	r23, Y+8	; 0x08
    41c4:	89 85       	ldd	r24, Y+9	; 0x09
    41c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    41c8:	20 e0       	ldi	r18, 0x00	; 0
    41ca:	30 e0       	ldi	r19, 0x00	; 0
    41cc:	40 e8       	ldi	r20, 0x80	; 128
    41ce:	5f e3       	ldi	r21, 0x3F	; 63
    41d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41d4:	88 23       	and	r24, r24
    41d6:	2c f4       	brge	.+10     	; 0x41e2 <SW_u8GetState+0x244>
		__ticks = 1;
    41d8:	81 e0       	ldi	r24, 0x01	; 1
    41da:	90 e0       	ldi	r25, 0x00	; 0
    41dc:	9e 83       	std	Y+6, r25	; 0x06
    41de:	8d 83       	std	Y+5, r24	; 0x05
    41e0:	3f c0       	rjmp	.+126    	; 0x4260 <SW_u8GetState+0x2c2>
	else if (__tmp > 65535)
    41e2:	6f 81       	ldd	r22, Y+7	; 0x07
    41e4:	78 85       	ldd	r23, Y+8	; 0x08
    41e6:	89 85       	ldd	r24, Y+9	; 0x09
    41e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    41ea:	20 e0       	ldi	r18, 0x00	; 0
    41ec:	3f ef       	ldi	r19, 0xFF	; 255
    41ee:	4f e7       	ldi	r20, 0x7F	; 127
    41f0:	57 e4       	ldi	r21, 0x47	; 71
    41f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41f6:	18 16       	cp	r1, r24
    41f8:	4c f5       	brge	.+82     	; 0x424c <SW_u8GetState+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    41fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    41fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    4200:	9e 85       	ldd	r25, Y+14	; 0x0e
    4202:	20 e0       	ldi	r18, 0x00	; 0
    4204:	30 e0       	ldi	r19, 0x00	; 0
    4206:	40 e2       	ldi	r20, 0x20	; 32
    4208:	51 e4       	ldi	r21, 0x41	; 65
    420a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    420e:	dc 01       	movw	r26, r24
    4210:	cb 01       	movw	r24, r22
    4212:	bc 01       	movw	r22, r24
    4214:	cd 01       	movw	r24, r26
    4216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    421a:	dc 01       	movw	r26, r24
    421c:	cb 01       	movw	r24, r22
    421e:	9e 83       	std	Y+6, r25	; 0x06
    4220:	8d 83       	std	Y+5, r24	; 0x05
    4222:	0f c0       	rjmp	.+30     	; 0x4242 <SW_u8GetState+0x2a4>
    4224:	88 ec       	ldi	r24, 0xC8	; 200
    4226:	90 e0       	ldi	r25, 0x00	; 0
    4228:	9c 83       	std	Y+4, r25	; 0x04
    422a:	8b 83       	std	Y+3, r24	; 0x03
    422c:	8b 81       	ldd	r24, Y+3	; 0x03
    422e:	9c 81       	ldd	r25, Y+4	; 0x04
    4230:	01 97       	sbiw	r24, 0x01	; 1
    4232:	f1 f7       	brne	.-4      	; 0x4230 <SW_u8GetState+0x292>
    4234:	9c 83       	std	Y+4, r25	; 0x04
    4236:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4238:	8d 81       	ldd	r24, Y+5	; 0x05
    423a:	9e 81       	ldd	r25, Y+6	; 0x06
    423c:	01 97       	sbiw	r24, 0x01	; 1
    423e:	9e 83       	std	Y+6, r25	; 0x06
    4240:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4242:	8d 81       	ldd	r24, Y+5	; 0x05
    4244:	9e 81       	ldd	r25, Y+6	; 0x06
    4246:	00 97       	sbiw	r24, 0x00	; 0
    4248:	69 f7       	brne	.-38     	; 0x4224 <SW_u8GetState+0x286>
    424a:	14 c0       	rjmp	.+40     	; 0x4274 <SW_u8GetState+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    424c:	6f 81       	ldd	r22, Y+7	; 0x07
    424e:	78 85       	ldd	r23, Y+8	; 0x08
    4250:	89 85       	ldd	r24, Y+9	; 0x09
    4252:	9a 85       	ldd	r25, Y+10	; 0x0a
    4254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4258:	dc 01       	movw	r26, r24
    425a:	cb 01       	movw	r24, r22
    425c:	9e 83       	std	Y+6, r25	; 0x06
    425e:	8d 83       	std	Y+5, r24	; 0x05
    4260:	8d 81       	ldd	r24, Y+5	; 0x05
    4262:	9e 81       	ldd	r25, Y+6	; 0x06
    4264:	9a 83       	std	Y+2, r25	; 0x02
    4266:	89 83       	std	Y+1, r24	; 0x01
    4268:	89 81       	ldd	r24, Y+1	; 0x01
    426a:	9a 81       	ldd	r25, Y+2	; 0x02
    426c:	01 97       	sbiw	r24, 0x01	; 1
    426e:	f1 f7       	brne	.-4      	; 0x426c <SW_u8GetState+0x2ce>
    4270:	9a 83       	std	Y+2, r25	; 0x02
    4272:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(150);
				DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    4274:	ee 8d       	ldd	r30, Y+30	; 0x1e
    4276:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4278:	80 81       	ld	r24, Z
    427a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    427c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    427e:	91 81       	ldd	r25, Z+1	; 0x01
    4280:	2e e1       	ldi	r18, 0x1E	; 30
    4282:	33 e0       	ldi	r19, 0x03	; 3
    4284:	69 2f       	mov	r22, r25
    4286:	a9 01       	movw	r20, r18
    4288:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_u8GetPinValue>
				if(Local_u8SwState == DIO_PIN_HIGH )
    428c:	80 91 1e 03 	lds	r24, 0x031E
    4290:	81 30       	cpi	r24, 0x01	; 1
    4292:	11 f5       	brne	.+68     	; 0x42d8 <SW_u8GetState+0x33a>
				{
					*Copy_u8State = SW_PRESSED;
    4294:	e8 a1       	ldd	r30, Y+32	; 0x20
    4296:	f9 a1       	ldd	r31, Y+33	; 0x21
    4298:	10 82       	st	Z, r1
    429a:	1e c0       	rjmp	.+60     	; 0x42d8 <SW_u8GetState+0x33a>
				}
			}
		}
		else if(Copy_SW->SelfLockType == SW_NOT_SELF_LOCK)
    429c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    429e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    42a0:	83 81       	ldd	r24, Z+3	; 0x03
    42a2:	88 23       	and	r24, r24
    42a4:	a1 f4       	brne	.+40     	; 0x42ce <SW_u8GetState+0x330>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,Copy_u8State);
    42a6:	ee 8d       	ldd	r30, Y+30	; 0x1e
    42a8:	ff 8d       	ldd	r31, Y+31	; 0x1f
    42aa:	80 81       	ld	r24, Z
    42ac:	ee 8d       	ldd	r30, Y+30	; 0x1e
    42ae:	ff 8d       	ldd	r31, Y+31	; 0x1f
    42b0:	91 81       	ldd	r25, Z+1	; 0x01
    42b2:	28 a1       	ldd	r18, Y+32	; 0x20
    42b4:	39 a1       	ldd	r19, Y+33	; 0x21
    42b6:	69 2f       	mov	r22, r25
    42b8:	a9 01       	movw	r20, r18
    42ba:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_u8GetPinValue>
			if (Local_u8SwState == DIO_PIN_HIGH)
    42be:	80 91 1e 03 	lds	r24, 0x031E
    42c2:	81 30       	cpi	r24, 0x01	; 1
    42c4:	49 f4       	brne	.+18     	; 0x42d8 <SW_u8GetState+0x33a>
				*Copy_u8State = SW_PRESSED;
    42c6:	e8 a1       	ldd	r30, Y+32	; 0x20
    42c8:	f9 a1       	ldd	r31, Y+33	; 0x21
    42ca:	10 82       	st	Z, r1
    42cc:	05 c0       	rjmp	.+10     	; 0x42d8 <SW_u8GetState+0x33a>
		}
		else
			Local_u8ErrorState = NOTOK;
    42ce:	81 e0       	ldi	r24, 0x01	; 1
    42d0:	8d 8f       	std	Y+29, r24	; 0x1d
    42d2:	02 c0       	rjmp	.+4      	; 0x42d8 <SW_u8GetState+0x33a>
	}
	else
		Local_u8ErrorState = NOTOK;
    42d4:	81 e0       	ldi	r24, 0x01	; 1
    42d6:	8d 8f       	std	Y+29, r24	; 0x1d

	return Local_u8ErrorState;
    42d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    42da:	a1 96       	adiw	r28, 0x21	; 33
    42dc:	0f b6       	in	r0, 0x3f	; 63
    42de:	f8 94       	cli
    42e0:	de bf       	out	0x3e, r29	; 62
    42e2:	0f be       	out	0x3f, r0	; 63
    42e4:	cd bf       	out	0x3d, r28	; 61
    42e6:	cf 91       	pop	r28
    42e8:	df 91       	pop	r29
    42ea:	08 95       	ret

000042ec <SW_u8GetState2>:
 * 			Copy_SW     : Full with Port,Pin,SelfType,switch function
 * 			Copy_u8State: return State of switch as (0) Pressed , (1) Not pressed
 * use for: Get Switch by Function Call Back i.e (switch function )
 *  */
u8 SW_u8GetState2(SW_t* Copy_SW,u8 *Copy_u8State)
{
    42ec:	df 93       	push	r29
    42ee:	cf 93       	push	r28
    42f0:	00 d0       	rcall	.+0      	; 0x42f2 <SW_u8GetState2+0x6>
    42f2:	00 d0       	rcall	.+0      	; 0x42f4 <SW_u8GetState2+0x8>
    42f4:	0f 92       	push	r0
    42f6:	cd b7       	in	r28, 0x3d	; 61
    42f8:	de b7       	in	r29, 0x3e	; 62
    42fa:	9b 83       	std	Y+3, r25	; 0x03
    42fc:	8a 83       	std	Y+2, r24	; 0x02
    42fe:	7d 83       	std	Y+5, r23	; 0x05
    4300:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK;
    4302:	19 82       	std	Y+1, r1	; 0x01
	static u8 pressed_conf_level = 0;
	static u8 released_conf_level = 0;
	static u8 pressed = 0;
	*Copy_u8State = SW_NOT_PRESSED;
    4304:	ec 81       	ldd	r30, Y+4	; 0x04
    4306:	fd 81       	ldd	r31, Y+5	; 0x05
    4308:	81 e0       	ldi	r24, 0x01	; 1
    430a:	80 83       	st	Z, r24
	static u8 Local_u8SwState;
	if(Copy_SW->Pulltype == SW_PULL_UP)
    430c:	ea 81       	ldd	r30, Y+2	; 0x02
    430e:	fb 81       	ldd	r31, Y+3	; 0x03
    4310:	82 81       	ldd	r24, Z+2	; 0x02
    4312:	88 23       	and	r24, r24
    4314:	09 f0       	breq	.+2      	; 0x4318 <SW_u8GetState2+0x2c>
    4316:	76 c0       	rjmp	.+236    	; 0x4404 <SW_u8GetState2+0x118>
	{
		pressed = 0;
    4318:	10 92 20 03 	sts	0x0320, r1
		if(Copy_SW->SelfLockType == SW_SELF_LOCK)
    431c:	ea 81       	ldd	r30, Y+2	; 0x02
    431e:	fb 81       	ldd	r31, Y+3	; 0x03
    4320:	83 81       	ldd	r24, Z+3	; 0x03
    4322:	81 30       	cpi	r24, 0x01	; 1
    4324:	09 f0       	breq	.+2      	; 0x4328 <SW_u8GetState2+0x3c>
    4326:	4d c0       	rjmp	.+154    	; 0x43c2 <SW_u8GetState2+0xd6>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    4328:	ea 81       	ldd	r30, Y+2	; 0x02
    432a:	fb 81       	ldd	r31, Y+3	; 0x03
    432c:	80 81       	ld	r24, Z
    432e:	ea 81       	ldd	r30, Y+2	; 0x02
    4330:	fb 81       	ldd	r31, Y+3	; 0x03
    4332:	91 81       	ldd	r25, Z+1	; 0x01
    4334:	2f e1       	ldi	r18, 0x1F	; 31
    4336:	33 e0       	ldi	r19, 0x03	; 3
    4338:	69 2f       	mov	r22, r25
    433a:	a9 01       	movw	r20, r18
    433c:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_u8GetPinValue>
			if(Local_u8SwState == DIO_PIN_LOW)
    4340:	80 91 1f 03 	lds	r24, 0x031F
    4344:	88 23       	and	r24, r24
    4346:	09 f0       	breq	.+2      	; 0x434a <SW_u8GetState2+0x5e>
    4348:	c4 c0       	rjmp	.+392    	; 0x44d2 <SW_u8GetState2+0x1e6>
			{
				DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    434a:	ea 81       	ldd	r30, Y+2	; 0x02
    434c:	fb 81       	ldd	r31, Y+3	; 0x03
    434e:	80 81       	ld	r24, Z
    4350:	ea 81       	ldd	r30, Y+2	; 0x02
    4352:	fb 81       	ldd	r31, Y+3	; 0x03
    4354:	91 81       	ldd	r25, Z+1	; 0x01
    4356:	2f e1       	ldi	r18, 0x1F	; 31
    4358:	33 e0       	ldi	r19, 0x03	; 3
    435a:	69 2f       	mov	r22, r25
    435c:	a9 01       	movw	r20, r18
    435e:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_u8GetPinValue>
				if(Local_u8SwState == DIO_PIN_LOW)
    4362:	80 91 1f 03 	lds	r24, 0x031F
    4366:	88 23       	and	r24, r24
    4368:	09 f0       	breq	.+2      	; 0x436c <SW_u8GetState2+0x80>
    436a:	b3 c0       	rjmp	.+358    	; 0x44d2 <SW_u8GetState2+0x1e6>
				{
					pressed_conf_level++;
    436c:	80 91 22 03 	lds	r24, 0x0322
    4370:	8f 5f       	subi	r24, 0xFF	; 255
    4372:	80 93 22 03 	sts	0x0322, r24
					if(pressed_conf_level>20)
    4376:	80 91 22 03 	lds	r24, 0x0322
    437a:	85 31       	cpi	r24, 0x15	; 21
    437c:	98 f0       	brcs	.+38     	; 0x43a4 <SW_u8GetState2+0xb8>
					{
						if(pressed==0)
    437e:	80 91 20 03 	lds	r24, 0x0320
    4382:	88 23       	and	r24, r24
    4384:	61 f4       	brne	.+24     	; 0x439e <SW_u8GetState2+0xb2>
						{
							*Copy_u8State = SW_PRESSED;
    4386:	ec 81       	ldd	r30, Y+4	; 0x04
    4388:	fd 81       	ldd	r31, Y+5	; 0x05
    438a:	10 82       	st	Z, r1
							Copy_SW->Notification();
    438c:	ea 81       	ldd	r30, Y+2	; 0x02
    438e:	fb 81       	ldd	r31, Y+3	; 0x03
    4390:	04 80       	ldd	r0, Z+4	; 0x04
    4392:	f5 81       	ldd	r31, Z+5	; 0x05
    4394:	e0 2d       	mov	r30, r0
    4396:	09 95       	icall
							pressed=1;
    4398:	81 e0       	ldi	r24, 0x01	; 1
    439a:	80 93 20 03 	sts	0x0320, r24
						}
						pressed_conf_level=0;
    439e:	10 92 22 03 	sts	0x0322, r1
    43a2:	97 c0       	rjmp	.+302    	; 0x44d2 <SW_u8GetState2+0x1e6>
					}
					else
					{
						released_conf_level++;
    43a4:	80 91 21 03 	lds	r24, 0x0321
    43a8:	8f 5f       	subi	r24, 0xFF	; 255
    43aa:	80 93 21 03 	sts	0x0321, r24
						if(released_conf_level>20)
    43ae:	80 91 21 03 	lds	r24, 0x0321
    43b2:	85 31       	cpi	r24, 0x15	; 21
    43b4:	08 f4       	brcc	.+2      	; 0x43b8 <SW_u8GetState2+0xcc>
    43b6:	8d c0       	rjmp	.+282    	; 0x44d2 <SW_u8GetState2+0x1e6>
						{
							pressed = 0;
    43b8:	10 92 20 03 	sts	0x0320, r1
							released_conf_level = 0;
    43bc:	10 92 21 03 	sts	0x0321, r1
    43c0:	88 c0       	rjmp	.+272    	; 0x44d2 <SW_u8GetState2+0x1e6>
						}
					}
				}
			}
		}
		else if(Copy_SW->SelfLockType == SW_NOT_SELF_LOCK)
    43c2:	ea 81       	ldd	r30, Y+2	; 0x02
    43c4:	fb 81       	ldd	r31, Y+3	; 0x03
    43c6:	83 81       	ldd	r24, Z+3	; 0x03
    43c8:	88 23       	and	r24, r24
    43ca:	c9 f4       	brne	.+50     	; 0x43fe <SW_u8GetState2+0x112>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,Copy_u8State);
    43cc:	ea 81       	ldd	r30, Y+2	; 0x02
    43ce:	fb 81       	ldd	r31, Y+3	; 0x03
    43d0:	80 81       	ld	r24, Z
    43d2:	ea 81       	ldd	r30, Y+2	; 0x02
    43d4:	fb 81       	ldd	r31, Y+3	; 0x03
    43d6:	91 81       	ldd	r25, Z+1	; 0x01
    43d8:	2c 81       	ldd	r18, Y+4	; 0x04
    43da:	3d 81       	ldd	r19, Y+5	; 0x05
    43dc:	69 2f       	mov	r22, r25
    43de:	a9 01       	movw	r20, r18
    43e0:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_u8GetPinValue>
			if (Local_u8SwState == DIO_PIN_LOW)
    43e4:	80 91 1f 03 	lds	r24, 0x031F
    43e8:	88 23       	and	r24, r24
    43ea:	21 f4       	brne	.+8      	; 0x43f4 <SW_u8GetState2+0x108>
				*Copy_u8State = SW_PRESSED;
    43ec:	ec 81       	ldd	r30, Y+4	; 0x04
    43ee:	fd 81       	ldd	r31, Y+5	; 0x05
    43f0:	10 82       	st	Z, r1
    43f2:	6f c0       	rjmp	.+222    	; 0x44d2 <SW_u8GetState2+0x1e6>
			else
				*Copy_u8State = SW_NOT_PRESSED;
    43f4:	ec 81       	ldd	r30, Y+4	; 0x04
    43f6:	fd 81       	ldd	r31, Y+5	; 0x05
    43f8:	81 e0       	ldi	r24, 0x01	; 1
    43fa:	80 83       	st	Z, r24
    43fc:	6a c0       	rjmp	.+212    	; 0x44d2 <SW_u8GetState2+0x1e6>
		}
		else
			Local_u8ErrorState = NOTOK;
    43fe:	81 e0       	ldi	r24, 0x01	; 1
    4400:	89 83       	std	Y+1, r24	; 0x01
    4402:	67 c0       	rjmp	.+206    	; 0x44d2 <SW_u8GetState2+0x1e6>
	}
	else if(Copy_SW->Pulltype == SW_PULL_DOWN)
    4404:	ea 81       	ldd	r30, Y+2	; 0x02
    4406:	fb 81       	ldd	r31, Y+3	; 0x03
    4408:	82 81       	ldd	r24, Z+2	; 0x02
    440a:	81 30       	cpi	r24, 0x01	; 1
    440c:	09 f0       	breq	.+2      	; 0x4410 <SW_u8GetState2+0x124>
    440e:	5f c0       	rjmp	.+190    	; 0x44ce <SW_u8GetState2+0x1e2>
	{
		pressed = 1;
    4410:	81 e0       	ldi	r24, 0x01	; 1
    4412:	80 93 20 03 	sts	0x0320, r24
		if(Copy_SW->SelfLockType == SW_SELF_LOCK)
    4416:	ea 81       	ldd	r30, Y+2	; 0x02
    4418:	fb 81       	ldd	r31, Y+3	; 0x03
    441a:	83 81       	ldd	r24, Z+3	; 0x03
    441c:	81 30       	cpi	r24, 0x01	; 1
    441e:	d9 f5       	brne	.+118    	; 0x4496 <SW_u8GetState2+0x1aa>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    4420:	ea 81       	ldd	r30, Y+2	; 0x02
    4422:	fb 81       	ldd	r31, Y+3	; 0x03
    4424:	80 81       	ld	r24, Z
    4426:	ea 81       	ldd	r30, Y+2	; 0x02
    4428:	fb 81       	ldd	r31, Y+3	; 0x03
    442a:	91 81       	ldd	r25, Z+1	; 0x01
    442c:	2f e1       	ldi	r18, 0x1F	; 31
    442e:	33 e0       	ldi	r19, 0x03	; 3
    4430:	69 2f       	mov	r22, r25
    4432:	a9 01       	movw	r20, r18
    4434:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_u8GetPinValue>
			if(Local_u8SwState == DIO_PIN_HIGH)
    4438:	80 91 1f 03 	lds	r24, 0x031F
    443c:	81 30       	cpi	r24, 0x01	; 1
    443e:	09 f0       	breq	.+2      	; 0x4442 <SW_u8GetState2+0x156>
    4440:	48 c0       	rjmp	.+144    	; 0x44d2 <SW_u8GetState2+0x1e6>
			{
				pressed_conf_level++;
    4442:	80 91 22 03 	lds	r24, 0x0322
    4446:	8f 5f       	subi	r24, 0xFF	; 255
    4448:	80 93 22 03 	sts	0x0322, r24
				if(pressed_conf_level>20)
    444c:	80 91 22 03 	lds	r24, 0x0322
    4450:	85 31       	cpi	r24, 0x15	; 21
    4452:	90 f0       	brcs	.+36     	; 0x4478 <SW_u8GetState2+0x18c>
				{
					if(pressed==1)
    4454:	80 91 20 03 	lds	r24, 0x0320
    4458:	81 30       	cpi	r24, 0x01	; 1
    445a:	59 f4       	brne	.+22     	; 0x4472 <SW_u8GetState2+0x186>
					{
						*Copy_u8State = SW_PRESSED;
    445c:	ec 81       	ldd	r30, Y+4	; 0x04
    445e:	fd 81       	ldd	r31, Y+5	; 0x05
    4460:	10 82       	st	Z, r1
						Copy_SW->Notification();
    4462:	ea 81       	ldd	r30, Y+2	; 0x02
    4464:	fb 81       	ldd	r31, Y+3	; 0x03
    4466:	04 80       	ldd	r0, Z+4	; 0x04
    4468:	f5 81       	ldd	r31, Z+5	; 0x05
    446a:	e0 2d       	mov	r30, r0
    446c:	09 95       	icall
						pressed=0;
    446e:	10 92 20 03 	sts	0x0320, r1
					}
					pressed_conf_level=0;
    4472:	10 92 22 03 	sts	0x0322, r1
    4476:	2d c0       	rjmp	.+90     	; 0x44d2 <SW_u8GetState2+0x1e6>
				}
				else
				{
					released_conf_level++;
    4478:	80 91 21 03 	lds	r24, 0x0321
    447c:	8f 5f       	subi	r24, 0xFF	; 255
    447e:	80 93 21 03 	sts	0x0321, r24
					if(released_conf_level>20)
    4482:	80 91 21 03 	lds	r24, 0x0321
    4486:	85 31       	cpi	r24, 0x15	; 21
    4488:	20 f1       	brcs	.+72     	; 0x44d2 <SW_u8GetState2+0x1e6>
					{
						pressed = 1;
    448a:	81 e0       	ldi	r24, 0x01	; 1
    448c:	80 93 20 03 	sts	0x0320, r24
						released_conf_level = 0;
    4490:	10 92 21 03 	sts	0x0321, r1
    4494:	1e c0       	rjmp	.+60     	; 0x44d2 <SW_u8GetState2+0x1e6>
					}
				}
			}
		}
		else if(Copy_SW->SelfLockType == SW_NOT_SELF_LOCK)
    4496:	ea 81       	ldd	r30, Y+2	; 0x02
    4498:	fb 81       	ldd	r31, Y+3	; 0x03
    449a:	83 81       	ldd	r24, Z+3	; 0x03
    449c:	88 23       	and	r24, r24
    449e:	a1 f4       	brne	.+40     	; 0x44c8 <SW_u8GetState2+0x1dc>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,Copy_u8State);
    44a0:	ea 81       	ldd	r30, Y+2	; 0x02
    44a2:	fb 81       	ldd	r31, Y+3	; 0x03
    44a4:	80 81       	ld	r24, Z
    44a6:	ea 81       	ldd	r30, Y+2	; 0x02
    44a8:	fb 81       	ldd	r31, Y+3	; 0x03
    44aa:	91 81       	ldd	r25, Z+1	; 0x01
    44ac:	2c 81       	ldd	r18, Y+4	; 0x04
    44ae:	3d 81       	ldd	r19, Y+5	; 0x05
    44b0:	69 2f       	mov	r22, r25
    44b2:	a9 01       	movw	r20, r18
    44b4:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_u8GetPinValue>
			if (Local_u8SwState == DIO_PIN_HIGH)
    44b8:	80 91 1f 03 	lds	r24, 0x031F
    44bc:	81 30       	cpi	r24, 0x01	; 1
    44be:	49 f4       	brne	.+18     	; 0x44d2 <SW_u8GetState2+0x1e6>
				*Copy_u8State = SW_PRESSED;
    44c0:	ec 81       	ldd	r30, Y+4	; 0x04
    44c2:	fd 81       	ldd	r31, Y+5	; 0x05
    44c4:	10 82       	st	Z, r1
    44c6:	05 c0       	rjmp	.+10     	; 0x44d2 <SW_u8GetState2+0x1e6>
		}
		else
			Local_u8ErrorState = NOTOK;
    44c8:	81 e0       	ldi	r24, 0x01	; 1
    44ca:	89 83       	std	Y+1, r24	; 0x01
    44cc:	02 c0       	rjmp	.+4      	; 0x44d2 <SW_u8GetState2+0x1e6>
	}
	else
		Local_u8ErrorState = NOTOK;
    44ce:	81 e0       	ldi	r24, 0x01	; 1
    44d0:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    44d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    44d4:	0f 90       	pop	r0
    44d6:	0f 90       	pop	r0
    44d8:	0f 90       	pop	r0
    44da:	0f 90       	pop	r0
    44dc:	0f 90       	pop	r0
    44de:	cf 91       	pop	r28
    44e0:	df 91       	pop	r29
    44e2:	08 95       	ret

000044e4 <TIMER_voidInit>:
#include "../MCAL/TIMER_interface.h"
#include "../MCAL/TIMER_register.h"

static void (*TIMER_pvCallBackFunc[8])() = {NULL};
void TIMER_voidInit(Timer_t* Copy_Timer)
{
    44e4:	df 93       	push	r29
    44e6:	cf 93       	push	r28
    44e8:	cd b7       	in	r28, 0x3d	; 61
    44ea:	de b7       	in	r29, 0x3e	; 62
    44ec:	60 97       	sbiw	r28, 0x10	; 16
    44ee:	0f b6       	in	r0, 0x3f	; 63
    44f0:	f8 94       	cli
    44f2:	de bf       	out	0x3e, r29	; 62
    44f4:	0f be       	out	0x3f, r0	; 63
    44f6:	cd bf       	out	0x3d, r28	; 61
    44f8:	9a 83       	std	Y+2, r25	; 0x02
    44fa:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_Timer->TimerNum)
    44fc:	e9 81       	ldd	r30, Y+1	; 0x01
    44fe:	fa 81       	ldd	r31, Y+2	; 0x02
    4500:	80 81       	ld	r24, Z
    4502:	28 2f       	mov	r18, r24
    4504:	30 e0       	ldi	r19, 0x00	; 0
    4506:	38 8b       	std	Y+16, r19	; 0x10
    4508:	2f 87       	std	Y+15, r18	; 0x0f
    450a:	8f 85       	ldd	r24, Y+15	; 0x0f
    450c:	98 89       	ldd	r25, Y+16	; 0x10
    450e:	81 30       	cpi	r24, 0x01	; 1
    4510:	91 05       	cpc	r25, r1
    4512:	09 f4       	brne	.+2      	; 0x4516 <TIMER_voidInit+0x32>
    4514:	c1 c0       	rjmp	.+386    	; 0x4698 <TIMER_voidInit+0x1b4>
    4516:	2f 85       	ldd	r18, Y+15	; 0x0f
    4518:	38 89       	ldd	r19, Y+16	; 0x10
    451a:	22 30       	cpi	r18, 0x02	; 2
    451c:	31 05       	cpc	r19, r1
    451e:	09 f4       	brne	.+2      	; 0x4522 <TIMER_voidInit+0x3e>
    4520:	29 c1       	rjmp	.+594    	; 0x4774 <TIMER_voidInit+0x290>
    4522:	8f 85       	ldd	r24, Y+15	; 0x0f
    4524:	98 89       	ldd	r25, Y+16	; 0x10
    4526:	00 97       	sbiw	r24, 0x00	; 0
    4528:	09 f0       	breq	.+2      	; 0x452c <TIMER_voidInit+0x48>
    452a:	d9 c1       	rjmp	.+946    	; 0x48de <TIMER_voidInit+0x3fa>
	{
		case TIMER0:
		switch(Copy_Timer->TimerMode)
    452c:	e9 81       	ldd	r30, Y+1	; 0x01
    452e:	fa 81       	ldd	r31, Y+2	; 0x02
    4530:	81 81       	ldd	r24, Z+1	; 0x01
    4532:	28 2f       	mov	r18, r24
    4534:	30 e0       	ldi	r19, 0x00	; 0
    4536:	3e 87       	std	Y+14, r19	; 0x0e
    4538:	2d 87       	std	Y+13, r18	; 0x0d
    453a:	8d 85       	ldd	r24, Y+13	; 0x0d
    453c:	9e 85       	ldd	r25, Y+14	; 0x0e
    453e:	81 30       	cpi	r24, 0x01	; 1
    4540:	91 05       	cpc	r25, r1
    4542:	09 f4       	brne	.+2      	; 0x4546 <TIMER_voidInit+0x62>
    4544:	4a c0       	rjmp	.+148    	; 0x45da <TIMER_voidInit+0xf6>
    4546:	2d 85       	ldd	r18, Y+13	; 0x0d
    4548:	3e 85       	ldd	r19, Y+14	; 0x0e
    454a:	22 30       	cpi	r18, 0x02	; 2
    454c:	31 05       	cpc	r19, r1
    454e:	2c f4       	brge	.+10     	; 0x455a <TIMER_voidInit+0x76>
    4550:	8d 85       	ldd	r24, Y+13	; 0x0d
    4552:	9e 85       	ldd	r25, Y+14	; 0x0e
    4554:	00 97       	sbiw	r24, 0x00	; 0
    4556:	69 f0       	breq	.+26     	; 0x4572 <TIMER_voidInit+0x8e>
    4558:	73 c0       	rjmp	.+230    	; 0x4640 <TIMER_voidInit+0x15c>
    455a:	2d 85       	ldd	r18, Y+13	; 0x0d
    455c:	3e 85       	ldd	r19, Y+14	; 0x0e
    455e:	22 30       	cpi	r18, 0x02	; 2
    4560:	31 05       	cpc	r19, r1
    4562:	09 f4       	brne	.+2      	; 0x4566 <TIMER_voidInit+0x82>
    4564:	5f c0       	rjmp	.+190    	; 0x4624 <TIMER_voidInit+0x140>
    4566:	8d 85       	ldd	r24, Y+13	; 0x0d
    4568:	9e 85       	ldd	r25, Y+14	; 0x0e
    456a:	83 30       	cpi	r24, 0x03	; 3
    456c:	91 05       	cpc	r25, r1
    456e:	31 f1       	breq	.+76     	; 0x45bc <TIMER_voidInit+0xd8>
    4570:	67 c0       	rjmp	.+206    	; 0x4640 <TIMER_voidInit+0x15c>
		{
		case TIMER0_NORMAL:CLR_BIT(TCCR0,TCCR0_WGM01);CLR_BIT(TCCR0,TCCR0_WGM00);
    4572:	a3 e5       	ldi	r26, 0x53	; 83
    4574:	b0 e0       	ldi	r27, 0x00	; 0
    4576:	e3 e5       	ldi	r30, 0x53	; 83
    4578:	f0 e0       	ldi	r31, 0x00	; 0
    457a:	80 81       	ld	r24, Z
    457c:	87 7f       	andi	r24, 0xF7	; 247
    457e:	8c 93       	st	X, r24
    4580:	a3 e5       	ldi	r26, 0x53	; 83
    4582:	b0 e0       	ldi	r27, 0x00	; 0
    4584:	e3 e5       	ldi	r30, 0x53	; 83
    4586:	f0 e0       	ldi	r31, 0x00	; 0
    4588:	80 81       	ld	r24, Z
    458a:	8f 7b       	andi	r24, 0xBF	; 191
    458c:	8c 93       	st	X, r24
		Copy_Timer->IntEnable?SET_BIT(TIMSK,TIMSK_TOIE0):CLR_BIT(TIMSK,TIMSK_TOIE0);
    458e:	e9 81       	ldd	r30, Y+1	; 0x01
    4590:	fa 81       	ldd	r31, Y+2	; 0x02
    4592:	84 81       	ldd	r24, Z+4	; 0x04
    4594:	88 23       	and	r24, r24
    4596:	49 f0       	breq	.+18     	; 0x45aa <TIMER_voidInit+0xc6>
    4598:	a9 e5       	ldi	r26, 0x59	; 89
    459a:	b0 e0       	ldi	r27, 0x00	; 0
    459c:	e9 e5       	ldi	r30, 0x59	; 89
    459e:	f0 e0       	ldi	r31, 0x00	; 0
    45a0:	80 81       	ld	r24, Z
    45a2:	81 60       	ori	r24, 0x01	; 1
    45a4:	8c 93       	st	X, r24
    45a6:	9c 91       	ld	r25, X
    45a8:	4b c0       	rjmp	.+150    	; 0x4640 <TIMER_voidInit+0x15c>
    45aa:	a9 e5       	ldi	r26, 0x59	; 89
    45ac:	b0 e0       	ldi	r27, 0x00	; 0
    45ae:	e9 e5       	ldi	r30, 0x59	; 89
    45b0:	f0 e0       	ldi	r31, 0x00	; 0
    45b2:	80 81       	ld	r24, Z
    45b4:	8e 7f       	andi	r24, 0xFE	; 254
    45b6:	8c 93       	st	X, r24
    45b8:	2c 91       	ld	r18, X
    45ba:	42 c0       	rjmp	.+132    	; 0x4640 <TIMER_voidInit+0x15c>
		break;
		case TIMER0_PHASE_CORRECT_PWM:CLR_BIT(TCCR0,TCCR0_WGM01);SET_BIT(TCCR0,TCCR0_WGM00);break;
    45bc:	a3 e5       	ldi	r26, 0x53	; 83
    45be:	b0 e0       	ldi	r27, 0x00	; 0
    45c0:	e3 e5       	ldi	r30, 0x53	; 83
    45c2:	f0 e0       	ldi	r31, 0x00	; 0
    45c4:	80 81       	ld	r24, Z
    45c6:	87 7f       	andi	r24, 0xF7	; 247
    45c8:	8c 93       	st	X, r24
    45ca:	a3 e5       	ldi	r26, 0x53	; 83
    45cc:	b0 e0       	ldi	r27, 0x00	; 0
    45ce:	e3 e5       	ldi	r30, 0x53	; 83
    45d0:	f0 e0       	ldi	r31, 0x00	; 0
    45d2:	80 81       	ld	r24, Z
    45d4:	80 64       	ori	r24, 0x40	; 64
    45d6:	8c 93       	st	X, r24
    45d8:	33 c0       	rjmp	.+102    	; 0x4640 <TIMER_voidInit+0x15c>
		case TIMER0_CTC:SET_BIT(TCCR0,TCCR0_WGM01);CLR_BIT(TCCR0,TCCR0_WGM00);
    45da:	a3 e5       	ldi	r26, 0x53	; 83
    45dc:	b0 e0       	ldi	r27, 0x00	; 0
    45de:	e3 e5       	ldi	r30, 0x53	; 83
    45e0:	f0 e0       	ldi	r31, 0x00	; 0
    45e2:	80 81       	ld	r24, Z
    45e4:	88 60       	ori	r24, 0x08	; 8
    45e6:	8c 93       	st	X, r24
    45e8:	a3 e5       	ldi	r26, 0x53	; 83
    45ea:	b0 e0       	ldi	r27, 0x00	; 0
    45ec:	e3 e5       	ldi	r30, 0x53	; 83
    45ee:	f0 e0       	ldi	r31, 0x00	; 0
    45f0:	80 81       	ld	r24, Z
    45f2:	8f 7b       	andi	r24, 0xBF	; 191
    45f4:	8c 93       	st	X, r24
		Copy_Timer->IntEnable?SET_BIT(TIMSK,TIMSK_OCIE0):CLR_BIT(TIMSK,TIMSK_OCIE0);
    45f6:	e9 81       	ldd	r30, Y+1	; 0x01
    45f8:	fa 81       	ldd	r31, Y+2	; 0x02
    45fa:	84 81       	ldd	r24, Z+4	; 0x04
    45fc:	88 23       	and	r24, r24
    45fe:	49 f0       	breq	.+18     	; 0x4612 <TIMER_voidInit+0x12e>
    4600:	a9 e5       	ldi	r26, 0x59	; 89
    4602:	b0 e0       	ldi	r27, 0x00	; 0
    4604:	e9 e5       	ldi	r30, 0x59	; 89
    4606:	f0 e0       	ldi	r31, 0x00	; 0
    4608:	80 81       	ld	r24, Z
    460a:	82 60       	ori	r24, 0x02	; 2
    460c:	8c 93       	st	X, r24
    460e:	3c 91       	ld	r19, X
    4610:	17 c0       	rjmp	.+46     	; 0x4640 <TIMER_voidInit+0x15c>
    4612:	a9 e5       	ldi	r26, 0x59	; 89
    4614:	b0 e0       	ldi	r27, 0x00	; 0
    4616:	e9 e5       	ldi	r30, 0x59	; 89
    4618:	f0 e0       	ldi	r31, 0x00	; 0
    461a:	80 81       	ld	r24, Z
    461c:	8d 7f       	andi	r24, 0xFD	; 253
    461e:	8c 93       	st	X, r24
    4620:	8c 91       	ld	r24, X
    4622:	0e c0       	rjmp	.+28     	; 0x4640 <TIMER_voidInit+0x15c>
		break;
		case  TIMER0_FAST_PWM:SET_BIT(TCCR0,TCCR0_WGM01);SET_BIT(TCCR0,TCCR0_WGM00);break;
    4624:	a3 e5       	ldi	r26, 0x53	; 83
    4626:	b0 e0       	ldi	r27, 0x00	; 0
    4628:	e3 e5       	ldi	r30, 0x53	; 83
    462a:	f0 e0       	ldi	r31, 0x00	; 0
    462c:	80 81       	ld	r24, Z
    462e:	88 60       	ori	r24, 0x08	; 8
    4630:	8c 93       	st	X, r24
    4632:	a3 e5       	ldi	r26, 0x53	; 83
    4634:	b0 e0       	ldi	r27, 0x00	; 0
    4636:	e3 e5       	ldi	r30, 0x53	; 83
    4638:	f0 e0       	ldi	r31, 0x00	; 0
    463a:	80 81       	ld	r24, Z
    463c:	80 64       	ori	r24, 0x40	; 64
    463e:	8c 93       	st	X, r24
		}
		TCCR0 &= MASK_COMP_MATCH_MODE;
    4640:	a3 e5       	ldi	r26, 0x53	; 83
    4642:	b0 e0       	ldi	r27, 0x00	; 0
    4644:	e3 e5       	ldi	r30, 0x53	; 83
    4646:	f0 e0       	ldi	r31, 0x00	; 0
    4648:	80 81       	ld	r24, Z
    464a:	8f 7c       	andi	r24, 0xCF	; 207
    464c:	8c 93       	st	X, r24
		TCCR0 |= Copy_Timer->CompOutMode<<TCCR0_COM00;
    464e:	a3 e5       	ldi	r26, 0x53	; 83
    4650:	b0 e0       	ldi	r27, 0x00	; 0
    4652:	e3 e5       	ldi	r30, 0x53	; 83
    4654:	f0 e0       	ldi	r31, 0x00	; 0
    4656:	80 81       	ld	r24, Z
    4658:	28 2f       	mov	r18, r24
    465a:	e9 81       	ldd	r30, Y+1	; 0x01
    465c:	fa 81       	ldd	r31, Y+2	; 0x02
    465e:	82 81       	ldd	r24, Z+2	; 0x02
    4660:	88 2f       	mov	r24, r24
    4662:	90 e0       	ldi	r25, 0x00	; 0
    4664:	82 95       	swap	r24
    4666:	92 95       	swap	r25
    4668:	90 7f       	andi	r25, 0xF0	; 240
    466a:	98 27       	eor	r25, r24
    466c:	80 7f       	andi	r24, 0xF0	; 240
    466e:	98 27       	eor	r25, r24
    4670:	82 2b       	or	r24, r18
    4672:	8c 93       	st	X, r24
		TCCR0 &= MASK_CLOCK_MODE;
    4674:	a3 e5       	ldi	r26, 0x53	; 83
    4676:	b0 e0       	ldi	r27, 0x00	; 0
    4678:	e3 e5       	ldi	r30, 0x53	; 83
    467a:	f0 e0       	ldi	r31, 0x00	; 0
    467c:	80 81       	ld	r24, Z
    467e:	88 7f       	andi	r24, 0xF8	; 248
    4680:	8c 93       	st	X, r24
		TCCR0 |= Copy_Timer->ClockSel<<TCCR0_CS00;
    4682:	a3 e5       	ldi	r26, 0x53	; 83
    4684:	b0 e0       	ldi	r27, 0x00	; 0
    4686:	e3 e5       	ldi	r30, 0x53	; 83
    4688:	f0 e0       	ldi	r31, 0x00	; 0
    468a:	90 81       	ld	r25, Z
    468c:	e9 81       	ldd	r30, Y+1	; 0x01
    468e:	fa 81       	ldd	r31, Y+2	; 0x02
    4690:	83 81       	ldd	r24, Z+3	; 0x03
    4692:	89 2b       	or	r24, r25
    4694:	8c 93       	st	X, r24
    4696:	23 c1       	rjmp	.+582    	; 0x48de <TIMER_voidInit+0x3fa>
		break;
		case TIMER1:
			TCCR1A &= MASK_TIMER1A_MODE;
    4698:	af e4       	ldi	r26, 0x4F	; 79
    469a:	b0 e0       	ldi	r27, 0x00	; 0
    469c:	ef e4       	ldi	r30, 0x4F	; 79
    469e:	f0 e0       	ldi	r31, 0x00	; 0
    46a0:	80 81       	ld	r24, Z
    46a2:	8c 7f       	andi	r24, 0xFC	; 252
    46a4:	8c 93       	st	X, r24
			TCCR1A |= (Copy_Timer->TimerMode&(~(MASK_TIMER1A_MODE)));
    46a6:	af e4       	ldi	r26, 0x4F	; 79
    46a8:	b0 e0       	ldi	r27, 0x00	; 0
    46aa:	ef e4       	ldi	r30, 0x4F	; 79
    46ac:	f0 e0       	ldi	r31, 0x00	; 0
    46ae:	80 81       	ld	r24, Z
    46b0:	98 2f       	mov	r25, r24
    46b2:	e9 81       	ldd	r30, Y+1	; 0x01
    46b4:	fa 81       	ldd	r31, Y+2	; 0x02
    46b6:	81 81       	ldd	r24, Z+1	; 0x01
    46b8:	83 70       	andi	r24, 0x03	; 3
    46ba:	89 2b       	or	r24, r25
    46bc:	8c 93       	st	X, r24
			TCCR1B &= MASK_TIMER1B_MODE;
    46be:	ae e4       	ldi	r26, 0x4E	; 78
    46c0:	b0 e0       	ldi	r27, 0x00	; 0
    46c2:	ee e4       	ldi	r30, 0x4E	; 78
    46c4:	f0 e0       	ldi	r31, 0x00	; 0
    46c6:	80 81       	ld	r24, Z
    46c8:	87 7e       	andi	r24, 0xE7	; 231
    46ca:	8c 93       	st	X, r24
			TCCR1B |= ((Copy_Timer->TimerMode&(~(MASK_TIMER1B_MODE_VAL)))<<1);
    46cc:	ae e4       	ldi	r26, 0x4E	; 78
    46ce:	b0 e0       	ldi	r27, 0x00	; 0
    46d0:	ee e4       	ldi	r30, 0x4E	; 78
    46d2:	f0 e0       	ldi	r31, 0x00	; 0
    46d4:	80 81       	ld	r24, Z
    46d6:	28 2f       	mov	r18, r24
    46d8:	e9 81       	ldd	r30, Y+1	; 0x01
    46da:	fa 81       	ldd	r31, Y+2	; 0x02
    46dc:	81 81       	ldd	r24, Z+1	; 0x01
    46de:	88 2f       	mov	r24, r24
    46e0:	90 e0       	ldi	r25, 0x00	; 0
    46e2:	8c 70       	andi	r24, 0x0C	; 12
    46e4:	88 0f       	add	r24, r24
    46e6:	99 1f       	adc	r25, r25
    46e8:	82 2b       	or	r24, r18
    46ea:	8c 93       	st	X, r24
			// set channel A , channel B
			TCCR1A &=MASK_COMP_MATCH1A_MODE;
    46ec:	af e4       	ldi	r26, 0x4F	; 79
    46ee:	b0 e0       	ldi	r27, 0x00	; 0
    46f0:	ef e4       	ldi	r30, 0x4F	; 79
    46f2:	f0 e0       	ldi	r31, 0x00	; 0
    46f4:	80 81       	ld	r24, Z
    46f6:	8f 70       	andi	r24, 0x0F	; 15
    46f8:	8c 93       	st	X, r24
			TCCR1A |= Copy_Timer->CompOutMode<<TCCR1A_COM1B0;
    46fa:	af e4       	ldi	r26, 0x4F	; 79
    46fc:	b0 e0       	ldi	r27, 0x00	; 0
    46fe:	ef e4       	ldi	r30, 0x4F	; 79
    4700:	f0 e0       	ldi	r31, 0x00	; 0
    4702:	80 81       	ld	r24, Z
    4704:	28 2f       	mov	r18, r24
    4706:	e9 81       	ldd	r30, Y+1	; 0x01
    4708:	fa 81       	ldd	r31, Y+2	; 0x02
    470a:	82 81       	ldd	r24, Z+2	; 0x02
    470c:	88 2f       	mov	r24, r24
    470e:	90 e0       	ldi	r25, 0x00	; 0
    4710:	82 95       	swap	r24
    4712:	92 95       	swap	r25
    4714:	90 7f       	andi	r25, 0xF0	; 240
    4716:	98 27       	eor	r25, r24
    4718:	80 7f       	andi	r24, 0xF0	; 240
    471a:	98 27       	eor	r25, r24
    471c:	82 2b       	or	r24, r18
    471e:	8c 93       	st	X, r24

			TCCR1B &= MASK_CLOCK_MODE;
    4720:	ae e4       	ldi	r26, 0x4E	; 78
    4722:	b0 e0       	ldi	r27, 0x00	; 0
    4724:	ee e4       	ldi	r30, 0x4E	; 78
    4726:	f0 e0       	ldi	r31, 0x00	; 0
    4728:	80 81       	ld	r24, Z
    472a:	88 7f       	andi	r24, 0xF8	; 248
    472c:	8c 93       	st	X, r24
			TCCR1B |= Copy_Timer->ClockSel<<TCCR1B_CS10;
    472e:	ae e4       	ldi	r26, 0x4E	; 78
    4730:	b0 e0       	ldi	r27, 0x00	; 0
    4732:	ee e4       	ldi	r30, 0x4E	; 78
    4734:	f0 e0       	ldi	r31, 0x00	; 0
    4736:	90 81       	ld	r25, Z
    4738:	e9 81       	ldd	r30, Y+1	; 0x01
    473a:	fa 81       	ldd	r31, Y+2	; 0x02
    473c:	83 81       	ldd	r24, Z+3	; 0x03
    473e:	89 2b       	or	r24, r25
    4740:	8c 93       	st	X, r24

			TIMSK &= MASK_TIMER1B_MODE;
    4742:	a9 e5       	ldi	r26, 0x59	; 89
    4744:	b0 e0       	ldi	r27, 0x00	; 0
    4746:	e9 e5       	ldi	r30, 0x59	; 89
    4748:	f0 e0       	ldi	r31, 0x00	; 0
    474a:	80 81       	ld	r24, Z
    474c:	87 7e       	andi	r24, 0xE7	; 231
    474e:	8c 93       	st	X, r24
			TIMSK |= Copy_Timer->IntEnable<<TIMSK_TOIE1;
    4750:	a9 e5       	ldi	r26, 0x59	; 89
    4752:	b0 e0       	ldi	r27, 0x00	; 0
    4754:	e9 e5       	ldi	r30, 0x59	; 89
    4756:	f0 e0       	ldi	r31, 0x00	; 0
    4758:	80 81       	ld	r24, Z
    475a:	28 2f       	mov	r18, r24
    475c:	e9 81       	ldd	r30, Y+1	; 0x01
    475e:	fa 81       	ldd	r31, Y+2	; 0x02
    4760:	84 81       	ldd	r24, Z+4	; 0x04
    4762:	88 2f       	mov	r24, r24
    4764:	90 e0       	ldi	r25, 0x00	; 0
    4766:	88 0f       	add	r24, r24
    4768:	99 1f       	adc	r25, r25
    476a:	88 0f       	add	r24, r24
    476c:	99 1f       	adc	r25, r25
    476e:	82 2b       	or	r24, r18
    4770:	8c 93       	st	X, r24
    4772:	b5 c0       	rjmp	.+362    	; 0x48de <TIMER_voidInit+0x3fa>
			break;
		case TIMER2:
			switch(Copy_Timer->TimerMode)
    4774:	e9 81       	ldd	r30, Y+1	; 0x01
    4776:	fa 81       	ldd	r31, Y+2	; 0x02
    4778:	81 81       	ldd	r24, Z+1	; 0x01
    477a:	28 2f       	mov	r18, r24
    477c:	30 e0       	ldi	r19, 0x00	; 0
    477e:	38 87       	std	Y+8, r19	; 0x08
    4780:	2f 83       	std	Y+7, r18	; 0x07
    4782:	8f 81       	ldd	r24, Y+7	; 0x07
    4784:	98 85       	ldd	r25, Y+8	; 0x08
    4786:	81 30       	cpi	r24, 0x01	; 1
    4788:	91 05       	cpc	r25, r1
    478a:	09 f4       	brne	.+2      	; 0x478e <TIMER_voidInit+0x2aa>
    478c:	4a c0       	rjmp	.+148    	; 0x4822 <TIMER_voidInit+0x33e>
    478e:	2f 81       	ldd	r18, Y+7	; 0x07
    4790:	38 85       	ldd	r19, Y+8	; 0x08
    4792:	22 30       	cpi	r18, 0x02	; 2
    4794:	31 05       	cpc	r19, r1
    4796:	2c f4       	brge	.+10     	; 0x47a2 <TIMER_voidInit+0x2be>
    4798:	8f 81       	ldd	r24, Y+7	; 0x07
    479a:	98 85       	ldd	r25, Y+8	; 0x08
    479c:	00 97       	sbiw	r24, 0x00	; 0
    479e:	69 f0       	breq	.+26     	; 0x47ba <TIMER_voidInit+0x2d6>
    47a0:	73 c0       	rjmp	.+230    	; 0x4888 <TIMER_voidInit+0x3a4>
    47a2:	2f 81       	ldd	r18, Y+7	; 0x07
    47a4:	38 85       	ldd	r19, Y+8	; 0x08
    47a6:	22 30       	cpi	r18, 0x02	; 2
    47a8:	31 05       	cpc	r19, r1
    47aa:	09 f4       	brne	.+2      	; 0x47ae <TIMER_voidInit+0x2ca>
    47ac:	5f c0       	rjmp	.+190    	; 0x486c <TIMER_voidInit+0x388>
    47ae:	8f 81       	ldd	r24, Y+7	; 0x07
    47b0:	98 85       	ldd	r25, Y+8	; 0x08
    47b2:	83 30       	cpi	r24, 0x03	; 3
    47b4:	91 05       	cpc	r25, r1
    47b6:	31 f1       	breq	.+76     	; 0x4804 <TIMER_voidInit+0x320>
    47b8:	67 c0       	rjmp	.+206    	; 0x4888 <TIMER_voidInit+0x3a4>
			{
			case TIMER2_NORMAL:CLR_BIT(TCCR2,TCCR2_WGM21);CLR_BIT(TCCR2,TCCR2_WGM20);
    47ba:	a5 e4       	ldi	r26, 0x45	; 69
    47bc:	b0 e0       	ldi	r27, 0x00	; 0
    47be:	e5 e4       	ldi	r30, 0x45	; 69
    47c0:	f0 e0       	ldi	r31, 0x00	; 0
    47c2:	80 81       	ld	r24, Z
    47c4:	87 7f       	andi	r24, 0xF7	; 247
    47c6:	8c 93       	st	X, r24
    47c8:	a5 e4       	ldi	r26, 0x45	; 69
    47ca:	b0 e0       	ldi	r27, 0x00	; 0
    47cc:	e5 e4       	ldi	r30, 0x45	; 69
    47ce:	f0 e0       	ldi	r31, 0x00	; 0
    47d0:	80 81       	ld	r24, Z
    47d2:	8f 7b       	andi	r24, 0xBF	; 191
    47d4:	8c 93       	st	X, r24
			Copy_Timer->IntEnable?SET_BIT(TIMSK,TIMSK_TOIE2):CLR_BIT(TIMSK,TIMSK_TOIE2);
    47d6:	e9 81       	ldd	r30, Y+1	; 0x01
    47d8:	fa 81       	ldd	r31, Y+2	; 0x02
    47da:	84 81       	ldd	r24, Z+4	; 0x04
    47dc:	88 23       	and	r24, r24
    47de:	49 f0       	breq	.+18     	; 0x47f2 <TIMER_voidInit+0x30e>
    47e0:	a9 e5       	ldi	r26, 0x59	; 89
    47e2:	b0 e0       	ldi	r27, 0x00	; 0
    47e4:	e9 e5       	ldi	r30, 0x59	; 89
    47e6:	f0 e0       	ldi	r31, 0x00	; 0
    47e8:	80 81       	ld	r24, Z
    47ea:	80 64       	ori	r24, 0x40	; 64
    47ec:	8c 93       	st	X, r24
    47ee:	9c 91       	ld	r25, X
    47f0:	4b c0       	rjmp	.+150    	; 0x4888 <TIMER_voidInit+0x3a4>
    47f2:	a9 e5       	ldi	r26, 0x59	; 89
    47f4:	b0 e0       	ldi	r27, 0x00	; 0
    47f6:	e9 e5       	ldi	r30, 0x59	; 89
    47f8:	f0 e0       	ldi	r31, 0x00	; 0
    47fa:	80 81       	ld	r24, Z
    47fc:	8f 7b       	andi	r24, 0xBF	; 191
    47fe:	8c 93       	st	X, r24
    4800:	2c 91       	ld	r18, X
    4802:	42 c0       	rjmp	.+132    	; 0x4888 <TIMER_voidInit+0x3a4>
			break;
			case TIMER2_PHASE_CORRECT_PWM:CLR_BIT(TCCR2,TCCR2_WGM21);SET_BIT(TCCR2,TCCR2_WGM20);break;
    4804:	a5 e4       	ldi	r26, 0x45	; 69
    4806:	b0 e0       	ldi	r27, 0x00	; 0
    4808:	e5 e4       	ldi	r30, 0x45	; 69
    480a:	f0 e0       	ldi	r31, 0x00	; 0
    480c:	80 81       	ld	r24, Z
    480e:	87 7f       	andi	r24, 0xF7	; 247
    4810:	8c 93       	st	X, r24
    4812:	a5 e4       	ldi	r26, 0x45	; 69
    4814:	b0 e0       	ldi	r27, 0x00	; 0
    4816:	e5 e4       	ldi	r30, 0x45	; 69
    4818:	f0 e0       	ldi	r31, 0x00	; 0
    481a:	80 81       	ld	r24, Z
    481c:	80 64       	ori	r24, 0x40	; 64
    481e:	8c 93       	st	X, r24
    4820:	33 c0       	rjmp	.+102    	; 0x4888 <TIMER_voidInit+0x3a4>
			case TIMER2_CTC:SET_BIT(TCCR2,TCCR2_WGM21);CLR_BIT(TCCR2,TCCR2_WGM20);
    4822:	a5 e4       	ldi	r26, 0x45	; 69
    4824:	b0 e0       	ldi	r27, 0x00	; 0
    4826:	e5 e4       	ldi	r30, 0x45	; 69
    4828:	f0 e0       	ldi	r31, 0x00	; 0
    482a:	80 81       	ld	r24, Z
    482c:	88 60       	ori	r24, 0x08	; 8
    482e:	8c 93       	st	X, r24
    4830:	a5 e4       	ldi	r26, 0x45	; 69
    4832:	b0 e0       	ldi	r27, 0x00	; 0
    4834:	e5 e4       	ldi	r30, 0x45	; 69
    4836:	f0 e0       	ldi	r31, 0x00	; 0
    4838:	80 81       	ld	r24, Z
    483a:	8f 7b       	andi	r24, 0xBF	; 191
    483c:	8c 93       	st	X, r24
			Copy_Timer->IntEnable?SET_BIT(TIMSK,TIMSK_OCIE2):CLR_BIT(TIMSK,TIMSK_OCIE2);
    483e:	e9 81       	ldd	r30, Y+1	; 0x01
    4840:	fa 81       	ldd	r31, Y+2	; 0x02
    4842:	84 81       	ldd	r24, Z+4	; 0x04
    4844:	88 23       	and	r24, r24
    4846:	49 f0       	breq	.+18     	; 0x485a <TIMER_voidInit+0x376>
    4848:	a9 e5       	ldi	r26, 0x59	; 89
    484a:	b0 e0       	ldi	r27, 0x00	; 0
    484c:	e9 e5       	ldi	r30, 0x59	; 89
    484e:	f0 e0       	ldi	r31, 0x00	; 0
    4850:	80 81       	ld	r24, Z
    4852:	80 68       	ori	r24, 0x80	; 128
    4854:	8c 93       	st	X, r24
    4856:	3c 91       	ld	r19, X
    4858:	17 c0       	rjmp	.+46     	; 0x4888 <TIMER_voidInit+0x3a4>
    485a:	a9 e5       	ldi	r26, 0x59	; 89
    485c:	b0 e0       	ldi	r27, 0x00	; 0
    485e:	e9 e5       	ldi	r30, 0x59	; 89
    4860:	f0 e0       	ldi	r31, 0x00	; 0
    4862:	80 81       	ld	r24, Z
    4864:	8f 77       	andi	r24, 0x7F	; 127
    4866:	8c 93       	st	X, r24
    4868:	8c 91       	ld	r24, X
    486a:	0e c0       	rjmp	.+28     	; 0x4888 <TIMER_voidInit+0x3a4>
			break;
			case  TIMER2_FAST_PWM:SET_BIT(TCCR2,TCCR2_WGM21);SET_BIT(TCCR2,TCCR2_WGM20);break;
    486c:	a5 e4       	ldi	r26, 0x45	; 69
    486e:	b0 e0       	ldi	r27, 0x00	; 0
    4870:	e5 e4       	ldi	r30, 0x45	; 69
    4872:	f0 e0       	ldi	r31, 0x00	; 0
    4874:	80 81       	ld	r24, Z
    4876:	88 60       	ori	r24, 0x08	; 8
    4878:	8c 93       	st	X, r24
    487a:	a5 e4       	ldi	r26, 0x45	; 69
    487c:	b0 e0       	ldi	r27, 0x00	; 0
    487e:	e5 e4       	ldi	r30, 0x45	; 69
    4880:	f0 e0       	ldi	r31, 0x00	; 0
    4882:	80 81       	ld	r24, Z
    4884:	80 64       	ori	r24, 0x40	; 64
    4886:	8c 93       	st	X, r24
			}
			TCCR2 &= MASK_COMP_MATCH_MODE;
    4888:	a5 e4       	ldi	r26, 0x45	; 69
    488a:	b0 e0       	ldi	r27, 0x00	; 0
    488c:	e5 e4       	ldi	r30, 0x45	; 69
    488e:	f0 e0       	ldi	r31, 0x00	; 0
    4890:	80 81       	ld	r24, Z
    4892:	8f 7c       	andi	r24, 0xCF	; 207
    4894:	8c 93       	st	X, r24
			TCCR2 |= Copy_Timer->CompOutMode<<TCCR2_COM20;
    4896:	a5 e4       	ldi	r26, 0x45	; 69
    4898:	b0 e0       	ldi	r27, 0x00	; 0
    489a:	e5 e4       	ldi	r30, 0x45	; 69
    489c:	f0 e0       	ldi	r31, 0x00	; 0
    489e:	80 81       	ld	r24, Z
    48a0:	28 2f       	mov	r18, r24
    48a2:	e9 81       	ldd	r30, Y+1	; 0x01
    48a4:	fa 81       	ldd	r31, Y+2	; 0x02
    48a6:	82 81       	ldd	r24, Z+2	; 0x02
    48a8:	88 2f       	mov	r24, r24
    48aa:	90 e0       	ldi	r25, 0x00	; 0
    48ac:	82 95       	swap	r24
    48ae:	92 95       	swap	r25
    48b0:	90 7f       	andi	r25, 0xF0	; 240
    48b2:	98 27       	eor	r25, r24
    48b4:	80 7f       	andi	r24, 0xF0	; 240
    48b6:	98 27       	eor	r25, r24
    48b8:	82 2b       	or	r24, r18
    48ba:	8c 93       	st	X, r24
			TCCR2 &= MASK_CLOCK_MODE;
    48bc:	a5 e4       	ldi	r26, 0x45	; 69
    48be:	b0 e0       	ldi	r27, 0x00	; 0
    48c0:	e5 e4       	ldi	r30, 0x45	; 69
    48c2:	f0 e0       	ldi	r31, 0x00	; 0
    48c4:	80 81       	ld	r24, Z
    48c6:	88 7f       	andi	r24, 0xF8	; 248
    48c8:	8c 93       	st	X, r24
			TCCR2 |= Copy_Timer->ClockSel<<TCCR2_CS20;
    48ca:	a5 e4       	ldi	r26, 0x45	; 69
    48cc:	b0 e0       	ldi	r27, 0x00	; 0
    48ce:	e5 e4       	ldi	r30, 0x45	; 69
    48d0:	f0 e0       	ldi	r31, 0x00	; 0
    48d2:	90 81       	ld	r25, Z
    48d4:	e9 81       	ldd	r30, Y+1	; 0x01
    48d6:	fa 81       	ldd	r31, Y+2	; 0x02
    48d8:	83 81       	ldd	r24, Z+3	; 0x03
    48da:	89 2b       	or	r24, r25
    48dc:	8c 93       	st	X, r24
			break;
	}

}
    48de:	60 96       	adiw	r28, 0x10	; 16
    48e0:	0f b6       	in	r0, 0x3f	; 63
    48e2:	f8 94       	cli
    48e4:	de bf       	out	0x3e, r29	; 62
    48e6:	0f be       	out	0x3f, r0	; 63
    48e8:	cd bf       	out	0x3d, r28	; 61
    48ea:	cf 91       	pop	r28
    48ec:	df 91       	pop	r29
    48ee:	08 95       	ret

000048f0 <TIMER0_voidCompOutModeChange>:
void TIMER0_voidCompOutModeChange(Timer_t *Copy_Timer)
{
    48f0:	df 93       	push	r29
    48f2:	cf 93       	push	r28
    48f4:	00 d0       	rcall	.+0      	; 0x48f6 <TIMER0_voidCompOutModeChange+0x6>
    48f6:	cd b7       	in	r28, 0x3d	; 61
    48f8:	de b7       	in	r29, 0x3e	; 62
    48fa:	9a 83       	std	Y+2, r25	; 0x02
    48fc:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &= MASK_COMP_MATCH_MODE;
    48fe:	a3 e5       	ldi	r26, 0x53	; 83
    4900:	b0 e0       	ldi	r27, 0x00	; 0
    4902:	e3 e5       	ldi	r30, 0x53	; 83
    4904:	f0 e0       	ldi	r31, 0x00	; 0
    4906:	80 81       	ld	r24, Z
    4908:	8f 7c       	andi	r24, 0xCF	; 207
    490a:	8c 93       	st	X, r24
	TCCR0 |= Copy_Timer->CompOutMode<<TCCR0_COM00;
    490c:	a3 e5       	ldi	r26, 0x53	; 83
    490e:	b0 e0       	ldi	r27, 0x00	; 0
    4910:	e3 e5       	ldi	r30, 0x53	; 83
    4912:	f0 e0       	ldi	r31, 0x00	; 0
    4914:	80 81       	ld	r24, Z
    4916:	28 2f       	mov	r18, r24
    4918:	e9 81       	ldd	r30, Y+1	; 0x01
    491a:	fa 81       	ldd	r31, Y+2	; 0x02
    491c:	82 81       	ldd	r24, Z+2	; 0x02
    491e:	88 2f       	mov	r24, r24
    4920:	90 e0       	ldi	r25, 0x00	; 0
    4922:	82 95       	swap	r24
    4924:	92 95       	swap	r25
    4926:	90 7f       	andi	r25, 0xF0	; 240
    4928:	98 27       	eor	r25, r24
    492a:	80 7f       	andi	r24, 0xF0	; 240
    492c:	98 27       	eor	r25, r24
    492e:	82 2b       	or	r24, r18
    4930:	8c 93       	st	X, r24
}
    4932:	0f 90       	pop	r0
    4934:	0f 90       	pop	r0
    4936:	cf 91       	pop	r28
    4938:	df 91       	pop	r29
    493a:	08 95       	ret

0000493c <TIMER0_voidSetPreloadValue>:
void TIMER0_voidSetPreloadValue(u8 Copy_u8PreloadValue)
{
    493c:	df 93       	push	r29
    493e:	cf 93       	push	r28
    4940:	0f 92       	push	r0
    4942:	cd b7       	in	r28, 0x3d	; 61
    4944:	de b7       	in	r29, 0x3e	; 62
    4946:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8PreloadValue;
    4948:	e2 e5       	ldi	r30, 0x52	; 82
    494a:	f0 e0       	ldi	r31, 0x00	; 0
    494c:	89 81       	ldd	r24, Y+1	; 0x01
    494e:	80 83       	st	Z, r24
}
    4950:	0f 90       	pop	r0
    4952:	cf 91       	pop	r28
    4954:	df 91       	pop	r29
    4956:	08 95       	ret

00004958 <TIMER0_voidSetCompMatchValue>:

void TIMER0_voidSetCompMatchValue(u8 Copy_u8CompVal)
{
    4958:	df 93       	push	r29
    495a:	cf 93       	push	r28
    495c:	0f 92       	push	r0
    495e:	cd b7       	in	r28, 0x3d	; 61
    4960:	de b7       	in	r29, 0x3e	; 62
    4962:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CompVal;
    4964:	ec e5       	ldi	r30, 0x5C	; 92
    4966:	f0 e0       	ldi	r31, 0x00	; 0
    4968:	89 81       	ldd	r24, Y+1	; 0x01
    496a:	80 83       	st	Z, r24
}
    496c:	0f 90       	pop	r0
    496e:	cf 91       	pop	r28
    4970:	df 91       	pop	r29
    4972:	08 95       	ret

00004974 <TIMER0_u8SetCallBack>:

u8 TIMER0_u8SetCallBack(Timer_t *Copy_Timer,void (*Notifiction)())
{
    4974:	df 93       	push	r29
    4976:	cf 93       	push	r28
    4978:	cd b7       	in	r28, 0x3d	; 61
    497a:	de b7       	in	r29, 0x3e	; 62
    497c:	27 97       	sbiw	r28, 0x07	; 7
    497e:	0f b6       	in	r0, 0x3f	; 63
    4980:	f8 94       	cli
    4982:	de bf       	out	0x3e, r29	; 62
    4984:	0f be       	out	0x3f, r0	; 63
    4986:	cd bf       	out	0x3d, r28	; 61
    4988:	9b 83       	std	Y+3, r25	; 0x03
    498a:	8a 83       	std	Y+2, r24	; 0x02
    498c:	7d 83       	std	Y+5, r23	; 0x05
    498e:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK;
    4990:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_Timer!=NULL)||(Notifiction !=NULL))
    4992:	8a 81       	ldd	r24, Y+2	; 0x02
    4994:	9b 81       	ldd	r25, Y+3	; 0x03
    4996:	00 97       	sbiw	r24, 0x00	; 0
    4998:	21 f4       	brne	.+8      	; 0x49a2 <TIMER0_u8SetCallBack+0x2e>
    499a:	8c 81       	ldd	r24, Y+4	; 0x04
    499c:	9d 81       	ldd	r25, Y+5	; 0x05
    499e:	00 97       	sbiw	r24, 0x00	; 0
    49a0:	f9 f0       	breq	.+62     	; 0x49e0 <TIMER0_u8SetCallBack+0x6c>
	{

		switch(Copy_Timer->TimerMode)
    49a2:	ea 81       	ldd	r30, Y+2	; 0x02
    49a4:	fb 81       	ldd	r31, Y+3	; 0x03
    49a6:	81 81       	ldd	r24, Z+1	; 0x01
    49a8:	28 2f       	mov	r18, r24
    49aa:	30 e0       	ldi	r19, 0x00	; 0
    49ac:	3f 83       	std	Y+7, r19	; 0x07
    49ae:	2e 83       	std	Y+6, r18	; 0x06
    49b0:	8e 81       	ldd	r24, Y+6	; 0x06
    49b2:	9f 81       	ldd	r25, Y+7	; 0x07
    49b4:	00 97       	sbiw	r24, 0x00	; 0
    49b6:	31 f0       	breq	.+12     	; 0x49c4 <TIMER0_u8SetCallBack+0x50>
    49b8:	2e 81       	ldd	r18, Y+6	; 0x06
    49ba:	3f 81       	ldd	r19, Y+7	; 0x07
    49bc:	21 30       	cpi	r18, 0x01	; 1
    49be:	31 05       	cpc	r19, r1
    49c0:	41 f0       	breq	.+16     	; 0x49d2 <TIMER0_u8SetCallBack+0x5e>
    49c2:	10 c0       	rjmp	.+32     	; 0x49e4 <TIMER0_u8SetCallBack+0x70>
		{
		case TIMER0_NORMAL:TIMER_pvCallBackFunc[TIMER0_OVF] = Notifiction;
    49c4:	8c 81       	ldd	r24, Y+4	; 0x04
    49c6:	9d 81       	ldd	r25, Y+5	; 0x05
    49c8:	90 93 24 03 	sts	0x0324, r25
    49cc:	80 93 23 03 	sts	0x0323, r24
    49d0:	09 c0       	rjmp	.+18     	; 0x49e4 <TIMER0_u8SetCallBack+0x70>
		break;
		case TIMER0_CTC:TIMER_pvCallBackFunc[TIMER0_CMV] = Notifiction;
    49d2:	8c 81       	ldd	r24, Y+4	; 0x04
    49d4:	9d 81       	ldd	r25, Y+5	; 0x05
    49d6:	90 93 26 03 	sts	0x0326, r25
    49da:	80 93 25 03 	sts	0x0325, r24
    49de:	02 c0       	rjmp	.+4      	; 0x49e4 <TIMER0_u8SetCallBack+0x70>
		break;
		}

	}
	else
		Local_u8ErrorState = NULL_POINTER;
    49e0:	82 e0       	ldi	r24, 0x02	; 2
    49e2:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    49e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    49e6:	27 96       	adiw	r28, 0x07	; 7
    49e8:	0f b6       	in	r0, 0x3f	; 63
    49ea:	f8 94       	cli
    49ec:	de bf       	out	0x3e, r29	; 62
    49ee:	0f be       	out	0x3f, r0	; 63
    49f0:	cd bf       	out	0x3d, r28	; 61
    49f2:	cf 91       	pop	r28
    49f4:	df 91       	pop	r29
    49f6:	08 95       	ret

000049f8 <TIMER1_voidCompOutModeChange>:
	TIMER_voidInit(&t0);
	TIMER0_voidSetCompMatchValue((u8)((256UL*Copy_u8DutyCycle)/100UL));
}
*/
void TIMER1_voidCompOutModeChange(Timer_t *Copy_Timer)
{
    49f8:	df 93       	push	r29
    49fa:	cf 93       	push	r28
    49fc:	00 d0       	rcall	.+0      	; 0x49fe <TIMER1_voidCompOutModeChange+0x6>
    49fe:	cd b7       	in	r28, 0x3d	; 61
    4a00:	de b7       	in	r29, 0x3e	; 62
    4a02:	9a 83       	std	Y+2, r25	; 0x02
    4a04:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A &=MASK_COMP_MATCH1A_MODE;
    4a06:	af e4       	ldi	r26, 0x4F	; 79
    4a08:	b0 e0       	ldi	r27, 0x00	; 0
    4a0a:	ef e4       	ldi	r30, 0x4F	; 79
    4a0c:	f0 e0       	ldi	r31, 0x00	; 0
    4a0e:	80 81       	ld	r24, Z
    4a10:	8f 70       	andi	r24, 0x0F	; 15
    4a12:	8c 93       	st	X, r24
	TCCR1A |= Copy_Timer->CompOutMode<<TCCR1A_COM1B0;
    4a14:	af e4       	ldi	r26, 0x4F	; 79
    4a16:	b0 e0       	ldi	r27, 0x00	; 0
    4a18:	ef e4       	ldi	r30, 0x4F	; 79
    4a1a:	f0 e0       	ldi	r31, 0x00	; 0
    4a1c:	80 81       	ld	r24, Z
    4a1e:	28 2f       	mov	r18, r24
    4a20:	e9 81       	ldd	r30, Y+1	; 0x01
    4a22:	fa 81       	ldd	r31, Y+2	; 0x02
    4a24:	82 81       	ldd	r24, Z+2	; 0x02
    4a26:	88 2f       	mov	r24, r24
    4a28:	90 e0       	ldi	r25, 0x00	; 0
    4a2a:	82 95       	swap	r24
    4a2c:	92 95       	swap	r25
    4a2e:	90 7f       	andi	r25, 0xF0	; 240
    4a30:	98 27       	eor	r25, r24
    4a32:	80 7f       	andi	r24, 0xF0	; 240
    4a34:	98 27       	eor	r25, r24
    4a36:	82 2b       	or	r24, r18
    4a38:	8c 93       	st	X, r24
}
    4a3a:	0f 90       	pop	r0
    4a3c:	0f 90       	pop	r0
    4a3e:	cf 91       	pop	r28
    4a40:	df 91       	pop	r29
    4a42:	08 95       	ret

00004a44 <TIMER1_voidSetICR>:

void TIMER1_voidSetICR(u16 Copy_u16Top)
{
    4a44:	df 93       	push	r29
    4a46:	cf 93       	push	r28
    4a48:	00 d0       	rcall	.+0      	; 0x4a4a <TIMER1_voidSetICR+0x6>
    4a4a:	cd b7       	in	r28, 0x3d	; 61
    4a4c:	de b7       	in	r29, 0x3e	; 62
    4a4e:	9a 83       	std	Y+2, r25	; 0x02
    4a50:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16Top;
    4a52:	e6 e4       	ldi	r30, 0x46	; 70
    4a54:	f0 e0       	ldi	r31, 0x00	; 0
    4a56:	89 81       	ldd	r24, Y+1	; 0x01
    4a58:	9a 81       	ldd	r25, Y+2	; 0x02
    4a5a:	91 83       	std	Z+1, r25	; 0x01
    4a5c:	80 83       	st	Z, r24
}
    4a5e:	0f 90       	pop	r0
    4a60:	0f 90       	pop	r0
    4a62:	cf 91       	pop	r28
    4a64:	df 91       	pop	r29
    4a66:	08 95       	ret

00004a68 <TIMER1_voidSetPreloadValue>:
void TIMER1_voidSetPreloadValue(u16 Copy_u16PreloadValue)
{
    4a68:	df 93       	push	r29
    4a6a:	cf 93       	push	r28
    4a6c:	00 d0       	rcall	.+0      	; 0x4a6e <TIMER1_voidSetPreloadValue+0x6>
    4a6e:	cd b7       	in	r28, 0x3d	; 61
    4a70:	de b7       	in	r29, 0x3e	; 62
    4a72:	9a 83       	std	Y+2, r25	; 0x02
    4a74:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16PreloadValue;
    4a76:	ec e4       	ldi	r30, 0x4C	; 76
    4a78:	f0 e0       	ldi	r31, 0x00	; 0
    4a7a:	89 81       	ldd	r24, Y+1	; 0x01
    4a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    4a7e:	91 83       	std	Z+1, r25	; 0x01
    4a80:	80 83       	st	Z, r24
}
    4a82:	0f 90       	pop	r0
    4a84:	0f 90       	pop	r0
    4a86:	cf 91       	pop	r28
    4a88:	df 91       	pop	r29
    4a8a:	08 95       	ret

00004a8c <TIMER1_voidSetChannelACompMatch>:

void TIMER1_voidSetChannelACompMatch(u16 Copy_u16CompVal)
{
    4a8c:	df 93       	push	r29
    4a8e:	cf 93       	push	r28
    4a90:	00 d0       	rcall	.+0      	; 0x4a92 <TIMER1_voidSetChannelACompMatch+0x6>
    4a92:	cd b7       	in	r28, 0x3d	; 61
    4a94:	de b7       	in	r29, 0x3e	; 62
    4a96:	9a 83       	std	Y+2, r25	; 0x02
    4a98:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompVal;
    4a9a:	ea e4       	ldi	r30, 0x4A	; 74
    4a9c:	f0 e0       	ldi	r31, 0x00	; 0
    4a9e:	89 81       	ldd	r24, Y+1	; 0x01
    4aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    4aa2:	91 83       	std	Z+1, r25	; 0x01
    4aa4:	80 83       	st	Z, r24
}
    4aa6:	0f 90       	pop	r0
    4aa8:	0f 90       	pop	r0
    4aaa:	cf 91       	pop	r28
    4aac:	df 91       	pop	r29
    4aae:	08 95       	ret

00004ab0 <TIMER1_voidSetChannelBCompMatch>:
void TIMER1_voidSetChannelBCompMatch(u16 Copy_u16CompVal)
{
    4ab0:	df 93       	push	r29
    4ab2:	cf 93       	push	r28
    4ab4:	00 d0       	rcall	.+0      	; 0x4ab6 <TIMER1_voidSetChannelBCompMatch+0x6>
    4ab6:	cd b7       	in	r28, 0x3d	; 61
    4ab8:	de b7       	in	r29, 0x3e	; 62
    4aba:	9a 83       	std	Y+2, r25	; 0x02
    4abc:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Copy_u16CompVal;
    4abe:	e8 e4       	ldi	r30, 0x48	; 72
    4ac0:	f0 e0       	ldi	r31, 0x00	; 0
    4ac2:	89 81       	ldd	r24, Y+1	; 0x01
    4ac4:	9a 81       	ldd	r25, Y+2	; 0x02
    4ac6:	91 83       	std	Z+1, r25	; 0x01
    4ac8:	80 83       	st	Z, r24
}
    4aca:	0f 90       	pop	r0
    4acc:	0f 90       	pop	r0
    4ace:	cf 91       	pop	r28
    4ad0:	df 91       	pop	r29
    4ad2:	08 95       	ret

00004ad4 <TIMER1_u8SetCallBack>:
u8 TIMER1_u8SetCallBack(Timer_t *Copy_Timer,void(*Notifiction)())
{
    4ad4:	df 93       	push	r29
    4ad6:	cf 93       	push	r28
    4ad8:	cd b7       	in	r28, 0x3d	; 61
    4ada:	de b7       	in	r29, 0x3e	; 62
    4adc:	29 97       	sbiw	r28, 0x09	; 9
    4ade:	0f b6       	in	r0, 0x3f	; 63
    4ae0:	f8 94       	cli
    4ae2:	de bf       	out	0x3e, r29	; 62
    4ae4:	0f be       	out	0x3f, r0	; 63
    4ae6:	cd bf       	out	0x3d, r28	; 61
    4ae8:	9b 83       	std	Y+3, r25	; 0x03
    4aea:	8a 83       	std	Y+2, r24	; 0x02
    4aec:	7d 83       	std	Y+5, r23	; 0x05
    4aee:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK;
    4af0:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_Timer!=NULL)||(Notifiction !=NULL))
    4af2:	8a 81       	ldd	r24, Y+2	; 0x02
    4af4:	9b 81       	ldd	r25, Y+3	; 0x03
    4af6:	00 97       	sbiw	r24, 0x00	; 0
    4af8:	29 f4       	brne	.+10     	; 0x4b04 <TIMER1_u8SetCallBack+0x30>
    4afa:	8c 81       	ldd	r24, Y+4	; 0x04
    4afc:	9d 81       	ldd	r25, Y+5	; 0x05
    4afe:	00 97       	sbiw	r24, 0x00	; 0
    4b00:	09 f4       	brne	.+2      	; 0x4b04 <TIMER1_u8SetCallBack+0x30>
    4b02:	5b c0       	rjmp	.+182    	; 0x4bba <TIMER1_u8SetCallBack+0xe6>
	{
		switch(Copy_Timer->TimerMode)
    4b04:	ea 81       	ldd	r30, Y+2	; 0x02
    4b06:	fb 81       	ldd	r31, Y+3	; 0x03
    4b08:	81 81       	ldd	r24, Z+1	; 0x01
    4b0a:	28 2f       	mov	r18, r24
    4b0c:	30 e0       	ldi	r19, 0x00	; 0
    4b0e:	39 87       	std	Y+9, r19	; 0x09
    4b10:	28 87       	std	Y+8, r18	; 0x08
    4b12:	88 85       	ldd	r24, Y+8	; 0x08
    4b14:	99 85       	ldd	r25, Y+9	; 0x09
    4b16:	84 30       	cpi	r24, 0x04	; 4
    4b18:	91 05       	cpc	r25, r1
    4b1a:	91 f0       	breq	.+36     	; 0x4b40 <TIMER1_u8SetCallBack+0x6c>
    4b1c:	28 85       	ldd	r18, Y+8	; 0x08
    4b1e:	39 85       	ldd	r19, Y+9	; 0x09
    4b20:	2c 30       	cpi	r18, 0x0C	; 12
    4b22:	31 05       	cpc	r19, r1
    4b24:	09 f4       	brne	.+2      	; 0x4b28 <TIMER1_u8SetCallBack+0x54>
    4b26:	42 c0       	rjmp	.+132    	; 0x4bac <TIMER1_u8SetCallBack+0xd8>
    4b28:	88 85       	ldd	r24, Y+8	; 0x08
    4b2a:	99 85       	ldd	r25, Y+9	; 0x09
    4b2c:	00 97       	sbiw	r24, 0x00	; 0
    4b2e:	09 f0       	breq	.+2      	; 0x4b32 <TIMER1_u8SetCallBack+0x5e>
    4b30:	46 c0       	rjmp	.+140    	; 0x4bbe <TIMER1_u8SetCallBack+0xea>
		{
		case TIMER1_NORMAL:TIMER_pvCallBackFunc[TIMER1_OVF] = Notifiction;
    4b32:	8c 81       	ldd	r24, Y+4	; 0x04
    4b34:	9d 81       	ldd	r25, Y+5	; 0x05
    4b36:	90 93 28 03 	sts	0x0328, r25
    4b3a:	80 93 27 03 	sts	0x0327, r24
    4b3e:	3f c0       	rjmp	.+126    	; 0x4bbe <TIMER1_u8SetCallBack+0xea>
		break;
		case TIMER1_CTC:
			switch(Copy_Timer->CompOutMode)
    4b40:	ea 81       	ldd	r30, Y+2	; 0x02
    4b42:	fb 81       	ldd	r31, Y+3	; 0x03
    4b44:	82 81       	ldd	r24, Z+2	; 0x02
    4b46:	28 2f       	mov	r18, r24
    4b48:	30 e0       	ldi	r19, 0x00	; 0
    4b4a:	3f 83       	std	Y+7, r19	; 0x07
    4b4c:	2e 83       	std	Y+6, r18	; 0x06
    4b4e:	8e 81       	ldd	r24, Y+6	; 0x06
    4b50:	9f 81       	ldd	r25, Y+7	; 0x07
    4b52:	84 30       	cpi	r24, 0x04	; 4
    4b54:	91 05       	cpc	r25, r1
    4b56:	a1 f0       	breq	.+40     	; 0x4b80 <TIMER1_u8SetCallBack+0xac>
    4b58:	2e 81       	ldd	r18, Y+6	; 0x06
    4b5a:	3f 81       	ldd	r19, Y+7	; 0x07
    4b5c:	25 30       	cpi	r18, 0x05	; 5
    4b5e:	31 05       	cpc	r19, r1
    4b60:	2c f4       	brge	.+10     	; 0x4b6c <TIMER1_u8SetCallBack+0x98>
    4b62:	8e 81       	ldd	r24, Y+6	; 0x06
    4b64:	9f 81       	ldd	r25, Y+7	; 0x07
    4b66:	00 97       	sbiw	r24, 0x00	; 0
    4b68:	59 f0       	breq	.+22     	; 0x4b80 <TIMER1_u8SetCallBack+0xac>
    4b6a:	10 c0       	rjmp	.+32     	; 0x4b8c <TIMER1_u8SetCallBack+0xb8>
    4b6c:	2e 81       	ldd	r18, Y+6	; 0x06
    4b6e:	3f 81       	ldd	r19, Y+7	; 0x07
    4b70:	28 30       	cpi	r18, 0x08	; 8
    4b72:	31 05       	cpc	r19, r1
    4b74:	29 f0       	breq	.+10     	; 0x4b80 <TIMER1_u8SetCallBack+0xac>
    4b76:	8e 81       	ldd	r24, Y+6	; 0x06
    4b78:	9f 81       	ldd	r25, Y+7	; 0x07
    4b7a:	8c 30       	cpi	r24, 0x0C	; 12
    4b7c:	91 05       	cpc	r25, r1
    4b7e:	31 f4       	brne	.+12     	; 0x4b8c <TIMER1_u8SetCallBack+0xb8>
			{
			case OC1A_DIS:case OC1A_TOG:case OC1A_CLR:case OC1A_SET:
				TIMER_pvCallBackFunc[TIMER1A_CMV] = Notifiction;
    4b80:	8c 81       	ldd	r24, Y+4	; 0x04
    4b82:	9d 81       	ldd	r25, Y+5	; 0x05
    4b84:	90 93 2a 03 	sts	0x032A, r25
    4b88:	80 93 29 03 	sts	0x0329, r24
				break;
			}
			switch(Copy_Timer->CompOutMode)
    4b8c:	ea 81       	ldd	r30, Y+2	; 0x02
    4b8e:	fb 81       	ldd	r31, Y+3	; 0x03
    4b90:	82 81       	ldd	r24, Z+2	; 0x02
    4b92:	88 2f       	mov	r24, r24
    4b94:	90 e0       	ldi	r25, 0x00	; 0
    4b96:	00 96       	adiw	r24, 0x00	; 0
    4b98:	84 30       	cpi	r24, 0x04	; 4
    4b9a:	91 05       	cpc	r25, r1
    4b9c:	80 f4       	brcc	.+32     	; 0x4bbe <TIMER1_u8SetCallBack+0xea>
			{
			case OC1B_DIS:case OC1B_TOG:case OC1B_CLR:case OC1B_SET:
				TIMER_pvCallBackFunc[TIMER1B_CMV] = Notifiction;
    4b9e:	8c 81       	ldd	r24, Y+4	; 0x04
    4ba0:	9d 81       	ldd	r25, Y+5	; 0x05
    4ba2:	90 93 2c 03 	sts	0x032C, r25
    4ba6:	80 93 2b 03 	sts	0x032B, r24
    4baa:	09 c0       	rjmp	.+18     	; 0x4bbe <TIMER1_u8SetCallBack+0xea>
				break;
			}
			break;
		case TIMER1_IC_CTC:
			TIMER_pvCallBackFunc[TIMER1_CAPT] = Notifiction;
    4bac:	8c 81       	ldd	r24, Y+4	; 0x04
    4bae:	9d 81       	ldd	r25, Y+5	; 0x05
    4bb0:	90 93 2e 03 	sts	0x032E, r25
    4bb4:	80 93 2d 03 	sts	0x032D, r24
    4bb8:	02 c0       	rjmp	.+4      	; 0x4bbe <TIMER1_u8SetCallBack+0xea>
			break;

		}
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    4bba:	82 e0       	ldi	r24, 0x02	; 2
    4bbc:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    4bbe:	89 81       	ldd	r24, Y+1	; 0x01
}
    4bc0:	29 96       	adiw	r28, 0x09	; 9
    4bc2:	0f b6       	in	r0, 0x3f	; 63
    4bc4:	f8 94       	cli
    4bc6:	de bf       	out	0x3e, r29	; 62
    4bc8:	0f be       	out	0x3f, r0	; 63
    4bca:	cd bf       	out	0x3d, r28	; 61
    4bcc:	cf 91       	pop	r28
    4bce:	df 91       	pop	r29
    4bd0:	08 95       	ret

00004bd2 <TIMER2_voidCompOutModeChange>:
void TIMER2_voidCompOutModeChange(Timer_t *Copy_Timer)
{
    4bd2:	df 93       	push	r29
    4bd4:	cf 93       	push	r28
    4bd6:	00 d0       	rcall	.+0      	; 0x4bd8 <TIMER2_voidCompOutModeChange+0x6>
    4bd8:	cd b7       	in	r28, 0x3d	; 61
    4bda:	de b7       	in	r29, 0x3e	; 62
    4bdc:	9a 83       	std	Y+2, r25	; 0x02
    4bde:	89 83       	std	Y+1, r24	; 0x01
	TCCR2 &= MASK_COMP_MATCH_MODE;
    4be0:	a5 e4       	ldi	r26, 0x45	; 69
    4be2:	b0 e0       	ldi	r27, 0x00	; 0
    4be4:	e5 e4       	ldi	r30, 0x45	; 69
    4be6:	f0 e0       	ldi	r31, 0x00	; 0
    4be8:	80 81       	ld	r24, Z
    4bea:	8f 7c       	andi	r24, 0xCF	; 207
    4bec:	8c 93       	st	X, r24
	TCCR2 |= Copy_Timer->CompOutMode<<TCCR2_COM20;
    4bee:	a5 e4       	ldi	r26, 0x45	; 69
    4bf0:	b0 e0       	ldi	r27, 0x00	; 0
    4bf2:	e5 e4       	ldi	r30, 0x45	; 69
    4bf4:	f0 e0       	ldi	r31, 0x00	; 0
    4bf6:	80 81       	ld	r24, Z
    4bf8:	28 2f       	mov	r18, r24
    4bfa:	e9 81       	ldd	r30, Y+1	; 0x01
    4bfc:	fa 81       	ldd	r31, Y+2	; 0x02
    4bfe:	82 81       	ldd	r24, Z+2	; 0x02
    4c00:	88 2f       	mov	r24, r24
    4c02:	90 e0       	ldi	r25, 0x00	; 0
    4c04:	82 95       	swap	r24
    4c06:	92 95       	swap	r25
    4c08:	90 7f       	andi	r25, 0xF0	; 240
    4c0a:	98 27       	eor	r25, r24
    4c0c:	80 7f       	andi	r24, 0xF0	; 240
    4c0e:	98 27       	eor	r25, r24
    4c10:	82 2b       	or	r24, r18
    4c12:	8c 93       	st	X, r24
}
    4c14:	0f 90       	pop	r0
    4c16:	0f 90       	pop	r0
    4c18:	cf 91       	pop	r28
    4c1a:	df 91       	pop	r29
    4c1c:	08 95       	ret

00004c1e <TIMER2_voidSetPreloadValue>:
void TIMER2_voidSetPreloadValue(u8 Copy_u8PreloadValue)
{
    4c1e:	df 93       	push	r29
    4c20:	cf 93       	push	r28
    4c22:	0f 92       	push	r0
    4c24:	cd b7       	in	r28, 0x3d	; 61
    4c26:	de b7       	in	r29, 0x3e	; 62
    4c28:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_u8PreloadValue;
    4c2a:	e4 e4       	ldi	r30, 0x44	; 68
    4c2c:	f0 e0       	ldi	r31, 0x00	; 0
    4c2e:	89 81       	ldd	r24, Y+1	; 0x01
    4c30:	80 83       	st	Z, r24
}
    4c32:	0f 90       	pop	r0
    4c34:	cf 91       	pop	r28
    4c36:	df 91       	pop	r29
    4c38:	08 95       	ret

00004c3a <TIMER2_voidSetCompMatchValue>:
void TIMER2_voidSetCompMatchValue(u8 Copy_u8CompVal)
{
    4c3a:	df 93       	push	r29
    4c3c:	cf 93       	push	r28
    4c3e:	0f 92       	push	r0
    4c40:	cd b7       	in	r28, 0x3d	; 61
    4c42:	de b7       	in	r29, 0x3e	; 62
    4c44:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8CompVal;
    4c46:	e3 e4       	ldi	r30, 0x43	; 67
    4c48:	f0 e0       	ldi	r31, 0x00	; 0
    4c4a:	89 81       	ldd	r24, Y+1	; 0x01
    4c4c:	80 83       	st	Z, r24
}
    4c4e:	0f 90       	pop	r0
    4c50:	cf 91       	pop	r28
    4c52:	df 91       	pop	r29
    4c54:	08 95       	ret

00004c56 <TIMER2_u8SetCallBack>:
u8 TIMER2_u8SetCallBack(Timer_t *Copy_Timer,void (*Notifiction)())
{
    4c56:	df 93       	push	r29
    4c58:	cf 93       	push	r28
    4c5a:	cd b7       	in	r28, 0x3d	; 61
    4c5c:	de b7       	in	r29, 0x3e	; 62
    4c5e:	27 97       	sbiw	r28, 0x07	; 7
    4c60:	0f b6       	in	r0, 0x3f	; 63
    4c62:	f8 94       	cli
    4c64:	de bf       	out	0x3e, r29	; 62
    4c66:	0f be       	out	0x3f, r0	; 63
    4c68:	cd bf       	out	0x3d, r28	; 61
    4c6a:	9b 83       	std	Y+3, r25	; 0x03
    4c6c:	8a 83       	std	Y+2, r24	; 0x02
    4c6e:	7d 83       	std	Y+5, r23	; 0x05
    4c70:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK;
    4c72:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_Timer!=NULL)||(Notifiction !=NULL))
    4c74:	8a 81       	ldd	r24, Y+2	; 0x02
    4c76:	9b 81       	ldd	r25, Y+3	; 0x03
    4c78:	00 97       	sbiw	r24, 0x00	; 0
    4c7a:	21 f4       	brne	.+8      	; 0x4c84 <TIMER2_u8SetCallBack+0x2e>
    4c7c:	8c 81       	ldd	r24, Y+4	; 0x04
    4c7e:	9d 81       	ldd	r25, Y+5	; 0x05
    4c80:	00 97       	sbiw	r24, 0x00	; 0
    4c82:	f9 f0       	breq	.+62     	; 0x4cc2 <TIMER2_u8SetCallBack+0x6c>
	{
		switch(Copy_Timer->TimerMode)
    4c84:	ea 81       	ldd	r30, Y+2	; 0x02
    4c86:	fb 81       	ldd	r31, Y+3	; 0x03
    4c88:	81 81       	ldd	r24, Z+1	; 0x01
    4c8a:	28 2f       	mov	r18, r24
    4c8c:	30 e0       	ldi	r19, 0x00	; 0
    4c8e:	3f 83       	std	Y+7, r19	; 0x07
    4c90:	2e 83       	std	Y+6, r18	; 0x06
    4c92:	8e 81       	ldd	r24, Y+6	; 0x06
    4c94:	9f 81       	ldd	r25, Y+7	; 0x07
    4c96:	00 97       	sbiw	r24, 0x00	; 0
    4c98:	31 f0       	breq	.+12     	; 0x4ca6 <TIMER2_u8SetCallBack+0x50>
    4c9a:	2e 81       	ldd	r18, Y+6	; 0x06
    4c9c:	3f 81       	ldd	r19, Y+7	; 0x07
    4c9e:	21 30       	cpi	r18, 0x01	; 1
    4ca0:	31 05       	cpc	r19, r1
    4ca2:	41 f0       	breq	.+16     	; 0x4cb4 <TIMER2_u8SetCallBack+0x5e>
    4ca4:	10 c0       	rjmp	.+32     	; 0x4cc6 <TIMER2_u8SetCallBack+0x70>
		{
		case TIMER2_NORMAL:TIMER_pvCallBackFunc[TIMER2_OVF] = Notifiction;
    4ca6:	8c 81       	ldd	r24, Y+4	; 0x04
    4ca8:	9d 81       	ldd	r25, Y+5	; 0x05
    4caa:	90 93 30 03 	sts	0x0330, r25
    4cae:	80 93 2f 03 	sts	0x032F, r24
    4cb2:	09 c0       	rjmp	.+18     	; 0x4cc6 <TIMER2_u8SetCallBack+0x70>
		break;
		case TIMER2_CTC:TIMER_pvCallBackFunc[TIMER2_CMV] = Notifiction;
    4cb4:	8c 81       	ldd	r24, Y+4	; 0x04
    4cb6:	9d 81       	ldd	r25, Y+5	; 0x05
    4cb8:	90 93 32 03 	sts	0x0332, r25
    4cbc:	80 93 31 03 	sts	0x0331, r24
    4cc0:	02 c0       	rjmp	.+4      	; 0x4cc6 <TIMER2_u8SetCallBack+0x70>
		break;
		}

	}
	else
		Local_u8ErrorState = NULL_POINTER;
    4cc2:	82 e0       	ldi	r24, 0x02	; 2
    4cc4:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    4cc6:	89 81       	ldd	r24, Y+1	; 0x01
}
    4cc8:	27 96       	adiw	r28, 0x07	; 7
    4cca:	0f b6       	in	r0, 0x3f	; 63
    4ccc:	f8 94       	cli
    4cce:	de bf       	out	0x3e, r29	; 62
    4cd0:	0f be       	out	0x3f, r0	; 63
    4cd2:	cd bf       	out	0x3d, r28	; 61
    4cd4:	cf 91       	pop	r28
    4cd6:	df 91       	pop	r29
    4cd8:	08 95       	ret

00004cda <__vector_10>:
// CTC timer/counter0
void __vector_10 (void)	__attribute__((signal));
void __vector_10 (void)
{
    4cda:	1f 92       	push	r1
    4cdc:	0f 92       	push	r0
    4cde:	0f b6       	in	r0, 0x3f	; 63
    4ce0:	0f 92       	push	r0
    4ce2:	11 24       	eor	r1, r1
    4ce4:	2f 93       	push	r18
    4ce6:	3f 93       	push	r19
    4ce8:	4f 93       	push	r20
    4cea:	5f 93       	push	r21
    4cec:	6f 93       	push	r22
    4cee:	7f 93       	push	r23
    4cf0:	8f 93       	push	r24
    4cf2:	9f 93       	push	r25
    4cf4:	af 93       	push	r26
    4cf6:	bf 93       	push	r27
    4cf8:	ef 93       	push	r30
    4cfa:	ff 93       	push	r31
    4cfc:	df 93       	push	r29
    4cfe:	cf 93       	push	r28
    4d00:	cd b7       	in	r28, 0x3d	; 61
    4d02:	de b7       	in	r29, 0x3e	; 62
	TIMER_pvCallBackFunc[TIMER0_CMV]();
    4d04:	e0 91 25 03 	lds	r30, 0x0325
    4d08:	f0 91 26 03 	lds	r31, 0x0326
    4d0c:	09 95       	icall

}
    4d0e:	cf 91       	pop	r28
    4d10:	df 91       	pop	r29
    4d12:	ff 91       	pop	r31
    4d14:	ef 91       	pop	r30
    4d16:	bf 91       	pop	r27
    4d18:	af 91       	pop	r26
    4d1a:	9f 91       	pop	r25
    4d1c:	8f 91       	pop	r24
    4d1e:	7f 91       	pop	r23
    4d20:	6f 91       	pop	r22
    4d22:	5f 91       	pop	r21
    4d24:	4f 91       	pop	r20
    4d26:	3f 91       	pop	r19
    4d28:	2f 91       	pop	r18
    4d2a:	0f 90       	pop	r0
    4d2c:	0f be       	out	0x3f, r0	; 63
    4d2e:	0f 90       	pop	r0
    4d30:	1f 90       	pop	r1
    4d32:	18 95       	reti

00004d34 <__vector_11>:
// OVF timer/counter0
void __vector_11 (void)	__attribute__((signal));
void __vector_11 (void)
{
    4d34:	1f 92       	push	r1
    4d36:	0f 92       	push	r0
    4d38:	0f b6       	in	r0, 0x3f	; 63
    4d3a:	0f 92       	push	r0
    4d3c:	11 24       	eor	r1, r1
    4d3e:	2f 93       	push	r18
    4d40:	3f 93       	push	r19
    4d42:	4f 93       	push	r20
    4d44:	5f 93       	push	r21
    4d46:	6f 93       	push	r22
    4d48:	7f 93       	push	r23
    4d4a:	8f 93       	push	r24
    4d4c:	9f 93       	push	r25
    4d4e:	af 93       	push	r26
    4d50:	bf 93       	push	r27
    4d52:	ef 93       	push	r30
    4d54:	ff 93       	push	r31
    4d56:	df 93       	push	r29
    4d58:	cf 93       	push	r28
    4d5a:	cd b7       	in	r28, 0x3d	; 61
    4d5c:	de b7       	in	r29, 0x3e	; 62
	TIMER_pvCallBackFunc[TIMER0_OVF]();
    4d5e:	e0 91 23 03 	lds	r30, 0x0323
    4d62:	f0 91 24 03 	lds	r31, 0x0324
    4d66:	09 95       	icall

}
    4d68:	cf 91       	pop	r28
    4d6a:	df 91       	pop	r29
    4d6c:	ff 91       	pop	r31
    4d6e:	ef 91       	pop	r30
    4d70:	bf 91       	pop	r27
    4d72:	af 91       	pop	r26
    4d74:	9f 91       	pop	r25
    4d76:	8f 91       	pop	r24
    4d78:	7f 91       	pop	r23
    4d7a:	6f 91       	pop	r22
    4d7c:	5f 91       	pop	r21
    4d7e:	4f 91       	pop	r20
    4d80:	3f 91       	pop	r19
    4d82:	2f 91       	pop	r18
    4d84:	0f 90       	pop	r0
    4d86:	0f be       	out	0x3f, r0	; 63
    4d88:	0f 90       	pop	r0
    4d8a:	1f 90       	pop	r1
    4d8c:	18 95       	reti

00004d8e <__vector_7>:
// CTC timer/counter1A
void __vector_7 (void)	__attribute__((signal));
void __vector_7 (void)
{
    4d8e:	1f 92       	push	r1
    4d90:	0f 92       	push	r0
    4d92:	0f b6       	in	r0, 0x3f	; 63
    4d94:	0f 92       	push	r0
    4d96:	11 24       	eor	r1, r1
    4d98:	2f 93       	push	r18
    4d9a:	3f 93       	push	r19
    4d9c:	4f 93       	push	r20
    4d9e:	5f 93       	push	r21
    4da0:	6f 93       	push	r22
    4da2:	7f 93       	push	r23
    4da4:	8f 93       	push	r24
    4da6:	9f 93       	push	r25
    4da8:	af 93       	push	r26
    4daa:	bf 93       	push	r27
    4dac:	ef 93       	push	r30
    4dae:	ff 93       	push	r31
    4db0:	df 93       	push	r29
    4db2:	cf 93       	push	r28
    4db4:	cd b7       	in	r28, 0x3d	; 61
    4db6:	de b7       	in	r29, 0x3e	; 62
	TIMER_pvCallBackFunc[TIMER1A_CMV]();
    4db8:	e0 91 29 03 	lds	r30, 0x0329
    4dbc:	f0 91 2a 03 	lds	r31, 0x032A
    4dc0:	09 95       	icall
}
    4dc2:	cf 91       	pop	r28
    4dc4:	df 91       	pop	r29
    4dc6:	ff 91       	pop	r31
    4dc8:	ef 91       	pop	r30
    4dca:	bf 91       	pop	r27
    4dcc:	af 91       	pop	r26
    4dce:	9f 91       	pop	r25
    4dd0:	8f 91       	pop	r24
    4dd2:	7f 91       	pop	r23
    4dd4:	6f 91       	pop	r22
    4dd6:	5f 91       	pop	r21
    4dd8:	4f 91       	pop	r20
    4dda:	3f 91       	pop	r19
    4ddc:	2f 91       	pop	r18
    4dde:	0f 90       	pop	r0
    4de0:	0f be       	out	0x3f, r0	; 63
    4de2:	0f 90       	pop	r0
    4de4:	1f 90       	pop	r1
    4de6:	18 95       	reti

00004de8 <__vector_8>:
// CTC timer/counter1B
void __vector_8 (void)	__attribute__((signal));
void __vector_8 (void)
{
    4de8:	1f 92       	push	r1
    4dea:	0f 92       	push	r0
    4dec:	0f b6       	in	r0, 0x3f	; 63
    4dee:	0f 92       	push	r0
    4df0:	11 24       	eor	r1, r1
    4df2:	2f 93       	push	r18
    4df4:	3f 93       	push	r19
    4df6:	4f 93       	push	r20
    4df8:	5f 93       	push	r21
    4dfa:	6f 93       	push	r22
    4dfc:	7f 93       	push	r23
    4dfe:	8f 93       	push	r24
    4e00:	9f 93       	push	r25
    4e02:	af 93       	push	r26
    4e04:	bf 93       	push	r27
    4e06:	ef 93       	push	r30
    4e08:	ff 93       	push	r31
    4e0a:	df 93       	push	r29
    4e0c:	cf 93       	push	r28
    4e0e:	cd b7       	in	r28, 0x3d	; 61
    4e10:	de b7       	in	r29, 0x3e	; 62
	TIMER_pvCallBackFunc[TIMER1B_CMV]();
    4e12:	e0 91 2b 03 	lds	r30, 0x032B
    4e16:	f0 91 2c 03 	lds	r31, 0x032C
    4e1a:	09 95       	icall
}
    4e1c:	cf 91       	pop	r28
    4e1e:	df 91       	pop	r29
    4e20:	ff 91       	pop	r31
    4e22:	ef 91       	pop	r30
    4e24:	bf 91       	pop	r27
    4e26:	af 91       	pop	r26
    4e28:	9f 91       	pop	r25
    4e2a:	8f 91       	pop	r24
    4e2c:	7f 91       	pop	r23
    4e2e:	6f 91       	pop	r22
    4e30:	5f 91       	pop	r21
    4e32:	4f 91       	pop	r20
    4e34:	3f 91       	pop	r19
    4e36:	2f 91       	pop	r18
    4e38:	0f 90       	pop	r0
    4e3a:	0f be       	out	0x3f, r0	; 63
    4e3c:	0f 90       	pop	r0
    4e3e:	1f 90       	pop	r1
    4e40:	18 95       	reti

00004e42 <__vector_9>:
// OVF timer/counter1
void __vector_9 (void)	__attribute__((signal));
void __vector_9 (void)
{
    4e42:	1f 92       	push	r1
    4e44:	0f 92       	push	r0
    4e46:	0f b6       	in	r0, 0x3f	; 63
    4e48:	0f 92       	push	r0
    4e4a:	11 24       	eor	r1, r1
    4e4c:	2f 93       	push	r18
    4e4e:	3f 93       	push	r19
    4e50:	4f 93       	push	r20
    4e52:	5f 93       	push	r21
    4e54:	6f 93       	push	r22
    4e56:	7f 93       	push	r23
    4e58:	8f 93       	push	r24
    4e5a:	9f 93       	push	r25
    4e5c:	af 93       	push	r26
    4e5e:	bf 93       	push	r27
    4e60:	ef 93       	push	r30
    4e62:	ff 93       	push	r31
    4e64:	df 93       	push	r29
    4e66:	cf 93       	push	r28
    4e68:	cd b7       	in	r28, 0x3d	; 61
    4e6a:	de b7       	in	r29, 0x3e	; 62
	TIMER_pvCallBackFunc[TIMER1_OVF]();
    4e6c:	e0 91 27 03 	lds	r30, 0x0327
    4e70:	f0 91 28 03 	lds	r31, 0x0328
    4e74:	09 95       	icall
}
    4e76:	cf 91       	pop	r28
    4e78:	df 91       	pop	r29
    4e7a:	ff 91       	pop	r31
    4e7c:	ef 91       	pop	r30
    4e7e:	bf 91       	pop	r27
    4e80:	af 91       	pop	r26
    4e82:	9f 91       	pop	r25
    4e84:	8f 91       	pop	r24
    4e86:	7f 91       	pop	r23
    4e88:	6f 91       	pop	r22
    4e8a:	5f 91       	pop	r21
    4e8c:	4f 91       	pop	r20
    4e8e:	3f 91       	pop	r19
    4e90:	2f 91       	pop	r18
    4e92:	0f 90       	pop	r0
    4e94:	0f be       	out	0x3f, r0	; 63
    4e96:	0f 90       	pop	r0
    4e98:	1f 90       	pop	r1
    4e9a:	18 95       	reti

00004e9c <__vector_6>:


// Capture CTC Event timer/counter1
void __vector_6 (void)	__attribute__((signal));
void __vector_6 (void)
{
    4e9c:	1f 92       	push	r1
    4e9e:	0f 92       	push	r0
    4ea0:	0f b6       	in	r0, 0x3f	; 63
    4ea2:	0f 92       	push	r0
    4ea4:	11 24       	eor	r1, r1
    4ea6:	2f 93       	push	r18
    4ea8:	3f 93       	push	r19
    4eaa:	4f 93       	push	r20
    4eac:	5f 93       	push	r21
    4eae:	6f 93       	push	r22
    4eb0:	7f 93       	push	r23
    4eb2:	8f 93       	push	r24
    4eb4:	9f 93       	push	r25
    4eb6:	af 93       	push	r26
    4eb8:	bf 93       	push	r27
    4eba:	ef 93       	push	r30
    4ebc:	ff 93       	push	r31
    4ebe:	df 93       	push	r29
    4ec0:	cf 93       	push	r28
    4ec2:	cd b7       	in	r28, 0x3d	; 61
    4ec4:	de b7       	in	r29, 0x3e	; 62
	TIMER_pvCallBackFunc[TIMER1_CAPT]();
    4ec6:	e0 91 2d 03 	lds	r30, 0x032D
    4eca:	f0 91 2e 03 	lds	r31, 0x032E
    4ece:	09 95       	icall
}
    4ed0:	cf 91       	pop	r28
    4ed2:	df 91       	pop	r29
    4ed4:	ff 91       	pop	r31
    4ed6:	ef 91       	pop	r30
    4ed8:	bf 91       	pop	r27
    4eda:	af 91       	pop	r26
    4edc:	9f 91       	pop	r25
    4ede:	8f 91       	pop	r24
    4ee0:	7f 91       	pop	r23
    4ee2:	6f 91       	pop	r22
    4ee4:	5f 91       	pop	r21
    4ee6:	4f 91       	pop	r20
    4ee8:	3f 91       	pop	r19
    4eea:	2f 91       	pop	r18
    4eec:	0f 90       	pop	r0
    4eee:	0f be       	out	0x3f, r0	; 63
    4ef0:	0f 90       	pop	r0
    4ef2:	1f 90       	pop	r1
    4ef4:	18 95       	reti

00004ef6 <__vector_5>:

// OVF timer/counter2
void __vector_5 (void)	__attribute__((signal));
void __vector_5 (void)
{
    4ef6:	1f 92       	push	r1
    4ef8:	0f 92       	push	r0
    4efa:	0f b6       	in	r0, 0x3f	; 63
    4efc:	0f 92       	push	r0
    4efe:	11 24       	eor	r1, r1
    4f00:	2f 93       	push	r18
    4f02:	3f 93       	push	r19
    4f04:	4f 93       	push	r20
    4f06:	5f 93       	push	r21
    4f08:	6f 93       	push	r22
    4f0a:	7f 93       	push	r23
    4f0c:	8f 93       	push	r24
    4f0e:	9f 93       	push	r25
    4f10:	af 93       	push	r26
    4f12:	bf 93       	push	r27
    4f14:	ef 93       	push	r30
    4f16:	ff 93       	push	r31
    4f18:	df 93       	push	r29
    4f1a:	cf 93       	push	r28
    4f1c:	cd b7       	in	r28, 0x3d	; 61
    4f1e:	de b7       	in	r29, 0x3e	; 62
	TIMER_pvCallBackFunc[TIMER2_OVF]();
    4f20:	e0 91 2f 03 	lds	r30, 0x032F
    4f24:	f0 91 30 03 	lds	r31, 0x0330
    4f28:	09 95       	icall
}
    4f2a:	cf 91       	pop	r28
    4f2c:	df 91       	pop	r29
    4f2e:	ff 91       	pop	r31
    4f30:	ef 91       	pop	r30
    4f32:	bf 91       	pop	r27
    4f34:	af 91       	pop	r26
    4f36:	9f 91       	pop	r25
    4f38:	8f 91       	pop	r24
    4f3a:	7f 91       	pop	r23
    4f3c:	6f 91       	pop	r22
    4f3e:	5f 91       	pop	r21
    4f40:	4f 91       	pop	r20
    4f42:	3f 91       	pop	r19
    4f44:	2f 91       	pop	r18
    4f46:	0f 90       	pop	r0
    4f48:	0f be       	out	0x3f, r0	; 63
    4f4a:	0f 90       	pop	r0
    4f4c:	1f 90       	pop	r1
    4f4e:	18 95       	reti

00004f50 <__vector_4>:
// CTC timer/counter2
void __vector_4 (void)	__attribute__((signal));
void __vector_4 (void)
{
    4f50:	1f 92       	push	r1
    4f52:	0f 92       	push	r0
    4f54:	0f b6       	in	r0, 0x3f	; 63
    4f56:	0f 92       	push	r0
    4f58:	11 24       	eor	r1, r1
    4f5a:	2f 93       	push	r18
    4f5c:	3f 93       	push	r19
    4f5e:	4f 93       	push	r20
    4f60:	5f 93       	push	r21
    4f62:	6f 93       	push	r22
    4f64:	7f 93       	push	r23
    4f66:	8f 93       	push	r24
    4f68:	9f 93       	push	r25
    4f6a:	af 93       	push	r26
    4f6c:	bf 93       	push	r27
    4f6e:	ef 93       	push	r30
    4f70:	ff 93       	push	r31
    4f72:	df 93       	push	r29
    4f74:	cf 93       	push	r28
    4f76:	cd b7       	in	r28, 0x3d	; 61
    4f78:	de b7       	in	r29, 0x3e	; 62
	TIMER_pvCallBackFunc[TIMER2_CTC]();
    4f7a:	e0 91 25 03 	lds	r30, 0x0325
    4f7e:	f0 91 26 03 	lds	r31, 0x0326
    4f82:	09 95       	icall
}
    4f84:	cf 91       	pop	r28
    4f86:	df 91       	pop	r29
    4f88:	ff 91       	pop	r31
    4f8a:	ef 91       	pop	r30
    4f8c:	bf 91       	pop	r27
    4f8e:	af 91       	pop	r26
    4f90:	9f 91       	pop	r25
    4f92:	8f 91       	pop	r24
    4f94:	7f 91       	pop	r23
    4f96:	6f 91       	pop	r22
    4f98:	5f 91       	pop	r21
    4f9a:	4f 91       	pop	r20
    4f9c:	3f 91       	pop	r19
    4f9e:	2f 91       	pop	r18
    4fa0:	0f 90       	pop	r0
    4fa2:	0f be       	out	0x3f, r0	; 63
    4fa4:	0f 90       	pop	r0
    4fa6:	1f 90       	pop	r1
    4fa8:	18 95       	reti

00004faa <AppMap>:
#include "../HAL/SW_interface.h"
*/


u32 AppMap(u32 InMin,u32 InMax,u32 OutMin,u32 OutMax,u32 InVal)
{
    4faa:	af 92       	push	r10
    4fac:	bf 92       	push	r11
    4fae:	cf 92       	push	r12
    4fb0:	df 92       	push	r13
    4fb2:	ef 92       	push	r14
    4fb4:	ff 92       	push	r15
    4fb6:	0f 93       	push	r16
    4fb8:	1f 93       	push	r17
    4fba:	df 93       	push	r29
    4fbc:	cf 93       	push	r28
    4fbe:	cd b7       	in	r28, 0x3d	; 61
    4fc0:	de b7       	in	r29, 0x3e	; 62
    4fc2:	64 97       	sbiw	r28, 0x14	; 20
    4fc4:	0f b6       	in	r0, 0x3f	; 63
    4fc6:	f8 94       	cli
    4fc8:	de bf       	out	0x3e, r29	; 62
    4fca:	0f be       	out	0x3f, r0	; 63
    4fcc:	cd bf       	out	0x3d, r28	; 61
    4fce:	6d 83       	std	Y+5, r22	; 0x05
    4fd0:	7e 83       	std	Y+6, r23	; 0x06
    4fd2:	8f 83       	std	Y+7, r24	; 0x07
    4fd4:	98 87       	std	Y+8, r25	; 0x08
    4fd6:	29 87       	std	Y+9, r18	; 0x09
    4fd8:	3a 87       	std	Y+10, r19	; 0x0a
    4fda:	4b 87       	std	Y+11, r20	; 0x0b
    4fdc:	5c 87       	std	Y+12, r21	; 0x0c
    4fde:	ed 86       	std	Y+13, r14	; 0x0d
    4fe0:	fe 86       	std	Y+14, r15	; 0x0e
    4fe2:	0f 87       	std	Y+15, r16	; 0x0f
    4fe4:	18 8b       	std	Y+16, r17	; 0x10
    4fe6:	a9 8a       	std	Y+17, r10	; 0x11
    4fe8:	ba 8a       	std	Y+18, r11	; 0x12
    4fea:	cb 8a       	std	Y+19, r12	; 0x13
    4fec:	dc 8a       	std	Y+20, r13	; 0x14
	u32 Local=0;
    4fee:	19 82       	std	Y+1, r1	; 0x01
    4ff0:	1a 82       	std	Y+2, r1	; 0x02
    4ff2:	1b 82       	std	Y+3, r1	; 0x03
    4ff4:	1c 82       	std	Y+4, r1	; 0x04
	Local = (((InVal-InMin)*(OutMax-OutMin))/(InMax-InMin))+OutMin;
    4ff6:	29 a1       	ldd	r18, Y+33	; 0x21
    4ff8:	3a a1       	ldd	r19, Y+34	; 0x22
    4ffa:	4b a1       	ldd	r20, Y+35	; 0x23
    4ffc:	5c a1       	ldd	r21, Y+36	; 0x24
    4ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    5000:	9e 81       	ldd	r25, Y+6	; 0x06
    5002:	af 81       	ldd	r26, Y+7	; 0x07
    5004:	b8 85       	ldd	r27, Y+8	; 0x08
    5006:	79 01       	movw	r14, r18
    5008:	8a 01       	movw	r16, r20
    500a:	e8 1a       	sub	r14, r24
    500c:	f9 0a       	sbc	r15, r25
    500e:	0a 0b       	sbc	r16, r26
    5010:	1b 0b       	sbc	r17, r27
    5012:	29 89       	ldd	r18, Y+17	; 0x11
    5014:	3a 89       	ldd	r19, Y+18	; 0x12
    5016:	4b 89       	ldd	r20, Y+19	; 0x13
    5018:	5c 89       	ldd	r21, Y+20	; 0x14
    501a:	8d 85       	ldd	r24, Y+13	; 0x0d
    501c:	9e 85       	ldd	r25, Y+14	; 0x0e
    501e:	af 85       	ldd	r26, Y+15	; 0x0f
    5020:	b8 89       	ldd	r27, Y+16	; 0x10
    5022:	28 1b       	sub	r18, r24
    5024:	39 0b       	sbc	r19, r25
    5026:	4a 0b       	sbc	r20, r26
    5028:	5b 0b       	sbc	r21, r27
    502a:	c8 01       	movw	r24, r16
    502c:	b7 01       	movw	r22, r14
    502e:	0e 94 69 3c 	call	0x78d2	; 0x78d2 <__mulsi3>
    5032:	7b 01       	movw	r14, r22
    5034:	8c 01       	movw	r16, r24
    5036:	29 85       	ldd	r18, Y+9	; 0x09
    5038:	3a 85       	ldd	r19, Y+10	; 0x0a
    503a:	4b 85       	ldd	r20, Y+11	; 0x0b
    503c:	5c 85       	ldd	r21, Y+12	; 0x0c
    503e:	8d 81       	ldd	r24, Y+5	; 0x05
    5040:	9e 81       	ldd	r25, Y+6	; 0x06
    5042:	af 81       	ldd	r26, Y+7	; 0x07
    5044:	b8 85       	ldd	r27, Y+8	; 0x08
    5046:	28 1b       	sub	r18, r24
    5048:	39 0b       	sbc	r19, r25
    504a:	4a 0b       	sbc	r20, r26
    504c:	5b 0b       	sbc	r21, r27
    504e:	c8 01       	movw	r24, r16
    5050:	b7 01       	movw	r22, r14
    5052:	0e 94 9c 3c 	call	0x7938	; 0x7938 <__udivmodsi4>
    5056:	da 01       	movw	r26, r20
    5058:	c9 01       	movw	r24, r18
    505a:	9c 01       	movw	r18, r24
    505c:	ad 01       	movw	r20, r26
    505e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5060:	9e 85       	ldd	r25, Y+14	; 0x0e
    5062:	af 85       	ldd	r26, Y+15	; 0x0f
    5064:	b8 89       	ldd	r27, Y+16	; 0x10
    5066:	82 0f       	add	r24, r18
    5068:	93 1f       	adc	r25, r19
    506a:	a4 1f       	adc	r26, r20
    506c:	b5 1f       	adc	r27, r21
    506e:	89 83       	std	Y+1, r24	; 0x01
    5070:	9a 83       	std	Y+2, r25	; 0x02
    5072:	ab 83       	std	Y+3, r26	; 0x03
    5074:	bc 83       	std	Y+4, r27	; 0x04
	return Local;
    5076:	89 81       	ldd	r24, Y+1	; 0x01
    5078:	9a 81       	ldd	r25, Y+2	; 0x02
    507a:	ab 81       	ldd	r26, Y+3	; 0x03
    507c:	bc 81       	ldd	r27, Y+4	; 0x04
}
    507e:	bc 01       	movw	r22, r24
    5080:	cd 01       	movw	r24, r26
    5082:	64 96       	adiw	r28, 0x14	; 20
    5084:	0f b6       	in	r0, 0x3f	; 63
    5086:	f8 94       	cli
    5088:	de bf       	out	0x3e, r29	; 62
    508a:	0f be       	out	0x3f, r0	; 63
    508c:	cd bf       	out	0x3d, r28	; 61
    508e:	cf 91       	pop	r28
    5090:	df 91       	pop	r29
    5092:	1f 91       	pop	r17
    5094:	0f 91       	pop	r16
    5096:	ff 90       	pop	r15
    5098:	ef 90       	pop	r14
    509a:	df 90       	pop	r13
    509c:	cf 90       	pop	r12
    509e:	bf 90       	pop	r11
    50a0:	af 90       	pop	r10
    50a2:	08 95       	ret

000050a4 <main>:


void SwPWM();
LED_t led1 = {DIO_PORTA,DIO_PIN0,LED_SOUCE};
void main()
{
    50a4:	af 92       	push	r10
    50a6:	bf 92       	push	r11
    50a8:	cf 92       	push	r12
    50aa:	df 92       	push	r13
    50ac:	ef 92       	push	r14
    50ae:	ff 92       	push	r15
    50b0:	0f 93       	push	r16
    50b2:	1f 93       	push	r17
    50b4:	df 93       	push	r29
    50b6:	cf 93       	push	r28
    50b8:	cd b7       	in	r28, 0x3d	; 61
    50ba:	de b7       	in	r29, 0x3e	; 62
    50bc:	cb 53       	subi	r28, 0x3B	; 59
    50be:	d1 40       	sbci	r29, 0x01	; 1
    50c0:	0f b6       	in	r0, 0x3f	; 63
    50c2:	f8 94       	cli
    50c4:	de bf       	out	0x3e, r29	; 62
    50c6:	0f be       	out	0x3f, r0	; 63
    50c8:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
    50ca:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <PORT_voidInit>
	ADC_voidInit();
    50ce:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_voidInit>
	CLCD_voidInit();
    50d2:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <CLCD_voidInit>
	//SERVO_voidInit();
	u16 Local_data;
	u16 mapVal = 0;
    50d6:	fe 01       	movw	r30, r28
    50d8:	e8 5e       	subi	r30, 0xE8	; 232
    50da:	fe 4f       	sbci	r31, 0xFE	; 254
    50dc:	11 82       	std	Z+1, r1	; 0x01
    50de:	10 82       	st	Z, r1
			TIMER1_voidSetChannelACompMatch(mapVal);
			_delay_ms(100);
			CLCD_voidSendCommand(1);
	}
	*/
	u8 Keypress=0;
    50e0:	fe 01       	movw	r30, r28
    50e2:	e9 5e       	subi	r30, 0xE9	; 233
    50e4:	fe 4f       	sbci	r31, 0xFE	; 254
    50e6:	10 82       	st	Z, r1
	s8 trials = 3,count=0,multi = 1 ,BackSpace = 12;
    50e8:	fe 01       	movw	r30, r28
    50ea:	ea 5e       	subi	r30, 0xEA	; 234
    50ec:	fe 4f       	sbci	r31, 0xFE	; 254
    50ee:	83 e0       	ldi	r24, 0x03	; 3
    50f0:	80 83       	st	Z, r24
    50f2:	fe 01       	movw	r30, r28
    50f4:	eb 5e       	subi	r30, 0xEB	; 235
    50f6:	fe 4f       	sbci	r31, 0xFE	; 254
    50f8:	10 82       	st	Z, r1
    50fa:	fe 01       	movw	r30, r28
    50fc:	ec 5e       	subi	r30, 0xEC	; 236
    50fe:	fe 4f       	sbci	r31, 0xFE	; 254
    5100:	81 e0       	ldi	r24, 0x01	; 1
    5102:	80 83       	st	Z, r24
    5104:	fe 01       	movw	r30, r28
    5106:	ed 5e       	subi	r30, 0xED	; 237
    5108:	fe 4f       	sbci	r31, 0xFE	; 254
    510a:	8c e0       	ldi	r24, 0x0C	; 12
    510c:	80 83       	st	Z, r24
	//voltage in milli ,password Storage variable
	u16  Angle1=0,Enter_password=0,defult_pass=1234,multiplier=1;
    510e:	fe 01       	movw	r30, r28
    5110:	ef 5e       	subi	r30, 0xEF	; 239
    5112:	fe 4f       	sbci	r31, 0xFE	; 254
    5114:	11 82       	std	Z+1, r1	; 0x01
    5116:	10 82       	st	Z, r1
    5118:	fe 01       	movw	r30, r28
    511a:	e1 5f       	subi	r30, 0xF1	; 241
    511c:	fe 4f       	sbci	r31, 0xFE	; 254
    511e:	11 82       	std	Z+1, r1	; 0x01
    5120:	10 82       	st	Z, r1
    5122:	fe 01       	movw	r30, r28
    5124:	e3 5f       	subi	r30, 0xF3	; 243
    5126:	fe 4f       	sbci	r31, 0xFE	; 254
    5128:	82 ed       	ldi	r24, 0xD2	; 210
    512a:	94 e0       	ldi	r25, 0x04	; 4
    512c:	91 83       	std	Z+1, r25	; 0x01
    512e:	80 83       	st	Z, r24
    5130:	fe 01       	movw	r30, r28
    5132:	e5 5f       	subi	r30, 0xF5	; 245
    5134:	fe 4f       	sbci	r31, 0xFE	; 254
    5136:	81 e0       	ldi	r24, 0x01	; 1
    5138:	90 e0       	ldi	r25, 0x00	; 0
    513a:	91 83       	std	Z+1, r25	; 0x01
    513c:	80 83       	st	Z, r24
	CLCD_voidSendCommand(1);
    513e:	81 e0       	ldi	r24, 0x01	; 1
    5140:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
	CLCD_voidSendString("Welcome Sr");
    5144:	80 e6       	ldi	r24, 0x60	; 96
    5146:	90 e0       	ldi	r25, 0x00	; 0
    5148:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
    514c:	fe 01       	movw	r30, r28
    514e:	e9 5f       	subi	r30, 0xF9	; 249
    5150:	fe 4f       	sbci	r31, 0xFE	; 254
    5152:	80 e0       	ldi	r24, 0x00	; 0
    5154:	90 e0       	ldi	r25, 0x00	; 0
    5156:	aa ef       	ldi	r26, 0xFA	; 250
    5158:	b3 e4       	ldi	r27, 0x43	; 67
    515a:	80 83       	st	Z, r24
    515c:	91 83       	std	Z+1, r25	; 0x01
    515e:	a2 83       	std	Z+2, r26	; 0x02
    5160:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5162:	8e 01       	movw	r16, r28
    5164:	0d 5f       	subi	r16, 0xFD	; 253
    5166:	1e 4f       	sbci	r17, 0xFE	; 254
    5168:	fe 01       	movw	r30, r28
    516a:	e9 5f       	subi	r30, 0xF9	; 249
    516c:	fe 4f       	sbci	r31, 0xFE	; 254
    516e:	60 81       	ld	r22, Z
    5170:	71 81       	ldd	r23, Z+1	; 0x01
    5172:	82 81       	ldd	r24, Z+2	; 0x02
    5174:	93 81       	ldd	r25, Z+3	; 0x03
    5176:	20 e0       	ldi	r18, 0x00	; 0
    5178:	30 e0       	ldi	r19, 0x00	; 0
    517a:	4a ef       	ldi	r20, 0xFA	; 250
    517c:	54 e4       	ldi	r21, 0x44	; 68
    517e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5182:	dc 01       	movw	r26, r24
    5184:	cb 01       	movw	r24, r22
    5186:	f8 01       	movw	r30, r16
    5188:	80 83       	st	Z, r24
    518a:	91 83       	std	Z+1, r25	; 0x01
    518c:	a2 83       	std	Z+2, r26	; 0x02
    518e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5190:	fe 01       	movw	r30, r28
    5192:	ed 5f       	subi	r30, 0xFD	; 253
    5194:	fe 4f       	sbci	r31, 0xFE	; 254
    5196:	60 81       	ld	r22, Z
    5198:	71 81       	ldd	r23, Z+1	; 0x01
    519a:	82 81       	ldd	r24, Z+2	; 0x02
    519c:	93 81       	ldd	r25, Z+3	; 0x03
    519e:	20 e0       	ldi	r18, 0x00	; 0
    51a0:	30 e0       	ldi	r19, 0x00	; 0
    51a2:	40 e8       	ldi	r20, 0x80	; 128
    51a4:	5f e3       	ldi	r21, 0x3F	; 63
    51a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    51aa:	88 23       	and	r24, r24
    51ac:	44 f4       	brge	.+16     	; 0x51be <main+0x11a>
		__ticks = 1;
    51ae:	fe 01       	movw	r30, r28
    51b0:	ef 5f       	subi	r30, 0xFF	; 255
    51b2:	fe 4f       	sbci	r31, 0xFE	; 254
    51b4:	81 e0       	ldi	r24, 0x01	; 1
    51b6:	90 e0       	ldi	r25, 0x00	; 0
    51b8:	91 83       	std	Z+1, r25	; 0x01
    51ba:	80 83       	st	Z, r24
    51bc:	64 c0       	rjmp	.+200    	; 0x5286 <main+0x1e2>
	else if (__tmp > 65535)
    51be:	fe 01       	movw	r30, r28
    51c0:	ed 5f       	subi	r30, 0xFD	; 253
    51c2:	fe 4f       	sbci	r31, 0xFE	; 254
    51c4:	60 81       	ld	r22, Z
    51c6:	71 81       	ldd	r23, Z+1	; 0x01
    51c8:	82 81       	ldd	r24, Z+2	; 0x02
    51ca:	93 81       	ldd	r25, Z+3	; 0x03
    51cc:	20 e0       	ldi	r18, 0x00	; 0
    51ce:	3f ef       	ldi	r19, 0xFF	; 255
    51d0:	4f e7       	ldi	r20, 0x7F	; 127
    51d2:	57 e4       	ldi	r21, 0x47	; 71
    51d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    51d8:	18 16       	cp	r1, r24
    51da:	0c f0       	brlt	.+2      	; 0x51de <main+0x13a>
    51dc:	43 c0       	rjmp	.+134    	; 0x5264 <main+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51de:	fe 01       	movw	r30, r28
    51e0:	e9 5f       	subi	r30, 0xF9	; 249
    51e2:	fe 4f       	sbci	r31, 0xFE	; 254
    51e4:	60 81       	ld	r22, Z
    51e6:	71 81       	ldd	r23, Z+1	; 0x01
    51e8:	82 81       	ldd	r24, Z+2	; 0x02
    51ea:	93 81       	ldd	r25, Z+3	; 0x03
    51ec:	20 e0       	ldi	r18, 0x00	; 0
    51ee:	30 e0       	ldi	r19, 0x00	; 0
    51f0:	40 e2       	ldi	r20, 0x20	; 32
    51f2:	51 e4       	ldi	r21, 0x41	; 65
    51f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51f8:	dc 01       	movw	r26, r24
    51fa:	cb 01       	movw	r24, r22
    51fc:	8e 01       	movw	r16, r28
    51fe:	0f 5f       	subi	r16, 0xFF	; 255
    5200:	1e 4f       	sbci	r17, 0xFE	; 254
    5202:	bc 01       	movw	r22, r24
    5204:	cd 01       	movw	r24, r26
    5206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    520a:	dc 01       	movw	r26, r24
    520c:	cb 01       	movw	r24, r22
    520e:	f8 01       	movw	r30, r16
    5210:	91 83       	std	Z+1, r25	; 0x01
    5212:	80 83       	st	Z, r24
    5214:	1f c0       	rjmp	.+62     	; 0x5254 <main+0x1b0>
    5216:	fe 01       	movw	r30, r28
    5218:	e1 50       	subi	r30, 0x01	; 1
    521a:	ff 4f       	sbci	r31, 0xFF	; 255
    521c:	88 ec       	ldi	r24, 0xC8	; 200
    521e:	90 e0       	ldi	r25, 0x00	; 0
    5220:	91 83       	std	Z+1, r25	; 0x01
    5222:	80 83       	st	Z, r24
    5224:	fe 01       	movw	r30, r28
    5226:	e1 50       	subi	r30, 0x01	; 1
    5228:	ff 4f       	sbci	r31, 0xFF	; 255
    522a:	80 81       	ld	r24, Z
    522c:	91 81       	ldd	r25, Z+1	; 0x01
    522e:	01 97       	sbiw	r24, 0x01	; 1
    5230:	f1 f7       	brne	.-4      	; 0x522e <main+0x18a>
    5232:	fe 01       	movw	r30, r28
    5234:	e1 50       	subi	r30, 0x01	; 1
    5236:	ff 4f       	sbci	r31, 0xFF	; 255
    5238:	91 83       	std	Z+1, r25	; 0x01
    523a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    523c:	de 01       	movw	r26, r28
    523e:	af 5f       	subi	r26, 0xFF	; 255
    5240:	be 4f       	sbci	r27, 0xFE	; 254
    5242:	fe 01       	movw	r30, r28
    5244:	ef 5f       	subi	r30, 0xFF	; 255
    5246:	fe 4f       	sbci	r31, 0xFE	; 254
    5248:	80 81       	ld	r24, Z
    524a:	91 81       	ldd	r25, Z+1	; 0x01
    524c:	01 97       	sbiw	r24, 0x01	; 1
    524e:	11 96       	adiw	r26, 0x01	; 1
    5250:	9c 93       	st	X, r25
    5252:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5254:	fe 01       	movw	r30, r28
    5256:	ef 5f       	subi	r30, 0xFF	; 255
    5258:	fe 4f       	sbci	r31, 0xFE	; 254
    525a:	80 81       	ld	r24, Z
    525c:	91 81       	ldd	r25, Z+1	; 0x01
    525e:	00 97       	sbiw	r24, 0x00	; 0
    5260:	d1 f6       	brne	.-76     	; 0x5216 <main+0x172>
    5262:	28 c0       	rjmp	.+80     	; 0x52b4 <main+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5264:	8e 01       	movw	r16, r28
    5266:	0f 5f       	subi	r16, 0xFF	; 255
    5268:	1e 4f       	sbci	r17, 0xFE	; 254
    526a:	fe 01       	movw	r30, r28
    526c:	ed 5f       	subi	r30, 0xFD	; 253
    526e:	fe 4f       	sbci	r31, 0xFE	; 254
    5270:	60 81       	ld	r22, Z
    5272:	71 81       	ldd	r23, Z+1	; 0x01
    5274:	82 81       	ldd	r24, Z+2	; 0x02
    5276:	93 81       	ldd	r25, Z+3	; 0x03
    5278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    527c:	dc 01       	movw	r26, r24
    527e:	cb 01       	movw	r24, r22
    5280:	f8 01       	movw	r30, r16
    5282:	91 83       	std	Z+1, r25	; 0x01
    5284:	80 83       	st	Z, r24
    5286:	de 01       	movw	r26, r28
    5288:	a3 50       	subi	r26, 0x03	; 3
    528a:	bf 4f       	sbci	r27, 0xFF	; 255
    528c:	fe 01       	movw	r30, r28
    528e:	ef 5f       	subi	r30, 0xFF	; 255
    5290:	fe 4f       	sbci	r31, 0xFE	; 254
    5292:	80 81       	ld	r24, Z
    5294:	91 81       	ldd	r25, Z+1	; 0x01
    5296:	11 96       	adiw	r26, 0x01	; 1
    5298:	9c 93       	st	X, r25
    529a:	8e 93       	st	-X, r24
    529c:	fe 01       	movw	r30, r28
    529e:	e3 50       	subi	r30, 0x03	; 3
    52a0:	ff 4f       	sbci	r31, 0xFF	; 255
    52a2:	80 81       	ld	r24, Z
    52a4:	91 81       	ldd	r25, Z+1	; 0x01
    52a6:	01 97       	sbiw	r24, 0x01	; 1
    52a8:	f1 f7       	brne	.-4      	; 0x52a6 <main+0x202>
    52aa:	fe 01       	movw	r30, r28
    52ac:	e3 50       	subi	r30, 0x03	; 3
    52ae:	ff 4f       	sbci	r31, 0xFF	; 255
    52b0:	91 83       	std	Z+1, r25	; 0x01
    52b2:	80 83       	st	Z, r24
	_delay_ms(500);
	STEP_t step1 ={DIO_PORTA,STEP_UPPER_NIBBLE,STEP_COUNTER_CLOCKWISE,180};
    52b4:	ce 01       	movw	r24, r28
    52b6:	84 5e       	subi	r24, 0xE4	; 228
    52b8:	9e 4f       	sbci	r25, 0xFE	; 254
    52ba:	c3 5d       	subi	r28, 0xD3	; 211
    52bc:	de 4f       	sbci	r29, 0xFE	; 254
    52be:	99 83       	std	Y+1, r25	; 0x01
    52c0:	88 83       	st	Y, r24
    52c2:	cd 52       	subi	r28, 0x2D	; 45
    52c4:	d1 40       	sbci	r29, 0x01	; 1
    52c6:	23 e0       	ldi	r18, 0x03	; 3
    52c8:	33 e0       	ldi	r19, 0x03	; 3
    52ca:	c1 5d       	subi	r28, 0xD1	; 209
    52cc:	de 4f       	sbci	r29, 0xFE	; 254
    52ce:	39 83       	std	Y+1, r19	; 0x01
    52d0:	28 83       	st	Y, r18
    52d2:	cf 52       	subi	r28, 0x2F	; 47
    52d4:	d1 40       	sbci	r29, 0x01	; 1
    52d6:	35 e0       	ldi	r19, 0x05	; 5
    52d8:	cf 5c       	subi	r28, 0xCF	; 207
    52da:	de 4f       	sbci	r29, 0xFE	; 254
    52dc:	38 83       	st	Y, r19
    52de:	c1 53       	subi	r28, 0x31	; 49
    52e0:	d1 40       	sbci	r29, 0x01	; 1
    52e2:	c1 5d       	subi	r28, 0xD1	; 209
    52e4:	de 4f       	sbci	r29, 0xFE	; 254
    52e6:	e8 81       	ld	r30, Y
    52e8:	f9 81       	ldd	r31, Y+1	; 0x01
    52ea:	cf 52       	subi	r28, 0x2F	; 47
    52ec:	d1 40       	sbci	r29, 0x01	; 1
    52ee:	00 80       	ld	r0, Z
    52f0:	c1 5d       	subi	r28, 0xD1	; 209
    52f2:	de 4f       	sbci	r29, 0xFE	; 254
    52f4:	28 81       	ld	r18, Y
    52f6:	39 81       	ldd	r19, Y+1	; 0x01
    52f8:	cf 52       	subi	r28, 0x2F	; 47
    52fa:	d1 40       	sbci	r29, 0x01	; 1
    52fc:	2f 5f       	subi	r18, 0xFF	; 255
    52fe:	3f 4f       	sbci	r19, 0xFF	; 255
    5300:	c1 5d       	subi	r28, 0xD1	; 209
    5302:	de 4f       	sbci	r29, 0xFE	; 254
    5304:	39 83       	std	Y+1, r19	; 0x01
    5306:	28 83       	st	Y, r18
    5308:	cf 52       	subi	r28, 0x2F	; 47
    530a:	d1 40       	sbci	r29, 0x01	; 1
    530c:	c3 5d       	subi	r28, 0xD3	; 211
    530e:	de 4f       	sbci	r29, 0xFE	; 254
    5310:	e8 81       	ld	r30, Y
    5312:	f9 81       	ldd	r31, Y+1	; 0x01
    5314:	cd 52       	subi	r28, 0x2D	; 45
    5316:	d1 40       	sbci	r29, 0x01	; 1
    5318:	00 82       	st	Z, r0
    531a:	c3 5d       	subi	r28, 0xD3	; 211
    531c:	de 4f       	sbci	r29, 0xFE	; 254
    531e:	28 81       	ld	r18, Y
    5320:	39 81       	ldd	r19, Y+1	; 0x01
    5322:	cd 52       	subi	r28, 0x2D	; 45
    5324:	d1 40       	sbci	r29, 0x01	; 1
    5326:	2f 5f       	subi	r18, 0xFF	; 255
    5328:	3f 4f       	sbci	r19, 0xFF	; 255
    532a:	c3 5d       	subi	r28, 0xD3	; 211
    532c:	de 4f       	sbci	r29, 0xFE	; 254
    532e:	39 83       	std	Y+1, r19	; 0x01
    5330:	28 83       	st	Y, r18
    5332:	cd 52       	subi	r28, 0x2D	; 45
    5334:	d1 40       	sbci	r29, 0x01	; 1
    5336:	cf 5c       	subi	r28, 0xCF	; 207
    5338:	de 4f       	sbci	r29, 0xFE	; 254
    533a:	38 81       	ld	r19, Y
    533c:	c1 53       	subi	r28, 0x31	; 49
    533e:	d1 40       	sbci	r29, 0x01	; 1
    5340:	31 50       	subi	r19, 0x01	; 1
    5342:	cf 5c       	subi	r28, 0xCF	; 207
    5344:	de 4f       	sbci	r29, 0xFE	; 254
    5346:	38 83       	st	Y, r19
    5348:	c1 53       	subi	r28, 0x31	; 49
    534a:	d1 40       	sbci	r29, 0x01	; 1
    534c:	cf 5c       	subi	r28, 0xCF	; 207
    534e:	de 4f       	sbci	r29, 0xFE	; 254
    5350:	48 81       	ld	r20, Y
    5352:	c1 53       	subi	r28, 0x31	; 49
    5354:	d1 40       	sbci	r29, 0x01	; 1
    5356:	44 23       	and	r20, r20
    5358:	21 f6       	brne	.-120    	; 0x52e2 <main+0x23e>
	Timer_t t0={
			TIMER0,TIMER0_PHASE_CORRECT_PWM,OC0_DIS,TIMER10_DIV_1024,TIMER0_INT_DISABLE
	};
    535a:	ce 01       	movw	r24, r28
    535c:	8f 5d       	subi	r24, 0xDF	; 223
    535e:	9e 4f       	sbci	r25, 0xFE	; 254
    5360:	ce 5c       	subi	r28, 0xCE	; 206
    5362:	de 4f       	sbci	r29, 0xFE	; 254
    5364:	99 83       	std	Y+1, r25	; 0x01
    5366:	88 83       	st	Y, r24
    5368:	c2 53       	subi	r28, 0x32	; 50
    536a:	d1 40       	sbci	r29, 0x01	; 1
    536c:	8e ef       	ldi	r24, 0xFE	; 254
    536e:	92 e0       	ldi	r25, 0x02	; 2
    5370:	cc 5c       	subi	r28, 0xCC	; 204
    5372:	de 4f       	sbci	r29, 0xFE	; 254
    5374:	99 83       	std	Y+1, r25	; 0x01
    5376:	88 83       	st	Y, r24
    5378:	c4 53       	subi	r28, 0x34	; 52
    537a:	d1 40       	sbci	r29, 0x01	; 1
    537c:	95 e0       	ldi	r25, 0x05	; 5
    537e:	ca 5c       	subi	r28, 0xCA	; 202
    5380:	de 4f       	sbci	r29, 0xFE	; 254
    5382:	98 83       	st	Y, r25
    5384:	c6 53       	subi	r28, 0x36	; 54
    5386:	d1 40       	sbci	r29, 0x01	; 1
    5388:	cc 5c       	subi	r28, 0xCC	; 204
    538a:	de 4f       	sbci	r29, 0xFE	; 254
    538c:	e8 81       	ld	r30, Y
    538e:	f9 81       	ldd	r31, Y+1	; 0x01
    5390:	c4 53       	subi	r28, 0x34	; 52
    5392:	d1 40       	sbci	r29, 0x01	; 1
    5394:	00 80       	ld	r0, Z
    5396:	cc 5c       	subi	r28, 0xCC	; 204
    5398:	de 4f       	sbci	r29, 0xFE	; 254
    539a:	28 81       	ld	r18, Y
    539c:	39 81       	ldd	r19, Y+1	; 0x01
    539e:	c4 53       	subi	r28, 0x34	; 52
    53a0:	d1 40       	sbci	r29, 0x01	; 1
    53a2:	2f 5f       	subi	r18, 0xFF	; 255
    53a4:	3f 4f       	sbci	r19, 0xFF	; 255
    53a6:	cc 5c       	subi	r28, 0xCC	; 204
    53a8:	de 4f       	sbci	r29, 0xFE	; 254
    53aa:	39 83       	std	Y+1, r19	; 0x01
    53ac:	28 83       	st	Y, r18
    53ae:	c4 53       	subi	r28, 0x34	; 52
    53b0:	d1 40       	sbci	r29, 0x01	; 1
    53b2:	ce 5c       	subi	r28, 0xCE	; 206
    53b4:	de 4f       	sbci	r29, 0xFE	; 254
    53b6:	e8 81       	ld	r30, Y
    53b8:	f9 81       	ldd	r31, Y+1	; 0x01
    53ba:	c2 53       	subi	r28, 0x32	; 50
    53bc:	d1 40       	sbci	r29, 0x01	; 1
    53be:	00 82       	st	Z, r0
    53c0:	ce 5c       	subi	r28, 0xCE	; 206
    53c2:	de 4f       	sbci	r29, 0xFE	; 254
    53c4:	28 81       	ld	r18, Y
    53c6:	39 81       	ldd	r19, Y+1	; 0x01
    53c8:	c2 53       	subi	r28, 0x32	; 50
    53ca:	d1 40       	sbci	r29, 0x01	; 1
    53cc:	2f 5f       	subi	r18, 0xFF	; 255
    53ce:	3f 4f       	sbci	r19, 0xFF	; 255
    53d0:	ce 5c       	subi	r28, 0xCE	; 206
    53d2:	de 4f       	sbci	r29, 0xFE	; 254
    53d4:	39 83       	std	Y+1, r19	; 0x01
    53d6:	28 83       	st	Y, r18
    53d8:	c2 53       	subi	r28, 0x32	; 50
    53da:	d1 40       	sbci	r29, 0x01	; 1
    53dc:	ca 5c       	subi	r28, 0xCA	; 202
    53de:	de 4f       	sbci	r29, 0xFE	; 254
    53e0:	38 81       	ld	r19, Y
    53e2:	c6 53       	subi	r28, 0x36	; 54
    53e4:	d1 40       	sbci	r29, 0x01	; 1
    53e6:	31 50       	subi	r19, 0x01	; 1
    53e8:	ca 5c       	subi	r28, 0xCA	; 202
    53ea:	de 4f       	sbci	r29, 0xFE	; 254
    53ec:	38 83       	st	Y, r19
    53ee:	c6 53       	subi	r28, 0x36	; 54
    53f0:	d1 40       	sbci	r29, 0x01	; 1
    53f2:	ca 5c       	subi	r28, 0xCA	; 202
    53f4:	de 4f       	sbci	r29, 0xFE	; 254
    53f6:	48 81       	ld	r20, Y
    53f8:	c6 53       	subi	r28, 0x36	; 54
    53fa:	d1 40       	sbci	r29, 0x01	; 1
    53fc:	44 23       	and	r20, r20
    53fe:	21 f6       	brne	.-120    	; 0x5388 <main+0x2e4>
	Timer_t t2={
			TIMER2,TIMER2_PHASE_CORRECT_PWM,OC2_DIS,TIMER2_DIV_1024,TIMER2_INT_DISABLE
	};
    5400:	ce 01       	movw	r24, r28
    5402:	8a 5d       	subi	r24, 0xDA	; 218
    5404:	9e 4f       	sbci	r25, 0xFE	; 254
    5406:	c9 5c       	subi	r28, 0xC9	; 201
    5408:	de 4f       	sbci	r29, 0xFE	; 254
    540a:	99 83       	std	Y+1, r25	; 0x01
    540c:	88 83       	st	Y, r24
    540e:	c7 53       	subi	r28, 0x37	; 55
    5410:	d1 40       	sbci	r29, 0x01	; 1
    5412:	89 ef       	ldi	r24, 0xF9	; 249
    5414:	92 e0       	ldi	r25, 0x02	; 2
    5416:	c7 5c       	subi	r28, 0xC7	; 199
    5418:	de 4f       	sbci	r29, 0xFE	; 254
    541a:	99 83       	std	Y+1, r25	; 0x01
    541c:	88 83       	st	Y, r24
    541e:	c9 53       	subi	r28, 0x39	; 57
    5420:	d1 40       	sbci	r29, 0x01	; 1
    5422:	95 e0       	ldi	r25, 0x05	; 5
    5424:	c5 5c       	subi	r28, 0xC5	; 197
    5426:	de 4f       	sbci	r29, 0xFE	; 254
    5428:	98 83       	st	Y, r25
    542a:	cb 53       	subi	r28, 0x3B	; 59
    542c:	d1 40       	sbci	r29, 0x01	; 1
    542e:	c7 5c       	subi	r28, 0xC7	; 199
    5430:	de 4f       	sbci	r29, 0xFE	; 254
    5432:	e8 81       	ld	r30, Y
    5434:	f9 81       	ldd	r31, Y+1	; 0x01
    5436:	c9 53       	subi	r28, 0x39	; 57
    5438:	d1 40       	sbci	r29, 0x01	; 1
    543a:	00 80       	ld	r0, Z
    543c:	c7 5c       	subi	r28, 0xC7	; 199
    543e:	de 4f       	sbci	r29, 0xFE	; 254
    5440:	28 81       	ld	r18, Y
    5442:	39 81       	ldd	r19, Y+1	; 0x01
    5444:	c9 53       	subi	r28, 0x39	; 57
    5446:	d1 40       	sbci	r29, 0x01	; 1
    5448:	2f 5f       	subi	r18, 0xFF	; 255
    544a:	3f 4f       	sbci	r19, 0xFF	; 255
    544c:	c7 5c       	subi	r28, 0xC7	; 199
    544e:	de 4f       	sbci	r29, 0xFE	; 254
    5450:	39 83       	std	Y+1, r19	; 0x01
    5452:	28 83       	st	Y, r18
    5454:	c9 53       	subi	r28, 0x39	; 57
    5456:	d1 40       	sbci	r29, 0x01	; 1
    5458:	c9 5c       	subi	r28, 0xC9	; 201
    545a:	de 4f       	sbci	r29, 0xFE	; 254
    545c:	e8 81       	ld	r30, Y
    545e:	f9 81       	ldd	r31, Y+1	; 0x01
    5460:	c7 53       	subi	r28, 0x37	; 55
    5462:	d1 40       	sbci	r29, 0x01	; 1
    5464:	00 82       	st	Z, r0
    5466:	c9 5c       	subi	r28, 0xC9	; 201
    5468:	de 4f       	sbci	r29, 0xFE	; 254
    546a:	28 81       	ld	r18, Y
    546c:	39 81       	ldd	r19, Y+1	; 0x01
    546e:	c7 53       	subi	r28, 0x37	; 55
    5470:	d1 40       	sbci	r29, 0x01	; 1
    5472:	2f 5f       	subi	r18, 0xFF	; 255
    5474:	3f 4f       	sbci	r19, 0xFF	; 255
    5476:	c9 5c       	subi	r28, 0xC9	; 201
    5478:	de 4f       	sbci	r29, 0xFE	; 254
    547a:	39 83       	std	Y+1, r19	; 0x01
    547c:	28 83       	st	Y, r18
    547e:	c7 53       	subi	r28, 0x37	; 55
    5480:	d1 40       	sbci	r29, 0x01	; 1
    5482:	c5 5c       	subi	r28, 0xC5	; 197
    5484:	de 4f       	sbci	r29, 0xFE	; 254
    5486:	38 81       	ld	r19, Y
    5488:	cb 53       	subi	r28, 0x3B	; 59
    548a:	d1 40       	sbci	r29, 0x01	; 1
    548c:	31 50       	subi	r19, 0x01	; 1
    548e:	c5 5c       	subi	r28, 0xC5	; 197
    5490:	de 4f       	sbci	r29, 0xFE	; 254
    5492:	38 83       	st	Y, r19
    5494:	cb 53       	subi	r28, 0x3B	; 59
    5496:	d1 40       	sbci	r29, 0x01	; 1
    5498:	c5 5c       	subi	r28, 0xC5	; 197
    549a:	de 4f       	sbci	r29, 0xFE	; 254
    549c:	48 81       	ld	r20, Y
    549e:	cb 53       	subi	r28, 0x3B	; 59
    54a0:	d1 40       	sbci	r29, 0x01	; 1
    54a2:	44 23       	and	r20, r20
    54a4:	21 f6       	brne	.-120    	; 0x542e <main+0x38a>
	TIMER_voidInit(&t2);
    54a6:	ce 01       	movw	r24, r28
    54a8:	8a 5d       	subi	r24, 0xDA	; 218
    54aa:	9e 4f       	sbci	r25, 0xFE	; 254
    54ac:	0e 94 72 22 	call	0x44e4	; 0x44e4 <TIMER_voidInit>
	TIMER_voidInit(&t0);
    54b0:	ce 01       	movw	r24, r28
    54b2:	8f 5d       	subi	r24, 0xDF	; 223
    54b4:	9e 4f       	sbci	r25, 0xFE	; 254
    54b6:	0e 94 72 22 	call	0x44e4	; 0x44e4 <TIMER_voidInit>
	while(1)
	{
		CLCD_voidSendCommand(1);
    54ba:	81 e0       	ldi	r24, 0x01	; 1
    54bc:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
		CLCD_voidSendString("Enter pass:"); // 4 Digit for password
    54c0:	8b e6       	ldi	r24, 0x6B	; 107
    54c2:	90 e0       	ldi	r25, 0x00	; 0
    54c4:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
		do{
			do{
				Keypress=KPD_u8Key_pressed();
    54c8:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <KPD_u8Key_pressed>
    54cc:	fe 01       	movw	r30, r28
    54ce:	e9 5e       	subi	r30, 0xE9	; 233
    54d0:	fe 4f       	sbci	r31, 0xFE	; 254
    54d2:	80 83       	st	Z, r24
			}while(Keypress==0xff);
    54d4:	fe 01       	movw	r30, r28
    54d6:	e9 5e       	subi	r30, 0xE9	; 233
    54d8:	fe 4f       	sbci	r31, 0xFE	; 254
    54da:	80 81       	ld	r24, Z
    54dc:	8f 3f       	cpi	r24, 0xFF	; 255
    54de:	a1 f3       	breq	.-24     	; 0x54c8 <main+0x424>
			if((0<=Keypress)&&(Keypress<=9)){
    54e0:	fe 01       	movw	r30, r28
    54e2:	e9 5e       	subi	r30, 0xE9	; 233
    54e4:	fe 4f       	sbci	r31, 0xFE	; 254
    54e6:	80 81       	ld	r24, Z
    54e8:	8a 30       	cpi	r24, 0x0A	; 10
    54ea:	08 f0       	brcs	.+2      	; 0x54ee <main+0x44a>
    54ec:	f8 c0       	rjmp	.+496    	; 0x56de <main+0x63a>
				CLCD_voidWriteNumber(Keypress);
    54ee:	fe 01       	movw	r30, r28
    54f0:	e9 5e       	subi	r30, 0xE9	; 233
    54f2:	fe 4f       	sbci	r31, 0xFE	; 254
    54f4:	80 81       	ld	r24, Z
    54f6:	88 2f       	mov	r24, r24
    54f8:	90 e0       	ldi	r25, 0x00	; 0
    54fa:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <CLCD_voidWriteNumber>
    54fe:	fe 01       	movw	r30, r28
    5500:	e7 50       	subi	r30, 0x07	; 7
    5502:	ff 4f       	sbci	r31, 0xFF	; 255
    5504:	80 e0       	ldi	r24, 0x00	; 0
    5506:	90 e0       	ldi	r25, 0x00	; 0
    5508:	a8 ec       	ldi	r26, 0xC8	; 200
    550a:	b2 e4       	ldi	r27, 0x42	; 66
    550c:	80 83       	st	Z, r24
    550e:	91 83       	std	Z+1, r25	; 0x01
    5510:	a2 83       	std	Z+2, r26	; 0x02
    5512:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5514:	8e 01       	movw	r16, r28
    5516:	0b 50       	subi	r16, 0x0B	; 11
    5518:	1f 4f       	sbci	r17, 0xFF	; 255
    551a:	fe 01       	movw	r30, r28
    551c:	e7 50       	subi	r30, 0x07	; 7
    551e:	ff 4f       	sbci	r31, 0xFF	; 255
    5520:	60 81       	ld	r22, Z
    5522:	71 81       	ldd	r23, Z+1	; 0x01
    5524:	82 81       	ldd	r24, Z+2	; 0x02
    5526:	93 81       	ldd	r25, Z+3	; 0x03
    5528:	20 e0       	ldi	r18, 0x00	; 0
    552a:	30 e0       	ldi	r19, 0x00	; 0
    552c:	4a ef       	ldi	r20, 0xFA	; 250
    552e:	54 e4       	ldi	r21, 0x44	; 68
    5530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5534:	dc 01       	movw	r26, r24
    5536:	cb 01       	movw	r24, r22
    5538:	f8 01       	movw	r30, r16
    553a:	80 83       	st	Z, r24
    553c:	91 83       	std	Z+1, r25	; 0x01
    553e:	a2 83       	std	Z+2, r26	; 0x02
    5540:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5542:	fe 01       	movw	r30, r28
    5544:	eb 50       	subi	r30, 0x0B	; 11
    5546:	ff 4f       	sbci	r31, 0xFF	; 255
    5548:	60 81       	ld	r22, Z
    554a:	71 81       	ldd	r23, Z+1	; 0x01
    554c:	82 81       	ldd	r24, Z+2	; 0x02
    554e:	93 81       	ldd	r25, Z+3	; 0x03
    5550:	20 e0       	ldi	r18, 0x00	; 0
    5552:	30 e0       	ldi	r19, 0x00	; 0
    5554:	40 e8       	ldi	r20, 0x80	; 128
    5556:	5f e3       	ldi	r21, 0x3F	; 63
    5558:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    555c:	88 23       	and	r24, r24
    555e:	44 f4       	brge	.+16     	; 0x5570 <main+0x4cc>
		__ticks = 1;
    5560:	fe 01       	movw	r30, r28
    5562:	ed 50       	subi	r30, 0x0D	; 13
    5564:	ff 4f       	sbci	r31, 0xFF	; 255
    5566:	81 e0       	ldi	r24, 0x01	; 1
    5568:	90 e0       	ldi	r25, 0x00	; 0
    556a:	91 83       	std	Z+1, r25	; 0x01
    556c:	80 83       	st	Z, r24
    556e:	64 c0       	rjmp	.+200    	; 0x5638 <main+0x594>
	else if (__tmp > 65535)
    5570:	fe 01       	movw	r30, r28
    5572:	eb 50       	subi	r30, 0x0B	; 11
    5574:	ff 4f       	sbci	r31, 0xFF	; 255
    5576:	60 81       	ld	r22, Z
    5578:	71 81       	ldd	r23, Z+1	; 0x01
    557a:	82 81       	ldd	r24, Z+2	; 0x02
    557c:	93 81       	ldd	r25, Z+3	; 0x03
    557e:	20 e0       	ldi	r18, 0x00	; 0
    5580:	3f ef       	ldi	r19, 0xFF	; 255
    5582:	4f e7       	ldi	r20, 0x7F	; 127
    5584:	57 e4       	ldi	r21, 0x47	; 71
    5586:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    558a:	18 16       	cp	r1, r24
    558c:	0c f0       	brlt	.+2      	; 0x5590 <main+0x4ec>
    558e:	43 c0       	rjmp	.+134    	; 0x5616 <main+0x572>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5590:	fe 01       	movw	r30, r28
    5592:	e7 50       	subi	r30, 0x07	; 7
    5594:	ff 4f       	sbci	r31, 0xFF	; 255
    5596:	60 81       	ld	r22, Z
    5598:	71 81       	ldd	r23, Z+1	; 0x01
    559a:	82 81       	ldd	r24, Z+2	; 0x02
    559c:	93 81       	ldd	r25, Z+3	; 0x03
    559e:	20 e0       	ldi	r18, 0x00	; 0
    55a0:	30 e0       	ldi	r19, 0x00	; 0
    55a2:	40 e2       	ldi	r20, 0x20	; 32
    55a4:	51 e4       	ldi	r21, 0x41	; 65
    55a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55aa:	dc 01       	movw	r26, r24
    55ac:	cb 01       	movw	r24, r22
    55ae:	8e 01       	movw	r16, r28
    55b0:	0d 50       	subi	r16, 0x0D	; 13
    55b2:	1f 4f       	sbci	r17, 0xFF	; 255
    55b4:	bc 01       	movw	r22, r24
    55b6:	cd 01       	movw	r24, r26
    55b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55bc:	dc 01       	movw	r26, r24
    55be:	cb 01       	movw	r24, r22
    55c0:	f8 01       	movw	r30, r16
    55c2:	91 83       	std	Z+1, r25	; 0x01
    55c4:	80 83       	st	Z, r24
    55c6:	1f c0       	rjmp	.+62     	; 0x5606 <main+0x562>
    55c8:	fe 01       	movw	r30, r28
    55ca:	ef 50       	subi	r30, 0x0F	; 15
    55cc:	ff 4f       	sbci	r31, 0xFF	; 255
    55ce:	88 ec       	ldi	r24, 0xC8	; 200
    55d0:	90 e0       	ldi	r25, 0x00	; 0
    55d2:	91 83       	std	Z+1, r25	; 0x01
    55d4:	80 83       	st	Z, r24
    55d6:	fe 01       	movw	r30, r28
    55d8:	ef 50       	subi	r30, 0x0F	; 15
    55da:	ff 4f       	sbci	r31, 0xFF	; 255
    55dc:	80 81       	ld	r24, Z
    55de:	91 81       	ldd	r25, Z+1	; 0x01
    55e0:	01 97       	sbiw	r24, 0x01	; 1
    55e2:	f1 f7       	brne	.-4      	; 0x55e0 <main+0x53c>
    55e4:	fe 01       	movw	r30, r28
    55e6:	ef 50       	subi	r30, 0x0F	; 15
    55e8:	ff 4f       	sbci	r31, 0xFF	; 255
    55ea:	91 83       	std	Z+1, r25	; 0x01
    55ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55ee:	de 01       	movw	r26, r28
    55f0:	ad 50       	subi	r26, 0x0D	; 13
    55f2:	bf 4f       	sbci	r27, 0xFF	; 255
    55f4:	fe 01       	movw	r30, r28
    55f6:	ed 50       	subi	r30, 0x0D	; 13
    55f8:	ff 4f       	sbci	r31, 0xFF	; 255
    55fa:	80 81       	ld	r24, Z
    55fc:	91 81       	ldd	r25, Z+1	; 0x01
    55fe:	01 97       	sbiw	r24, 0x01	; 1
    5600:	11 96       	adiw	r26, 0x01	; 1
    5602:	9c 93       	st	X, r25
    5604:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5606:	fe 01       	movw	r30, r28
    5608:	ed 50       	subi	r30, 0x0D	; 13
    560a:	ff 4f       	sbci	r31, 0xFF	; 255
    560c:	80 81       	ld	r24, Z
    560e:	91 81       	ldd	r25, Z+1	; 0x01
    5610:	00 97       	sbiw	r24, 0x00	; 0
    5612:	d1 f6       	brne	.-76     	; 0x55c8 <main+0x524>
    5614:	27 c0       	rjmp	.+78     	; 0x5664 <main+0x5c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5616:	8e 01       	movw	r16, r28
    5618:	0d 50       	subi	r16, 0x0D	; 13
    561a:	1f 4f       	sbci	r17, 0xFF	; 255
    561c:	fe 01       	movw	r30, r28
    561e:	eb 50       	subi	r30, 0x0B	; 11
    5620:	ff 4f       	sbci	r31, 0xFF	; 255
    5622:	60 81       	ld	r22, Z
    5624:	71 81       	ldd	r23, Z+1	; 0x01
    5626:	82 81       	ldd	r24, Z+2	; 0x02
    5628:	93 81       	ldd	r25, Z+3	; 0x03
    562a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    562e:	dc 01       	movw	r26, r24
    5630:	cb 01       	movw	r24, r22
    5632:	f8 01       	movw	r30, r16
    5634:	91 83       	std	Z+1, r25	; 0x01
    5636:	80 83       	st	Z, r24
    5638:	de 01       	movw	r26, r28
    563a:	a1 51       	subi	r26, 0x11	; 17
    563c:	bf 4f       	sbci	r27, 0xFF	; 255
    563e:	fe 01       	movw	r30, r28
    5640:	ed 50       	subi	r30, 0x0D	; 13
    5642:	ff 4f       	sbci	r31, 0xFF	; 255
    5644:	80 81       	ld	r24, Z
    5646:	91 81       	ldd	r25, Z+1	; 0x01
    5648:	8d 93       	st	X+, r24
    564a:	9c 93       	st	X, r25
    564c:	fe 01       	movw	r30, r28
    564e:	e1 51       	subi	r30, 0x11	; 17
    5650:	ff 4f       	sbci	r31, 0xFF	; 255
    5652:	80 81       	ld	r24, Z
    5654:	91 81       	ldd	r25, Z+1	; 0x01
    5656:	01 97       	sbiw	r24, 0x01	; 1
    5658:	f1 f7       	brne	.-4      	; 0x5656 <main+0x5b2>
    565a:	fe 01       	movw	r30, r28
    565c:	e1 51       	subi	r30, 0x11	; 17
    565e:	ff 4f       	sbci	r31, 0xFF	; 255
    5660:	91 83       	std	Z+1, r25	; 0x01
    5662:	80 83       	st	Z, r24
				_delay_ms(100);
				CLCD_voidGoToXY(0,BackSpace-1);
    5664:	fe 01       	movw	r30, r28
    5666:	ed 5e       	subi	r30, 0xED	; 237
    5668:	fe 4f       	sbci	r31, 0xFE	; 254
    566a:	80 81       	ld	r24, Z
    566c:	98 2f       	mov	r25, r24
    566e:	91 50       	subi	r25, 0x01	; 1
    5670:	80 e0       	ldi	r24, 0x00	; 0
    5672:	69 2f       	mov	r22, r25
    5674:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>
				BackSpace++;
    5678:	de 01       	movw	r26, r28
    567a:	ad 5e       	subi	r26, 0xED	; 237
    567c:	be 4f       	sbci	r27, 0xFE	; 254
    567e:	fe 01       	movw	r30, r28
    5680:	ed 5e       	subi	r30, 0xED	; 237
    5682:	fe 4f       	sbci	r31, 0xFE	; 254
    5684:	80 81       	ld	r24, Z
    5686:	8f 5f       	subi	r24, 0xFF	; 255
    5688:	8c 93       	st	X, r24
				CLCD_voidSendData('*');
    568a:	8a e2       	ldi	r24, 0x2A	; 42
    568c:	0e 94 41 0b 	call	0x1682	; 0x1682 <CLCD_voidSendData>
				Enter_password=Enter_password*multiplier+Keypress;
    5690:	fe 01       	movw	r30, r28
    5692:	e1 5f       	subi	r30, 0xF1	; 241
    5694:	fe 4f       	sbci	r31, 0xFE	; 254
    5696:	de 01       	movw	r26, r28
    5698:	a5 5f       	subi	r26, 0xF5	; 245
    569a:	be 4f       	sbci	r27, 0xFE	; 254
    569c:	20 81       	ld	r18, Z
    569e:	31 81       	ldd	r19, Z+1	; 0x01
    56a0:	8d 91       	ld	r24, X+
    56a2:	9c 91       	ld	r25, X
    56a4:	11 97       	sbiw	r26, 0x01	; 1
    56a6:	a9 01       	movw	r20, r18
    56a8:	48 9f       	mul	r20, r24
    56aa:	90 01       	movw	r18, r0
    56ac:	49 9f       	mul	r20, r25
    56ae:	30 0d       	add	r19, r0
    56b0:	58 9f       	mul	r21, r24
    56b2:	30 0d       	add	r19, r0
    56b4:	11 24       	eor	r1, r1
    56b6:	fe 01       	movw	r30, r28
    56b8:	e9 5e       	subi	r30, 0xE9	; 233
    56ba:	fe 4f       	sbci	r31, 0xFE	; 254
    56bc:	80 81       	ld	r24, Z
    56be:	88 2f       	mov	r24, r24
    56c0:	90 e0       	ldi	r25, 0x00	; 0
    56c2:	fe 01       	movw	r30, r28
    56c4:	e1 5f       	subi	r30, 0xF1	; 241
    56c6:	fe 4f       	sbci	r31, 0xFE	; 254
    56c8:	82 0f       	add	r24, r18
    56ca:	93 1f       	adc	r25, r19
    56cc:	91 83       	std	Z+1, r25	; 0x01
    56ce:	80 83       	st	Z, r24
				multiplier=10;
    56d0:	fe 01       	movw	r30, r28
    56d2:	e5 5f       	subi	r30, 0xF5	; 245
    56d4:	fe 4f       	sbci	r31, 0xFE	; 254
    56d6:	8a e0       	ldi	r24, 0x0A	; 10
    56d8:	90 e0       	ldi	r25, 0x00	; 0
    56da:	91 83       	std	Z+1, r25	; 0x01
    56dc:	80 83       	st	Z, r24
			}
		}while(Keypress!='C');
    56de:	fe 01       	movw	r30, r28
    56e0:	e9 5e       	subi	r30, 0xE9	; 233
    56e2:	fe 4f       	sbci	r31, 0xFE	; 254
    56e4:	80 81       	ld	r24, Z
    56e6:	83 34       	cpi	r24, 0x43	; 67
    56e8:	09 f0       	breq	.+2      	; 0x56ec <main+0x648>
    56ea:	ee ce       	rjmp	.-548    	; 0x54c8 <main+0x424>
		if(Enter_password==defult_pass) // pass
    56ec:	fe 01       	movw	r30, r28
    56ee:	e1 5f       	subi	r30, 0xF1	; 241
    56f0:	fe 4f       	sbci	r31, 0xFE	; 254
    56f2:	de 01       	movw	r26, r28
    56f4:	a3 5f       	subi	r26, 0xF3	; 243
    56f6:	be 4f       	sbci	r27, 0xFE	; 254
    56f8:	20 81       	ld	r18, Z
    56fa:	31 81       	ldd	r19, Z+1	; 0x01
    56fc:	8d 91       	ld	r24, X+
    56fe:	9c 91       	ld	r25, X
    5700:	11 97       	sbiw	r26, 0x01	; 1
    5702:	28 17       	cp	r18, r24
    5704:	39 07       	cpc	r19, r25
    5706:	11 f0       	breq	.+4      	; 0x570c <main+0x668>
    5708:	0c 94 9f 38 	jmp	0x713e	; 0x713e <main+0x209a>
		{
			CLCD_voidSendCommand(1);
    570c:	81 e0       	ldi	r24, 0x01	; 1
    570e:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
			CLCD_voidSendString("welcome to Motor");
    5712:	87 e7       	ldi	r24, 0x77	; 119
    5714:	90 e0       	ldi	r25, 0x00	; 0
    5716:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
			CLCD_voidGoToXY(1,0);
    571a:	81 e0       	ldi	r24, 0x01	; 1
    571c:	60 e0       	ldi	r22, 0x00	; 0
    571e:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>
			CLCD_voidSendString("  Dashbroad ");
    5722:	88 e8       	ldi	r24, 0x88	; 136
    5724:	90 e0       	ldi	r25, 0x00	; 0
    5726:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
    572a:	fe 01       	movw	r30, r28
    572c:	e5 51       	subi	r30, 0x15	; 21
    572e:	ff 4f       	sbci	r31, 0xFF	; 255
    5730:	80 e0       	ldi	r24, 0x00	; 0
    5732:	90 e0       	ldi	r25, 0x00	; 0
    5734:	aa ef       	ldi	r26, 0xFA	; 250
    5736:	b3 e4       	ldi	r27, 0x43	; 67
    5738:	80 83       	st	Z, r24
    573a:	91 83       	std	Z+1, r25	; 0x01
    573c:	a2 83       	std	Z+2, r26	; 0x02
    573e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5740:	8e 01       	movw	r16, r28
    5742:	09 51       	subi	r16, 0x19	; 25
    5744:	1f 4f       	sbci	r17, 0xFF	; 255
    5746:	fe 01       	movw	r30, r28
    5748:	e5 51       	subi	r30, 0x15	; 21
    574a:	ff 4f       	sbci	r31, 0xFF	; 255
    574c:	60 81       	ld	r22, Z
    574e:	71 81       	ldd	r23, Z+1	; 0x01
    5750:	82 81       	ldd	r24, Z+2	; 0x02
    5752:	93 81       	ldd	r25, Z+3	; 0x03
    5754:	20 e0       	ldi	r18, 0x00	; 0
    5756:	30 e0       	ldi	r19, 0x00	; 0
    5758:	4a ef       	ldi	r20, 0xFA	; 250
    575a:	54 e4       	ldi	r21, 0x44	; 68
    575c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5760:	dc 01       	movw	r26, r24
    5762:	cb 01       	movw	r24, r22
    5764:	f8 01       	movw	r30, r16
    5766:	80 83       	st	Z, r24
    5768:	91 83       	std	Z+1, r25	; 0x01
    576a:	a2 83       	std	Z+2, r26	; 0x02
    576c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    576e:	fe 01       	movw	r30, r28
    5770:	e9 51       	subi	r30, 0x19	; 25
    5772:	ff 4f       	sbci	r31, 0xFF	; 255
    5774:	60 81       	ld	r22, Z
    5776:	71 81       	ldd	r23, Z+1	; 0x01
    5778:	82 81       	ldd	r24, Z+2	; 0x02
    577a:	93 81       	ldd	r25, Z+3	; 0x03
    577c:	20 e0       	ldi	r18, 0x00	; 0
    577e:	30 e0       	ldi	r19, 0x00	; 0
    5780:	40 e8       	ldi	r20, 0x80	; 128
    5782:	5f e3       	ldi	r21, 0x3F	; 63
    5784:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5788:	88 23       	and	r24, r24
    578a:	44 f4       	brge	.+16     	; 0x579c <main+0x6f8>
		__ticks = 1;
    578c:	fe 01       	movw	r30, r28
    578e:	eb 51       	subi	r30, 0x1B	; 27
    5790:	ff 4f       	sbci	r31, 0xFF	; 255
    5792:	81 e0       	ldi	r24, 0x01	; 1
    5794:	90 e0       	ldi	r25, 0x00	; 0
    5796:	91 83       	std	Z+1, r25	; 0x01
    5798:	80 83       	st	Z, r24
    579a:	64 c0       	rjmp	.+200    	; 0x5864 <main+0x7c0>
	else if (__tmp > 65535)
    579c:	fe 01       	movw	r30, r28
    579e:	e9 51       	subi	r30, 0x19	; 25
    57a0:	ff 4f       	sbci	r31, 0xFF	; 255
    57a2:	60 81       	ld	r22, Z
    57a4:	71 81       	ldd	r23, Z+1	; 0x01
    57a6:	82 81       	ldd	r24, Z+2	; 0x02
    57a8:	93 81       	ldd	r25, Z+3	; 0x03
    57aa:	20 e0       	ldi	r18, 0x00	; 0
    57ac:	3f ef       	ldi	r19, 0xFF	; 255
    57ae:	4f e7       	ldi	r20, 0x7F	; 127
    57b0:	57 e4       	ldi	r21, 0x47	; 71
    57b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    57b6:	18 16       	cp	r1, r24
    57b8:	0c f0       	brlt	.+2      	; 0x57bc <main+0x718>
    57ba:	43 c0       	rjmp	.+134    	; 0x5842 <main+0x79e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57bc:	fe 01       	movw	r30, r28
    57be:	e5 51       	subi	r30, 0x15	; 21
    57c0:	ff 4f       	sbci	r31, 0xFF	; 255
    57c2:	60 81       	ld	r22, Z
    57c4:	71 81       	ldd	r23, Z+1	; 0x01
    57c6:	82 81       	ldd	r24, Z+2	; 0x02
    57c8:	93 81       	ldd	r25, Z+3	; 0x03
    57ca:	20 e0       	ldi	r18, 0x00	; 0
    57cc:	30 e0       	ldi	r19, 0x00	; 0
    57ce:	40 e2       	ldi	r20, 0x20	; 32
    57d0:	51 e4       	ldi	r21, 0x41	; 65
    57d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57d6:	dc 01       	movw	r26, r24
    57d8:	cb 01       	movw	r24, r22
    57da:	8e 01       	movw	r16, r28
    57dc:	0b 51       	subi	r16, 0x1B	; 27
    57de:	1f 4f       	sbci	r17, 0xFF	; 255
    57e0:	bc 01       	movw	r22, r24
    57e2:	cd 01       	movw	r24, r26
    57e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57e8:	dc 01       	movw	r26, r24
    57ea:	cb 01       	movw	r24, r22
    57ec:	f8 01       	movw	r30, r16
    57ee:	91 83       	std	Z+1, r25	; 0x01
    57f0:	80 83       	st	Z, r24
    57f2:	1f c0       	rjmp	.+62     	; 0x5832 <main+0x78e>
    57f4:	fe 01       	movw	r30, r28
    57f6:	ed 51       	subi	r30, 0x1D	; 29
    57f8:	ff 4f       	sbci	r31, 0xFF	; 255
    57fa:	88 ec       	ldi	r24, 0xC8	; 200
    57fc:	90 e0       	ldi	r25, 0x00	; 0
    57fe:	91 83       	std	Z+1, r25	; 0x01
    5800:	80 83       	st	Z, r24
    5802:	fe 01       	movw	r30, r28
    5804:	ed 51       	subi	r30, 0x1D	; 29
    5806:	ff 4f       	sbci	r31, 0xFF	; 255
    5808:	80 81       	ld	r24, Z
    580a:	91 81       	ldd	r25, Z+1	; 0x01
    580c:	01 97       	sbiw	r24, 0x01	; 1
    580e:	f1 f7       	brne	.-4      	; 0x580c <main+0x768>
    5810:	fe 01       	movw	r30, r28
    5812:	ed 51       	subi	r30, 0x1D	; 29
    5814:	ff 4f       	sbci	r31, 0xFF	; 255
    5816:	91 83       	std	Z+1, r25	; 0x01
    5818:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    581a:	de 01       	movw	r26, r28
    581c:	ab 51       	subi	r26, 0x1B	; 27
    581e:	bf 4f       	sbci	r27, 0xFF	; 255
    5820:	fe 01       	movw	r30, r28
    5822:	eb 51       	subi	r30, 0x1B	; 27
    5824:	ff 4f       	sbci	r31, 0xFF	; 255
    5826:	80 81       	ld	r24, Z
    5828:	91 81       	ldd	r25, Z+1	; 0x01
    582a:	01 97       	sbiw	r24, 0x01	; 1
    582c:	11 96       	adiw	r26, 0x01	; 1
    582e:	9c 93       	st	X, r25
    5830:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5832:	fe 01       	movw	r30, r28
    5834:	eb 51       	subi	r30, 0x1B	; 27
    5836:	ff 4f       	sbci	r31, 0xFF	; 255
    5838:	80 81       	ld	r24, Z
    583a:	91 81       	ldd	r25, Z+1	; 0x01
    583c:	00 97       	sbiw	r24, 0x00	; 0
    583e:	d1 f6       	brne	.-76     	; 0x57f4 <main+0x750>
    5840:	27 c0       	rjmp	.+78     	; 0x5890 <main+0x7ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5842:	8e 01       	movw	r16, r28
    5844:	0b 51       	subi	r16, 0x1B	; 27
    5846:	1f 4f       	sbci	r17, 0xFF	; 255
    5848:	fe 01       	movw	r30, r28
    584a:	e9 51       	subi	r30, 0x19	; 25
    584c:	ff 4f       	sbci	r31, 0xFF	; 255
    584e:	60 81       	ld	r22, Z
    5850:	71 81       	ldd	r23, Z+1	; 0x01
    5852:	82 81       	ldd	r24, Z+2	; 0x02
    5854:	93 81       	ldd	r25, Z+3	; 0x03
    5856:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    585a:	dc 01       	movw	r26, r24
    585c:	cb 01       	movw	r24, r22
    585e:	f8 01       	movw	r30, r16
    5860:	91 83       	std	Z+1, r25	; 0x01
    5862:	80 83       	st	Z, r24
    5864:	de 01       	movw	r26, r28
    5866:	af 51       	subi	r26, 0x1F	; 31
    5868:	bf 4f       	sbci	r27, 0xFF	; 255
    586a:	fe 01       	movw	r30, r28
    586c:	eb 51       	subi	r30, 0x1B	; 27
    586e:	ff 4f       	sbci	r31, 0xFF	; 255
    5870:	80 81       	ld	r24, Z
    5872:	91 81       	ldd	r25, Z+1	; 0x01
    5874:	8d 93       	st	X+, r24
    5876:	9c 93       	st	X, r25
    5878:	fe 01       	movw	r30, r28
    587a:	ef 51       	subi	r30, 0x1F	; 31
    587c:	ff 4f       	sbci	r31, 0xFF	; 255
    587e:	80 81       	ld	r24, Z
    5880:	91 81       	ldd	r25, Z+1	; 0x01
    5882:	01 97       	sbiw	r24, 0x01	; 1
    5884:	f1 f7       	brne	.-4      	; 0x5882 <main+0x7de>
    5886:	fe 01       	movw	r30, r28
    5888:	ef 51       	subi	r30, 0x1F	; 31
    588a:	ff 4f       	sbci	r31, 0xFF	; 255
    588c:	91 83       	std	Z+1, r25	; 0x01
    588e:	80 83       	st	Z, r24
			_delay_ms(500);
			CLCD_voidSendCommand(1);
    5890:	81 e0       	ldi	r24, 0x01	; 1
    5892:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
			while(1)
			{
				CLCD_voidGoToXY(0,0);
    5896:	80 e0       	ldi	r24, 0x00	; 0
    5898:	60 e0       	ldi	r22, 0x00	; 0
    589a:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>
				CLCD_voidSendString(" Choose Motor");
    589e:	85 e9       	ldi	r24, 0x95	; 149
    58a0:	90 e0       	ldi	r25, 0x00	; 0
    58a2:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
    58a6:	fe 01       	movw	r30, r28
    58a8:	e3 52       	subi	r30, 0x23	; 35
    58aa:	ff 4f       	sbci	r31, 0xFF	; 255
    58ac:	80 e0       	ldi	r24, 0x00	; 0
    58ae:	90 e0       	ldi	r25, 0x00	; 0
    58b0:	aa ef       	ldi	r26, 0xFA	; 250
    58b2:	b3 e4       	ldi	r27, 0x43	; 67
    58b4:	80 83       	st	Z, r24
    58b6:	91 83       	std	Z+1, r25	; 0x01
    58b8:	a2 83       	std	Z+2, r26	; 0x02
    58ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    58bc:	8e 01       	movw	r16, r28
    58be:	07 52       	subi	r16, 0x27	; 39
    58c0:	1f 4f       	sbci	r17, 0xFF	; 255
    58c2:	fe 01       	movw	r30, r28
    58c4:	e3 52       	subi	r30, 0x23	; 35
    58c6:	ff 4f       	sbci	r31, 0xFF	; 255
    58c8:	60 81       	ld	r22, Z
    58ca:	71 81       	ldd	r23, Z+1	; 0x01
    58cc:	82 81       	ldd	r24, Z+2	; 0x02
    58ce:	93 81       	ldd	r25, Z+3	; 0x03
    58d0:	20 e0       	ldi	r18, 0x00	; 0
    58d2:	30 e0       	ldi	r19, 0x00	; 0
    58d4:	4a ef       	ldi	r20, 0xFA	; 250
    58d6:	54 e4       	ldi	r21, 0x44	; 68
    58d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58dc:	dc 01       	movw	r26, r24
    58de:	cb 01       	movw	r24, r22
    58e0:	f8 01       	movw	r30, r16
    58e2:	80 83       	st	Z, r24
    58e4:	91 83       	std	Z+1, r25	; 0x01
    58e6:	a2 83       	std	Z+2, r26	; 0x02
    58e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    58ea:	fe 01       	movw	r30, r28
    58ec:	e7 52       	subi	r30, 0x27	; 39
    58ee:	ff 4f       	sbci	r31, 0xFF	; 255
    58f0:	60 81       	ld	r22, Z
    58f2:	71 81       	ldd	r23, Z+1	; 0x01
    58f4:	82 81       	ldd	r24, Z+2	; 0x02
    58f6:	93 81       	ldd	r25, Z+3	; 0x03
    58f8:	20 e0       	ldi	r18, 0x00	; 0
    58fa:	30 e0       	ldi	r19, 0x00	; 0
    58fc:	40 e8       	ldi	r20, 0x80	; 128
    58fe:	5f e3       	ldi	r21, 0x3F	; 63
    5900:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5904:	88 23       	and	r24, r24
    5906:	44 f4       	brge	.+16     	; 0x5918 <main+0x874>
		__ticks = 1;
    5908:	fe 01       	movw	r30, r28
    590a:	e9 52       	subi	r30, 0x29	; 41
    590c:	ff 4f       	sbci	r31, 0xFF	; 255
    590e:	81 e0       	ldi	r24, 0x01	; 1
    5910:	90 e0       	ldi	r25, 0x00	; 0
    5912:	91 83       	std	Z+1, r25	; 0x01
    5914:	80 83       	st	Z, r24
    5916:	64 c0       	rjmp	.+200    	; 0x59e0 <main+0x93c>
	else if (__tmp > 65535)
    5918:	fe 01       	movw	r30, r28
    591a:	e7 52       	subi	r30, 0x27	; 39
    591c:	ff 4f       	sbci	r31, 0xFF	; 255
    591e:	60 81       	ld	r22, Z
    5920:	71 81       	ldd	r23, Z+1	; 0x01
    5922:	82 81       	ldd	r24, Z+2	; 0x02
    5924:	93 81       	ldd	r25, Z+3	; 0x03
    5926:	20 e0       	ldi	r18, 0x00	; 0
    5928:	3f ef       	ldi	r19, 0xFF	; 255
    592a:	4f e7       	ldi	r20, 0x7F	; 127
    592c:	57 e4       	ldi	r21, 0x47	; 71
    592e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5932:	18 16       	cp	r1, r24
    5934:	0c f0       	brlt	.+2      	; 0x5938 <main+0x894>
    5936:	43 c0       	rjmp	.+134    	; 0x59be <main+0x91a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5938:	fe 01       	movw	r30, r28
    593a:	e3 52       	subi	r30, 0x23	; 35
    593c:	ff 4f       	sbci	r31, 0xFF	; 255
    593e:	60 81       	ld	r22, Z
    5940:	71 81       	ldd	r23, Z+1	; 0x01
    5942:	82 81       	ldd	r24, Z+2	; 0x02
    5944:	93 81       	ldd	r25, Z+3	; 0x03
    5946:	20 e0       	ldi	r18, 0x00	; 0
    5948:	30 e0       	ldi	r19, 0x00	; 0
    594a:	40 e2       	ldi	r20, 0x20	; 32
    594c:	51 e4       	ldi	r21, 0x41	; 65
    594e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5952:	dc 01       	movw	r26, r24
    5954:	cb 01       	movw	r24, r22
    5956:	8e 01       	movw	r16, r28
    5958:	09 52       	subi	r16, 0x29	; 41
    595a:	1f 4f       	sbci	r17, 0xFF	; 255
    595c:	bc 01       	movw	r22, r24
    595e:	cd 01       	movw	r24, r26
    5960:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5964:	dc 01       	movw	r26, r24
    5966:	cb 01       	movw	r24, r22
    5968:	f8 01       	movw	r30, r16
    596a:	91 83       	std	Z+1, r25	; 0x01
    596c:	80 83       	st	Z, r24
    596e:	1f c0       	rjmp	.+62     	; 0x59ae <main+0x90a>
    5970:	fe 01       	movw	r30, r28
    5972:	eb 52       	subi	r30, 0x2B	; 43
    5974:	ff 4f       	sbci	r31, 0xFF	; 255
    5976:	88 ec       	ldi	r24, 0xC8	; 200
    5978:	90 e0       	ldi	r25, 0x00	; 0
    597a:	91 83       	std	Z+1, r25	; 0x01
    597c:	80 83       	st	Z, r24
    597e:	fe 01       	movw	r30, r28
    5980:	eb 52       	subi	r30, 0x2B	; 43
    5982:	ff 4f       	sbci	r31, 0xFF	; 255
    5984:	80 81       	ld	r24, Z
    5986:	91 81       	ldd	r25, Z+1	; 0x01
    5988:	01 97       	sbiw	r24, 0x01	; 1
    598a:	f1 f7       	brne	.-4      	; 0x5988 <main+0x8e4>
    598c:	fe 01       	movw	r30, r28
    598e:	eb 52       	subi	r30, 0x2B	; 43
    5990:	ff 4f       	sbci	r31, 0xFF	; 255
    5992:	91 83       	std	Z+1, r25	; 0x01
    5994:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5996:	de 01       	movw	r26, r28
    5998:	a9 52       	subi	r26, 0x29	; 41
    599a:	bf 4f       	sbci	r27, 0xFF	; 255
    599c:	fe 01       	movw	r30, r28
    599e:	e9 52       	subi	r30, 0x29	; 41
    59a0:	ff 4f       	sbci	r31, 0xFF	; 255
    59a2:	80 81       	ld	r24, Z
    59a4:	91 81       	ldd	r25, Z+1	; 0x01
    59a6:	01 97       	sbiw	r24, 0x01	; 1
    59a8:	11 96       	adiw	r26, 0x01	; 1
    59aa:	9c 93       	st	X, r25
    59ac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59ae:	fe 01       	movw	r30, r28
    59b0:	e9 52       	subi	r30, 0x29	; 41
    59b2:	ff 4f       	sbci	r31, 0xFF	; 255
    59b4:	80 81       	ld	r24, Z
    59b6:	91 81       	ldd	r25, Z+1	; 0x01
    59b8:	00 97       	sbiw	r24, 0x00	; 0
    59ba:	d1 f6       	brne	.-76     	; 0x5970 <main+0x8cc>
    59bc:	27 c0       	rjmp	.+78     	; 0x5a0c <main+0x968>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59be:	8e 01       	movw	r16, r28
    59c0:	09 52       	subi	r16, 0x29	; 41
    59c2:	1f 4f       	sbci	r17, 0xFF	; 255
    59c4:	fe 01       	movw	r30, r28
    59c6:	e7 52       	subi	r30, 0x27	; 39
    59c8:	ff 4f       	sbci	r31, 0xFF	; 255
    59ca:	60 81       	ld	r22, Z
    59cc:	71 81       	ldd	r23, Z+1	; 0x01
    59ce:	82 81       	ldd	r24, Z+2	; 0x02
    59d0:	93 81       	ldd	r25, Z+3	; 0x03
    59d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59d6:	dc 01       	movw	r26, r24
    59d8:	cb 01       	movw	r24, r22
    59da:	f8 01       	movw	r30, r16
    59dc:	91 83       	std	Z+1, r25	; 0x01
    59de:	80 83       	st	Z, r24
    59e0:	de 01       	movw	r26, r28
    59e2:	ad 52       	subi	r26, 0x2D	; 45
    59e4:	bf 4f       	sbci	r27, 0xFF	; 255
    59e6:	fe 01       	movw	r30, r28
    59e8:	e9 52       	subi	r30, 0x29	; 41
    59ea:	ff 4f       	sbci	r31, 0xFF	; 255
    59ec:	80 81       	ld	r24, Z
    59ee:	91 81       	ldd	r25, Z+1	; 0x01
    59f0:	8d 93       	st	X+, r24
    59f2:	9c 93       	st	X, r25
    59f4:	fe 01       	movw	r30, r28
    59f6:	ed 52       	subi	r30, 0x2D	; 45
    59f8:	ff 4f       	sbci	r31, 0xFF	; 255
    59fa:	80 81       	ld	r24, Z
    59fc:	91 81       	ldd	r25, Z+1	; 0x01
    59fe:	01 97       	sbiw	r24, 0x01	; 1
    5a00:	f1 f7       	brne	.-4      	; 0x59fe <main+0x95a>
    5a02:	fe 01       	movw	r30, r28
    5a04:	ed 52       	subi	r30, 0x2D	; 45
    5a06:	ff 4f       	sbci	r31, 0xFF	; 255
    5a08:	91 83       	std	Z+1, r25	; 0x01
    5a0a:	80 83       	st	Z, r24
				_delay_ms(500);
				CLCD_voidSendCommand(1);
    5a0c:	81 e0       	ldi	r24, 0x01	; 1
    5a0e:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
				CLCD_voidSendString("1-DC 2- Stepper");
    5a12:	83 ea       	ldi	r24, 0xA3	; 163
    5a14:	90 e0       	ldi	r25, 0x00	; 0
    5a16:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
				CLCD_voidGoToXY(1,0);
    5a1a:	81 e0       	ldi	r24, 0x01	; 1
    5a1c:	60 e0       	ldi	r22, 0x00	; 0
    5a1e:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>
				CLCD_voidSendString("3- Servo");
    5a22:	83 eb       	ldi	r24, 0xB3	; 179
    5a24:	90 e0       	ldi	r25, 0x00	; 0
    5a26:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
				do{
					Keypress = KPD_u8Key_pressed();
    5a2a:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <KPD_u8Key_pressed>
    5a2e:	fe 01       	movw	r30, r28
    5a30:	e9 5e       	subi	r30, 0xE9	; 233
    5a32:	fe 4f       	sbci	r31, 0xFE	; 254
    5a34:	80 83       	st	Z, r24
					if((1<=Keypress)&&(Keypress<=3))
    5a36:	fe 01       	movw	r30, r28
    5a38:	e9 5e       	subi	r30, 0xE9	; 233
    5a3a:	fe 4f       	sbci	r31, 0xFE	; 254
    5a3c:	80 81       	ld	r24, Z
    5a3e:	88 23       	and	r24, r24
    5a40:	31 f0       	breq	.+12     	; 0x5a4e <main+0x9aa>
    5a42:	fe 01       	movw	r30, r28
    5a44:	e9 5e       	subi	r30, 0xE9	; 233
    5a46:	fe 4f       	sbci	r31, 0xFE	; 254
    5a48:	80 81       	ld	r24, Z
    5a4a:	84 30       	cpi	r24, 0x04	; 4
    5a4c:	58 f0       	brcs	.+22     	; 0x5a64 <main+0x9c0>
					{
						break;
					}
					else
						Keypress = KPD_NO_PRESSED_KEY;
    5a4e:	fe 01       	movw	r30, r28
    5a50:	e9 5e       	subi	r30, 0xE9	; 233
    5a52:	fe 4f       	sbci	r31, 0xFE	; 254
    5a54:	8f ef       	ldi	r24, 0xFF	; 255
    5a56:	80 83       	st	Z, r24

				}while(Keypress == KPD_NO_PRESSED_KEY);
    5a58:	fe 01       	movw	r30, r28
    5a5a:	e9 5e       	subi	r30, 0xE9	; 233
    5a5c:	fe 4f       	sbci	r31, 0xFE	; 254
    5a5e:	80 81       	ld	r24, Z
    5a60:	8f 3f       	cpi	r24, 0xFF	; 255
    5a62:	19 f3       	breq	.-58     	; 0x5a2a <main+0x986>

				switch(Keypress)
    5a64:	fe 01       	movw	r30, r28
    5a66:	e9 5e       	subi	r30, 0xE9	; 233
    5a68:	fe 4f       	sbci	r31, 0xFE	; 254
    5a6a:	80 81       	ld	r24, Z
    5a6c:	28 2f       	mov	r18, r24
    5a6e:	30 e0       	ldi	r19, 0x00	; 0
    5a70:	c5 5d       	subi	r28, 0xD5	; 213
    5a72:	de 4f       	sbci	r29, 0xFE	; 254
    5a74:	39 83       	std	Y+1, r19	; 0x01
    5a76:	28 83       	st	Y, r18
    5a78:	cb 52       	subi	r28, 0x2B	; 43
    5a7a:	d1 40       	sbci	r29, 0x01	; 1
    5a7c:	c5 5d       	subi	r28, 0xD5	; 213
    5a7e:	de 4f       	sbci	r29, 0xFE	; 254
    5a80:	48 81       	ld	r20, Y
    5a82:	59 81       	ldd	r21, Y+1	; 0x01
    5a84:	cb 52       	subi	r28, 0x2B	; 43
    5a86:	d1 40       	sbci	r29, 0x01	; 1
    5a88:	42 30       	cpi	r20, 0x02	; 2
    5a8a:	51 05       	cpc	r21, r1
    5a8c:	11 f4       	brne	.+4      	; 0x5a92 <main+0x9ee>
    5a8e:	0c 94 b7 35 	jmp	0x6b6e	; 0x6b6e <main+0x1aca>
    5a92:	c5 5d       	subi	r28, 0xD5	; 213
    5a94:	de 4f       	sbci	r29, 0xFE	; 254
    5a96:	88 81       	ld	r24, Y
    5a98:	99 81       	ldd	r25, Y+1	; 0x01
    5a9a:	cb 52       	subi	r28, 0x2B	; 43
    5a9c:	d1 40       	sbci	r29, 0x01	; 1
    5a9e:	83 30       	cpi	r24, 0x03	; 3
    5aa0:	91 05       	cpc	r25, r1
    5aa2:	11 f4       	brne	.+4      	; 0x5aa8 <main+0xa04>
    5aa4:	0c 94 44 37 	jmp	0x6e88	; 0x6e88 <main+0x1de4>
    5aa8:	c5 5d       	subi	r28, 0xD5	; 213
    5aaa:	de 4f       	sbci	r29, 0xFE	; 254
    5aac:	e8 81       	ld	r30, Y
    5aae:	f9 81       	ldd	r31, Y+1	; 0x01
    5ab0:	cb 52       	subi	r28, 0x2B	; 43
    5ab2:	d1 40       	sbci	r29, 0x01	; 1
    5ab4:	e1 30       	cpi	r30, 0x01	; 1
    5ab6:	f1 05       	cpc	r31, r1
    5ab8:	09 f0       	breq	.+2      	; 0x5abc <main+0xa18>
    5aba:	ed ce       	rjmp	.-550    	; 0x5896 <main+0x7f2>
				{
				case DC_MOTOR:
					CLCD_voidSendCommand(1);
    5abc:	81 e0       	ldi	r24, 0x01	; 1
    5abe:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
					CLCD_voidSendString("Choose Direct");
    5ac2:	8c eb       	ldi	r24, 0xBC	; 188
    5ac4:	90 e0       	ldi	r25, 0x00	; 0
    5ac6:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
    5aca:	fe 01       	movw	r30, r28
    5acc:	e1 53       	subi	r30, 0x31	; 49
    5ace:	ff 4f       	sbci	r31, 0xFF	; 255
    5ad0:	80 e0       	ldi	r24, 0x00	; 0
    5ad2:	90 e0       	ldi	r25, 0x00	; 0
    5ad4:	aa ef       	ldi	r26, 0xFA	; 250
    5ad6:	b3 e4       	ldi	r27, 0x43	; 67
    5ad8:	80 83       	st	Z, r24
    5ada:	91 83       	std	Z+1, r25	; 0x01
    5adc:	a2 83       	std	Z+2, r26	; 0x02
    5ade:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ae0:	8e 01       	movw	r16, r28
    5ae2:	05 53       	subi	r16, 0x35	; 53
    5ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    5ae6:	fe 01       	movw	r30, r28
    5ae8:	e1 53       	subi	r30, 0x31	; 49
    5aea:	ff 4f       	sbci	r31, 0xFF	; 255
    5aec:	60 81       	ld	r22, Z
    5aee:	71 81       	ldd	r23, Z+1	; 0x01
    5af0:	82 81       	ldd	r24, Z+2	; 0x02
    5af2:	93 81       	ldd	r25, Z+3	; 0x03
    5af4:	20 e0       	ldi	r18, 0x00	; 0
    5af6:	30 e0       	ldi	r19, 0x00	; 0
    5af8:	4a ef       	ldi	r20, 0xFA	; 250
    5afa:	54 e4       	ldi	r21, 0x44	; 68
    5afc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b00:	dc 01       	movw	r26, r24
    5b02:	cb 01       	movw	r24, r22
    5b04:	f8 01       	movw	r30, r16
    5b06:	80 83       	st	Z, r24
    5b08:	91 83       	std	Z+1, r25	; 0x01
    5b0a:	a2 83       	std	Z+2, r26	; 0x02
    5b0c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5b0e:	fe 01       	movw	r30, r28
    5b10:	e5 53       	subi	r30, 0x35	; 53
    5b12:	ff 4f       	sbci	r31, 0xFF	; 255
    5b14:	60 81       	ld	r22, Z
    5b16:	71 81       	ldd	r23, Z+1	; 0x01
    5b18:	82 81       	ldd	r24, Z+2	; 0x02
    5b1a:	93 81       	ldd	r25, Z+3	; 0x03
    5b1c:	20 e0       	ldi	r18, 0x00	; 0
    5b1e:	30 e0       	ldi	r19, 0x00	; 0
    5b20:	40 e8       	ldi	r20, 0x80	; 128
    5b22:	5f e3       	ldi	r21, 0x3F	; 63
    5b24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5b28:	88 23       	and	r24, r24
    5b2a:	44 f4       	brge	.+16     	; 0x5b3c <main+0xa98>
		__ticks = 1;
    5b2c:	fe 01       	movw	r30, r28
    5b2e:	e7 53       	subi	r30, 0x37	; 55
    5b30:	ff 4f       	sbci	r31, 0xFF	; 255
    5b32:	81 e0       	ldi	r24, 0x01	; 1
    5b34:	90 e0       	ldi	r25, 0x00	; 0
    5b36:	91 83       	std	Z+1, r25	; 0x01
    5b38:	80 83       	st	Z, r24
    5b3a:	64 c0       	rjmp	.+200    	; 0x5c04 <main+0xb60>
	else if (__tmp > 65535)
    5b3c:	fe 01       	movw	r30, r28
    5b3e:	e5 53       	subi	r30, 0x35	; 53
    5b40:	ff 4f       	sbci	r31, 0xFF	; 255
    5b42:	60 81       	ld	r22, Z
    5b44:	71 81       	ldd	r23, Z+1	; 0x01
    5b46:	82 81       	ldd	r24, Z+2	; 0x02
    5b48:	93 81       	ldd	r25, Z+3	; 0x03
    5b4a:	20 e0       	ldi	r18, 0x00	; 0
    5b4c:	3f ef       	ldi	r19, 0xFF	; 255
    5b4e:	4f e7       	ldi	r20, 0x7F	; 127
    5b50:	57 e4       	ldi	r21, 0x47	; 71
    5b52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b56:	18 16       	cp	r1, r24
    5b58:	0c f0       	brlt	.+2      	; 0x5b5c <main+0xab8>
    5b5a:	43 c0       	rjmp	.+134    	; 0x5be2 <main+0xb3e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b5c:	fe 01       	movw	r30, r28
    5b5e:	e1 53       	subi	r30, 0x31	; 49
    5b60:	ff 4f       	sbci	r31, 0xFF	; 255
    5b62:	60 81       	ld	r22, Z
    5b64:	71 81       	ldd	r23, Z+1	; 0x01
    5b66:	82 81       	ldd	r24, Z+2	; 0x02
    5b68:	93 81       	ldd	r25, Z+3	; 0x03
    5b6a:	20 e0       	ldi	r18, 0x00	; 0
    5b6c:	30 e0       	ldi	r19, 0x00	; 0
    5b6e:	40 e2       	ldi	r20, 0x20	; 32
    5b70:	51 e4       	ldi	r21, 0x41	; 65
    5b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b76:	dc 01       	movw	r26, r24
    5b78:	cb 01       	movw	r24, r22
    5b7a:	8e 01       	movw	r16, r28
    5b7c:	07 53       	subi	r16, 0x37	; 55
    5b7e:	1f 4f       	sbci	r17, 0xFF	; 255
    5b80:	bc 01       	movw	r22, r24
    5b82:	cd 01       	movw	r24, r26
    5b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b88:	dc 01       	movw	r26, r24
    5b8a:	cb 01       	movw	r24, r22
    5b8c:	f8 01       	movw	r30, r16
    5b8e:	91 83       	std	Z+1, r25	; 0x01
    5b90:	80 83       	st	Z, r24
    5b92:	1f c0       	rjmp	.+62     	; 0x5bd2 <main+0xb2e>
    5b94:	fe 01       	movw	r30, r28
    5b96:	e9 53       	subi	r30, 0x39	; 57
    5b98:	ff 4f       	sbci	r31, 0xFF	; 255
    5b9a:	88 ec       	ldi	r24, 0xC8	; 200
    5b9c:	90 e0       	ldi	r25, 0x00	; 0
    5b9e:	91 83       	std	Z+1, r25	; 0x01
    5ba0:	80 83       	st	Z, r24
    5ba2:	fe 01       	movw	r30, r28
    5ba4:	e9 53       	subi	r30, 0x39	; 57
    5ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    5ba8:	80 81       	ld	r24, Z
    5baa:	91 81       	ldd	r25, Z+1	; 0x01
    5bac:	01 97       	sbiw	r24, 0x01	; 1
    5bae:	f1 f7       	brne	.-4      	; 0x5bac <main+0xb08>
    5bb0:	fe 01       	movw	r30, r28
    5bb2:	e9 53       	subi	r30, 0x39	; 57
    5bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    5bb6:	91 83       	std	Z+1, r25	; 0x01
    5bb8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5bba:	de 01       	movw	r26, r28
    5bbc:	a7 53       	subi	r26, 0x37	; 55
    5bbe:	bf 4f       	sbci	r27, 0xFF	; 255
    5bc0:	fe 01       	movw	r30, r28
    5bc2:	e7 53       	subi	r30, 0x37	; 55
    5bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    5bc6:	80 81       	ld	r24, Z
    5bc8:	91 81       	ldd	r25, Z+1	; 0x01
    5bca:	01 97       	sbiw	r24, 0x01	; 1
    5bcc:	11 96       	adiw	r26, 0x01	; 1
    5bce:	9c 93       	st	X, r25
    5bd0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5bd2:	fe 01       	movw	r30, r28
    5bd4:	e7 53       	subi	r30, 0x37	; 55
    5bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    5bd8:	80 81       	ld	r24, Z
    5bda:	91 81       	ldd	r25, Z+1	; 0x01
    5bdc:	00 97       	sbiw	r24, 0x00	; 0
    5bde:	d1 f6       	brne	.-76     	; 0x5b94 <main+0xaf0>
    5be0:	27 c0       	rjmp	.+78     	; 0x5c30 <main+0xb8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5be2:	8e 01       	movw	r16, r28
    5be4:	07 53       	subi	r16, 0x37	; 55
    5be6:	1f 4f       	sbci	r17, 0xFF	; 255
    5be8:	fe 01       	movw	r30, r28
    5bea:	e5 53       	subi	r30, 0x35	; 53
    5bec:	ff 4f       	sbci	r31, 0xFF	; 255
    5bee:	60 81       	ld	r22, Z
    5bf0:	71 81       	ldd	r23, Z+1	; 0x01
    5bf2:	82 81       	ldd	r24, Z+2	; 0x02
    5bf4:	93 81       	ldd	r25, Z+3	; 0x03
    5bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bfa:	dc 01       	movw	r26, r24
    5bfc:	cb 01       	movw	r24, r22
    5bfe:	f8 01       	movw	r30, r16
    5c00:	91 83       	std	Z+1, r25	; 0x01
    5c02:	80 83       	st	Z, r24
    5c04:	de 01       	movw	r26, r28
    5c06:	ab 53       	subi	r26, 0x3B	; 59
    5c08:	bf 4f       	sbci	r27, 0xFF	; 255
    5c0a:	fe 01       	movw	r30, r28
    5c0c:	e7 53       	subi	r30, 0x37	; 55
    5c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    5c10:	80 81       	ld	r24, Z
    5c12:	91 81       	ldd	r25, Z+1	; 0x01
    5c14:	8d 93       	st	X+, r24
    5c16:	9c 93       	st	X, r25
    5c18:	fe 01       	movw	r30, r28
    5c1a:	eb 53       	subi	r30, 0x3B	; 59
    5c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    5c1e:	80 81       	ld	r24, Z
    5c20:	91 81       	ldd	r25, Z+1	; 0x01
    5c22:	01 97       	sbiw	r24, 0x01	; 1
    5c24:	f1 f7       	brne	.-4      	; 0x5c22 <main+0xb7e>
    5c26:	fe 01       	movw	r30, r28
    5c28:	eb 53       	subi	r30, 0x3B	; 59
    5c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    5c2c:	91 83       	std	Z+1, r25	; 0x01
    5c2e:	80 83       	st	Z, r24
					_delay_ms(500);
					CLCD_voidSendCommand(1);
    5c30:	81 e0       	ldi	r24, 0x01	; 1
    5c32:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
					CLCD_voidSendString("1-Rotate CCW");
    5c36:	8a ec       	ldi	r24, 0xCA	; 202
    5c38:	90 e0       	ldi	r25, 0x00	; 0
    5c3a:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
					CLCD_voidGoToXY(1,0);
    5c3e:	81 e0       	ldi	r24, 0x01	; 1
    5c40:	60 e0       	ldi	r22, 0x00	; 0
    5c42:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>
					CLCD_voidSendString("2-Rotate CW");
    5c46:	87 ed       	ldi	r24, 0xD7	; 215
    5c48:	90 e0       	ldi	r25, 0x00	; 0
    5c4a:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
					do{
						Keypress = KPD_u8Key_pressed();
    5c4e:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <KPD_u8Key_pressed>
    5c52:	fe 01       	movw	r30, r28
    5c54:	e9 5e       	subi	r30, 0xE9	; 233
    5c56:	fe 4f       	sbci	r31, 0xFE	; 254
    5c58:	80 83       	st	Z, r24
						if((1<=Keypress)&&(Keypress<=2))
    5c5a:	fe 01       	movw	r30, r28
    5c5c:	e9 5e       	subi	r30, 0xE9	; 233
    5c5e:	fe 4f       	sbci	r31, 0xFE	; 254
    5c60:	80 81       	ld	r24, Z
    5c62:	88 23       	and	r24, r24
    5c64:	31 f0       	breq	.+12     	; 0x5c72 <main+0xbce>
    5c66:	fe 01       	movw	r30, r28
    5c68:	e9 5e       	subi	r30, 0xE9	; 233
    5c6a:	fe 4f       	sbci	r31, 0xFE	; 254
    5c6c:	80 81       	ld	r24, Z
    5c6e:	83 30       	cpi	r24, 0x03	; 3
    5c70:	58 f0       	brcs	.+22     	; 0x5c88 <main+0xbe4>
						{
							break;
						}
						else
							Keypress = KPD_NO_PRESSED_KEY;
    5c72:	fe 01       	movw	r30, r28
    5c74:	e9 5e       	subi	r30, 0xE9	; 233
    5c76:	fe 4f       	sbci	r31, 0xFE	; 254
    5c78:	8f ef       	ldi	r24, 0xFF	; 255
    5c7a:	80 83       	st	Z, r24

					}while(Keypress == KPD_NO_PRESSED_KEY);
    5c7c:	fe 01       	movw	r30, r28
    5c7e:	e9 5e       	subi	r30, 0xE9	; 233
    5c80:	fe 4f       	sbci	r31, 0xFE	; 254
    5c82:	80 81       	ld	r24, Z
    5c84:	8f 3f       	cpi	r24, 0xFF	; 255
    5c86:	19 f3       	breq	.-58     	; 0x5c4e <main+0xbaa>
					if(1==Keypress)  // Rotate CCW
    5c88:	fe 01       	movw	r30, r28
    5c8a:	e9 5e       	subi	r30, 0xE9	; 233
    5c8c:	fe 4f       	sbci	r31, 0xFE	; 254
    5c8e:	80 81       	ld	r24, Z
    5c90:	81 30       	cpi	r24, 0x01	; 1
    5c92:	09 f0       	breq	.+2      	; 0x5c96 <main+0xbf2>
    5c94:	b1 c3       	rjmp	.+1890   	; 0x63f8 <main+0x1354>
					{
						CLCD_voidSendCommand(1);
    5c96:	81 e0       	ldi	r24, 0x01	; 1
    5c98:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
						CLCD_voidSendString("Speed Control");
    5c9c:	83 ee       	ldi	r24, 0xE3	; 227
    5c9e:	90 e0       	ldi	r25, 0x00	; 0
    5ca0:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
    5ca4:	fe 01       	movw	r30, r28
    5ca6:	ef 53       	subi	r30, 0x3F	; 63
    5ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    5caa:	80 e0       	ldi	r24, 0x00	; 0
    5cac:	90 e0       	ldi	r25, 0x00	; 0
    5cae:	aa ef       	ldi	r26, 0xFA	; 250
    5cb0:	b3 e4       	ldi	r27, 0x43	; 67
    5cb2:	80 83       	st	Z, r24
    5cb4:	91 83       	std	Z+1, r25	; 0x01
    5cb6:	a2 83       	std	Z+2, r26	; 0x02
    5cb8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5cba:	8e 01       	movw	r16, r28
    5cbc:	03 54       	subi	r16, 0x43	; 67
    5cbe:	1f 4f       	sbci	r17, 0xFF	; 255
    5cc0:	fe 01       	movw	r30, r28
    5cc2:	ef 53       	subi	r30, 0x3F	; 63
    5cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    5cc6:	60 81       	ld	r22, Z
    5cc8:	71 81       	ldd	r23, Z+1	; 0x01
    5cca:	82 81       	ldd	r24, Z+2	; 0x02
    5ccc:	93 81       	ldd	r25, Z+3	; 0x03
    5cce:	20 e0       	ldi	r18, 0x00	; 0
    5cd0:	30 e0       	ldi	r19, 0x00	; 0
    5cd2:	4a ef       	ldi	r20, 0xFA	; 250
    5cd4:	54 e4       	ldi	r21, 0x44	; 68
    5cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cda:	dc 01       	movw	r26, r24
    5cdc:	cb 01       	movw	r24, r22
    5cde:	f8 01       	movw	r30, r16
    5ce0:	80 83       	st	Z, r24
    5ce2:	91 83       	std	Z+1, r25	; 0x01
    5ce4:	a2 83       	std	Z+2, r26	; 0x02
    5ce6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5ce8:	fe 01       	movw	r30, r28
    5cea:	e3 54       	subi	r30, 0x43	; 67
    5cec:	ff 4f       	sbci	r31, 0xFF	; 255
    5cee:	60 81       	ld	r22, Z
    5cf0:	71 81       	ldd	r23, Z+1	; 0x01
    5cf2:	82 81       	ldd	r24, Z+2	; 0x02
    5cf4:	93 81       	ldd	r25, Z+3	; 0x03
    5cf6:	20 e0       	ldi	r18, 0x00	; 0
    5cf8:	30 e0       	ldi	r19, 0x00	; 0
    5cfa:	40 e8       	ldi	r20, 0x80	; 128
    5cfc:	5f e3       	ldi	r21, 0x3F	; 63
    5cfe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5d02:	88 23       	and	r24, r24
    5d04:	44 f4       	brge	.+16     	; 0x5d16 <main+0xc72>
		__ticks = 1;
    5d06:	fe 01       	movw	r30, r28
    5d08:	e5 54       	subi	r30, 0x45	; 69
    5d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    5d0c:	81 e0       	ldi	r24, 0x01	; 1
    5d0e:	90 e0       	ldi	r25, 0x00	; 0
    5d10:	91 83       	std	Z+1, r25	; 0x01
    5d12:	80 83       	st	Z, r24
    5d14:	64 c0       	rjmp	.+200    	; 0x5dde <main+0xd3a>
	else if (__tmp > 65535)
    5d16:	fe 01       	movw	r30, r28
    5d18:	e3 54       	subi	r30, 0x43	; 67
    5d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    5d1c:	60 81       	ld	r22, Z
    5d1e:	71 81       	ldd	r23, Z+1	; 0x01
    5d20:	82 81       	ldd	r24, Z+2	; 0x02
    5d22:	93 81       	ldd	r25, Z+3	; 0x03
    5d24:	20 e0       	ldi	r18, 0x00	; 0
    5d26:	3f ef       	ldi	r19, 0xFF	; 255
    5d28:	4f e7       	ldi	r20, 0x7F	; 127
    5d2a:	57 e4       	ldi	r21, 0x47	; 71
    5d2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5d30:	18 16       	cp	r1, r24
    5d32:	0c f0       	brlt	.+2      	; 0x5d36 <main+0xc92>
    5d34:	43 c0       	rjmp	.+134    	; 0x5dbc <main+0xd18>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d36:	fe 01       	movw	r30, r28
    5d38:	ef 53       	subi	r30, 0x3F	; 63
    5d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    5d3c:	60 81       	ld	r22, Z
    5d3e:	71 81       	ldd	r23, Z+1	; 0x01
    5d40:	82 81       	ldd	r24, Z+2	; 0x02
    5d42:	93 81       	ldd	r25, Z+3	; 0x03
    5d44:	20 e0       	ldi	r18, 0x00	; 0
    5d46:	30 e0       	ldi	r19, 0x00	; 0
    5d48:	40 e2       	ldi	r20, 0x20	; 32
    5d4a:	51 e4       	ldi	r21, 0x41	; 65
    5d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d50:	dc 01       	movw	r26, r24
    5d52:	cb 01       	movw	r24, r22
    5d54:	8e 01       	movw	r16, r28
    5d56:	05 54       	subi	r16, 0x45	; 69
    5d58:	1f 4f       	sbci	r17, 0xFF	; 255
    5d5a:	bc 01       	movw	r22, r24
    5d5c:	cd 01       	movw	r24, r26
    5d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d62:	dc 01       	movw	r26, r24
    5d64:	cb 01       	movw	r24, r22
    5d66:	f8 01       	movw	r30, r16
    5d68:	91 83       	std	Z+1, r25	; 0x01
    5d6a:	80 83       	st	Z, r24
    5d6c:	1f c0       	rjmp	.+62     	; 0x5dac <main+0xd08>
    5d6e:	fe 01       	movw	r30, r28
    5d70:	e7 54       	subi	r30, 0x47	; 71
    5d72:	ff 4f       	sbci	r31, 0xFF	; 255
    5d74:	88 ec       	ldi	r24, 0xC8	; 200
    5d76:	90 e0       	ldi	r25, 0x00	; 0
    5d78:	91 83       	std	Z+1, r25	; 0x01
    5d7a:	80 83       	st	Z, r24
    5d7c:	fe 01       	movw	r30, r28
    5d7e:	e7 54       	subi	r30, 0x47	; 71
    5d80:	ff 4f       	sbci	r31, 0xFF	; 255
    5d82:	80 81       	ld	r24, Z
    5d84:	91 81       	ldd	r25, Z+1	; 0x01
    5d86:	01 97       	sbiw	r24, 0x01	; 1
    5d88:	f1 f7       	brne	.-4      	; 0x5d86 <main+0xce2>
    5d8a:	fe 01       	movw	r30, r28
    5d8c:	e7 54       	subi	r30, 0x47	; 71
    5d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    5d90:	91 83       	std	Z+1, r25	; 0x01
    5d92:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d94:	de 01       	movw	r26, r28
    5d96:	a5 54       	subi	r26, 0x45	; 69
    5d98:	bf 4f       	sbci	r27, 0xFF	; 255
    5d9a:	fe 01       	movw	r30, r28
    5d9c:	e5 54       	subi	r30, 0x45	; 69
    5d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    5da0:	80 81       	ld	r24, Z
    5da2:	91 81       	ldd	r25, Z+1	; 0x01
    5da4:	01 97       	sbiw	r24, 0x01	; 1
    5da6:	11 96       	adiw	r26, 0x01	; 1
    5da8:	9c 93       	st	X, r25
    5daa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5dac:	fe 01       	movw	r30, r28
    5dae:	e5 54       	subi	r30, 0x45	; 69
    5db0:	ff 4f       	sbci	r31, 0xFF	; 255
    5db2:	80 81       	ld	r24, Z
    5db4:	91 81       	ldd	r25, Z+1	; 0x01
    5db6:	00 97       	sbiw	r24, 0x00	; 0
    5db8:	d1 f6       	brne	.-76     	; 0x5d6e <main+0xcca>
    5dba:	27 c0       	rjmp	.+78     	; 0x5e0a <main+0xd66>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5dbc:	8e 01       	movw	r16, r28
    5dbe:	05 54       	subi	r16, 0x45	; 69
    5dc0:	1f 4f       	sbci	r17, 0xFF	; 255
    5dc2:	fe 01       	movw	r30, r28
    5dc4:	e3 54       	subi	r30, 0x43	; 67
    5dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    5dc8:	60 81       	ld	r22, Z
    5dca:	71 81       	ldd	r23, Z+1	; 0x01
    5dcc:	82 81       	ldd	r24, Z+2	; 0x02
    5dce:	93 81       	ldd	r25, Z+3	; 0x03
    5dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5dd4:	dc 01       	movw	r26, r24
    5dd6:	cb 01       	movw	r24, r22
    5dd8:	f8 01       	movw	r30, r16
    5dda:	91 83       	std	Z+1, r25	; 0x01
    5ddc:	80 83       	st	Z, r24
    5dde:	de 01       	movw	r26, r28
    5de0:	a9 54       	subi	r26, 0x49	; 73
    5de2:	bf 4f       	sbci	r27, 0xFF	; 255
    5de4:	fe 01       	movw	r30, r28
    5de6:	e5 54       	subi	r30, 0x45	; 69
    5de8:	ff 4f       	sbci	r31, 0xFF	; 255
    5dea:	80 81       	ld	r24, Z
    5dec:	91 81       	ldd	r25, Z+1	; 0x01
    5dee:	8d 93       	st	X+, r24
    5df0:	9c 93       	st	X, r25
    5df2:	fe 01       	movw	r30, r28
    5df4:	e9 54       	subi	r30, 0x49	; 73
    5df6:	ff 4f       	sbci	r31, 0xFF	; 255
    5df8:	80 81       	ld	r24, Z
    5dfa:	91 81       	ldd	r25, Z+1	; 0x01
    5dfc:	01 97       	sbiw	r24, 0x01	; 1
    5dfe:	f1 f7       	brne	.-4      	; 0x5dfc <main+0xd58>
    5e00:	fe 01       	movw	r30, r28
    5e02:	e9 54       	subi	r30, 0x49	; 73
    5e04:	ff 4f       	sbci	r31, 0xFF	; 255
    5e06:	91 83       	std	Z+1, r25	; 0x01
    5e08:	80 83       	st	Z, r24
						_delay_ms(500);
						CLCD_voidSendCommand(1);
    5e0a:	81 e0       	ldi	r24, 0x01	; 1
    5e0c:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
						CLCD_voidSendString("  1-FullSpeed");
    5e10:	81 ef       	ldi	r24, 0xF1	; 241
    5e12:	90 e0       	ldi	r25, 0x00	; 0
    5e14:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
						CLCD_voidGoToXY(1,0);
    5e18:	81 e0       	ldi	r24, 0x01	; 1
    5e1a:	60 e0       	ldi	r22, 0x00	; 0
    5e1c:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>
						CLCD_voidSendString("2- POT 3- LM35");
    5e20:	8f ef       	ldi	r24, 0xFF	; 255
    5e22:	90 e0       	ldi	r25, 0x00	; 0
    5e24:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>

						do{
							Keypress = KPD_u8Key_pressed();
    5e28:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <KPD_u8Key_pressed>
    5e2c:	fe 01       	movw	r30, r28
    5e2e:	e9 5e       	subi	r30, 0xE9	; 233
    5e30:	fe 4f       	sbci	r31, 0xFE	; 254
    5e32:	80 83       	st	Z, r24
							if((1<=Keypress)&&(Keypress<=3))
    5e34:	fe 01       	movw	r30, r28
    5e36:	e9 5e       	subi	r30, 0xE9	; 233
    5e38:	fe 4f       	sbci	r31, 0xFE	; 254
    5e3a:	80 81       	ld	r24, Z
    5e3c:	88 23       	and	r24, r24
    5e3e:	31 f0       	breq	.+12     	; 0x5e4c <main+0xda8>
    5e40:	fe 01       	movw	r30, r28
    5e42:	e9 5e       	subi	r30, 0xE9	; 233
    5e44:	fe 4f       	sbci	r31, 0xFE	; 254
    5e46:	80 81       	ld	r24, Z
    5e48:	84 30       	cpi	r24, 0x04	; 4
    5e4a:	58 f0       	brcs	.+22     	; 0x5e62 <main+0xdbe>
							{
								break;
							}
							else
								Keypress = KPD_NO_PRESSED_KEY;
    5e4c:	fe 01       	movw	r30, r28
    5e4e:	e9 5e       	subi	r30, 0xE9	; 233
    5e50:	fe 4f       	sbci	r31, 0xFE	; 254
    5e52:	8f ef       	ldi	r24, 0xFF	; 255
    5e54:	80 83       	st	Z, r24
						}while(Keypress == KPD_NO_PRESSED_KEY);
    5e56:	fe 01       	movw	r30, r28
    5e58:	e9 5e       	subi	r30, 0xE9	; 233
    5e5a:	fe 4f       	sbci	r31, 0xFE	; 254
    5e5c:	80 81       	ld	r24, Z
    5e5e:	8f 3f       	cpi	r24, 0xFF	; 255
    5e60:	19 f3       	breq	.-58     	; 0x5e28 <main+0xd84>


						if(1==Keypress)		// FullSpeed
    5e62:	fe 01       	movw	r30, r28
    5e64:	e9 5e       	subi	r30, 0xE9	; 233
    5e66:	fe 4f       	sbci	r31, 0xFE	; 254
    5e68:	80 81       	ld	r24, Z
    5e6a:	81 30       	cpi	r24, 0x01	; 1
    5e6c:	31 f5       	brne	.+76     	; 0x5eba <main+0xe16>
						{
							CLCD_voidSendCommand(1);
    5e6e:	81 e0       	ldi	r24, 0x01	; 1
    5e70:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
							CLCD_voidSendString("  1-FullSpeed");
    5e74:	81 ef       	ldi	r24, 0xF1	; 241
    5e76:	90 e0       	ldi	r25, 0x00	; 0
    5e78:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
							CLCD_voidGoToXY(1,0);
    5e7c:	81 e0       	ldi	r24, 0x01	; 1
    5e7e:	60 e0       	ldi	r22, 0x00	; 0
    5e80:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>
							CLCD_voidSendString("any key for out");
    5e84:	8e e0       	ldi	r24, 0x0E	; 14
    5e86:	91 e0       	ldi	r25, 0x01	; 1
    5e88:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
							do{
								Keypress= KPD_u8Key_pressed();
    5e8c:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <KPD_u8Key_pressed>
    5e90:	fe 01       	movw	r30, r28
    5e92:	e9 5e       	subi	r30, 0xE9	; 233
    5e94:	fe 4f       	sbci	r31, 0xFE	; 254
    5e96:	80 83       	st	Z, r24
								DIO_u8SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);
    5e98:	81 e0       	ldi	r24, 0x01	; 1
    5e9a:	63 e0       	ldi	r22, 0x03	; 3
    5e9c:	41 e0       	ldi	r20, 0x01	; 1
    5e9e:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_u8SetPinValue>
							}while(Keypress==KPD_NO_PRESSED_KEY);
    5ea2:	fe 01       	movw	r30, r28
    5ea4:	e9 5e       	subi	r30, 0xE9	; 233
    5ea6:	fe 4f       	sbci	r31, 0xFE	; 254
    5ea8:	80 81       	ld	r24, Z
    5eaa:	8f 3f       	cpi	r24, 0xFF	; 255
    5eac:	79 f3       	breq	.-34     	; 0x5e8c <main+0xde8>
							DIO_u8SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
    5eae:	81 e0       	ldi	r24, 0x01	; 1
    5eb0:	63 e0       	ldi	r22, 0x03	; 3
    5eb2:	40 e0       	ldi	r20, 0x00	; 0
    5eb4:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_u8SetPinValue>
    5eb8:	ee cc       	rjmp	.-1572   	; 0x5896 <main+0x7f2>
						}
						else if(2==Keypress) // POT
    5eba:	fe 01       	movw	r30, r28
    5ebc:	e9 5e       	subi	r30, 0xE9	; 233
    5ebe:	fe 4f       	sbci	r31, 0xFE	; 254
    5ec0:	80 81       	ld	r24, Z
    5ec2:	82 30       	cpi	r24, 0x02	; 2
    5ec4:	09 f0       	breq	.+2      	; 0x5ec8 <main+0xe24>
    5ec6:	14 c1       	rjmp	.+552    	; 0x60f0 <main+0x104c>
						{
							t0.CompOutMode = OC0_SET_UP_CLR_DOWN;
    5ec8:	fe 01       	movw	r30, r28
    5eca:	ef 5d       	subi	r30, 0xDF	; 223
    5ecc:	fe 4f       	sbci	r31, 0xFE	; 254
    5ece:	83 e0       	ldi	r24, 0x03	; 3
    5ed0:	82 83       	std	Z+2, r24	; 0x02
							TIMER0_voidCompOutModeChange(&t0);
    5ed2:	ce 01       	movw	r24, r28
    5ed4:	8f 5d       	subi	r24, 0xDF	; 223
    5ed6:	9e 4f       	sbci	r25, 0xFE	; 254
    5ed8:	0e 94 78 24 	call	0x48f0	; 0x48f0 <TIMER0_voidCompOutModeChange>
							CLCD_voidSendCommand(1);
    5edc:	81 e0       	ldi	r24, 0x01	; 1
    5ede:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
							do{
								Keypress = KPD_u8Key_pressed();
    5ee2:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <KPD_u8Key_pressed>
    5ee6:	fe 01       	movw	r30, r28
    5ee8:	e9 5e       	subi	r30, 0xE9	; 233
    5eea:	fe 4f       	sbci	r31, 0xFE	; 254
    5eec:	80 83       	st	Z, r24
								if(Keypress=='C')
    5eee:	fe 01       	movw	r30, r28
    5ef0:	e9 5e       	subi	r30, 0xE9	; 233
    5ef2:	fe 4f       	sbci	r31, 0xFE	; 254
    5ef4:	80 81       	ld	r24, Z
    5ef6:	83 34       	cpi	r24, 0x43	; 67
    5ef8:	09 f4       	brne	.+2      	; 0x5efc <main+0xe58>
    5efa:	f0 c0       	rjmp	.+480    	; 0x60dc <main+0x1038>
									break;
								else
									Keypress = KPD_NO_PRESSED_KEY;
    5efc:	fe 01       	movw	r30, r28
    5efe:	e9 5e       	subi	r30, 0xE9	; 233
    5f00:	fe 4f       	sbci	r31, 0xFE	; 254
    5f02:	8f ef       	ldi	r24, 0xFF	; 255
    5f04:	80 83       	st	Z, r24
								ADC_u8StartSingleConvPoll(ADC3,&Local_data);
    5f06:	9e 01       	movw	r18, r28
    5f08:	26 5e       	subi	r18, 0xE6	; 230
    5f0a:	3e 4f       	sbci	r19, 0xFE	; 254
    5f0c:	83 e0       	ldi	r24, 0x03	; 3
    5f0e:	b9 01       	movw	r22, r18
    5f10:	0e 94 4f 07 	call	0xe9e	; 0xe9e <ADC_u8StartSingleConvPoll>
								CLCD_voidGoToXY(0,0);
    5f14:	80 e0       	ldi	r24, 0x00	; 0
    5f16:	60 e0       	ldi	r22, 0x00	; 0
    5f18:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>
								CLCD_voidSendString(" Speed :");
    5f1c:	8e e1       	ldi	r24, 0x1E	; 30
    5f1e:	91 e0       	ldi	r25, 0x01	; 1
    5f20:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
								CLCD_voidGoToXY(1,0);
    5f24:	81 e0       	ldi	r24, 0x01	; 1
    5f26:	60 e0       	ldi	r22, 0x00	; 0
    5f28:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>
								CLCD_voidWriteNumber(255-Local_data);
    5f2c:	fe 01       	movw	r30, r28
    5f2e:	e6 5e       	subi	r30, 0xE6	; 230
    5f30:	fe 4f       	sbci	r31, 0xFE	; 254
    5f32:	20 81       	ld	r18, Z
    5f34:	31 81       	ldd	r19, Z+1	; 0x01
    5f36:	8f ef       	ldi	r24, 0xFF	; 255
    5f38:	90 e0       	ldi	r25, 0x00	; 0
    5f3a:	82 1b       	sub	r24, r18
    5f3c:	93 0b       	sbc	r25, r19
    5f3e:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <CLCD_voidWriteNumber>
								CLCD_voidSendString(" RPM");
    5f42:	87 e2       	ldi	r24, 0x27	; 39
    5f44:	91 e0       	ldi	r25, 0x01	; 1
    5f46:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
								TIMER0_voidSetCompMatchValue(Local_data);
    5f4a:	fe 01       	movw	r30, r28
    5f4c:	e6 5e       	subi	r30, 0xE6	; 230
    5f4e:	fe 4f       	sbci	r31, 0xFE	; 254
    5f50:	80 81       	ld	r24, Z
    5f52:	91 81       	ldd	r25, Z+1	; 0x01
    5f54:	0e 94 ac 24 	call	0x4958	; 0x4958 <TIMER0_voidSetCompMatchValue>
    5f58:	fe 01       	movw	r30, r28
    5f5a:	ed 54       	subi	r30, 0x4D	; 77
    5f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    5f5e:	80 e0       	ldi	r24, 0x00	; 0
    5f60:	90 e0       	ldi	r25, 0x00	; 0
    5f62:	a8 ec       	ldi	r26, 0xC8	; 200
    5f64:	b2 e4       	ldi	r27, 0x42	; 66
    5f66:	80 83       	st	Z, r24
    5f68:	91 83       	std	Z+1, r25	; 0x01
    5f6a:	a2 83       	std	Z+2, r26	; 0x02
    5f6c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f6e:	8e 01       	movw	r16, r28
    5f70:	01 55       	subi	r16, 0x51	; 81
    5f72:	1f 4f       	sbci	r17, 0xFF	; 255
    5f74:	fe 01       	movw	r30, r28
    5f76:	ed 54       	subi	r30, 0x4D	; 77
    5f78:	ff 4f       	sbci	r31, 0xFF	; 255
    5f7a:	60 81       	ld	r22, Z
    5f7c:	71 81       	ldd	r23, Z+1	; 0x01
    5f7e:	82 81       	ldd	r24, Z+2	; 0x02
    5f80:	93 81       	ldd	r25, Z+3	; 0x03
    5f82:	20 e0       	ldi	r18, 0x00	; 0
    5f84:	30 e0       	ldi	r19, 0x00	; 0
    5f86:	4a ef       	ldi	r20, 0xFA	; 250
    5f88:	54 e4       	ldi	r21, 0x44	; 68
    5f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f8e:	dc 01       	movw	r26, r24
    5f90:	cb 01       	movw	r24, r22
    5f92:	f8 01       	movw	r30, r16
    5f94:	80 83       	st	Z, r24
    5f96:	91 83       	std	Z+1, r25	; 0x01
    5f98:	a2 83       	std	Z+2, r26	; 0x02
    5f9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5f9c:	fe 01       	movw	r30, r28
    5f9e:	e1 55       	subi	r30, 0x51	; 81
    5fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    5fa2:	60 81       	ld	r22, Z
    5fa4:	71 81       	ldd	r23, Z+1	; 0x01
    5fa6:	82 81       	ldd	r24, Z+2	; 0x02
    5fa8:	93 81       	ldd	r25, Z+3	; 0x03
    5faa:	20 e0       	ldi	r18, 0x00	; 0
    5fac:	30 e0       	ldi	r19, 0x00	; 0
    5fae:	40 e8       	ldi	r20, 0x80	; 128
    5fb0:	5f e3       	ldi	r21, 0x3F	; 63
    5fb2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5fb6:	88 23       	and	r24, r24
    5fb8:	44 f4       	brge	.+16     	; 0x5fca <main+0xf26>
		__ticks = 1;
    5fba:	fe 01       	movw	r30, r28
    5fbc:	e3 55       	subi	r30, 0x53	; 83
    5fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    5fc0:	81 e0       	ldi	r24, 0x01	; 1
    5fc2:	90 e0       	ldi	r25, 0x00	; 0
    5fc4:	91 83       	std	Z+1, r25	; 0x01
    5fc6:	80 83       	st	Z, r24
    5fc8:	64 c0       	rjmp	.+200    	; 0x6092 <main+0xfee>
	else if (__tmp > 65535)
    5fca:	fe 01       	movw	r30, r28
    5fcc:	e1 55       	subi	r30, 0x51	; 81
    5fce:	ff 4f       	sbci	r31, 0xFF	; 255
    5fd0:	60 81       	ld	r22, Z
    5fd2:	71 81       	ldd	r23, Z+1	; 0x01
    5fd4:	82 81       	ldd	r24, Z+2	; 0x02
    5fd6:	93 81       	ldd	r25, Z+3	; 0x03
    5fd8:	20 e0       	ldi	r18, 0x00	; 0
    5fda:	3f ef       	ldi	r19, 0xFF	; 255
    5fdc:	4f e7       	ldi	r20, 0x7F	; 127
    5fde:	57 e4       	ldi	r21, 0x47	; 71
    5fe0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5fe4:	18 16       	cp	r1, r24
    5fe6:	0c f0       	brlt	.+2      	; 0x5fea <main+0xf46>
    5fe8:	43 c0       	rjmp	.+134    	; 0x6070 <main+0xfcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5fea:	fe 01       	movw	r30, r28
    5fec:	ed 54       	subi	r30, 0x4D	; 77
    5fee:	ff 4f       	sbci	r31, 0xFF	; 255
    5ff0:	60 81       	ld	r22, Z
    5ff2:	71 81       	ldd	r23, Z+1	; 0x01
    5ff4:	82 81       	ldd	r24, Z+2	; 0x02
    5ff6:	93 81       	ldd	r25, Z+3	; 0x03
    5ff8:	20 e0       	ldi	r18, 0x00	; 0
    5ffa:	30 e0       	ldi	r19, 0x00	; 0
    5ffc:	40 e2       	ldi	r20, 0x20	; 32
    5ffe:	51 e4       	ldi	r21, 0x41	; 65
    6000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6004:	dc 01       	movw	r26, r24
    6006:	cb 01       	movw	r24, r22
    6008:	8e 01       	movw	r16, r28
    600a:	03 55       	subi	r16, 0x53	; 83
    600c:	1f 4f       	sbci	r17, 0xFF	; 255
    600e:	bc 01       	movw	r22, r24
    6010:	cd 01       	movw	r24, r26
    6012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6016:	dc 01       	movw	r26, r24
    6018:	cb 01       	movw	r24, r22
    601a:	f8 01       	movw	r30, r16
    601c:	91 83       	std	Z+1, r25	; 0x01
    601e:	80 83       	st	Z, r24
    6020:	1f c0       	rjmp	.+62     	; 0x6060 <main+0xfbc>
    6022:	fe 01       	movw	r30, r28
    6024:	e5 55       	subi	r30, 0x55	; 85
    6026:	ff 4f       	sbci	r31, 0xFF	; 255
    6028:	88 ec       	ldi	r24, 0xC8	; 200
    602a:	90 e0       	ldi	r25, 0x00	; 0
    602c:	91 83       	std	Z+1, r25	; 0x01
    602e:	80 83       	st	Z, r24
    6030:	fe 01       	movw	r30, r28
    6032:	e5 55       	subi	r30, 0x55	; 85
    6034:	ff 4f       	sbci	r31, 0xFF	; 255
    6036:	80 81       	ld	r24, Z
    6038:	91 81       	ldd	r25, Z+1	; 0x01
    603a:	01 97       	sbiw	r24, 0x01	; 1
    603c:	f1 f7       	brne	.-4      	; 0x603a <main+0xf96>
    603e:	fe 01       	movw	r30, r28
    6040:	e5 55       	subi	r30, 0x55	; 85
    6042:	ff 4f       	sbci	r31, 0xFF	; 255
    6044:	91 83       	std	Z+1, r25	; 0x01
    6046:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6048:	de 01       	movw	r26, r28
    604a:	a3 55       	subi	r26, 0x53	; 83
    604c:	bf 4f       	sbci	r27, 0xFF	; 255
    604e:	fe 01       	movw	r30, r28
    6050:	e3 55       	subi	r30, 0x53	; 83
    6052:	ff 4f       	sbci	r31, 0xFF	; 255
    6054:	80 81       	ld	r24, Z
    6056:	91 81       	ldd	r25, Z+1	; 0x01
    6058:	01 97       	sbiw	r24, 0x01	; 1
    605a:	11 96       	adiw	r26, 0x01	; 1
    605c:	9c 93       	st	X, r25
    605e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6060:	fe 01       	movw	r30, r28
    6062:	e3 55       	subi	r30, 0x53	; 83
    6064:	ff 4f       	sbci	r31, 0xFF	; 255
    6066:	80 81       	ld	r24, Z
    6068:	91 81       	ldd	r25, Z+1	; 0x01
    606a:	00 97       	sbiw	r24, 0x00	; 0
    606c:	d1 f6       	brne	.-76     	; 0x6022 <main+0xf7e>
    606e:	27 c0       	rjmp	.+78     	; 0x60be <main+0x101a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6070:	8e 01       	movw	r16, r28
    6072:	03 55       	subi	r16, 0x53	; 83
    6074:	1f 4f       	sbci	r17, 0xFF	; 255
    6076:	fe 01       	movw	r30, r28
    6078:	e1 55       	subi	r30, 0x51	; 81
    607a:	ff 4f       	sbci	r31, 0xFF	; 255
    607c:	60 81       	ld	r22, Z
    607e:	71 81       	ldd	r23, Z+1	; 0x01
    6080:	82 81       	ldd	r24, Z+2	; 0x02
    6082:	93 81       	ldd	r25, Z+3	; 0x03
    6084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6088:	dc 01       	movw	r26, r24
    608a:	cb 01       	movw	r24, r22
    608c:	f8 01       	movw	r30, r16
    608e:	91 83       	std	Z+1, r25	; 0x01
    6090:	80 83       	st	Z, r24
    6092:	de 01       	movw	r26, r28
    6094:	a7 55       	subi	r26, 0x57	; 87
    6096:	bf 4f       	sbci	r27, 0xFF	; 255
    6098:	fe 01       	movw	r30, r28
    609a:	e3 55       	subi	r30, 0x53	; 83
    609c:	ff 4f       	sbci	r31, 0xFF	; 255
    609e:	80 81       	ld	r24, Z
    60a0:	91 81       	ldd	r25, Z+1	; 0x01
    60a2:	8d 93       	st	X+, r24
    60a4:	9c 93       	st	X, r25
    60a6:	fe 01       	movw	r30, r28
    60a8:	e7 55       	subi	r30, 0x57	; 87
    60aa:	ff 4f       	sbci	r31, 0xFF	; 255
    60ac:	80 81       	ld	r24, Z
    60ae:	91 81       	ldd	r25, Z+1	; 0x01
    60b0:	01 97       	sbiw	r24, 0x01	; 1
    60b2:	f1 f7       	brne	.-4      	; 0x60b0 <main+0x100c>
    60b4:	fe 01       	movw	r30, r28
    60b6:	e7 55       	subi	r30, 0x57	; 87
    60b8:	ff 4f       	sbci	r31, 0xFF	; 255
    60ba:	91 83       	std	Z+1, r25	; 0x01
    60bc:	80 83       	st	Z, r24
								_delay_ms(100);
								CLCD_voidGoToXY(1,0);
    60be:	81 e0       	ldi	r24, 0x01	; 1
    60c0:	60 e0       	ldi	r22, 0x00	; 0
    60c2:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>
								CLCD_voidSendString("       ");
    60c6:	8c e2       	ldi	r24, 0x2C	; 44
    60c8:	91 e0       	ldi	r25, 0x01	; 1
    60ca:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
							}while(Keypress == KPD_NO_PRESSED_KEY);
    60ce:	fe 01       	movw	r30, r28
    60d0:	e9 5e       	subi	r30, 0xE9	; 233
    60d2:	fe 4f       	sbci	r31, 0xFE	; 254
    60d4:	80 81       	ld	r24, Z
    60d6:	8f 3f       	cpi	r24, 0xFF	; 255
    60d8:	09 f4       	brne	.+2      	; 0x60dc <main+0x1038>
    60da:	03 cf       	rjmp	.-506    	; 0x5ee2 <main+0xe3e>
							t0.CompOutMode = OC0_DIS;
    60dc:	fe 01       	movw	r30, r28
    60de:	ef 5d       	subi	r30, 0xDF	; 223
    60e0:	fe 4f       	sbci	r31, 0xFE	; 254
    60e2:	12 82       	std	Z+2, r1	; 0x02
							TIMER0_voidCompOutModeChange(&t0);
    60e4:	ce 01       	movw	r24, r28
    60e6:	8f 5d       	subi	r24, 0xDF	; 223
    60e8:	9e 4f       	sbci	r25, 0xFE	; 254
    60ea:	0e 94 78 24 	call	0x48f0	; 0x48f0 <TIMER0_voidCompOutModeChange>
    60ee:	d3 cb       	rjmp	.-2138   	; 0x5896 <main+0x7f2>
						}
						else if(3==Keypress) // Lm35
    60f0:	fe 01       	movw	r30, r28
    60f2:	e9 5e       	subi	r30, 0xE9	; 233
    60f4:	fe 4f       	sbci	r31, 0xFE	; 254
    60f6:	80 81       	ld	r24, Z
    60f8:	83 30       	cpi	r24, 0x03	; 3
    60fa:	09 f0       	breq	.+2      	; 0x60fe <main+0x105a>
    60fc:	cc cb       	rjmp	.-2152   	; 0x5896 <main+0x7f2>
						{
							t0.CompOutMode = OC0_SET_UP_CLR_DOWN;
    60fe:	fe 01       	movw	r30, r28
    6100:	ef 5d       	subi	r30, 0xDF	; 223
    6102:	fe 4f       	sbci	r31, 0xFE	; 254
    6104:	83 e0       	ldi	r24, 0x03	; 3
    6106:	82 83       	std	Z+2, r24	; 0x02
							TIMER0_voidCompOutModeChange(&t0);
    6108:	ce 01       	movw	r24, r28
    610a:	8f 5d       	subi	r24, 0xDF	; 223
    610c:	9e 4f       	sbci	r25, 0xFE	; 254
    610e:	0e 94 78 24 	call	0x48f0	; 0x48f0 <TIMER0_voidCompOutModeChange>
							CLCD_voidSendCommand(1);
    6112:	81 e0       	ldi	r24, 0x01	; 1
    6114:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
							do{
								Keypress = KPD_u8Key_pressed();
    6118:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <KPD_u8Key_pressed>
    611c:	fe 01       	movw	r30, r28
    611e:	e9 5e       	subi	r30, 0xE9	; 233
    6120:	fe 4f       	sbci	r31, 0xFE	; 254
    6122:	80 83       	st	Z, r24
								if(Keypress=='C')
    6124:	fe 01       	movw	r30, r28
    6126:	e9 5e       	subi	r30, 0xE9	; 233
    6128:	fe 4f       	sbci	r31, 0xFE	; 254
    612a:	80 81       	ld	r24, Z
    612c:	83 34       	cpi	r24, 0x43	; 67
    612e:	09 f4       	brne	.+2      	; 0x6132 <main+0x108e>
    6130:	59 c1       	rjmp	.+690    	; 0x63e4 <main+0x1340>
									break;
								else
									Keypress = KPD_NO_PRESSED_KEY;
    6132:	fe 01       	movw	r30, r28
    6134:	e9 5e       	subi	r30, 0xE9	; 233
    6136:	fe 4f       	sbci	r31, 0xFE	; 254
    6138:	8f ef       	ldi	r24, 0xFF	; 255
    613a:	80 83       	st	Z, r24
								ADC_u8StartSingleConvPoll(ADC1,&Local_data);
    613c:	9e 01       	movw	r18, r28
    613e:	26 5e       	subi	r18, 0xE6	; 230
    6140:	3e 4f       	sbci	r19, 0xFE	; 254
    6142:	81 e0       	ldi	r24, 0x01	; 1
    6144:	b9 01       	movw	r22, r18
    6146:	0e 94 4f 07 	call	0xe9e	; 0xe9e <ADC_u8StartSingleConvPoll>
								Local_data = (u16)(((u32)(Local_data*5000UL))/256UL);
    614a:	fe 01       	movw	r30, r28
    614c:	e6 5e       	subi	r30, 0xE6	; 230
    614e:	fe 4f       	sbci	r31, 0xFE	; 254
    6150:	80 81       	ld	r24, Z
    6152:	91 81       	ldd	r25, Z+1	; 0x01
    6154:	cc 01       	movw	r24, r24
    6156:	a0 e0       	ldi	r26, 0x00	; 0
    6158:	b0 e0       	ldi	r27, 0x00	; 0
    615a:	28 e8       	ldi	r18, 0x88	; 136
    615c:	33 e1       	ldi	r19, 0x13	; 19
    615e:	40 e0       	ldi	r20, 0x00	; 0
    6160:	50 e0       	ldi	r21, 0x00	; 0
    6162:	bc 01       	movw	r22, r24
    6164:	cd 01       	movw	r24, r26
    6166:	0e 94 69 3c 	call	0x78d2	; 0x78d2 <__mulsi3>
    616a:	dc 01       	movw	r26, r24
    616c:	cb 01       	movw	r24, r22
    616e:	89 2f       	mov	r24, r25
    6170:	9a 2f       	mov	r25, r26
    6172:	ab 2f       	mov	r26, r27
    6174:	bb 27       	eor	r27, r27
    6176:	fe 01       	movw	r30, r28
    6178:	e6 5e       	subi	r30, 0xE6	; 230
    617a:	fe 4f       	sbci	r31, 0xFE	; 254
    617c:	91 83       	std	Z+1, r25	; 0x01
    617e:	80 83       	st	Z, r24
								Local_data /=100;
    6180:	fe 01       	movw	r30, r28
    6182:	e6 5e       	subi	r30, 0xE6	; 230
    6184:	fe 4f       	sbci	r31, 0xFE	; 254
    6186:	80 81       	ld	r24, Z
    6188:	91 81       	ldd	r25, Z+1	; 0x01
    618a:	24 e6       	ldi	r18, 0x64	; 100
    618c:	30 e0       	ldi	r19, 0x00	; 0
    618e:	b9 01       	movw	r22, r18
    6190:	0e 94 88 3c 	call	0x7910	; 0x7910 <__udivmodhi4>
    6194:	cb 01       	movw	r24, r22
    6196:	fe 01       	movw	r30, r28
    6198:	e6 5e       	subi	r30, 0xE6	; 230
    619a:	fe 4f       	sbci	r31, 0xFE	; 254
    619c:	91 83       	std	Z+1, r25	; 0x01
    619e:	80 83       	st	Z, r24
								CLCD_voidGoToXY(0,0);
    61a0:	80 e0       	ldi	r24, 0x00	; 0
    61a2:	60 e0       	ldi	r22, 0x00	; 0
    61a4:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>
								CLCD_voidSendString("Current Temp:");
    61a8:	84 e3       	ldi	r24, 0x34	; 52
    61aa:	91 e0       	ldi	r25, 0x01	; 1
    61ac:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
								CLCD_voidGoToXY(1,0);
    61b0:	81 e0       	ldi	r24, 0x01	; 1
    61b2:	60 e0       	ldi	r22, 0x00	; 0
    61b4:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>
								CLCD_voidWriteNumber(Local_data);
    61b8:	fe 01       	movw	r30, r28
    61ba:	e6 5e       	subi	r30, 0xE6	; 230
    61bc:	fe 4f       	sbci	r31, 0xFE	; 254
    61be:	80 81       	ld	r24, Z
    61c0:	91 81       	ldd	r25, Z+1	; 0x01
    61c2:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <CLCD_voidWriteNumber>
								mapVal = AppMap(27,42,0,255,Local_data);
    61c6:	fe 01       	movw	r30, r28
    61c8:	e6 5e       	subi	r30, 0xE6	; 230
    61ca:	fe 4f       	sbci	r31, 0xFE	; 254
    61cc:	80 81       	ld	r24, Z
    61ce:	91 81       	ldd	r25, Z+1	; 0x01
    61d0:	cc 01       	movw	r24, r24
    61d2:	a0 e0       	ldi	r26, 0x00	; 0
    61d4:	b0 e0       	ldi	r27, 0x00	; 0
    61d6:	00 d0       	rcall	.+0      	; 0x61d8 <main+0x1134>
    61d8:	00 d0       	rcall	.+0      	; 0x61da <main+0x1136>
    61da:	ed b7       	in	r30, 0x3d	; 61
    61dc:	fe b7       	in	r31, 0x3e	; 62
    61de:	31 96       	adiw	r30, 0x01	; 1
    61e0:	80 83       	st	Z, r24
    61e2:	91 83       	std	Z+1, r25	; 0x01
    61e4:	a2 83       	std	Z+2, r26	; 0x02
    61e6:	b3 83       	std	Z+3, r27	; 0x03
    61e8:	6b e1       	ldi	r22, 0x1B	; 27
    61ea:	70 e0       	ldi	r23, 0x00	; 0
    61ec:	80 e0       	ldi	r24, 0x00	; 0
    61ee:	90 e0       	ldi	r25, 0x00	; 0
    61f0:	2a e2       	ldi	r18, 0x2A	; 42
    61f2:	30 e0       	ldi	r19, 0x00	; 0
    61f4:	40 e0       	ldi	r20, 0x00	; 0
    61f6:	50 e0       	ldi	r21, 0x00	; 0
    61f8:	ee 24       	eor	r14, r14
    61fa:	ff 24       	eor	r15, r15
    61fc:	87 01       	movw	r16, r14
    61fe:	0f 2e       	mov	r0, r31
    6200:	ff ef       	ldi	r31, 0xFF	; 255
    6202:	af 2e       	mov	r10, r31
    6204:	f0 e0       	ldi	r31, 0x00	; 0
    6206:	bf 2e       	mov	r11, r31
    6208:	f0 e0       	ldi	r31, 0x00	; 0
    620a:	cf 2e       	mov	r12, r31
    620c:	f0 e0       	ldi	r31, 0x00	; 0
    620e:	df 2e       	mov	r13, r31
    6210:	f0 2d       	mov	r31, r0
    6212:	0e 94 d5 27 	call	0x4faa	; 0x4faa <AppMap>
    6216:	0f 90       	pop	r0
    6218:	0f 90       	pop	r0
    621a:	0f 90       	pop	r0
    621c:	0f 90       	pop	r0
    621e:	dc 01       	movw	r26, r24
    6220:	cb 01       	movw	r24, r22
    6222:	fe 01       	movw	r30, r28
    6224:	e8 5e       	subi	r30, 0xE8	; 232
    6226:	fe 4f       	sbci	r31, 0xFE	; 254
    6228:	91 83       	std	Z+1, r25	; 0x01
    622a:	80 83       	st	Z, r24
								CLCD_voidGoToXY(0,0);
    622c:	80 e0       	ldi	r24, 0x00	; 0
    622e:	60 e0       	ldi	r22, 0x00	; 0
    6230:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>
								if((255-mapVal)<=255)
    6234:	fe 01       	movw	r30, r28
    6236:	e8 5e       	subi	r30, 0xE8	; 232
    6238:	fe 4f       	sbci	r31, 0xFE	; 254
    623a:	2f ef       	ldi	r18, 0xFF	; 255
    623c:	30 e0       	ldi	r19, 0x00	; 0
    623e:	80 81       	ld	r24, Z
    6240:	91 81       	ldd	r25, Z+1	; 0x01
    6242:	a9 01       	movw	r20, r18
    6244:	48 1b       	sub	r20, r24
    6246:	59 0b       	sbc	r21, r25
    6248:	ca 01       	movw	r24, r20
    624a:	8f 3f       	cpi	r24, 0xFF	; 255
    624c:	91 05       	cpc	r25, r1
    624e:	09 f0       	breq	.+2      	; 0x6252 <main+0x11ae>
    6250:	38 f4       	brcc	.+14     	; 0x6260 <main+0x11bc>
									TIMER0_voidSetCompMatchValue(255-mapVal);
    6252:	fe 01       	movw	r30, r28
    6254:	e8 5e       	subi	r30, 0xE8	; 232
    6256:	fe 4f       	sbci	r31, 0xFE	; 254
    6258:	80 81       	ld	r24, Z
    625a:	80 95       	com	r24
    625c:	0e 94 ac 24 	call	0x4958	; 0x4958 <TIMER0_voidSetCompMatchValue>
    6260:	fe 01       	movw	r30, r28
    6262:	eb 55       	subi	r30, 0x5B	; 91
    6264:	ff 4f       	sbci	r31, 0xFF	; 255
    6266:	80 e0       	ldi	r24, 0x00	; 0
    6268:	90 e0       	ldi	r25, 0x00	; 0
    626a:	a8 ec       	ldi	r26, 0xC8	; 200
    626c:	b2 e4       	ldi	r27, 0x42	; 66
    626e:	80 83       	st	Z, r24
    6270:	91 83       	std	Z+1, r25	; 0x01
    6272:	a2 83       	std	Z+2, r26	; 0x02
    6274:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6276:	8e 01       	movw	r16, r28
    6278:	0f 55       	subi	r16, 0x5F	; 95
    627a:	1f 4f       	sbci	r17, 0xFF	; 255
    627c:	fe 01       	movw	r30, r28
    627e:	eb 55       	subi	r30, 0x5B	; 91
    6280:	ff 4f       	sbci	r31, 0xFF	; 255
    6282:	60 81       	ld	r22, Z
    6284:	71 81       	ldd	r23, Z+1	; 0x01
    6286:	82 81       	ldd	r24, Z+2	; 0x02
    6288:	93 81       	ldd	r25, Z+3	; 0x03
    628a:	20 e0       	ldi	r18, 0x00	; 0
    628c:	30 e0       	ldi	r19, 0x00	; 0
    628e:	4a ef       	ldi	r20, 0xFA	; 250
    6290:	54 e4       	ldi	r21, 0x44	; 68
    6292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6296:	dc 01       	movw	r26, r24
    6298:	cb 01       	movw	r24, r22
    629a:	f8 01       	movw	r30, r16
    629c:	80 83       	st	Z, r24
    629e:	91 83       	std	Z+1, r25	; 0x01
    62a0:	a2 83       	std	Z+2, r26	; 0x02
    62a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    62a4:	fe 01       	movw	r30, r28
    62a6:	ef 55       	subi	r30, 0x5F	; 95
    62a8:	ff 4f       	sbci	r31, 0xFF	; 255
    62aa:	60 81       	ld	r22, Z
    62ac:	71 81       	ldd	r23, Z+1	; 0x01
    62ae:	82 81       	ldd	r24, Z+2	; 0x02
    62b0:	93 81       	ldd	r25, Z+3	; 0x03
    62b2:	20 e0       	ldi	r18, 0x00	; 0
    62b4:	30 e0       	ldi	r19, 0x00	; 0
    62b6:	40 e8       	ldi	r20, 0x80	; 128
    62b8:	5f e3       	ldi	r21, 0x3F	; 63
    62ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    62be:	88 23       	and	r24, r24
    62c0:	44 f4       	brge	.+16     	; 0x62d2 <main+0x122e>
		__ticks = 1;
    62c2:	fe 01       	movw	r30, r28
    62c4:	e1 56       	subi	r30, 0x61	; 97
    62c6:	ff 4f       	sbci	r31, 0xFF	; 255
    62c8:	81 e0       	ldi	r24, 0x01	; 1
    62ca:	90 e0       	ldi	r25, 0x00	; 0
    62cc:	91 83       	std	Z+1, r25	; 0x01
    62ce:	80 83       	st	Z, r24
    62d0:	64 c0       	rjmp	.+200    	; 0x639a <main+0x12f6>
	else if (__tmp > 65535)
    62d2:	fe 01       	movw	r30, r28
    62d4:	ef 55       	subi	r30, 0x5F	; 95
    62d6:	ff 4f       	sbci	r31, 0xFF	; 255
    62d8:	60 81       	ld	r22, Z
    62da:	71 81       	ldd	r23, Z+1	; 0x01
    62dc:	82 81       	ldd	r24, Z+2	; 0x02
    62de:	93 81       	ldd	r25, Z+3	; 0x03
    62e0:	20 e0       	ldi	r18, 0x00	; 0
    62e2:	3f ef       	ldi	r19, 0xFF	; 255
    62e4:	4f e7       	ldi	r20, 0x7F	; 127
    62e6:	57 e4       	ldi	r21, 0x47	; 71
    62e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    62ec:	18 16       	cp	r1, r24
    62ee:	0c f0       	brlt	.+2      	; 0x62f2 <main+0x124e>
    62f0:	43 c0       	rjmp	.+134    	; 0x6378 <main+0x12d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    62f2:	fe 01       	movw	r30, r28
    62f4:	eb 55       	subi	r30, 0x5B	; 91
    62f6:	ff 4f       	sbci	r31, 0xFF	; 255
    62f8:	60 81       	ld	r22, Z
    62fa:	71 81       	ldd	r23, Z+1	; 0x01
    62fc:	82 81       	ldd	r24, Z+2	; 0x02
    62fe:	93 81       	ldd	r25, Z+3	; 0x03
    6300:	20 e0       	ldi	r18, 0x00	; 0
    6302:	30 e0       	ldi	r19, 0x00	; 0
    6304:	40 e2       	ldi	r20, 0x20	; 32
    6306:	51 e4       	ldi	r21, 0x41	; 65
    6308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    630c:	dc 01       	movw	r26, r24
    630e:	cb 01       	movw	r24, r22
    6310:	8e 01       	movw	r16, r28
    6312:	01 56       	subi	r16, 0x61	; 97
    6314:	1f 4f       	sbci	r17, 0xFF	; 255
    6316:	bc 01       	movw	r22, r24
    6318:	cd 01       	movw	r24, r26
    631a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    631e:	dc 01       	movw	r26, r24
    6320:	cb 01       	movw	r24, r22
    6322:	f8 01       	movw	r30, r16
    6324:	91 83       	std	Z+1, r25	; 0x01
    6326:	80 83       	st	Z, r24
    6328:	1f c0       	rjmp	.+62     	; 0x6368 <main+0x12c4>
    632a:	fe 01       	movw	r30, r28
    632c:	e3 56       	subi	r30, 0x63	; 99
    632e:	ff 4f       	sbci	r31, 0xFF	; 255
    6330:	88 ec       	ldi	r24, 0xC8	; 200
    6332:	90 e0       	ldi	r25, 0x00	; 0
    6334:	91 83       	std	Z+1, r25	; 0x01
    6336:	80 83       	st	Z, r24
    6338:	fe 01       	movw	r30, r28
    633a:	e3 56       	subi	r30, 0x63	; 99
    633c:	ff 4f       	sbci	r31, 0xFF	; 255
    633e:	80 81       	ld	r24, Z
    6340:	91 81       	ldd	r25, Z+1	; 0x01
    6342:	01 97       	sbiw	r24, 0x01	; 1
    6344:	f1 f7       	brne	.-4      	; 0x6342 <main+0x129e>
    6346:	fe 01       	movw	r30, r28
    6348:	e3 56       	subi	r30, 0x63	; 99
    634a:	ff 4f       	sbci	r31, 0xFF	; 255
    634c:	91 83       	std	Z+1, r25	; 0x01
    634e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6350:	de 01       	movw	r26, r28
    6352:	a1 56       	subi	r26, 0x61	; 97
    6354:	bf 4f       	sbci	r27, 0xFF	; 255
    6356:	fe 01       	movw	r30, r28
    6358:	e1 56       	subi	r30, 0x61	; 97
    635a:	ff 4f       	sbci	r31, 0xFF	; 255
    635c:	80 81       	ld	r24, Z
    635e:	91 81       	ldd	r25, Z+1	; 0x01
    6360:	01 97       	sbiw	r24, 0x01	; 1
    6362:	11 96       	adiw	r26, 0x01	; 1
    6364:	9c 93       	st	X, r25
    6366:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6368:	fe 01       	movw	r30, r28
    636a:	e1 56       	subi	r30, 0x61	; 97
    636c:	ff 4f       	sbci	r31, 0xFF	; 255
    636e:	80 81       	ld	r24, Z
    6370:	91 81       	ldd	r25, Z+1	; 0x01
    6372:	00 97       	sbiw	r24, 0x00	; 0
    6374:	d1 f6       	brne	.-76     	; 0x632a <main+0x1286>
    6376:	27 c0       	rjmp	.+78     	; 0x63c6 <main+0x1322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6378:	8e 01       	movw	r16, r28
    637a:	01 56       	subi	r16, 0x61	; 97
    637c:	1f 4f       	sbci	r17, 0xFF	; 255
    637e:	fe 01       	movw	r30, r28
    6380:	ef 55       	subi	r30, 0x5F	; 95
    6382:	ff 4f       	sbci	r31, 0xFF	; 255
    6384:	60 81       	ld	r22, Z
    6386:	71 81       	ldd	r23, Z+1	; 0x01
    6388:	82 81       	ldd	r24, Z+2	; 0x02
    638a:	93 81       	ldd	r25, Z+3	; 0x03
    638c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6390:	dc 01       	movw	r26, r24
    6392:	cb 01       	movw	r24, r22
    6394:	f8 01       	movw	r30, r16
    6396:	91 83       	std	Z+1, r25	; 0x01
    6398:	80 83       	st	Z, r24
    639a:	de 01       	movw	r26, r28
    639c:	a5 56       	subi	r26, 0x65	; 101
    639e:	bf 4f       	sbci	r27, 0xFF	; 255
    63a0:	fe 01       	movw	r30, r28
    63a2:	e1 56       	subi	r30, 0x61	; 97
    63a4:	ff 4f       	sbci	r31, 0xFF	; 255
    63a6:	80 81       	ld	r24, Z
    63a8:	91 81       	ldd	r25, Z+1	; 0x01
    63aa:	8d 93       	st	X+, r24
    63ac:	9c 93       	st	X, r25
    63ae:	fe 01       	movw	r30, r28
    63b0:	e5 56       	subi	r30, 0x65	; 101
    63b2:	ff 4f       	sbci	r31, 0xFF	; 255
    63b4:	80 81       	ld	r24, Z
    63b6:	91 81       	ldd	r25, Z+1	; 0x01
    63b8:	01 97       	sbiw	r24, 0x01	; 1
    63ba:	f1 f7       	brne	.-4      	; 0x63b8 <main+0x1314>
    63bc:	fe 01       	movw	r30, r28
    63be:	e5 56       	subi	r30, 0x65	; 101
    63c0:	ff 4f       	sbci	r31, 0xFF	; 255
    63c2:	91 83       	std	Z+1, r25	; 0x01
    63c4:	80 83       	st	Z, r24
								_delay_ms(100);
								CLCD_voidGoToXY(1,0);
    63c6:	81 e0       	ldi	r24, 0x01	; 1
    63c8:	60 e0       	ldi	r22, 0x00	; 0
    63ca:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>
								CLCD_voidSendString("       ");
    63ce:	8c e2       	ldi	r24, 0x2C	; 44
    63d0:	91 e0       	ldi	r25, 0x01	; 1
    63d2:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
							}while(Keypress == KPD_NO_PRESSED_KEY);
    63d6:	fe 01       	movw	r30, r28
    63d8:	e9 5e       	subi	r30, 0xE9	; 233
    63da:	fe 4f       	sbci	r31, 0xFE	; 254
    63dc:	80 81       	ld	r24, Z
    63de:	8f 3f       	cpi	r24, 0xFF	; 255
    63e0:	09 f4       	brne	.+2      	; 0x63e4 <main+0x1340>
    63e2:	9a ce       	rjmp	.-716    	; 0x6118 <main+0x1074>
							t0.CompOutMode = OC0_DIS;
    63e4:	fe 01       	movw	r30, r28
    63e6:	ef 5d       	subi	r30, 0xDF	; 223
    63e8:	fe 4f       	sbci	r31, 0xFE	; 254
    63ea:	12 82       	std	Z+2, r1	; 0x02
							TIMER0_voidCompOutModeChange(&t0);
    63ec:	ce 01       	movw	r24, r28
    63ee:	8f 5d       	subi	r24, 0xDF	; 223
    63f0:	9e 4f       	sbci	r25, 0xFE	; 254
    63f2:	0e 94 78 24 	call	0x48f0	; 0x48f0 <TIMER0_voidCompOutModeChange>
    63f6:	4f ca       	rjmp	.-2914   	; 0x5896 <main+0x7f2>

						}
					}
					else if(2==Keypress)  // Rotate CW
    63f8:	fe 01       	movw	r30, r28
    63fa:	e9 5e       	subi	r30, 0xE9	; 233
    63fc:	fe 4f       	sbci	r31, 0xFE	; 254
    63fe:	80 81       	ld	r24, Z
    6400:	82 30       	cpi	r24, 0x02	; 2
    6402:	09 f0       	breq	.+2      	; 0x6406 <main+0x1362>
    6404:	48 ca       	rjmp	.-2928   	; 0x5896 <main+0x7f2>
					{
						CLCD_voidSendCommand(1);
    6406:	81 e0       	ldi	r24, 0x01	; 1
    6408:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
						CLCD_voidSendString("Speed Control");
    640c:	83 ee       	ldi	r24, 0xE3	; 227
    640e:	90 e0       	ldi	r25, 0x00	; 0
    6410:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
    6414:	fe 01       	movw	r30, r28
    6416:	e9 56       	subi	r30, 0x69	; 105
    6418:	ff 4f       	sbci	r31, 0xFF	; 255
    641a:	80 e0       	ldi	r24, 0x00	; 0
    641c:	90 e0       	ldi	r25, 0x00	; 0
    641e:	aa ef       	ldi	r26, 0xFA	; 250
    6420:	b3 e4       	ldi	r27, 0x43	; 67
    6422:	80 83       	st	Z, r24
    6424:	91 83       	std	Z+1, r25	; 0x01
    6426:	a2 83       	std	Z+2, r26	; 0x02
    6428:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    642a:	8e 01       	movw	r16, r28
    642c:	0d 56       	subi	r16, 0x6D	; 109
    642e:	1f 4f       	sbci	r17, 0xFF	; 255
    6430:	fe 01       	movw	r30, r28
    6432:	e9 56       	subi	r30, 0x69	; 105
    6434:	ff 4f       	sbci	r31, 0xFF	; 255
    6436:	60 81       	ld	r22, Z
    6438:	71 81       	ldd	r23, Z+1	; 0x01
    643a:	82 81       	ldd	r24, Z+2	; 0x02
    643c:	93 81       	ldd	r25, Z+3	; 0x03
    643e:	20 e0       	ldi	r18, 0x00	; 0
    6440:	30 e0       	ldi	r19, 0x00	; 0
    6442:	4a ef       	ldi	r20, 0xFA	; 250
    6444:	54 e4       	ldi	r21, 0x44	; 68
    6446:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    644a:	dc 01       	movw	r26, r24
    644c:	cb 01       	movw	r24, r22
    644e:	f8 01       	movw	r30, r16
    6450:	80 83       	st	Z, r24
    6452:	91 83       	std	Z+1, r25	; 0x01
    6454:	a2 83       	std	Z+2, r26	; 0x02
    6456:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6458:	fe 01       	movw	r30, r28
    645a:	ed 56       	subi	r30, 0x6D	; 109
    645c:	ff 4f       	sbci	r31, 0xFF	; 255
    645e:	60 81       	ld	r22, Z
    6460:	71 81       	ldd	r23, Z+1	; 0x01
    6462:	82 81       	ldd	r24, Z+2	; 0x02
    6464:	93 81       	ldd	r25, Z+3	; 0x03
    6466:	20 e0       	ldi	r18, 0x00	; 0
    6468:	30 e0       	ldi	r19, 0x00	; 0
    646a:	40 e8       	ldi	r20, 0x80	; 128
    646c:	5f e3       	ldi	r21, 0x3F	; 63
    646e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6472:	88 23       	and	r24, r24
    6474:	44 f4       	brge	.+16     	; 0x6486 <main+0x13e2>
		__ticks = 1;
    6476:	fe 01       	movw	r30, r28
    6478:	ef 56       	subi	r30, 0x6F	; 111
    647a:	ff 4f       	sbci	r31, 0xFF	; 255
    647c:	81 e0       	ldi	r24, 0x01	; 1
    647e:	90 e0       	ldi	r25, 0x00	; 0
    6480:	91 83       	std	Z+1, r25	; 0x01
    6482:	80 83       	st	Z, r24
    6484:	64 c0       	rjmp	.+200    	; 0x654e <main+0x14aa>
	else if (__tmp > 65535)
    6486:	fe 01       	movw	r30, r28
    6488:	ed 56       	subi	r30, 0x6D	; 109
    648a:	ff 4f       	sbci	r31, 0xFF	; 255
    648c:	60 81       	ld	r22, Z
    648e:	71 81       	ldd	r23, Z+1	; 0x01
    6490:	82 81       	ldd	r24, Z+2	; 0x02
    6492:	93 81       	ldd	r25, Z+3	; 0x03
    6494:	20 e0       	ldi	r18, 0x00	; 0
    6496:	3f ef       	ldi	r19, 0xFF	; 255
    6498:	4f e7       	ldi	r20, 0x7F	; 127
    649a:	57 e4       	ldi	r21, 0x47	; 71
    649c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    64a0:	18 16       	cp	r1, r24
    64a2:	0c f0       	brlt	.+2      	; 0x64a6 <main+0x1402>
    64a4:	43 c0       	rjmp	.+134    	; 0x652c <main+0x1488>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    64a6:	fe 01       	movw	r30, r28
    64a8:	e9 56       	subi	r30, 0x69	; 105
    64aa:	ff 4f       	sbci	r31, 0xFF	; 255
    64ac:	60 81       	ld	r22, Z
    64ae:	71 81       	ldd	r23, Z+1	; 0x01
    64b0:	82 81       	ldd	r24, Z+2	; 0x02
    64b2:	93 81       	ldd	r25, Z+3	; 0x03
    64b4:	20 e0       	ldi	r18, 0x00	; 0
    64b6:	30 e0       	ldi	r19, 0x00	; 0
    64b8:	40 e2       	ldi	r20, 0x20	; 32
    64ba:	51 e4       	ldi	r21, 0x41	; 65
    64bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    64c0:	dc 01       	movw	r26, r24
    64c2:	cb 01       	movw	r24, r22
    64c4:	8e 01       	movw	r16, r28
    64c6:	0f 56       	subi	r16, 0x6F	; 111
    64c8:	1f 4f       	sbci	r17, 0xFF	; 255
    64ca:	bc 01       	movw	r22, r24
    64cc:	cd 01       	movw	r24, r26
    64ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    64d2:	dc 01       	movw	r26, r24
    64d4:	cb 01       	movw	r24, r22
    64d6:	f8 01       	movw	r30, r16
    64d8:	91 83       	std	Z+1, r25	; 0x01
    64da:	80 83       	st	Z, r24
    64dc:	1f c0       	rjmp	.+62     	; 0x651c <main+0x1478>
    64de:	fe 01       	movw	r30, r28
    64e0:	e1 57       	subi	r30, 0x71	; 113
    64e2:	ff 4f       	sbci	r31, 0xFF	; 255
    64e4:	88 ec       	ldi	r24, 0xC8	; 200
    64e6:	90 e0       	ldi	r25, 0x00	; 0
    64e8:	91 83       	std	Z+1, r25	; 0x01
    64ea:	80 83       	st	Z, r24
    64ec:	fe 01       	movw	r30, r28
    64ee:	e1 57       	subi	r30, 0x71	; 113
    64f0:	ff 4f       	sbci	r31, 0xFF	; 255
    64f2:	80 81       	ld	r24, Z
    64f4:	91 81       	ldd	r25, Z+1	; 0x01
    64f6:	01 97       	sbiw	r24, 0x01	; 1
    64f8:	f1 f7       	brne	.-4      	; 0x64f6 <main+0x1452>
    64fa:	fe 01       	movw	r30, r28
    64fc:	e1 57       	subi	r30, 0x71	; 113
    64fe:	ff 4f       	sbci	r31, 0xFF	; 255
    6500:	91 83       	std	Z+1, r25	; 0x01
    6502:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6504:	de 01       	movw	r26, r28
    6506:	af 56       	subi	r26, 0x6F	; 111
    6508:	bf 4f       	sbci	r27, 0xFF	; 255
    650a:	fe 01       	movw	r30, r28
    650c:	ef 56       	subi	r30, 0x6F	; 111
    650e:	ff 4f       	sbci	r31, 0xFF	; 255
    6510:	80 81       	ld	r24, Z
    6512:	91 81       	ldd	r25, Z+1	; 0x01
    6514:	01 97       	sbiw	r24, 0x01	; 1
    6516:	11 96       	adiw	r26, 0x01	; 1
    6518:	9c 93       	st	X, r25
    651a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    651c:	fe 01       	movw	r30, r28
    651e:	ef 56       	subi	r30, 0x6F	; 111
    6520:	ff 4f       	sbci	r31, 0xFF	; 255
    6522:	80 81       	ld	r24, Z
    6524:	91 81       	ldd	r25, Z+1	; 0x01
    6526:	00 97       	sbiw	r24, 0x00	; 0
    6528:	d1 f6       	brne	.-76     	; 0x64de <main+0x143a>
    652a:	27 c0       	rjmp	.+78     	; 0x657a <main+0x14d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    652c:	8e 01       	movw	r16, r28
    652e:	0f 56       	subi	r16, 0x6F	; 111
    6530:	1f 4f       	sbci	r17, 0xFF	; 255
    6532:	fe 01       	movw	r30, r28
    6534:	ed 56       	subi	r30, 0x6D	; 109
    6536:	ff 4f       	sbci	r31, 0xFF	; 255
    6538:	60 81       	ld	r22, Z
    653a:	71 81       	ldd	r23, Z+1	; 0x01
    653c:	82 81       	ldd	r24, Z+2	; 0x02
    653e:	93 81       	ldd	r25, Z+3	; 0x03
    6540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6544:	dc 01       	movw	r26, r24
    6546:	cb 01       	movw	r24, r22
    6548:	f8 01       	movw	r30, r16
    654a:	91 83       	std	Z+1, r25	; 0x01
    654c:	80 83       	st	Z, r24
    654e:	de 01       	movw	r26, r28
    6550:	a3 57       	subi	r26, 0x73	; 115
    6552:	bf 4f       	sbci	r27, 0xFF	; 255
    6554:	fe 01       	movw	r30, r28
    6556:	ef 56       	subi	r30, 0x6F	; 111
    6558:	ff 4f       	sbci	r31, 0xFF	; 255
    655a:	80 81       	ld	r24, Z
    655c:	91 81       	ldd	r25, Z+1	; 0x01
    655e:	8d 93       	st	X+, r24
    6560:	9c 93       	st	X, r25
    6562:	fe 01       	movw	r30, r28
    6564:	e3 57       	subi	r30, 0x73	; 115
    6566:	ff 4f       	sbci	r31, 0xFF	; 255
    6568:	80 81       	ld	r24, Z
    656a:	91 81       	ldd	r25, Z+1	; 0x01
    656c:	01 97       	sbiw	r24, 0x01	; 1
    656e:	f1 f7       	brne	.-4      	; 0x656c <main+0x14c8>
    6570:	fe 01       	movw	r30, r28
    6572:	e3 57       	subi	r30, 0x73	; 115
    6574:	ff 4f       	sbci	r31, 0xFF	; 255
    6576:	91 83       	std	Z+1, r25	; 0x01
    6578:	80 83       	st	Z, r24
						_delay_ms(500);
						CLCD_voidSendCommand(1);
    657a:	81 e0       	ldi	r24, 0x01	; 1
    657c:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
						CLCD_voidSendString("  1-FullSpeed");
    6580:	81 ef       	ldi	r24, 0xF1	; 241
    6582:	90 e0       	ldi	r25, 0x00	; 0
    6584:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
						CLCD_voidGoToXY(1,0);
    6588:	81 e0       	ldi	r24, 0x01	; 1
    658a:	60 e0       	ldi	r22, 0x00	; 0
    658c:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>
						CLCD_voidSendString("2- POT 3- LM35");
    6590:	8f ef       	ldi	r24, 0xFF	; 255
    6592:	90 e0       	ldi	r25, 0x00	; 0
    6594:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
						do{
							Keypress = KPD_u8Key_pressed();
    6598:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <KPD_u8Key_pressed>
    659c:	fe 01       	movw	r30, r28
    659e:	e9 5e       	subi	r30, 0xE9	; 233
    65a0:	fe 4f       	sbci	r31, 0xFE	; 254
    65a2:	80 83       	st	Z, r24
							if((1<=Keypress)&&(Keypress<=3))
    65a4:	fe 01       	movw	r30, r28
    65a6:	e9 5e       	subi	r30, 0xE9	; 233
    65a8:	fe 4f       	sbci	r31, 0xFE	; 254
    65aa:	80 81       	ld	r24, Z
    65ac:	88 23       	and	r24, r24
    65ae:	31 f0       	breq	.+12     	; 0x65bc <main+0x1518>
    65b0:	fe 01       	movw	r30, r28
    65b2:	e9 5e       	subi	r30, 0xE9	; 233
    65b4:	fe 4f       	sbci	r31, 0xFE	; 254
    65b6:	80 81       	ld	r24, Z
    65b8:	84 30       	cpi	r24, 0x04	; 4
    65ba:	58 f0       	brcs	.+22     	; 0x65d2 <main+0x152e>
							{
								break;
							}
							else
								Keypress = KPD_NO_PRESSED_KEY;
    65bc:	fe 01       	movw	r30, r28
    65be:	e9 5e       	subi	r30, 0xE9	; 233
    65c0:	fe 4f       	sbci	r31, 0xFE	; 254
    65c2:	8f ef       	ldi	r24, 0xFF	; 255
    65c4:	80 83       	st	Z, r24

						}while(Keypress == KPD_NO_PRESSED_KEY);
    65c6:	fe 01       	movw	r30, r28
    65c8:	e9 5e       	subi	r30, 0xE9	; 233
    65ca:	fe 4f       	sbci	r31, 0xFE	; 254
    65cc:	80 81       	ld	r24, Z
    65ce:	8f 3f       	cpi	r24, 0xFF	; 255
    65d0:	19 f3       	breq	.-58     	; 0x6598 <main+0x14f4>
						if(1==Keypress)		// FullSpeed
    65d2:	fe 01       	movw	r30, r28
    65d4:	e9 5e       	subi	r30, 0xE9	; 233
    65d6:	fe 4f       	sbci	r31, 0xFE	; 254
    65d8:	80 81       	ld	r24, Z
    65da:	81 30       	cpi	r24, 0x01	; 1
    65dc:	31 f5       	brne	.+76     	; 0x662a <main+0x1586>
						{
							CLCD_voidSendCommand(1);
    65de:	81 e0       	ldi	r24, 0x01	; 1
    65e0:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
							CLCD_voidSendString("  1-FullSpeed");
    65e4:	81 ef       	ldi	r24, 0xF1	; 241
    65e6:	90 e0       	ldi	r25, 0x00	; 0
    65e8:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
							CLCD_voidGoToXY(1,0);
    65ec:	81 e0       	ldi	r24, 0x01	; 1
    65ee:	60 e0       	ldi	r22, 0x00	; 0
    65f0:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>
							CLCD_voidSendString("any key for out");
    65f4:	8e e0       	ldi	r24, 0x0E	; 14
    65f6:	91 e0       	ldi	r25, 0x01	; 1
    65f8:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
							do{
								Keypress= KPD_u8Key_pressed();
    65fc:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <KPD_u8Key_pressed>
    6600:	fe 01       	movw	r30, r28
    6602:	e9 5e       	subi	r30, 0xE9	; 233
    6604:	fe 4f       	sbci	r31, 0xFE	; 254
    6606:	80 83       	st	Z, r24
								DIO_u8SetPinValue(DIO_PORTD,DIO_PIN7,DIO_PIN_HIGH);
    6608:	83 e0       	ldi	r24, 0x03	; 3
    660a:	67 e0       	ldi	r22, 0x07	; 7
    660c:	41 e0       	ldi	r20, 0x01	; 1
    660e:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_u8SetPinValue>
							}while(Keypress==KPD_NO_PRESSED_KEY);
    6612:	fe 01       	movw	r30, r28
    6614:	e9 5e       	subi	r30, 0xE9	; 233
    6616:	fe 4f       	sbci	r31, 0xFE	; 254
    6618:	80 81       	ld	r24, Z
    661a:	8f 3f       	cpi	r24, 0xFF	; 255
    661c:	79 f3       	breq	.-34     	; 0x65fc <main+0x1558>
							DIO_u8SetPinValue(DIO_PORTD,DIO_PIN7,DIO_PIN_LOW);
    661e:	83 e0       	ldi	r24, 0x03	; 3
    6620:	67 e0       	ldi	r22, 0x07	; 7
    6622:	40 e0       	ldi	r20, 0x00	; 0
    6624:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_u8SetPinValue>
    6628:	36 c9       	rjmp	.-3476   	; 0x5896 <main+0x7f2>
						}
						else if(2 == Keypress)  // POT
    662a:	fe 01       	movw	r30, r28
    662c:	e9 5e       	subi	r30, 0xE9	; 233
    662e:	fe 4f       	sbci	r31, 0xFE	; 254
    6630:	80 81       	ld	r24, Z
    6632:	82 30       	cpi	r24, 0x02	; 2
    6634:	09 f0       	breq	.+2      	; 0x6638 <main+0x1594>
    6636:	15 c1       	rjmp	.+554    	; 0x6862 <main+0x17be>
						{
							t2.CompOutMode = OC2_SET_UP_CLR_DOWN;
    6638:	fe 01       	movw	r30, r28
    663a:	ea 5d       	subi	r30, 0xDA	; 218
    663c:	fe 4f       	sbci	r31, 0xFE	; 254
    663e:	83 e0       	ldi	r24, 0x03	; 3
    6640:	82 83       	std	Z+2, r24	; 0x02
							TIMER2_voidCompOutModeChange(&t2);
    6642:	ce 01       	movw	r24, r28
    6644:	8a 5d       	subi	r24, 0xDA	; 218
    6646:	9e 4f       	sbci	r25, 0xFE	; 254
    6648:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <TIMER2_voidCompOutModeChange>
							CLCD_voidSendCommand(1);
    664c:	81 e0       	ldi	r24, 0x01	; 1
    664e:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
							do{
								Keypress = KPD_u8Key_pressed();
    6652:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <KPD_u8Key_pressed>
    6656:	fe 01       	movw	r30, r28
    6658:	e9 5e       	subi	r30, 0xE9	; 233
    665a:	fe 4f       	sbci	r31, 0xFE	; 254
    665c:	80 83       	st	Z, r24
								if(Keypress=='C')
    665e:	fe 01       	movw	r30, r28
    6660:	e9 5e       	subi	r30, 0xE9	; 233
    6662:	fe 4f       	sbci	r31, 0xFE	; 254
    6664:	80 81       	ld	r24, Z
    6666:	83 34       	cpi	r24, 0x43	; 67
    6668:	09 f4       	brne	.+2      	; 0x666c <main+0x15c8>
    666a:	f0 c0       	rjmp	.+480    	; 0x684c <main+0x17a8>
									break;
								else
									Keypress = KPD_NO_PRESSED_KEY;
    666c:	fe 01       	movw	r30, r28
    666e:	e9 5e       	subi	r30, 0xE9	; 233
    6670:	fe 4f       	sbci	r31, 0xFE	; 254
    6672:	8f ef       	ldi	r24, 0xFF	; 255
    6674:	80 83       	st	Z, r24
								ADC_u8StartSingleConvPoll(ADC3,&Local_data);
    6676:	9e 01       	movw	r18, r28
    6678:	26 5e       	subi	r18, 0xE6	; 230
    667a:	3e 4f       	sbci	r19, 0xFE	; 254
    667c:	83 e0       	ldi	r24, 0x03	; 3
    667e:	b9 01       	movw	r22, r18
    6680:	0e 94 4f 07 	call	0xe9e	; 0xe9e <ADC_u8StartSingleConvPoll>
								CLCD_voidGoToXY(0,0);
    6684:	80 e0       	ldi	r24, 0x00	; 0
    6686:	60 e0       	ldi	r22, 0x00	; 0
    6688:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>
								CLCD_voidSendString(" Speed : ");
    668c:	82 e4       	ldi	r24, 0x42	; 66
    668e:	91 e0       	ldi	r25, 0x01	; 1
    6690:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
								CLCD_voidGoToXY(1,0);
    6694:	81 e0       	ldi	r24, 0x01	; 1
    6696:	60 e0       	ldi	r22, 0x00	; 0
    6698:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>
								CLCD_voidWriteNumber(255 - Local_data);
    669c:	fe 01       	movw	r30, r28
    669e:	e6 5e       	subi	r30, 0xE6	; 230
    66a0:	fe 4f       	sbci	r31, 0xFE	; 254
    66a2:	20 81       	ld	r18, Z
    66a4:	31 81       	ldd	r19, Z+1	; 0x01
    66a6:	8f ef       	ldi	r24, 0xFF	; 255
    66a8:	90 e0       	ldi	r25, 0x00	; 0
    66aa:	82 1b       	sub	r24, r18
    66ac:	93 0b       	sbc	r25, r19
    66ae:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <CLCD_voidWriteNumber>
								CLCD_voidSendString(" RPM");
    66b2:	87 e2       	ldi	r24, 0x27	; 39
    66b4:	91 e0       	ldi	r25, 0x01	; 1
    66b6:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
								TIMER2_voidSetCompMatchValue(Local_data);
    66ba:	fe 01       	movw	r30, r28
    66bc:	e6 5e       	subi	r30, 0xE6	; 230
    66be:	fe 4f       	sbci	r31, 0xFE	; 254
    66c0:	80 81       	ld	r24, Z
    66c2:	91 81       	ldd	r25, Z+1	; 0x01
    66c4:	0e 94 1d 26 	call	0x4c3a	; 0x4c3a <TIMER2_voidSetCompMatchValue>
    66c8:	fe 01       	movw	r30, r28
    66ca:	e7 57       	subi	r30, 0x77	; 119
    66cc:	ff 4f       	sbci	r31, 0xFF	; 255
    66ce:	80 e0       	ldi	r24, 0x00	; 0
    66d0:	90 e0       	ldi	r25, 0x00	; 0
    66d2:	a8 ec       	ldi	r26, 0xC8	; 200
    66d4:	b2 e4       	ldi	r27, 0x42	; 66
    66d6:	80 83       	st	Z, r24
    66d8:	91 83       	std	Z+1, r25	; 0x01
    66da:	a2 83       	std	Z+2, r26	; 0x02
    66dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    66de:	8e 01       	movw	r16, r28
    66e0:	0b 57       	subi	r16, 0x7B	; 123
    66e2:	1f 4f       	sbci	r17, 0xFF	; 255
    66e4:	fe 01       	movw	r30, r28
    66e6:	e7 57       	subi	r30, 0x77	; 119
    66e8:	ff 4f       	sbci	r31, 0xFF	; 255
    66ea:	60 81       	ld	r22, Z
    66ec:	71 81       	ldd	r23, Z+1	; 0x01
    66ee:	82 81       	ldd	r24, Z+2	; 0x02
    66f0:	93 81       	ldd	r25, Z+3	; 0x03
    66f2:	20 e0       	ldi	r18, 0x00	; 0
    66f4:	30 e0       	ldi	r19, 0x00	; 0
    66f6:	4a ef       	ldi	r20, 0xFA	; 250
    66f8:	54 e4       	ldi	r21, 0x44	; 68
    66fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    66fe:	dc 01       	movw	r26, r24
    6700:	cb 01       	movw	r24, r22
    6702:	f8 01       	movw	r30, r16
    6704:	80 83       	st	Z, r24
    6706:	91 83       	std	Z+1, r25	; 0x01
    6708:	a2 83       	std	Z+2, r26	; 0x02
    670a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    670c:	fe 01       	movw	r30, r28
    670e:	eb 57       	subi	r30, 0x7B	; 123
    6710:	ff 4f       	sbci	r31, 0xFF	; 255
    6712:	60 81       	ld	r22, Z
    6714:	71 81       	ldd	r23, Z+1	; 0x01
    6716:	82 81       	ldd	r24, Z+2	; 0x02
    6718:	93 81       	ldd	r25, Z+3	; 0x03
    671a:	20 e0       	ldi	r18, 0x00	; 0
    671c:	30 e0       	ldi	r19, 0x00	; 0
    671e:	40 e8       	ldi	r20, 0x80	; 128
    6720:	5f e3       	ldi	r21, 0x3F	; 63
    6722:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6726:	88 23       	and	r24, r24
    6728:	44 f4       	brge	.+16     	; 0x673a <main+0x1696>
		__ticks = 1;
    672a:	fe 01       	movw	r30, r28
    672c:	ed 57       	subi	r30, 0x7D	; 125
    672e:	ff 4f       	sbci	r31, 0xFF	; 255
    6730:	81 e0       	ldi	r24, 0x01	; 1
    6732:	90 e0       	ldi	r25, 0x00	; 0
    6734:	91 83       	std	Z+1, r25	; 0x01
    6736:	80 83       	st	Z, r24
    6738:	64 c0       	rjmp	.+200    	; 0x6802 <main+0x175e>
	else if (__tmp > 65535)
    673a:	fe 01       	movw	r30, r28
    673c:	eb 57       	subi	r30, 0x7B	; 123
    673e:	ff 4f       	sbci	r31, 0xFF	; 255
    6740:	60 81       	ld	r22, Z
    6742:	71 81       	ldd	r23, Z+1	; 0x01
    6744:	82 81       	ldd	r24, Z+2	; 0x02
    6746:	93 81       	ldd	r25, Z+3	; 0x03
    6748:	20 e0       	ldi	r18, 0x00	; 0
    674a:	3f ef       	ldi	r19, 0xFF	; 255
    674c:	4f e7       	ldi	r20, 0x7F	; 127
    674e:	57 e4       	ldi	r21, 0x47	; 71
    6750:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6754:	18 16       	cp	r1, r24
    6756:	0c f0       	brlt	.+2      	; 0x675a <main+0x16b6>
    6758:	43 c0       	rjmp	.+134    	; 0x67e0 <main+0x173c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    675a:	fe 01       	movw	r30, r28
    675c:	e7 57       	subi	r30, 0x77	; 119
    675e:	ff 4f       	sbci	r31, 0xFF	; 255
    6760:	60 81       	ld	r22, Z
    6762:	71 81       	ldd	r23, Z+1	; 0x01
    6764:	82 81       	ldd	r24, Z+2	; 0x02
    6766:	93 81       	ldd	r25, Z+3	; 0x03
    6768:	20 e0       	ldi	r18, 0x00	; 0
    676a:	30 e0       	ldi	r19, 0x00	; 0
    676c:	40 e2       	ldi	r20, 0x20	; 32
    676e:	51 e4       	ldi	r21, 0x41	; 65
    6770:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6774:	dc 01       	movw	r26, r24
    6776:	cb 01       	movw	r24, r22
    6778:	8e 01       	movw	r16, r28
    677a:	0d 57       	subi	r16, 0x7D	; 125
    677c:	1f 4f       	sbci	r17, 0xFF	; 255
    677e:	bc 01       	movw	r22, r24
    6780:	cd 01       	movw	r24, r26
    6782:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6786:	dc 01       	movw	r26, r24
    6788:	cb 01       	movw	r24, r22
    678a:	f8 01       	movw	r30, r16
    678c:	91 83       	std	Z+1, r25	; 0x01
    678e:	80 83       	st	Z, r24
    6790:	1f c0       	rjmp	.+62     	; 0x67d0 <main+0x172c>
    6792:	fe 01       	movw	r30, r28
    6794:	ef 57       	subi	r30, 0x7F	; 127
    6796:	ff 4f       	sbci	r31, 0xFF	; 255
    6798:	88 ec       	ldi	r24, 0xC8	; 200
    679a:	90 e0       	ldi	r25, 0x00	; 0
    679c:	91 83       	std	Z+1, r25	; 0x01
    679e:	80 83       	st	Z, r24
    67a0:	fe 01       	movw	r30, r28
    67a2:	ef 57       	subi	r30, 0x7F	; 127
    67a4:	ff 4f       	sbci	r31, 0xFF	; 255
    67a6:	80 81       	ld	r24, Z
    67a8:	91 81       	ldd	r25, Z+1	; 0x01
    67aa:	01 97       	sbiw	r24, 0x01	; 1
    67ac:	f1 f7       	brne	.-4      	; 0x67aa <main+0x1706>
    67ae:	fe 01       	movw	r30, r28
    67b0:	ef 57       	subi	r30, 0x7F	; 127
    67b2:	ff 4f       	sbci	r31, 0xFF	; 255
    67b4:	91 83       	std	Z+1, r25	; 0x01
    67b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    67b8:	de 01       	movw	r26, r28
    67ba:	ad 57       	subi	r26, 0x7D	; 125
    67bc:	bf 4f       	sbci	r27, 0xFF	; 255
    67be:	fe 01       	movw	r30, r28
    67c0:	ed 57       	subi	r30, 0x7D	; 125
    67c2:	ff 4f       	sbci	r31, 0xFF	; 255
    67c4:	80 81       	ld	r24, Z
    67c6:	91 81       	ldd	r25, Z+1	; 0x01
    67c8:	01 97       	sbiw	r24, 0x01	; 1
    67ca:	11 96       	adiw	r26, 0x01	; 1
    67cc:	9c 93       	st	X, r25
    67ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    67d0:	fe 01       	movw	r30, r28
    67d2:	ed 57       	subi	r30, 0x7D	; 125
    67d4:	ff 4f       	sbci	r31, 0xFF	; 255
    67d6:	80 81       	ld	r24, Z
    67d8:	91 81       	ldd	r25, Z+1	; 0x01
    67da:	00 97       	sbiw	r24, 0x00	; 0
    67dc:	d1 f6       	brne	.-76     	; 0x6792 <main+0x16ee>
    67de:	27 c0       	rjmp	.+78     	; 0x682e <main+0x178a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    67e0:	8e 01       	movw	r16, r28
    67e2:	0d 57       	subi	r16, 0x7D	; 125
    67e4:	1f 4f       	sbci	r17, 0xFF	; 255
    67e6:	fe 01       	movw	r30, r28
    67e8:	eb 57       	subi	r30, 0x7B	; 123
    67ea:	ff 4f       	sbci	r31, 0xFF	; 255
    67ec:	60 81       	ld	r22, Z
    67ee:	71 81       	ldd	r23, Z+1	; 0x01
    67f0:	82 81       	ldd	r24, Z+2	; 0x02
    67f2:	93 81       	ldd	r25, Z+3	; 0x03
    67f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    67f8:	dc 01       	movw	r26, r24
    67fa:	cb 01       	movw	r24, r22
    67fc:	f8 01       	movw	r30, r16
    67fe:	91 83       	std	Z+1, r25	; 0x01
    6800:	80 83       	st	Z, r24
    6802:	de 01       	movw	r26, r28
    6804:	a1 58       	subi	r26, 0x81	; 129
    6806:	bf 4f       	sbci	r27, 0xFF	; 255
    6808:	fe 01       	movw	r30, r28
    680a:	ed 57       	subi	r30, 0x7D	; 125
    680c:	ff 4f       	sbci	r31, 0xFF	; 255
    680e:	80 81       	ld	r24, Z
    6810:	91 81       	ldd	r25, Z+1	; 0x01
    6812:	8d 93       	st	X+, r24
    6814:	9c 93       	st	X, r25
    6816:	fe 01       	movw	r30, r28
    6818:	e1 58       	subi	r30, 0x81	; 129
    681a:	ff 4f       	sbci	r31, 0xFF	; 255
    681c:	80 81       	ld	r24, Z
    681e:	91 81       	ldd	r25, Z+1	; 0x01
    6820:	01 97       	sbiw	r24, 0x01	; 1
    6822:	f1 f7       	brne	.-4      	; 0x6820 <main+0x177c>
    6824:	fe 01       	movw	r30, r28
    6826:	e1 58       	subi	r30, 0x81	; 129
    6828:	ff 4f       	sbci	r31, 0xFF	; 255
    682a:	91 83       	std	Z+1, r25	; 0x01
    682c:	80 83       	st	Z, r24
								_delay_ms(100);
								CLCD_voidGoToXY(1,0);
    682e:	81 e0       	ldi	r24, 0x01	; 1
    6830:	60 e0       	ldi	r22, 0x00	; 0
    6832:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>
								CLCD_voidSendString("       ");
    6836:	8c e2       	ldi	r24, 0x2C	; 44
    6838:	91 e0       	ldi	r25, 0x01	; 1
    683a:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
							}while(Keypress == KPD_NO_PRESSED_KEY);
    683e:	fe 01       	movw	r30, r28
    6840:	e9 5e       	subi	r30, 0xE9	; 233
    6842:	fe 4f       	sbci	r31, 0xFE	; 254
    6844:	80 81       	ld	r24, Z
    6846:	8f 3f       	cpi	r24, 0xFF	; 255
    6848:	09 f4       	brne	.+2      	; 0x684c <main+0x17a8>
    684a:	03 cf       	rjmp	.-506    	; 0x6652 <main+0x15ae>
							t2.CompOutMode = OC2_DIS;
    684c:	fe 01       	movw	r30, r28
    684e:	ea 5d       	subi	r30, 0xDA	; 218
    6850:	fe 4f       	sbci	r31, 0xFE	; 254
    6852:	12 82       	std	Z+2, r1	; 0x02
							TIMER2_voidCompOutModeChange(&t2);
    6854:	ce 01       	movw	r24, r28
    6856:	8a 5d       	subi	r24, 0xDA	; 218
    6858:	9e 4f       	sbci	r25, 0xFE	; 254
    685a:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <TIMER2_voidCompOutModeChange>
    685e:	0c 94 4b 2c 	jmp	0x5896	; 0x5896 <main+0x7f2>
						}
						else if(3 == Keypress) //LM35
    6862:	fe 01       	movw	r30, r28
    6864:	e9 5e       	subi	r30, 0xE9	; 233
    6866:	fe 4f       	sbci	r31, 0xFE	; 254
    6868:	80 81       	ld	r24, Z
    686a:	83 30       	cpi	r24, 0x03	; 3
    686c:	11 f0       	breq	.+4      	; 0x6872 <main+0x17ce>
    686e:	0c 94 4b 2c 	jmp	0x5896	; 0x5896 <main+0x7f2>
						{
							t2.CompOutMode = OC2_SET_UP_CLR_DOWN;
    6872:	fe 01       	movw	r30, r28
    6874:	ea 5d       	subi	r30, 0xDA	; 218
    6876:	fe 4f       	sbci	r31, 0xFE	; 254
    6878:	83 e0       	ldi	r24, 0x03	; 3
    687a:	82 83       	std	Z+2, r24	; 0x02
							TIMER2_voidCompOutModeChange(&t2);
    687c:	ce 01       	movw	r24, r28
    687e:	8a 5d       	subi	r24, 0xDA	; 218
    6880:	9e 4f       	sbci	r25, 0xFE	; 254
    6882:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <TIMER2_voidCompOutModeChange>
							CLCD_voidSendCommand(1);
    6886:	81 e0       	ldi	r24, 0x01	; 1
    6888:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
							do{
								Keypress = KPD_u8Key_pressed();
    688c:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <KPD_u8Key_pressed>
    6890:	fe 01       	movw	r30, r28
    6892:	e9 5e       	subi	r30, 0xE9	; 233
    6894:	fe 4f       	sbci	r31, 0xFE	; 254
    6896:	80 83       	st	Z, r24
								if(Keypress=='C')
    6898:	fe 01       	movw	r30, r28
    689a:	e9 5e       	subi	r30, 0xE9	; 233
    689c:	fe 4f       	sbci	r31, 0xFE	; 254
    689e:	80 81       	ld	r24, Z
    68a0:	83 34       	cpi	r24, 0x43	; 67
    68a2:	09 f4       	brne	.+2      	; 0x68a6 <main+0x1802>
    68a4:	59 c1       	rjmp	.+690    	; 0x6b58 <main+0x1ab4>
									break;
								else
									Keypress = KPD_NO_PRESSED_KEY;
    68a6:	fe 01       	movw	r30, r28
    68a8:	e9 5e       	subi	r30, 0xE9	; 233
    68aa:	fe 4f       	sbci	r31, 0xFE	; 254
    68ac:	8f ef       	ldi	r24, 0xFF	; 255
    68ae:	80 83       	st	Z, r24
								ADC_u8StartSingleConvPoll(ADC1,&Local_data);
    68b0:	9e 01       	movw	r18, r28
    68b2:	26 5e       	subi	r18, 0xE6	; 230
    68b4:	3e 4f       	sbci	r19, 0xFE	; 254
    68b6:	81 e0       	ldi	r24, 0x01	; 1
    68b8:	b9 01       	movw	r22, r18
    68ba:	0e 94 4f 07 	call	0xe9e	; 0xe9e <ADC_u8StartSingleConvPoll>
								Local_data = (u16)(((u32)(Local_data*5000UL))/256UL);
    68be:	fe 01       	movw	r30, r28
    68c0:	e6 5e       	subi	r30, 0xE6	; 230
    68c2:	fe 4f       	sbci	r31, 0xFE	; 254
    68c4:	80 81       	ld	r24, Z
    68c6:	91 81       	ldd	r25, Z+1	; 0x01
    68c8:	cc 01       	movw	r24, r24
    68ca:	a0 e0       	ldi	r26, 0x00	; 0
    68cc:	b0 e0       	ldi	r27, 0x00	; 0
    68ce:	28 e8       	ldi	r18, 0x88	; 136
    68d0:	33 e1       	ldi	r19, 0x13	; 19
    68d2:	40 e0       	ldi	r20, 0x00	; 0
    68d4:	50 e0       	ldi	r21, 0x00	; 0
    68d6:	bc 01       	movw	r22, r24
    68d8:	cd 01       	movw	r24, r26
    68da:	0e 94 69 3c 	call	0x78d2	; 0x78d2 <__mulsi3>
    68de:	dc 01       	movw	r26, r24
    68e0:	cb 01       	movw	r24, r22
    68e2:	89 2f       	mov	r24, r25
    68e4:	9a 2f       	mov	r25, r26
    68e6:	ab 2f       	mov	r26, r27
    68e8:	bb 27       	eor	r27, r27
    68ea:	fe 01       	movw	r30, r28
    68ec:	e6 5e       	subi	r30, 0xE6	; 230
    68ee:	fe 4f       	sbci	r31, 0xFE	; 254
    68f0:	91 83       	std	Z+1, r25	; 0x01
    68f2:	80 83       	st	Z, r24
								Local_data /=100;
    68f4:	fe 01       	movw	r30, r28
    68f6:	e6 5e       	subi	r30, 0xE6	; 230
    68f8:	fe 4f       	sbci	r31, 0xFE	; 254
    68fa:	80 81       	ld	r24, Z
    68fc:	91 81       	ldd	r25, Z+1	; 0x01
    68fe:	24 e6       	ldi	r18, 0x64	; 100
    6900:	30 e0       	ldi	r19, 0x00	; 0
    6902:	b9 01       	movw	r22, r18
    6904:	0e 94 88 3c 	call	0x7910	; 0x7910 <__udivmodhi4>
    6908:	cb 01       	movw	r24, r22
    690a:	fe 01       	movw	r30, r28
    690c:	e6 5e       	subi	r30, 0xE6	; 230
    690e:	fe 4f       	sbci	r31, 0xFE	; 254
    6910:	91 83       	std	Z+1, r25	; 0x01
    6912:	80 83       	st	Z, r24
								CLCD_voidGoToXY(0,0);
    6914:	80 e0       	ldi	r24, 0x00	; 0
    6916:	60 e0       	ldi	r22, 0x00	; 0
    6918:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>
								CLCD_voidSendString("Current Temp: ");
    691c:	8c e4       	ldi	r24, 0x4C	; 76
    691e:	91 e0       	ldi	r25, 0x01	; 1
    6920:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
								CLCD_voidGoToXY(1,0);
    6924:	81 e0       	ldi	r24, 0x01	; 1
    6926:	60 e0       	ldi	r22, 0x00	; 0
    6928:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>
								CLCD_voidWriteNumber(Local_data);
    692c:	fe 01       	movw	r30, r28
    692e:	e6 5e       	subi	r30, 0xE6	; 230
    6930:	fe 4f       	sbci	r31, 0xFE	; 254
    6932:	80 81       	ld	r24, Z
    6934:	91 81       	ldd	r25, Z+1	; 0x01
    6936:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <CLCD_voidWriteNumber>
								mapVal = AppMap(27,42,0,255,Local_data);
    693a:	fe 01       	movw	r30, r28
    693c:	e6 5e       	subi	r30, 0xE6	; 230
    693e:	fe 4f       	sbci	r31, 0xFE	; 254
    6940:	80 81       	ld	r24, Z
    6942:	91 81       	ldd	r25, Z+1	; 0x01
    6944:	cc 01       	movw	r24, r24
    6946:	a0 e0       	ldi	r26, 0x00	; 0
    6948:	b0 e0       	ldi	r27, 0x00	; 0
    694a:	00 d0       	rcall	.+0      	; 0x694c <main+0x18a8>
    694c:	00 d0       	rcall	.+0      	; 0x694e <main+0x18aa>
    694e:	ed b7       	in	r30, 0x3d	; 61
    6950:	fe b7       	in	r31, 0x3e	; 62
    6952:	31 96       	adiw	r30, 0x01	; 1
    6954:	80 83       	st	Z, r24
    6956:	91 83       	std	Z+1, r25	; 0x01
    6958:	a2 83       	std	Z+2, r26	; 0x02
    695a:	b3 83       	std	Z+3, r27	; 0x03
    695c:	6b e1       	ldi	r22, 0x1B	; 27
    695e:	70 e0       	ldi	r23, 0x00	; 0
    6960:	80 e0       	ldi	r24, 0x00	; 0
    6962:	90 e0       	ldi	r25, 0x00	; 0
    6964:	2a e2       	ldi	r18, 0x2A	; 42
    6966:	30 e0       	ldi	r19, 0x00	; 0
    6968:	40 e0       	ldi	r20, 0x00	; 0
    696a:	50 e0       	ldi	r21, 0x00	; 0
    696c:	ee 24       	eor	r14, r14
    696e:	ff 24       	eor	r15, r15
    6970:	87 01       	movw	r16, r14
    6972:	0f 2e       	mov	r0, r31
    6974:	ff ef       	ldi	r31, 0xFF	; 255
    6976:	af 2e       	mov	r10, r31
    6978:	f0 e0       	ldi	r31, 0x00	; 0
    697a:	bf 2e       	mov	r11, r31
    697c:	f0 e0       	ldi	r31, 0x00	; 0
    697e:	cf 2e       	mov	r12, r31
    6980:	f0 e0       	ldi	r31, 0x00	; 0
    6982:	df 2e       	mov	r13, r31
    6984:	f0 2d       	mov	r31, r0
    6986:	0e 94 d5 27 	call	0x4faa	; 0x4faa <AppMap>
    698a:	0f 90       	pop	r0
    698c:	0f 90       	pop	r0
    698e:	0f 90       	pop	r0
    6990:	0f 90       	pop	r0
    6992:	dc 01       	movw	r26, r24
    6994:	cb 01       	movw	r24, r22
    6996:	fe 01       	movw	r30, r28
    6998:	e8 5e       	subi	r30, 0xE8	; 232
    699a:	fe 4f       	sbci	r31, 0xFE	; 254
    699c:	91 83       	std	Z+1, r25	; 0x01
    699e:	80 83       	st	Z, r24
								CLCD_voidGoToXY(0,0);
    69a0:	80 e0       	ldi	r24, 0x00	; 0
    69a2:	60 e0       	ldi	r22, 0x00	; 0
    69a4:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>
								if((255-mapVal)<=255)
    69a8:	fe 01       	movw	r30, r28
    69aa:	e8 5e       	subi	r30, 0xE8	; 232
    69ac:	fe 4f       	sbci	r31, 0xFE	; 254
    69ae:	2f ef       	ldi	r18, 0xFF	; 255
    69b0:	30 e0       	ldi	r19, 0x00	; 0
    69b2:	80 81       	ld	r24, Z
    69b4:	91 81       	ldd	r25, Z+1	; 0x01
    69b6:	a9 01       	movw	r20, r18
    69b8:	48 1b       	sub	r20, r24
    69ba:	59 0b       	sbc	r21, r25
    69bc:	ca 01       	movw	r24, r20
    69be:	8f 3f       	cpi	r24, 0xFF	; 255
    69c0:	91 05       	cpc	r25, r1
    69c2:	09 f0       	breq	.+2      	; 0x69c6 <main+0x1922>
    69c4:	38 f4       	brcc	.+14     	; 0x69d4 <main+0x1930>
									TIMER2_voidSetCompMatchValue(255-mapVal);
    69c6:	fe 01       	movw	r30, r28
    69c8:	e8 5e       	subi	r30, 0xE8	; 232
    69ca:	fe 4f       	sbci	r31, 0xFE	; 254
    69cc:	80 81       	ld	r24, Z
    69ce:	80 95       	com	r24
    69d0:	0e 94 1d 26 	call	0x4c3a	; 0x4c3a <TIMER2_voidSetCompMatchValue>
    69d4:	fe 01       	movw	r30, r28
    69d6:	e5 58       	subi	r30, 0x85	; 133
    69d8:	ff 4f       	sbci	r31, 0xFF	; 255
    69da:	80 e0       	ldi	r24, 0x00	; 0
    69dc:	90 e0       	ldi	r25, 0x00	; 0
    69de:	a8 ec       	ldi	r26, 0xC8	; 200
    69e0:	b2 e4       	ldi	r27, 0x42	; 66
    69e2:	80 83       	st	Z, r24
    69e4:	91 83       	std	Z+1, r25	; 0x01
    69e6:	a2 83       	std	Z+2, r26	; 0x02
    69e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    69ea:	8e 01       	movw	r16, r28
    69ec:	09 58       	subi	r16, 0x89	; 137
    69ee:	1f 4f       	sbci	r17, 0xFF	; 255
    69f0:	fe 01       	movw	r30, r28
    69f2:	e5 58       	subi	r30, 0x85	; 133
    69f4:	ff 4f       	sbci	r31, 0xFF	; 255
    69f6:	60 81       	ld	r22, Z
    69f8:	71 81       	ldd	r23, Z+1	; 0x01
    69fa:	82 81       	ldd	r24, Z+2	; 0x02
    69fc:	93 81       	ldd	r25, Z+3	; 0x03
    69fe:	20 e0       	ldi	r18, 0x00	; 0
    6a00:	30 e0       	ldi	r19, 0x00	; 0
    6a02:	4a ef       	ldi	r20, 0xFA	; 250
    6a04:	54 e4       	ldi	r21, 0x44	; 68
    6a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6a0a:	dc 01       	movw	r26, r24
    6a0c:	cb 01       	movw	r24, r22
    6a0e:	f8 01       	movw	r30, r16
    6a10:	80 83       	st	Z, r24
    6a12:	91 83       	std	Z+1, r25	; 0x01
    6a14:	a2 83       	std	Z+2, r26	; 0x02
    6a16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6a18:	fe 01       	movw	r30, r28
    6a1a:	e9 58       	subi	r30, 0x89	; 137
    6a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    6a1e:	60 81       	ld	r22, Z
    6a20:	71 81       	ldd	r23, Z+1	; 0x01
    6a22:	82 81       	ldd	r24, Z+2	; 0x02
    6a24:	93 81       	ldd	r25, Z+3	; 0x03
    6a26:	20 e0       	ldi	r18, 0x00	; 0
    6a28:	30 e0       	ldi	r19, 0x00	; 0
    6a2a:	40 e8       	ldi	r20, 0x80	; 128
    6a2c:	5f e3       	ldi	r21, 0x3F	; 63
    6a2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6a32:	88 23       	and	r24, r24
    6a34:	44 f4       	brge	.+16     	; 0x6a46 <main+0x19a2>
		__ticks = 1;
    6a36:	fe 01       	movw	r30, r28
    6a38:	eb 58       	subi	r30, 0x8B	; 139
    6a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    6a3c:	81 e0       	ldi	r24, 0x01	; 1
    6a3e:	90 e0       	ldi	r25, 0x00	; 0
    6a40:	91 83       	std	Z+1, r25	; 0x01
    6a42:	80 83       	st	Z, r24
    6a44:	64 c0       	rjmp	.+200    	; 0x6b0e <main+0x1a6a>
	else if (__tmp > 65535)
    6a46:	fe 01       	movw	r30, r28
    6a48:	e9 58       	subi	r30, 0x89	; 137
    6a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    6a4c:	60 81       	ld	r22, Z
    6a4e:	71 81       	ldd	r23, Z+1	; 0x01
    6a50:	82 81       	ldd	r24, Z+2	; 0x02
    6a52:	93 81       	ldd	r25, Z+3	; 0x03
    6a54:	20 e0       	ldi	r18, 0x00	; 0
    6a56:	3f ef       	ldi	r19, 0xFF	; 255
    6a58:	4f e7       	ldi	r20, 0x7F	; 127
    6a5a:	57 e4       	ldi	r21, 0x47	; 71
    6a5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6a60:	18 16       	cp	r1, r24
    6a62:	0c f0       	brlt	.+2      	; 0x6a66 <main+0x19c2>
    6a64:	43 c0       	rjmp	.+134    	; 0x6aec <main+0x1a48>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6a66:	fe 01       	movw	r30, r28
    6a68:	e5 58       	subi	r30, 0x85	; 133
    6a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    6a6c:	60 81       	ld	r22, Z
    6a6e:	71 81       	ldd	r23, Z+1	; 0x01
    6a70:	82 81       	ldd	r24, Z+2	; 0x02
    6a72:	93 81       	ldd	r25, Z+3	; 0x03
    6a74:	20 e0       	ldi	r18, 0x00	; 0
    6a76:	30 e0       	ldi	r19, 0x00	; 0
    6a78:	40 e2       	ldi	r20, 0x20	; 32
    6a7a:	51 e4       	ldi	r21, 0x41	; 65
    6a7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6a80:	dc 01       	movw	r26, r24
    6a82:	cb 01       	movw	r24, r22
    6a84:	8e 01       	movw	r16, r28
    6a86:	0b 58       	subi	r16, 0x8B	; 139
    6a88:	1f 4f       	sbci	r17, 0xFF	; 255
    6a8a:	bc 01       	movw	r22, r24
    6a8c:	cd 01       	movw	r24, r26
    6a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a92:	dc 01       	movw	r26, r24
    6a94:	cb 01       	movw	r24, r22
    6a96:	f8 01       	movw	r30, r16
    6a98:	91 83       	std	Z+1, r25	; 0x01
    6a9a:	80 83       	st	Z, r24
    6a9c:	1f c0       	rjmp	.+62     	; 0x6adc <main+0x1a38>
    6a9e:	fe 01       	movw	r30, r28
    6aa0:	ed 58       	subi	r30, 0x8D	; 141
    6aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    6aa4:	88 ec       	ldi	r24, 0xC8	; 200
    6aa6:	90 e0       	ldi	r25, 0x00	; 0
    6aa8:	91 83       	std	Z+1, r25	; 0x01
    6aaa:	80 83       	st	Z, r24
    6aac:	fe 01       	movw	r30, r28
    6aae:	ed 58       	subi	r30, 0x8D	; 141
    6ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    6ab2:	80 81       	ld	r24, Z
    6ab4:	91 81       	ldd	r25, Z+1	; 0x01
    6ab6:	01 97       	sbiw	r24, 0x01	; 1
    6ab8:	f1 f7       	brne	.-4      	; 0x6ab6 <main+0x1a12>
    6aba:	fe 01       	movw	r30, r28
    6abc:	ed 58       	subi	r30, 0x8D	; 141
    6abe:	ff 4f       	sbci	r31, 0xFF	; 255
    6ac0:	91 83       	std	Z+1, r25	; 0x01
    6ac2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6ac4:	de 01       	movw	r26, r28
    6ac6:	ab 58       	subi	r26, 0x8B	; 139
    6ac8:	bf 4f       	sbci	r27, 0xFF	; 255
    6aca:	fe 01       	movw	r30, r28
    6acc:	eb 58       	subi	r30, 0x8B	; 139
    6ace:	ff 4f       	sbci	r31, 0xFF	; 255
    6ad0:	80 81       	ld	r24, Z
    6ad2:	91 81       	ldd	r25, Z+1	; 0x01
    6ad4:	01 97       	sbiw	r24, 0x01	; 1
    6ad6:	11 96       	adiw	r26, 0x01	; 1
    6ad8:	9c 93       	st	X, r25
    6ada:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6adc:	fe 01       	movw	r30, r28
    6ade:	eb 58       	subi	r30, 0x8B	; 139
    6ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    6ae2:	80 81       	ld	r24, Z
    6ae4:	91 81       	ldd	r25, Z+1	; 0x01
    6ae6:	00 97       	sbiw	r24, 0x00	; 0
    6ae8:	d1 f6       	brne	.-76     	; 0x6a9e <main+0x19fa>
    6aea:	27 c0       	rjmp	.+78     	; 0x6b3a <main+0x1a96>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6aec:	8e 01       	movw	r16, r28
    6aee:	0b 58       	subi	r16, 0x8B	; 139
    6af0:	1f 4f       	sbci	r17, 0xFF	; 255
    6af2:	fe 01       	movw	r30, r28
    6af4:	e9 58       	subi	r30, 0x89	; 137
    6af6:	ff 4f       	sbci	r31, 0xFF	; 255
    6af8:	60 81       	ld	r22, Z
    6afa:	71 81       	ldd	r23, Z+1	; 0x01
    6afc:	82 81       	ldd	r24, Z+2	; 0x02
    6afe:	93 81       	ldd	r25, Z+3	; 0x03
    6b00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b04:	dc 01       	movw	r26, r24
    6b06:	cb 01       	movw	r24, r22
    6b08:	f8 01       	movw	r30, r16
    6b0a:	91 83       	std	Z+1, r25	; 0x01
    6b0c:	80 83       	st	Z, r24
    6b0e:	de 01       	movw	r26, r28
    6b10:	af 58       	subi	r26, 0x8F	; 143
    6b12:	bf 4f       	sbci	r27, 0xFF	; 255
    6b14:	fe 01       	movw	r30, r28
    6b16:	eb 58       	subi	r30, 0x8B	; 139
    6b18:	ff 4f       	sbci	r31, 0xFF	; 255
    6b1a:	80 81       	ld	r24, Z
    6b1c:	91 81       	ldd	r25, Z+1	; 0x01
    6b1e:	8d 93       	st	X+, r24
    6b20:	9c 93       	st	X, r25
    6b22:	fe 01       	movw	r30, r28
    6b24:	ef 58       	subi	r30, 0x8F	; 143
    6b26:	ff 4f       	sbci	r31, 0xFF	; 255
    6b28:	80 81       	ld	r24, Z
    6b2a:	91 81       	ldd	r25, Z+1	; 0x01
    6b2c:	01 97       	sbiw	r24, 0x01	; 1
    6b2e:	f1 f7       	brne	.-4      	; 0x6b2c <main+0x1a88>
    6b30:	fe 01       	movw	r30, r28
    6b32:	ef 58       	subi	r30, 0x8F	; 143
    6b34:	ff 4f       	sbci	r31, 0xFF	; 255
    6b36:	91 83       	std	Z+1, r25	; 0x01
    6b38:	80 83       	st	Z, r24
								_delay_ms(100);
								CLCD_voidGoToXY(1,0);
    6b3a:	81 e0       	ldi	r24, 0x01	; 1
    6b3c:	60 e0       	ldi	r22, 0x00	; 0
    6b3e:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>
								CLCD_voidSendString("       ");
    6b42:	8c e2       	ldi	r24, 0x2C	; 44
    6b44:	91 e0       	ldi	r25, 0x01	; 1
    6b46:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
							}while(Keypress == KPD_NO_PRESSED_KEY);
    6b4a:	fe 01       	movw	r30, r28
    6b4c:	e9 5e       	subi	r30, 0xE9	; 233
    6b4e:	fe 4f       	sbci	r31, 0xFE	; 254
    6b50:	80 81       	ld	r24, Z
    6b52:	8f 3f       	cpi	r24, 0xFF	; 255
    6b54:	09 f4       	brne	.+2      	; 0x6b58 <main+0x1ab4>
    6b56:	9a ce       	rjmp	.-716    	; 0x688c <main+0x17e8>
							t2.CompOutMode = OC2_DIS;
    6b58:	fe 01       	movw	r30, r28
    6b5a:	ea 5d       	subi	r30, 0xDA	; 218
    6b5c:	fe 4f       	sbci	r31, 0xFE	; 254
    6b5e:	12 82       	std	Z+2, r1	; 0x02
							TIMER2_voidCompOutModeChange(&t2);
    6b60:	ce 01       	movw	r24, r28
    6b62:	8a 5d       	subi	r24, 0xDA	; 218
    6b64:	9e 4f       	sbci	r25, 0xFE	; 254
    6b66:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <TIMER2_voidCompOutModeChange>
    6b6a:	0c 94 4b 2c 	jmp	0x5896	; 0x5896 <main+0x7f2>
						}
					}
					break;
				case STEPPER_MOTOR:
					CLCD_voidSendCommand(1);
    6b6e:	81 e0       	ldi	r24, 0x01	; 1
    6b70:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
					CLCD_voidSendString("1)Rotate CCW");
    6b74:	8b e5       	ldi	r24, 0x5B	; 91
    6b76:	91 e0       	ldi	r25, 0x01	; 1
    6b78:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
					CLCD_voidGoToXY(1,0);
    6b7c:	81 e0       	ldi	r24, 0x01	; 1
    6b7e:	60 e0       	ldi	r22, 0x00	; 0
    6b80:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>
					CLCD_voidSendString("2)Rotate CW");
    6b84:	88 e6       	ldi	r24, 0x68	; 104
    6b86:	91 e0       	ldi	r25, 0x01	; 1
    6b88:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
					do{
						Keypress = KPD_u8Key_pressed();
    6b8c:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <KPD_u8Key_pressed>
    6b90:	fe 01       	movw	r30, r28
    6b92:	e9 5e       	subi	r30, 0xE9	; 233
    6b94:	fe 4f       	sbci	r31, 0xFE	; 254
    6b96:	80 83       	st	Z, r24
						if(1==Keypress)
    6b98:	fe 01       	movw	r30, r28
    6b9a:	e9 5e       	subi	r30, 0xE9	; 233
    6b9c:	fe 4f       	sbci	r31, 0xFE	; 254
    6b9e:	80 81       	ld	r24, Z
    6ba0:	81 30       	cpi	r24, 0x01	; 1
    6ba2:	31 f4       	brne	.+12     	; 0x6bb0 <main+0x1b0c>
						{
							step1.Diraction = STEP_COUNTER_CLOCKWISE;
    6ba4:	fe 01       	movw	r30, r28
    6ba6:	e4 5e       	subi	r30, 0xE4	; 228
    6ba8:	fe 4f       	sbci	r31, 0xFE	; 254
    6baa:	81 e0       	ldi	r24, 0x01	; 1
    6bac:	82 83       	std	Z+2, r24	; 0x02
    6bae:	10 c0       	rjmp	.+32     	; 0x6bd0 <main+0x1b2c>
						}
						else if(2==Keypress)
    6bb0:	fe 01       	movw	r30, r28
    6bb2:	e9 5e       	subi	r30, 0xE9	; 233
    6bb4:	fe 4f       	sbci	r31, 0xFE	; 254
    6bb6:	80 81       	ld	r24, Z
    6bb8:	82 30       	cpi	r24, 0x02	; 2
    6bba:	29 f4       	brne	.+10     	; 0x6bc6 <main+0x1b22>
						{
							step1.Diraction = STEP_CLOCKWISE;
    6bbc:	fe 01       	movw	r30, r28
    6bbe:	e4 5e       	subi	r30, 0xE4	; 228
    6bc0:	fe 4f       	sbci	r31, 0xFE	; 254
    6bc2:	12 82       	std	Z+2, r1	; 0x02
    6bc4:	05 c0       	rjmp	.+10     	; 0x6bd0 <main+0x1b2c>
						}
						else
							Keypress = KPD_NO_PRESSED_KEY;
    6bc6:	fe 01       	movw	r30, r28
    6bc8:	e9 5e       	subi	r30, 0xE9	; 233
    6bca:	fe 4f       	sbci	r31, 0xFE	; 254
    6bcc:	8f ef       	ldi	r24, 0xFF	; 255
    6bce:	80 83       	st	Z, r24
					}while(Keypress == KPD_NO_PRESSED_KEY);
    6bd0:	fe 01       	movw	r30, r28
    6bd2:	e9 5e       	subi	r30, 0xE9	; 233
    6bd4:	fe 4f       	sbci	r31, 0xFE	; 254
    6bd6:	80 81       	ld	r24, Z
    6bd8:	8f 3f       	cpi	r24, 0xFF	; 255
    6bda:	c1 f2       	breq	.-80     	; 0x6b8c <main+0x1ae8>
					CLCD_voidSendCommand(1);
    6bdc:	81 e0       	ldi	r24, 0x01	; 1
    6bde:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
					CLCD_voidSendString("EnterAngle:   *C");
    6be2:	84 e7       	ldi	r24, 0x74	; 116
    6be4:	91 e0       	ldi	r25, 0x01	; 1
    6be6:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
					CLCD_voidGoToXY(0,11);
    6bea:	80 e0       	ldi	r24, 0x00	; 0
    6bec:	6b e0       	ldi	r22, 0x0B	; 11
    6bee:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>
					do{
						Keypress = KPD_u8Key_pressed();
    6bf2:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <KPD_u8Key_pressed>
    6bf6:	fe 01       	movw	r30, r28
    6bf8:	e9 5e       	subi	r30, 0xE9	; 233
    6bfa:	fe 4f       	sbci	r31, 0xFE	; 254
    6bfc:	80 83       	st	Z, r24
						if((0<=Keypress)&&(Keypress<=9))
    6bfe:	fe 01       	movw	r30, r28
    6c00:	e9 5e       	subi	r30, 0xE9	; 233
    6c02:	fe 4f       	sbci	r31, 0xFE	; 254
    6c04:	80 81       	ld	r24, Z
    6c06:	8a 30       	cpi	r24, 0x0A	; 10
    6c08:	08 f0       	brcs	.+2      	; 0x6c0c <main+0x1b68>
    6c0a:	49 c0       	rjmp	.+146    	; 0x6c9e <main+0x1bfa>
						{
							if(count<3)
    6c0c:	fe 01       	movw	r30, r28
    6c0e:	eb 5e       	subi	r30, 0xEB	; 235
    6c10:	fe 4f       	sbci	r31, 0xFE	; 254
    6c12:	80 81       	ld	r24, Z
    6c14:	83 30       	cpi	r24, 0x03	; 3
    6c16:	f4 f5       	brge	.+124    	; 0x6c94 <main+0x1bf0>
							{
								CLCD_voidWriteNumber(Keypress);
    6c18:	fe 01       	movw	r30, r28
    6c1a:	e9 5e       	subi	r30, 0xE9	; 233
    6c1c:	fe 4f       	sbci	r31, 0xFE	; 254
    6c1e:	80 81       	ld	r24, Z
    6c20:	88 2f       	mov	r24, r24
    6c22:	90 e0       	ldi	r25, 0x00	; 0
    6c24:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <CLCD_voidWriteNumber>
								Angle1 = Angle1*multi+Keypress ;
    6c28:	fe 01       	movw	r30, r28
    6c2a:	ec 5e       	subi	r30, 0xEC	; 236
    6c2c:	fe 4f       	sbci	r31, 0xFE	; 254
    6c2e:	80 81       	ld	r24, Z
    6c30:	28 2f       	mov	r18, r24
    6c32:	33 27       	eor	r19, r19
    6c34:	27 fd       	sbrc	r18, 7
    6c36:	30 95       	com	r19
    6c38:	fe 01       	movw	r30, r28
    6c3a:	ef 5e       	subi	r30, 0xEF	; 239
    6c3c:	fe 4f       	sbci	r31, 0xFE	; 254
    6c3e:	80 81       	ld	r24, Z
    6c40:	91 81       	ldd	r25, Z+1	; 0x01
    6c42:	a9 01       	movw	r20, r18
    6c44:	48 9f       	mul	r20, r24
    6c46:	90 01       	movw	r18, r0
    6c48:	49 9f       	mul	r20, r25
    6c4a:	30 0d       	add	r19, r0
    6c4c:	58 9f       	mul	r21, r24
    6c4e:	30 0d       	add	r19, r0
    6c50:	11 24       	eor	r1, r1
    6c52:	fe 01       	movw	r30, r28
    6c54:	e9 5e       	subi	r30, 0xE9	; 233
    6c56:	fe 4f       	sbci	r31, 0xFE	; 254
    6c58:	80 81       	ld	r24, Z
    6c5a:	88 2f       	mov	r24, r24
    6c5c:	90 e0       	ldi	r25, 0x00	; 0
    6c5e:	fe 01       	movw	r30, r28
    6c60:	ef 5e       	subi	r30, 0xEF	; 239
    6c62:	fe 4f       	sbci	r31, 0xFE	; 254
    6c64:	82 0f       	add	r24, r18
    6c66:	93 1f       	adc	r25, r19
    6c68:	91 83       	std	Z+1, r25	; 0x01
    6c6a:	80 83       	st	Z, r24
								multi=10;
    6c6c:	fe 01       	movw	r30, r28
    6c6e:	ec 5e       	subi	r30, 0xEC	; 236
    6c70:	fe 4f       	sbci	r31, 0xFE	; 254
    6c72:	8a e0       	ldi	r24, 0x0A	; 10
    6c74:	80 83       	st	Z, r24
								count++;
    6c76:	de 01       	movw	r26, r28
    6c78:	ab 5e       	subi	r26, 0xEB	; 235
    6c7a:	be 4f       	sbci	r27, 0xFE	; 254
    6c7c:	fe 01       	movw	r30, r28
    6c7e:	eb 5e       	subi	r30, 0xEB	; 235
    6c80:	fe 4f       	sbci	r31, 0xFE	; 254
    6c82:	80 81       	ld	r24, Z
    6c84:	8f 5f       	subi	r24, 0xFF	; 255
    6c86:	8c 93       	st	X, r24
								Keypress = KPD_NO_PRESSED_KEY;
    6c88:	fe 01       	movw	r30, r28
    6c8a:	e9 5e       	subi	r30, 0xE9	; 233
    6c8c:	fe 4f       	sbci	r31, 0xFE	; 254
    6c8e:	8f ef       	ldi	r24, 0xFF	; 255
    6c90:	80 83       	st	Z, r24
    6c92:	05 c0       	rjmp	.+10     	; 0x6c9e <main+0x1bfa>
							}
							else
								Keypress = KPD_NO_PRESSED_KEY;
    6c94:	fe 01       	movw	r30, r28
    6c96:	e9 5e       	subi	r30, 0xE9	; 233
    6c98:	fe 4f       	sbci	r31, 0xFE	; 254
    6c9a:	8f ef       	ldi	r24, 0xFF	; 255
    6c9c:	80 83       	st	Z, r24
						}
						if(Keypress == '=')
    6c9e:	fe 01       	movw	r30, r28
    6ca0:	e9 5e       	subi	r30, 0xE9	; 233
    6ca2:	fe 4f       	sbci	r31, 0xFE	; 254
    6ca4:	80 81       	ld	r24, Z
    6ca6:	8d 33       	cpi	r24, 0x3D	; 61
    6ca8:	39 f0       	breq	.+14     	; 0x6cb8 <main+0x1c14>
							break;
					}while((Keypress == KPD_NO_PRESSED_KEY));
    6caa:	fe 01       	movw	r30, r28
    6cac:	e9 5e       	subi	r30, 0xE9	; 233
    6cae:	fe 4f       	sbci	r31, 0xFE	; 254
    6cb0:	80 81       	ld	r24, Z
    6cb2:	8f 3f       	cpi	r24, 0xFF	; 255
    6cb4:	09 f4       	brne	.+2      	; 0x6cb8 <main+0x1c14>
    6cb6:	9d cf       	rjmp	.-198    	; 0x6bf2 <main+0x1b4e>
					count=0;
    6cb8:	fe 01       	movw	r30, r28
    6cba:	eb 5e       	subi	r30, 0xEB	; 235
    6cbc:	fe 4f       	sbci	r31, 0xFE	; 254
    6cbe:	10 82       	st	Z, r1
					CLCD_voidSendCommand(1);
    6cc0:	81 e0       	ldi	r24, 0x01	; 1
    6cc2:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
					CLCD_voidSendString("Motor Started");
    6cc6:	85 e8       	ldi	r24, 0x85	; 133
    6cc8:	91 e0       	ldi	r25, 0x01	; 1
    6cca:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
					step1.AngleDegree = Angle1;
    6cce:	de 01       	movw	r26, r28
    6cd0:	a4 5e       	subi	r26, 0xE4	; 228
    6cd2:	be 4f       	sbci	r27, 0xFE	; 254
    6cd4:	fe 01       	movw	r30, r28
    6cd6:	ef 5e       	subi	r30, 0xEF	; 239
    6cd8:	fe 4f       	sbci	r31, 0xFE	; 254
    6cda:	80 81       	ld	r24, Z
    6cdc:	91 81       	ldd	r25, Z+1	; 0x01
    6cde:	14 96       	adiw	r26, 0x04	; 4
    6ce0:	9c 93       	st	X, r25
    6ce2:	8e 93       	st	-X, r24
    6ce4:	13 97       	sbiw	r26, 0x03	; 3
					CLCD_voidWriteNumber(Angle1);
    6ce6:	fe 01       	movw	r30, r28
    6ce8:	ef 5e       	subi	r30, 0xEF	; 239
    6cea:	fe 4f       	sbci	r31, 0xFE	; 254
    6cec:	80 81       	ld	r24, Z
    6cee:	91 81       	ldd	r25, Z+1	; 0x01
    6cf0:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <CLCD_voidWriteNumber>
					if(STEP_MOTORu8StartFullMode(&step1)==0)
    6cf4:	ce 01       	movw	r24, r28
    6cf6:	84 5e       	subi	r24, 0xE4	; 228
    6cf8:	9e 4f       	sbci	r25, 0xFE	; 254
    6cfa:	0e 94 8e 18 	call	0x311c	; 0x311c <STEP_MOTORu8StartFullMode>
    6cfe:	88 23       	and	r24, r24
    6d00:	09 f0       	breq	.+2      	; 0x6d04 <main+0x1c60>
    6d02:	bb c0       	rjmp	.+374    	; 0x6e7a <main+0x1dd6>
					{
						CLCD_voidSendCommand(1);
    6d04:	81 e0       	ldi	r24, 0x01	; 1
    6d06:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
						CLCD_voidSendString("Angle Reached");
    6d0a:	83 e9       	ldi	r24, 0x93	; 147
    6d0c:	91 e0       	ldi	r25, 0x01	; 1
    6d0e:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
    6d12:	fe 01       	movw	r30, r28
    6d14:	e3 59       	subi	r30, 0x93	; 147
    6d16:	ff 4f       	sbci	r31, 0xFF	; 255
    6d18:	80 e0       	ldi	r24, 0x00	; 0
    6d1a:	90 e0       	ldi	r25, 0x00	; 0
    6d1c:	aa ef       	ldi	r26, 0xFA	; 250
    6d1e:	b3 e4       	ldi	r27, 0x43	; 67
    6d20:	80 83       	st	Z, r24
    6d22:	91 83       	std	Z+1, r25	; 0x01
    6d24:	a2 83       	std	Z+2, r26	; 0x02
    6d26:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6d28:	8e 01       	movw	r16, r28
    6d2a:	07 59       	subi	r16, 0x97	; 151
    6d2c:	1f 4f       	sbci	r17, 0xFF	; 255
    6d2e:	fe 01       	movw	r30, r28
    6d30:	e3 59       	subi	r30, 0x93	; 147
    6d32:	ff 4f       	sbci	r31, 0xFF	; 255
    6d34:	60 81       	ld	r22, Z
    6d36:	71 81       	ldd	r23, Z+1	; 0x01
    6d38:	82 81       	ldd	r24, Z+2	; 0x02
    6d3a:	93 81       	ldd	r25, Z+3	; 0x03
    6d3c:	20 e0       	ldi	r18, 0x00	; 0
    6d3e:	30 e0       	ldi	r19, 0x00	; 0
    6d40:	4a ef       	ldi	r20, 0xFA	; 250
    6d42:	54 e4       	ldi	r21, 0x44	; 68
    6d44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6d48:	dc 01       	movw	r26, r24
    6d4a:	cb 01       	movw	r24, r22
    6d4c:	f8 01       	movw	r30, r16
    6d4e:	80 83       	st	Z, r24
    6d50:	91 83       	std	Z+1, r25	; 0x01
    6d52:	a2 83       	std	Z+2, r26	; 0x02
    6d54:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6d56:	fe 01       	movw	r30, r28
    6d58:	e7 59       	subi	r30, 0x97	; 151
    6d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    6d5c:	60 81       	ld	r22, Z
    6d5e:	71 81       	ldd	r23, Z+1	; 0x01
    6d60:	82 81       	ldd	r24, Z+2	; 0x02
    6d62:	93 81       	ldd	r25, Z+3	; 0x03
    6d64:	20 e0       	ldi	r18, 0x00	; 0
    6d66:	30 e0       	ldi	r19, 0x00	; 0
    6d68:	40 e8       	ldi	r20, 0x80	; 128
    6d6a:	5f e3       	ldi	r21, 0x3F	; 63
    6d6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6d70:	88 23       	and	r24, r24
    6d72:	44 f4       	brge	.+16     	; 0x6d84 <main+0x1ce0>
		__ticks = 1;
    6d74:	fe 01       	movw	r30, r28
    6d76:	e9 59       	subi	r30, 0x99	; 153
    6d78:	ff 4f       	sbci	r31, 0xFF	; 255
    6d7a:	81 e0       	ldi	r24, 0x01	; 1
    6d7c:	90 e0       	ldi	r25, 0x00	; 0
    6d7e:	91 83       	std	Z+1, r25	; 0x01
    6d80:	80 83       	st	Z, r24
    6d82:	64 c0       	rjmp	.+200    	; 0x6e4c <main+0x1da8>
	else if (__tmp > 65535)
    6d84:	fe 01       	movw	r30, r28
    6d86:	e7 59       	subi	r30, 0x97	; 151
    6d88:	ff 4f       	sbci	r31, 0xFF	; 255
    6d8a:	60 81       	ld	r22, Z
    6d8c:	71 81       	ldd	r23, Z+1	; 0x01
    6d8e:	82 81       	ldd	r24, Z+2	; 0x02
    6d90:	93 81       	ldd	r25, Z+3	; 0x03
    6d92:	20 e0       	ldi	r18, 0x00	; 0
    6d94:	3f ef       	ldi	r19, 0xFF	; 255
    6d96:	4f e7       	ldi	r20, 0x7F	; 127
    6d98:	57 e4       	ldi	r21, 0x47	; 71
    6d9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6d9e:	18 16       	cp	r1, r24
    6da0:	0c f0       	brlt	.+2      	; 0x6da4 <main+0x1d00>
    6da2:	43 c0       	rjmp	.+134    	; 0x6e2a <main+0x1d86>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6da4:	fe 01       	movw	r30, r28
    6da6:	e3 59       	subi	r30, 0x93	; 147
    6da8:	ff 4f       	sbci	r31, 0xFF	; 255
    6daa:	60 81       	ld	r22, Z
    6dac:	71 81       	ldd	r23, Z+1	; 0x01
    6dae:	82 81       	ldd	r24, Z+2	; 0x02
    6db0:	93 81       	ldd	r25, Z+3	; 0x03
    6db2:	20 e0       	ldi	r18, 0x00	; 0
    6db4:	30 e0       	ldi	r19, 0x00	; 0
    6db6:	40 e2       	ldi	r20, 0x20	; 32
    6db8:	51 e4       	ldi	r21, 0x41	; 65
    6dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6dbe:	dc 01       	movw	r26, r24
    6dc0:	cb 01       	movw	r24, r22
    6dc2:	8e 01       	movw	r16, r28
    6dc4:	09 59       	subi	r16, 0x99	; 153
    6dc6:	1f 4f       	sbci	r17, 0xFF	; 255
    6dc8:	bc 01       	movw	r22, r24
    6dca:	cd 01       	movw	r24, r26
    6dcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6dd0:	dc 01       	movw	r26, r24
    6dd2:	cb 01       	movw	r24, r22
    6dd4:	f8 01       	movw	r30, r16
    6dd6:	91 83       	std	Z+1, r25	; 0x01
    6dd8:	80 83       	st	Z, r24
    6dda:	1f c0       	rjmp	.+62     	; 0x6e1a <main+0x1d76>
    6ddc:	fe 01       	movw	r30, r28
    6dde:	eb 59       	subi	r30, 0x9B	; 155
    6de0:	ff 4f       	sbci	r31, 0xFF	; 255
    6de2:	88 ec       	ldi	r24, 0xC8	; 200
    6de4:	90 e0       	ldi	r25, 0x00	; 0
    6de6:	91 83       	std	Z+1, r25	; 0x01
    6de8:	80 83       	st	Z, r24
    6dea:	fe 01       	movw	r30, r28
    6dec:	eb 59       	subi	r30, 0x9B	; 155
    6dee:	ff 4f       	sbci	r31, 0xFF	; 255
    6df0:	80 81       	ld	r24, Z
    6df2:	91 81       	ldd	r25, Z+1	; 0x01
    6df4:	01 97       	sbiw	r24, 0x01	; 1
    6df6:	f1 f7       	brne	.-4      	; 0x6df4 <main+0x1d50>
    6df8:	fe 01       	movw	r30, r28
    6dfa:	eb 59       	subi	r30, 0x9B	; 155
    6dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    6dfe:	91 83       	std	Z+1, r25	; 0x01
    6e00:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6e02:	de 01       	movw	r26, r28
    6e04:	a9 59       	subi	r26, 0x99	; 153
    6e06:	bf 4f       	sbci	r27, 0xFF	; 255
    6e08:	fe 01       	movw	r30, r28
    6e0a:	e9 59       	subi	r30, 0x99	; 153
    6e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    6e0e:	80 81       	ld	r24, Z
    6e10:	91 81       	ldd	r25, Z+1	; 0x01
    6e12:	01 97       	sbiw	r24, 0x01	; 1
    6e14:	11 96       	adiw	r26, 0x01	; 1
    6e16:	9c 93       	st	X, r25
    6e18:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6e1a:	fe 01       	movw	r30, r28
    6e1c:	e9 59       	subi	r30, 0x99	; 153
    6e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    6e20:	80 81       	ld	r24, Z
    6e22:	91 81       	ldd	r25, Z+1	; 0x01
    6e24:	00 97       	sbiw	r24, 0x00	; 0
    6e26:	d1 f6       	brne	.-76     	; 0x6ddc <main+0x1d38>
    6e28:	28 c0       	rjmp	.+80     	; 0x6e7a <main+0x1dd6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6e2a:	8e 01       	movw	r16, r28
    6e2c:	09 59       	subi	r16, 0x99	; 153
    6e2e:	1f 4f       	sbci	r17, 0xFF	; 255
    6e30:	fe 01       	movw	r30, r28
    6e32:	e7 59       	subi	r30, 0x97	; 151
    6e34:	ff 4f       	sbci	r31, 0xFF	; 255
    6e36:	60 81       	ld	r22, Z
    6e38:	71 81       	ldd	r23, Z+1	; 0x01
    6e3a:	82 81       	ldd	r24, Z+2	; 0x02
    6e3c:	93 81       	ldd	r25, Z+3	; 0x03
    6e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6e42:	dc 01       	movw	r26, r24
    6e44:	cb 01       	movw	r24, r22
    6e46:	f8 01       	movw	r30, r16
    6e48:	91 83       	std	Z+1, r25	; 0x01
    6e4a:	80 83       	st	Z, r24
    6e4c:	de 01       	movw	r26, r28
    6e4e:	ad 59       	subi	r26, 0x9D	; 157
    6e50:	bf 4f       	sbci	r27, 0xFF	; 255
    6e52:	fe 01       	movw	r30, r28
    6e54:	e9 59       	subi	r30, 0x99	; 153
    6e56:	ff 4f       	sbci	r31, 0xFF	; 255
    6e58:	80 81       	ld	r24, Z
    6e5a:	91 81       	ldd	r25, Z+1	; 0x01
    6e5c:	11 96       	adiw	r26, 0x01	; 1
    6e5e:	9c 93       	st	X, r25
    6e60:	8e 93       	st	-X, r24
    6e62:	fe 01       	movw	r30, r28
    6e64:	ed 59       	subi	r30, 0x9D	; 157
    6e66:	ff 4f       	sbci	r31, 0xFF	; 255
    6e68:	80 81       	ld	r24, Z
    6e6a:	91 81       	ldd	r25, Z+1	; 0x01
    6e6c:	01 97       	sbiw	r24, 0x01	; 1
    6e6e:	f1 f7       	brne	.-4      	; 0x6e6c <main+0x1dc8>
    6e70:	fe 01       	movw	r30, r28
    6e72:	ed 59       	subi	r30, 0x9D	; 157
    6e74:	ff 4f       	sbci	r31, 0xFF	; 255
    6e76:	91 83       	std	Z+1, r25	; 0x01
    6e78:	80 83       	st	Z, r24
						_delay_ms(500);
					}
					Angle1 = 0;
    6e7a:	fe 01       	movw	r30, r28
    6e7c:	ef 5e       	subi	r30, 0xEF	; 239
    6e7e:	fe 4f       	sbci	r31, 0xFE	; 254
    6e80:	11 82       	std	Z+1, r1	; 0x01
    6e82:	10 82       	st	Z, r1
    6e84:	0c 94 4b 2c 	jmp	0x5896	; 0x5896 <main+0x7f2>
					break;
				case SERVO_MOTOR:
					SERVO_voidInit();
    6e88:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <SERVO_voidInit>
					SERVO_voidSetAngle(0);
    6e8c:	80 e0       	ldi	r24, 0x00	; 0
    6e8e:	90 e0       	ldi	r25, 0x00	; 0
    6e90:	0e 94 09 17 	call	0x2e12	; 0x2e12 <SERVO_voidSetAngle>
					CLCD_voidSendCommand(1);
    6e94:	81 e0       	ldi	r24, 0x01	; 1
    6e96:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
					CLCD_voidSendString("EnterAngle:   *C");
    6e9a:	84 e7       	ldi	r24, 0x74	; 116
    6e9c:	91 e0       	ldi	r25, 0x01	; 1
    6e9e:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
					CLCD_voidGoToXY(0,11);
    6ea2:	80 e0       	ldi	r24, 0x00	; 0
    6ea4:	6b e0       	ldi	r22, 0x0B	; 11
    6ea6:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>
					do{
						Keypress = KPD_u8Key_pressed();
    6eaa:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <KPD_u8Key_pressed>
    6eae:	fe 01       	movw	r30, r28
    6eb0:	e9 5e       	subi	r30, 0xE9	; 233
    6eb2:	fe 4f       	sbci	r31, 0xFE	; 254
    6eb4:	80 83       	st	Z, r24
						if((0<=Keypress)&&(Keypress<=9))
    6eb6:	fe 01       	movw	r30, r28
    6eb8:	e9 5e       	subi	r30, 0xE9	; 233
    6eba:	fe 4f       	sbci	r31, 0xFE	; 254
    6ebc:	80 81       	ld	r24, Z
    6ebe:	8a 30       	cpi	r24, 0x0A	; 10
    6ec0:	08 f0       	brcs	.+2      	; 0x6ec4 <main+0x1e20>
    6ec2:	49 c0       	rjmp	.+146    	; 0x6f56 <main+0x1eb2>
						{
							if(count<3)
    6ec4:	fe 01       	movw	r30, r28
    6ec6:	eb 5e       	subi	r30, 0xEB	; 235
    6ec8:	fe 4f       	sbci	r31, 0xFE	; 254
    6eca:	80 81       	ld	r24, Z
    6ecc:	83 30       	cpi	r24, 0x03	; 3
    6ece:	f4 f5       	brge	.+124    	; 0x6f4c <main+0x1ea8>
							{
								CLCD_voidWriteNumber(Keypress);
    6ed0:	fe 01       	movw	r30, r28
    6ed2:	e9 5e       	subi	r30, 0xE9	; 233
    6ed4:	fe 4f       	sbci	r31, 0xFE	; 254
    6ed6:	80 81       	ld	r24, Z
    6ed8:	88 2f       	mov	r24, r24
    6eda:	90 e0       	ldi	r25, 0x00	; 0
    6edc:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <CLCD_voidWriteNumber>
								Angle1 = Angle1*multi+Keypress ;
    6ee0:	fe 01       	movw	r30, r28
    6ee2:	ec 5e       	subi	r30, 0xEC	; 236
    6ee4:	fe 4f       	sbci	r31, 0xFE	; 254
    6ee6:	80 81       	ld	r24, Z
    6ee8:	28 2f       	mov	r18, r24
    6eea:	33 27       	eor	r19, r19
    6eec:	27 fd       	sbrc	r18, 7
    6eee:	30 95       	com	r19
    6ef0:	fe 01       	movw	r30, r28
    6ef2:	ef 5e       	subi	r30, 0xEF	; 239
    6ef4:	fe 4f       	sbci	r31, 0xFE	; 254
    6ef6:	80 81       	ld	r24, Z
    6ef8:	91 81       	ldd	r25, Z+1	; 0x01
    6efa:	a9 01       	movw	r20, r18
    6efc:	48 9f       	mul	r20, r24
    6efe:	90 01       	movw	r18, r0
    6f00:	49 9f       	mul	r20, r25
    6f02:	30 0d       	add	r19, r0
    6f04:	58 9f       	mul	r21, r24
    6f06:	30 0d       	add	r19, r0
    6f08:	11 24       	eor	r1, r1
    6f0a:	fe 01       	movw	r30, r28
    6f0c:	e9 5e       	subi	r30, 0xE9	; 233
    6f0e:	fe 4f       	sbci	r31, 0xFE	; 254
    6f10:	80 81       	ld	r24, Z
    6f12:	88 2f       	mov	r24, r24
    6f14:	90 e0       	ldi	r25, 0x00	; 0
    6f16:	fe 01       	movw	r30, r28
    6f18:	ef 5e       	subi	r30, 0xEF	; 239
    6f1a:	fe 4f       	sbci	r31, 0xFE	; 254
    6f1c:	82 0f       	add	r24, r18
    6f1e:	93 1f       	adc	r25, r19
    6f20:	91 83       	std	Z+1, r25	; 0x01
    6f22:	80 83       	st	Z, r24
								multi=10;
    6f24:	fe 01       	movw	r30, r28
    6f26:	ec 5e       	subi	r30, 0xEC	; 236
    6f28:	fe 4f       	sbci	r31, 0xFE	; 254
    6f2a:	8a e0       	ldi	r24, 0x0A	; 10
    6f2c:	80 83       	st	Z, r24
								count++;
    6f2e:	de 01       	movw	r26, r28
    6f30:	ab 5e       	subi	r26, 0xEB	; 235
    6f32:	be 4f       	sbci	r27, 0xFE	; 254
    6f34:	fe 01       	movw	r30, r28
    6f36:	eb 5e       	subi	r30, 0xEB	; 235
    6f38:	fe 4f       	sbci	r31, 0xFE	; 254
    6f3a:	80 81       	ld	r24, Z
    6f3c:	8f 5f       	subi	r24, 0xFF	; 255
    6f3e:	8c 93       	st	X, r24
								Keypress = KPD_NO_PRESSED_KEY;
    6f40:	fe 01       	movw	r30, r28
    6f42:	e9 5e       	subi	r30, 0xE9	; 233
    6f44:	fe 4f       	sbci	r31, 0xFE	; 254
    6f46:	8f ef       	ldi	r24, 0xFF	; 255
    6f48:	80 83       	st	Z, r24
    6f4a:	05 c0       	rjmp	.+10     	; 0x6f56 <main+0x1eb2>
							}
							else
								Keypress = KPD_NO_PRESSED_KEY;
    6f4c:	fe 01       	movw	r30, r28
    6f4e:	e9 5e       	subi	r30, 0xE9	; 233
    6f50:	fe 4f       	sbci	r31, 0xFE	; 254
    6f52:	8f ef       	ldi	r24, 0xFF	; 255
    6f54:	80 83       	st	Z, r24
						}
						if(Keypress == '=')
    6f56:	fe 01       	movw	r30, r28
    6f58:	e9 5e       	subi	r30, 0xE9	; 233
    6f5a:	fe 4f       	sbci	r31, 0xFE	; 254
    6f5c:	80 81       	ld	r24, Z
    6f5e:	8d 33       	cpi	r24, 0x3D	; 61
    6f60:	39 f0       	breq	.+14     	; 0x6f70 <main+0x1ecc>
							break;
					}while((Keypress == KPD_NO_PRESSED_KEY));
    6f62:	fe 01       	movw	r30, r28
    6f64:	e9 5e       	subi	r30, 0xE9	; 233
    6f66:	fe 4f       	sbci	r31, 0xFE	; 254
    6f68:	80 81       	ld	r24, Z
    6f6a:	8f 3f       	cpi	r24, 0xFF	; 255
    6f6c:	09 f4       	brne	.+2      	; 0x6f70 <main+0x1ecc>
    6f6e:	9d cf       	rjmp	.-198    	; 0x6eaa <main+0x1e06>
					count=0;
    6f70:	fe 01       	movw	r30, r28
    6f72:	eb 5e       	subi	r30, 0xEB	; 235
    6f74:	fe 4f       	sbci	r31, 0xFE	; 254
    6f76:	10 82       	st	Z, r1
					CLCD_voidSendCommand(1);
    6f78:	81 e0       	ldi	r24, 0x01	; 1
    6f7a:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
					CLCD_voidSendString("Motor Started");
    6f7e:	85 e8       	ldi	r24, 0x85	; 133
    6f80:	91 e0       	ldi	r25, 0x01	; 1
    6f82:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
					for(count =0; count<127;count++)
    6f86:	fe 01       	movw	r30, r28
    6f88:	eb 5e       	subi	r30, 0xEB	; 235
    6f8a:	fe 4f       	sbci	r31, 0xFE	; 254
    6f8c:	10 82       	st	Z, r1
    6f8e:	10 c0       	rjmp	.+32     	; 0x6fb0 <main+0x1f0c>
					SERVO_voidSetAngle(Angle1);
    6f90:	fe 01       	movw	r30, r28
    6f92:	ef 5e       	subi	r30, 0xEF	; 239
    6f94:	fe 4f       	sbci	r31, 0xFE	; 254
    6f96:	80 81       	ld	r24, Z
    6f98:	91 81       	ldd	r25, Z+1	; 0x01
    6f9a:	0e 94 09 17 	call	0x2e12	; 0x2e12 <SERVO_voidSetAngle>
							break;
					}while((Keypress == KPD_NO_PRESSED_KEY));
					count=0;
					CLCD_voidSendCommand(1);
					CLCD_voidSendString("Motor Started");
					for(count =0; count<127;count++)
    6f9e:	de 01       	movw	r26, r28
    6fa0:	ab 5e       	subi	r26, 0xEB	; 235
    6fa2:	be 4f       	sbci	r27, 0xFE	; 254
    6fa4:	fe 01       	movw	r30, r28
    6fa6:	eb 5e       	subi	r30, 0xEB	; 235
    6fa8:	fe 4f       	sbci	r31, 0xFE	; 254
    6faa:	80 81       	ld	r24, Z
    6fac:	8f 5f       	subi	r24, 0xFF	; 255
    6fae:	8c 93       	st	X, r24
    6fb0:	fe 01       	movw	r30, r28
    6fb2:	eb 5e       	subi	r30, 0xEB	; 235
    6fb4:	fe 4f       	sbci	r31, 0xFE	; 254
    6fb6:	80 81       	ld	r24, Z
    6fb8:	8f 37       	cpi	r24, 0x7F	; 127
    6fba:	51 f7       	brne	.-44     	; 0x6f90 <main+0x1eec>
					SERVO_voidSetAngle(Angle1);
					count = 0;
    6fbc:	fe 01       	movw	r30, r28
    6fbe:	eb 5e       	subi	r30, 0xEB	; 235
    6fc0:	fe 4f       	sbci	r31, 0xFE	; 254
    6fc2:	10 82       	st	Z, r1
    6fc4:	fe 01       	movw	r30, r28
    6fc6:	e1 5a       	subi	r30, 0xA1	; 161
    6fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    6fca:	80 e0       	ldi	r24, 0x00	; 0
    6fcc:	90 e0       	ldi	r25, 0x00	; 0
    6fce:	a8 ec       	ldi	r26, 0xC8	; 200
    6fd0:	b2 e4       	ldi	r27, 0x42	; 66
    6fd2:	80 83       	st	Z, r24
    6fd4:	91 83       	std	Z+1, r25	; 0x01
    6fd6:	a2 83       	std	Z+2, r26	; 0x02
    6fd8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6fda:	8e 01       	movw	r16, r28
    6fdc:	05 5a       	subi	r16, 0xA5	; 165
    6fde:	1f 4f       	sbci	r17, 0xFF	; 255
    6fe0:	fe 01       	movw	r30, r28
    6fe2:	e1 5a       	subi	r30, 0xA1	; 161
    6fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    6fe6:	60 81       	ld	r22, Z
    6fe8:	71 81       	ldd	r23, Z+1	; 0x01
    6fea:	82 81       	ldd	r24, Z+2	; 0x02
    6fec:	93 81       	ldd	r25, Z+3	; 0x03
    6fee:	20 e0       	ldi	r18, 0x00	; 0
    6ff0:	30 e0       	ldi	r19, 0x00	; 0
    6ff2:	4a ef       	ldi	r20, 0xFA	; 250
    6ff4:	54 e4       	ldi	r21, 0x44	; 68
    6ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6ffa:	dc 01       	movw	r26, r24
    6ffc:	cb 01       	movw	r24, r22
    6ffe:	f8 01       	movw	r30, r16
    7000:	80 83       	st	Z, r24
    7002:	91 83       	std	Z+1, r25	; 0x01
    7004:	a2 83       	std	Z+2, r26	; 0x02
    7006:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7008:	fe 01       	movw	r30, r28
    700a:	e5 5a       	subi	r30, 0xA5	; 165
    700c:	ff 4f       	sbci	r31, 0xFF	; 255
    700e:	60 81       	ld	r22, Z
    7010:	71 81       	ldd	r23, Z+1	; 0x01
    7012:	82 81       	ldd	r24, Z+2	; 0x02
    7014:	93 81       	ldd	r25, Z+3	; 0x03
    7016:	20 e0       	ldi	r18, 0x00	; 0
    7018:	30 e0       	ldi	r19, 0x00	; 0
    701a:	40 e8       	ldi	r20, 0x80	; 128
    701c:	5f e3       	ldi	r21, 0x3F	; 63
    701e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7022:	88 23       	and	r24, r24
    7024:	44 f4       	brge	.+16     	; 0x7036 <main+0x1f92>
		__ticks = 1;
    7026:	fe 01       	movw	r30, r28
    7028:	e7 5a       	subi	r30, 0xA7	; 167
    702a:	ff 4f       	sbci	r31, 0xFF	; 255
    702c:	81 e0       	ldi	r24, 0x01	; 1
    702e:	90 e0       	ldi	r25, 0x00	; 0
    7030:	91 83       	std	Z+1, r25	; 0x01
    7032:	80 83       	st	Z, r24
    7034:	64 c0       	rjmp	.+200    	; 0x70fe <main+0x205a>
	else if (__tmp > 65535)
    7036:	fe 01       	movw	r30, r28
    7038:	e5 5a       	subi	r30, 0xA5	; 165
    703a:	ff 4f       	sbci	r31, 0xFF	; 255
    703c:	60 81       	ld	r22, Z
    703e:	71 81       	ldd	r23, Z+1	; 0x01
    7040:	82 81       	ldd	r24, Z+2	; 0x02
    7042:	93 81       	ldd	r25, Z+3	; 0x03
    7044:	20 e0       	ldi	r18, 0x00	; 0
    7046:	3f ef       	ldi	r19, 0xFF	; 255
    7048:	4f e7       	ldi	r20, 0x7F	; 127
    704a:	57 e4       	ldi	r21, 0x47	; 71
    704c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7050:	18 16       	cp	r1, r24
    7052:	0c f0       	brlt	.+2      	; 0x7056 <main+0x1fb2>
    7054:	43 c0       	rjmp	.+134    	; 0x70dc <main+0x2038>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7056:	fe 01       	movw	r30, r28
    7058:	e1 5a       	subi	r30, 0xA1	; 161
    705a:	ff 4f       	sbci	r31, 0xFF	; 255
    705c:	60 81       	ld	r22, Z
    705e:	71 81       	ldd	r23, Z+1	; 0x01
    7060:	82 81       	ldd	r24, Z+2	; 0x02
    7062:	93 81       	ldd	r25, Z+3	; 0x03
    7064:	20 e0       	ldi	r18, 0x00	; 0
    7066:	30 e0       	ldi	r19, 0x00	; 0
    7068:	40 e2       	ldi	r20, 0x20	; 32
    706a:	51 e4       	ldi	r21, 0x41	; 65
    706c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7070:	dc 01       	movw	r26, r24
    7072:	cb 01       	movw	r24, r22
    7074:	8e 01       	movw	r16, r28
    7076:	07 5a       	subi	r16, 0xA7	; 167
    7078:	1f 4f       	sbci	r17, 0xFF	; 255
    707a:	bc 01       	movw	r22, r24
    707c:	cd 01       	movw	r24, r26
    707e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7082:	dc 01       	movw	r26, r24
    7084:	cb 01       	movw	r24, r22
    7086:	f8 01       	movw	r30, r16
    7088:	91 83       	std	Z+1, r25	; 0x01
    708a:	80 83       	st	Z, r24
    708c:	1f c0       	rjmp	.+62     	; 0x70cc <main+0x2028>
    708e:	fe 01       	movw	r30, r28
    7090:	e9 5a       	subi	r30, 0xA9	; 169
    7092:	ff 4f       	sbci	r31, 0xFF	; 255
    7094:	88 ec       	ldi	r24, 0xC8	; 200
    7096:	90 e0       	ldi	r25, 0x00	; 0
    7098:	91 83       	std	Z+1, r25	; 0x01
    709a:	80 83       	st	Z, r24
    709c:	fe 01       	movw	r30, r28
    709e:	e9 5a       	subi	r30, 0xA9	; 169
    70a0:	ff 4f       	sbci	r31, 0xFF	; 255
    70a2:	80 81       	ld	r24, Z
    70a4:	91 81       	ldd	r25, Z+1	; 0x01
    70a6:	01 97       	sbiw	r24, 0x01	; 1
    70a8:	f1 f7       	brne	.-4      	; 0x70a6 <main+0x2002>
    70aa:	fe 01       	movw	r30, r28
    70ac:	e9 5a       	subi	r30, 0xA9	; 169
    70ae:	ff 4f       	sbci	r31, 0xFF	; 255
    70b0:	91 83       	std	Z+1, r25	; 0x01
    70b2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    70b4:	de 01       	movw	r26, r28
    70b6:	a7 5a       	subi	r26, 0xA7	; 167
    70b8:	bf 4f       	sbci	r27, 0xFF	; 255
    70ba:	fe 01       	movw	r30, r28
    70bc:	e7 5a       	subi	r30, 0xA7	; 167
    70be:	ff 4f       	sbci	r31, 0xFF	; 255
    70c0:	80 81       	ld	r24, Z
    70c2:	91 81       	ldd	r25, Z+1	; 0x01
    70c4:	01 97       	sbiw	r24, 0x01	; 1
    70c6:	11 96       	adiw	r26, 0x01	; 1
    70c8:	9c 93       	st	X, r25
    70ca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    70cc:	fe 01       	movw	r30, r28
    70ce:	e7 5a       	subi	r30, 0xA7	; 167
    70d0:	ff 4f       	sbci	r31, 0xFF	; 255
    70d2:	80 81       	ld	r24, Z
    70d4:	91 81       	ldd	r25, Z+1	; 0x01
    70d6:	00 97       	sbiw	r24, 0x00	; 0
    70d8:	d1 f6       	brne	.-76     	; 0x708e <main+0x1fea>
    70da:	27 c0       	rjmp	.+78     	; 0x712a <main+0x2086>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    70dc:	8e 01       	movw	r16, r28
    70de:	07 5a       	subi	r16, 0xA7	; 167
    70e0:	1f 4f       	sbci	r17, 0xFF	; 255
    70e2:	fe 01       	movw	r30, r28
    70e4:	e5 5a       	subi	r30, 0xA5	; 165
    70e6:	ff 4f       	sbci	r31, 0xFF	; 255
    70e8:	60 81       	ld	r22, Z
    70ea:	71 81       	ldd	r23, Z+1	; 0x01
    70ec:	82 81       	ldd	r24, Z+2	; 0x02
    70ee:	93 81       	ldd	r25, Z+3	; 0x03
    70f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    70f4:	dc 01       	movw	r26, r24
    70f6:	cb 01       	movw	r24, r22
    70f8:	f8 01       	movw	r30, r16
    70fa:	91 83       	std	Z+1, r25	; 0x01
    70fc:	80 83       	st	Z, r24
    70fe:	de 01       	movw	r26, r28
    7100:	ab 5a       	subi	r26, 0xAB	; 171
    7102:	bf 4f       	sbci	r27, 0xFF	; 255
    7104:	fe 01       	movw	r30, r28
    7106:	e7 5a       	subi	r30, 0xA7	; 167
    7108:	ff 4f       	sbci	r31, 0xFF	; 255
    710a:	80 81       	ld	r24, Z
    710c:	91 81       	ldd	r25, Z+1	; 0x01
    710e:	8d 93       	st	X+, r24
    7110:	9c 93       	st	X, r25
    7112:	fe 01       	movw	r30, r28
    7114:	eb 5a       	subi	r30, 0xAB	; 171
    7116:	ff 4f       	sbci	r31, 0xFF	; 255
    7118:	80 81       	ld	r24, Z
    711a:	91 81       	ldd	r25, Z+1	; 0x01
    711c:	01 97       	sbiw	r24, 0x01	; 1
    711e:	f1 f7       	brne	.-4      	; 0x711c <main+0x2078>
    7120:	fe 01       	movw	r30, r28
    7122:	eb 5a       	subi	r30, 0xAB	; 171
    7124:	ff 4f       	sbci	r31, 0xFF	; 255
    7126:	91 83       	std	Z+1, r25	; 0x01
    7128:	80 83       	st	Z, r24
					_delay_ms(100);
					CLCD_voidSendCommand(1);
    712a:	81 e0       	ldi	r24, 0x01	; 1
    712c:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
					Angle1 = 0;
    7130:	fe 01       	movw	r30, r28
    7132:	ef 5e       	subi	r30, 0xEF	; 239
    7134:	fe 4f       	sbci	r31, 0xFE	; 254
    7136:	11 82       	std	Z+1, r1	; 0x01
    7138:	10 82       	st	Z, r1
    713a:	0c 94 4b 2c 	jmp	0x5896	; 0x5896 <main+0x7f2>
				}
			}
		}
		else
		{
			BackSpace=12;
    713e:	fe 01       	movw	r30, r28
    7140:	ed 5e       	subi	r30, 0xED	; 237
    7142:	fe 4f       	sbci	r31, 0xFE	; 254
    7144:	8c e0       	ldi	r24, 0x0C	; 12
    7146:	80 83       	st	Z, r24
			trials--;
    7148:	de 01       	movw	r26, r28
    714a:	aa 5e       	subi	r26, 0xEA	; 234
    714c:	be 4f       	sbci	r27, 0xFE	; 254
    714e:	fe 01       	movw	r30, r28
    7150:	ea 5e       	subi	r30, 0xEA	; 234
    7152:	fe 4f       	sbci	r31, 0xFE	; 254
    7154:	80 81       	ld	r24, Z
    7156:	81 50       	subi	r24, 0x01	; 1
    7158:	8c 93       	st	X, r24
			if(trials==0)
    715a:	fe 01       	movw	r30, r28
    715c:	ea 5e       	subi	r30, 0xEA	; 234
    715e:	fe 4f       	sbci	r31, 0xFE	; 254
    7160:	80 81       	ld	r24, Z
    7162:	88 23       	and	r24, r24
    7164:	09 f0       	breq	.+2      	; 0x7168 <main+0x20c4>
    7166:	c2 c2       	rjmp	.+1412   	; 0x76ec <main+0x2648>
			{
				CLCD_voidSendCommand(1);
    7168:	81 e0       	ldi	r24, 0x01	; 1
    716a:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
				CLCD_voidSendString("    ShutDown");
    716e:	81 ea       	ldi	r24, 0xA1	; 161
    7170:	91 e0       	ldi	r25, 0x01	; 1
    7172:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
				CLCD_voidGoToXY(1,9);
    7176:	81 e0       	ldi	r24, 0x01	; 1
    7178:	69 e0       	ldi	r22, 0x09	; 9
    717a:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>
				CLCD_voidSendData('3');
    717e:	83 e3       	ldi	r24, 0x33	; 51
    7180:	0e 94 41 0b 	call	0x1682	; 0x1682 <CLCD_voidSendData>
    7184:	fe 01       	movw	r30, r28
    7186:	ef 5a       	subi	r30, 0xAF	; 175
    7188:	ff 4f       	sbci	r31, 0xFF	; 255
    718a:	80 e0       	ldi	r24, 0x00	; 0
    718c:	90 e0       	ldi	r25, 0x00	; 0
    718e:	aa ef       	ldi	r26, 0xFA	; 250
    7190:	b3 e4       	ldi	r27, 0x43	; 67
    7192:	80 83       	st	Z, r24
    7194:	91 83       	std	Z+1, r25	; 0x01
    7196:	a2 83       	std	Z+2, r26	; 0x02
    7198:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    719a:	8e 01       	movw	r16, r28
    719c:	03 5b       	subi	r16, 0xB3	; 179
    719e:	1f 4f       	sbci	r17, 0xFF	; 255
    71a0:	fe 01       	movw	r30, r28
    71a2:	ef 5a       	subi	r30, 0xAF	; 175
    71a4:	ff 4f       	sbci	r31, 0xFF	; 255
    71a6:	60 81       	ld	r22, Z
    71a8:	71 81       	ldd	r23, Z+1	; 0x01
    71aa:	82 81       	ldd	r24, Z+2	; 0x02
    71ac:	93 81       	ldd	r25, Z+3	; 0x03
    71ae:	20 e0       	ldi	r18, 0x00	; 0
    71b0:	30 e0       	ldi	r19, 0x00	; 0
    71b2:	4a ef       	ldi	r20, 0xFA	; 250
    71b4:	54 e4       	ldi	r21, 0x44	; 68
    71b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    71ba:	dc 01       	movw	r26, r24
    71bc:	cb 01       	movw	r24, r22
    71be:	f8 01       	movw	r30, r16
    71c0:	80 83       	st	Z, r24
    71c2:	91 83       	std	Z+1, r25	; 0x01
    71c4:	a2 83       	std	Z+2, r26	; 0x02
    71c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    71c8:	fe 01       	movw	r30, r28
    71ca:	e3 5b       	subi	r30, 0xB3	; 179
    71cc:	ff 4f       	sbci	r31, 0xFF	; 255
    71ce:	60 81       	ld	r22, Z
    71d0:	71 81       	ldd	r23, Z+1	; 0x01
    71d2:	82 81       	ldd	r24, Z+2	; 0x02
    71d4:	93 81       	ldd	r25, Z+3	; 0x03
    71d6:	20 e0       	ldi	r18, 0x00	; 0
    71d8:	30 e0       	ldi	r19, 0x00	; 0
    71da:	40 e8       	ldi	r20, 0x80	; 128
    71dc:	5f e3       	ldi	r21, 0x3F	; 63
    71de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    71e2:	88 23       	and	r24, r24
    71e4:	44 f4       	brge	.+16     	; 0x71f6 <main+0x2152>
		__ticks = 1;
    71e6:	fe 01       	movw	r30, r28
    71e8:	e5 5b       	subi	r30, 0xB5	; 181
    71ea:	ff 4f       	sbci	r31, 0xFF	; 255
    71ec:	81 e0       	ldi	r24, 0x01	; 1
    71ee:	90 e0       	ldi	r25, 0x00	; 0
    71f0:	91 83       	std	Z+1, r25	; 0x01
    71f2:	80 83       	st	Z, r24
    71f4:	64 c0       	rjmp	.+200    	; 0x72be <main+0x221a>
	else if (__tmp > 65535)
    71f6:	fe 01       	movw	r30, r28
    71f8:	e3 5b       	subi	r30, 0xB3	; 179
    71fa:	ff 4f       	sbci	r31, 0xFF	; 255
    71fc:	60 81       	ld	r22, Z
    71fe:	71 81       	ldd	r23, Z+1	; 0x01
    7200:	82 81       	ldd	r24, Z+2	; 0x02
    7202:	93 81       	ldd	r25, Z+3	; 0x03
    7204:	20 e0       	ldi	r18, 0x00	; 0
    7206:	3f ef       	ldi	r19, 0xFF	; 255
    7208:	4f e7       	ldi	r20, 0x7F	; 127
    720a:	57 e4       	ldi	r21, 0x47	; 71
    720c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7210:	18 16       	cp	r1, r24
    7212:	0c f0       	brlt	.+2      	; 0x7216 <main+0x2172>
    7214:	43 c0       	rjmp	.+134    	; 0x729c <main+0x21f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7216:	fe 01       	movw	r30, r28
    7218:	ef 5a       	subi	r30, 0xAF	; 175
    721a:	ff 4f       	sbci	r31, 0xFF	; 255
    721c:	60 81       	ld	r22, Z
    721e:	71 81       	ldd	r23, Z+1	; 0x01
    7220:	82 81       	ldd	r24, Z+2	; 0x02
    7222:	93 81       	ldd	r25, Z+3	; 0x03
    7224:	20 e0       	ldi	r18, 0x00	; 0
    7226:	30 e0       	ldi	r19, 0x00	; 0
    7228:	40 e2       	ldi	r20, 0x20	; 32
    722a:	51 e4       	ldi	r21, 0x41	; 65
    722c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7230:	dc 01       	movw	r26, r24
    7232:	cb 01       	movw	r24, r22
    7234:	8e 01       	movw	r16, r28
    7236:	05 5b       	subi	r16, 0xB5	; 181
    7238:	1f 4f       	sbci	r17, 0xFF	; 255
    723a:	bc 01       	movw	r22, r24
    723c:	cd 01       	movw	r24, r26
    723e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7242:	dc 01       	movw	r26, r24
    7244:	cb 01       	movw	r24, r22
    7246:	f8 01       	movw	r30, r16
    7248:	91 83       	std	Z+1, r25	; 0x01
    724a:	80 83       	st	Z, r24
    724c:	1f c0       	rjmp	.+62     	; 0x728c <main+0x21e8>
    724e:	fe 01       	movw	r30, r28
    7250:	e7 5b       	subi	r30, 0xB7	; 183
    7252:	ff 4f       	sbci	r31, 0xFF	; 255
    7254:	88 ec       	ldi	r24, 0xC8	; 200
    7256:	90 e0       	ldi	r25, 0x00	; 0
    7258:	91 83       	std	Z+1, r25	; 0x01
    725a:	80 83       	st	Z, r24
    725c:	fe 01       	movw	r30, r28
    725e:	e7 5b       	subi	r30, 0xB7	; 183
    7260:	ff 4f       	sbci	r31, 0xFF	; 255
    7262:	80 81       	ld	r24, Z
    7264:	91 81       	ldd	r25, Z+1	; 0x01
    7266:	01 97       	sbiw	r24, 0x01	; 1
    7268:	f1 f7       	brne	.-4      	; 0x7266 <main+0x21c2>
    726a:	fe 01       	movw	r30, r28
    726c:	e7 5b       	subi	r30, 0xB7	; 183
    726e:	ff 4f       	sbci	r31, 0xFF	; 255
    7270:	91 83       	std	Z+1, r25	; 0x01
    7272:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7274:	de 01       	movw	r26, r28
    7276:	a5 5b       	subi	r26, 0xB5	; 181
    7278:	bf 4f       	sbci	r27, 0xFF	; 255
    727a:	fe 01       	movw	r30, r28
    727c:	e5 5b       	subi	r30, 0xB5	; 181
    727e:	ff 4f       	sbci	r31, 0xFF	; 255
    7280:	80 81       	ld	r24, Z
    7282:	91 81       	ldd	r25, Z+1	; 0x01
    7284:	01 97       	sbiw	r24, 0x01	; 1
    7286:	11 96       	adiw	r26, 0x01	; 1
    7288:	9c 93       	st	X, r25
    728a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    728c:	fe 01       	movw	r30, r28
    728e:	e5 5b       	subi	r30, 0xB5	; 181
    7290:	ff 4f       	sbci	r31, 0xFF	; 255
    7292:	80 81       	ld	r24, Z
    7294:	91 81       	ldd	r25, Z+1	; 0x01
    7296:	00 97       	sbiw	r24, 0x00	; 0
    7298:	d1 f6       	brne	.-76     	; 0x724e <main+0x21aa>
    729a:	27 c0       	rjmp	.+78     	; 0x72ea <main+0x2246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    729c:	8e 01       	movw	r16, r28
    729e:	05 5b       	subi	r16, 0xB5	; 181
    72a0:	1f 4f       	sbci	r17, 0xFF	; 255
    72a2:	fe 01       	movw	r30, r28
    72a4:	e3 5b       	subi	r30, 0xB3	; 179
    72a6:	ff 4f       	sbci	r31, 0xFF	; 255
    72a8:	60 81       	ld	r22, Z
    72aa:	71 81       	ldd	r23, Z+1	; 0x01
    72ac:	82 81       	ldd	r24, Z+2	; 0x02
    72ae:	93 81       	ldd	r25, Z+3	; 0x03
    72b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    72b4:	dc 01       	movw	r26, r24
    72b6:	cb 01       	movw	r24, r22
    72b8:	f8 01       	movw	r30, r16
    72ba:	91 83       	std	Z+1, r25	; 0x01
    72bc:	80 83       	st	Z, r24
    72be:	de 01       	movw	r26, r28
    72c0:	a9 5b       	subi	r26, 0xB9	; 185
    72c2:	bf 4f       	sbci	r27, 0xFF	; 255
    72c4:	fe 01       	movw	r30, r28
    72c6:	e5 5b       	subi	r30, 0xB5	; 181
    72c8:	ff 4f       	sbci	r31, 0xFF	; 255
    72ca:	80 81       	ld	r24, Z
    72cc:	91 81       	ldd	r25, Z+1	; 0x01
    72ce:	8d 93       	st	X+, r24
    72d0:	9c 93       	st	X, r25
    72d2:	fe 01       	movw	r30, r28
    72d4:	e9 5b       	subi	r30, 0xB9	; 185
    72d6:	ff 4f       	sbci	r31, 0xFF	; 255
    72d8:	80 81       	ld	r24, Z
    72da:	91 81       	ldd	r25, Z+1	; 0x01
    72dc:	01 97       	sbiw	r24, 0x01	; 1
    72de:	f1 f7       	brne	.-4      	; 0x72dc <main+0x2238>
    72e0:	fe 01       	movw	r30, r28
    72e2:	e9 5b       	subi	r30, 0xB9	; 185
    72e4:	ff 4f       	sbci	r31, 0xFF	; 255
    72e6:	91 83       	std	Z+1, r25	; 0x01
    72e8:	80 83       	st	Z, r24
				_delay_ms(500);
				CLCD_voidGoToXY(1,9);
    72ea:	81 e0       	ldi	r24, 0x01	; 1
    72ec:	69 e0       	ldi	r22, 0x09	; 9
    72ee:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>
				CLCD_voidSendData('2');
    72f2:	82 e3       	ldi	r24, 0x32	; 50
    72f4:	0e 94 41 0b 	call	0x1682	; 0x1682 <CLCD_voidSendData>
    72f8:	fe 01       	movw	r30, r28
    72fa:	ed 5b       	subi	r30, 0xBD	; 189
    72fc:	ff 4f       	sbci	r31, 0xFF	; 255
    72fe:	80 e0       	ldi	r24, 0x00	; 0
    7300:	90 e0       	ldi	r25, 0x00	; 0
    7302:	aa ef       	ldi	r26, 0xFA	; 250
    7304:	b3 e4       	ldi	r27, 0x43	; 67
    7306:	80 83       	st	Z, r24
    7308:	91 83       	std	Z+1, r25	; 0x01
    730a:	a2 83       	std	Z+2, r26	; 0x02
    730c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    730e:	8e 01       	movw	r16, r28
    7310:	01 5c       	subi	r16, 0xC1	; 193
    7312:	1f 4f       	sbci	r17, 0xFF	; 255
    7314:	fe 01       	movw	r30, r28
    7316:	ed 5b       	subi	r30, 0xBD	; 189
    7318:	ff 4f       	sbci	r31, 0xFF	; 255
    731a:	60 81       	ld	r22, Z
    731c:	71 81       	ldd	r23, Z+1	; 0x01
    731e:	82 81       	ldd	r24, Z+2	; 0x02
    7320:	93 81       	ldd	r25, Z+3	; 0x03
    7322:	20 e0       	ldi	r18, 0x00	; 0
    7324:	30 e0       	ldi	r19, 0x00	; 0
    7326:	4a ef       	ldi	r20, 0xFA	; 250
    7328:	54 e4       	ldi	r21, 0x44	; 68
    732a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    732e:	dc 01       	movw	r26, r24
    7330:	cb 01       	movw	r24, r22
    7332:	f8 01       	movw	r30, r16
    7334:	80 83       	st	Z, r24
    7336:	91 83       	std	Z+1, r25	; 0x01
    7338:	a2 83       	std	Z+2, r26	; 0x02
    733a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    733c:	fe 01       	movw	r30, r28
    733e:	ff 96       	adiw	r30, 0x3f	; 63
    7340:	60 81       	ld	r22, Z
    7342:	71 81       	ldd	r23, Z+1	; 0x01
    7344:	82 81       	ldd	r24, Z+2	; 0x02
    7346:	93 81       	ldd	r25, Z+3	; 0x03
    7348:	20 e0       	ldi	r18, 0x00	; 0
    734a:	30 e0       	ldi	r19, 0x00	; 0
    734c:	40 e8       	ldi	r20, 0x80	; 128
    734e:	5f e3       	ldi	r21, 0x3F	; 63
    7350:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7354:	88 23       	and	r24, r24
    7356:	2c f4       	brge	.+10     	; 0x7362 <main+0x22be>
		__ticks = 1;
    7358:	81 e0       	ldi	r24, 0x01	; 1
    735a:	90 e0       	ldi	r25, 0x00	; 0
    735c:	9e af       	std	Y+62, r25	; 0x3e
    735e:	8d af       	std	Y+61, r24	; 0x3d
    7360:	46 c0       	rjmp	.+140    	; 0x73ee <main+0x234a>
	else if (__tmp > 65535)
    7362:	fe 01       	movw	r30, r28
    7364:	ff 96       	adiw	r30, 0x3f	; 63
    7366:	60 81       	ld	r22, Z
    7368:	71 81       	ldd	r23, Z+1	; 0x01
    736a:	82 81       	ldd	r24, Z+2	; 0x02
    736c:	93 81       	ldd	r25, Z+3	; 0x03
    736e:	20 e0       	ldi	r18, 0x00	; 0
    7370:	3f ef       	ldi	r19, 0xFF	; 255
    7372:	4f e7       	ldi	r20, 0x7F	; 127
    7374:	57 e4       	ldi	r21, 0x47	; 71
    7376:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    737a:	18 16       	cp	r1, r24
    737c:	64 f5       	brge	.+88     	; 0x73d6 <main+0x2332>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    737e:	fe 01       	movw	r30, r28
    7380:	ed 5b       	subi	r30, 0xBD	; 189
    7382:	ff 4f       	sbci	r31, 0xFF	; 255
    7384:	60 81       	ld	r22, Z
    7386:	71 81       	ldd	r23, Z+1	; 0x01
    7388:	82 81       	ldd	r24, Z+2	; 0x02
    738a:	93 81       	ldd	r25, Z+3	; 0x03
    738c:	20 e0       	ldi	r18, 0x00	; 0
    738e:	30 e0       	ldi	r19, 0x00	; 0
    7390:	40 e2       	ldi	r20, 0x20	; 32
    7392:	51 e4       	ldi	r21, 0x41	; 65
    7394:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7398:	dc 01       	movw	r26, r24
    739a:	cb 01       	movw	r24, r22
    739c:	bc 01       	movw	r22, r24
    739e:	cd 01       	movw	r24, r26
    73a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    73a4:	dc 01       	movw	r26, r24
    73a6:	cb 01       	movw	r24, r22
    73a8:	9e af       	std	Y+62, r25	; 0x3e
    73aa:	8d af       	std	Y+61, r24	; 0x3d
    73ac:	0f c0       	rjmp	.+30     	; 0x73cc <main+0x2328>
    73ae:	88 ec       	ldi	r24, 0xC8	; 200
    73b0:	90 e0       	ldi	r25, 0x00	; 0
    73b2:	9c af       	std	Y+60, r25	; 0x3c
    73b4:	8b af       	std	Y+59, r24	; 0x3b
    73b6:	8b ad       	ldd	r24, Y+59	; 0x3b
    73b8:	9c ad       	ldd	r25, Y+60	; 0x3c
    73ba:	01 97       	sbiw	r24, 0x01	; 1
    73bc:	f1 f7       	brne	.-4      	; 0x73ba <main+0x2316>
    73be:	9c af       	std	Y+60, r25	; 0x3c
    73c0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    73c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    73c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    73c6:	01 97       	sbiw	r24, 0x01	; 1
    73c8:	9e af       	std	Y+62, r25	; 0x3e
    73ca:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    73cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    73ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    73d0:	00 97       	sbiw	r24, 0x00	; 0
    73d2:	69 f7       	brne	.-38     	; 0x73ae <main+0x230a>
    73d4:	16 c0       	rjmp	.+44     	; 0x7402 <main+0x235e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    73d6:	fe 01       	movw	r30, r28
    73d8:	ff 96       	adiw	r30, 0x3f	; 63
    73da:	60 81       	ld	r22, Z
    73dc:	71 81       	ldd	r23, Z+1	; 0x01
    73de:	82 81       	ldd	r24, Z+2	; 0x02
    73e0:	93 81       	ldd	r25, Z+3	; 0x03
    73e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    73e6:	dc 01       	movw	r26, r24
    73e8:	cb 01       	movw	r24, r22
    73ea:	9e af       	std	Y+62, r25	; 0x3e
    73ec:	8d af       	std	Y+61, r24	; 0x3d
    73ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    73f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    73f2:	9a af       	std	Y+58, r25	; 0x3a
    73f4:	89 af       	std	Y+57, r24	; 0x39
    73f6:	89 ad       	ldd	r24, Y+57	; 0x39
    73f8:	9a ad       	ldd	r25, Y+58	; 0x3a
    73fa:	01 97       	sbiw	r24, 0x01	; 1
    73fc:	f1 f7       	brne	.-4      	; 0x73fa <main+0x2356>
    73fe:	9a af       	std	Y+58, r25	; 0x3a
    7400:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(500);
				CLCD_voidGoToXY(1,9);
    7402:	81 e0       	ldi	r24, 0x01	; 1
    7404:	69 e0       	ldi	r22, 0x09	; 9
    7406:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>
				CLCD_voidSendData('1');
    740a:	81 e3       	ldi	r24, 0x31	; 49
    740c:	0e 94 41 0b 	call	0x1682	; 0x1682 <CLCD_voidSendData>
    7410:	80 e0       	ldi	r24, 0x00	; 0
    7412:	90 e0       	ldi	r25, 0x00	; 0
    7414:	aa ef       	ldi	r26, 0xFA	; 250
    7416:	b3 e4       	ldi	r27, 0x43	; 67
    7418:	8d ab       	std	Y+53, r24	; 0x35
    741a:	9e ab       	std	Y+54, r25	; 0x36
    741c:	af ab       	std	Y+55, r26	; 0x37
    741e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7420:	6d a9       	ldd	r22, Y+53	; 0x35
    7422:	7e a9       	ldd	r23, Y+54	; 0x36
    7424:	8f a9       	ldd	r24, Y+55	; 0x37
    7426:	98 ad       	ldd	r25, Y+56	; 0x38
    7428:	20 e0       	ldi	r18, 0x00	; 0
    742a:	30 e0       	ldi	r19, 0x00	; 0
    742c:	4a ef       	ldi	r20, 0xFA	; 250
    742e:	54 e4       	ldi	r21, 0x44	; 68
    7430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7434:	dc 01       	movw	r26, r24
    7436:	cb 01       	movw	r24, r22
    7438:	89 ab       	std	Y+49, r24	; 0x31
    743a:	9a ab       	std	Y+50, r25	; 0x32
    743c:	ab ab       	std	Y+51, r26	; 0x33
    743e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    7440:	69 a9       	ldd	r22, Y+49	; 0x31
    7442:	7a a9       	ldd	r23, Y+50	; 0x32
    7444:	8b a9       	ldd	r24, Y+51	; 0x33
    7446:	9c a9       	ldd	r25, Y+52	; 0x34
    7448:	20 e0       	ldi	r18, 0x00	; 0
    744a:	30 e0       	ldi	r19, 0x00	; 0
    744c:	40 e8       	ldi	r20, 0x80	; 128
    744e:	5f e3       	ldi	r21, 0x3F	; 63
    7450:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7454:	88 23       	and	r24, r24
    7456:	2c f4       	brge	.+10     	; 0x7462 <main+0x23be>
		__ticks = 1;
    7458:	81 e0       	ldi	r24, 0x01	; 1
    745a:	90 e0       	ldi	r25, 0x00	; 0
    745c:	98 ab       	std	Y+48, r25	; 0x30
    745e:	8f a7       	std	Y+47, r24	; 0x2f
    7460:	3f c0       	rjmp	.+126    	; 0x74e0 <main+0x243c>
	else if (__tmp > 65535)
    7462:	69 a9       	ldd	r22, Y+49	; 0x31
    7464:	7a a9       	ldd	r23, Y+50	; 0x32
    7466:	8b a9       	ldd	r24, Y+51	; 0x33
    7468:	9c a9       	ldd	r25, Y+52	; 0x34
    746a:	20 e0       	ldi	r18, 0x00	; 0
    746c:	3f ef       	ldi	r19, 0xFF	; 255
    746e:	4f e7       	ldi	r20, 0x7F	; 127
    7470:	57 e4       	ldi	r21, 0x47	; 71
    7472:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7476:	18 16       	cp	r1, r24
    7478:	4c f5       	brge	.+82     	; 0x74cc <main+0x2428>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    747a:	6d a9       	ldd	r22, Y+53	; 0x35
    747c:	7e a9       	ldd	r23, Y+54	; 0x36
    747e:	8f a9       	ldd	r24, Y+55	; 0x37
    7480:	98 ad       	ldd	r25, Y+56	; 0x38
    7482:	20 e0       	ldi	r18, 0x00	; 0
    7484:	30 e0       	ldi	r19, 0x00	; 0
    7486:	40 e2       	ldi	r20, 0x20	; 32
    7488:	51 e4       	ldi	r21, 0x41	; 65
    748a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    748e:	dc 01       	movw	r26, r24
    7490:	cb 01       	movw	r24, r22
    7492:	bc 01       	movw	r22, r24
    7494:	cd 01       	movw	r24, r26
    7496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    749a:	dc 01       	movw	r26, r24
    749c:	cb 01       	movw	r24, r22
    749e:	98 ab       	std	Y+48, r25	; 0x30
    74a0:	8f a7       	std	Y+47, r24	; 0x2f
    74a2:	0f c0       	rjmp	.+30     	; 0x74c2 <main+0x241e>
    74a4:	88 ec       	ldi	r24, 0xC8	; 200
    74a6:	90 e0       	ldi	r25, 0x00	; 0
    74a8:	9e a7       	std	Y+46, r25	; 0x2e
    74aa:	8d a7       	std	Y+45, r24	; 0x2d
    74ac:	8d a5       	ldd	r24, Y+45	; 0x2d
    74ae:	9e a5       	ldd	r25, Y+46	; 0x2e
    74b0:	01 97       	sbiw	r24, 0x01	; 1
    74b2:	f1 f7       	brne	.-4      	; 0x74b0 <main+0x240c>
    74b4:	9e a7       	std	Y+46, r25	; 0x2e
    74b6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    74b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    74ba:	98 a9       	ldd	r25, Y+48	; 0x30
    74bc:	01 97       	sbiw	r24, 0x01	; 1
    74be:	98 ab       	std	Y+48, r25	; 0x30
    74c0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    74c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    74c4:	98 a9       	ldd	r25, Y+48	; 0x30
    74c6:	00 97       	sbiw	r24, 0x00	; 0
    74c8:	69 f7       	brne	.-38     	; 0x74a4 <main+0x2400>
    74ca:	14 c0       	rjmp	.+40     	; 0x74f4 <main+0x2450>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    74cc:	69 a9       	ldd	r22, Y+49	; 0x31
    74ce:	7a a9       	ldd	r23, Y+50	; 0x32
    74d0:	8b a9       	ldd	r24, Y+51	; 0x33
    74d2:	9c a9       	ldd	r25, Y+52	; 0x34
    74d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    74d8:	dc 01       	movw	r26, r24
    74da:	cb 01       	movw	r24, r22
    74dc:	98 ab       	std	Y+48, r25	; 0x30
    74de:	8f a7       	std	Y+47, r24	; 0x2f
    74e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    74e2:	98 a9       	ldd	r25, Y+48	; 0x30
    74e4:	9c a7       	std	Y+44, r25	; 0x2c
    74e6:	8b a7       	std	Y+43, r24	; 0x2b
    74e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    74ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    74ec:	01 97       	sbiw	r24, 0x01	; 1
    74ee:	f1 f7       	brne	.-4      	; 0x74ec <main+0x2448>
    74f0:	9c a7       	std	Y+44, r25	; 0x2c
    74f2:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(500);
				CLCD_voidSendCommand(1);
    74f4:	81 e0       	ldi	r24, 0x01	; 1
    74f6:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
				trials = 3;
    74fa:	fe 01       	movw	r30, r28
    74fc:	ea 5e       	subi	r30, 0xEA	; 234
    74fe:	fe 4f       	sbci	r31, 0xFE	; 254
    7500:	83 e0       	ldi	r24, 0x03	; 3
    7502:	80 83       	st	Z, r24
				multiplier=1;
    7504:	fe 01       	movw	r30, r28
    7506:	e5 5f       	subi	r30, 0xF5	; 245
    7508:	fe 4f       	sbci	r31, 0xFE	; 254
    750a:	81 e0       	ldi	r24, 0x01	; 1
    750c:	90 e0       	ldi	r25, 0x00	; 0
    750e:	91 83       	std	Z+1, r25	; 0x01
    7510:	80 83       	st	Z, r24
				Enter_password = 0;
    7512:	fe 01       	movw	r30, r28
    7514:	e1 5f       	subi	r30, 0xF1	; 241
    7516:	fe 4f       	sbci	r31, 0xFE	; 254
    7518:	11 82       	std	Z+1, r1	; 0x01
    751a:	10 82       	st	Z, r1
    751c:	80 e0       	ldi	r24, 0x00	; 0
    751e:	90 e0       	ldi	r25, 0x00	; 0
    7520:	aa ef       	ldi	r26, 0xFA	; 250
    7522:	b3 e4       	ldi	r27, 0x43	; 67
    7524:	8f a3       	std	Y+39, r24	; 0x27
    7526:	98 a7       	std	Y+40, r25	; 0x28
    7528:	a9 a7       	std	Y+41, r26	; 0x29
    752a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    752c:	6f a1       	ldd	r22, Y+39	; 0x27
    752e:	78 a5       	ldd	r23, Y+40	; 0x28
    7530:	89 a5       	ldd	r24, Y+41	; 0x29
    7532:	9a a5       	ldd	r25, Y+42	; 0x2a
    7534:	20 e0       	ldi	r18, 0x00	; 0
    7536:	30 e0       	ldi	r19, 0x00	; 0
    7538:	4a ef       	ldi	r20, 0xFA	; 250
    753a:	54 e4       	ldi	r21, 0x44	; 68
    753c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7540:	dc 01       	movw	r26, r24
    7542:	cb 01       	movw	r24, r22
    7544:	8b a3       	std	Y+35, r24	; 0x23
    7546:	9c a3       	std	Y+36, r25	; 0x24
    7548:	ad a3       	std	Y+37, r26	; 0x25
    754a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    754c:	6b a1       	ldd	r22, Y+35	; 0x23
    754e:	7c a1       	ldd	r23, Y+36	; 0x24
    7550:	8d a1       	ldd	r24, Y+37	; 0x25
    7552:	9e a1       	ldd	r25, Y+38	; 0x26
    7554:	20 e0       	ldi	r18, 0x00	; 0
    7556:	30 e0       	ldi	r19, 0x00	; 0
    7558:	40 e8       	ldi	r20, 0x80	; 128
    755a:	5f e3       	ldi	r21, 0x3F	; 63
    755c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7560:	88 23       	and	r24, r24
    7562:	2c f4       	brge	.+10     	; 0x756e <main+0x24ca>
		__ticks = 1;
    7564:	81 e0       	ldi	r24, 0x01	; 1
    7566:	90 e0       	ldi	r25, 0x00	; 0
    7568:	9a a3       	std	Y+34, r25	; 0x22
    756a:	89 a3       	std	Y+33, r24	; 0x21
    756c:	3f c0       	rjmp	.+126    	; 0x75ec <main+0x2548>
	else if (__tmp > 65535)
    756e:	6b a1       	ldd	r22, Y+35	; 0x23
    7570:	7c a1       	ldd	r23, Y+36	; 0x24
    7572:	8d a1       	ldd	r24, Y+37	; 0x25
    7574:	9e a1       	ldd	r25, Y+38	; 0x26
    7576:	20 e0       	ldi	r18, 0x00	; 0
    7578:	3f ef       	ldi	r19, 0xFF	; 255
    757a:	4f e7       	ldi	r20, 0x7F	; 127
    757c:	57 e4       	ldi	r21, 0x47	; 71
    757e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7582:	18 16       	cp	r1, r24
    7584:	4c f5       	brge	.+82     	; 0x75d8 <main+0x2534>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7586:	6f a1       	ldd	r22, Y+39	; 0x27
    7588:	78 a5       	ldd	r23, Y+40	; 0x28
    758a:	89 a5       	ldd	r24, Y+41	; 0x29
    758c:	9a a5       	ldd	r25, Y+42	; 0x2a
    758e:	20 e0       	ldi	r18, 0x00	; 0
    7590:	30 e0       	ldi	r19, 0x00	; 0
    7592:	40 e2       	ldi	r20, 0x20	; 32
    7594:	51 e4       	ldi	r21, 0x41	; 65
    7596:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    759a:	dc 01       	movw	r26, r24
    759c:	cb 01       	movw	r24, r22
    759e:	bc 01       	movw	r22, r24
    75a0:	cd 01       	movw	r24, r26
    75a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    75a6:	dc 01       	movw	r26, r24
    75a8:	cb 01       	movw	r24, r22
    75aa:	9a a3       	std	Y+34, r25	; 0x22
    75ac:	89 a3       	std	Y+33, r24	; 0x21
    75ae:	0f c0       	rjmp	.+30     	; 0x75ce <main+0x252a>
    75b0:	88 ec       	ldi	r24, 0xC8	; 200
    75b2:	90 e0       	ldi	r25, 0x00	; 0
    75b4:	98 a3       	std	Y+32, r25	; 0x20
    75b6:	8f 8f       	std	Y+31, r24	; 0x1f
    75b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    75ba:	98 a1       	ldd	r25, Y+32	; 0x20
    75bc:	01 97       	sbiw	r24, 0x01	; 1
    75be:	f1 f7       	brne	.-4      	; 0x75bc <main+0x2518>
    75c0:	98 a3       	std	Y+32, r25	; 0x20
    75c2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    75c4:	89 a1       	ldd	r24, Y+33	; 0x21
    75c6:	9a a1       	ldd	r25, Y+34	; 0x22
    75c8:	01 97       	sbiw	r24, 0x01	; 1
    75ca:	9a a3       	std	Y+34, r25	; 0x22
    75cc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    75ce:	89 a1       	ldd	r24, Y+33	; 0x21
    75d0:	9a a1       	ldd	r25, Y+34	; 0x22
    75d2:	00 97       	sbiw	r24, 0x00	; 0
    75d4:	69 f7       	brne	.-38     	; 0x75b0 <main+0x250c>
    75d6:	14 c0       	rjmp	.+40     	; 0x7600 <main+0x255c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    75d8:	6b a1       	ldd	r22, Y+35	; 0x23
    75da:	7c a1       	ldd	r23, Y+36	; 0x24
    75dc:	8d a1       	ldd	r24, Y+37	; 0x25
    75de:	9e a1       	ldd	r25, Y+38	; 0x26
    75e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    75e4:	dc 01       	movw	r26, r24
    75e6:	cb 01       	movw	r24, r22
    75e8:	9a a3       	std	Y+34, r25	; 0x22
    75ea:	89 a3       	std	Y+33, r24	; 0x21
    75ec:	89 a1       	ldd	r24, Y+33	; 0x21
    75ee:	9a a1       	ldd	r25, Y+34	; 0x22
    75f0:	9e 8f       	std	Y+30, r25	; 0x1e
    75f2:	8d 8f       	std	Y+29, r24	; 0x1d
    75f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    75f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    75f8:	01 97       	sbiw	r24, 0x01	; 1
    75fa:	f1 f7       	brne	.-4      	; 0x75f8 <main+0x2554>
    75fc:	9e 8f       	std	Y+30, r25	; 0x1e
    75fe:	8d 8f       	std	Y+29, r24	; 0x1d
    7600:	80 e0       	ldi	r24, 0x00	; 0
    7602:	90 e0       	ldi	r25, 0x00	; 0
    7604:	aa ef       	ldi	r26, 0xFA	; 250
    7606:	b3 e4       	ldi	r27, 0x43	; 67
    7608:	89 8f       	std	Y+25, r24	; 0x19
    760a:	9a 8f       	std	Y+26, r25	; 0x1a
    760c:	ab 8f       	std	Y+27, r26	; 0x1b
    760e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7610:	69 8d       	ldd	r22, Y+25	; 0x19
    7612:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7614:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7616:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7618:	20 e0       	ldi	r18, 0x00	; 0
    761a:	30 e0       	ldi	r19, 0x00	; 0
    761c:	4a ef       	ldi	r20, 0xFA	; 250
    761e:	54 e4       	ldi	r21, 0x44	; 68
    7620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7624:	dc 01       	movw	r26, r24
    7626:	cb 01       	movw	r24, r22
    7628:	8d 8b       	std	Y+21, r24	; 0x15
    762a:	9e 8b       	std	Y+22, r25	; 0x16
    762c:	af 8b       	std	Y+23, r26	; 0x17
    762e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    7630:	6d 89       	ldd	r22, Y+21	; 0x15
    7632:	7e 89       	ldd	r23, Y+22	; 0x16
    7634:	8f 89       	ldd	r24, Y+23	; 0x17
    7636:	98 8d       	ldd	r25, Y+24	; 0x18
    7638:	20 e0       	ldi	r18, 0x00	; 0
    763a:	30 e0       	ldi	r19, 0x00	; 0
    763c:	40 e8       	ldi	r20, 0x80	; 128
    763e:	5f e3       	ldi	r21, 0x3F	; 63
    7640:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7644:	88 23       	and	r24, r24
    7646:	2c f4       	brge	.+10     	; 0x7652 <main+0x25ae>
		__ticks = 1;
    7648:	81 e0       	ldi	r24, 0x01	; 1
    764a:	90 e0       	ldi	r25, 0x00	; 0
    764c:	9c 8b       	std	Y+20, r25	; 0x14
    764e:	8b 8b       	std	Y+19, r24	; 0x13
    7650:	3f c0       	rjmp	.+126    	; 0x76d0 <main+0x262c>
	else if (__tmp > 65535)
    7652:	6d 89       	ldd	r22, Y+21	; 0x15
    7654:	7e 89       	ldd	r23, Y+22	; 0x16
    7656:	8f 89       	ldd	r24, Y+23	; 0x17
    7658:	98 8d       	ldd	r25, Y+24	; 0x18
    765a:	20 e0       	ldi	r18, 0x00	; 0
    765c:	3f ef       	ldi	r19, 0xFF	; 255
    765e:	4f e7       	ldi	r20, 0x7F	; 127
    7660:	57 e4       	ldi	r21, 0x47	; 71
    7662:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7666:	18 16       	cp	r1, r24
    7668:	4c f5       	brge	.+82     	; 0x76bc <main+0x2618>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    766a:	69 8d       	ldd	r22, Y+25	; 0x19
    766c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    766e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7670:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7672:	20 e0       	ldi	r18, 0x00	; 0
    7674:	30 e0       	ldi	r19, 0x00	; 0
    7676:	40 e2       	ldi	r20, 0x20	; 32
    7678:	51 e4       	ldi	r21, 0x41	; 65
    767a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    767e:	dc 01       	movw	r26, r24
    7680:	cb 01       	movw	r24, r22
    7682:	bc 01       	movw	r22, r24
    7684:	cd 01       	movw	r24, r26
    7686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    768a:	dc 01       	movw	r26, r24
    768c:	cb 01       	movw	r24, r22
    768e:	9c 8b       	std	Y+20, r25	; 0x14
    7690:	8b 8b       	std	Y+19, r24	; 0x13
    7692:	0f c0       	rjmp	.+30     	; 0x76b2 <main+0x260e>
    7694:	88 ec       	ldi	r24, 0xC8	; 200
    7696:	90 e0       	ldi	r25, 0x00	; 0
    7698:	9a 8b       	std	Y+18, r25	; 0x12
    769a:	89 8b       	std	Y+17, r24	; 0x11
    769c:	89 89       	ldd	r24, Y+17	; 0x11
    769e:	9a 89       	ldd	r25, Y+18	; 0x12
    76a0:	01 97       	sbiw	r24, 0x01	; 1
    76a2:	f1 f7       	brne	.-4      	; 0x76a0 <main+0x25fc>
    76a4:	9a 8b       	std	Y+18, r25	; 0x12
    76a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    76a8:	8b 89       	ldd	r24, Y+19	; 0x13
    76aa:	9c 89       	ldd	r25, Y+20	; 0x14
    76ac:	01 97       	sbiw	r24, 0x01	; 1
    76ae:	9c 8b       	std	Y+20, r25	; 0x14
    76b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    76b2:	8b 89       	ldd	r24, Y+19	; 0x13
    76b4:	9c 89       	ldd	r25, Y+20	; 0x14
    76b6:	00 97       	sbiw	r24, 0x00	; 0
    76b8:	69 f7       	brne	.-38     	; 0x7694 <main+0x25f0>
    76ba:	14 c0       	rjmp	.+40     	; 0x76e4 <main+0x2640>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    76bc:	6d 89       	ldd	r22, Y+21	; 0x15
    76be:	7e 89       	ldd	r23, Y+22	; 0x16
    76c0:	8f 89       	ldd	r24, Y+23	; 0x17
    76c2:	98 8d       	ldd	r25, Y+24	; 0x18
    76c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    76c8:	dc 01       	movw	r26, r24
    76ca:	cb 01       	movw	r24, r22
    76cc:	9c 8b       	std	Y+20, r25	; 0x14
    76ce:	8b 8b       	std	Y+19, r24	; 0x13
    76d0:	8b 89       	ldd	r24, Y+19	; 0x13
    76d2:	9c 89       	ldd	r25, Y+20	; 0x14
    76d4:	98 8b       	std	Y+16, r25	; 0x10
    76d6:	8f 87       	std	Y+15, r24	; 0x0f
    76d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    76da:	98 89       	ldd	r25, Y+16	; 0x10
    76dc:	01 97       	sbiw	r24, 0x01	; 1
    76de:	f1 f7       	brne	.-4      	; 0x76dc <main+0x2638>
    76e0:	98 8b       	std	Y+16, r25	; 0x10
    76e2:	8f 87       	std	Y+15, r24	; 0x0f
				Enter_password = 0;
			}
		}
	}
	_delay_ms(500);
	CLCD_voidSendCommand(1);
    76e4:	81 e0       	ldi	r24, 0x01	; 1
    76e6:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
    76ea:	a1 c0       	rjmp	.+322    	; 0x782e <main+0x278a>
				Enter_password = 0;
				_delay_ms(500);
				break;
			}
			else{
				BackSpace = 12;
    76ec:	fe 01       	movw	r30, r28
    76ee:	ed 5e       	subi	r30, 0xED	; 237
    76f0:	fe 4f       	sbci	r31, 0xFE	; 254
    76f2:	8c e0       	ldi	r24, 0x0C	; 12
    76f4:	80 83       	st	Z, r24
				CLCD_voidSendCommand(1);
    76f6:	81 e0       	ldi	r24, 0x01	; 1
    76f8:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
				CLCD_voidSendString("    Try Again!");
    76fc:	8e ea       	ldi	r24, 0xAE	; 174
    76fe:	91 e0       	ldi	r25, 0x01	; 1
    7700:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
				CLCD_voidGoToXY(1,0);
    7704:	81 e0       	ldi	r24, 0x01	; 1
    7706:	60 e0       	ldi	r22, 0x00	; 0
    7708:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>
				CLCD_voidSendString("Trials : ");
    770c:	8d eb       	ldi	r24, 0xBD	; 189
    770e:	91 e0       	ldi	r25, 0x01	; 1
    7710:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
				CLCD_voidGoToXY(1,9);
    7714:	81 e0       	ldi	r24, 0x01	; 1
    7716:	69 e0       	ldi	r22, 0x09	; 9
    7718:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>
				CLCD_voidWriteNumber(trials);
    771c:	fe 01       	movw	r30, r28
    771e:	ea 5e       	subi	r30, 0xEA	; 234
    7720:	fe 4f       	sbci	r31, 0xFE	; 254
    7722:	80 81       	ld	r24, Z
    7724:	99 27       	eor	r25, r25
    7726:	87 fd       	sbrc	r24, 7
    7728:	90 95       	com	r25
    772a:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <CLCD_voidWriteNumber>
    772e:	80 e0       	ldi	r24, 0x00	; 0
    7730:	90 e0       	ldi	r25, 0x00	; 0
    7732:	aa ef       	ldi	r26, 0xFA	; 250
    7734:	b3 e4       	ldi	r27, 0x43	; 67
    7736:	8b 87       	std	Y+11, r24	; 0x0b
    7738:	9c 87       	std	Y+12, r25	; 0x0c
    773a:	ad 87       	std	Y+13, r26	; 0x0d
    773c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    773e:	6b 85       	ldd	r22, Y+11	; 0x0b
    7740:	7c 85       	ldd	r23, Y+12	; 0x0c
    7742:	8d 85       	ldd	r24, Y+13	; 0x0d
    7744:	9e 85       	ldd	r25, Y+14	; 0x0e
    7746:	20 e0       	ldi	r18, 0x00	; 0
    7748:	30 e0       	ldi	r19, 0x00	; 0
    774a:	4a ef       	ldi	r20, 0xFA	; 250
    774c:	54 e4       	ldi	r21, 0x44	; 68
    774e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7752:	dc 01       	movw	r26, r24
    7754:	cb 01       	movw	r24, r22
    7756:	8f 83       	std	Y+7, r24	; 0x07
    7758:	98 87       	std	Y+8, r25	; 0x08
    775a:	a9 87       	std	Y+9, r26	; 0x09
    775c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    775e:	6f 81       	ldd	r22, Y+7	; 0x07
    7760:	78 85       	ldd	r23, Y+8	; 0x08
    7762:	89 85       	ldd	r24, Y+9	; 0x09
    7764:	9a 85       	ldd	r25, Y+10	; 0x0a
    7766:	20 e0       	ldi	r18, 0x00	; 0
    7768:	30 e0       	ldi	r19, 0x00	; 0
    776a:	40 e8       	ldi	r20, 0x80	; 128
    776c:	5f e3       	ldi	r21, 0x3F	; 63
    776e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7772:	88 23       	and	r24, r24
    7774:	2c f4       	brge	.+10     	; 0x7780 <main+0x26dc>
		__ticks = 1;
    7776:	81 e0       	ldi	r24, 0x01	; 1
    7778:	90 e0       	ldi	r25, 0x00	; 0
    777a:	9e 83       	std	Y+6, r25	; 0x06
    777c:	8d 83       	std	Y+5, r24	; 0x05
    777e:	3f c0       	rjmp	.+126    	; 0x77fe <main+0x275a>
	else if (__tmp > 65535)
    7780:	6f 81       	ldd	r22, Y+7	; 0x07
    7782:	78 85       	ldd	r23, Y+8	; 0x08
    7784:	89 85       	ldd	r24, Y+9	; 0x09
    7786:	9a 85       	ldd	r25, Y+10	; 0x0a
    7788:	20 e0       	ldi	r18, 0x00	; 0
    778a:	3f ef       	ldi	r19, 0xFF	; 255
    778c:	4f e7       	ldi	r20, 0x7F	; 127
    778e:	57 e4       	ldi	r21, 0x47	; 71
    7790:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7794:	18 16       	cp	r1, r24
    7796:	4c f5       	brge	.+82     	; 0x77ea <main+0x2746>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7798:	6b 85       	ldd	r22, Y+11	; 0x0b
    779a:	7c 85       	ldd	r23, Y+12	; 0x0c
    779c:	8d 85       	ldd	r24, Y+13	; 0x0d
    779e:	9e 85       	ldd	r25, Y+14	; 0x0e
    77a0:	20 e0       	ldi	r18, 0x00	; 0
    77a2:	30 e0       	ldi	r19, 0x00	; 0
    77a4:	40 e2       	ldi	r20, 0x20	; 32
    77a6:	51 e4       	ldi	r21, 0x41	; 65
    77a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    77ac:	dc 01       	movw	r26, r24
    77ae:	cb 01       	movw	r24, r22
    77b0:	bc 01       	movw	r22, r24
    77b2:	cd 01       	movw	r24, r26
    77b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    77b8:	dc 01       	movw	r26, r24
    77ba:	cb 01       	movw	r24, r22
    77bc:	9e 83       	std	Y+6, r25	; 0x06
    77be:	8d 83       	std	Y+5, r24	; 0x05
    77c0:	0f c0       	rjmp	.+30     	; 0x77e0 <main+0x273c>
    77c2:	88 ec       	ldi	r24, 0xC8	; 200
    77c4:	90 e0       	ldi	r25, 0x00	; 0
    77c6:	9c 83       	std	Y+4, r25	; 0x04
    77c8:	8b 83       	std	Y+3, r24	; 0x03
    77ca:	8b 81       	ldd	r24, Y+3	; 0x03
    77cc:	9c 81       	ldd	r25, Y+4	; 0x04
    77ce:	01 97       	sbiw	r24, 0x01	; 1
    77d0:	f1 f7       	brne	.-4      	; 0x77ce <main+0x272a>
    77d2:	9c 83       	std	Y+4, r25	; 0x04
    77d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    77d6:	8d 81       	ldd	r24, Y+5	; 0x05
    77d8:	9e 81       	ldd	r25, Y+6	; 0x06
    77da:	01 97       	sbiw	r24, 0x01	; 1
    77dc:	9e 83       	std	Y+6, r25	; 0x06
    77de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    77e0:	8d 81       	ldd	r24, Y+5	; 0x05
    77e2:	9e 81       	ldd	r25, Y+6	; 0x06
    77e4:	00 97       	sbiw	r24, 0x00	; 0
    77e6:	69 f7       	brne	.-38     	; 0x77c2 <main+0x271e>
    77e8:	14 c0       	rjmp	.+40     	; 0x7812 <main+0x276e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    77ea:	6f 81       	ldd	r22, Y+7	; 0x07
    77ec:	78 85       	ldd	r23, Y+8	; 0x08
    77ee:	89 85       	ldd	r24, Y+9	; 0x09
    77f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    77f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    77f6:	dc 01       	movw	r26, r24
    77f8:	cb 01       	movw	r24, r22
    77fa:	9e 83       	std	Y+6, r25	; 0x06
    77fc:	8d 83       	std	Y+5, r24	; 0x05
    77fe:	8d 81       	ldd	r24, Y+5	; 0x05
    7800:	9e 81       	ldd	r25, Y+6	; 0x06
    7802:	9a 83       	std	Y+2, r25	; 0x02
    7804:	89 83       	std	Y+1, r24	; 0x01
    7806:	89 81       	ldd	r24, Y+1	; 0x01
    7808:	9a 81       	ldd	r25, Y+2	; 0x02
    780a:	01 97       	sbiw	r24, 0x01	; 1
    780c:	f1 f7       	brne	.-4      	; 0x780a <main+0x2766>
    780e:	9a 83       	std	Y+2, r25	; 0x02
    7810:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
				// Initial Values
				multiplier=1;
    7812:	fe 01       	movw	r30, r28
    7814:	e5 5f       	subi	r30, 0xF5	; 245
    7816:	fe 4f       	sbci	r31, 0xFE	; 254
    7818:	81 e0       	ldi	r24, 0x01	; 1
    781a:	90 e0       	ldi	r25, 0x00	; 0
    781c:	91 83       	std	Z+1, r25	; 0x01
    781e:	80 83       	st	Z, r24
				Enter_password = 0;
    7820:	fe 01       	movw	r30, r28
    7822:	e1 5f       	subi	r30, 0xF1	; 241
    7824:	fe 4f       	sbci	r31, 0xFE	; 254
    7826:	11 82       	std	Z+1, r1	; 0x01
    7828:	10 82       	st	Z, r1
    782a:	0c 94 5d 2a 	jmp	0x54ba	; 0x54ba <main+0x416>
    782e:	ff cf       	rjmp	.-2      	; 0x782e <main+0x278a>

00007830 <SwPWM>:
	while(1);
}


void SwPWM()
{
    7830:	df 93       	push	r29
    7832:	cf 93       	push	r28
    7834:	cd b7       	in	r28, 0x3d	; 61
    7836:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter = 0;
	Local_u16Counter++;
    7838:	80 91 33 03 	lds	r24, 0x0333
    783c:	90 91 34 03 	lds	r25, 0x0334
    7840:	01 96       	adiw	r24, 0x01	; 1
    7842:	90 93 34 03 	sts	0x0334, r25
    7846:	80 93 33 03 	sts	0x0333, r24
	if(Local_u16Counter == 5)
    784a:	80 91 33 03 	lds	r24, 0x0333
    784e:	90 91 34 03 	lds	r25, 0x0334
    7852:	85 30       	cpi	r24, 0x05	; 5
    7854:	91 05       	cpc	r25, r1
    7856:	31 f4       	brne	.+12     	; 0x7864 <SwPWM+0x34>
		DIO_u8SetPinValue(DIO_PORTA,DIO_PIN0,DIO_PIN_LOW);
    7858:	80 e0       	ldi	r24, 0x00	; 0
    785a:	60 e0       	ldi	r22, 0x00	; 0
    785c:	40 e0       	ldi	r20, 0x00	; 0
    785e:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_u8SetPinValue>
    7862:	34 c0       	rjmp	.+104    	; 0x78cc <SwPWM+0x9c>
	else if(Local_u16Counter == 10)
    7864:	80 91 33 03 	lds	r24, 0x0333
    7868:	90 91 34 03 	lds	r25, 0x0334
    786c:	8a 30       	cpi	r24, 0x0A	; 10
    786e:	91 05       	cpc	r25, r1
    7870:	31 f4       	brne	.+12     	; 0x787e <SwPWM+0x4e>
		DIO_u8SetPinValue(DIO_PORTA,DIO_PIN1,DIO_PIN_LOW);
    7872:	80 e0       	ldi	r24, 0x00	; 0
    7874:	61 e0       	ldi	r22, 0x01	; 1
    7876:	40 e0       	ldi	r20, 0x00	; 0
    7878:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_u8SetPinValue>
    787c:	27 c0       	rjmp	.+78     	; 0x78cc <SwPWM+0x9c>
	else if(Local_u16Counter == 15)
    787e:	80 91 33 03 	lds	r24, 0x0333
    7882:	90 91 34 03 	lds	r25, 0x0334
    7886:	8f 30       	cpi	r24, 0x0F	; 15
    7888:	91 05       	cpc	r25, r1
    788a:	31 f4       	brne	.+12     	; 0x7898 <SwPWM+0x68>
		DIO_u8SetPinValue(DIO_PORTA,DIO_PIN2,DIO_PIN_LOW);
    788c:	80 e0       	ldi	r24, 0x00	; 0
    788e:	62 e0       	ldi	r22, 0x02	; 2
    7890:	40 e0       	ldi	r20, 0x00	; 0
    7892:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_u8SetPinValue>
    7896:	1a c0       	rjmp	.+52     	; 0x78cc <SwPWM+0x9c>
	else if(Local_u16Counter == 20)
    7898:	80 91 33 03 	lds	r24, 0x0333
    789c:	90 91 34 03 	lds	r25, 0x0334
    78a0:	84 31       	cpi	r24, 0x14	; 20
    78a2:	91 05       	cpc	r25, r1
    78a4:	99 f4       	brne	.+38     	; 0x78cc <SwPWM+0x9c>
	{
		DIO_u8SetPinValue(DIO_PORTA,DIO_PIN0,DIO_PIN_HIGH);
    78a6:	80 e0       	ldi	r24, 0x00	; 0
    78a8:	60 e0       	ldi	r22, 0x00	; 0
    78aa:	41 e0       	ldi	r20, 0x01	; 1
    78ac:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_PORTA,DIO_PIN1,DIO_PIN_HIGH);
    78b0:	80 e0       	ldi	r24, 0x00	; 0
    78b2:	61 e0       	ldi	r22, 0x01	; 1
    78b4:	41 e0       	ldi	r20, 0x01	; 1
    78b6:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_PORTA,DIO_PIN2,DIO_PIN_HIGH);
    78ba:	80 e0       	ldi	r24, 0x00	; 0
    78bc:	62 e0       	ldi	r22, 0x02	; 2
    78be:	41 e0       	ldi	r20, 0x01	; 1
    78c0:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_u8SetPinValue>
		Local_u16Counter = 0;
    78c4:	10 92 34 03 	sts	0x0334, r1
    78c8:	10 92 33 03 	sts	0x0333, r1
	}
}
    78cc:	cf 91       	pop	r28
    78ce:	df 91       	pop	r29
    78d0:	08 95       	ret

000078d2 <__mulsi3>:
    78d2:	62 9f       	mul	r22, r18
    78d4:	d0 01       	movw	r26, r0
    78d6:	73 9f       	mul	r23, r19
    78d8:	f0 01       	movw	r30, r0
    78da:	82 9f       	mul	r24, r18
    78dc:	e0 0d       	add	r30, r0
    78de:	f1 1d       	adc	r31, r1
    78e0:	64 9f       	mul	r22, r20
    78e2:	e0 0d       	add	r30, r0
    78e4:	f1 1d       	adc	r31, r1
    78e6:	92 9f       	mul	r25, r18
    78e8:	f0 0d       	add	r31, r0
    78ea:	83 9f       	mul	r24, r19
    78ec:	f0 0d       	add	r31, r0
    78ee:	74 9f       	mul	r23, r20
    78f0:	f0 0d       	add	r31, r0
    78f2:	65 9f       	mul	r22, r21
    78f4:	f0 0d       	add	r31, r0
    78f6:	99 27       	eor	r25, r25
    78f8:	72 9f       	mul	r23, r18
    78fa:	b0 0d       	add	r27, r0
    78fc:	e1 1d       	adc	r30, r1
    78fe:	f9 1f       	adc	r31, r25
    7900:	63 9f       	mul	r22, r19
    7902:	b0 0d       	add	r27, r0
    7904:	e1 1d       	adc	r30, r1
    7906:	f9 1f       	adc	r31, r25
    7908:	bd 01       	movw	r22, r26
    790a:	cf 01       	movw	r24, r30
    790c:	11 24       	eor	r1, r1
    790e:	08 95       	ret

00007910 <__udivmodhi4>:
    7910:	aa 1b       	sub	r26, r26
    7912:	bb 1b       	sub	r27, r27
    7914:	51 e1       	ldi	r21, 0x11	; 17
    7916:	07 c0       	rjmp	.+14     	; 0x7926 <__udivmodhi4_ep>

00007918 <__udivmodhi4_loop>:
    7918:	aa 1f       	adc	r26, r26
    791a:	bb 1f       	adc	r27, r27
    791c:	a6 17       	cp	r26, r22
    791e:	b7 07       	cpc	r27, r23
    7920:	10 f0       	brcs	.+4      	; 0x7926 <__udivmodhi4_ep>
    7922:	a6 1b       	sub	r26, r22
    7924:	b7 0b       	sbc	r27, r23

00007926 <__udivmodhi4_ep>:
    7926:	88 1f       	adc	r24, r24
    7928:	99 1f       	adc	r25, r25
    792a:	5a 95       	dec	r21
    792c:	a9 f7       	brne	.-22     	; 0x7918 <__udivmodhi4_loop>
    792e:	80 95       	com	r24
    7930:	90 95       	com	r25
    7932:	bc 01       	movw	r22, r24
    7934:	cd 01       	movw	r24, r26
    7936:	08 95       	ret

00007938 <__udivmodsi4>:
    7938:	a1 e2       	ldi	r26, 0x21	; 33
    793a:	1a 2e       	mov	r1, r26
    793c:	aa 1b       	sub	r26, r26
    793e:	bb 1b       	sub	r27, r27
    7940:	fd 01       	movw	r30, r26
    7942:	0d c0       	rjmp	.+26     	; 0x795e <__udivmodsi4_ep>

00007944 <__udivmodsi4_loop>:
    7944:	aa 1f       	adc	r26, r26
    7946:	bb 1f       	adc	r27, r27
    7948:	ee 1f       	adc	r30, r30
    794a:	ff 1f       	adc	r31, r31
    794c:	a2 17       	cp	r26, r18
    794e:	b3 07       	cpc	r27, r19
    7950:	e4 07       	cpc	r30, r20
    7952:	f5 07       	cpc	r31, r21
    7954:	20 f0       	brcs	.+8      	; 0x795e <__udivmodsi4_ep>
    7956:	a2 1b       	sub	r26, r18
    7958:	b3 0b       	sbc	r27, r19
    795a:	e4 0b       	sbc	r30, r20
    795c:	f5 0b       	sbc	r31, r21

0000795e <__udivmodsi4_ep>:
    795e:	66 1f       	adc	r22, r22
    7960:	77 1f       	adc	r23, r23
    7962:	88 1f       	adc	r24, r24
    7964:	99 1f       	adc	r25, r25
    7966:	1a 94       	dec	r1
    7968:	69 f7       	brne	.-38     	; 0x7944 <__udivmodsi4_loop>
    796a:	60 95       	com	r22
    796c:	70 95       	com	r23
    796e:	80 95       	com	r24
    7970:	90 95       	com	r25
    7972:	9b 01       	movw	r18, r22
    7974:	ac 01       	movw	r20, r24
    7976:	bd 01       	movw	r22, r26
    7978:	cf 01       	movw	r24, r30
    797a:	08 95       	ret

0000797c <__prologue_saves__>:
    797c:	2f 92       	push	r2
    797e:	3f 92       	push	r3
    7980:	4f 92       	push	r4
    7982:	5f 92       	push	r5
    7984:	6f 92       	push	r6
    7986:	7f 92       	push	r7
    7988:	8f 92       	push	r8
    798a:	9f 92       	push	r9
    798c:	af 92       	push	r10
    798e:	bf 92       	push	r11
    7990:	cf 92       	push	r12
    7992:	df 92       	push	r13
    7994:	ef 92       	push	r14
    7996:	ff 92       	push	r15
    7998:	0f 93       	push	r16
    799a:	1f 93       	push	r17
    799c:	cf 93       	push	r28
    799e:	df 93       	push	r29
    79a0:	cd b7       	in	r28, 0x3d	; 61
    79a2:	de b7       	in	r29, 0x3e	; 62
    79a4:	ca 1b       	sub	r28, r26
    79a6:	db 0b       	sbc	r29, r27
    79a8:	0f b6       	in	r0, 0x3f	; 63
    79aa:	f8 94       	cli
    79ac:	de bf       	out	0x3e, r29	; 62
    79ae:	0f be       	out	0x3f, r0	; 63
    79b0:	cd bf       	out	0x3d, r28	; 61
    79b2:	09 94       	ijmp

000079b4 <__epilogue_restores__>:
    79b4:	2a 88       	ldd	r2, Y+18	; 0x12
    79b6:	39 88       	ldd	r3, Y+17	; 0x11
    79b8:	48 88       	ldd	r4, Y+16	; 0x10
    79ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    79bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    79be:	7d 84       	ldd	r7, Y+13	; 0x0d
    79c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    79c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    79c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    79c6:	b9 84       	ldd	r11, Y+9	; 0x09
    79c8:	c8 84       	ldd	r12, Y+8	; 0x08
    79ca:	df 80       	ldd	r13, Y+7	; 0x07
    79cc:	ee 80       	ldd	r14, Y+6	; 0x06
    79ce:	fd 80       	ldd	r15, Y+5	; 0x05
    79d0:	0c 81       	ldd	r16, Y+4	; 0x04
    79d2:	1b 81       	ldd	r17, Y+3	; 0x03
    79d4:	aa 81       	ldd	r26, Y+2	; 0x02
    79d6:	b9 81       	ldd	r27, Y+1	; 0x01
    79d8:	ce 0f       	add	r28, r30
    79da:	d1 1d       	adc	r29, r1
    79dc:	0f b6       	in	r0, 0x3f	; 63
    79de:	f8 94       	cli
    79e0:	de bf       	out	0x3e, r29	; 62
    79e2:	0f be       	out	0x3f, r0	; 63
    79e4:	cd bf       	out	0x3d, r28	; 61
    79e6:	ed 01       	movw	r28, r26
    79e8:	08 95       	ret

000079ea <_exit>:
    79ea:	f8 94       	cli

000079ec <__stop_program>:
    79ec:	ff cf       	rjmp	.-2      	; 0x79ec <__stop_program>
