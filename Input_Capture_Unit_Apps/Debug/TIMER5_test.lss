
TIMER5_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005d42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014a  00800060  00005d42  00005dd6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004c  008001aa  008001aa  00005f20  2**0
                  ALLOC
  3 .stab         000061ec  00000000  00000000  00005f20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000021a8  00000000  00000000  0000c10c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000e2b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000e454  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000e646  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00010a51  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00011dd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00012fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00013170  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00013466  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013dd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__vector_1>
       8:	0c 94 a3 15 	jmp	0x2b46	; 0x2b46 <__vector_2>
       c:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__vector_3>
      10:	0c 94 bd 29 	jmp	0x537a	; 0x537a <__vector_4>
      14:	0c 94 90 29 	jmp	0x5320	; 0x5320 <__vector_5>
      18:	0c 94 63 29 	jmp	0x52c6	; 0x52c6 <__vector_6>
      1c:	0c 94 7f 28 	jmp	0x50fe	; 0x50fe <__vector_7>
      20:	0c 94 ac 28 	jmp	0x5158	; 0x5158 <__vector_8>
      24:	0c 94 d9 28 	jmp	0x51b2	; 0x51b2 <__vector_9>
      28:	0c 94 25 28 	jmp	0x504a	; 0x504a <__vector_10>
      2c:	0c 94 52 28 	jmp	0x50a4	; 0x50a4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 c9 08 	jmp	0x1192	; 0x1192 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e4       	ldi	r30, 0x42	; 66
      68:	fd e5       	ldi	r31, 0x5D	; 93
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3a       	cpi	r26, 0xAA	; 170
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ea       	ldi	r26, 0xAA	; 170
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3f       	cpi	r26, 0xF6	; 246
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f8 2a 	call	0x55f0	; 0x55f0 <main>
      8a:	0c 94 9f 2e 	jmp	0x5d3e	; 0x5d3e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 68 2e 	jmp	0x5cd0	; 0x5cd0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e7       	ldi	r26, 0x72	; 114
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 84 2e 	jmp	0x5d08	; 0x5d08 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 74 2e 	jmp	0x5ce8	; 0x5ce8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 90 2e 	jmp	0x5d20	; 0x5d20 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 74 2e 	jmp	0x5ce8	; 0x5ce8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 90 2e 	jmp	0x5d20	; 0x5d20 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 68 2e 	jmp	0x5cd0	; 0x5cd0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e7       	ldi	r24, 0x72	; 114
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 84 2e 	jmp	0x5d08	; 0x5d08 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 70 2e 	jmp	0x5ce0	; 0x5ce0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 e7       	ldi	r22, 0x72	; 114
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 8c 2e 	jmp	0x5d18	; 0x5d18 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 74 2e 	jmp	0x5ce8	; 0x5ce8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 90 2e 	jmp	0x5d20	; 0x5d20 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 74 2e 	jmp	0x5ce8	; 0x5ce8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 90 2e 	jmp	0x5d20	; 0x5d20 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 74 2e 	jmp	0x5ce8	; 0x5ce8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 90 2e 	jmp	0x5d20	; 0x5d20 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 78 2e 	jmp	0x5cf0	; 0x5cf0 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 94 2e 	jmp	0x5d28	; 0x5d28 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 70 2e 	jmp	0x5ce0	; 0x5ce0 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 8c 2e 	jmp	0x5d18	; 0x5d18 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e6 58       	subi	r30, 0x86	; 134
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_voidInit>:
static u8 * ADC_pu8ChannelNum = NULL;
static u8 ADC_u8ChannelSize ;
static void (*Global_vChainCallBackFunc)() = NULL;
static u16 * ADC_pu16ChannelReading = NULL;
void ADC_voidInit()
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	ADMUX &= MASK_AREF;
     e36:	a7 e2       	ldi	r26, 0x27	; 39
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e7 e2       	ldi	r30, 0x27	; 39
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	8f 73       	andi	r24, 0x3F	; 63
     e42:	8c 93       	st	X, r24
	ADMUX |= ADC_REF_VOLT<<ADMUX_REFS0;
     e44:	a7 e2       	ldi	r26, 0x27	; 39
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e7 e2       	ldi	r30, 0x27	; 39
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	80 64       	ori	r24, 0x40	; 64
     e50:	8c 93       	st	X, r24
#if ADC_ADJUST_BIT == LEFT_ADJUST
	SET_BIT(ADMUX,ADMUX_ADLAR);
     e52:	a7 e2       	ldi	r26, 0x27	; 39
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e7 e2       	ldi	r30, 0x27	; 39
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	80 62       	ori	r24, 0x20	; 32
     e5e:	8c 93       	st	X, r24
#elif ADC_ADJUST_BIT == RIGHT_ADJUST
	CLR_BIT(ADMUX,ADMUX_ADLAR);
#else
#error "Wrong in choosing configuration of ADC_ADJUST_BIT "
#endif
	ADCSRA &= MASK_CLK_RATE;
     e60:	a6 e2       	ldi	r26, 0x26	; 38
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e6 e2       	ldi	r30, 0x26	; 38
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	88 7f       	andi	r24, 0xF8	; 248
     e6c:	8c 93       	st	X, r24
	ADCSRA |= ADC_CLK_RATE<<ADCSRA_ADPS0;
     e6e:	a6 e2       	ldi	r26, 0x26	; 38
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e6 e2       	ldi	r30, 0x26	; 38
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	86 60       	ori	r24, 0x06	; 6
     e7a:	8c 93       	st	X, r24
	SFIOR &= MASK_AUTO_TRIGGER;
	SFIOR |= ADC_AUTO_TRIGGER_SRC << SFIOR_ADTS0;

	SET_BIT(ADCSRA,ADCSRA_ADSC);
#elif ADC_AUTO_TRIGGER_MODE == DISABLE
	CLR_BIT(ADCSRA,ADCSRA_ADATE);
     e7c:	a6 e2       	ldi	r26, 0x26	; 38
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e6 e2       	ldi	r30, 0x26	; 38
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	8f 7d       	andi	r24, 0xDF	; 223
     e88:	8c 93       	st	X, r24
#else
#error "Wrong in choosing configuration of ADC_AUTO_TRIGGER_MODE "
#endif
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     e8a:	a6 e2       	ldi	r26, 0x26	; 38
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e6 e2       	ldi	r30, 0x26	; 38
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	80 68       	ori	r24, 0x80	; 128
     e96:	8c 93       	st	X, r24
}
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <ADC_u8StartSingleConvPoll>:
// Synch applay Busy Flag For reenterrant
u8 ADC_u8StartSingleConvPoll(u8 Copy_u8Channel,u16 *Copy_pu16Read)
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	28 97       	sbiw	r28, 0x08	; 8
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	f8 94       	cli
     eac:	de bf       	out	0x3e, r29	; 62
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	cd bf       	out	0x3d, r28	; 61
     eb2:	8e 83       	std	Y+6, r24	; 0x06
     eb4:	78 87       	std	Y+8, r23	; 0x08
     eb6:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = OK;
     eb8:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Counter = 0;
     eba:	19 82       	std	Y+1, r1	; 0x01
     ebc:	1a 82       	std	Y+2, r1	; 0x02
     ebe:	1b 82       	std	Y+3, r1	; 0x03
     ec0:	1c 82       	std	Y+4, r1	; 0x04
	if(Global_u8BusyFlag==IDLE)
     ec2:	80 91 aa 01 	lds	r24, 0x01AA
     ec6:	88 23       	and	r24, r24
     ec8:	09 f0       	breq	.+2      	; 0xecc <ADC_u8StartSingleConvPoll+0x2e>
     eca:	6e c0       	rjmp	.+220    	; 0xfa8 <ADC_u8StartSingleConvPoll+0x10a>
	{
		Global_u8BusyFlag = BUSY;
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	80 93 aa 01 	sts	0x01AA, r24
		if(Copy_pu16Read != NULL)
     ed2:	8f 81       	ldd	r24, Y+7	; 0x07
     ed4:	98 85       	ldd	r25, Y+8	; 0x08
     ed6:	00 97       	sbiw	r24, 0x00	; 0
     ed8:	09 f4       	brne	.+2      	; 0xedc <ADC_u8StartSingleConvPoll+0x3e>
     eda:	63 c0       	rjmp	.+198    	; 0xfa2 <ADC_u8StartSingleConvPoll+0x104>
		{
				if(Copy_u8Channel<=MAX_OPTION_CHANNEL)
     edc:	8e 81       	ldd	r24, Y+6	; 0x06
     ede:	80 32       	cpi	r24, 0x20	; 32
     ee0:	08 f0       	brcs	.+2      	; 0xee4 <ADC_u8StartSingleConvPoll+0x46>
     ee2:	5c c0       	rjmp	.+184    	; 0xf9c <ADC_u8StartSingleConvPoll+0xfe>
				{
					ADMUX &= MASK_CHANNEL;
     ee4:	a7 e2       	ldi	r26, 0x27	; 39
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e7 e2       	ldi	r30, 0x27	; 39
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	80 7e       	andi	r24, 0xE0	; 224
     ef0:	8c 93       	st	X, r24
					ADMUX |= Copy_u8Channel<<ADMUX_MUX0;
     ef2:	a7 e2       	ldi	r26, 0x27	; 39
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e7 e2       	ldi	r30, 0x27	; 39
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	90 81       	ld	r25, Z
     efc:	8e 81       	ldd	r24, Y+6	; 0x06
     efe:	89 2b       	or	r24, r25
     f00:	8c 93       	st	X, r24
					SET_BIT(ADCSRA,ADCSRA_ADSC);
     f02:	a6 e2       	ldi	r26, 0x26	; 38
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e6 e2       	ldi	r30, 0x26	; 38
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	80 64       	ori	r24, 0x40	; 64
     f0e:	8c 93       	st	X, r24
     f10:	0b c0       	rjmp	.+22     	; 0xf28 <ADC_u8StartSingleConvPoll+0x8a>
					while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0)&&(Local_u32Counter<ADC_U32_TIMEOUT))
					{
						Local_u32Counter++;
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	9a 81       	ldd	r25, Y+2	; 0x02
     f16:	ab 81       	ldd	r26, Y+3	; 0x03
     f18:	bc 81       	ldd	r27, Y+4	; 0x04
     f1a:	01 96       	adiw	r24, 0x01	; 1
     f1c:	a1 1d       	adc	r26, r1
     f1e:	b1 1d       	adc	r27, r1
     f20:	89 83       	std	Y+1, r24	; 0x01
     f22:	9a 83       	std	Y+2, r25	; 0x02
     f24:	ab 83       	std	Y+3, r26	; 0x03
     f26:	bc 83       	std	Y+4, r27	; 0x04
				if(Copy_u8Channel<=MAX_OPTION_CHANNEL)
				{
					ADMUX &= MASK_CHANNEL;
					ADMUX |= Copy_u8Channel<<ADMUX_MUX0;
					SET_BIT(ADCSRA,ADCSRA_ADSC);
					while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0)&&(Local_u32Counter<ADC_U32_TIMEOUT))
     f28:	e6 e2       	ldi	r30, 0x26	; 38
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	82 95       	swap	r24
     f30:	8f 70       	andi	r24, 0x0F	; 15
     f32:	88 2f       	mov	r24, r24
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	81 70       	andi	r24, 0x01	; 1
     f38:	90 70       	andi	r25, 0x00	; 0
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	61 f4       	brne	.+24     	; 0xf56 <ADC_u8StartSingleConvPoll+0xb8>
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	9a 81       	ldd	r25, Y+2	; 0x02
     f42:	ab 81       	ldd	r26, Y+3	; 0x03
     f44:	bc 81       	ldd	r27, Y+4	; 0x04
     f46:	80 35       	cpi	r24, 0x50	; 80
     f48:	23 ec       	ldi	r18, 0xC3	; 195
     f4a:	92 07       	cpc	r25, r18
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	a2 07       	cpc	r26, r18
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	b2 07       	cpc	r27, r18
     f54:	f0 f2       	brcs	.-68     	; 0xf12 <ADC_u8StartSingleConvPoll+0x74>
					{
						Local_u32Counter++;
					}
					if(Local_u32Counter==ADC_U32_TIMEOUT)
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	9a 81       	ldd	r25, Y+2	; 0x02
     f5a:	ab 81       	ldd	r26, Y+3	; 0x03
     f5c:	bc 81       	ldd	r27, Y+4	; 0x04
     f5e:	80 35       	cpi	r24, 0x50	; 80
     f60:	23 ec       	ldi	r18, 0xC3	; 195
     f62:	92 07       	cpc	r25, r18
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	a2 07       	cpc	r26, r18
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	b2 07       	cpc	r27, r18
     f6c:	19 f4       	brne	.+6      	; 0xf74 <ADC_u8StartSingleConvPoll+0xd6>
					{
						Local_u8ErrorState = NOTOK;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	8d 83       	std	Y+5, r24	; 0x05
     f72:	1c c0       	rjmp	.+56     	; 0xfac <ADC_u8StartSingleConvPoll+0x10e>
					}
					else{

						CLR_BIT(ADCSRA,ADCSRA_ADIF);
     f74:	a6 e2       	ldi	r26, 0x26	; 38
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e6 e2       	ldi	r30, 0x26	; 38
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	8f 7e       	andi	r24, 0xEF	; 239
     f80:	8c 93       	st	X, r24
						if(ADC_ADJUST_BIT == LEFT_ADJUST)
							*Copy_pu16Read = ADC_REG>>8;
     f82:	e4 e2       	ldi	r30, 0x24	; 36
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	91 81       	ldd	r25, Z+1	; 0x01
     f8a:	89 2f       	mov	r24, r25
     f8c:	99 27       	eor	r25, r25
     f8e:	ef 81       	ldd	r30, Y+7	; 0x07
     f90:	f8 85       	ldd	r31, Y+8	; 0x08
     f92:	91 83       	std	Z+1, r25	; 0x01
     f94:	80 83       	st	Z, r24
						else if(ADC_ADJUST_BIT == RIGHT_ADJUST)
							*Copy_pu16Read = ADC_REG;
						Global_u8BusyFlag = IDLE;
     f96:	10 92 aa 01 	sts	0x01AA, r1
     f9a:	08 c0       	rjmp	.+16     	; 0xfac <ADC_u8StartSingleConvPoll+0x10e>
					}
				}
				else
					Local_u8ErrorState = NOTOK;
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	8d 83       	std	Y+5, r24	; 0x05
     fa0:	05 c0       	rjmp	.+10     	; 0xfac <ADC_u8StartSingleConvPoll+0x10e>
			}
			else
				Local_u8ErrorState = NULL_POINTER;
     fa2:	82 e0       	ldi	r24, 0x02	; 2
     fa4:	8d 83       	std	Y+5, r24	; 0x05
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <ADC_u8StartSingleConvPoll+0x10e>
	}
	else
		Local_u8ErrorState = BUSY_FUNC;
     fa8:	83 e0       	ldi	r24, 0x03	; 3
     faa:	8d 83       	std	Y+5, r24	; 0x05
	return Local_u8ErrorState;
     fac:	8d 81       	ldd	r24, Y+5	; 0x05
}
     fae:	28 96       	adiw	r28, 0x08	; 8
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	08 95       	ret

00000fc0 <ADC_u8StartSingleConvInt>:

u8 ADC_u8StartSingleConvInt(u8 Copy_u8Channel,u16 *Copy_pu16Read,void (*Notifiction)())
{
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	00 d0       	rcall	.+0      	; 0xfc6 <ADC_u8StartSingleConvInt+0x6>
     fc6:	00 d0       	rcall	.+0      	; 0xfc8 <ADC_u8StartSingleConvInt+0x8>
     fc8:	00 d0       	rcall	.+0      	; 0xfca <ADC_u8StartSingleConvInt+0xa>
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	8a 83       	std	Y+2, r24	; 0x02
     fd0:	7c 83       	std	Y+4, r23	; 0x04
     fd2:	6b 83       	std	Y+3, r22	; 0x03
     fd4:	5e 83       	std	Y+6, r21	; 0x06
     fd6:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = OK;
     fd8:	19 82       	std	Y+1, r1	; 0x01
	if(Global_u8BusyFlag==IDLE)
     fda:	80 91 aa 01 	lds	r24, 0x01AA
     fde:	88 23       	and	r24, r24
     fe0:	09 f0       	breq	.+2      	; 0xfe4 <ADC_u8StartSingleConvInt+0x24>
     fe2:	40 c0       	rjmp	.+128    	; 0x1064 <ADC_u8StartSingleConvInt+0xa4>
	{
		Global_u8BusyFlag = BUSY;
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	80 93 aa 01 	sts	0x01AA, r24
		ADC_u8DirectionOfConvFunc = SINGLE_CONVERISION;
     fea:	10 92 af 01 	sts	0x01AF, r1
		if((Copy_pu16Read != NULL)||(Notifiction != NULL))
     fee:	8b 81       	ldd	r24, Y+3	; 0x03
     ff0:	9c 81       	ldd	r25, Y+4	; 0x04
     ff2:	00 97       	sbiw	r24, 0x00	; 0
     ff4:	21 f4       	brne	.+8      	; 0xffe <ADC_u8StartSingleConvInt+0x3e>
     ff6:	8d 81       	ldd	r24, Y+5	; 0x05
     ff8:	9e 81       	ldd	r25, Y+6	; 0x06
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	81 f1       	breq	.+96     	; 0x105e <ADC_u8StartSingleConvInt+0x9e>
		{

				if(Copy_u8Channel<=MAX_OPTION_CHANNEL)
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	80 32       	cpi	r24, 0x20	; 32
    1002:	50 f5       	brcc	.+84     	; 0x1058 <ADC_u8StartSingleConvInt+0x98>
				{
					ADMUX &= MASK_CHANNEL;
    1004:	a7 e2       	ldi	r26, 0x27	; 39
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e7 e2       	ldi	r30, 0x27	; 39
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	80 7e       	andi	r24, 0xE0	; 224
    1010:	8c 93       	st	X, r24
					ADMUX |= Copy_u8Channel<<ADMUX_MUX0;
    1012:	a7 e2       	ldi	r26, 0x27	; 39
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e7 e2       	ldi	r30, 0x27	; 39
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	90 81       	ld	r25, Z
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	89 2b       	or	r24, r25
    1020:	8c 93       	st	X, r24
					Global_vCallBackFunc = Notifiction;
    1022:	8d 81       	ldd	r24, Y+5	; 0x05
    1024:	9e 81       	ldd	r25, Y+6	; 0x06
    1026:	90 93 ac 01 	sts	0x01AC, r25
    102a:	80 93 ab 01 	sts	0x01AB, r24
					Global_pu8Read = Copy_pu16Read;
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	9c 81       	ldd	r25, Y+4	; 0x04
    1032:	90 93 ae 01 	sts	0x01AE, r25
    1036:	80 93 ad 01 	sts	0x01AD, r24
					SET_BIT(ADCSRA,ADCSRA_ADSC);
    103a:	a6 e2       	ldi	r26, 0x26	; 38
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e6 e2       	ldi	r30, 0x26	; 38
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	80 64       	ori	r24, 0x40	; 64
    1046:	8c 93       	st	X, r24
					SET_BIT(ADCSRA,ADCSRA_ADIE);
    1048:	a6 e2       	ldi	r26, 0x26	; 38
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e6 e2       	ldi	r30, 0x26	; 38
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	88 60       	ori	r24, 0x08	; 8
    1054:	8c 93       	st	X, r24
    1056:	08 c0       	rjmp	.+16     	; 0x1068 <ADC_u8StartSingleConvInt+0xa8>
				}
				else
					Local_u8ErrorState = NOTOK;
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	89 83       	std	Y+1, r24	; 0x01
    105c:	05 c0       	rjmp	.+10     	; 0x1068 <ADC_u8StartSingleConvInt+0xa8>
		}
		else
			Local_u8ErrorState = NULL_POINTER;
    105e:	82 e0       	ldi	r24, 0x02	; 2
    1060:	89 83       	std	Y+1, r24	; 0x01
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <ADC_u8StartSingleConvInt+0xa8>
	}
	else
		Local_u8ErrorState = BUSY_FUNC;
    1064:	83 e0       	ldi	r24, 0x03	; 3
    1066:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    1068:	89 81       	ldd	r24, Y+1	; 0x01
}
    106a:	26 96       	adiw	r28, 0x06	; 6
    106c:	0f b6       	in	r0, 0x3f	; 63
    106e:	f8 94       	cli
    1070:	de bf       	out	0x3e, r29	; 62
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	cd bf       	out	0x3d, r28	; 61
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	08 95       	ret

0000107c <ADC_u8StartChainConvAsynch>:
u8 ADC_u8StartChainConvAsynch(ADC_Chain *Copy_Chain)
{
    107c:	df 93       	push	r29
    107e:	cf 93       	push	r28
    1080:	00 d0       	rcall	.+0      	; 0x1082 <ADC_u8StartChainConvAsynch+0x6>
    1082:	0f 92       	push	r0
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	9b 83       	std	Y+3, r25	; 0x03
    108a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    108c:	19 82       	std	Y+1, r1	; 0x01
	if(Global_u8BusyFlag==IDLE)
    108e:	80 91 aa 01 	lds	r24, 0x01AA
    1092:	88 23       	and	r24, r24
    1094:	09 f0       	breq	.+2      	; 0x1098 <ADC_u8StartChainConvAsynch+0x1c>
    1096:	74 c0       	rjmp	.+232    	; 0x1180 <ADC_u8StartChainConvAsynch+0x104>
	{
		Global_u8BusyFlag = BUSY;
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	80 93 aa 01 	sts	0x01AA, r24
		ADC_u8DirectionOfConvFunc = CHAIN_CONVERISION;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	80 93 af 01 	sts	0x01AF, r24
		if((Copy_Chain->ChainId != NULL)||(Copy_Chain->Notifction != NULL)||(Copy_Chain->Result != NULL))
    10a4:	ea 81       	ldd	r30, Y+2	; 0x02
    10a6:	fb 81       	ldd	r31, Y+3	; 0x03
    10a8:	80 81       	ld	r24, Z
    10aa:	91 81       	ldd	r25, Z+1	; 0x01
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	69 f4       	brne	.+26     	; 0x10ca <ADC_u8StartChainConvAsynch+0x4e>
    10b0:	ea 81       	ldd	r30, Y+2	; 0x02
    10b2:	fb 81       	ldd	r31, Y+3	; 0x03
    10b4:	83 81       	ldd	r24, Z+3	; 0x03
    10b6:	94 81       	ldd	r25, Z+4	; 0x04
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	39 f4       	brne	.+14     	; 0x10ca <ADC_u8StartChainConvAsynch+0x4e>
    10bc:	ea 81       	ldd	r30, Y+2	; 0x02
    10be:	fb 81       	ldd	r31, Y+3	; 0x03
    10c0:	85 81       	ldd	r24, Z+5	; 0x05
    10c2:	96 81       	ldd	r25, Z+6	; 0x06
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	09 f4       	brne	.+2      	; 0x10ca <ADC_u8StartChainConvAsynch+0x4e>
    10c8:	58 c0       	rjmp	.+176    	; 0x117a <ADC_u8StartChainConvAsynch+0xfe>
		{
			if(Copy_Chain->ChainId[ADC_u8ChainIndex]<=MAX_OPTION_CHANNEL)
    10ca:	ea 81       	ldd	r30, Y+2	; 0x02
    10cc:	fb 81       	ldd	r31, Y+3	; 0x03
    10ce:	20 81       	ld	r18, Z
    10d0:	31 81       	ldd	r19, Z+1	; 0x01
    10d2:	80 91 b0 01 	lds	r24, 0x01B0
    10d6:	88 2f       	mov	r24, r24
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	f9 01       	movw	r30, r18
    10dc:	e8 0f       	add	r30, r24
    10de:	f9 1f       	adc	r31, r25
    10e0:	80 81       	ld	r24, Z
    10e2:	80 32       	cpi	r24, 0x20	; 32
    10e4:	08 f0       	brcs	.+2      	; 0x10e8 <ADC_u8StartChainConvAsynch+0x6c>
    10e6:	46 c0       	rjmp	.+140    	; 0x1174 <ADC_u8StartChainConvAsynch+0xf8>
			{
				ADMUX &= MASK_CHANNEL;
    10e8:	a7 e2       	ldi	r26, 0x27	; 39
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e7 e2       	ldi	r30, 0x27	; 39
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	80 7e       	andi	r24, 0xE0	; 224
    10f4:	8c 93       	st	X, r24
				ADMUX |= Copy_Chain->ChainId[ADC_u8ChainIndex]<<ADMUX_MUX0;
    10f6:	a7 e2       	ldi	r26, 0x27	; 39
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e7 e2       	ldi	r30, 0x27	; 39
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	40 81       	ld	r20, Z
    1100:	ea 81       	ldd	r30, Y+2	; 0x02
    1102:	fb 81       	ldd	r31, Y+3	; 0x03
    1104:	20 81       	ld	r18, Z
    1106:	31 81       	ldd	r19, Z+1	; 0x01
    1108:	80 91 b0 01 	lds	r24, 0x01B0
    110c:	88 2f       	mov	r24, r24
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	f9 01       	movw	r30, r18
    1112:	e8 0f       	add	r30, r24
    1114:	f9 1f       	adc	r31, r25
    1116:	80 81       	ld	r24, Z
    1118:	84 2b       	or	r24, r20
    111a:	8c 93       	st	X, r24
				ADC_pu8ChannelNum = Copy_Chain->ChainId;
    111c:	ea 81       	ldd	r30, Y+2	; 0x02
    111e:	fb 81       	ldd	r31, Y+3	; 0x03
    1120:	80 81       	ld	r24, Z
    1122:	91 81       	ldd	r25, Z+1	; 0x01
    1124:	90 93 b2 01 	sts	0x01B2, r25
    1128:	80 93 b1 01 	sts	0x01B1, r24
				Global_vChainCallBackFunc = Copy_Chain->Notifction;
    112c:	ea 81       	ldd	r30, Y+2	; 0x02
    112e:	fb 81       	ldd	r31, Y+3	; 0x03
    1130:	83 81       	ldd	r24, Z+3	; 0x03
    1132:	94 81       	ldd	r25, Z+4	; 0x04
    1134:	90 93 b4 01 	sts	0x01B4, r25
    1138:	80 93 b3 01 	sts	0x01B3, r24
				ADC_pu16ChannelReading = Copy_Chain->Result;
    113c:	ea 81       	ldd	r30, Y+2	; 0x02
    113e:	fb 81       	ldd	r31, Y+3	; 0x03
    1140:	85 81       	ldd	r24, Z+5	; 0x05
    1142:	96 81       	ldd	r25, Z+6	; 0x06
    1144:	90 93 b6 01 	sts	0x01B6, r25
    1148:	80 93 b5 01 	sts	0x01B5, r24
				ADC_u8ChannelSize = Copy_Chain->ChannelSize;
    114c:	ea 81       	ldd	r30, Y+2	; 0x02
    114e:	fb 81       	ldd	r31, Y+3	; 0x03
    1150:	82 81       	ldd	r24, Z+2	; 0x02
    1152:	80 93 b7 01 	sts	0x01B7, r24
				SET_BIT(ADCSRA,ADCSRA_ADSC);
    1156:	a6 e2       	ldi	r26, 0x26	; 38
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e6 e2       	ldi	r30, 0x26	; 38
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	80 64       	ori	r24, 0x40	; 64
    1162:	8c 93       	st	X, r24
				SET_BIT(ADCSRA,ADCSRA_ADIE);
    1164:	a6 e2       	ldi	r26, 0x26	; 38
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e6 e2       	ldi	r30, 0x26	; 38
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	88 60       	ori	r24, 0x08	; 8
    1170:	8c 93       	st	X, r24
    1172:	08 c0       	rjmp	.+16     	; 0x1184 <ADC_u8StartChainConvAsynch+0x108>
			}
			else
				Local_u8ErrorState = NOTOK;
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	89 83       	std	Y+1, r24	; 0x01
    1178:	05 c0       	rjmp	.+10     	; 0x1184 <ADC_u8StartChainConvAsynch+0x108>
		}
		else
			Local_u8ErrorState = NULL_POINTER;
    117a:	82 e0       	ldi	r24, 0x02	; 2
    117c:	89 83       	std	Y+1, r24	; 0x01
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <ADC_u8StartChainConvAsynch+0x108>
	}
	else
		Local_u8ErrorState = BUSY_FUNC;
    1180:	83 e0       	ldi	r24, 0x03	; 3
    1182:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    1184:	89 81       	ldd	r24, Y+1	; 0x01

}
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <__vector_16>:
void __vector_16 (void)	__attribute__((signal));
void __vector_16 (void)
{
    1192:	1f 92       	push	r1
    1194:	0f 92       	push	r0
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	0f 92       	push	r0
    119a:	11 24       	eor	r1, r1
    119c:	2f 93       	push	r18
    119e:	3f 93       	push	r19
    11a0:	4f 93       	push	r20
    11a2:	5f 93       	push	r21
    11a4:	6f 93       	push	r22
    11a6:	7f 93       	push	r23
    11a8:	8f 93       	push	r24
    11aa:	9f 93       	push	r25
    11ac:	af 93       	push	r26
    11ae:	bf 93       	push	r27
    11b0:	ef 93       	push	r30
    11b2:	ff 93       	push	r31
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8DirectionOfConvFunc == SINGLE_CONVERISION)
    11bc:	80 91 af 01 	lds	r24, 0x01AF
    11c0:	88 23       	and	r24, r24
    11c2:	d9 f4       	brne	.+54     	; 0x11fa <__vector_16+0x68>
	{
		if(ADC_ADJUST_BIT == LEFT_ADJUST)
			*Global_pu8Read = ADC_REG>>8;
    11c4:	a0 91 ad 01 	lds	r26, 0x01AD
    11c8:	b0 91 ae 01 	lds	r27, 0x01AE
    11cc:	e4 e2       	ldi	r30, 0x24	; 36
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	91 81       	ldd	r25, Z+1	; 0x01
    11d4:	89 2f       	mov	r24, r25
    11d6:	99 27       	eor	r25, r25
    11d8:	8d 93       	st	X+, r24
    11da:	9c 93       	st	X, r25
		else if(ADC_ADJUST_BIT == RIGHT_ADJUST)
			*Global_pu8Read = ADC_REG;

		Global_u8BusyFlag = IDLE;
    11dc:	10 92 aa 01 	sts	0x01AA, r1

		Global_vCallBackFunc();
    11e0:	e0 91 ab 01 	lds	r30, 0x01AB
    11e4:	f0 91 ac 01 	lds	r31, 0x01AC
    11e8:	09 95       	icall

		CLR_BIT(ADCSRA,ADCSRA_ADIE);
    11ea:	a6 e2       	ldi	r26, 0x26	; 38
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	e6 e2       	ldi	r30, 0x26	; 38
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	87 7f       	andi	r24, 0xF7	; 247
    11f6:	8c 93       	st	X, r24
    11f8:	58 c0       	rjmp	.+176    	; 0x12aa <__vector_16+0x118>
	}
	else if(ADC_u8DirectionOfConvFunc == CHAIN_CONVERISION)
    11fa:	80 91 af 01 	lds	r24, 0x01AF
    11fe:	81 30       	cpi	r24, 0x01	; 1
    1200:	09 f0       	breq	.+2      	; 0x1204 <__vector_16+0x72>
    1202:	53 c0       	rjmp	.+166    	; 0x12aa <__vector_16+0x118>
	{
		if(ADC_ADJUST_BIT == LEFT_ADJUST)
			ADC_pu16ChannelReading[ADC_u8ChainIndex] = ADC_REG>>8;
    1204:	20 91 b5 01 	lds	r18, 0x01B5
    1208:	30 91 b6 01 	lds	r19, 0x01B6
    120c:	80 91 b0 01 	lds	r24, 0x01B0
    1210:	88 2f       	mov	r24, r24
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	d9 01       	movw	r26, r18
    121a:	a8 0f       	add	r26, r24
    121c:	b9 1f       	adc	r27, r25
    121e:	e4 e2       	ldi	r30, 0x24	; 36
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	91 81       	ldd	r25, Z+1	; 0x01
    1226:	89 2f       	mov	r24, r25
    1228:	99 27       	eor	r25, r25
    122a:	11 96       	adiw	r26, 0x01	; 1
    122c:	9c 93       	st	X, r25
    122e:	8e 93       	st	-X, r24
		else if(ADC_ADJUST_BIT == RIGHT_ADJUST)
			ADC_pu16ChannelReading[ADC_u8ChainIndex] = ADC_REG;

		ADC_u8ChainIndex++;
    1230:	80 91 b0 01 	lds	r24, 0x01B0
    1234:	8f 5f       	subi	r24, 0xFF	; 255
    1236:	80 93 b0 01 	sts	0x01B0, r24
		if(ADC_u8ChainIndex==ADC_u8ChannelSize)
    123a:	90 91 b0 01 	lds	r25, 0x01B0
    123e:	80 91 b7 01 	lds	r24, 0x01B7
    1242:	98 17       	cp	r25, r24
    1244:	89 f4       	brne	.+34     	; 0x1268 <__vector_16+0xd6>
		{
			Global_u8BusyFlag = IDLE;
    1246:	10 92 aa 01 	sts	0x01AA, r1

			Global_vChainCallBackFunc();
    124a:	e0 91 b3 01 	lds	r30, 0x01B3
    124e:	f0 91 b4 01 	lds	r31, 0x01B4
    1252:	09 95       	icall

			CLR_BIT(ADCSRA,ADCSRA_ADIE);
    1254:	a6 e2       	ldi	r26, 0x26	; 38
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e6 e2       	ldi	r30, 0x26	; 38
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	87 7f       	andi	r24, 0xF7	; 247
    1260:	8c 93       	st	X, r24

			ADC_u8ChainIndex = 0;
    1262:	10 92 b0 01 	sts	0x01B0, r1
    1266:	21 c0       	rjmp	.+66     	; 0x12aa <__vector_16+0x118>
		}
		else
		{
			ADMUX &= MASK_CHANNEL;
    1268:	a7 e2       	ldi	r26, 0x27	; 39
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e7 e2       	ldi	r30, 0x27	; 39
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	80 7e       	andi	r24, 0xE0	; 224
    1274:	8c 93       	st	X, r24
			ADMUX |= ADC_pu8ChannelNum[ADC_u8ChainIndex]<<ADMUX_MUX0;
    1276:	a7 e2       	ldi	r26, 0x27	; 39
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e7 e2       	ldi	r30, 0x27	; 39
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	40 81       	ld	r20, Z
    1280:	20 91 b1 01 	lds	r18, 0x01B1
    1284:	30 91 b2 01 	lds	r19, 0x01B2
    1288:	80 91 b0 01 	lds	r24, 0x01B0
    128c:	88 2f       	mov	r24, r24
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	f9 01       	movw	r30, r18
    1292:	e8 0f       	add	r30, r24
    1294:	f9 1f       	adc	r31, r25
    1296:	80 81       	ld	r24, Z
    1298:	84 2b       	or	r24, r20
    129a:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADSC);
    129c:	a6 e2       	ldi	r26, 0x26	; 38
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e6 e2       	ldi	r30, 0x26	; 38
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	80 64       	ori	r24, 0x40	; 64
    12a8:	8c 93       	st	X, r24
		}

	}
}
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	ff 91       	pop	r31
    12b0:	ef 91       	pop	r30
    12b2:	bf 91       	pop	r27
    12b4:	af 91       	pop	r26
    12b6:	9f 91       	pop	r25
    12b8:	8f 91       	pop	r24
    12ba:	7f 91       	pop	r23
    12bc:	6f 91       	pop	r22
    12be:	5f 91       	pop	r21
    12c0:	4f 91       	pop	r20
    12c2:	3f 91       	pop	r19
    12c4:	2f 91       	pop	r18
    12c6:	0f 90       	pop	r0
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	0f 90       	pop	r0
    12cc:	1f 90       	pop	r1
    12ce:	18 95       	reti

000012d0 <CLCD_voidSendCommand>:
#include "../HAL/CLCD_interface.h"
#include "../HAL/CLCD_private.h"

static u8 iniIsFinich=0;
void CLCD_voidSendCommand(u8 Copy_u8Command)//math
{
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
    12d8:	ac 97       	sbiw	r28, 0x2c	; 44
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	f8 94       	cli
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	cd bf       	out	0x3d, r28	; 61
    12e4:	8c a7       	std	Y+44, r24	; 0x2c
	/*PIN SET  send pulse (E) */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_HIGH);
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_LOW);
#elif CLCD_CHIOCE_MODE==_4_BIT_MODE
	u8 Local_u8Mask = 0b11110000;
    12e6:	80 ef       	ldi	r24, 0xF0	; 240
    12e8:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_PIN_LOW);
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	60 e0       	ldi	r22, 0x00	; 0
    12ee:	40 e0       	ldi	r20, 0x00	; 0
    12f0:	0e 94 31 10 	call	0x2062	; 0x2062 <DIO_u8SetPinValue>
	/*PIN RW SET LOW  */
//	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_PIN_LOW);
	/*PORT SET COMMAND*/
	Local_u8Mask &= Copy_u8Command;
    12f4:	9b a5       	ldd	r25, Y+43	; 0x2b
    12f6:	8c a5       	ldd	r24, Y+44	; 0x2c
    12f8:	89 23       	and	r24, r25
    12fa:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPortValue(CLCD_DATA_PORT, Local_u8Mask);
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	6b a5       	ldd	r22, Y+43	; 0x2b
    1300:	0e 94 4a 11 	call	0x2294	; 0x2294 <DIO_u8SetPortValue>
	/*PIN SET  send pulse (E) */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_HIGH);
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	62 e0       	ldi	r22, 0x02	; 2
    1308:	41 e0       	ldi	r20, 0x01	; 1
    130a:	0e 94 31 10 	call	0x2062	; 0x2062 <DIO_u8SetPinValue>
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	a0 e0       	ldi	r26, 0x00	; 0
    1314:	b0 e4       	ldi	r27, 0x40	; 64
    1316:	8f a3       	std	Y+39, r24	; 0x27
    1318:	98 a7       	std	Y+40, r25	; 0x28
    131a:	a9 a7       	std	Y+41, r26	; 0x29
    131c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    131e:	6f a1       	ldd	r22, Y+39	; 0x27
    1320:	78 a5       	ldd	r23, Y+40	; 0x28
    1322:	89 a5       	ldd	r24, Y+41	; 0x29
    1324:	9a a5       	ldd	r25, Y+42	; 0x2a
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	4a ef       	ldi	r20, 0xFA	; 250
    132c:	54 e4       	ldi	r21, 0x44	; 68
    132e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	8b a3       	std	Y+35, r24	; 0x23
    1338:	9c a3       	std	Y+36, r25	; 0x24
    133a:	ad a3       	std	Y+37, r26	; 0x25
    133c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    133e:	6b a1       	ldd	r22, Y+35	; 0x23
    1340:	7c a1       	ldd	r23, Y+36	; 0x24
    1342:	8d a1       	ldd	r24, Y+37	; 0x25
    1344:	9e a1       	ldd	r25, Y+38	; 0x26
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	40 e8       	ldi	r20, 0x80	; 128
    134c:	5f e3       	ldi	r21, 0x3F	; 63
    134e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1352:	88 23       	and	r24, r24
    1354:	2c f4       	brge	.+10     	; 0x1360 <CLCD_voidSendCommand+0x90>
		__ticks = 1;
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	9a a3       	std	Y+34, r25	; 0x22
    135c:	89 a3       	std	Y+33, r24	; 0x21
    135e:	3f c0       	rjmp	.+126    	; 0x13de <CLCD_voidSendCommand+0x10e>
	else if (__tmp > 65535)
    1360:	6b a1       	ldd	r22, Y+35	; 0x23
    1362:	7c a1       	ldd	r23, Y+36	; 0x24
    1364:	8d a1       	ldd	r24, Y+37	; 0x25
    1366:	9e a1       	ldd	r25, Y+38	; 0x26
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	3f ef       	ldi	r19, 0xFF	; 255
    136c:	4f e7       	ldi	r20, 0x7F	; 127
    136e:	57 e4       	ldi	r21, 0x47	; 71
    1370:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1374:	18 16       	cp	r1, r24
    1376:	4c f5       	brge	.+82     	; 0x13ca <CLCD_voidSendCommand+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1378:	6f a1       	ldd	r22, Y+39	; 0x27
    137a:	78 a5       	ldd	r23, Y+40	; 0x28
    137c:	89 a5       	ldd	r24, Y+41	; 0x29
    137e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	40 e2       	ldi	r20, 0x20	; 32
    1386:	51 e4       	ldi	r21, 0x41	; 65
    1388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	bc 01       	movw	r22, r24
    1392:	cd 01       	movw	r24, r26
    1394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1398:	dc 01       	movw	r26, r24
    139a:	cb 01       	movw	r24, r22
    139c:	9a a3       	std	Y+34, r25	; 0x22
    139e:	89 a3       	std	Y+33, r24	; 0x21
    13a0:	0f c0       	rjmp	.+30     	; 0x13c0 <CLCD_voidSendCommand+0xf0>
    13a2:	88 ec       	ldi	r24, 0xC8	; 200
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	98 a3       	std	Y+32, r25	; 0x20
    13a8:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13ac:	98 a1       	ldd	r25, Y+32	; 0x20
    13ae:	01 97       	sbiw	r24, 0x01	; 1
    13b0:	f1 f7       	brne	.-4      	; 0x13ae <CLCD_voidSendCommand+0xde>
    13b2:	98 a3       	std	Y+32, r25	; 0x20
    13b4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b6:	89 a1       	ldd	r24, Y+33	; 0x21
    13b8:	9a a1       	ldd	r25, Y+34	; 0x22
    13ba:	01 97       	sbiw	r24, 0x01	; 1
    13bc:	9a a3       	std	Y+34, r25	; 0x22
    13be:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c0:	89 a1       	ldd	r24, Y+33	; 0x21
    13c2:	9a a1       	ldd	r25, Y+34	; 0x22
    13c4:	00 97       	sbiw	r24, 0x00	; 0
    13c6:	69 f7       	brne	.-38     	; 0x13a2 <CLCD_voidSendCommand+0xd2>
    13c8:	14 c0       	rjmp	.+40     	; 0x13f2 <CLCD_voidSendCommand+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ca:	6b a1       	ldd	r22, Y+35	; 0x23
    13cc:	7c a1       	ldd	r23, Y+36	; 0x24
    13ce:	8d a1       	ldd	r24, Y+37	; 0x25
    13d0:	9e a1       	ldd	r25, Y+38	; 0x26
    13d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d6:	dc 01       	movw	r26, r24
    13d8:	cb 01       	movw	r24, r22
    13da:	9a a3       	std	Y+34, r25	; 0x22
    13dc:	89 a3       	std	Y+33, r24	; 0x21
    13de:	89 a1       	ldd	r24, Y+33	; 0x21
    13e0:	9a a1       	ldd	r25, Y+34	; 0x22
    13e2:	9e 8f       	std	Y+30, r25	; 0x1e
    13e4:	8d 8f       	std	Y+29, r24	; 0x1d
    13e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13ea:	01 97       	sbiw	r24, 0x01	; 1
    13ec:	f1 f7       	brne	.-4      	; 0x13ea <CLCD_voidSendCommand+0x11a>
    13ee:	9e 8f       	std	Y+30, r25	; 0x1e
    13f0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	62 e0       	ldi	r22, 0x02	; 2
    13f6:	40 e0       	ldi	r20, 0x00	; 0
    13f8:	0e 94 31 10 	call	0x2062	; 0x2062 <DIO_u8SetPinValue>
	if(iniIsFinich)
    13fc:	80 91 b8 01 	lds	r24, 0x01B8
    1400:	88 23       	and	r24, r24
    1402:	09 f4       	brne	.+2      	; 0x1406 <CLCD_voidSendCommand+0x136>
    1404:	8c c0       	rjmp	.+280    	; 0x151e <CLCD_voidSendCommand+0x24e>
	{
		Local_u8Mask = 0b11110000;
    1406:	80 ef       	ldi	r24, 0xF0	; 240
    1408:	8b a7       	std	Y+43, r24	; 0x2b
		Local_u8Mask = ~(Local_u8Mask) & Copy_u8Command;
    140a:	8b a5       	ldd	r24, Y+43	; 0x2b
    140c:	98 2f       	mov	r25, r24
    140e:	90 95       	com	r25
    1410:	8c a5       	ldd	r24, Y+44	; 0x2c
    1412:	89 23       	and	r24, r25
    1414:	8b a7       	std	Y+43, r24	; 0x2b
		DIO_u8SetPortValue(CLCD_DATA_PORT, (Local_u8Mask << 4));
    1416:	8b a5       	ldd	r24, Y+43	; 0x2b
    1418:	98 2f       	mov	r25, r24
    141a:	92 95       	swap	r25
    141c:	90 7f       	andi	r25, 0xF0	; 240
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	69 2f       	mov	r22, r25
    1422:	0e 94 4a 11 	call	0x2294	; 0x2294 <DIO_u8SetPortValue>
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_HIGH);
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	62 e0       	ldi	r22, 0x02	; 2
    142a:	41 e0       	ldi	r20, 0x01	; 1
    142c:	0e 94 31 10 	call	0x2062	; 0x2062 <DIO_u8SetPinValue>
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	a0 e0       	ldi	r26, 0x00	; 0
    1436:	b0 e4       	ldi	r27, 0x40	; 64
    1438:	89 8f       	std	Y+25, r24	; 0x19
    143a:	9a 8f       	std	Y+26, r25	; 0x1a
    143c:	ab 8f       	std	Y+27, r26	; 0x1b
    143e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1440:	69 8d       	ldd	r22, Y+25	; 0x19
    1442:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1444:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1446:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	4a ef       	ldi	r20, 0xFA	; 250
    144e:	54 e4       	ldi	r21, 0x44	; 68
    1450:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1454:	dc 01       	movw	r26, r24
    1456:	cb 01       	movw	r24, r22
    1458:	8d 8b       	std	Y+21, r24	; 0x15
    145a:	9e 8b       	std	Y+22, r25	; 0x16
    145c:	af 8b       	std	Y+23, r26	; 0x17
    145e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1460:	6d 89       	ldd	r22, Y+21	; 0x15
    1462:	7e 89       	ldd	r23, Y+22	; 0x16
    1464:	8f 89       	ldd	r24, Y+23	; 0x17
    1466:	98 8d       	ldd	r25, Y+24	; 0x18
    1468:	20 e0       	ldi	r18, 0x00	; 0
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	40 e8       	ldi	r20, 0x80	; 128
    146e:	5f e3       	ldi	r21, 0x3F	; 63
    1470:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1474:	88 23       	and	r24, r24
    1476:	2c f4       	brge	.+10     	; 0x1482 <CLCD_voidSendCommand+0x1b2>
		__ticks = 1;
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	9c 8b       	std	Y+20, r25	; 0x14
    147e:	8b 8b       	std	Y+19, r24	; 0x13
    1480:	3f c0       	rjmp	.+126    	; 0x1500 <CLCD_voidSendCommand+0x230>
	else if (__tmp > 65535)
    1482:	6d 89       	ldd	r22, Y+21	; 0x15
    1484:	7e 89       	ldd	r23, Y+22	; 0x16
    1486:	8f 89       	ldd	r24, Y+23	; 0x17
    1488:	98 8d       	ldd	r25, Y+24	; 0x18
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	3f ef       	ldi	r19, 0xFF	; 255
    148e:	4f e7       	ldi	r20, 0x7F	; 127
    1490:	57 e4       	ldi	r21, 0x47	; 71
    1492:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1496:	18 16       	cp	r1, r24
    1498:	4c f5       	brge	.+82     	; 0x14ec <CLCD_voidSendCommand+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    149a:	69 8d       	ldd	r22, Y+25	; 0x19
    149c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    149e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	40 e2       	ldi	r20, 0x20	; 32
    14a8:	51 e4       	ldi	r21, 0x41	; 65
    14aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	bc 01       	movw	r22, r24
    14b4:	cd 01       	movw	r24, r26
    14b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ba:	dc 01       	movw	r26, r24
    14bc:	cb 01       	movw	r24, r22
    14be:	9c 8b       	std	Y+20, r25	; 0x14
    14c0:	8b 8b       	std	Y+19, r24	; 0x13
    14c2:	0f c0       	rjmp	.+30     	; 0x14e2 <CLCD_voidSendCommand+0x212>
    14c4:	88 ec       	ldi	r24, 0xC8	; 200
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	9a 8b       	std	Y+18, r25	; 0x12
    14ca:	89 8b       	std	Y+17, r24	; 0x11
    14cc:	89 89       	ldd	r24, Y+17	; 0x11
    14ce:	9a 89       	ldd	r25, Y+18	; 0x12
    14d0:	01 97       	sbiw	r24, 0x01	; 1
    14d2:	f1 f7       	brne	.-4      	; 0x14d0 <CLCD_voidSendCommand+0x200>
    14d4:	9a 8b       	std	Y+18, r25	; 0x12
    14d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d8:	8b 89       	ldd	r24, Y+19	; 0x13
    14da:	9c 89       	ldd	r25, Y+20	; 0x14
    14dc:	01 97       	sbiw	r24, 0x01	; 1
    14de:	9c 8b       	std	Y+20, r25	; 0x14
    14e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e2:	8b 89       	ldd	r24, Y+19	; 0x13
    14e4:	9c 89       	ldd	r25, Y+20	; 0x14
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	69 f7       	brne	.-38     	; 0x14c4 <CLCD_voidSendCommand+0x1f4>
    14ea:	14 c0       	rjmp	.+40     	; 0x1514 <CLCD_voidSendCommand+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ec:	6d 89       	ldd	r22, Y+21	; 0x15
    14ee:	7e 89       	ldd	r23, Y+22	; 0x16
    14f0:	8f 89       	ldd	r24, Y+23	; 0x17
    14f2:	98 8d       	ldd	r25, Y+24	; 0x18
    14f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f8:	dc 01       	movw	r26, r24
    14fa:	cb 01       	movw	r24, r22
    14fc:	9c 8b       	std	Y+20, r25	; 0x14
    14fe:	8b 8b       	std	Y+19, r24	; 0x13
    1500:	8b 89       	ldd	r24, Y+19	; 0x13
    1502:	9c 89       	ldd	r25, Y+20	; 0x14
    1504:	98 8b       	std	Y+16, r25	; 0x10
    1506:	8f 87       	std	Y+15, r24	; 0x0f
    1508:	8f 85       	ldd	r24, Y+15	; 0x0f
    150a:	98 89       	ldd	r25, Y+16	; 0x10
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	f1 f7       	brne	.-4      	; 0x150c <CLCD_voidSendCommand+0x23c>
    1510:	98 8b       	std	Y+16, r25	; 0x10
    1512:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	62 e0       	ldi	r22, 0x02	; 2
    1518:	40 e0       	ldi	r20, 0x00	; 0
    151a:	0e 94 31 10 	call	0x2062	; 0x2062 <DIO_u8SetPinValue>
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	a0 e0       	ldi	r26, 0x00	; 0
    1524:	b0 e4       	ldi	r27, 0x40	; 64
    1526:	8b 87       	std	Y+11, r24	; 0x0b
    1528:	9c 87       	std	Y+12, r25	; 0x0c
    152a:	ad 87       	std	Y+13, r26	; 0x0d
    152c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    152e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1530:	7c 85       	ldd	r23, Y+12	; 0x0c
    1532:	8d 85       	ldd	r24, Y+13	; 0x0d
    1534:	9e 85       	ldd	r25, Y+14	; 0x0e
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	4a ef       	ldi	r20, 0xFA	; 250
    153c:	54 e4       	ldi	r21, 0x44	; 68
    153e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1542:	dc 01       	movw	r26, r24
    1544:	cb 01       	movw	r24, r22
    1546:	8f 83       	std	Y+7, r24	; 0x07
    1548:	98 87       	std	Y+8, r25	; 0x08
    154a:	a9 87       	std	Y+9, r26	; 0x09
    154c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    154e:	6f 81       	ldd	r22, Y+7	; 0x07
    1550:	78 85       	ldd	r23, Y+8	; 0x08
    1552:	89 85       	ldd	r24, Y+9	; 0x09
    1554:	9a 85       	ldd	r25, Y+10	; 0x0a
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	40 e8       	ldi	r20, 0x80	; 128
    155c:	5f e3       	ldi	r21, 0x3F	; 63
    155e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1562:	88 23       	and	r24, r24
    1564:	2c f4       	brge	.+10     	; 0x1570 <CLCD_voidSendCommand+0x2a0>
		__ticks = 1;
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	9e 83       	std	Y+6, r25	; 0x06
    156c:	8d 83       	std	Y+5, r24	; 0x05
    156e:	3f c0       	rjmp	.+126    	; 0x15ee <CLCD_voidSendCommand+0x31e>
	else if (__tmp > 65535)
    1570:	6f 81       	ldd	r22, Y+7	; 0x07
    1572:	78 85       	ldd	r23, Y+8	; 0x08
    1574:	89 85       	ldd	r24, Y+9	; 0x09
    1576:	9a 85       	ldd	r25, Y+10	; 0x0a
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	3f ef       	ldi	r19, 0xFF	; 255
    157c:	4f e7       	ldi	r20, 0x7F	; 127
    157e:	57 e4       	ldi	r21, 0x47	; 71
    1580:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1584:	18 16       	cp	r1, r24
    1586:	4c f5       	brge	.+82     	; 0x15da <CLCD_voidSendCommand+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1588:	6b 85       	ldd	r22, Y+11	; 0x0b
    158a:	7c 85       	ldd	r23, Y+12	; 0x0c
    158c:	8d 85       	ldd	r24, Y+13	; 0x0d
    158e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	40 e2       	ldi	r20, 0x20	; 32
    1596:	51 e4       	ldi	r21, 0x41	; 65
    1598:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
    15a0:	bc 01       	movw	r22, r24
    15a2:	cd 01       	movw	r24, r26
    15a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a8:	dc 01       	movw	r26, r24
    15aa:	cb 01       	movw	r24, r22
    15ac:	9e 83       	std	Y+6, r25	; 0x06
    15ae:	8d 83       	std	Y+5, r24	; 0x05
    15b0:	0f c0       	rjmp	.+30     	; 0x15d0 <CLCD_voidSendCommand+0x300>
    15b2:	88 ec       	ldi	r24, 0xC8	; 200
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	9c 83       	std	Y+4, r25	; 0x04
    15b8:	8b 83       	std	Y+3, r24	; 0x03
    15ba:	8b 81       	ldd	r24, Y+3	; 0x03
    15bc:	9c 81       	ldd	r25, Y+4	; 0x04
    15be:	01 97       	sbiw	r24, 0x01	; 1
    15c0:	f1 f7       	brne	.-4      	; 0x15be <CLCD_voidSendCommand+0x2ee>
    15c2:	9c 83       	std	Y+4, r25	; 0x04
    15c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15c6:	8d 81       	ldd	r24, Y+5	; 0x05
    15c8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ca:	01 97       	sbiw	r24, 0x01	; 1
    15cc:	9e 83       	std	Y+6, r25	; 0x06
    15ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d0:	8d 81       	ldd	r24, Y+5	; 0x05
    15d2:	9e 81       	ldd	r25, Y+6	; 0x06
    15d4:	00 97       	sbiw	r24, 0x00	; 0
    15d6:	69 f7       	brne	.-38     	; 0x15b2 <CLCD_voidSendCommand+0x2e2>
    15d8:	14 c0       	rjmp	.+40     	; 0x1602 <CLCD_voidSendCommand+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15da:	6f 81       	ldd	r22, Y+7	; 0x07
    15dc:	78 85       	ldd	r23, Y+8	; 0x08
    15de:	89 85       	ldd	r24, Y+9	; 0x09
    15e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e6:	dc 01       	movw	r26, r24
    15e8:	cb 01       	movw	r24, r22
    15ea:	9e 83       	std	Y+6, r25	; 0x06
    15ec:	8d 83       	std	Y+5, r24	; 0x05
    15ee:	8d 81       	ldd	r24, Y+5	; 0x05
    15f0:	9e 81       	ldd	r25, Y+6	; 0x06
    15f2:	9a 83       	std	Y+2, r25	; 0x02
    15f4:	89 83       	std	Y+1, r24	; 0x01
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	9a 81       	ldd	r25, Y+2	; 0x02
    15fa:	01 97       	sbiw	r24, 0x01	; 1
    15fc:	f1 f7       	brne	.-4      	; 0x15fa <CLCD_voidSendCommand+0x32a>
    15fe:	9a 83       	std	Y+2, r25	; 0x02
    1600:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
#else
#error "In correct cconfigrtion of LCD_MODE"
#endif

}
    1602:	ac 96       	adiw	r28, 0x2c	; 44
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	f8 94       	cli
    1608:	de bf       	out	0x3e, r29	; 62
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	cd bf       	out	0x3d, r28	; 61
    160e:	cf 91       	pop	r28
    1610:	df 91       	pop	r29
    1612:	08 95       	ret

00001614 <CLCD_Read_BF_AC>:
u8 CLCD_Read_BF_AC() {
    1614:	df 93       	push	r29
    1616:	cf 93       	push	r28
    1618:	00 d0       	rcall	.+0      	; 0x161a <CLCD_Read_BF_AC+0x6>
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Address = 0;
    161e:	1a 82       	std	Y+2, r1	; 0x02
	/*PIN RS SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_PIN_LOW);
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	40 e0       	ldi	r20, 0x00	; 0
    1626:	0e 94 31 10 	call	0x2062	; 0x2062 <DIO_u8SetPinValue>
	/*PIN RW SET HIGH  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_PIN_HIGH);
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	61 e0       	ldi	r22, 0x01	; 1
    162e:	41 e0       	ldi	r20, 0x01	; 1
    1630:	0e 94 31 10 	call	0x2062	; 0x2062 <DIO_u8SetPinValue>
	/*PIN SET  send pulse (E) */
	for (u8 i = 0; i < 7; i++) {
    1634:	19 82       	std	Y+1, r1	; 0x01
    1636:	1c c0       	rjmp	.+56     	; 0x1670 <CLCD_Read_BF_AC+0x5c>
		DIO_u8GetPinValue(CLCD_DATA_PORT, i, &Local_u8Address);
    1638:	9e 01       	movw	r18, r28
    163a:	2e 5f       	subi	r18, 0xFE	; 254
    163c:	3f 4f       	sbci	r19, 0xFF	; 255
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	69 81       	ldd	r22, Y+1	; 0x01
    1642:	a9 01       	movw	r20, r18
    1644:	0e 94 98 11 	call	0x2330	; 0x2330 <DIO_u8GetPinValue>
		Local_u8Address += Local_u8Address << i;
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	88 2f       	mov	r24, r24
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	a9 01       	movw	r20, r18
    1656:	02 c0       	rjmp	.+4      	; 0x165c <CLCD_Read_BF_AC+0x48>
    1658:	44 0f       	add	r20, r20
    165a:	55 1f       	adc	r21, r21
    165c:	8a 95       	dec	r24
    165e:	e2 f7       	brpl	.-8      	; 0x1658 <CLCD_Read_BF_AC+0x44>
    1660:	ca 01       	movw	r24, r20
    1662:	98 2f       	mov	r25, r24
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	89 0f       	add	r24, r25
    1668:	8a 83       	std	Y+2, r24	; 0x02
	/*PIN RS SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_PIN_LOW);
	/*PIN RW SET HIGH  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_PIN_HIGH);
	/*PIN SET  send pulse (E) */
	for (u8 i = 0; i < 7; i++) {
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	8f 5f       	subi	r24, 0xFF	; 255
    166e:	89 83       	std	Y+1, r24	; 0x01
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	87 30       	cpi	r24, 0x07	; 7
    1674:	08 f3       	brcs	.-62     	; 0x1638 <CLCD_Read_BF_AC+0x24>
		DIO_u8GetPinValue(CLCD_DATA_PORT, i, &Local_u8Address);
		Local_u8Address += Local_u8Address << i;
	}
	return Local_u8Address;
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	cf 91       	pop	r28
    167e:	df 91       	pop	r29
    1680:	08 95       	ret

00001682 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    1682:	df 93       	push	r29
    1684:	cf 93       	push	r28
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
    168a:	ac 97       	sbiw	r28, 0x2c	; 44
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	f8 94       	cli
    1690:	de bf       	out	0x3e, r29	; 62
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	cd bf       	out	0x3d, r28	; 61
    1696:	8c a7       	std	Y+44, r24	; 0x2c
	if (Local_u8Address > 0x0f)
		CLCD_voidSendCommand(0x0C);
	else
		CLCD_voidSendCommand(0x06);
#elif CLCD_CHIOCE_MODE==_4_BIT_MODE
	u8 Local_u8Mask = 0b11110000;
    1698:	80 ef       	ldi	r24, 0xF0	; 240
    169a:	8b a7       	std	Y+43, r24	; 0x2b
	/*PIN RS SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_PIN_HIGH);
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	60 e0       	ldi	r22, 0x00	; 0
    16a0:	41 e0       	ldi	r20, 0x01	; 1
    16a2:	0e 94 31 10 	call	0x2062	; 0x2062 <DIO_u8SetPinValue>
	/*PIN RW SET LOW  */
	//DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_PIN_LOW);
	/*PORT SET COMMAND*/
	Local_u8Mask &= Copy_u8Data;
    16a6:	9b a5       	ldd	r25, Y+43	; 0x2b
    16a8:	8c a5       	ldd	r24, Y+44	; 0x2c
    16aa:	89 23       	and	r24, r25
    16ac:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Mask);
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	6b a5       	ldd	r22, Y+43	; 0x2b
    16b2:	0e 94 4a 11 	call	0x2294	; 0x2294 <DIO_u8SetPortValue>
	/*PIN SET send pulse (E) */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_HIGH);
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	62 e0       	ldi	r22, 0x02	; 2
    16ba:	41 e0       	ldi	r20, 0x01	; 1
    16bc:	0e 94 31 10 	call	0x2062	; 0x2062 <DIO_u8SetPinValue>
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	a0 e0       	ldi	r26, 0x00	; 0
    16c6:	b0 e4       	ldi	r27, 0x40	; 64
    16c8:	8f a3       	std	Y+39, r24	; 0x27
    16ca:	98 a7       	std	Y+40, r25	; 0x28
    16cc:	a9 a7       	std	Y+41, r26	; 0x29
    16ce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16d0:	6f a1       	ldd	r22, Y+39	; 0x27
    16d2:	78 a5       	ldd	r23, Y+40	; 0x28
    16d4:	89 a5       	ldd	r24, Y+41	; 0x29
    16d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	4a ef       	ldi	r20, 0xFA	; 250
    16de:	54 e4       	ldi	r21, 0x44	; 68
    16e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	8b a3       	std	Y+35, r24	; 0x23
    16ea:	9c a3       	std	Y+36, r25	; 0x24
    16ec:	ad a3       	std	Y+37, r26	; 0x25
    16ee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16f0:	6b a1       	ldd	r22, Y+35	; 0x23
    16f2:	7c a1       	ldd	r23, Y+36	; 0x24
    16f4:	8d a1       	ldd	r24, Y+37	; 0x25
    16f6:	9e a1       	ldd	r25, Y+38	; 0x26
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	40 e8       	ldi	r20, 0x80	; 128
    16fe:	5f e3       	ldi	r21, 0x3F	; 63
    1700:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1704:	88 23       	and	r24, r24
    1706:	2c f4       	brge	.+10     	; 0x1712 <CLCD_voidSendData+0x90>
		__ticks = 1;
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	9a a3       	std	Y+34, r25	; 0x22
    170e:	89 a3       	std	Y+33, r24	; 0x21
    1710:	3f c0       	rjmp	.+126    	; 0x1790 <CLCD_voidSendData+0x10e>
	else if (__tmp > 65535)
    1712:	6b a1       	ldd	r22, Y+35	; 0x23
    1714:	7c a1       	ldd	r23, Y+36	; 0x24
    1716:	8d a1       	ldd	r24, Y+37	; 0x25
    1718:	9e a1       	ldd	r25, Y+38	; 0x26
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	3f ef       	ldi	r19, 0xFF	; 255
    171e:	4f e7       	ldi	r20, 0x7F	; 127
    1720:	57 e4       	ldi	r21, 0x47	; 71
    1722:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1726:	18 16       	cp	r1, r24
    1728:	4c f5       	brge	.+82     	; 0x177c <CLCD_voidSendData+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    172a:	6f a1       	ldd	r22, Y+39	; 0x27
    172c:	78 a5       	ldd	r23, Y+40	; 0x28
    172e:	89 a5       	ldd	r24, Y+41	; 0x29
    1730:	9a a5       	ldd	r25, Y+42	; 0x2a
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	40 e2       	ldi	r20, 0x20	; 32
    1738:	51 e4       	ldi	r21, 0x41	; 65
    173a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	bc 01       	movw	r22, r24
    1744:	cd 01       	movw	r24, r26
    1746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	9a a3       	std	Y+34, r25	; 0x22
    1750:	89 a3       	std	Y+33, r24	; 0x21
    1752:	0f c0       	rjmp	.+30     	; 0x1772 <CLCD_voidSendData+0xf0>
    1754:	88 ec       	ldi	r24, 0xC8	; 200
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	98 a3       	std	Y+32, r25	; 0x20
    175a:	8f 8f       	std	Y+31, r24	; 0x1f
    175c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    175e:	98 a1       	ldd	r25, Y+32	; 0x20
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	f1 f7       	brne	.-4      	; 0x1760 <CLCD_voidSendData+0xde>
    1764:	98 a3       	std	Y+32, r25	; 0x20
    1766:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1768:	89 a1       	ldd	r24, Y+33	; 0x21
    176a:	9a a1       	ldd	r25, Y+34	; 0x22
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	9a a3       	std	Y+34, r25	; 0x22
    1770:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1772:	89 a1       	ldd	r24, Y+33	; 0x21
    1774:	9a a1       	ldd	r25, Y+34	; 0x22
    1776:	00 97       	sbiw	r24, 0x00	; 0
    1778:	69 f7       	brne	.-38     	; 0x1754 <CLCD_voidSendData+0xd2>
    177a:	14 c0       	rjmp	.+40     	; 0x17a4 <CLCD_voidSendData+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    177c:	6b a1       	ldd	r22, Y+35	; 0x23
    177e:	7c a1       	ldd	r23, Y+36	; 0x24
    1780:	8d a1       	ldd	r24, Y+37	; 0x25
    1782:	9e a1       	ldd	r25, Y+38	; 0x26
    1784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	9a a3       	std	Y+34, r25	; 0x22
    178e:	89 a3       	std	Y+33, r24	; 0x21
    1790:	89 a1       	ldd	r24, Y+33	; 0x21
    1792:	9a a1       	ldd	r25, Y+34	; 0x22
    1794:	9e 8f       	std	Y+30, r25	; 0x1e
    1796:	8d 8f       	std	Y+29, r24	; 0x1d
    1798:	8d 8d       	ldd	r24, Y+29	; 0x1d
    179a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	f1 f7       	brne	.-4      	; 0x179c <CLCD_voidSendData+0x11a>
    17a0:	9e 8f       	std	Y+30, r25	; 0x1e
    17a2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	62 e0       	ldi	r22, 0x02	; 2
    17a8:	40 e0       	ldi	r20, 0x00	; 0
    17aa:	0e 94 31 10 	call	0x2062	; 0x2062 <DIO_u8SetPinValue>
	Local_u8Mask=0b11110000;
    17ae:	80 ef       	ldi	r24, 0xF0	; 240
    17b0:	8b a7       	std	Y+43, r24	; 0x2b
	Local_u8Mask = ~(Local_u8Mask) & Copy_u8Data;
    17b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    17b4:	98 2f       	mov	r25, r24
    17b6:	90 95       	com	r25
    17b8:	8c a5       	ldd	r24, Y+44	; 0x2c
    17ba:	89 23       	and	r24, r25
    17bc:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPortValue(CLCD_DATA_PORT, (Local_u8Mask << 4));
    17be:	8b a5       	ldd	r24, Y+43	; 0x2b
    17c0:	98 2f       	mov	r25, r24
    17c2:	92 95       	swap	r25
    17c4:	90 7f       	andi	r25, 0xF0	; 240
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	69 2f       	mov	r22, r25
    17ca:	0e 94 4a 11 	call	0x2294	; 0x2294 <DIO_u8SetPortValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_HIGH);
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	62 e0       	ldi	r22, 0x02	; 2
    17d2:	41 e0       	ldi	r20, 0x01	; 1
    17d4:	0e 94 31 10 	call	0x2062	; 0x2062 <DIO_u8SetPinValue>
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	a0 e0       	ldi	r26, 0x00	; 0
    17de:	b0 e4       	ldi	r27, 0x40	; 64
    17e0:	89 8f       	std	Y+25, r24	; 0x19
    17e2:	9a 8f       	std	Y+26, r25	; 0x1a
    17e4:	ab 8f       	std	Y+27, r26	; 0x1b
    17e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e8:	69 8d       	ldd	r22, Y+25	; 0x19
    17ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	4a ef       	ldi	r20, 0xFA	; 250
    17f6:	54 e4       	ldi	r21, 0x44	; 68
    17f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	8d 8b       	std	Y+21, r24	; 0x15
    1802:	9e 8b       	std	Y+22, r25	; 0x16
    1804:	af 8b       	std	Y+23, r26	; 0x17
    1806:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1808:	6d 89       	ldd	r22, Y+21	; 0x15
    180a:	7e 89       	ldd	r23, Y+22	; 0x16
    180c:	8f 89       	ldd	r24, Y+23	; 0x17
    180e:	98 8d       	ldd	r25, Y+24	; 0x18
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	40 e8       	ldi	r20, 0x80	; 128
    1816:	5f e3       	ldi	r21, 0x3F	; 63
    1818:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    181c:	88 23       	and	r24, r24
    181e:	2c f4       	brge	.+10     	; 0x182a <CLCD_voidSendData+0x1a8>
		__ticks = 1;
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	9c 8b       	std	Y+20, r25	; 0x14
    1826:	8b 8b       	std	Y+19, r24	; 0x13
    1828:	3f c0       	rjmp	.+126    	; 0x18a8 <CLCD_voidSendData+0x226>
	else if (__tmp > 65535)
    182a:	6d 89       	ldd	r22, Y+21	; 0x15
    182c:	7e 89       	ldd	r23, Y+22	; 0x16
    182e:	8f 89       	ldd	r24, Y+23	; 0x17
    1830:	98 8d       	ldd	r25, Y+24	; 0x18
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	3f ef       	ldi	r19, 0xFF	; 255
    1836:	4f e7       	ldi	r20, 0x7F	; 127
    1838:	57 e4       	ldi	r21, 0x47	; 71
    183a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    183e:	18 16       	cp	r1, r24
    1840:	4c f5       	brge	.+82     	; 0x1894 <CLCD_voidSendData+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1842:	69 8d       	ldd	r22, Y+25	; 0x19
    1844:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1846:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1848:	9c 8d       	ldd	r25, Y+28	; 0x1c
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	40 e2       	ldi	r20, 0x20	; 32
    1850:	51 e4       	ldi	r21, 0x41	; 65
    1852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	bc 01       	movw	r22, r24
    185c:	cd 01       	movw	r24, r26
    185e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	9c 8b       	std	Y+20, r25	; 0x14
    1868:	8b 8b       	std	Y+19, r24	; 0x13
    186a:	0f c0       	rjmp	.+30     	; 0x188a <CLCD_voidSendData+0x208>
    186c:	88 ec       	ldi	r24, 0xC8	; 200
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	9a 8b       	std	Y+18, r25	; 0x12
    1872:	89 8b       	std	Y+17, r24	; 0x11
    1874:	89 89       	ldd	r24, Y+17	; 0x11
    1876:	9a 89       	ldd	r25, Y+18	; 0x12
    1878:	01 97       	sbiw	r24, 0x01	; 1
    187a:	f1 f7       	brne	.-4      	; 0x1878 <CLCD_voidSendData+0x1f6>
    187c:	9a 8b       	std	Y+18, r25	; 0x12
    187e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1880:	8b 89       	ldd	r24, Y+19	; 0x13
    1882:	9c 89       	ldd	r25, Y+20	; 0x14
    1884:	01 97       	sbiw	r24, 0x01	; 1
    1886:	9c 8b       	std	Y+20, r25	; 0x14
    1888:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    188a:	8b 89       	ldd	r24, Y+19	; 0x13
    188c:	9c 89       	ldd	r25, Y+20	; 0x14
    188e:	00 97       	sbiw	r24, 0x00	; 0
    1890:	69 f7       	brne	.-38     	; 0x186c <CLCD_voidSendData+0x1ea>
    1892:	14 c0       	rjmp	.+40     	; 0x18bc <CLCD_voidSendData+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1894:	6d 89       	ldd	r22, Y+21	; 0x15
    1896:	7e 89       	ldd	r23, Y+22	; 0x16
    1898:	8f 89       	ldd	r24, Y+23	; 0x17
    189a:	98 8d       	ldd	r25, Y+24	; 0x18
    189c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	9c 8b       	std	Y+20, r25	; 0x14
    18a6:	8b 8b       	std	Y+19, r24	; 0x13
    18a8:	8b 89       	ldd	r24, Y+19	; 0x13
    18aa:	9c 89       	ldd	r25, Y+20	; 0x14
    18ac:	98 8b       	std	Y+16, r25	; 0x10
    18ae:	8f 87       	std	Y+15, r24	; 0x0f
    18b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    18b2:	98 89       	ldd	r25, Y+16	; 0x10
    18b4:	01 97       	sbiw	r24, 0x01	; 1
    18b6:	f1 f7       	brne	.-4      	; 0x18b4 <CLCD_voidSendData+0x232>
    18b8:	98 8b       	std	Y+16, r25	; 0x10
    18ba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	62 e0       	ldi	r22, 0x02	; 2
    18c0:	40 e0       	ldi	r20, 0x00	; 0
    18c2:	0e 94 31 10 	call	0x2062	; 0x2062 <DIO_u8SetPinValue>
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	a0 e0       	ldi	r26, 0x00	; 0
    18cc:	b0 e4       	ldi	r27, 0x40	; 64
    18ce:	8b 87       	std	Y+11, r24	; 0x0b
    18d0:	9c 87       	std	Y+12, r25	; 0x0c
    18d2:	ad 87       	std	Y+13, r26	; 0x0d
    18d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    18d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    18da:	8d 85       	ldd	r24, Y+13	; 0x0d
    18dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	4a ef       	ldi	r20, 0xFA	; 250
    18e4:	54 e4       	ldi	r21, 0x44	; 68
    18e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	8f 83       	std	Y+7, r24	; 0x07
    18f0:	98 87       	std	Y+8, r25	; 0x08
    18f2:	a9 87       	std	Y+9, r26	; 0x09
    18f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18f6:	6f 81       	ldd	r22, Y+7	; 0x07
    18f8:	78 85       	ldd	r23, Y+8	; 0x08
    18fa:	89 85       	ldd	r24, Y+9	; 0x09
    18fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	40 e8       	ldi	r20, 0x80	; 128
    1904:	5f e3       	ldi	r21, 0x3F	; 63
    1906:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    190a:	88 23       	and	r24, r24
    190c:	2c f4       	brge	.+10     	; 0x1918 <CLCD_voidSendData+0x296>
		__ticks = 1;
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	9e 83       	std	Y+6, r25	; 0x06
    1914:	8d 83       	std	Y+5, r24	; 0x05
    1916:	3f c0       	rjmp	.+126    	; 0x1996 <CLCD_voidSendData+0x314>
	else if (__tmp > 65535)
    1918:	6f 81       	ldd	r22, Y+7	; 0x07
    191a:	78 85       	ldd	r23, Y+8	; 0x08
    191c:	89 85       	ldd	r24, Y+9	; 0x09
    191e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	3f ef       	ldi	r19, 0xFF	; 255
    1924:	4f e7       	ldi	r20, 0x7F	; 127
    1926:	57 e4       	ldi	r21, 0x47	; 71
    1928:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    192c:	18 16       	cp	r1, r24
    192e:	4c f5       	brge	.+82     	; 0x1982 <CLCD_voidSendData+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1930:	6b 85       	ldd	r22, Y+11	; 0x0b
    1932:	7c 85       	ldd	r23, Y+12	; 0x0c
    1934:	8d 85       	ldd	r24, Y+13	; 0x0d
    1936:	9e 85       	ldd	r25, Y+14	; 0x0e
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e2       	ldi	r20, 0x20	; 32
    193e:	51 e4       	ldi	r21, 0x41	; 65
    1940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	bc 01       	movw	r22, r24
    194a:	cd 01       	movw	r24, r26
    194c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1950:	dc 01       	movw	r26, r24
    1952:	cb 01       	movw	r24, r22
    1954:	9e 83       	std	Y+6, r25	; 0x06
    1956:	8d 83       	std	Y+5, r24	; 0x05
    1958:	0f c0       	rjmp	.+30     	; 0x1978 <CLCD_voidSendData+0x2f6>
    195a:	88 ec       	ldi	r24, 0xC8	; 200
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	9c 83       	std	Y+4, r25	; 0x04
    1960:	8b 83       	std	Y+3, r24	; 0x03
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	9c 81       	ldd	r25, Y+4	; 0x04
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	f1 f7       	brne	.-4      	; 0x1966 <CLCD_voidSendData+0x2e4>
    196a:	9c 83       	std	Y+4, r25	; 0x04
    196c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196e:	8d 81       	ldd	r24, Y+5	; 0x05
    1970:	9e 81       	ldd	r25, Y+6	; 0x06
    1972:	01 97       	sbiw	r24, 0x01	; 1
    1974:	9e 83       	std	Y+6, r25	; 0x06
    1976:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1978:	8d 81       	ldd	r24, Y+5	; 0x05
    197a:	9e 81       	ldd	r25, Y+6	; 0x06
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	69 f7       	brne	.-38     	; 0x195a <CLCD_voidSendData+0x2d8>
    1980:	14 c0       	rjmp	.+40     	; 0x19aa <CLCD_voidSendData+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1982:	6f 81       	ldd	r22, Y+7	; 0x07
    1984:	78 85       	ldd	r23, Y+8	; 0x08
    1986:	89 85       	ldd	r24, Y+9	; 0x09
    1988:	9a 85       	ldd	r25, Y+10	; 0x0a
    198a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	9e 83       	std	Y+6, r25	; 0x06
    1994:	8d 83       	std	Y+5, r24	; 0x05
    1996:	8d 81       	ldd	r24, Y+5	; 0x05
    1998:	9e 81       	ldd	r25, Y+6	; 0x06
    199a:	9a 83       	std	Y+2, r25	; 0x02
    199c:	89 83       	std	Y+1, r24	; 0x01
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	9a 81       	ldd	r25, Y+2	; 0x02
    19a2:	01 97       	sbiw	r24, 0x01	; 1
    19a4:	f1 f7       	brne	.-4      	; 0x19a2 <CLCD_voidSendData+0x320>
    19a6:	9a 83       	std	Y+2, r25	; 0x02
    19a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	CLCD_voidSendCommand(0x06);
    19aa:	86 e0       	ldi	r24, 0x06	; 6
    19ac:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
#else
#error "In correct cconfigrtion of LCD_MODE"
#endif
}
    19b0:	ac 96       	adiw	r28, 0x2c	; 44
    19b2:	0f b6       	in	r0, 0x3f	; 63
    19b4:	f8 94       	cli
    19b6:	de bf       	out	0x3e, r29	; 62
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	cd bf       	out	0x3d, r28	; 61
    19bc:	cf 91       	pop	r28
    19be:	df 91       	pop	r29
    19c0:	08 95       	ret

000019c2 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    19c2:	df 93       	push	r29
    19c4:	cf 93       	push	r28
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
    19ca:	e8 97       	sbiw	r28, 0x38	; 56
    19cc:	0f b6       	in	r0, 0x3f	; 63
    19ce:	f8 94       	cli
    19d0:	de bf       	out	0x3e, r29	; 62
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	cd bf       	out	0x3d, r28	; 61
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	a0 e2       	ldi	r26, 0x20	; 32
    19dc:	b2 e4       	ldi	r27, 0x42	; 66
    19de:	8d ab       	std	Y+53, r24	; 0x35
    19e0:	9e ab       	std	Y+54, r25	; 0x36
    19e2:	af ab       	std	Y+55, r26	; 0x37
    19e4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e6:	6d a9       	ldd	r22, Y+53	; 0x35
    19e8:	7e a9       	ldd	r23, Y+54	; 0x36
    19ea:	8f a9       	ldd	r24, Y+55	; 0x37
    19ec:	98 ad       	ldd	r25, Y+56	; 0x38
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	4a ef       	ldi	r20, 0xFA	; 250
    19f4:	54 e4       	ldi	r21, 0x44	; 68
    19f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	89 ab       	std	Y+49, r24	; 0x31
    1a00:	9a ab       	std	Y+50, r25	; 0x32
    1a02:	ab ab       	std	Y+51, r26	; 0x33
    1a04:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a06:	69 a9       	ldd	r22, Y+49	; 0x31
    1a08:	7a a9       	ldd	r23, Y+50	; 0x32
    1a0a:	8b a9       	ldd	r24, Y+51	; 0x33
    1a0c:	9c a9       	ldd	r25, Y+52	; 0x34
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	40 e8       	ldi	r20, 0x80	; 128
    1a14:	5f e3       	ldi	r21, 0x3F	; 63
    1a16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a1a:	88 23       	and	r24, r24
    1a1c:	2c f4       	brge	.+10     	; 0x1a28 <CLCD_voidInit+0x66>
		__ticks = 1;
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	98 ab       	std	Y+48, r25	; 0x30
    1a24:	8f a7       	std	Y+47, r24	; 0x2f
    1a26:	3f c0       	rjmp	.+126    	; 0x1aa6 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1a28:	69 a9       	ldd	r22, Y+49	; 0x31
    1a2a:	7a a9       	ldd	r23, Y+50	; 0x32
    1a2c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a2e:	9c a9       	ldd	r25, Y+52	; 0x34
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	3f ef       	ldi	r19, 0xFF	; 255
    1a34:	4f e7       	ldi	r20, 0x7F	; 127
    1a36:	57 e4       	ldi	r21, 0x47	; 71
    1a38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a3c:	18 16       	cp	r1, r24
    1a3e:	4c f5       	brge	.+82     	; 0x1a92 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a40:	6d a9       	ldd	r22, Y+53	; 0x35
    1a42:	7e a9       	ldd	r23, Y+54	; 0x36
    1a44:	8f a9       	ldd	r24, Y+55	; 0x37
    1a46:	98 ad       	ldd	r25, Y+56	; 0x38
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	40 e2       	ldi	r20, 0x20	; 32
    1a4e:	51 e4       	ldi	r21, 0x41	; 65
    1a50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	bc 01       	movw	r22, r24
    1a5a:	cd 01       	movw	r24, r26
    1a5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a60:	dc 01       	movw	r26, r24
    1a62:	cb 01       	movw	r24, r22
    1a64:	98 ab       	std	Y+48, r25	; 0x30
    1a66:	8f a7       	std	Y+47, r24	; 0x2f
    1a68:	0f c0       	rjmp	.+30     	; 0x1a88 <CLCD_voidInit+0xc6>
    1a6a:	88 ec       	ldi	r24, 0xC8	; 200
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	9e a7       	std	Y+46, r25	; 0x2e
    1a70:	8d a7       	std	Y+45, r24	; 0x2d
    1a72:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a74:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a76:	01 97       	sbiw	r24, 0x01	; 1
    1a78:	f1 f7       	brne	.-4      	; 0x1a76 <CLCD_voidInit+0xb4>
    1a7a:	9e a7       	std	Y+46, r25	; 0x2e
    1a7c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a80:	98 a9       	ldd	r25, Y+48	; 0x30
    1a82:	01 97       	sbiw	r24, 0x01	; 1
    1a84:	98 ab       	std	Y+48, r25	; 0x30
    1a86:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a88:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a8a:	98 a9       	ldd	r25, Y+48	; 0x30
    1a8c:	00 97       	sbiw	r24, 0x00	; 0
    1a8e:	69 f7       	brne	.-38     	; 0x1a6a <CLCD_voidInit+0xa8>
    1a90:	14 c0       	rjmp	.+40     	; 0x1aba <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a92:	69 a9       	ldd	r22, Y+49	; 0x31
    1a94:	7a a9       	ldd	r23, Y+50	; 0x32
    1a96:	8b a9       	ldd	r24, Y+51	; 0x33
    1a98:	9c a9       	ldd	r25, Y+52	; 0x34
    1a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	98 ab       	std	Y+48, r25	; 0x30
    1aa4:	8f a7       	std	Y+47, r24	; 0x2f
    1aa6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aa8:	98 a9       	ldd	r25, Y+48	; 0x30
    1aaa:	9c a7       	std	Y+44, r25	; 0x2c
    1aac:	8b a7       	std	Y+43, r24	; 0x2b
    1aae:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ab0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ab2:	01 97       	sbiw	r24, 0x01	; 1
    1ab4:	f1 f7       	brne	.-4      	; 0x1ab2 <CLCD_voidInit+0xf0>
    1ab6:	9c a7       	std	Y+44, r25	; 0x2c
    1ab8:	8b a7       	std	Y+43, r24	; 0x2b
	CLCD_voidSendCommand(0b00000001);
#elif CLCD_CHIOCE_MODE==_4_BIT_MODE
	/*WAIT FOR MORE THEN 30 MS*/
	_delay_ms(40);
	/*function set command: Set Bit 5 */
	CLCD_voidSendCommand(0b00100000);
    1aba:	80 e2       	ldi	r24, 0x20	; 32
    1abc:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(0b00100000);
    1ac0:	80 e2       	ldi	r24, 0x20	; 32
    1ac2:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>

	/*function set command:(7_Bit) N --> Lines,(6_Bit) F --> 5*8 font */
	CLCD_voidSendCommand(0b10000000);
    1ac6:	80 e8       	ldi	r24, 0x80	; 128
    1ac8:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	a0 e8       	ldi	r26, 0x80	; 128
    1ad2:	bf e3       	ldi	r27, 0x3F	; 63
    1ad4:	8f a3       	std	Y+39, r24	; 0x27
    1ad6:	98 a7       	std	Y+40, r25	; 0x28
    1ad8:	a9 a7       	std	Y+41, r26	; 0x29
    1ada:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1adc:	6f a1       	ldd	r22, Y+39	; 0x27
    1ade:	78 a5       	ldd	r23, Y+40	; 0x28
    1ae0:	89 a5       	ldd	r24, Y+41	; 0x29
    1ae2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	4a ef       	ldi	r20, 0xFA	; 250
    1aea:	54 e4       	ldi	r21, 0x44	; 68
    1aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	8b a3       	std	Y+35, r24	; 0x23
    1af6:	9c a3       	std	Y+36, r25	; 0x24
    1af8:	ad a3       	std	Y+37, r26	; 0x25
    1afa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1afc:	6b a1       	ldd	r22, Y+35	; 0x23
    1afe:	7c a1       	ldd	r23, Y+36	; 0x24
    1b00:	8d a1       	ldd	r24, Y+37	; 0x25
    1b02:	9e a1       	ldd	r25, Y+38	; 0x26
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	40 e8       	ldi	r20, 0x80	; 128
    1b0a:	5f e3       	ldi	r21, 0x3F	; 63
    1b0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b10:	88 23       	and	r24, r24
    1b12:	2c f4       	brge	.+10     	; 0x1b1e <CLCD_voidInit+0x15c>
		__ticks = 1;
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	9a a3       	std	Y+34, r25	; 0x22
    1b1a:	89 a3       	std	Y+33, r24	; 0x21
    1b1c:	3f c0       	rjmp	.+126    	; 0x1b9c <CLCD_voidInit+0x1da>
	else if (__tmp > 65535)
    1b1e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b20:	7c a1       	ldd	r23, Y+36	; 0x24
    1b22:	8d a1       	ldd	r24, Y+37	; 0x25
    1b24:	9e a1       	ldd	r25, Y+38	; 0x26
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	3f ef       	ldi	r19, 0xFF	; 255
    1b2a:	4f e7       	ldi	r20, 0x7F	; 127
    1b2c:	57 e4       	ldi	r21, 0x47	; 71
    1b2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b32:	18 16       	cp	r1, r24
    1b34:	4c f5       	brge	.+82     	; 0x1b88 <CLCD_voidInit+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b36:	6f a1       	ldd	r22, Y+39	; 0x27
    1b38:	78 a5       	ldd	r23, Y+40	; 0x28
    1b3a:	89 a5       	ldd	r24, Y+41	; 0x29
    1b3c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	40 e2       	ldi	r20, 0x20	; 32
    1b44:	51 e4       	ldi	r21, 0x41	; 65
    1b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	bc 01       	movw	r22, r24
    1b50:	cd 01       	movw	r24, r26
    1b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	9a a3       	std	Y+34, r25	; 0x22
    1b5c:	89 a3       	std	Y+33, r24	; 0x21
    1b5e:	0f c0       	rjmp	.+30     	; 0x1b7e <CLCD_voidInit+0x1bc>
    1b60:	88 ec       	ldi	r24, 0xC8	; 200
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	98 a3       	std	Y+32, r25	; 0x20
    1b66:	8f 8f       	std	Y+31, r24	; 0x1f
    1b68:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b6a:	98 a1       	ldd	r25, Y+32	; 0x20
    1b6c:	01 97       	sbiw	r24, 0x01	; 1
    1b6e:	f1 f7       	brne	.-4      	; 0x1b6c <CLCD_voidInit+0x1aa>
    1b70:	98 a3       	std	Y+32, r25	; 0x20
    1b72:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b74:	89 a1       	ldd	r24, Y+33	; 0x21
    1b76:	9a a1       	ldd	r25, Y+34	; 0x22
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	9a a3       	std	Y+34, r25	; 0x22
    1b7c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b7e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b80:	9a a1       	ldd	r25, Y+34	; 0x22
    1b82:	00 97       	sbiw	r24, 0x00	; 0
    1b84:	69 f7       	brne	.-38     	; 0x1b60 <CLCD_voidInit+0x19e>
    1b86:	14 c0       	rjmp	.+40     	; 0x1bb0 <CLCD_voidInit+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b88:	6b a1       	ldd	r22, Y+35	; 0x23
    1b8a:	7c a1       	ldd	r23, Y+36	; 0x24
    1b8c:	8d a1       	ldd	r24, Y+37	; 0x25
    1b8e:	9e a1       	ldd	r25, Y+38	; 0x26
    1b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	9a a3       	std	Y+34, r25	; 0x22
    1b9a:	89 a3       	std	Y+33, r24	; 0x21
    1b9c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b9e:	9a a1       	ldd	r25, Y+34	; 0x22
    1ba0:	9e 8f       	std	Y+30, r25	; 0x1e
    1ba2:	8d 8f       	std	Y+29, r24	; 0x1d
    1ba4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ba6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <CLCD_voidInit+0x1e6>
    1bac:	9e 8f       	std	Y+30, r25	; 0x1e
    1bae:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	CLCD_voidSendCommand(0b0000);
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
	/*Display No/00f ctrl  */
	/*Set Bit 7 ,(6_Bit) D --> display enable ,C --> disable cursor ,B --> no blink cursor*/
	CLCD_voidSendCommand(0b11000000);
    1bb6:	80 ec       	ldi	r24, 0xC0	; 192
    1bb8:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	a0 e8       	ldi	r26, 0x80	; 128
    1bc2:	bf e3       	ldi	r27, 0x3F	; 63
    1bc4:	89 8f       	std	Y+25, r24	; 0x19
    1bc6:	9a 8f       	std	Y+26, r25	; 0x1a
    1bc8:	ab 8f       	std	Y+27, r26	; 0x1b
    1bca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bcc:	69 8d       	ldd	r22, Y+25	; 0x19
    1bce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	4a ef       	ldi	r20, 0xFA	; 250
    1bda:	54 e4       	ldi	r21, 0x44	; 68
    1bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	8d 8b       	std	Y+21, r24	; 0x15
    1be6:	9e 8b       	std	Y+22, r25	; 0x16
    1be8:	af 8b       	std	Y+23, r26	; 0x17
    1bea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bec:	6d 89       	ldd	r22, Y+21	; 0x15
    1bee:	7e 89       	ldd	r23, Y+22	; 0x16
    1bf0:	8f 89       	ldd	r24, Y+23	; 0x17
    1bf2:	98 8d       	ldd	r25, Y+24	; 0x18
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	40 e8       	ldi	r20, 0x80	; 128
    1bfa:	5f e3       	ldi	r21, 0x3F	; 63
    1bfc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c00:	88 23       	and	r24, r24
    1c02:	2c f4       	brge	.+10     	; 0x1c0e <CLCD_voidInit+0x24c>
		__ticks = 1;
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	9c 8b       	std	Y+20, r25	; 0x14
    1c0a:	8b 8b       	std	Y+19, r24	; 0x13
    1c0c:	3f c0       	rjmp	.+126    	; 0x1c8c <CLCD_voidInit+0x2ca>
	else if (__tmp > 65535)
    1c0e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c10:	7e 89       	ldd	r23, Y+22	; 0x16
    1c12:	8f 89       	ldd	r24, Y+23	; 0x17
    1c14:	98 8d       	ldd	r25, Y+24	; 0x18
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	3f ef       	ldi	r19, 0xFF	; 255
    1c1a:	4f e7       	ldi	r20, 0x7F	; 127
    1c1c:	57 e4       	ldi	r21, 0x47	; 71
    1c1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c22:	18 16       	cp	r1, r24
    1c24:	4c f5       	brge	.+82     	; 0x1c78 <CLCD_voidInit+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c26:	69 8d       	ldd	r22, Y+25	; 0x19
    1c28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e2       	ldi	r20, 0x20	; 32
    1c34:	51 e4       	ldi	r21, 0x41	; 65
    1c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	bc 01       	movw	r22, r24
    1c40:	cd 01       	movw	r24, r26
    1c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	9c 8b       	std	Y+20, r25	; 0x14
    1c4c:	8b 8b       	std	Y+19, r24	; 0x13
    1c4e:	0f c0       	rjmp	.+30     	; 0x1c6e <CLCD_voidInit+0x2ac>
    1c50:	88 ec       	ldi	r24, 0xC8	; 200
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	9a 8b       	std	Y+18, r25	; 0x12
    1c56:	89 8b       	std	Y+17, r24	; 0x11
    1c58:	89 89       	ldd	r24, Y+17	; 0x11
    1c5a:	9a 89       	ldd	r25, Y+18	; 0x12
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	f1 f7       	brne	.-4      	; 0x1c5c <CLCD_voidInit+0x29a>
    1c60:	9a 8b       	std	Y+18, r25	; 0x12
    1c62:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c64:	8b 89       	ldd	r24, Y+19	; 0x13
    1c66:	9c 89       	ldd	r25, Y+20	; 0x14
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	9c 8b       	std	Y+20, r25	; 0x14
    1c6c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c70:	9c 89       	ldd	r25, Y+20	; 0x14
    1c72:	00 97       	sbiw	r24, 0x00	; 0
    1c74:	69 f7       	brne	.-38     	; 0x1c50 <CLCD_voidInit+0x28e>
    1c76:	14 c0       	rjmp	.+40     	; 0x1ca0 <CLCD_voidInit+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c78:	6d 89       	ldd	r22, Y+21	; 0x15
    1c7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	9c 8b       	std	Y+20, r25	; 0x14
    1c8a:	8b 8b       	std	Y+19, r24	; 0x13
    1c8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c8e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c90:	98 8b       	std	Y+16, r25	; 0x10
    1c92:	8f 87       	std	Y+15, r24	; 0x0f
    1c94:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c96:	98 89       	ldd	r25, Y+16	; 0x10
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	f1 f7       	brne	.-4      	; 0x1c98 <CLCD_voidInit+0x2d6>
    1c9c:	98 8b       	std	Y+16, r25	; 0x10
    1c9e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLCD_voidSendCommand(0b0000);
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
	/*Display Clear */
	CLCD_voidSendCommand(0b00010000);
    1ca6:	80 e1       	ldi	r24, 0x10	; 16
    1ca8:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	a0 e0       	ldi	r26, 0x00	; 0
    1cb2:	b0 e4       	ldi	r27, 0x40	; 64
    1cb4:	8b 87       	std	Y+11, r24	; 0x0b
    1cb6:	9c 87       	std	Y+12, r25	; 0x0c
    1cb8:	ad 87       	std	Y+13, r26	; 0x0d
    1cba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	4a ef       	ldi	r20, 0xFA	; 250
    1cca:	54 e4       	ldi	r21, 0x44	; 68
    1ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	8f 83       	std	Y+7, r24	; 0x07
    1cd6:	98 87       	std	Y+8, r25	; 0x08
    1cd8:	a9 87       	std	Y+9, r26	; 0x09
    1cda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cdc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cde:	78 85       	ldd	r23, Y+8	; 0x08
    1ce0:	89 85       	ldd	r24, Y+9	; 0x09
    1ce2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	40 e8       	ldi	r20, 0x80	; 128
    1cea:	5f e3       	ldi	r21, 0x3F	; 63
    1cec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cf0:	88 23       	and	r24, r24
    1cf2:	2c f4       	brge	.+10     	; 0x1cfe <CLCD_voidInit+0x33c>
		__ticks = 1;
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	9e 83       	std	Y+6, r25	; 0x06
    1cfa:	8d 83       	std	Y+5, r24	; 0x05
    1cfc:	3f c0       	rjmp	.+126    	; 0x1d7c <CLCD_voidInit+0x3ba>
	else if (__tmp > 65535)
    1cfe:	6f 81       	ldd	r22, Y+7	; 0x07
    1d00:	78 85       	ldd	r23, Y+8	; 0x08
    1d02:	89 85       	ldd	r24, Y+9	; 0x09
    1d04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	3f ef       	ldi	r19, 0xFF	; 255
    1d0a:	4f e7       	ldi	r20, 0x7F	; 127
    1d0c:	57 e4       	ldi	r21, 0x47	; 71
    1d0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d12:	18 16       	cp	r1, r24
    1d14:	4c f5       	brge	.+82     	; 0x1d68 <CLCD_voidInit+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	40 e2       	ldi	r20, 0x20	; 32
    1d24:	51 e4       	ldi	r21, 0x41	; 65
    1d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	bc 01       	movw	r22, r24
    1d30:	cd 01       	movw	r24, r26
    1d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	9e 83       	std	Y+6, r25	; 0x06
    1d3c:	8d 83       	std	Y+5, r24	; 0x05
    1d3e:	0f c0       	rjmp	.+30     	; 0x1d5e <CLCD_voidInit+0x39c>
    1d40:	88 ec       	ldi	r24, 0xC8	; 200
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	9c 83       	std	Y+4, r25	; 0x04
    1d46:	8b 83       	std	Y+3, r24	; 0x03
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	f1 f7       	brne	.-4      	; 0x1d4c <CLCD_voidInit+0x38a>
    1d50:	9c 83       	std	Y+4, r25	; 0x04
    1d52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d54:	8d 81       	ldd	r24, Y+5	; 0x05
    1d56:	9e 81       	ldd	r25, Y+6	; 0x06
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	9e 83       	std	Y+6, r25	; 0x06
    1d5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d60:	9e 81       	ldd	r25, Y+6	; 0x06
    1d62:	00 97       	sbiw	r24, 0x00	; 0
    1d64:	69 f7       	brne	.-38     	; 0x1d40 <CLCD_voidInit+0x37e>
    1d66:	14 c0       	rjmp	.+40     	; 0x1d90 <CLCD_voidInit+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d68:	6f 81       	ldd	r22, Y+7	; 0x07
    1d6a:	78 85       	ldd	r23, Y+8	; 0x08
    1d6c:	89 85       	ldd	r24, Y+9	; 0x09
    1d6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	9e 83       	std	Y+6, r25	; 0x06
    1d7a:	8d 83       	std	Y+5, r24	; 0x05
    1d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d80:	9a 83       	std	Y+2, r25	; 0x02
    1d82:	89 83       	std	Y+1, r24	; 0x01
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	9a 81       	ldd	r25, Y+2	; 0x02
    1d88:	01 97       	sbiw	r24, 0x01	; 1
    1d8a:	f1 f7       	brne	.-4      	; 0x1d88 <CLCD_voidInit+0x3c6>
    1d8c:	9a 83       	std	Y+2, r25	; 0x02
    1d8e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	iniIsFinich=1;
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	80 93 b8 01 	sts	0x01B8, r24
#else
#error "In correct cconfigrtion of LCD_MODE"
#endif
}
    1d96:	e8 96       	adiw	r28, 0x38	; 56
    1d98:	0f b6       	in	r0, 0x3f	; 63
    1d9a:	f8 94       	cli
    1d9c:	de bf       	out	0x3e, r29	; 62
    1d9e:	0f be       	out	0x3f, r0	; 63
    1da0:	cd bf       	out	0x3d, r28	; 61
    1da2:	cf 91       	pop	r28
    1da4:	df 91       	pop	r29
    1da6:	08 95       	ret

00001da8 <CLCD_voidSendString>:
void CLCD_voidSendString(const char* Copy_pcString)//char ASCII Value Constant not allow the func to change the sent string
{
    1da8:	df 93       	push	r29
    1daa:	cf 93       	push	r28
    1dac:	00 d0       	rcall	.+0      	; 0x1dae <CLCD_voidSendString+0x6>
    1dae:	0f 92       	push	r0
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	9b 83       	std	Y+3, r25	; 0x03
    1db6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8cnt=0;
    1db8:	19 82       	std	Y+1, r1	; 0x01
    1dba:	0e c0       	rjmp	.+28     	; 0x1dd8 <CLCD_voidSendString+0x30>
	while(Copy_pcString[Local_u8cnt]!='\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8cnt]);
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
    1dbe:	28 2f       	mov	r18, r24
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	e2 0f       	add	r30, r18
    1dca:	f3 1f       	adc	r31, r19
    1dcc:	80 81       	ld	r24, Z
    1dce:	0e 94 41 0b 	call	0x1682	; 0x1682 <CLCD_voidSendData>
		Local_u8cnt++;
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01
    1dd4:	8f 5f       	subi	r24, 0xFF	; 255
    1dd6:	89 83       	std	Y+1, r24	; 0x01
#endif
}
void CLCD_voidSendString(const char* Copy_pcString)//char ASCII Value Constant not allow the func to change the sent string
{
	u8 Local_u8cnt=0;
	while(Copy_pcString[Local_u8cnt]!='\0')
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	28 2f       	mov	r18, r24
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	9b 81       	ldd	r25, Y+3	; 0x03
    1de2:	fc 01       	movw	r30, r24
    1de4:	e2 0f       	add	r30, r18
    1de6:	f3 1f       	adc	r31, r19
    1de8:	80 81       	ld	r24, Z
    1dea:	88 23       	and	r24, r24
    1dec:	39 f7       	brne	.-50     	; 0x1dbc <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8cnt]);
		Local_u8cnt++;
	}
}
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	cf 91       	pop	r28
    1df6:	df 91       	pop	r29
    1df8:	08 95       	ret

00001dfa <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	00 d0       	rcall	.+0      	; 0x1e00 <CLCD_voidGoToXY+0x6>
    1e00:	0f 92       	push	r0
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    1e06:	8a 83       	std	Y+2, r24	; 0x02
    1e08:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	88 23       	and	r24, r24
    1e0e:	51 f4       	brne	.+20     	; 0x1e24 <CLCD_voidGoToXY+0x2a>
	{
		if (Copy_u8YPos > 15) {
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	80 31       	cpi	r24, 0x10	; 16
    1e14:	20 f0       	brcs	.+8      	; 0x1e1e <CLCD_voidGoToXY+0x24>
			Local_u8Address = 0x40 + Copy_u8YPos;
    1e16:	8b 81       	ldd	r24, Y+3	; 0x03
    1e18:	80 5c       	subi	r24, 0xC0	; 192
    1e1a:	89 83       	std	Y+1, r24	; 0x01
    1e1c:	09 c0       	rjmp	.+18     	; 0x1e30 <CLCD_voidGoToXY+0x36>
		} else {
			Local_u8Address = Copy_u8YPos;
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	89 83       	std	Y+1, r24	; 0x01
    1e22:	06 c0       	rjmp	.+12     	; 0x1e30 <CLCD_voidGoToXY+0x36>
		}
	}
	else if(Copy_u8XPos==1)
    1e24:	8a 81       	ldd	r24, Y+2	; 0x02
    1e26:	81 30       	cpi	r24, 0x01	; 1
    1e28:	19 f4       	brne	.+6      	; 0x1e30 <CLCD_voidGoToXY+0x36>
	{
		Local_u8Address=0x40+Copy_u8YPos;
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	80 5c       	subi	r24, 0xC0	; 192
    1e2e:	89 83       	std	Y+1, r24	; 0x01
	}
	//put command from data sheet
	CLCD_voidSendCommand(Local_u8Address+128);
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	80 58       	subi	r24, 0x80	; 128
    1e34:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>
}
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	cf 91       	pop	r28
    1e40:	df 91       	pop	r29
    1e42:	08 95       	ret

00001e44 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNmber,u8 Copy_u8XPos,u8 Copy_u8Ypos)
{
    1e44:	df 93       	push	r29
    1e46:	cf 93       	push	r28
    1e48:	cd b7       	in	r28, 0x3d	; 61
    1e4a:	de b7       	in	r29, 0x3e	; 62
    1e4c:	27 97       	sbiw	r28, 0x07	; 7
    1e4e:	0f b6       	in	r0, 0x3f	; 63
    1e50:	f8 94       	cli
    1e52:	de bf       	out	0x3e, r29	; 62
    1e54:	0f be       	out	0x3f, r0	; 63
    1e56:	cd bf       	out	0x3d, r28	; 61
    1e58:	9c 83       	std	Y+4, r25	; 0x04
    1e5a:	8b 83       	std	Y+3, r24	; 0x03
    1e5c:	6d 83       	std	Y+5, r22	; 0x05
    1e5e:	4e 83       	std	Y+6, r20	; 0x06
    1e60:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress=0;
    1e62:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8iterator;
	/*Calculate the CGRAM address whose each block is 8 bytes */
	Local_u8CGRAMAddress= Copy_u8PatternNmber*8;
    1e64:	8d 81       	ldd	r24, Y+5	; 0x05
    1e66:	88 2f       	mov	r24, r24
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	88 0f       	add	r24, r24
    1e6c:	99 1f       	adc	r25, r25
    1e6e:	88 0f       	add	r24, r24
    1e70:	99 1f       	adc	r25, r25
    1e72:	88 0f       	add	r24, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	8a 83       	std	Y+2, r24	; 0x02

	/*Send CGRAM address command to LCD, with setting bit 6 , clear bit 7 */
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
    1e78:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7a:	80 5c       	subi	r24, 0xC0	; 192
    1e7c:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendCommand>

	/*Write the pattern into CGRAM */
	for(Local_u8iterator=0;Local_u8iterator<8;Local_u8iterator++)
    1e80:	19 82       	std	Y+1, r1	; 0x01
    1e82:	0e c0       	rjmp	.+28     	; 0x1ea0 <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8iterator]);
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
    1e86:	28 2f       	mov	r18, r24
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8e:	fc 01       	movw	r30, r24
    1e90:	e2 0f       	add	r30, r18
    1e92:	f3 1f       	adc	r31, r19
    1e94:	80 81       	ld	r24, Z
    1e96:	0e 94 41 0b 	call	0x1682	; 0x1682 <CLCD_voidSendData>

	/*Send CGRAM address command to LCD, with setting bit 6 , clear bit 7 */
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/*Write the pattern into CGRAM */
	for(Local_u8iterator=0;Local_u8iterator<8;Local_u8iterator++)
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	8f 5f       	subi	r24, 0xFF	; 255
    1e9e:	89 83       	std	Y+1, r24	; 0x01
    1ea0:	89 81       	ldd	r24, Y+1	; 0x01
    1ea2:	88 30       	cpi	r24, 0x08	; 8
    1ea4:	78 f3       	brcs	.-34     	; 0x1e84 <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8iterator]);
	}
	/* Go back to DDRAM to display the pattern */
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8Ypos);
    1ea6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ea8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eaa:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>

	/* Display the pattern written  in the CGRAM */
	CLCD_voidSendData(Copy_u8PatternNmber);
    1eae:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb0:	0e 94 41 0b 	call	0x1682	; 0x1682 <CLCD_voidSendData>

}
    1eb4:	27 96       	adiw	r28, 0x07	; 7
    1eb6:	0f b6       	in	r0, 0x3f	; 63
    1eb8:	f8 94       	cli
    1eba:	de bf       	out	0x3e, r29	; 62
    1ebc:	0f be       	out	0x3f, r0	; 63
    1ebe:	cd bf       	out	0x3d, r28	; 61
    1ec0:	cf 91       	pop	r28
    1ec2:	df 91       	pop	r29
    1ec4:	08 95       	ret

00001ec6 <CLCD_voidWriteNumber>:

void CLCD_voidWriteNumber(u32 Copy_u32Number)
{
    1ec6:	df 93       	push	r29
    1ec8:	cf 93       	push	r28
    1eca:	00 d0       	rcall	.+0      	; 0x1ecc <CLCD_voidWriteNumber+0x6>
    1ecc:	00 d0       	rcall	.+0      	; 0x1ece <CLCD_voidWriteNumber+0x8>
    1ece:	00 d0       	rcall	.+0      	; 0x1ed0 <CLCD_voidWriteNumber+0xa>
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    1ed4:	6b 83       	std	Y+3, r22	; 0x03
    1ed6:	7c 83       	std	Y+4, r23	; 0x04
    1ed8:	8d 83       	std	Y+5, r24	; 0x05
    1eda:	9e 83       	std	Y+6, r25	; 0x06

	u8 Max_Digits = Num_length(Copy_u32Number);
    1edc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ede:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee0:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <Num_length>
    1ee4:	8a 83       	std	Y+2, r24	; 0x02
	for (s8 i = Max_Digits; i > 0; i--) {
    1ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee8:	89 83       	std	Y+1, r24	; 0x01
    1eea:	2c c0       	rjmp	.+88     	; 0x1f44 <CLCD_voidWriteNumber+0x7e>
		CLCD_voidSendData((Copy_u32Number / Multi_N_10(i - 1)) + '0');
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	81 50       	subi	r24, 0x01	; 1
    1ef0:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <Multi_N_10>
    1ef4:	9c 01       	movw	r18, r24
    1ef6:	40 e0       	ldi	r20, 0x00	; 0
    1ef8:	50 e0       	ldi	r21, 0x00	; 0
    1efa:	8b 81       	ldd	r24, Y+3	; 0x03
    1efc:	9c 81       	ldd	r25, Y+4	; 0x04
    1efe:	ad 81       	ldd	r26, Y+5	; 0x05
    1f00:	be 81       	ldd	r27, Y+6	; 0x06
    1f02:	bc 01       	movw	r22, r24
    1f04:	cd 01       	movw	r24, r26
    1f06:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <__udivmodsi4>
    1f0a:	da 01       	movw	r26, r20
    1f0c:	c9 01       	movw	r24, r18
    1f0e:	80 5d       	subi	r24, 0xD0	; 208
    1f10:	0e 94 41 0b 	call	0x1682	; 0x1682 <CLCD_voidSendData>
		Copy_u32Number = (Copy_u32Number % Multi_N_10(i - 1));
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	81 50       	subi	r24, 0x01	; 1
    1f18:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <Multi_N_10>
    1f1c:	9c 01       	movw	r18, r24
    1f1e:	40 e0       	ldi	r20, 0x00	; 0
    1f20:	50 e0       	ldi	r21, 0x00	; 0
    1f22:	8b 81       	ldd	r24, Y+3	; 0x03
    1f24:	9c 81       	ldd	r25, Y+4	; 0x04
    1f26:	ad 81       	ldd	r26, Y+5	; 0x05
    1f28:	be 81       	ldd	r27, Y+6	; 0x06
    1f2a:	bc 01       	movw	r22, r24
    1f2c:	cd 01       	movw	r24, r26
    1f2e:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <__udivmodsi4>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	8b 83       	std	Y+3, r24	; 0x03
    1f38:	9c 83       	std	Y+4, r25	; 0x04
    1f3a:	ad 83       	std	Y+5, r26	; 0x05
    1f3c:	be 83       	std	Y+6, r27	; 0x06

void CLCD_voidWriteNumber(u32 Copy_u32Number)
{

	u8 Max_Digits = Num_length(Copy_u32Number);
	for (s8 i = Max_Digits; i > 0; i--) {
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	81 50       	subi	r24, 0x01	; 1
    1f42:	89 83       	std	Y+1, r24	; 0x01
    1f44:	89 81       	ldd	r24, Y+1	; 0x01
    1f46:	18 16       	cp	r1, r24
    1f48:	8c f2       	brlt	.-94     	; 0x1eec <CLCD_voidWriteNumber+0x26>
		CLCD_voidSendData((Copy_u32Number / Multi_N_10(i - 1)) + '0');
		Copy_u32Number = (Copy_u32Number % Multi_N_10(i - 1));
	}
}
    1f4a:	26 96       	adiw	r28, 0x06	; 6
    1f4c:	0f b6       	in	r0, 0x3f	; 63
    1f4e:	f8 94       	cli
    1f50:	de bf       	out	0x3e, r29	; 62
    1f52:	0f be       	out	0x3f, r0	; 63
    1f54:	cd bf       	out	0x3d, r28	; 61
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	08 95       	ret

00001f5c <Num_length>:


static u8 Num_length(u16 num) {
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	00 d0       	rcall	.+0      	; 0x1f62 <Num_length+0x6>
    1f62:	00 d0       	rcall	.+0      	; 0x1f64 <Num_length+0x8>
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
    1f68:	9b 83       	std	Y+3, r25	; 0x03
    1f6a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Cnt = 0;
    1f6c:	19 82       	std	Y+1, r1	; 0x01
	if(num == 0)
    1f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f70:	9b 81       	ldd	r25, Y+3	; 0x03
    1f72:	00 97       	sbiw	r24, 0x00	; 0
    1f74:	81 f4       	brne	.+32     	; 0x1f96 <Num_length+0x3a>
		return 1;
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	8c 83       	std	Y+4, r24	; 0x04
    1f7a:	13 c0       	rjmp	.+38     	; 0x1fa2 <Num_length+0x46>
	while (num != 0) {
		num /= 10;
    1f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f80:	2a e0       	ldi	r18, 0x0A	; 10
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	b9 01       	movw	r22, r18
    1f86:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <__udivmodhi4>
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	9b 83       	std	Y+3, r25	; 0x03
    1f8e:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8Cnt++;
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	8f 5f       	subi	r24, 0xFF	; 255
    1f94:	89 83       	std	Y+1, r24	; 0x01

static u8 Num_length(u16 num) {
	u8 Local_u8Cnt = 0;
	if(num == 0)
		return 1;
	while (num != 0) {
    1f96:	8a 81       	ldd	r24, Y+2	; 0x02
    1f98:	9b 81       	ldd	r25, Y+3	; 0x03
    1f9a:	00 97       	sbiw	r24, 0x00	; 0
    1f9c:	79 f7       	brne	.-34     	; 0x1f7c <Num_length+0x20>
		num /= 10;
		Local_u8Cnt++;
	}
	return Local_u8Cnt;
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	8c 83       	std	Y+4, r24	; 0x04
    1fa2:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	0f 90       	pop	r0
    1fac:	cf 91       	pop	r28
    1fae:	df 91       	pop	r29
    1fb0:	08 95       	ret

00001fb2 <Multi_N_10>:
static u16 Multi_N_10(u8 N) {
    1fb2:	df 93       	push	r29
    1fb4:	cf 93       	push	r28
    1fb6:	00 d0       	rcall	.+0      	; 0x1fb8 <Multi_N_10+0x6>
    1fb8:	00 d0       	rcall	.+0      	; 0x1fba <Multi_N_10+0x8>
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
    1fbe:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8Cnt;
	u16 p = 1;
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	9a 83       	std	Y+2, r25	; 0x02
    1fc6:	89 83       	std	Y+1, r24	; 0x01
	for (Local_u8Cnt = 0; Local_u8Cnt < N; Local_u8Cnt++)
    1fc8:	1b 82       	std	Y+3, r1	; 0x03
    1fca:	11 c0       	rjmp	.+34     	; 0x1fee <Multi_N_10+0x3c>
		p *= 10;
    1fcc:	89 81       	ldd	r24, Y+1	; 0x01
    1fce:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd0:	9c 01       	movw	r18, r24
    1fd2:	22 0f       	add	r18, r18
    1fd4:	33 1f       	adc	r19, r19
    1fd6:	c9 01       	movw	r24, r18
    1fd8:	88 0f       	add	r24, r24
    1fda:	99 1f       	adc	r25, r25
    1fdc:	88 0f       	add	r24, r24
    1fde:	99 1f       	adc	r25, r25
    1fe0:	82 0f       	add	r24, r18
    1fe2:	93 1f       	adc	r25, r19
    1fe4:	9a 83       	std	Y+2, r25	; 0x02
    1fe6:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8Cnt;
}
static u16 Multi_N_10(u8 N) {
	u8 Local_u8Cnt;
	u16 p = 1;
	for (Local_u8Cnt = 0; Local_u8Cnt < N; Local_u8Cnt++)
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	8f 5f       	subi	r24, 0xFF	; 255
    1fec:	8b 83       	std	Y+3, r24	; 0x03
    1fee:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff2:	98 17       	cp	r25, r24
    1ff4:	58 f3       	brcs	.-42     	; 0x1fcc <Multi_N_10+0x1a>
		p *= 10;
	return p;
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
    1ff8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	cf 91       	pop	r28
    2004:	df 91       	pop	r29
    2006:	08 95       	ret

00002008 <DAC_voidSetAnalogValue>:
#include "../HAL/DAC_interface.h"
#include "../HAL/DAC_config.h"
#include "../HAL/DAC_private.h"

void DAC_voidSetAnalogValue(u8 Copy_u8Port,u16 Copy_u16Value_mV)
{
    2008:	df 93       	push	r29
    200a:	cf 93       	push	r28
    200c:	00 d0       	rcall	.+0      	; 0x200e <DAC_voidSetAnalogValue+0x6>
    200e:	0f 92       	push	r0
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
    2014:	89 83       	std	Y+1, r24	; 0x01
    2016:	7b 83       	std	Y+3, r23	; 0x03
    2018:	6a 83       	std	Y+2, r22	; 0x02
	DIO_u8SetPortValue(Copy_u8Port,(u8)((u16)((Copy_u16Value_mV*255UL)/5000UL)));
    201a:	8a 81       	ldd	r24, Y+2	; 0x02
    201c:	9b 81       	ldd	r25, Y+3	; 0x03
    201e:	cc 01       	movw	r24, r24
    2020:	a0 e0       	ldi	r26, 0x00	; 0
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	2f ef       	ldi	r18, 0xFF	; 255
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e0       	ldi	r20, 0x00	; 0
    202a:	50 e0       	ldi	r21, 0x00	; 0
    202c:	bc 01       	movw	r22, r24
    202e:	cd 01       	movw	r24, r26
    2030:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__mulsi3>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	28 e8       	ldi	r18, 0x88	; 136
    203a:	33 e1       	ldi	r19, 0x13	; 19
    203c:	40 e0       	ldi	r20, 0x00	; 0
    203e:	50 e0       	ldi	r21, 0x00	; 0
    2040:	bc 01       	movw	r22, r24
    2042:	cd 01       	movw	r24, r26
    2044:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <__udivmodsi4>
    2048:	da 01       	movw	r26, r20
    204a:	c9 01       	movw	r24, r18
    204c:	98 2f       	mov	r25, r24
    204e:	89 81       	ldd	r24, Y+1	; 0x01
    2050:	69 2f       	mov	r22, r25
    2052:	0e 94 4a 11 	call	0x2294	; 0x2294 <DIO_u8SetPortValue>
}
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	0f 90       	pop	r0
    205c:	cf 91       	pop	r28
    205e:	df 91       	pop	r29
    2060:	08 95       	ret

00002062 <DIO_u8SetPinValue>:
#include "../MCAL/DIO_config.h"
#include "../MCAL/DIO_interface.h"
#include "../MCAL/DIO_register.h"

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
    2062:	df 93       	push	r29
    2064:	cf 93       	push	r28
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    206a:	28 97       	sbiw	r28, 0x08	; 8
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	f8 94       	cli
    2070:	de bf       	out	0x3e, r29	; 62
    2072:	0f be       	out	0x3f, r0	; 63
    2074:	cd bf       	out	0x3d, r28	; 61
    2076:	8a 83       	std	Y+2, r24	; 0x02
    2078:	6b 83       	std	Y+3, r22	; 0x03
    207a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    207c:	19 82       	std	Y+1, r1	; 0x01
	if(DIO_PIN_HIGH==Copy_u8Value)
    207e:	8c 81       	ldd	r24, Y+4	; 0x04
    2080:	81 30       	cpi	r24, 0x01	; 1
    2082:	09 f0       	breq	.+2      	; 0x2086 <DIO_u8SetPinValue+0x24>
    2084:	79 c0       	rjmp	.+242    	; 0x2178 <DIO_u8SetPinValue+0x116>
	{
		if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    2086:	8b 81       	ldd	r24, Y+3	; 0x03
    2088:	88 30       	cpi	r24, 0x08	; 8
    208a:	08 f0       	brcs	.+2      	; 0x208e <DIO_u8SetPinValue+0x2c>
    208c:	72 c0       	rjmp	.+228    	; 0x2172 <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
    208e:	8a 81       	ldd	r24, Y+2	; 0x02
    2090:	28 2f       	mov	r18, r24
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	38 87       	std	Y+8, r19	; 0x08
    2096:	2f 83       	std	Y+7, r18	; 0x07
    2098:	8f 81       	ldd	r24, Y+7	; 0x07
    209a:	98 85       	ldd	r25, Y+8	; 0x08
    209c:	81 30       	cpi	r24, 0x01	; 1
    209e:	91 05       	cpc	r25, r1
    20a0:	49 f1       	breq	.+82     	; 0x20f4 <DIO_u8SetPinValue+0x92>
    20a2:	2f 81       	ldd	r18, Y+7	; 0x07
    20a4:	38 85       	ldd	r19, Y+8	; 0x08
    20a6:	22 30       	cpi	r18, 0x02	; 2
    20a8:	31 05       	cpc	r19, r1
    20aa:	2c f4       	brge	.+10     	; 0x20b6 <DIO_u8SetPinValue+0x54>
    20ac:	8f 81       	ldd	r24, Y+7	; 0x07
    20ae:	98 85       	ldd	r25, Y+8	; 0x08
    20b0:	00 97       	sbiw	r24, 0x00	; 0
    20b2:	61 f0       	breq	.+24     	; 0x20cc <DIO_u8SetPinValue+0x6a>
    20b4:	5b c0       	rjmp	.+182    	; 0x216c <DIO_u8SetPinValue+0x10a>
    20b6:	2f 81       	ldd	r18, Y+7	; 0x07
    20b8:	38 85       	ldd	r19, Y+8	; 0x08
    20ba:	22 30       	cpi	r18, 0x02	; 2
    20bc:	31 05       	cpc	r19, r1
    20be:	71 f1       	breq	.+92     	; 0x211c <DIO_u8SetPinValue+0xba>
    20c0:	8f 81       	ldd	r24, Y+7	; 0x07
    20c2:	98 85       	ldd	r25, Y+8	; 0x08
    20c4:	83 30       	cpi	r24, 0x03	; 3
    20c6:	91 05       	cpc	r25, r1
    20c8:	e9 f1       	breq	.+122    	; 0x2144 <DIO_u8SetPinValue+0xe2>
    20ca:	50 c0       	rjmp	.+160    	; 0x216c <DIO_u8SetPinValue+0x10a>
			{
				case DIO_PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
    20cc:	ab e3       	ldi	r26, 0x3B	; 59
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	eb e3       	ldi	r30, 0x3B	; 59
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	48 2f       	mov	r20, r24
    20d8:	8b 81       	ldd	r24, Y+3	; 0x03
    20da:	28 2f       	mov	r18, r24
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	02 2e       	mov	r0, r18
    20e4:	02 c0       	rjmp	.+4      	; 0x20ea <DIO_u8SetPinValue+0x88>
    20e6:	88 0f       	add	r24, r24
    20e8:	99 1f       	adc	r25, r25
    20ea:	0a 94       	dec	r0
    20ec:	e2 f7       	brpl	.-8      	; 0x20e6 <DIO_u8SetPinValue+0x84>
    20ee:	84 2b       	or	r24, r20
    20f0:	8c 93       	st	X, r24
    20f2:	c6 c0       	rjmp	.+396    	; 0x2280 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
    20f4:	a8 e3       	ldi	r26, 0x38	; 56
    20f6:	b0 e0       	ldi	r27, 0x00	; 0
    20f8:	e8 e3       	ldi	r30, 0x38	; 56
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	80 81       	ld	r24, Z
    20fe:	48 2f       	mov	r20, r24
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	28 2f       	mov	r18, r24
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	02 2e       	mov	r0, r18
    210c:	02 c0       	rjmp	.+4      	; 0x2112 <DIO_u8SetPinValue+0xb0>
    210e:	88 0f       	add	r24, r24
    2110:	99 1f       	adc	r25, r25
    2112:	0a 94       	dec	r0
    2114:	e2 f7       	brpl	.-8      	; 0x210e <DIO_u8SetPinValue+0xac>
    2116:	84 2b       	or	r24, r20
    2118:	8c 93       	st	X, r24
    211a:	b2 c0       	rjmp	.+356    	; 0x2280 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
    211c:	a5 e3       	ldi	r26, 0x35	; 53
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	e5 e3       	ldi	r30, 0x35	; 53
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	48 2f       	mov	r20, r24
    2128:	8b 81       	ldd	r24, Y+3	; 0x03
    212a:	28 2f       	mov	r18, r24
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	02 2e       	mov	r0, r18
    2134:	02 c0       	rjmp	.+4      	; 0x213a <DIO_u8SetPinValue+0xd8>
    2136:	88 0f       	add	r24, r24
    2138:	99 1f       	adc	r25, r25
    213a:	0a 94       	dec	r0
    213c:	e2 f7       	brpl	.-8      	; 0x2136 <DIO_u8SetPinValue+0xd4>
    213e:	84 2b       	or	r24, r20
    2140:	8c 93       	st	X, r24
    2142:	9e c0       	rjmp	.+316    	; 0x2280 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
    2144:	a2 e3       	ldi	r26, 0x32	; 50
    2146:	b0 e0       	ldi	r27, 0x00	; 0
    2148:	e2 e3       	ldi	r30, 0x32	; 50
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	80 81       	ld	r24, Z
    214e:	48 2f       	mov	r20, r24
    2150:	8b 81       	ldd	r24, Y+3	; 0x03
    2152:	28 2f       	mov	r18, r24
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	02 2e       	mov	r0, r18
    215c:	02 c0       	rjmp	.+4      	; 0x2162 <DIO_u8SetPinValue+0x100>
    215e:	88 0f       	add	r24, r24
    2160:	99 1f       	adc	r25, r25
    2162:	0a 94       	dec	r0
    2164:	e2 f7       	brpl	.-8      	; 0x215e <DIO_u8SetPinValue+0xfc>
    2166:	84 2b       	or	r24, r20
    2168:	8c 93       	st	X, r24
    216a:	8a c0       	rjmp	.+276    	; 0x2280 <DIO_u8SetPinValue+0x21e>
				default: Local_u8ErrorState=1;				
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	89 83       	std	Y+1, r24	; 0x01
    2170:	87 c0       	rjmp	.+270    	; 0x2280 <DIO_u8SetPinValue+0x21e>
			}
		}
		else
			Local_u8ErrorState=1;
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	89 83       	std	Y+1, r24	; 0x01
    2176:	84 c0       	rjmp	.+264    	; 0x2280 <DIO_u8SetPinValue+0x21e>
	}
	else if(DIO_PIN_LOW==Copy_u8Value)
    2178:	8c 81       	ldd	r24, Y+4	; 0x04
    217a:	88 23       	and	r24, r24
    217c:	09 f0       	breq	.+2      	; 0x2180 <DIO_u8SetPinValue+0x11e>
    217e:	7e c0       	rjmp	.+252    	; 0x227c <DIO_u8SetPinValue+0x21a>
	{
		if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    2180:	8b 81       	ldd	r24, Y+3	; 0x03
    2182:	88 30       	cpi	r24, 0x08	; 8
    2184:	08 f0       	brcs	.+2      	; 0x2188 <DIO_u8SetPinValue+0x126>
    2186:	77 c0       	rjmp	.+238    	; 0x2276 <DIO_u8SetPinValue+0x214>
		{
			switch(Copy_u8Port)
    2188:	8a 81       	ldd	r24, Y+2	; 0x02
    218a:	28 2f       	mov	r18, r24
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	3e 83       	std	Y+6, r19	; 0x06
    2190:	2d 83       	std	Y+5, r18	; 0x05
    2192:	8d 81       	ldd	r24, Y+5	; 0x05
    2194:	9e 81       	ldd	r25, Y+6	; 0x06
    2196:	81 30       	cpi	r24, 0x01	; 1
    2198:	91 05       	cpc	r25, r1
    219a:	59 f1       	breq	.+86     	; 0x21f2 <DIO_u8SetPinValue+0x190>
    219c:	2d 81       	ldd	r18, Y+5	; 0x05
    219e:	3e 81       	ldd	r19, Y+6	; 0x06
    21a0:	22 30       	cpi	r18, 0x02	; 2
    21a2:	31 05       	cpc	r19, r1
    21a4:	2c f4       	brge	.+10     	; 0x21b0 <DIO_u8SetPinValue+0x14e>
    21a6:	8d 81       	ldd	r24, Y+5	; 0x05
    21a8:	9e 81       	ldd	r25, Y+6	; 0x06
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	69 f0       	breq	.+26     	; 0x21c8 <DIO_u8SetPinValue+0x166>
    21ae:	60 c0       	rjmp	.+192    	; 0x2270 <DIO_u8SetPinValue+0x20e>
    21b0:	2d 81       	ldd	r18, Y+5	; 0x05
    21b2:	3e 81       	ldd	r19, Y+6	; 0x06
    21b4:	22 30       	cpi	r18, 0x02	; 2
    21b6:	31 05       	cpc	r19, r1
    21b8:	89 f1       	breq	.+98     	; 0x221c <DIO_u8SetPinValue+0x1ba>
    21ba:	8d 81       	ldd	r24, Y+5	; 0x05
    21bc:	9e 81       	ldd	r25, Y+6	; 0x06
    21be:	83 30       	cpi	r24, 0x03	; 3
    21c0:	91 05       	cpc	r25, r1
    21c2:	09 f4       	brne	.+2      	; 0x21c6 <DIO_u8SetPinValue+0x164>
    21c4:	40 c0       	rjmp	.+128    	; 0x2246 <DIO_u8SetPinValue+0x1e4>
    21c6:	54 c0       	rjmp	.+168    	; 0x2270 <DIO_u8SetPinValue+0x20e>
			{
				case DIO_PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
    21c8:	ab e3       	ldi	r26, 0x3B	; 59
    21ca:	b0 e0       	ldi	r27, 0x00	; 0
    21cc:	eb e3       	ldi	r30, 0x3B	; 59
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	80 81       	ld	r24, Z
    21d2:	48 2f       	mov	r20, r24
    21d4:	8b 81       	ldd	r24, Y+3	; 0x03
    21d6:	28 2f       	mov	r18, r24
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	02 2e       	mov	r0, r18
    21e0:	02 c0       	rjmp	.+4      	; 0x21e6 <DIO_u8SetPinValue+0x184>
    21e2:	88 0f       	add	r24, r24
    21e4:	99 1f       	adc	r25, r25
    21e6:	0a 94       	dec	r0
    21e8:	e2 f7       	brpl	.-8      	; 0x21e2 <DIO_u8SetPinValue+0x180>
    21ea:	80 95       	com	r24
    21ec:	84 23       	and	r24, r20
    21ee:	8c 93       	st	X, r24
    21f0:	47 c0       	rjmp	.+142    	; 0x2280 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
    21f2:	a8 e3       	ldi	r26, 0x38	; 56
    21f4:	b0 e0       	ldi	r27, 0x00	; 0
    21f6:	e8 e3       	ldi	r30, 0x38	; 56
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	48 2f       	mov	r20, r24
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	28 2f       	mov	r18, r24
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	02 2e       	mov	r0, r18
    220a:	02 c0       	rjmp	.+4      	; 0x2210 <DIO_u8SetPinValue+0x1ae>
    220c:	88 0f       	add	r24, r24
    220e:	99 1f       	adc	r25, r25
    2210:	0a 94       	dec	r0
    2212:	e2 f7       	brpl	.-8      	; 0x220c <DIO_u8SetPinValue+0x1aa>
    2214:	80 95       	com	r24
    2216:	84 23       	and	r24, r20
    2218:	8c 93       	st	X, r24
    221a:	32 c0       	rjmp	.+100    	; 0x2280 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
    221c:	a5 e3       	ldi	r26, 0x35	; 53
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	e5 e3       	ldi	r30, 0x35	; 53
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	48 2f       	mov	r20, r24
    2228:	8b 81       	ldd	r24, Y+3	; 0x03
    222a:	28 2f       	mov	r18, r24
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	02 2e       	mov	r0, r18
    2234:	02 c0       	rjmp	.+4      	; 0x223a <DIO_u8SetPinValue+0x1d8>
    2236:	88 0f       	add	r24, r24
    2238:	99 1f       	adc	r25, r25
    223a:	0a 94       	dec	r0
    223c:	e2 f7       	brpl	.-8      	; 0x2236 <DIO_u8SetPinValue+0x1d4>
    223e:	80 95       	com	r24
    2240:	84 23       	and	r24, r20
    2242:	8c 93       	st	X, r24
    2244:	1d c0       	rjmp	.+58     	; 0x2280 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
    2246:	a2 e3       	ldi	r26, 0x32	; 50
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	e2 e3       	ldi	r30, 0x32	; 50
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	48 2f       	mov	r20, r24
    2252:	8b 81       	ldd	r24, Y+3	; 0x03
    2254:	28 2f       	mov	r18, r24
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	02 2e       	mov	r0, r18
    225e:	02 c0       	rjmp	.+4      	; 0x2264 <DIO_u8SetPinValue+0x202>
    2260:	88 0f       	add	r24, r24
    2262:	99 1f       	adc	r25, r25
    2264:	0a 94       	dec	r0
    2266:	e2 f7       	brpl	.-8      	; 0x2260 <DIO_u8SetPinValue+0x1fe>
    2268:	80 95       	com	r24
    226a:	84 23       	and	r24, r20
    226c:	8c 93       	st	X, r24
    226e:	08 c0       	rjmp	.+16     	; 0x2280 <DIO_u8SetPinValue+0x21e>
				default: Local_u8ErrorState=1;	
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	89 83       	std	Y+1, r24	; 0x01
    2274:	05 c0       	rjmp	.+10     	; 0x2280 <DIO_u8SetPinValue+0x21e>
			}
		}
		else
			Local_u8ErrorState=1;	
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	89 83       	std	Y+1, r24	; 0x01
    227a:	02 c0       	rjmp	.+4      	; 0x2280 <DIO_u8SetPinValue+0x21e>
	}
	else
		Local_u8ErrorState=1;	
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2280:	89 81       	ldd	r24, Y+1	; 0x01
}
    2282:	28 96       	adiw	r28, 0x08	; 8
    2284:	0f b6       	in	r0, 0x3f	; 63
    2286:	f8 94       	cli
    2288:	de bf       	out	0x3e, r29	; 62
    228a:	0f be       	out	0x3f, r0	; 63
    228c:	cd bf       	out	0x3d, r28	; 61
    228e:	cf 91       	pop	r28
    2290:	df 91       	pop	r29
    2292:	08 95       	ret

00002294 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    2294:	df 93       	push	r29
    2296:	cf 93       	push	r28
    2298:	00 d0       	rcall	.+0      	; 0x229a <DIO_u8SetPortValue+0x6>
    229a:	00 d0       	rcall	.+0      	; 0x229c <DIO_u8SetPortValue+0x8>
    229c:	0f 92       	push	r0
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62
    22a2:	8a 83       	std	Y+2, r24	; 0x02
    22a4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    22a6:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port<=7)
    22a8:	8a 81       	ldd	r24, Y+2	; 0x02
    22aa:	88 30       	cpi	r24, 0x08	; 8
    22ac:	b0 f5       	brcc	.+108    	; 0x231a <DIO_u8SetPortValue+0x86>
	{
		switch(Copy_u8Port)
    22ae:	8a 81       	ldd	r24, Y+2	; 0x02
    22b0:	28 2f       	mov	r18, r24
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	3d 83       	std	Y+5, r19	; 0x05
    22b6:	2c 83       	std	Y+4, r18	; 0x04
    22b8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ba:	9d 81       	ldd	r25, Y+5	; 0x05
    22bc:	81 30       	cpi	r24, 0x01	; 1
    22be:	91 05       	cpc	r25, r1
    22c0:	d1 f0       	breq	.+52     	; 0x22f6 <DIO_u8SetPortValue+0x62>
    22c2:	2c 81       	ldd	r18, Y+4	; 0x04
    22c4:	3d 81       	ldd	r19, Y+5	; 0x05
    22c6:	22 30       	cpi	r18, 0x02	; 2
    22c8:	31 05       	cpc	r19, r1
    22ca:	2c f4       	brge	.+10     	; 0x22d6 <DIO_u8SetPortValue+0x42>
    22cc:	8c 81       	ldd	r24, Y+4	; 0x04
    22ce:	9d 81       	ldd	r25, Y+5	; 0x05
    22d0:	00 97       	sbiw	r24, 0x00	; 0
    22d2:	61 f0       	breq	.+24     	; 0x22ec <DIO_u8SetPortValue+0x58>
    22d4:	1f c0       	rjmp	.+62     	; 0x2314 <DIO_u8SetPortValue+0x80>
    22d6:	2c 81       	ldd	r18, Y+4	; 0x04
    22d8:	3d 81       	ldd	r19, Y+5	; 0x05
    22da:	22 30       	cpi	r18, 0x02	; 2
    22dc:	31 05       	cpc	r19, r1
    22de:	81 f0       	breq	.+32     	; 0x2300 <DIO_u8SetPortValue+0x6c>
    22e0:	8c 81       	ldd	r24, Y+4	; 0x04
    22e2:	9d 81       	ldd	r25, Y+5	; 0x05
    22e4:	83 30       	cpi	r24, 0x03	; 3
    22e6:	91 05       	cpc	r25, r1
    22e8:	81 f0       	breq	.+32     	; 0x230a <DIO_u8SetPortValue+0x76>
    22ea:	14 c0       	rjmp	.+40     	; 0x2314 <DIO_u8SetPortValue+0x80>
		{
			case DIO_PORTA:PORTA=Copy_u8Value;break;
    22ec:	eb e3       	ldi	r30, 0x3B	; 59
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	8b 81       	ldd	r24, Y+3	; 0x03
    22f2:	80 83       	st	Z, r24
    22f4:	14 c0       	rjmp	.+40     	; 0x231e <DIO_u8SetPortValue+0x8a>
			case DIO_PORTB:PORTB=Copy_u8Value;break;
    22f6:	e8 e3       	ldi	r30, 0x38	; 56
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	8b 81       	ldd	r24, Y+3	; 0x03
    22fc:	80 83       	st	Z, r24
    22fe:	0f c0       	rjmp	.+30     	; 0x231e <DIO_u8SetPortValue+0x8a>
			case DIO_PORTC:PORTC=Copy_u8Value;break;
    2300:	e5 e3       	ldi	r30, 0x35	; 53
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	8b 81       	ldd	r24, Y+3	; 0x03
    2306:	80 83       	st	Z, r24
    2308:	0a c0       	rjmp	.+20     	; 0x231e <DIO_u8SetPortValue+0x8a>
			case DIO_PORTD:PORTD=Copy_u8Value;break;
    230a:	e2 e3       	ldi	r30, 0x32	; 50
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	8b 81       	ldd	r24, Y+3	; 0x03
    2310:	80 83       	st	Z, r24
    2312:	05 c0       	rjmp	.+10     	; 0x231e <DIO_u8SetPortValue+0x8a>
			default: Local_u8ErrorState=1;
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	89 83       	std	Y+1, r24	; 0x01
    2318:	02 c0       	rjmp	.+4      	; 0x231e <DIO_u8SetPortValue+0x8a>
		}
	}
	else
		Local_u8ErrorState = NOTOK;
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    231e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2320:	0f 90       	pop	r0
    2322:	0f 90       	pop	r0
    2324:	0f 90       	pop	r0
    2326:	0f 90       	pop	r0
    2328:	0f 90       	pop	r0
    232a:	cf 91       	pop	r28
    232c:	df 91       	pop	r29
    232e:	08 95       	ret

00002330 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 *Copy_pu8Value)
{
    2330:	df 93       	push	r29
    2332:	cf 93       	push	r28
    2334:	cd b7       	in	r28, 0x3d	; 61
    2336:	de b7       	in	r29, 0x3e	; 62
    2338:	27 97       	sbiw	r28, 0x07	; 7
    233a:	0f b6       	in	r0, 0x3f	; 63
    233c:	f8 94       	cli
    233e:	de bf       	out	0x3e, r29	; 62
    2340:	0f be       	out	0x3f, r0	; 63
    2342:	cd bf       	out	0x3d, r28	; 61
    2344:	8a 83       	std	Y+2, r24	; 0x02
    2346:	6b 83       	std	Y+3, r22	; 0x03
    2348:	5d 83       	std	Y+5, r21	; 0x05
    234a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    234c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value!=NULL)
    234e:	8c 81       	ldd	r24, Y+4	; 0x04
    2350:	9d 81       	ldd	r25, Y+5	; 0x05
    2352:	00 97       	sbiw	r24, 0x00	; 0
    2354:	09 f4       	brne	.+2      	; 0x2358 <DIO_u8GetPinValue+0x28>
    2356:	7b c0       	rjmp	.+246    	; 0x244e <DIO_u8GetPinValue+0x11e>
	{


		if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    2358:	8b 81       	ldd	r24, Y+3	; 0x03
    235a:	88 30       	cpi	r24, 0x08	; 8
    235c:	08 f0       	brcs	.+2      	; 0x2360 <DIO_u8GetPinValue+0x30>
    235e:	74 c0       	rjmp	.+232    	; 0x2448 <DIO_u8GetPinValue+0x118>
		{
			switch(Copy_u8Port)
    2360:	8a 81       	ldd	r24, Y+2	; 0x02
    2362:	28 2f       	mov	r18, r24
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	3f 83       	std	Y+7, r19	; 0x07
    2368:	2e 83       	std	Y+6, r18	; 0x06
    236a:	4e 81       	ldd	r20, Y+6	; 0x06
    236c:	5f 81       	ldd	r21, Y+7	; 0x07
    236e:	41 30       	cpi	r20, 0x01	; 1
    2370:	51 05       	cpc	r21, r1
    2372:	59 f1       	breq	.+86     	; 0x23ca <DIO_u8GetPinValue+0x9a>
    2374:	8e 81       	ldd	r24, Y+6	; 0x06
    2376:	9f 81       	ldd	r25, Y+7	; 0x07
    2378:	82 30       	cpi	r24, 0x02	; 2
    237a:	91 05       	cpc	r25, r1
    237c:	34 f4       	brge	.+12     	; 0x238a <DIO_u8GetPinValue+0x5a>
    237e:	2e 81       	ldd	r18, Y+6	; 0x06
    2380:	3f 81       	ldd	r19, Y+7	; 0x07
    2382:	21 15       	cp	r18, r1
    2384:	31 05       	cpc	r19, r1
    2386:	69 f0       	breq	.+26     	; 0x23a2 <DIO_u8GetPinValue+0x72>
    2388:	5c c0       	rjmp	.+184    	; 0x2442 <DIO_u8GetPinValue+0x112>
    238a:	4e 81       	ldd	r20, Y+6	; 0x06
    238c:	5f 81       	ldd	r21, Y+7	; 0x07
    238e:	42 30       	cpi	r20, 0x02	; 2
    2390:	51 05       	cpc	r21, r1
    2392:	79 f1       	breq	.+94     	; 0x23f2 <DIO_u8GetPinValue+0xc2>
    2394:	8e 81       	ldd	r24, Y+6	; 0x06
    2396:	9f 81       	ldd	r25, Y+7	; 0x07
    2398:	83 30       	cpi	r24, 0x03	; 3
    239a:	91 05       	cpc	r25, r1
    239c:	09 f4       	brne	.+2      	; 0x23a0 <DIO_u8GetPinValue+0x70>
    239e:	3d c0       	rjmp	.+122    	; 0x241a <DIO_u8GetPinValue+0xea>
    23a0:	50 c0       	rjmp	.+160    	; 0x2442 <DIO_u8GetPinValue+0x112>
			{
				case DIO_PORTA:*Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin);break;
    23a2:	e9 e3       	ldi	r30, 0x39	; 57
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	80 81       	ld	r24, Z
    23a8:	28 2f       	mov	r18, r24
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	8b 81       	ldd	r24, Y+3	; 0x03
    23ae:	88 2f       	mov	r24, r24
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	a9 01       	movw	r20, r18
    23b4:	02 c0       	rjmp	.+4      	; 0x23ba <DIO_u8GetPinValue+0x8a>
    23b6:	55 95       	asr	r21
    23b8:	47 95       	ror	r20
    23ba:	8a 95       	dec	r24
    23bc:	e2 f7       	brpl	.-8      	; 0x23b6 <DIO_u8GetPinValue+0x86>
    23be:	ca 01       	movw	r24, r20
    23c0:	81 70       	andi	r24, 0x01	; 1
    23c2:	ec 81       	ldd	r30, Y+4	; 0x04
    23c4:	fd 81       	ldd	r31, Y+5	; 0x05
    23c6:	80 83       	st	Z, r24
    23c8:	44 c0       	rjmp	.+136    	; 0x2452 <DIO_u8GetPinValue+0x122>
				case DIO_PORTB:*Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin);break;
    23ca:	e6 e3       	ldi	r30, 0x36	; 54
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	80 81       	ld	r24, Z
    23d0:	28 2f       	mov	r18, r24
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	88 2f       	mov	r24, r24
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	a9 01       	movw	r20, r18
    23dc:	02 c0       	rjmp	.+4      	; 0x23e2 <DIO_u8GetPinValue+0xb2>
    23de:	55 95       	asr	r21
    23e0:	47 95       	ror	r20
    23e2:	8a 95       	dec	r24
    23e4:	e2 f7       	brpl	.-8      	; 0x23de <DIO_u8GetPinValue+0xae>
    23e6:	ca 01       	movw	r24, r20
    23e8:	81 70       	andi	r24, 0x01	; 1
    23ea:	ec 81       	ldd	r30, Y+4	; 0x04
    23ec:	fd 81       	ldd	r31, Y+5	; 0x05
    23ee:	80 83       	st	Z, r24
    23f0:	30 c0       	rjmp	.+96     	; 0x2452 <DIO_u8GetPinValue+0x122>
				case DIO_PORTC:*Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin);break;
    23f2:	e3 e3       	ldi	r30, 0x33	; 51
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	80 81       	ld	r24, Z
    23f8:	28 2f       	mov	r18, r24
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	8b 81       	ldd	r24, Y+3	; 0x03
    23fe:	88 2f       	mov	r24, r24
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	a9 01       	movw	r20, r18
    2404:	02 c0       	rjmp	.+4      	; 0x240a <DIO_u8GetPinValue+0xda>
    2406:	55 95       	asr	r21
    2408:	47 95       	ror	r20
    240a:	8a 95       	dec	r24
    240c:	e2 f7       	brpl	.-8      	; 0x2406 <DIO_u8GetPinValue+0xd6>
    240e:	ca 01       	movw	r24, r20
    2410:	81 70       	andi	r24, 0x01	; 1
    2412:	ec 81       	ldd	r30, Y+4	; 0x04
    2414:	fd 81       	ldd	r31, Y+5	; 0x05
    2416:	80 83       	st	Z, r24
    2418:	1c c0       	rjmp	.+56     	; 0x2452 <DIO_u8GetPinValue+0x122>
				case DIO_PORTD:*Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin);break;
    241a:	e0 e3       	ldi	r30, 0x30	; 48
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	80 81       	ld	r24, Z
    2420:	28 2f       	mov	r18, r24
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	8b 81       	ldd	r24, Y+3	; 0x03
    2426:	88 2f       	mov	r24, r24
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	a9 01       	movw	r20, r18
    242c:	02 c0       	rjmp	.+4      	; 0x2432 <DIO_u8GetPinValue+0x102>
    242e:	55 95       	asr	r21
    2430:	47 95       	ror	r20
    2432:	8a 95       	dec	r24
    2434:	e2 f7       	brpl	.-8      	; 0x242e <DIO_u8GetPinValue+0xfe>
    2436:	ca 01       	movw	r24, r20
    2438:	81 70       	andi	r24, 0x01	; 1
    243a:	ec 81       	ldd	r30, Y+4	; 0x04
    243c:	fd 81       	ldd	r31, Y+5	; 0x05
    243e:	80 83       	st	Z, r24
    2440:	08 c0       	rjmp	.+16     	; 0x2452 <DIO_u8GetPinValue+0x122>
				default: Local_u8ErrorState=1;
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	89 83       	std	Y+1, r24	; 0x01
    2446:	05 c0       	rjmp	.+10     	; 0x2452 <DIO_u8GetPinValue+0x122>
			}
		}
		else
			Local_u8ErrorState=1;
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	89 83       	std	Y+1, r24	; 0x01
    244c:	02 c0       	rjmp	.+4      	; 0x2452 <DIO_u8GetPinValue+0x122>
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    244e:	82 e0       	ldi	r24, 0x02	; 2
    2450:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2452:	89 81       	ldd	r24, Y+1	; 0x01
}
    2454:	27 96       	adiw	r28, 0x07	; 7
    2456:	0f b6       	in	r0, 0x3f	; 63
    2458:	f8 94       	cli
    245a:	de bf       	out	0x3e, r29	; 62
    245c:	0f be       	out	0x3f, r0	; 63
    245e:	cd bf       	out	0x3d, r28	; 61
    2460:	cf 91       	pop	r28
    2462:	df 91       	pop	r29
    2464:	08 95       	ret

00002466 <DIO_u8TogglePinValue>:
u8 DIO_u8TogglePinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
{
    2466:	df 93       	push	r29
    2468:	cf 93       	push	r28
    246a:	00 d0       	rcall	.+0      	; 0x246c <DIO_u8TogglePinValue+0x6>
    246c:	00 d0       	rcall	.+0      	; 0x246e <DIO_u8TogglePinValue+0x8>
    246e:	0f 92       	push	r0
    2470:	cd b7       	in	r28, 0x3d	; 61
    2472:	de b7       	in	r29, 0x3e	; 62
    2474:	8a 83       	std	Y+2, r24	; 0x02
    2476:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    2478:	19 82       	std	Y+1, r1	; 0x01
	if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    247a:	8b 81       	ldd	r24, Y+3	; 0x03
    247c:	88 30       	cpi	r24, 0x08	; 8
    247e:	08 f0       	brcs	.+2      	; 0x2482 <DIO_u8TogglePinValue+0x1c>
    2480:	72 c0       	rjmp	.+228    	; 0x2566 <DIO_u8TogglePinValue+0x100>
	{
		switch(Copy_u8Port)
    2482:	8a 81       	ldd	r24, Y+2	; 0x02
    2484:	28 2f       	mov	r18, r24
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	3d 83       	std	Y+5, r19	; 0x05
    248a:	2c 83       	std	Y+4, r18	; 0x04
    248c:	8c 81       	ldd	r24, Y+4	; 0x04
    248e:	9d 81       	ldd	r25, Y+5	; 0x05
    2490:	81 30       	cpi	r24, 0x01	; 1
    2492:	91 05       	cpc	r25, r1
    2494:	49 f1       	breq	.+82     	; 0x24e8 <DIO_u8TogglePinValue+0x82>
    2496:	2c 81       	ldd	r18, Y+4	; 0x04
    2498:	3d 81       	ldd	r19, Y+5	; 0x05
    249a:	22 30       	cpi	r18, 0x02	; 2
    249c:	31 05       	cpc	r19, r1
    249e:	2c f4       	brge	.+10     	; 0x24aa <DIO_u8TogglePinValue+0x44>
    24a0:	8c 81       	ldd	r24, Y+4	; 0x04
    24a2:	9d 81       	ldd	r25, Y+5	; 0x05
    24a4:	00 97       	sbiw	r24, 0x00	; 0
    24a6:	61 f0       	breq	.+24     	; 0x24c0 <DIO_u8TogglePinValue+0x5a>
    24a8:	5b c0       	rjmp	.+182    	; 0x2560 <DIO_u8TogglePinValue+0xfa>
    24aa:	2c 81       	ldd	r18, Y+4	; 0x04
    24ac:	3d 81       	ldd	r19, Y+5	; 0x05
    24ae:	22 30       	cpi	r18, 0x02	; 2
    24b0:	31 05       	cpc	r19, r1
    24b2:	71 f1       	breq	.+92     	; 0x2510 <DIO_u8TogglePinValue+0xaa>
    24b4:	8c 81       	ldd	r24, Y+4	; 0x04
    24b6:	9d 81       	ldd	r25, Y+5	; 0x05
    24b8:	83 30       	cpi	r24, 0x03	; 3
    24ba:	91 05       	cpc	r25, r1
    24bc:	e9 f1       	breq	.+122    	; 0x2538 <DIO_u8TogglePinValue+0xd2>
    24be:	50 c0       	rjmp	.+160    	; 0x2560 <DIO_u8TogglePinValue+0xfa>
		{
			case DIO_PORTA:TOG_BIT(PORTA,Copy_u8Pin);break;
    24c0:	ab e3       	ldi	r26, 0x3B	; 59
    24c2:	b0 e0       	ldi	r27, 0x00	; 0
    24c4:	eb e3       	ldi	r30, 0x3B	; 59
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	48 2f       	mov	r20, r24
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	28 2f       	mov	r18, r24
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	02 2e       	mov	r0, r18
    24d8:	02 c0       	rjmp	.+4      	; 0x24de <DIO_u8TogglePinValue+0x78>
    24da:	88 0f       	add	r24, r24
    24dc:	99 1f       	adc	r25, r25
    24de:	0a 94       	dec	r0
    24e0:	e2 f7       	brpl	.-8      	; 0x24da <DIO_u8TogglePinValue+0x74>
    24e2:	84 27       	eor	r24, r20
    24e4:	8c 93       	st	X, r24
    24e6:	41 c0       	rjmp	.+130    	; 0x256a <DIO_u8TogglePinValue+0x104>
			case DIO_PORTB:TOG_BIT(PORTB,Copy_u8Pin);break;
    24e8:	a8 e3       	ldi	r26, 0x38	; 56
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	e8 e3       	ldi	r30, 0x38	; 56
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	80 81       	ld	r24, Z
    24f2:	48 2f       	mov	r20, r24
    24f4:	8b 81       	ldd	r24, Y+3	; 0x03
    24f6:	28 2f       	mov	r18, r24
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	02 2e       	mov	r0, r18
    2500:	02 c0       	rjmp	.+4      	; 0x2506 <DIO_u8TogglePinValue+0xa0>
    2502:	88 0f       	add	r24, r24
    2504:	99 1f       	adc	r25, r25
    2506:	0a 94       	dec	r0
    2508:	e2 f7       	brpl	.-8      	; 0x2502 <DIO_u8TogglePinValue+0x9c>
    250a:	84 27       	eor	r24, r20
    250c:	8c 93       	st	X, r24
    250e:	2d c0       	rjmp	.+90     	; 0x256a <DIO_u8TogglePinValue+0x104>
			case DIO_PORTC:TOG_BIT(PORTC,Copy_u8Pin);break;
    2510:	a5 e3       	ldi	r26, 0x35	; 53
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	e5 e3       	ldi	r30, 0x35	; 53
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	80 81       	ld	r24, Z
    251a:	48 2f       	mov	r20, r24
    251c:	8b 81       	ldd	r24, Y+3	; 0x03
    251e:	28 2f       	mov	r18, r24
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	02 2e       	mov	r0, r18
    2528:	02 c0       	rjmp	.+4      	; 0x252e <DIO_u8TogglePinValue+0xc8>
    252a:	88 0f       	add	r24, r24
    252c:	99 1f       	adc	r25, r25
    252e:	0a 94       	dec	r0
    2530:	e2 f7       	brpl	.-8      	; 0x252a <DIO_u8TogglePinValue+0xc4>
    2532:	84 27       	eor	r24, r20
    2534:	8c 93       	st	X, r24
    2536:	19 c0       	rjmp	.+50     	; 0x256a <DIO_u8TogglePinValue+0x104>
			case DIO_PORTD:TOG_BIT(PORTD,Copy_u8Pin);break;
    2538:	a2 e3       	ldi	r26, 0x32	; 50
    253a:	b0 e0       	ldi	r27, 0x00	; 0
    253c:	e2 e3       	ldi	r30, 0x32	; 50
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	80 81       	ld	r24, Z
    2542:	48 2f       	mov	r20, r24
    2544:	8b 81       	ldd	r24, Y+3	; 0x03
    2546:	28 2f       	mov	r18, r24
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	02 2e       	mov	r0, r18
    2550:	02 c0       	rjmp	.+4      	; 0x2556 <DIO_u8TogglePinValue+0xf0>
    2552:	88 0f       	add	r24, r24
    2554:	99 1f       	adc	r25, r25
    2556:	0a 94       	dec	r0
    2558:	e2 f7       	brpl	.-8      	; 0x2552 <DIO_u8TogglePinValue+0xec>
    255a:	84 27       	eor	r24, r20
    255c:	8c 93       	st	X, r24
    255e:	05 c0       	rjmp	.+10     	; 0x256a <DIO_u8TogglePinValue+0x104>
			default: Local_u8ErrorState=1;
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	89 83       	std	Y+1, r24	; 0x01
    2564:	02 c0       	rjmp	.+4      	; 0x256a <DIO_u8TogglePinValue+0x104>
		}
	}
	else
		Local_u8ErrorState=1;
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    256a:	89 81       	ldd	r24, Y+1	; 0x01
}
    256c:	0f 90       	pop	r0
    256e:	0f 90       	pop	r0
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	0f 90       	pop	r0
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	08 95       	ret

0000257c <DIO_u8SetLowNibbleValue>:

u8 DIO_u8SetLowNibbleValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    257c:	df 93       	push	r29
    257e:	cf 93       	push	r28
    2580:	00 d0       	rcall	.+0      	; 0x2582 <DIO_u8SetLowNibbleValue+0x6>
    2582:	00 d0       	rcall	.+0      	; 0x2584 <DIO_u8SetLowNibbleValue+0x8>
    2584:	0f 92       	push	r0
    2586:	cd b7       	in	r28, 0x3d	; 61
    2588:	de b7       	in	r29, 0x3e	; 62
    258a:	8a 83       	std	Y+2, r24	; 0x02
    258c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    258e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port<=DIO_PORTD){
    2590:	8a 81       	ldd	r24, Y+2	; 0x02
    2592:	84 30       	cpi	r24, 0x04	; 4
    2594:	08 f0       	brcs	.+2      	; 0x2598 <DIO_u8SetLowNibbleValue+0x1c>
    2596:	62 c0       	rjmp	.+196    	; 0x265c <DIO_u8SetLowNibbleValue+0xe0>
		switch(Copy_u8Port)
    2598:	8a 81       	ldd	r24, Y+2	; 0x02
    259a:	28 2f       	mov	r18, r24
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	3d 83       	std	Y+5, r19	; 0x05
    25a0:	2c 83       	std	Y+4, r18	; 0x04
    25a2:	8c 81       	ldd	r24, Y+4	; 0x04
    25a4:	9d 81       	ldd	r25, Y+5	; 0x05
    25a6:	81 30       	cpi	r24, 0x01	; 1
    25a8:	91 05       	cpc	r25, r1
    25aa:	29 f1       	breq	.+74     	; 0x25f6 <DIO_u8SetLowNibbleValue+0x7a>
    25ac:	2c 81       	ldd	r18, Y+4	; 0x04
    25ae:	3d 81       	ldd	r19, Y+5	; 0x05
    25b0:	22 30       	cpi	r18, 0x02	; 2
    25b2:	31 05       	cpc	r19, r1
    25b4:	2c f4       	brge	.+10     	; 0x25c0 <DIO_u8SetLowNibbleValue+0x44>
    25b6:	8c 81       	ldd	r24, Y+4	; 0x04
    25b8:	9d 81       	ldd	r25, Y+5	; 0x05
    25ba:	00 97       	sbiw	r24, 0x00	; 0
    25bc:	61 f0       	breq	.+24     	; 0x25d6 <DIO_u8SetLowNibbleValue+0x5a>
    25be:	4b c0       	rjmp	.+150    	; 0x2656 <DIO_u8SetLowNibbleValue+0xda>
    25c0:	2c 81       	ldd	r18, Y+4	; 0x04
    25c2:	3d 81       	ldd	r19, Y+5	; 0x05
    25c4:	22 30       	cpi	r18, 0x02	; 2
    25c6:	31 05       	cpc	r19, r1
    25c8:	31 f1       	breq	.+76     	; 0x2616 <DIO_u8SetLowNibbleValue+0x9a>
    25ca:	8c 81       	ldd	r24, Y+4	; 0x04
    25cc:	9d 81       	ldd	r25, Y+5	; 0x05
    25ce:	83 30       	cpi	r24, 0x03	; 3
    25d0:	91 05       	cpc	r25, r1
    25d2:	89 f1       	breq	.+98     	; 0x2636 <DIO_u8SetLowNibbleValue+0xba>
    25d4:	40 c0       	rjmp	.+128    	; 0x2656 <DIO_u8SetLowNibbleValue+0xda>
		{
			case DIO_PORTA:PORTA&=DIO_LOWNIBBLE_MASK;PORTA|=Copy_u8Value;break;
    25d6:	ab e3       	ldi	r26, 0x3B	; 59
    25d8:	b0 e0       	ldi	r27, 0x00	; 0
    25da:	eb e3       	ldi	r30, 0x3B	; 59
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	80 81       	ld	r24, Z
    25e0:	80 7f       	andi	r24, 0xF0	; 240
    25e2:	8c 93       	st	X, r24
    25e4:	ab e3       	ldi	r26, 0x3B	; 59
    25e6:	b0 e0       	ldi	r27, 0x00	; 0
    25e8:	eb e3       	ldi	r30, 0x3B	; 59
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	90 81       	ld	r25, Z
    25ee:	8b 81       	ldd	r24, Y+3	; 0x03
    25f0:	89 2b       	or	r24, r25
    25f2:	8c 93       	st	X, r24
    25f4:	35 c0       	rjmp	.+106    	; 0x2660 <DIO_u8SetLowNibbleValue+0xe4>
			case DIO_PORTB:PORTB&=DIO_LOWNIBBLE_MASK;PORTB|=Copy_u8Value;break;
    25f6:	a8 e3       	ldi	r26, 0x38	; 56
    25f8:	b0 e0       	ldi	r27, 0x00	; 0
    25fa:	e8 e3       	ldi	r30, 0x38	; 56
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	80 81       	ld	r24, Z
    2600:	80 7f       	andi	r24, 0xF0	; 240
    2602:	8c 93       	st	X, r24
    2604:	a8 e3       	ldi	r26, 0x38	; 56
    2606:	b0 e0       	ldi	r27, 0x00	; 0
    2608:	e8 e3       	ldi	r30, 0x38	; 56
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	90 81       	ld	r25, Z
    260e:	8b 81       	ldd	r24, Y+3	; 0x03
    2610:	89 2b       	or	r24, r25
    2612:	8c 93       	st	X, r24
    2614:	25 c0       	rjmp	.+74     	; 0x2660 <DIO_u8SetLowNibbleValue+0xe4>
			case DIO_PORTC:PORTC&=DIO_LOWNIBBLE_MASK;PORTC|=Copy_u8Value;break;
    2616:	a5 e3       	ldi	r26, 0x35	; 53
    2618:	b0 e0       	ldi	r27, 0x00	; 0
    261a:	e5 e3       	ldi	r30, 0x35	; 53
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	80 81       	ld	r24, Z
    2620:	80 7f       	andi	r24, 0xF0	; 240
    2622:	8c 93       	st	X, r24
    2624:	a5 e3       	ldi	r26, 0x35	; 53
    2626:	b0 e0       	ldi	r27, 0x00	; 0
    2628:	e5 e3       	ldi	r30, 0x35	; 53
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	90 81       	ld	r25, Z
    262e:	8b 81       	ldd	r24, Y+3	; 0x03
    2630:	89 2b       	or	r24, r25
    2632:	8c 93       	st	X, r24
    2634:	15 c0       	rjmp	.+42     	; 0x2660 <DIO_u8SetLowNibbleValue+0xe4>
			case DIO_PORTD:PORTD&=DIO_LOWNIBBLE_MASK;PORTD|=Copy_u8Value;break;
    2636:	a2 e3       	ldi	r26, 0x32	; 50
    2638:	b0 e0       	ldi	r27, 0x00	; 0
    263a:	e2 e3       	ldi	r30, 0x32	; 50
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 81       	ld	r24, Z
    2640:	80 7f       	andi	r24, 0xF0	; 240
    2642:	8c 93       	st	X, r24
    2644:	a2 e3       	ldi	r26, 0x32	; 50
    2646:	b0 e0       	ldi	r27, 0x00	; 0
    2648:	e2 e3       	ldi	r30, 0x32	; 50
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	90 81       	ld	r25, Z
    264e:	8b 81       	ldd	r24, Y+3	; 0x03
    2650:	89 2b       	or	r24, r25
    2652:	8c 93       	st	X, r24
    2654:	05 c0       	rjmp	.+10     	; 0x2660 <DIO_u8SetLowNibbleValue+0xe4>
			default: Local_u8ErrorState=1;
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	89 83       	std	Y+1, r24	; 0x01
    265a:	02 c0       	rjmp	.+4      	; 0x2660 <DIO_u8SetLowNibbleValue+0xe4>
		}
	}
	else
		Local_u8ErrorState=1;
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2660:	89 81       	ldd	r24, Y+1	; 0x01
}
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	0f 90       	pop	r0
    2668:	0f 90       	pop	r0
    266a:	0f 90       	pop	r0
    266c:	cf 91       	pop	r28
    266e:	df 91       	pop	r29
    2670:	08 95       	ret

00002672 <DIO_u8SetHighNibbleValue>:
u8 DIO_u8SetHighNibbleValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    2672:	df 93       	push	r29
    2674:	cf 93       	push	r28
    2676:	00 d0       	rcall	.+0      	; 0x2678 <DIO_u8SetHighNibbleValue+0x6>
    2678:	00 d0       	rcall	.+0      	; 0x267a <DIO_u8SetHighNibbleValue+0x8>
    267a:	0f 92       	push	r0
    267c:	cd b7       	in	r28, 0x3d	; 61
    267e:	de b7       	in	r29, 0x3e	; 62
    2680:	8a 83       	std	Y+2, r24	; 0x02
    2682:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    2684:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port<=DIO_PORTD){
    2686:	8a 81       	ldd	r24, Y+2	; 0x02
    2688:	84 30       	cpi	r24, 0x04	; 4
    268a:	08 f0       	brcs	.+2      	; 0x268e <DIO_u8SetHighNibbleValue+0x1c>
    268c:	87 c0       	rjmp	.+270    	; 0x279c <DIO_u8SetHighNibbleValue+0x12a>
		switch(Copy_u8Port)
    268e:	8a 81       	ldd	r24, Y+2	; 0x02
    2690:	28 2f       	mov	r18, r24
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	3d 83       	std	Y+5, r19	; 0x05
    2696:	2c 83       	std	Y+4, r18	; 0x04
    2698:	8c 81       	ldd	r24, Y+4	; 0x04
    269a:	9d 81       	ldd	r25, Y+5	; 0x05
    269c:	81 30       	cpi	r24, 0x01	; 1
    269e:	91 05       	cpc	r25, r1
    26a0:	79 f1       	breq	.+94     	; 0x2700 <DIO_u8SetHighNibbleValue+0x8e>
    26a2:	2c 81       	ldd	r18, Y+4	; 0x04
    26a4:	3d 81       	ldd	r19, Y+5	; 0x05
    26a6:	22 30       	cpi	r18, 0x02	; 2
    26a8:	31 05       	cpc	r19, r1
    26aa:	2c f4       	brge	.+10     	; 0x26b6 <DIO_u8SetHighNibbleValue+0x44>
    26ac:	8c 81       	ldd	r24, Y+4	; 0x04
    26ae:	9d 81       	ldd	r25, Y+5	; 0x05
    26b0:	00 97       	sbiw	r24, 0x00	; 0
    26b2:	69 f0       	breq	.+26     	; 0x26ce <DIO_u8SetHighNibbleValue+0x5c>
    26b4:	70 c0       	rjmp	.+224    	; 0x2796 <DIO_u8SetHighNibbleValue+0x124>
    26b6:	2c 81       	ldd	r18, Y+4	; 0x04
    26b8:	3d 81       	ldd	r19, Y+5	; 0x05
    26ba:	22 30       	cpi	r18, 0x02	; 2
    26bc:	31 05       	cpc	r19, r1
    26be:	c9 f1       	breq	.+114    	; 0x2732 <DIO_u8SetHighNibbleValue+0xc0>
    26c0:	8c 81       	ldd	r24, Y+4	; 0x04
    26c2:	9d 81       	ldd	r25, Y+5	; 0x05
    26c4:	83 30       	cpi	r24, 0x03	; 3
    26c6:	91 05       	cpc	r25, r1
    26c8:	09 f4       	brne	.+2      	; 0x26cc <DIO_u8SetHighNibbleValue+0x5a>
    26ca:	4c c0       	rjmp	.+152    	; 0x2764 <DIO_u8SetHighNibbleValue+0xf2>
    26cc:	64 c0       	rjmp	.+200    	; 0x2796 <DIO_u8SetHighNibbleValue+0x124>
		{
			case DIO_PORTA:PORTA &= DIO_HIGHNIBBLE_MASK;PORTA |= (Copy_u8Value<<4);break;
    26ce:	ab e3       	ldi	r26, 0x3B	; 59
    26d0:	b0 e0       	ldi	r27, 0x00	; 0
    26d2:	eb e3       	ldi	r30, 0x3B	; 59
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	80 81       	ld	r24, Z
    26d8:	8f 70       	andi	r24, 0x0F	; 15
    26da:	8c 93       	st	X, r24
    26dc:	ab e3       	ldi	r26, 0x3B	; 59
    26de:	b0 e0       	ldi	r27, 0x00	; 0
    26e0:	eb e3       	ldi	r30, 0x3B	; 59
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	80 81       	ld	r24, Z
    26e6:	28 2f       	mov	r18, r24
    26e8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ea:	88 2f       	mov	r24, r24
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	82 95       	swap	r24
    26f0:	92 95       	swap	r25
    26f2:	90 7f       	andi	r25, 0xF0	; 240
    26f4:	98 27       	eor	r25, r24
    26f6:	80 7f       	andi	r24, 0xF0	; 240
    26f8:	98 27       	eor	r25, r24
    26fa:	82 2b       	or	r24, r18
    26fc:	8c 93       	st	X, r24
    26fe:	50 c0       	rjmp	.+160    	; 0x27a0 <DIO_u8SetHighNibbleValue+0x12e>
			case DIO_PORTB:PORTB &= DIO_HIGHNIBBLE_MASK;PORTB |= (Copy_u8Value<<4);break;
    2700:	a8 e3       	ldi	r26, 0x38	; 56
    2702:	b0 e0       	ldi	r27, 0x00	; 0
    2704:	e8 e3       	ldi	r30, 0x38	; 56
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	80 81       	ld	r24, Z
    270a:	8f 70       	andi	r24, 0x0F	; 15
    270c:	8c 93       	st	X, r24
    270e:	a8 e3       	ldi	r26, 0x38	; 56
    2710:	b0 e0       	ldi	r27, 0x00	; 0
    2712:	e8 e3       	ldi	r30, 0x38	; 56
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	80 81       	ld	r24, Z
    2718:	28 2f       	mov	r18, r24
    271a:	8b 81       	ldd	r24, Y+3	; 0x03
    271c:	88 2f       	mov	r24, r24
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	82 95       	swap	r24
    2722:	92 95       	swap	r25
    2724:	90 7f       	andi	r25, 0xF0	; 240
    2726:	98 27       	eor	r25, r24
    2728:	80 7f       	andi	r24, 0xF0	; 240
    272a:	98 27       	eor	r25, r24
    272c:	82 2b       	or	r24, r18
    272e:	8c 93       	st	X, r24
    2730:	37 c0       	rjmp	.+110    	; 0x27a0 <DIO_u8SetHighNibbleValue+0x12e>
			case DIO_PORTC:PORTC &= DIO_HIGHNIBBLE_MASK;PORTC |= (Copy_u8Value<<4);break;
    2732:	a5 e3       	ldi	r26, 0x35	; 53
    2734:	b0 e0       	ldi	r27, 0x00	; 0
    2736:	e5 e3       	ldi	r30, 0x35	; 53
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	80 81       	ld	r24, Z
    273c:	8f 70       	andi	r24, 0x0F	; 15
    273e:	8c 93       	st	X, r24
    2740:	a5 e3       	ldi	r26, 0x35	; 53
    2742:	b0 e0       	ldi	r27, 0x00	; 0
    2744:	e5 e3       	ldi	r30, 0x35	; 53
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	80 81       	ld	r24, Z
    274a:	28 2f       	mov	r18, r24
    274c:	8b 81       	ldd	r24, Y+3	; 0x03
    274e:	88 2f       	mov	r24, r24
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	82 95       	swap	r24
    2754:	92 95       	swap	r25
    2756:	90 7f       	andi	r25, 0xF0	; 240
    2758:	98 27       	eor	r25, r24
    275a:	80 7f       	andi	r24, 0xF0	; 240
    275c:	98 27       	eor	r25, r24
    275e:	82 2b       	or	r24, r18
    2760:	8c 93       	st	X, r24
    2762:	1e c0       	rjmp	.+60     	; 0x27a0 <DIO_u8SetHighNibbleValue+0x12e>
			case DIO_PORTD:PORTD &= DIO_HIGHNIBBLE_MASK;PORTD |= (Copy_u8Value<<4);break;
    2764:	a2 e3       	ldi	r26, 0x32	; 50
    2766:	b0 e0       	ldi	r27, 0x00	; 0
    2768:	e2 e3       	ldi	r30, 0x32	; 50
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	80 81       	ld	r24, Z
    276e:	8f 70       	andi	r24, 0x0F	; 15
    2770:	8c 93       	st	X, r24
    2772:	a2 e3       	ldi	r26, 0x32	; 50
    2774:	b0 e0       	ldi	r27, 0x00	; 0
    2776:	e2 e3       	ldi	r30, 0x32	; 50
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	80 81       	ld	r24, Z
    277c:	28 2f       	mov	r18, r24
    277e:	8b 81       	ldd	r24, Y+3	; 0x03
    2780:	88 2f       	mov	r24, r24
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	82 95       	swap	r24
    2786:	92 95       	swap	r25
    2788:	90 7f       	andi	r25, 0xF0	; 240
    278a:	98 27       	eor	r25, r24
    278c:	80 7f       	andi	r24, 0xF0	; 240
    278e:	98 27       	eor	r25, r24
    2790:	82 2b       	or	r24, r18
    2792:	8c 93       	st	X, r24
    2794:	05 c0       	rjmp	.+10     	; 0x27a0 <DIO_u8SetHighNibbleValue+0x12e>
			default: Local_u8ErrorState=1;
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	89 83       	std	Y+1, r24	; 0x01
    279a:	02 c0       	rjmp	.+4      	; 0x27a0 <DIO_u8SetHighNibbleValue+0x12e>
		}
	}
	else
		Local_u8ErrorState=1;
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    27a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    27a2:	0f 90       	pop	r0
    27a4:	0f 90       	pop	r0
    27a6:	0f 90       	pop	r0
    27a8:	0f 90       	pop	r0
    27aa:	0f 90       	pop	r0
    27ac:	cf 91       	pop	r28
    27ae:	df 91       	pop	r29
    27b0:	08 95       	ret

000027b2 <EXTI_voidInt0Init>:

static void (*EXTI_voidCallBack[3])() = {NULL};


void EXTI_voidInt0Init()
{
    27b2:	df 93       	push	r29
    27b4:	cf 93       	push	r28
    27b6:	cd b7       	in	r28, 0x3d	; 61
    27b8:	de b7       	in	r29, 0x3e	; 62
	MCUCR &= MASK_SENCE_INT0;
    27ba:	a5 e5       	ldi	r26, 0x55	; 85
    27bc:	b0 e0       	ldi	r27, 0x00	; 0
    27be:	e5 e5       	ldi	r30, 0x55	; 85
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	80 81       	ld	r24, Z
    27c4:	8c 7f       	andi	r24, 0xFC	; 252
    27c6:	8c 93       	st	X, r24
	MCUCR |= EXTI0_SENCECONTROL<<MCUCR_ISC00;
    27c8:	a5 e5       	ldi	r26, 0x55	; 85
    27ca:	b0 e0       	ldi	r27, 0x00	; 0
    27cc:	e5 e5       	ldi	r30, 0x55	; 85
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	80 81       	ld	r24, Z
    27d2:	83 60       	ori	r24, 0x03	; 3
    27d4:	8c 93       	st	X, r24

	SET_BIT(GICR,GICR_INT0);
    27d6:	ab e5       	ldi	r26, 0x5B	; 91
    27d8:	b0 e0       	ldi	r27, 0x00	; 0
    27da:	eb e5       	ldi	r30, 0x5B	; 91
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	80 81       	ld	r24, Z
    27e0:	80 64       	ori	r24, 0x40	; 64
    27e2:	8c 93       	st	X, r24
}
    27e4:	cf 91       	pop	r28
    27e6:	df 91       	pop	r29
    27e8:	08 95       	ret

000027ea <EXTI_u8Int0CallBack>:

u8 EXTI_u8Int0CallBack(void (*Notification)())
{
    27ea:	df 93       	push	r29
    27ec:	cf 93       	push	r28
    27ee:	00 d0       	rcall	.+0      	; 0x27f0 <EXTI_u8Int0CallBack+0x6>
    27f0:	0f 92       	push	r0
    27f2:	cd b7       	in	r28, 0x3d	; 61
    27f4:	de b7       	in	r29, 0x3e	; 62
    27f6:	9b 83       	std	Y+3, r25	; 0x03
    27f8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    27fa:	19 82       	std	Y+1, r1	; 0x01
	if(Notification != NULL )
    27fc:	8a 81       	ldd	r24, Y+2	; 0x02
    27fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2800:	00 97       	sbiw	r24, 0x00	; 0
    2802:	39 f0       	breq	.+14     	; 0x2812 <EXTI_u8Int0CallBack+0x28>
	{
		EXTI_voidCallBack[EXTI0] = Notification;
    2804:	8a 81       	ldd	r24, Y+2	; 0x02
    2806:	9b 81       	ldd	r25, Y+3	; 0x03
    2808:	90 93 ba 01 	sts	0x01BA, r25
    280c:	80 93 b9 01 	sts	0x01B9, r24
    2810:	02 c0       	rjmp	.+4      	; 0x2816 <EXTI_u8Int0CallBack+0x2c>
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    2812:	82 e0       	ldi	r24, 0x02	; 2
    2814:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2816:	89 81       	ldd	r24, Y+1	; 0x01
}
    2818:	0f 90       	pop	r0
    281a:	0f 90       	pop	r0
    281c:	0f 90       	pop	r0
    281e:	cf 91       	pop	r28
    2820:	df 91       	pop	r29
    2822:	08 95       	ret

00002824 <EXTI_u8Int0ChangeSence>:

u8 EXTI_u8Int0ChangeSence(u8 Copy_u8Sence)
{
    2824:	df 93       	push	r29
    2826:	cf 93       	push	r28
    2828:	00 d0       	rcall	.+0      	; 0x282a <EXTI_u8Int0ChangeSence+0x6>
    282a:	cd b7       	in	r28, 0x3d	; 61
    282c:	de b7       	in	r29, 0x3e	; 62
    282e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2830:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Sence<=EXTI0_RISING_ADGE)
    2832:	8a 81       	ldd	r24, Y+2	; 0x02
    2834:	84 30       	cpi	r24, 0x04	; 4
    2836:	80 f4       	brcc	.+32     	; 0x2858 <EXTI_u8Int0ChangeSence+0x34>
	{
		MCUCR &= MASK_SENCE_INT0;
    2838:	a5 e5       	ldi	r26, 0x55	; 85
    283a:	b0 e0       	ldi	r27, 0x00	; 0
    283c:	e5 e5       	ldi	r30, 0x55	; 85
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	80 81       	ld	r24, Z
    2842:	8c 7f       	andi	r24, 0xFC	; 252
    2844:	8c 93       	st	X, r24
		MCUCR |= Copy_u8Sence<<MCUCR_ISC00;
    2846:	a5 e5       	ldi	r26, 0x55	; 85
    2848:	b0 e0       	ldi	r27, 0x00	; 0
    284a:	e5 e5       	ldi	r30, 0x55	; 85
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	90 81       	ld	r25, Z
    2850:	8a 81       	ldd	r24, Y+2	; 0x02
    2852:	89 2b       	or	r24, r25
    2854:	8c 93       	st	X, r24
    2856:	02 c0       	rjmp	.+4      	; 0x285c <EXTI_u8Int0ChangeSence+0x38>
	}
	else
		Local_u8ErrorState = NOTOK;
    2858:	81 e0       	ldi	r24, 0x01	; 1
    285a:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    285c:	89 81       	ldd	r24, Y+1	; 0x01
}
    285e:	0f 90       	pop	r0
    2860:	0f 90       	pop	r0
    2862:	cf 91       	pop	r28
    2864:	df 91       	pop	r29
    2866:	08 95       	ret

00002868 <EXTI_voidInt1Init>:
void EXTI_voidInt1Init()
{
    2868:	df 93       	push	r29
    286a:	cf 93       	push	r28
    286c:	cd b7       	in	r28, 0x3d	; 61
    286e:	de b7       	in	r29, 0x3e	; 62
	MCUCR &= MASK_SENCE_INT1;
    2870:	a5 e5       	ldi	r26, 0x55	; 85
    2872:	b0 e0       	ldi	r27, 0x00	; 0
    2874:	e5 e5       	ldi	r30, 0x55	; 85
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	80 81       	ld	r24, Z
    287a:	83 7f       	andi	r24, 0xF3	; 243
    287c:	8c 93       	st	X, r24
	MCUCR |= EXTI1_SENCECONTROL<<MCUCR_ISC10;
    287e:	a5 e5       	ldi	r26, 0x55	; 85
    2880:	b0 e0       	ldi	r27, 0x00	; 0
    2882:	e5 e5       	ldi	r30, 0x55	; 85
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	80 81       	ld	r24, Z
    2888:	88 60       	ori	r24, 0x08	; 8
    288a:	8c 93       	st	X, r24

	SET_BIT(GICR,GICR_INT1);
    288c:	ab e5       	ldi	r26, 0x5B	; 91
    288e:	b0 e0       	ldi	r27, 0x00	; 0
    2890:	eb e5       	ldi	r30, 0x5B	; 91
    2892:	f0 e0       	ldi	r31, 0x00	; 0
    2894:	80 81       	ld	r24, Z
    2896:	80 68       	ori	r24, 0x80	; 128
    2898:	8c 93       	st	X, r24
}
    289a:	cf 91       	pop	r28
    289c:	df 91       	pop	r29
    289e:	08 95       	ret

000028a0 <EXTI_u8Int1CallBack>:

u8 EXTI_u8Int1CallBack(void (*Notification)())
{
    28a0:	df 93       	push	r29
    28a2:	cf 93       	push	r28
    28a4:	00 d0       	rcall	.+0      	; 0x28a6 <EXTI_u8Int1CallBack+0x6>
    28a6:	0f 92       	push	r0
    28a8:	cd b7       	in	r28, 0x3d	; 61
    28aa:	de b7       	in	r29, 0x3e	; 62
    28ac:	9b 83       	std	Y+3, r25	; 0x03
    28ae:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    28b0:	19 82       	std	Y+1, r1	; 0x01
	if(Notification != NULL )
    28b2:	8a 81       	ldd	r24, Y+2	; 0x02
    28b4:	9b 81       	ldd	r25, Y+3	; 0x03
    28b6:	00 97       	sbiw	r24, 0x00	; 0
    28b8:	39 f0       	breq	.+14     	; 0x28c8 <EXTI_u8Int1CallBack+0x28>
	{
		EXTI_voidCallBack[EXTI1] = Notification;
    28ba:	8a 81       	ldd	r24, Y+2	; 0x02
    28bc:	9b 81       	ldd	r25, Y+3	; 0x03
    28be:	90 93 bc 01 	sts	0x01BC, r25
    28c2:	80 93 bb 01 	sts	0x01BB, r24
    28c6:	02 c0       	rjmp	.+4      	; 0x28cc <EXTI_u8Int1CallBack+0x2c>
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    28c8:	82 e0       	ldi	r24, 0x02	; 2
    28ca:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    28cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    28ce:	0f 90       	pop	r0
    28d0:	0f 90       	pop	r0
    28d2:	0f 90       	pop	r0
    28d4:	cf 91       	pop	r28
    28d6:	df 91       	pop	r29
    28d8:	08 95       	ret

000028da <EXTI_u8Int1ChangeSence>:
u8 EXTI_u8Int1ChangeSence(u8 Copy_u8Sence)
{
    28da:	df 93       	push	r29
    28dc:	cf 93       	push	r28
    28de:	00 d0       	rcall	.+0      	; 0x28e0 <EXTI_u8Int1ChangeSence+0x6>
    28e0:	cd b7       	in	r28, 0x3d	; 61
    28e2:	de b7       	in	r29, 0x3e	; 62
    28e4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    28e6:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Sence<=EXTI1_RISING_ADGE)
    28e8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ea:	84 30       	cpi	r24, 0x04	; 4
    28ec:	b8 f4       	brcc	.+46     	; 0x291c <EXTI_u8Int1ChangeSence+0x42>
	{
		MCUCR &= MASK_SENCE_INT1;
    28ee:	a5 e5       	ldi	r26, 0x55	; 85
    28f0:	b0 e0       	ldi	r27, 0x00	; 0
    28f2:	e5 e5       	ldi	r30, 0x55	; 85
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	80 81       	ld	r24, Z
    28f8:	83 7f       	andi	r24, 0xF3	; 243
    28fa:	8c 93       	st	X, r24
		MCUCR |= Copy_u8Sence<<MCUCR_ISC10;
    28fc:	a5 e5       	ldi	r26, 0x55	; 85
    28fe:	b0 e0       	ldi	r27, 0x00	; 0
    2900:	e5 e5       	ldi	r30, 0x55	; 85
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	80 81       	ld	r24, Z
    2906:	28 2f       	mov	r18, r24
    2908:	8a 81       	ldd	r24, Y+2	; 0x02
    290a:	88 2f       	mov	r24, r24
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	88 0f       	add	r24, r24
    2910:	99 1f       	adc	r25, r25
    2912:	88 0f       	add	r24, r24
    2914:	99 1f       	adc	r25, r25
    2916:	82 2b       	or	r24, r18
    2918:	8c 93       	st	X, r24
    291a:	02 c0       	rjmp	.+4      	; 0x2920 <EXTI_u8Int1ChangeSence+0x46>
	}
	else
		Local_u8ErrorState = NOTOK;
    291c:	81 e0       	ldi	r24, 0x01	; 1
    291e:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2920:	89 81       	ldd	r24, Y+1	; 0x01
}
    2922:	0f 90       	pop	r0
    2924:	0f 90       	pop	r0
    2926:	cf 91       	pop	r28
    2928:	df 91       	pop	r29
    292a:	08 95       	ret

0000292c <EXTI_voidInt2Init>:
void EXTI_voidInt2Init()
{
    292c:	df 93       	push	r29
    292e:	cf 93       	push	r28
    2930:	cd b7       	in	r28, 0x3d	; 61
    2932:	de b7       	in	r29, 0x3e	; 62
	MCUCSR &= MASK_SENCE_INT2;
    2934:	a4 e5       	ldi	r26, 0x54	; 84
    2936:	b0 e0       	ldi	r27, 0x00	; 0
    2938:	e4 e5       	ldi	r30, 0x54	; 84
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	80 81       	ld	r24, Z
    293e:	8f 7b       	andi	r24, 0xBF	; 191
    2940:	8c 93       	st	X, r24
	MCUCSR |= EXTI2_SENCECONTROL<<MCUCSR_ISC2;
    2942:	a4 e5       	ldi	r26, 0x54	; 84
    2944:	b0 e0       	ldi	r27, 0x00	; 0
    2946:	e4 e5       	ldi	r30, 0x54	; 84
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	80 81       	ld	r24, Z
    294c:	8c 93       	st	X, r24

	SET_BIT(GICR,GICR_INT2);
    294e:	ab e5       	ldi	r26, 0x5B	; 91
    2950:	b0 e0       	ldi	r27, 0x00	; 0
    2952:	eb e5       	ldi	r30, 0x5B	; 91
    2954:	f0 e0       	ldi	r31, 0x00	; 0
    2956:	80 81       	ld	r24, Z
    2958:	80 62       	ori	r24, 0x20	; 32
    295a:	8c 93       	st	X, r24
}
    295c:	cf 91       	pop	r28
    295e:	df 91       	pop	r29
    2960:	08 95       	ret

00002962 <EXTI_u8Int2CallBack>:

u8 EXTI_u8Int2CallBack(void (*Notification)())
{
    2962:	df 93       	push	r29
    2964:	cf 93       	push	r28
    2966:	00 d0       	rcall	.+0      	; 0x2968 <EXTI_u8Int2CallBack+0x6>
    2968:	0f 92       	push	r0
    296a:	cd b7       	in	r28, 0x3d	; 61
    296c:	de b7       	in	r29, 0x3e	; 62
    296e:	9b 83       	std	Y+3, r25	; 0x03
    2970:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2972:	19 82       	std	Y+1, r1	; 0x01
	if(Notification != NULL )
    2974:	8a 81       	ldd	r24, Y+2	; 0x02
    2976:	9b 81       	ldd	r25, Y+3	; 0x03
    2978:	00 97       	sbiw	r24, 0x00	; 0
    297a:	39 f0       	breq	.+14     	; 0x298a <EXTI_u8Int2CallBack+0x28>
	{
		EXTI_voidCallBack[EXTI2] = Notification;
    297c:	8a 81       	ldd	r24, Y+2	; 0x02
    297e:	9b 81       	ldd	r25, Y+3	; 0x03
    2980:	90 93 be 01 	sts	0x01BE, r25
    2984:	80 93 bd 01 	sts	0x01BD, r24
    2988:	02 c0       	rjmp	.+4      	; 0x298e <EXTI_u8Int2CallBack+0x2c>
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    298a:	82 e0       	ldi	r24, 0x02	; 2
    298c:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    298e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2990:	0f 90       	pop	r0
    2992:	0f 90       	pop	r0
    2994:	0f 90       	pop	r0
    2996:	cf 91       	pop	r28
    2998:	df 91       	pop	r29
    299a:	08 95       	ret

0000299c <EXTI_u8Int2ChangeSence>:

u8 EXTI_u8Int2ChangeSence(u8 Copy_u8Sence)
{
    299c:	df 93       	push	r29
    299e:	cf 93       	push	r28
    29a0:	00 d0       	rcall	.+0      	; 0x29a2 <EXTI_u8Int2ChangeSence+0x6>
    29a2:	cd b7       	in	r28, 0x3d	; 61
    29a4:	de b7       	in	r29, 0x3e	; 62
    29a6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    29a8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Sence<=EXTI2_RISING_ADGE)
    29aa:	8a 81       	ldd	r24, Y+2	; 0x02
    29ac:	82 30       	cpi	r24, 0x02	; 2
    29ae:	e0 f4       	brcc	.+56     	; 0x29e8 <EXTI_u8Int2ChangeSence+0x4c>
	{
		MCUCSR &= MASK_SENCE_INT2;
    29b0:	a4 e5       	ldi	r26, 0x54	; 84
    29b2:	b0 e0       	ldi	r27, 0x00	; 0
    29b4:	e4 e5       	ldi	r30, 0x54	; 84
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	80 81       	ld	r24, Z
    29ba:	8f 7b       	andi	r24, 0xBF	; 191
    29bc:	8c 93       	st	X, r24
		MCUCSR |= Copy_u8Sence<<MCUCSR_ISC2;
    29be:	a4 e5       	ldi	r26, 0x54	; 84
    29c0:	b0 e0       	ldi	r27, 0x00	; 0
    29c2:	e4 e5       	ldi	r30, 0x54	; 84
    29c4:	f0 e0       	ldi	r31, 0x00	; 0
    29c6:	80 81       	ld	r24, Z
    29c8:	28 2f       	mov	r18, r24
    29ca:	8a 81       	ldd	r24, Y+2	; 0x02
    29cc:	88 2f       	mov	r24, r24
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	00 24       	eor	r0, r0
    29d2:	96 95       	lsr	r25
    29d4:	87 95       	ror	r24
    29d6:	07 94       	ror	r0
    29d8:	96 95       	lsr	r25
    29da:	87 95       	ror	r24
    29dc:	07 94       	ror	r0
    29de:	98 2f       	mov	r25, r24
    29e0:	80 2d       	mov	r24, r0
    29e2:	82 2b       	or	r24, r18
    29e4:	8c 93       	st	X, r24
    29e6:	02 c0       	rjmp	.+4      	; 0x29ec <EXTI_u8Int2ChangeSence+0x50>
	}
	else
		Local_u8ErrorState = NOTOK;
    29e8:	81 e0       	ldi	r24, 0x01	; 1
    29ea:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    29ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    29ee:	0f 90       	pop	r0
    29f0:	0f 90       	pop	r0
    29f2:	cf 91       	pop	r28
    29f4:	df 91       	pop	r29
    29f6:	08 95       	ret

000029f8 <EXTI_u8IntDisable>:

u8 EXTI_u8IntDisable(u8 Copy_u8IntID)
{
    29f8:	df 93       	push	r29
    29fa:	cf 93       	push	r28
    29fc:	00 d0       	rcall	.+0      	; 0x29fe <EXTI_u8IntDisable+0x6>
    29fe:	00 d0       	rcall	.+0      	; 0x2a00 <EXTI_u8IntDisable+0x8>
    2a00:	cd b7       	in	r28, 0x3d	; 61
    2a02:	de b7       	in	r29, 0x3e	; 62
    2a04:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2a06:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8IntID)
    2a08:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0a:	28 2f       	mov	r18, r24
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	3c 83       	std	Y+4, r19	; 0x04
    2a10:	2b 83       	std	Y+3, r18	; 0x03
    2a12:	8b 81       	ldd	r24, Y+3	; 0x03
    2a14:	9c 81       	ldd	r25, Y+4	; 0x04
    2a16:	81 30       	cpi	r24, 0x01	; 1
    2a18:	91 05       	cpc	r25, r1
    2a1a:	89 f0       	breq	.+34     	; 0x2a3e <EXTI_u8IntDisable+0x46>
    2a1c:	2b 81       	ldd	r18, Y+3	; 0x03
    2a1e:	3c 81       	ldd	r19, Y+4	; 0x04
    2a20:	22 30       	cpi	r18, 0x02	; 2
    2a22:	31 05       	cpc	r19, r1
    2a24:	a1 f0       	breq	.+40     	; 0x2a4e <EXTI_u8IntDisable+0x56>
    2a26:	8b 81       	ldd	r24, Y+3	; 0x03
    2a28:	9c 81       	ldd	r25, Y+4	; 0x04
    2a2a:	00 97       	sbiw	r24, 0x00	; 0
    2a2c:	c1 f4       	brne	.+48     	; 0x2a5e <EXTI_u8IntDisable+0x66>
	{
	case EXTI0:CLR_BIT(GICR,GICR_INT0);break;
    2a2e:	ab e5       	ldi	r26, 0x5B	; 91
    2a30:	b0 e0       	ldi	r27, 0x00	; 0
    2a32:	eb e5       	ldi	r30, 0x5B	; 91
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	80 81       	ld	r24, Z
    2a38:	8f 7b       	andi	r24, 0xBF	; 191
    2a3a:	8c 93       	st	X, r24
    2a3c:	12 c0       	rjmp	.+36     	; 0x2a62 <EXTI_u8IntDisable+0x6a>
	case EXTI1:CLR_BIT(GICR,GICR_INT1);break;
    2a3e:	ab e5       	ldi	r26, 0x5B	; 91
    2a40:	b0 e0       	ldi	r27, 0x00	; 0
    2a42:	eb e5       	ldi	r30, 0x5B	; 91
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	80 81       	ld	r24, Z
    2a48:	8f 77       	andi	r24, 0x7F	; 127
    2a4a:	8c 93       	st	X, r24
    2a4c:	0a c0       	rjmp	.+20     	; 0x2a62 <EXTI_u8IntDisable+0x6a>
	case EXTI2:CLR_BIT(GICR,GICR_INT2);break;
    2a4e:	ab e5       	ldi	r26, 0x5B	; 91
    2a50:	b0 e0       	ldi	r27, 0x00	; 0
    2a52:	eb e5       	ldi	r30, 0x5B	; 91
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	80 81       	ld	r24, Z
    2a58:	8f 7d       	andi	r24, 0xDF	; 223
    2a5a:	8c 93       	st	X, r24
    2a5c:	02 c0       	rjmp	.+4      	; 0x2a62 <EXTI_u8IntDisable+0x6a>
	default: Local_u8ErrorState = NOTOK;
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2a62:	89 81       	ldd	r24, Y+1	; 0x01

}
    2a64:	0f 90       	pop	r0
    2a66:	0f 90       	pop	r0
    2a68:	0f 90       	pop	r0
    2a6a:	0f 90       	pop	r0
    2a6c:	cf 91       	pop	r28
    2a6e:	df 91       	pop	r29
    2a70:	08 95       	ret

00002a72 <EXTI_u8IntEnable>:
u8 EXTI_u8IntEnable(u8 Copy_u8IntID)
{
    2a72:	df 93       	push	r29
    2a74:	cf 93       	push	r28
    2a76:	00 d0       	rcall	.+0      	; 0x2a78 <EXTI_u8IntEnable+0x6>
    2a78:	00 d0       	rcall	.+0      	; 0x2a7a <EXTI_u8IntEnable+0x8>
    2a7a:	cd b7       	in	r28, 0x3d	; 61
    2a7c:	de b7       	in	r29, 0x3e	; 62
    2a7e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2a80:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8IntID)
    2a82:	8a 81       	ldd	r24, Y+2	; 0x02
    2a84:	28 2f       	mov	r18, r24
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	3c 83       	std	Y+4, r19	; 0x04
    2a8a:	2b 83       	std	Y+3, r18	; 0x03
    2a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a90:	81 30       	cpi	r24, 0x01	; 1
    2a92:	91 05       	cpc	r25, r1
    2a94:	89 f0       	breq	.+34     	; 0x2ab8 <EXTI_u8IntEnable+0x46>
    2a96:	2b 81       	ldd	r18, Y+3	; 0x03
    2a98:	3c 81       	ldd	r19, Y+4	; 0x04
    2a9a:	22 30       	cpi	r18, 0x02	; 2
    2a9c:	31 05       	cpc	r19, r1
    2a9e:	a1 f0       	breq	.+40     	; 0x2ac8 <EXTI_u8IntEnable+0x56>
    2aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa2:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa4:	00 97       	sbiw	r24, 0x00	; 0
    2aa6:	c1 f4       	brne	.+48     	; 0x2ad8 <EXTI_u8IntEnable+0x66>
	{
	case EXTI0:SET_BIT(GICR,GICR_INT0);break;
    2aa8:	ab e5       	ldi	r26, 0x5B	; 91
    2aaa:	b0 e0       	ldi	r27, 0x00	; 0
    2aac:	eb e5       	ldi	r30, 0x5B	; 91
    2aae:	f0 e0       	ldi	r31, 0x00	; 0
    2ab0:	80 81       	ld	r24, Z
    2ab2:	80 64       	ori	r24, 0x40	; 64
    2ab4:	8c 93       	st	X, r24
    2ab6:	12 c0       	rjmp	.+36     	; 0x2adc <EXTI_u8IntEnable+0x6a>
	case EXTI1:SET_BIT(GICR,GICR_INT1);break;
    2ab8:	ab e5       	ldi	r26, 0x5B	; 91
    2aba:	b0 e0       	ldi	r27, 0x00	; 0
    2abc:	eb e5       	ldi	r30, 0x5B	; 91
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	80 81       	ld	r24, Z
    2ac2:	80 68       	ori	r24, 0x80	; 128
    2ac4:	8c 93       	st	X, r24
    2ac6:	0a c0       	rjmp	.+20     	; 0x2adc <EXTI_u8IntEnable+0x6a>
	case EXTI2:SET_BIT(GICR,GICR_INT2);break;
    2ac8:	ab e5       	ldi	r26, 0x5B	; 91
    2aca:	b0 e0       	ldi	r27, 0x00	; 0
    2acc:	eb e5       	ldi	r30, 0x5B	; 91
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	80 81       	ld	r24, Z
    2ad2:	80 62       	ori	r24, 0x20	; 32
    2ad4:	8c 93       	st	X, r24
    2ad6:	02 c0       	rjmp	.+4      	; 0x2adc <EXTI_u8IntEnable+0x6a>
	default: Local_u8ErrorState = NOTOK;
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2adc:	89 81       	ldd	r24, Y+1	; 0x01

}
    2ade:	0f 90       	pop	r0
    2ae0:	0f 90       	pop	r0
    2ae2:	0f 90       	pop	r0
    2ae4:	0f 90       	pop	r0
    2ae6:	cf 91       	pop	r28
    2ae8:	df 91       	pop	r29
    2aea:	08 95       	ret

00002aec <__vector_1>:

void __vector_1 (void)	__attribute__((signal));
void __vector_1 (void)
{
    2aec:	1f 92       	push	r1
    2aee:	0f 92       	push	r0
    2af0:	0f b6       	in	r0, 0x3f	; 63
    2af2:	0f 92       	push	r0
    2af4:	11 24       	eor	r1, r1
    2af6:	2f 93       	push	r18
    2af8:	3f 93       	push	r19
    2afa:	4f 93       	push	r20
    2afc:	5f 93       	push	r21
    2afe:	6f 93       	push	r22
    2b00:	7f 93       	push	r23
    2b02:	8f 93       	push	r24
    2b04:	9f 93       	push	r25
    2b06:	af 93       	push	r26
    2b08:	bf 93       	push	r27
    2b0a:	ef 93       	push	r30
    2b0c:	ff 93       	push	r31
    2b0e:	df 93       	push	r29
    2b10:	cf 93       	push	r28
    2b12:	cd b7       	in	r28, 0x3d	; 61
    2b14:	de b7       	in	r29, 0x3e	; 62
	EXTI_voidCallBack[EXTI0]();
    2b16:	e0 91 b9 01 	lds	r30, 0x01B9
    2b1a:	f0 91 ba 01 	lds	r31, 0x01BA
    2b1e:	09 95       	icall
}
    2b20:	cf 91       	pop	r28
    2b22:	df 91       	pop	r29
    2b24:	ff 91       	pop	r31
    2b26:	ef 91       	pop	r30
    2b28:	bf 91       	pop	r27
    2b2a:	af 91       	pop	r26
    2b2c:	9f 91       	pop	r25
    2b2e:	8f 91       	pop	r24
    2b30:	7f 91       	pop	r23
    2b32:	6f 91       	pop	r22
    2b34:	5f 91       	pop	r21
    2b36:	4f 91       	pop	r20
    2b38:	3f 91       	pop	r19
    2b3a:	2f 91       	pop	r18
    2b3c:	0f 90       	pop	r0
    2b3e:	0f be       	out	0x3f, r0	; 63
    2b40:	0f 90       	pop	r0
    2b42:	1f 90       	pop	r1
    2b44:	18 95       	reti

00002b46 <__vector_2>:

void __vector_2 (void)	__attribute__((signal));
void __vector_2 (void)
{
    2b46:	1f 92       	push	r1
    2b48:	0f 92       	push	r0
    2b4a:	0f b6       	in	r0, 0x3f	; 63
    2b4c:	0f 92       	push	r0
    2b4e:	11 24       	eor	r1, r1
    2b50:	2f 93       	push	r18
    2b52:	3f 93       	push	r19
    2b54:	4f 93       	push	r20
    2b56:	5f 93       	push	r21
    2b58:	6f 93       	push	r22
    2b5a:	7f 93       	push	r23
    2b5c:	8f 93       	push	r24
    2b5e:	9f 93       	push	r25
    2b60:	af 93       	push	r26
    2b62:	bf 93       	push	r27
    2b64:	ef 93       	push	r30
    2b66:	ff 93       	push	r31
    2b68:	df 93       	push	r29
    2b6a:	cf 93       	push	r28
    2b6c:	cd b7       	in	r28, 0x3d	; 61
    2b6e:	de b7       	in	r29, 0x3e	; 62
	EXTI_voidCallBack[EXTI1]();
    2b70:	e0 91 bb 01 	lds	r30, 0x01BB
    2b74:	f0 91 bc 01 	lds	r31, 0x01BC
    2b78:	09 95       	icall
}
    2b7a:	cf 91       	pop	r28
    2b7c:	df 91       	pop	r29
    2b7e:	ff 91       	pop	r31
    2b80:	ef 91       	pop	r30
    2b82:	bf 91       	pop	r27
    2b84:	af 91       	pop	r26
    2b86:	9f 91       	pop	r25
    2b88:	8f 91       	pop	r24
    2b8a:	7f 91       	pop	r23
    2b8c:	6f 91       	pop	r22
    2b8e:	5f 91       	pop	r21
    2b90:	4f 91       	pop	r20
    2b92:	3f 91       	pop	r19
    2b94:	2f 91       	pop	r18
    2b96:	0f 90       	pop	r0
    2b98:	0f be       	out	0x3f, r0	; 63
    2b9a:	0f 90       	pop	r0
    2b9c:	1f 90       	pop	r1
    2b9e:	18 95       	reti

00002ba0 <__vector_3>:

void __vector_3 (void)	__attribute__((signal));
void __vector_3 (void)
{
    2ba0:	1f 92       	push	r1
    2ba2:	0f 92       	push	r0
    2ba4:	0f b6       	in	r0, 0x3f	; 63
    2ba6:	0f 92       	push	r0
    2ba8:	11 24       	eor	r1, r1
    2baa:	2f 93       	push	r18
    2bac:	3f 93       	push	r19
    2bae:	4f 93       	push	r20
    2bb0:	5f 93       	push	r21
    2bb2:	6f 93       	push	r22
    2bb4:	7f 93       	push	r23
    2bb6:	8f 93       	push	r24
    2bb8:	9f 93       	push	r25
    2bba:	af 93       	push	r26
    2bbc:	bf 93       	push	r27
    2bbe:	ef 93       	push	r30
    2bc0:	ff 93       	push	r31
    2bc2:	df 93       	push	r29
    2bc4:	cf 93       	push	r28
    2bc6:	cd b7       	in	r28, 0x3d	; 61
    2bc8:	de b7       	in	r29, 0x3e	; 62
	EXTI_voidCallBack[EXTI2]();
    2bca:	e0 91 bd 01 	lds	r30, 0x01BD
    2bce:	f0 91 be 01 	lds	r31, 0x01BE
    2bd2:	09 95       	icall
}
    2bd4:	cf 91       	pop	r28
    2bd6:	df 91       	pop	r29
    2bd8:	ff 91       	pop	r31
    2bda:	ef 91       	pop	r30
    2bdc:	bf 91       	pop	r27
    2bde:	af 91       	pop	r26
    2be0:	9f 91       	pop	r25
    2be2:	8f 91       	pop	r24
    2be4:	7f 91       	pop	r23
    2be6:	6f 91       	pop	r22
    2be8:	5f 91       	pop	r21
    2bea:	4f 91       	pop	r20
    2bec:	3f 91       	pop	r19
    2bee:	2f 91       	pop	r18
    2bf0:	0f 90       	pop	r0
    2bf2:	0f be       	out	0x3f, r0	; 63
    2bf4:	0f 90       	pop	r0
    2bf6:	1f 90       	pop	r1
    2bf8:	18 95       	reti

00002bfa <GIE_voidEnable>:
#include "../MCAL/GIE_interface.h"
#include "../MCAL/GIE_register.h"


void GIE_voidEnable()
{
    2bfa:	df 93       	push	r29
    2bfc:	cf 93       	push	r28
    2bfe:	cd b7       	in	r28, 0x3d	; 61
    2c00:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    2c02:	af e5       	ldi	r26, 0x5F	; 95
    2c04:	b0 e0       	ldi	r27, 0x00	; 0
    2c06:	ef e5       	ldi	r30, 0x5F	; 95
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	80 81       	ld	r24, Z
    2c0c:	80 68       	ori	r24, 0x80	; 128
    2c0e:	8c 93       	st	X, r24
}
    2c10:	cf 91       	pop	r28
    2c12:	df 91       	pop	r29
    2c14:	08 95       	ret

00002c16 <GIE_voidDisable>:

void GIE_voidDisable()
{
    2c16:	df 93       	push	r29
    2c18:	cf 93       	push	r28
    2c1a:	cd b7       	in	r28, 0x3d	; 61
    2c1c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    2c1e:	af e5       	ldi	r26, 0x5F	; 95
    2c20:	b0 e0       	ldi	r27, 0x00	; 0
    2c22:	ef e5       	ldi	r30, 0x5F	; 95
    2c24:	f0 e0       	ldi	r31, 0x00	; 0
    2c26:	80 81       	ld	r24, Z
    2c28:	8f 77       	andi	r24, 0x7F	; 127
    2c2a:	8c 93       	st	X, r24
}
    2c2c:	cf 91       	pop	r28
    2c2e:	df 91       	pop	r29
    2c30:	08 95       	ret

00002c32 <KPD_u8Key_pressed>:
#include "../HAL/KPD_config.h"
#include "../HAL/KPD_interface.h"
#include "../HAL/KPD_private.h"

u8 KPD_u8Key_pressed()
{
    2c32:	df 93       	push	r29
    2c34:	cf 93       	push	r28
    2c36:	00 d0       	rcall	.+0      	; 0x2c38 <KPD_u8Key_pressed+0x6>
    2c38:	00 d0       	rcall	.+0      	; 0x2c3a <KPD_u8Key_pressed+0x8>
    2c3a:	0f 92       	push	r0
    2c3c:	cd b7       	in	r28, 0x3d	; 61
    2c3e:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8RowItrator;
	u8 Local_u8ColItrator;
	u8 Local_u8GetState;
	u8 Local_u8KeyPressed = KPD_NO_PRESSED_KEY;
    2c40:	8f ef       	ldi	r24, 0xFF	; 255
    2c42:	89 83       	std	Y+1, r24	; 0x01
	static u8 Local_u8KPD_ROW_PINS[Max_Rows] = { KPD_ROW_PIN0, KPD_ROW_PIN1,
			KPD_ROW_PIN2, KPD_ROW_PIN3 };
	static u8 Local_u8KPD_COL_PINS[Max_Cols] = { KPD_COL_PIN0, KPD_COL_PIN1,
			KPD_COL_PIN2, KPD_COL_PIN3 };
	static u8 Local_u8KPD_Nums[Max_Rows][Max_Cols] = KPD_u8ARR;
	for (Local_u8ColItrator = 0; Local_u8ColItrator < Max_Cols;
    2c44:	1a 82       	std	Y+2, r1	; 0x02
    2c46:	5e c0       	rjmp	.+188    	; 0x2d04 <KPD_u8Key_pressed+0xd2>
			Local_u8ColItrator++) {
		DIO_u8SetPinValue(KPD_INPUT_PORT,
    2c48:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4a:	88 2f       	mov	r24, r24
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	fc 01       	movw	r30, r24
    2c50:	e6 57       	subi	r30, 0x76	; 118
    2c52:	fe 4f       	sbci	r31, 0xFE	; 254
    2c54:	90 81       	ld	r25, Z
    2c56:	82 e0       	ldi	r24, 0x02	; 2
    2c58:	69 2f       	mov	r22, r25
    2c5a:	40 e0       	ldi	r20, 0x00	; 0
    2c5c:	0e 94 31 10 	call	0x2062	; 0x2062 <DIO_u8SetPinValue>
				Local_u8KPD_COL_PINS[Local_u8ColItrator], DIO_PIN_LOW);
		/*Read the current Row*/
		for (Local_u8RowItrator = 0; Local_u8RowItrator < Max_Rows;
    2c60:	1b 82       	std	Y+3, r1	; 0x03
    2c62:	3d c0       	rjmp	.+122    	; 0x2cde <KPD_u8Key_pressed+0xac>
				Local_u8RowItrator++) {
			DIO_u8GetPinValue(KPD_INPUT_PORT,
    2c64:	8b 81       	ldd	r24, Y+3	; 0x03
    2c66:	88 2f       	mov	r24, r24
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	fc 01       	movw	r30, r24
    2c6c:	e2 57       	subi	r30, 0x72	; 114
    2c6e:	fe 4f       	sbci	r31, 0xFE	; 254
    2c70:	90 81       	ld	r25, Z
    2c72:	9e 01       	movw	r18, r28
    2c74:	2c 5f       	subi	r18, 0xFC	; 252
    2c76:	3f 4f       	sbci	r19, 0xFF	; 255
    2c78:	82 e0       	ldi	r24, 0x02	; 2
    2c7a:	69 2f       	mov	r22, r25
    2c7c:	a9 01       	movw	r20, r18
    2c7e:	0e 94 98 11 	call	0x2330	; 0x2330 <DIO_u8GetPinValue>
					Local_u8KPD_ROW_PINS[Local_u8RowItrator],
					&Local_u8GetState);
			/*chick switch id pressed */
			if (Local_u8GetState == DIO_PIN_LOW) {
    2c82:	8c 81       	ldd	r24, Y+4	; 0x04
    2c84:	88 23       	and	r24, r24
    2c86:	41 f5       	brne	.+80     	; 0x2cd8 <KPD_u8Key_pressed+0xa6>
				Local_u8KeyPressed =
    2c88:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8a:	48 2f       	mov	r20, r24
    2c8c:	50 e0       	ldi	r21, 0x00	; 0
    2c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c90:	28 2f       	mov	r18, r24
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	ca 01       	movw	r24, r20
    2c96:	88 0f       	add	r24, r24
    2c98:	99 1f       	adc	r25, r25
    2c9a:	88 0f       	add	r24, r24
    2c9c:	99 1f       	adc	r25, r25
    2c9e:	82 0f       	add	r24, r18
    2ca0:	93 1f       	adc	r25, r19
    2ca2:	fc 01       	movw	r30, r24
    2ca4:	e6 58       	subi	r30, 0x86	; 134
    2ca6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ca8:	80 81       	ld	r24, Z
    2caa:	89 83       	std	Y+1, r24	; 0x01
    2cac:	0f c0       	rjmp	.+30     	; 0x2ccc <KPD_u8Key_pressed+0x9a>
						Local_u8KPD_Nums[Local_u8RowItrator][Local_u8ColItrator];
				/*polling busy waiting until the key is released*/
				while (Local_u8GetState == DIO_PIN_LOW) {
					DIO_u8GetPinValue(KPD_INPUT_PORT,
    2cae:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb0:	88 2f       	mov	r24, r24
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	fc 01       	movw	r30, r24
    2cb6:	e2 57       	subi	r30, 0x72	; 114
    2cb8:	fe 4f       	sbci	r31, 0xFE	; 254
    2cba:	90 81       	ld	r25, Z
    2cbc:	9e 01       	movw	r18, r28
    2cbe:	2c 5f       	subi	r18, 0xFC	; 252
    2cc0:	3f 4f       	sbci	r19, 0xFF	; 255
    2cc2:	82 e0       	ldi	r24, 0x02	; 2
    2cc4:	69 2f       	mov	r22, r25
    2cc6:	a9 01       	movw	r20, r18
    2cc8:	0e 94 98 11 	call	0x2330	; 0x2330 <DIO_u8GetPinValue>
			/*chick switch id pressed */
			if (Local_u8GetState == DIO_PIN_LOW) {
				Local_u8KeyPressed =
						Local_u8KPD_Nums[Local_u8RowItrator][Local_u8ColItrator];
				/*polling busy waiting until the key is released*/
				while (Local_u8GetState == DIO_PIN_LOW) {
    2ccc:	8c 81       	ldd	r24, Y+4	; 0x04
    2cce:	88 23       	and	r24, r24
    2cd0:	71 f3       	breq	.-36     	; 0x2cae <KPD_u8Key_pressed+0x7c>
					DIO_u8GetPinValue(KPD_INPUT_PORT,
							Local_u8KPD_ROW_PINS[Local_u8RowItrator],
							&Local_u8GetState);
				}
				return Local_u8KeyPressed;
    2cd2:	89 81       	ldd	r24, Y+1	; 0x01
    2cd4:	8d 83       	std	Y+5, r24	; 0x05
    2cd6:	1c c0       	rjmp	.+56     	; 0x2d10 <KPD_u8Key_pressed+0xde>
			Local_u8ColItrator++) {
		DIO_u8SetPinValue(KPD_INPUT_PORT,
				Local_u8KPD_COL_PINS[Local_u8ColItrator], DIO_PIN_LOW);
		/*Read the current Row*/
		for (Local_u8RowItrator = 0; Local_u8RowItrator < Max_Rows;
				Local_u8RowItrator++) {
    2cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cda:	8f 5f       	subi	r24, 0xFF	; 255
    2cdc:	8b 83       	std	Y+3, r24	; 0x03
	for (Local_u8ColItrator = 0; Local_u8ColItrator < Max_Cols;
			Local_u8ColItrator++) {
		DIO_u8SetPinValue(KPD_INPUT_PORT,
				Local_u8KPD_COL_PINS[Local_u8ColItrator], DIO_PIN_LOW);
		/*Read the current Row*/
		for (Local_u8RowItrator = 0; Local_u8RowItrator < Max_Rows;
    2cde:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce0:	84 30       	cpi	r24, 0x04	; 4
    2ce2:	08 f4       	brcc	.+2      	; 0x2ce6 <KPD_u8Key_pressed+0xb4>
    2ce4:	bf cf       	rjmp	.-130    	; 0x2c64 <KPD_u8Key_pressed+0x32>
							&Local_u8GetState);
				}
				return Local_u8KeyPressed;
			}
		}
		DIO_u8SetPinValue(KPD_INPUT_PORT,
    2ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce8:	88 2f       	mov	r24, r24
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	fc 01       	movw	r30, r24
    2cee:	e6 57       	subi	r30, 0x76	; 118
    2cf0:	fe 4f       	sbci	r31, 0xFE	; 254
    2cf2:	90 81       	ld	r25, Z
    2cf4:	82 e0       	ldi	r24, 0x02	; 2
    2cf6:	69 2f       	mov	r22, r25
    2cf8:	41 e0       	ldi	r20, 0x01	; 1
    2cfa:	0e 94 31 10 	call	0x2062	; 0x2062 <DIO_u8SetPinValue>
			KPD_ROW_PIN2, KPD_ROW_PIN3 };
	static u8 Local_u8KPD_COL_PINS[Max_Cols] = { KPD_COL_PIN0, KPD_COL_PIN1,
			KPD_COL_PIN2, KPD_COL_PIN3 };
	static u8 Local_u8KPD_Nums[Max_Rows][Max_Cols] = KPD_u8ARR;
	for (Local_u8ColItrator = 0; Local_u8ColItrator < Max_Cols;
			Local_u8ColItrator++) {
    2cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2d00:	8f 5f       	subi	r24, 0xFF	; 255
    2d02:	8a 83       	std	Y+2, r24	; 0x02
	static u8 Local_u8KPD_ROW_PINS[Max_Rows] = { KPD_ROW_PIN0, KPD_ROW_PIN1,
			KPD_ROW_PIN2, KPD_ROW_PIN3 };
	static u8 Local_u8KPD_COL_PINS[Max_Cols] = { KPD_COL_PIN0, KPD_COL_PIN1,
			KPD_COL_PIN2, KPD_COL_PIN3 };
	static u8 Local_u8KPD_Nums[Max_Rows][Max_Cols] = KPD_u8ARR;
	for (Local_u8ColItrator = 0; Local_u8ColItrator < Max_Cols;
    2d04:	8a 81       	ldd	r24, Y+2	; 0x02
    2d06:	84 30       	cpi	r24, 0x04	; 4
    2d08:	08 f4       	brcc	.+2      	; 0x2d0c <KPD_u8Key_pressed+0xda>
    2d0a:	9e cf       	rjmp	.-196    	; 0x2c48 <KPD_u8Key_pressed+0x16>
			}
		}
		DIO_u8SetPinValue(KPD_INPUT_PORT,
				Local_u8KPD_COL_PINS[Local_u8ColItrator], DIO_PIN_HIGH);
	}
	return Local_u8KeyPressed;
    2d0c:	89 81       	ldd	r24, Y+1	; 0x01
    2d0e:	8d 83       	std	Y+5, r24	; 0x05
    2d10:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2d12:	0f 90       	pop	r0
    2d14:	0f 90       	pop	r0
    2d16:	0f 90       	pop	r0
    2d18:	0f 90       	pop	r0
    2d1a:	0f 90       	pop	r0
    2d1c:	cf 91       	pop	r28
    2d1e:	df 91       	pop	r29
    2d20:	08 95       	ret

00002d22 <LED_u8TurnOn>:
#include "../HAL/LED_private.h"
#include "../HAL/LED_config.h"
#include "../HAL/LED_interface.h"

u8 LED_u8TurnOn(LED_t * Copy_LED)
{
    2d22:	df 93       	push	r29
    2d24:	cf 93       	push	r28
    2d26:	00 d0       	rcall	.+0      	; 0x2d28 <LED_u8TurnOn+0x6>
    2d28:	0f 92       	push	r0
    2d2a:	cd b7       	in	r28, 0x3d	; 61
    2d2c:	de b7       	in	r29, 0x3e	; 62
    2d2e:	9b 83       	std	Y+3, r25	; 0x03
    2d30:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2d32:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_LED->ConnType==LED_SOUCE)
    2d34:	ea 81       	ldd	r30, Y+2	; 0x02
    2d36:	fb 81       	ldd	r31, Y+3	; 0x03
    2d38:	82 81       	ldd	r24, Z+2	; 0x02
    2d3a:	81 30       	cpi	r24, 0x01	; 1
    2d3c:	59 f4       	brne	.+22     	; 0x2d54 <LED_u8TurnOn+0x32>
	{
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,DIO_PIN_HIGH);
    2d3e:	ea 81       	ldd	r30, Y+2	; 0x02
    2d40:	fb 81       	ldd	r31, Y+3	; 0x03
    2d42:	80 81       	ld	r24, Z
    2d44:	ea 81       	ldd	r30, Y+2	; 0x02
    2d46:	fb 81       	ldd	r31, Y+3	; 0x03
    2d48:	91 81       	ldd	r25, Z+1	; 0x01
    2d4a:	69 2f       	mov	r22, r25
    2d4c:	41 e0       	ldi	r20, 0x01	; 1
    2d4e:	0e 94 31 10 	call	0x2062	; 0x2062 <DIO_u8SetPinValue>
    2d52:	12 c0       	rjmp	.+36     	; 0x2d78 <LED_u8TurnOn+0x56>
	}
	else if(Copy_LED->ConnType==LED_SINK)
    2d54:	ea 81       	ldd	r30, Y+2	; 0x02
    2d56:	fb 81       	ldd	r31, Y+3	; 0x03
    2d58:	82 81       	ldd	r24, Z+2	; 0x02
    2d5a:	88 23       	and	r24, r24
    2d5c:	59 f4       	brne	.+22     	; 0x2d74 <LED_u8TurnOn+0x52>
	{
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,DIO_PIN_LOW);
    2d5e:	ea 81       	ldd	r30, Y+2	; 0x02
    2d60:	fb 81       	ldd	r31, Y+3	; 0x03
    2d62:	80 81       	ld	r24, Z
    2d64:	ea 81       	ldd	r30, Y+2	; 0x02
    2d66:	fb 81       	ldd	r31, Y+3	; 0x03
    2d68:	91 81       	ldd	r25, Z+1	; 0x01
    2d6a:	69 2f       	mov	r22, r25
    2d6c:	40 e0       	ldi	r20, 0x00	; 0
    2d6e:	0e 94 31 10 	call	0x2062	; 0x2062 <DIO_u8SetPinValue>
    2d72:	02 c0       	rjmp	.+4      	; 0x2d78 <LED_u8TurnOn+0x56>
	}
	else
		Local_u8ErrorState = NOTOK;
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    2d78:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d7a:	0f 90       	pop	r0
    2d7c:	0f 90       	pop	r0
    2d7e:	0f 90       	pop	r0
    2d80:	cf 91       	pop	r28
    2d82:	df 91       	pop	r29
    2d84:	08 95       	ret

00002d86 <LED_u8TurnOff>:
u8 LED_u8TurnOff(LED_t * Copy_LED)
{
    2d86:	df 93       	push	r29
    2d88:	cf 93       	push	r28
    2d8a:	00 d0       	rcall	.+0      	; 0x2d8c <LED_u8TurnOff+0x6>
    2d8c:	0f 92       	push	r0
    2d8e:	cd b7       	in	r28, 0x3d	; 61
    2d90:	de b7       	in	r29, 0x3e	; 62
    2d92:	9b 83       	std	Y+3, r25	; 0x03
    2d94:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2d96:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_LED->ConnType==LED_SOUCE)
    2d98:	ea 81       	ldd	r30, Y+2	; 0x02
    2d9a:	fb 81       	ldd	r31, Y+3	; 0x03
    2d9c:	82 81       	ldd	r24, Z+2	; 0x02
    2d9e:	81 30       	cpi	r24, 0x01	; 1
    2da0:	59 f4       	brne	.+22     	; 0x2db8 <LED_u8TurnOff+0x32>
	{
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,DIO_PIN_LOW);
    2da2:	ea 81       	ldd	r30, Y+2	; 0x02
    2da4:	fb 81       	ldd	r31, Y+3	; 0x03
    2da6:	80 81       	ld	r24, Z
    2da8:	ea 81       	ldd	r30, Y+2	; 0x02
    2daa:	fb 81       	ldd	r31, Y+3	; 0x03
    2dac:	91 81       	ldd	r25, Z+1	; 0x01
    2dae:	69 2f       	mov	r22, r25
    2db0:	40 e0       	ldi	r20, 0x00	; 0
    2db2:	0e 94 31 10 	call	0x2062	; 0x2062 <DIO_u8SetPinValue>
    2db6:	12 c0       	rjmp	.+36     	; 0x2ddc <LED_u8TurnOff+0x56>
	}
	else if(Copy_LED->ConnType==LED_SINK)
    2db8:	ea 81       	ldd	r30, Y+2	; 0x02
    2dba:	fb 81       	ldd	r31, Y+3	; 0x03
    2dbc:	82 81       	ldd	r24, Z+2	; 0x02
    2dbe:	88 23       	and	r24, r24
    2dc0:	59 f4       	brne	.+22     	; 0x2dd8 <LED_u8TurnOff+0x52>
	{
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,DIO_PIN_HIGH);
    2dc2:	ea 81       	ldd	r30, Y+2	; 0x02
    2dc4:	fb 81       	ldd	r31, Y+3	; 0x03
    2dc6:	80 81       	ld	r24, Z
    2dc8:	ea 81       	ldd	r30, Y+2	; 0x02
    2dca:	fb 81       	ldd	r31, Y+3	; 0x03
    2dcc:	91 81       	ldd	r25, Z+1	; 0x01
    2dce:	69 2f       	mov	r22, r25
    2dd0:	41 e0       	ldi	r20, 0x01	; 1
    2dd2:	0e 94 31 10 	call	0x2062	; 0x2062 <DIO_u8SetPinValue>
    2dd6:	02 c0       	rjmp	.+4      	; 0x2ddc <LED_u8TurnOff+0x56>
	}
	else
		Local_u8ErrorState = NOTOK;
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    2ddc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dde:	0f 90       	pop	r0
    2de0:	0f 90       	pop	r0
    2de2:	0f 90       	pop	r0
    2de4:	cf 91       	pop	r28
    2de6:	df 91       	pop	r29
    2de8:	08 95       	ret

00002dea <LED_u8TogLed>:
u8 LED_u8TogLed(LED_t *Copy_LED)
{
    2dea:	df 93       	push	r29
    2dec:	cf 93       	push	r28
    2dee:	00 d0       	rcall	.+0      	; 0x2df0 <LED_u8TogLed+0x6>
    2df0:	0f 92       	push	r0
    2df2:	cd b7       	in	r28, 0x3d	; 61
    2df4:	de b7       	in	r29, 0x3e	; 62
    2df6:	9b 83       	std	Y+3, r25	; 0x03
    2df8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2dfa:	19 82       	std	Y+1, r1	; 0x01
	static u8 Local_u8State = 0;
	if(Copy_LED->ConnType==LED_SOUCE)
    2dfc:	ea 81       	ldd	r30, Y+2	; 0x02
    2dfe:	fb 81       	ldd	r31, Y+3	; 0x03
    2e00:	82 81       	ldd	r24, Z+2	; 0x02
    2e02:	81 30       	cpi	r24, 0x01	; 1
    2e04:	99 f4       	brne	.+38     	; 0x2e2c <LED_u8TogLed+0x42>
	{
		TOG_BIT(Local_u8State,0);
    2e06:	90 91 bf 01 	lds	r25, 0x01BF
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	89 27       	eor	r24, r25
    2e0e:	80 93 bf 01 	sts	0x01BF, r24
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,Local_u8State);
    2e12:	ea 81       	ldd	r30, Y+2	; 0x02
    2e14:	fb 81       	ldd	r31, Y+3	; 0x03
    2e16:	80 81       	ld	r24, Z
    2e18:	ea 81       	ldd	r30, Y+2	; 0x02
    2e1a:	fb 81       	ldd	r31, Y+3	; 0x03
    2e1c:	91 81       	ldd	r25, Z+1	; 0x01
    2e1e:	20 91 bf 01 	lds	r18, 0x01BF
    2e22:	69 2f       	mov	r22, r25
    2e24:	42 2f       	mov	r20, r18
    2e26:	0e 94 31 10 	call	0x2062	; 0x2062 <DIO_u8SetPinValue>
    2e2a:	1a c0       	rjmp	.+52     	; 0x2e60 <LED_u8TogLed+0x76>
	}
	else if(Copy_LED->ConnType==LED_SINK)
    2e2c:	ea 81       	ldd	r30, Y+2	; 0x02
    2e2e:	fb 81       	ldd	r31, Y+3	; 0x03
    2e30:	82 81       	ldd	r24, Z+2	; 0x02
    2e32:	88 23       	and	r24, r24
    2e34:	99 f4       	brne	.+38     	; 0x2e5c <LED_u8TogLed+0x72>
	{
		TOG_BIT(Local_u8State,0);
    2e36:	90 91 bf 01 	lds	r25, 0x01BF
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	89 27       	eor	r24, r25
    2e3e:	80 93 bf 01 	sts	0x01BF, r24
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,Local_u8State);
    2e42:	ea 81       	ldd	r30, Y+2	; 0x02
    2e44:	fb 81       	ldd	r31, Y+3	; 0x03
    2e46:	80 81       	ld	r24, Z
    2e48:	ea 81       	ldd	r30, Y+2	; 0x02
    2e4a:	fb 81       	ldd	r31, Y+3	; 0x03
    2e4c:	91 81       	ldd	r25, Z+1	; 0x01
    2e4e:	20 91 bf 01 	lds	r18, 0x01BF
    2e52:	69 2f       	mov	r22, r25
    2e54:	42 2f       	mov	r20, r18
    2e56:	0e 94 31 10 	call	0x2062	; 0x2062 <DIO_u8SetPinValue>
    2e5a:	02 c0       	rjmp	.+4      	; 0x2e60 <LED_u8TogLed+0x76>
	}
	else
		Local_u8ErrorState = NOTOK;
    2e5c:	81 e0       	ldi	r24, 0x01	; 1
    2e5e:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    2e60:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e62:	0f 90       	pop	r0
    2e64:	0f 90       	pop	r0
    2e66:	0f 90       	pop	r0
    2e68:	cf 91       	pop	r28
    2e6a:	df 91       	pop	r29
    2e6c:	08 95       	ret

00002e6e <PORT_voidInit>:
#include "../MCAL/PORT_config.h"
#include "../MCAL/PORT_register.h"
#include "../MCAL/PORT_interface.h"

void PORT_voidInit()
{
    2e6e:	df 93       	push	r29
    2e70:	cf 93       	push	r28
    2e72:	cd b7       	in	r28, 0x3d	; 61
    2e74:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;	
    2e76:	ea e3       	ldi	r30, 0x3A	; 58
    2e78:	f0 e0       	ldi	r31, 0x00	; 0
    2e7a:	87 e8       	ldi	r24, 0x87	; 135
    2e7c:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    2e7e:	e7 e3       	ldi	r30, 0x37	; 55
    2e80:	f0 e0       	ldi	r31, 0x00	; 0
    2e82:	88 ef       	ldi	r24, 0xF8	; 248
    2e84:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    2e86:	e4 e3       	ldi	r30, 0x34	; 52
    2e88:	f0 e0       	ldi	r31, 0x00	; 0
    2e8a:	80 ef       	ldi	r24, 0xF0	; 240
    2e8c:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    2e8e:	e1 e3       	ldi	r30, 0x31	; 49
    2e90:	f0 e0       	ldi	r31, 0x00	; 0
    2e92:	10 82       	st	Z, r1
	
	PORTA =PORTA_INIT_VALUE;
    2e94:	eb e3       	ldi	r30, 0x3B	; 59
    2e96:	f0 e0       	ldi	r31, 0x00	; 0
    2e98:	10 82       	st	Z, r1
	PORTB =PORTB_INIT_VALUE;
    2e9a:	e8 e3       	ldi	r30, 0x38	; 56
    2e9c:	f0 e0       	ldi	r31, 0x00	; 0
    2e9e:	10 82       	st	Z, r1
	PORTC =PORTC_INIT_VALUE;
    2ea0:	e5 e3       	ldi	r30, 0x35	; 53
    2ea2:	f0 e0       	ldi	r31, 0x00	; 0
    2ea4:	8f ef       	ldi	r24, 0xFF	; 255
    2ea6:	80 83       	st	Z, r24
	PORTD =PORTD_INIT_VALUE;
    2ea8:	e2 e3       	ldi	r30, 0x32	; 50
    2eaa:	f0 e0       	ldi	r31, 0x00	; 0
    2eac:	10 82       	st	Z, r1
	
}
    2eae:	cf 91       	pop	r28
    2eb0:	df 91       	pop	r29
    2eb2:	08 95       	ret

00002eb4 <SERVO_voidInit>:
#include "../HAL/SERVO_private.h"
#include "../HAL/SERVO_config.h"
#include "../HAL/SERVO_interface.h"

void SERVO_voidInit()
{
    2eb4:	df 93       	push	r29
    2eb6:	cf 93       	push	r28
    2eb8:	00 d0       	rcall	.+0      	; 0x2eba <SERVO_voidInit+0x6>
    2eba:	00 d0       	rcall	.+0      	; 0x2ebc <SERVO_voidInit+0x8>
    2ebc:	00 d0       	rcall	.+0      	; 0x2ebe <SERVO_voidInit+0xa>
    2ebe:	cd b7       	in	r28, 0x3d	; 61
    2ec0:	de b7       	in	r29, 0x3e	; 62
	Timer_t t1 = {TIMER1,TIMER1_IC_FAST_PWM,OC1A_CCST,TIMER10_DIV_8,TIMER1A_INT_DISABLE};
    2ec2:	86 e0       	ldi	r24, 0x06	; 6
    2ec4:	fe 01       	movw	r30, r28
    2ec6:	31 96       	adiw	r30, 0x01	; 1
    2ec8:	df 01       	movw	r26, r30
    2eca:	98 2f       	mov	r25, r24
    2ecc:	1d 92       	st	X+, r1
    2ece:	9a 95       	dec	r25
    2ed0:	e9 f7       	brne	.-6      	; 0x2ecc <SERVO_voidInit+0x18>
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	89 83       	std	Y+1, r24	; 0x01
    2ed6:	8e e0       	ldi	r24, 0x0E	; 14
    2ed8:	8a 83       	std	Y+2, r24	; 0x02
    2eda:	88 e0       	ldi	r24, 0x08	; 8
    2edc:	8b 83       	std	Y+3, r24	; 0x03
    2ede:	82 e0       	ldi	r24, 0x02	; 2
    2ee0:	8c 83       	std	Y+4, r24	; 0x04
	TIMER1_voidSetICR(20000);
    2ee2:	80 e2       	ldi	r24, 0x20	; 32
    2ee4:	9e e4       	ldi	r25, 0x4E	; 78
    2ee6:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <TIMER1_voidSetICR>
	TIMER_voidInit(&t1);
    2eea:	ce 01       	movw	r24, r28
    2eec:	01 96       	adiw	r24, 0x01	; 1
    2eee:	0e 94 ef 22 	call	0x45de	; 0x45de <TIMER_voidInit>
}
    2ef2:	26 96       	adiw	r28, 0x06	; 6
    2ef4:	0f b6       	in	r0, 0x3f	; 63
    2ef6:	f8 94       	cli
    2ef8:	de bf       	out	0x3e, r29	; 62
    2efa:	0f be       	out	0x3f, r0	; 63
    2efc:	cd bf       	out	0x3d, r28	; 61
    2efe:	cf 91       	pop	r28
    2f00:	df 91       	pop	r29
    2f02:	08 95       	ret

00002f04 <SERVO_voidSetAngle>:

void SERVO_voidSetAngle(u16 Copy_u16Angle)
{
    2f04:	af 92       	push	r10
    2f06:	bf 92       	push	r11
    2f08:	cf 92       	push	r12
    2f0a:	df 92       	push	r13
    2f0c:	ef 92       	push	r14
    2f0e:	ff 92       	push	r15
    2f10:	0f 93       	push	r16
    2f12:	1f 93       	push	r17
    2f14:	df 93       	push	r29
    2f16:	cf 93       	push	r28
    2f18:	00 d0       	rcall	.+0      	; 0x2f1a <SERVO_voidSetAngle+0x16>
    2f1a:	00 d0       	rcall	.+0      	; 0x2f1c <SERVO_voidSetAngle+0x18>
    2f1c:	00 d0       	rcall	.+0      	; 0x2f1e <SERVO_voidSetAngle+0x1a>
    2f1e:	cd b7       	in	r28, 0x3d	; 61
    2f20:	de b7       	in	r29, 0x3e	; 62
    2f22:	9e 83       	std	Y+6, r25	; 0x06
    2f24:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32Angle=0;
    2f26:	19 82       	std	Y+1, r1	; 0x01
    2f28:	1a 82       	std	Y+2, r1	; 0x02
    2f2a:	1b 82       	std	Y+3, r1	; 0x03
    2f2c:	1c 82       	std	Y+4, r1	; 0x04
	Local_u32Angle = Map(0,180,750,2499,Copy_u16Angle);
    2f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f30:	9e 81       	ldd	r25, Y+6	; 0x06
    2f32:	cc 01       	movw	r24, r24
    2f34:	a0 e0       	ldi	r26, 0x00	; 0
    2f36:	b0 e0       	ldi	r27, 0x00	; 0
    2f38:	00 d0       	rcall	.+0      	; 0x2f3a <SERVO_voidSetAngle+0x36>
    2f3a:	00 d0       	rcall	.+0      	; 0x2f3c <SERVO_voidSetAngle+0x38>
    2f3c:	ed b7       	in	r30, 0x3d	; 61
    2f3e:	fe b7       	in	r31, 0x3e	; 62
    2f40:	31 96       	adiw	r30, 0x01	; 1
    2f42:	80 83       	st	Z, r24
    2f44:	91 83       	std	Z+1, r25	; 0x01
    2f46:	a2 83       	std	Z+2, r26	; 0x02
    2f48:	b3 83       	std	Z+3, r27	; 0x03
    2f4a:	60 e0       	ldi	r22, 0x00	; 0
    2f4c:	70 e0       	ldi	r23, 0x00	; 0
    2f4e:	80 e0       	ldi	r24, 0x00	; 0
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	24 eb       	ldi	r18, 0xB4	; 180
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	40 e0       	ldi	r20, 0x00	; 0
    2f58:	50 e0       	ldi	r21, 0x00	; 0
    2f5a:	0f 2e       	mov	r0, r31
    2f5c:	fe ee       	ldi	r31, 0xEE	; 238
    2f5e:	ef 2e       	mov	r14, r31
    2f60:	f2 e0       	ldi	r31, 0x02	; 2
    2f62:	ff 2e       	mov	r15, r31
    2f64:	f0 e0       	ldi	r31, 0x00	; 0
    2f66:	0f 2f       	mov	r16, r31
    2f68:	f0 e0       	ldi	r31, 0x00	; 0
    2f6a:	1f 2f       	mov	r17, r31
    2f6c:	f0 2d       	mov	r31, r0
    2f6e:	0f 2e       	mov	r0, r31
    2f70:	f3 ec       	ldi	r31, 0xC3	; 195
    2f72:	af 2e       	mov	r10, r31
    2f74:	f9 e0       	ldi	r31, 0x09	; 9
    2f76:	bf 2e       	mov	r11, r31
    2f78:	f0 e0       	ldi	r31, 0x00	; 0
    2f7a:	cf 2e       	mov	r12, r31
    2f7c:	f0 e0       	ldi	r31, 0x00	; 0
    2f7e:	df 2e       	mov	r13, r31
    2f80:	f0 2d       	mov	r31, r0
    2f82:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <Map>
    2f86:	0f 90       	pop	r0
    2f88:	0f 90       	pop	r0
    2f8a:	0f 90       	pop	r0
    2f8c:	0f 90       	pop	r0
    2f8e:	dc 01       	movw	r26, r24
    2f90:	cb 01       	movw	r24, r22
    2f92:	89 83       	std	Y+1, r24	; 0x01
    2f94:	9a 83       	std	Y+2, r25	; 0x02
    2f96:	ab 83       	std	Y+3, r26	; 0x03
    2f98:	bc 83       	std	Y+4, r27	; 0x04
	TIMER1_voidSetChannelACompMatch(Local_u32Angle);
    2f9a:	89 81       	ldd	r24, Y+1	; 0x01
    2f9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f9e:	0e 94 98 25 	call	0x4b30	; 0x4b30 <TIMER1_voidSetChannelACompMatch>

}
    2fa2:	26 96       	adiw	r28, 0x06	; 6
    2fa4:	0f b6       	in	r0, 0x3f	; 63
    2fa6:	f8 94       	cli
    2fa8:	de bf       	out	0x3e, r29	; 62
    2faa:	0f be       	out	0x3f, r0	; 63
    2fac:	cd bf       	out	0x3d, r28	; 61
    2fae:	cf 91       	pop	r28
    2fb0:	df 91       	pop	r29
    2fb2:	1f 91       	pop	r17
    2fb4:	0f 91       	pop	r16
    2fb6:	ff 90       	pop	r15
    2fb8:	ef 90       	pop	r14
    2fba:	df 90       	pop	r13
    2fbc:	cf 90       	pop	r12
    2fbe:	bf 90       	pop	r11
    2fc0:	af 90       	pop	r10
    2fc2:	08 95       	ret

00002fc4 <Map>:


static u32 Map(u32 InMin,u32 InMax,u32 OutMin,u32 OutMax,u32 InVal)
{
    2fc4:	af 92       	push	r10
    2fc6:	bf 92       	push	r11
    2fc8:	cf 92       	push	r12
    2fca:	df 92       	push	r13
    2fcc:	ef 92       	push	r14
    2fce:	ff 92       	push	r15
    2fd0:	0f 93       	push	r16
    2fd2:	1f 93       	push	r17
    2fd4:	df 93       	push	r29
    2fd6:	cf 93       	push	r28
    2fd8:	cd b7       	in	r28, 0x3d	; 61
    2fda:	de b7       	in	r29, 0x3e	; 62
    2fdc:	64 97       	sbiw	r28, 0x14	; 20
    2fde:	0f b6       	in	r0, 0x3f	; 63
    2fe0:	f8 94       	cli
    2fe2:	de bf       	out	0x3e, r29	; 62
    2fe4:	0f be       	out	0x3f, r0	; 63
    2fe6:	cd bf       	out	0x3d, r28	; 61
    2fe8:	6d 83       	std	Y+5, r22	; 0x05
    2fea:	7e 83       	std	Y+6, r23	; 0x06
    2fec:	8f 83       	std	Y+7, r24	; 0x07
    2fee:	98 87       	std	Y+8, r25	; 0x08
    2ff0:	29 87       	std	Y+9, r18	; 0x09
    2ff2:	3a 87       	std	Y+10, r19	; 0x0a
    2ff4:	4b 87       	std	Y+11, r20	; 0x0b
    2ff6:	5c 87       	std	Y+12, r21	; 0x0c
    2ff8:	ed 86       	std	Y+13, r14	; 0x0d
    2ffa:	fe 86       	std	Y+14, r15	; 0x0e
    2ffc:	0f 87       	std	Y+15, r16	; 0x0f
    2ffe:	18 8b       	std	Y+16, r17	; 0x10
    3000:	a9 8a       	std	Y+17, r10	; 0x11
    3002:	ba 8a       	std	Y+18, r11	; 0x12
    3004:	cb 8a       	std	Y+19, r12	; 0x13
    3006:	dc 8a       	std	Y+20, r13	; 0x14
	u32 Local=0;
    3008:	19 82       	std	Y+1, r1	; 0x01
    300a:	1a 82       	std	Y+2, r1	; 0x02
    300c:	1b 82       	std	Y+3, r1	; 0x03
    300e:	1c 82       	std	Y+4, r1	; 0x04
	Local = (((InVal-InMin)*(OutMax-OutMin))/(InMax-InMin))+OutMin;
    3010:	29 a1       	ldd	r18, Y+33	; 0x21
    3012:	3a a1       	ldd	r19, Y+34	; 0x22
    3014:	4b a1       	ldd	r20, Y+35	; 0x23
    3016:	5c a1       	ldd	r21, Y+36	; 0x24
    3018:	8d 81       	ldd	r24, Y+5	; 0x05
    301a:	9e 81       	ldd	r25, Y+6	; 0x06
    301c:	af 81       	ldd	r26, Y+7	; 0x07
    301e:	b8 85       	ldd	r27, Y+8	; 0x08
    3020:	79 01       	movw	r14, r18
    3022:	8a 01       	movw	r16, r20
    3024:	e8 1a       	sub	r14, r24
    3026:	f9 0a       	sbc	r15, r25
    3028:	0a 0b       	sbc	r16, r26
    302a:	1b 0b       	sbc	r17, r27
    302c:	29 89       	ldd	r18, Y+17	; 0x11
    302e:	3a 89       	ldd	r19, Y+18	; 0x12
    3030:	4b 89       	ldd	r20, Y+19	; 0x13
    3032:	5c 89       	ldd	r21, Y+20	; 0x14
    3034:	8d 85       	ldd	r24, Y+13	; 0x0d
    3036:	9e 85       	ldd	r25, Y+14	; 0x0e
    3038:	af 85       	ldd	r26, Y+15	; 0x0f
    303a:	b8 89       	ldd	r27, Y+16	; 0x10
    303c:	28 1b       	sub	r18, r24
    303e:	39 0b       	sbc	r19, r25
    3040:	4a 0b       	sbc	r20, r26
    3042:	5b 0b       	sbc	r21, r27
    3044:	c8 01       	movw	r24, r16
    3046:	b7 01       	movw	r22, r14
    3048:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__mulsi3>
    304c:	7b 01       	movw	r14, r22
    304e:	8c 01       	movw	r16, r24
    3050:	29 85       	ldd	r18, Y+9	; 0x09
    3052:	3a 85       	ldd	r19, Y+10	; 0x0a
    3054:	4b 85       	ldd	r20, Y+11	; 0x0b
    3056:	5c 85       	ldd	r21, Y+12	; 0x0c
    3058:	8d 81       	ldd	r24, Y+5	; 0x05
    305a:	9e 81       	ldd	r25, Y+6	; 0x06
    305c:	af 81       	ldd	r26, Y+7	; 0x07
    305e:	b8 85       	ldd	r27, Y+8	; 0x08
    3060:	28 1b       	sub	r18, r24
    3062:	39 0b       	sbc	r19, r25
    3064:	4a 0b       	sbc	r20, r26
    3066:	5b 0b       	sbc	r21, r27
    3068:	c8 01       	movw	r24, r16
    306a:	b7 01       	movw	r22, r14
    306c:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <__udivmodsi4>
    3070:	da 01       	movw	r26, r20
    3072:	c9 01       	movw	r24, r18
    3074:	9c 01       	movw	r18, r24
    3076:	ad 01       	movw	r20, r26
    3078:	8d 85       	ldd	r24, Y+13	; 0x0d
    307a:	9e 85       	ldd	r25, Y+14	; 0x0e
    307c:	af 85       	ldd	r26, Y+15	; 0x0f
    307e:	b8 89       	ldd	r27, Y+16	; 0x10
    3080:	82 0f       	add	r24, r18
    3082:	93 1f       	adc	r25, r19
    3084:	a4 1f       	adc	r26, r20
    3086:	b5 1f       	adc	r27, r21
    3088:	89 83       	std	Y+1, r24	; 0x01
    308a:	9a 83       	std	Y+2, r25	; 0x02
    308c:	ab 83       	std	Y+3, r26	; 0x03
    308e:	bc 83       	std	Y+4, r27	; 0x04
	return Local;
    3090:	89 81       	ldd	r24, Y+1	; 0x01
    3092:	9a 81       	ldd	r25, Y+2	; 0x02
    3094:	ab 81       	ldd	r26, Y+3	; 0x03
    3096:	bc 81       	ldd	r27, Y+4	; 0x04
}
    3098:	bc 01       	movw	r22, r24
    309a:	cd 01       	movw	r24, r26
    309c:	64 96       	adiw	r28, 0x14	; 20
    309e:	0f b6       	in	r0, 0x3f	; 63
    30a0:	f8 94       	cli
    30a2:	de bf       	out	0x3e, r29	; 62
    30a4:	0f be       	out	0x3f, r0	; 63
    30a6:	cd bf       	out	0x3d, r28	; 61
    30a8:	cf 91       	pop	r28
    30aa:	df 91       	pop	r29
    30ac:	1f 91       	pop	r17
    30ae:	0f 91       	pop	r16
    30b0:	ff 90       	pop	r15
    30b2:	ef 90       	pop	r14
    30b4:	df 90       	pop	r13
    30b6:	cf 90       	pop	r12
    30b8:	bf 90       	pop	r11
    30ba:	af 90       	pop	r10
    30bc:	08 95       	ret

000030be <SSD_u8SetNumber>:
#include "../HAL/SSD_private.h"
#include "../HAL/SSD_config.h"
#include "../HAL/SSD_interface.h"

u8 SSD_u8SetNumber(u8 Copy_u8Number,SSD_t *Copy_SSD)
{
    30be:	df 93       	push	r29
    30c0:	cf 93       	push	r28
    30c2:	00 d0       	rcall	.+0      	; 0x30c4 <SSD_u8SetNumber+0x6>
    30c4:	00 d0       	rcall	.+0      	; 0x30c6 <SSD_u8SetNumber+0x8>
    30c6:	cd b7       	in	r28, 0x3d	; 61
    30c8:	de b7       	in	r29, 0x3e	; 62
    30ca:	8a 83       	std	Y+2, r24	; 0x02
    30cc:	7c 83       	std	Y+4, r23	; 0x04
    30ce:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState= OK;
    30d0:	19 82       	std	Y+1, r1	; 0x01
	static u8 SSD_Arr[10] = SSD_ARR_OF_NUM;
	if(Copy_SSD->ComType==ANODE)
    30d2:	eb 81       	ldd	r30, Y+3	; 0x03
    30d4:	fc 81       	ldd	r31, Y+4	; 0x04
    30d6:	80 81       	ld	r24, Z
    30d8:	88 23       	and	r24, r24
    30da:	91 f4       	brne	.+36     	; 0x3100 <SSD_u8SetNumber+0x42>
	{
		Local_u8ErrorState = DIO_u8SetPortValue(Copy_SSD->Port,~SSD_Arr[Copy_u8Number]);
    30dc:	eb 81       	ldd	r30, Y+3	; 0x03
    30de:	fc 81       	ldd	r31, Y+4	; 0x04
    30e0:	21 81       	ldd	r18, Z+1	; 0x01
    30e2:	8a 81       	ldd	r24, Y+2	; 0x02
    30e4:	88 2f       	mov	r24, r24
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	fc 01       	movw	r30, r24
    30ea:	ee 56       	subi	r30, 0x6E	; 110
    30ec:	fe 4f       	sbci	r31, 0xFE	; 254
    30ee:	80 81       	ld	r24, Z
    30f0:	98 2f       	mov	r25, r24
    30f2:	90 95       	com	r25
    30f4:	82 2f       	mov	r24, r18
    30f6:	69 2f       	mov	r22, r25
    30f8:	0e 94 4a 11 	call	0x2294	; 0x2294 <DIO_u8SetPortValue>
    30fc:	89 83       	std	Y+1, r24	; 0x01
    30fe:	17 c0       	rjmp	.+46     	; 0x312e <SSD_u8SetNumber+0x70>
	}
	else if(Copy_SSD->ComType==CATHODE )
    3100:	eb 81       	ldd	r30, Y+3	; 0x03
    3102:	fc 81       	ldd	r31, Y+4	; 0x04
    3104:	80 81       	ld	r24, Z
    3106:	81 30       	cpi	r24, 0x01	; 1
    3108:	81 f4       	brne	.+32     	; 0x312a <SSD_u8SetNumber+0x6c>
	{
		Local_u8ErrorState = DIO_u8SetPortValue(Copy_SSD->Port,SSD_Arr[Copy_u8Number]);
    310a:	eb 81       	ldd	r30, Y+3	; 0x03
    310c:	fc 81       	ldd	r31, Y+4	; 0x04
    310e:	21 81       	ldd	r18, Z+1	; 0x01
    3110:	8a 81       	ldd	r24, Y+2	; 0x02
    3112:	88 2f       	mov	r24, r24
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	fc 01       	movw	r30, r24
    3118:	ee 56       	subi	r30, 0x6E	; 110
    311a:	fe 4f       	sbci	r31, 0xFE	; 254
    311c:	90 81       	ld	r25, Z
    311e:	82 2f       	mov	r24, r18
    3120:	69 2f       	mov	r22, r25
    3122:	0e 94 4a 11 	call	0x2294	; 0x2294 <DIO_u8SetPortValue>
    3126:	89 83       	std	Y+1, r24	; 0x01
    3128:	02 c0       	rjmp	.+4      	; 0x312e <SSD_u8SetNumber+0x70>
	}
	else
		Local_u8ErrorState = NOTOK;
    312a:	81 e0       	ldi	r24, 0x01	; 1
    312c:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    312e:	89 81       	ldd	r24, Y+1	; 0x01

}
    3130:	0f 90       	pop	r0
    3132:	0f 90       	pop	r0
    3134:	0f 90       	pop	r0
    3136:	0f 90       	pop	r0
    3138:	cf 91       	pop	r28
    313a:	df 91       	pop	r29
    313c:	08 95       	ret

0000313e <SSD_u8Enable>:
u8 SSD_u8Enable(SSD_t *Copy_SSD)
{
    313e:	df 93       	push	r29
    3140:	cf 93       	push	r28
    3142:	00 d0       	rcall	.+0      	; 0x3144 <SSD_u8Enable+0x6>
    3144:	0f 92       	push	r0
    3146:	cd b7       	in	r28, 0x3d	; 61
    3148:	de b7       	in	r29, 0x3e	; 62
    314a:	9b 83       	std	Y+3, r25	; 0x03
    314c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState= OK;
    314e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_SSD->ComType==ANODE)
    3150:	ea 81       	ldd	r30, Y+2	; 0x02
    3152:	fb 81       	ldd	r31, Y+3	; 0x03
    3154:	80 81       	ld	r24, Z
    3156:	88 23       	and	r24, r24
    3158:	61 f4       	brne	.+24     	; 0x3172 <SSD_u8Enable+0x34>
	{
		Local_u8ErrorState = DIO_u8SetPinValue(Copy_SSD->EnablePort,Copy_SSD->EnablePin,DIO_PIN_HIGH);
    315a:	ea 81       	ldd	r30, Y+2	; 0x02
    315c:	fb 81       	ldd	r31, Y+3	; 0x03
    315e:	82 81       	ldd	r24, Z+2	; 0x02
    3160:	ea 81       	ldd	r30, Y+2	; 0x02
    3162:	fb 81       	ldd	r31, Y+3	; 0x03
    3164:	93 81       	ldd	r25, Z+3	; 0x03
    3166:	69 2f       	mov	r22, r25
    3168:	41 e0       	ldi	r20, 0x01	; 1
    316a:	0e 94 31 10 	call	0x2062	; 0x2062 <DIO_u8SetPinValue>
    316e:	89 83       	std	Y+1, r24	; 0x01
    3170:	13 c0       	rjmp	.+38     	; 0x3198 <SSD_u8Enable+0x5a>
	}
	else if(Copy_SSD->ComType==CATHODE )
    3172:	ea 81       	ldd	r30, Y+2	; 0x02
    3174:	fb 81       	ldd	r31, Y+3	; 0x03
    3176:	80 81       	ld	r24, Z
    3178:	81 30       	cpi	r24, 0x01	; 1
    317a:	61 f4       	brne	.+24     	; 0x3194 <SSD_u8Enable+0x56>
	{
		Local_u8ErrorState = DIO_u8SetPinValue(Copy_SSD->EnablePort,Copy_SSD->EnablePin,DIO_PIN_LOW);
    317c:	ea 81       	ldd	r30, Y+2	; 0x02
    317e:	fb 81       	ldd	r31, Y+3	; 0x03
    3180:	82 81       	ldd	r24, Z+2	; 0x02
    3182:	ea 81       	ldd	r30, Y+2	; 0x02
    3184:	fb 81       	ldd	r31, Y+3	; 0x03
    3186:	93 81       	ldd	r25, Z+3	; 0x03
    3188:	69 2f       	mov	r22, r25
    318a:	40 e0       	ldi	r20, 0x00	; 0
    318c:	0e 94 31 10 	call	0x2062	; 0x2062 <DIO_u8SetPinValue>
    3190:	89 83       	std	Y+1, r24	; 0x01
    3192:	02 c0       	rjmp	.+4      	; 0x3198 <SSD_u8Enable+0x5a>
	}
	else
		Local_u8ErrorState = NOTOK;
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    3198:	89 81       	ldd	r24, Y+1	; 0x01
}
    319a:	0f 90       	pop	r0
    319c:	0f 90       	pop	r0
    319e:	0f 90       	pop	r0
    31a0:	cf 91       	pop	r28
    31a2:	df 91       	pop	r29
    31a4:	08 95       	ret

000031a6 <SSD_u8Disable>:

u8 SSD_u8Disable(SSD_t *Copy_SSD)
{
    31a6:	df 93       	push	r29
    31a8:	cf 93       	push	r28
    31aa:	00 d0       	rcall	.+0      	; 0x31ac <SSD_u8Disable+0x6>
    31ac:	0f 92       	push	r0
    31ae:	cd b7       	in	r28, 0x3d	; 61
    31b0:	de b7       	in	r29, 0x3e	; 62
    31b2:	9b 83       	std	Y+3, r25	; 0x03
    31b4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState= OK;
    31b6:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_SSD->ComType==ANODE)
    31b8:	ea 81       	ldd	r30, Y+2	; 0x02
    31ba:	fb 81       	ldd	r31, Y+3	; 0x03
    31bc:	80 81       	ld	r24, Z
    31be:	88 23       	and	r24, r24
    31c0:	61 f4       	brne	.+24     	; 0x31da <SSD_u8Disable+0x34>
	{
		Local_u8ErrorState = DIO_u8SetPinValue(Copy_SSD->EnablePort,Copy_SSD->EnablePin,DIO_PIN_LOW);
    31c2:	ea 81       	ldd	r30, Y+2	; 0x02
    31c4:	fb 81       	ldd	r31, Y+3	; 0x03
    31c6:	82 81       	ldd	r24, Z+2	; 0x02
    31c8:	ea 81       	ldd	r30, Y+2	; 0x02
    31ca:	fb 81       	ldd	r31, Y+3	; 0x03
    31cc:	93 81       	ldd	r25, Z+3	; 0x03
    31ce:	69 2f       	mov	r22, r25
    31d0:	40 e0       	ldi	r20, 0x00	; 0
    31d2:	0e 94 31 10 	call	0x2062	; 0x2062 <DIO_u8SetPinValue>
    31d6:	89 83       	std	Y+1, r24	; 0x01
    31d8:	13 c0       	rjmp	.+38     	; 0x3200 <SSD_u8Disable+0x5a>
	}
	else if(Copy_SSD->ComType==CATHODE )
    31da:	ea 81       	ldd	r30, Y+2	; 0x02
    31dc:	fb 81       	ldd	r31, Y+3	; 0x03
    31de:	80 81       	ld	r24, Z
    31e0:	81 30       	cpi	r24, 0x01	; 1
    31e2:	61 f4       	brne	.+24     	; 0x31fc <SSD_u8Disable+0x56>
	{
		Local_u8ErrorState = DIO_u8SetPinValue(Copy_SSD->EnablePort,Copy_SSD->EnablePin,DIO_PIN_HIGH);
    31e4:	ea 81       	ldd	r30, Y+2	; 0x02
    31e6:	fb 81       	ldd	r31, Y+3	; 0x03
    31e8:	82 81       	ldd	r24, Z+2	; 0x02
    31ea:	ea 81       	ldd	r30, Y+2	; 0x02
    31ec:	fb 81       	ldd	r31, Y+3	; 0x03
    31ee:	93 81       	ldd	r25, Z+3	; 0x03
    31f0:	69 2f       	mov	r22, r25
    31f2:	41 e0       	ldi	r20, 0x01	; 1
    31f4:	0e 94 31 10 	call	0x2062	; 0x2062 <DIO_u8SetPinValue>
    31f8:	89 83       	std	Y+1, r24	; 0x01
    31fa:	02 c0       	rjmp	.+4      	; 0x3200 <SSD_u8Disable+0x5a>
	}
	else
		Local_u8ErrorState = NOTOK;
    31fc:	81 e0       	ldi	r24, 0x01	; 1
    31fe:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    3200:	89 81       	ldd	r24, Y+1	; 0x01
}
    3202:	0f 90       	pop	r0
    3204:	0f 90       	pop	r0
    3206:	0f 90       	pop	r0
    3208:	cf 91       	pop	r28
    320a:	df 91       	pop	r29
    320c:	08 95       	ret

0000320e <STEP_MOTORu8StartFullMode>:
#include "../HAL/STEP_MOTOR_config.h"
#include "../HAL/STEP_MOTOR_private.h"
#include "../HAL/STEP_MOTOR_interface.h"
#include "../HAL/CLCD_interface.h"
u8 STEP_MOTORu8StartFullMode(STEP_t *Copy_pStep)
{
    320e:	df 93       	push	r29
    3210:	cf 93       	push	r28
    3212:	cd b7       	in	r28, 0x3d	; 61
    3214:	de b7       	in	r29, 0x3e	; 62
    3216:	c2 54       	subi	r28, 0x42	; 66
    3218:	d0 40       	sbci	r29, 0x00	; 0
    321a:	0f b6       	in	r0, 0x3f	; 63
    321c:	f8 94       	cli
    321e:	de bf       	out	0x3e, r29	; 62
    3220:	0f be       	out	0x3f, r0	; 63
    3222:	cd bf       	out	0x3d, r28	; 61
    3224:	fe 01       	movw	r30, r28
    3226:	ef 5b       	subi	r30, 0xBF	; 191
    3228:	ff 4f       	sbci	r31, 0xFF	; 255
    322a:	91 83       	std	Z+1, r25	; 0x01
    322c:	80 83       	st	Z, r24
	u8 Local_u8ErrorState = OK;
    322e:	fe 01       	movw	r30, r28
    3230:	e0 5c       	subi	r30, 0xC0	; 192
    3232:	ff 4f       	sbci	r31, 0xFF	; 255
    3234:	10 82       	st	Z, r1
	u16 Local_u16NumOfSteps = (u16)((((f32)Copy_pStep->AngleDegree)/11.2)*64.0);
    3236:	fe 01       	movw	r30, r28
    3238:	ef 5b       	subi	r30, 0xBF	; 191
    323a:	ff 4f       	sbci	r31, 0xFF	; 255
    323c:	01 90       	ld	r0, Z+
    323e:	f0 81       	ld	r31, Z
    3240:	e0 2d       	mov	r30, r0
    3242:	83 81       	ldd	r24, Z+3	; 0x03
    3244:	94 81       	ldd	r25, Z+4	; 0x04
    3246:	cc 01       	movw	r24, r24
    3248:	a0 e0       	ldi	r26, 0x00	; 0
    324a:	b0 e0       	ldi	r27, 0x00	; 0
    324c:	bc 01       	movw	r22, r24
    324e:	cd 01       	movw	r24, r26
    3250:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	bc 01       	movw	r22, r24
    325a:	cd 01       	movw	r24, r26
    325c:	23 e3       	ldi	r18, 0x33	; 51
    325e:	33 e3       	ldi	r19, 0x33	; 51
    3260:	43 e3       	ldi	r20, 0x33	; 51
    3262:	51 e4       	ldi	r21, 0x41	; 65
    3264:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3268:	dc 01       	movw	r26, r24
    326a:	cb 01       	movw	r24, r22
    326c:	bc 01       	movw	r22, r24
    326e:	cd 01       	movw	r24, r26
    3270:	20 e0       	ldi	r18, 0x00	; 0
    3272:	30 e0       	ldi	r19, 0x00	; 0
    3274:	40 e8       	ldi	r20, 0x80	; 128
    3276:	52 e4       	ldi	r21, 0x42	; 66
    3278:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    327c:	dc 01       	movw	r26, r24
    327e:	cb 01       	movw	r24, r22
    3280:	bc 01       	movw	r22, r24
    3282:	cd 01       	movw	r24, r26
    3284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3288:	dc 01       	movw	r26, r24
    328a:	cb 01       	movw	r24, r22
    328c:	9f af       	std	Y+63, r25	; 0x3f
    328e:	8e af       	std	Y+62, r24	; 0x3e
	u16 Local_u16MaxItration = (Local_u16NumOfSteps/MAX_FULL_STEP );
    3290:	8e ad       	ldd	r24, Y+62	; 0x3e
    3292:	9f ad       	ldd	r25, Y+63	; 0x3f
    3294:	96 95       	lsr	r25
    3296:	87 95       	ror	r24
    3298:	96 95       	lsr	r25
    329a:	87 95       	ror	r24
    329c:	9d af       	std	Y+61, r25	; 0x3d
    329e:	8c af       	std	Y+60, r24	; 0x3c
	u16 Local_u16Counter = 0;
    32a0:	1b ae       	std	Y+59, r1	; 0x3b
    32a2:	1a ae       	std	Y+58, r1	; 0x3a
	u8 Local_u8ItrateStep = 0;
    32a4:	19 ae       	std	Y+57, r1	; 0x39
	if(STEP_LOWER_NIBBLE == Copy_pStep->Nibble)
    32a6:	fe 01       	movw	r30, r28
    32a8:	ef 5b       	subi	r30, 0xBF	; 191
    32aa:	ff 4f       	sbci	r31, 0xFF	; 255
    32ac:	01 90       	ld	r0, Z+
    32ae:	f0 81       	ld	r31, Z
    32b0:	e0 2d       	mov	r30, r0
    32b2:	81 81       	ldd	r24, Z+1	; 0x01
    32b4:	88 23       	and	r24, r24
    32b6:	09 f0       	breq	.+2      	; 0x32ba <STEP_MOTORu8StartFullMode+0xac>
    32b8:	5e c1       	rjmp	.+700    	; 0x3576 <STEP_MOTORu8StartFullMode+0x368>
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
    32ba:	fe 01       	movw	r30, r28
    32bc:	ef 5b       	subi	r30, 0xBF	; 191
    32be:	ff 4f       	sbci	r31, 0xFF	; 255
    32c0:	01 90       	ld	r0, Z+
    32c2:	f0 81       	ld	r31, Z
    32c4:	e0 2d       	mov	r30, r0
    32c6:	82 81       	ldd	r24, Z+2	; 0x02
    32c8:	88 23       	and	r24, r24
    32ca:	09 f0       	breq	.+2      	; 0x32ce <STEP_MOTORu8StartFullMode+0xc0>
    32cc:	a2 c0       	rjmp	.+324    	; 0x3412 <STEP_MOTORu8StartFullMode+0x204>
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    32ce:	1b ae       	std	Y+59, r1	; 0x3b
    32d0:	1a ae       	std	Y+58, r1	; 0x3a
    32d2:	96 c0       	rjmp	.+300    	; 0x3400 <STEP_MOTORu8StartFullMode+0x1f2>
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    32d4:	19 ae       	std	Y+57, r1	; 0x39
    32d6:	8b c0       	rjmp	.+278    	; 0x33ee <STEP_MOTORu8StartFullMode+0x1e0>
				{
					DIO_u8SetLowNibbleValue(Copy_pStep->Port,(MASK_CW<<Local_u8ItrateStep));
    32d8:	fe 01       	movw	r30, r28
    32da:	ef 5b       	subi	r30, 0xBF	; 191
    32dc:	ff 4f       	sbci	r31, 0xFF	; 255
    32de:	01 90       	ld	r0, Z+
    32e0:	f0 81       	ld	r31, Z
    32e2:	e0 2d       	mov	r30, r0
    32e4:	40 81       	ld	r20, Z
    32e6:	89 ad       	ldd	r24, Y+57	; 0x39
    32e8:	28 2f       	mov	r18, r24
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	81 e0       	ldi	r24, 0x01	; 1
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	02 c0       	rjmp	.+4      	; 0x32f6 <STEP_MOTORu8StartFullMode+0xe8>
    32f2:	88 0f       	add	r24, r24
    32f4:	99 1f       	adc	r25, r25
    32f6:	2a 95       	dec	r18
    32f8:	e2 f7       	brpl	.-8      	; 0x32f2 <STEP_MOTORu8StartFullMode+0xe4>
    32fa:	98 2f       	mov	r25, r24
    32fc:	84 2f       	mov	r24, r20
    32fe:	69 2f       	mov	r22, r25
    3300:	0e 94 be 12 	call	0x257c	; 0x257c <DIO_u8SetLowNibbleValue>
    3304:	80 e0       	ldi	r24, 0x00	; 0
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	a0 e0       	ldi	r26, 0x00	; 0
    330a:	b0 e4       	ldi	r27, 0x40	; 64
    330c:	8d ab       	std	Y+53, r24	; 0x35
    330e:	9e ab       	std	Y+54, r25	; 0x36
    3310:	af ab       	std	Y+55, r26	; 0x37
    3312:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3314:	6d a9       	ldd	r22, Y+53	; 0x35
    3316:	7e a9       	ldd	r23, Y+54	; 0x36
    3318:	8f a9       	ldd	r24, Y+55	; 0x37
    331a:	98 ad       	ldd	r25, Y+56	; 0x38
    331c:	20 e0       	ldi	r18, 0x00	; 0
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	4a ef       	ldi	r20, 0xFA	; 250
    3322:	54 e4       	ldi	r21, 0x44	; 68
    3324:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3328:	dc 01       	movw	r26, r24
    332a:	cb 01       	movw	r24, r22
    332c:	89 ab       	std	Y+49, r24	; 0x31
    332e:	9a ab       	std	Y+50, r25	; 0x32
    3330:	ab ab       	std	Y+51, r26	; 0x33
    3332:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3334:	69 a9       	ldd	r22, Y+49	; 0x31
    3336:	7a a9       	ldd	r23, Y+50	; 0x32
    3338:	8b a9       	ldd	r24, Y+51	; 0x33
    333a:	9c a9       	ldd	r25, Y+52	; 0x34
    333c:	20 e0       	ldi	r18, 0x00	; 0
    333e:	30 e0       	ldi	r19, 0x00	; 0
    3340:	40 e8       	ldi	r20, 0x80	; 128
    3342:	5f e3       	ldi	r21, 0x3F	; 63
    3344:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3348:	88 23       	and	r24, r24
    334a:	2c f4       	brge	.+10     	; 0x3356 <STEP_MOTORu8StartFullMode+0x148>
		__ticks = 1;
    334c:	81 e0       	ldi	r24, 0x01	; 1
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	98 ab       	std	Y+48, r25	; 0x30
    3352:	8f a7       	std	Y+47, r24	; 0x2f
    3354:	3f c0       	rjmp	.+126    	; 0x33d4 <STEP_MOTORu8StartFullMode+0x1c6>
	else if (__tmp > 65535)
    3356:	69 a9       	ldd	r22, Y+49	; 0x31
    3358:	7a a9       	ldd	r23, Y+50	; 0x32
    335a:	8b a9       	ldd	r24, Y+51	; 0x33
    335c:	9c a9       	ldd	r25, Y+52	; 0x34
    335e:	20 e0       	ldi	r18, 0x00	; 0
    3360:	3f ef       	ldi	r19, 0xFF	; 255
    3362:	4f e7       	ldi	r20, 0x7F	; 127
    3364:	57 e4       	ldi	r21, 0x47	; 71
    3366:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    336a:	18 16       	cp	r1, r24
    336c:	4c f5       	brge	.+82     	; 0x33c0 <STEP_MOTORu8StartFullMode+0x1b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    336e:	6d a9       	ldd	r22, Y+53	; 0x35
    3370:	7e a9       	ldd	r23, Y+54	; 0x36
    3372:	8f a9       	ldd	r24, Y+55	; 0x37
    3374:	98 ad       	ldd	r25, Y+56	; 0x38
    3376:	20 e0       	ldi	r18, 0x00	; 0
    3378:	30 e0       	ldi	r19, 0x00	; 0
    337a:	40 e2       	ldi	r20, 0x20	; 32
    337c:	51 e4       	ldi	r21, 0x41	; 65
    337e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3382:	dc 01       	movw	r26, r24
    3384:	cb 01       	movw	r24, r22
    3386:	bc 01       	movw	r22, r24
    3388:	cd 01       	movw	r24, r26
    338a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    338e:	dc 01       	movw	r26, r24
    3390:	cb 01       	movw	r24, r22
    3392:	98 ab       	std	Y+48, r25	; 0x30
    3394:	8f a7       	std	Y+47, r24	; 0x2f
    3396:	0f c0       	rjmp	.+30     	; 0x33b6 <STEP_MOTORu8StartFullMode+0x1a8>
    3398:	88 ec       	ldi	r24, 0xC8	; 200
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	9e a7       	std	Y+46, r25	; 0x2e
    339e:	8d a7       	std	Y+45, r24	; 0x2d
    33a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    33a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    33a4:	01 97       	sbiw	r24, 0x01	; 1
    33a6:	f1 f7       	brne	.-4      	; 0x33a4 <STEP_MOTORu8StartFullMode+0x196>
    33a8:	9e a7       	std	Y+46, r25	; 0x2e
    33aa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    33ae:	98 a9       	ldd	r25, Y+48	; 0x30
    33b0:	01 97       	sbiw	r24, 0x01	; 1
    33b2:	98 ab       	std	Y+48, r25	; 0x30
    33b4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    33b8:	98 a9       	ldd	r25, Y+48	; 0x30
    33ba:	00 97       	sbiw	r24, 0x00	; 0
    33bc:	69 f7       	brne	.-38     	; 0x3398 <STEP_MOTORu8StartFullMode+0x18a>
    33be:	14 c0       	rjmp	.+40     	; 0x33e8 <STEP_MOTORu8StartFullMode+0x1da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33c0:	69 a9       	ldd	r22, Y+49	; 0x31
    33c2:	7a a9       	ldd	r23, Y+50	; 0x32
    33c4:	8b a9       	ldd	r24, Y+51	; 0x33
    33c6:	9c a9       	ldd	r25, Y+52	; 0x34
    33c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33cc:	dc 01       	movw	r26, r24
    33ce:	cb 01       	movw	r24, r22
    33d0:	98 ab       	std	Y+48, r25	; 0x30
    33d2:	8f a7       	std	Y+47, r24	; 0x2f
    33d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    33d6:	98 a9       	ldd	r25, Y+48	; 0x30
    33d8:	9c a7       	std	Y+44, r25	; 0x2c
    33da:	8b a7       	std	Y+43, r24	; 0x2b
    33dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    33de:	9c a5       	ldd	r25, Y+44	; 0x2c
    33e0:	01 97       	sbiw	r24, 0x01	; 1
    33e2:	f1 f7       	brne	.-4      	; 0x33e0 <STEP_MOTORu8StartFullMode+0x1d2>
    33e4:	9c a7       	std	Y+44, r25	; 0x2c
    33e6:	8b a7       	std	Y+43, r24	; 0x2b
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    33e8:	89 ad       	ldd	r24, Y+57	; 0x39
    33ea:	8f 5f       	subi	r24, 0xFF	; 255
    33ec:	89 af       	std	Y+57, r24	; 0x39
    33ee:	89 ad       	ldd	r24, Y+57	; 0x39
    33f0:	84 30       	cpi	r24, 0x04	; 4
    33f2:	08 f4       	brcc	.+2      	; 0x33f6 <STEP_MOTORu8StartFullMode+0x1e8>
    33f4:	71 cf       	rjmp	.-286    	; 0x32d8 <STEP_MOTORu8StartFullMode+0xca>
	u8 Local_u8ItrateStep = 0;
	if(STEP_LOWER_NIBBLE == Copy_pStep->Nibble)
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    33f6:	8a ad       	ldd	r24, Y+58	; 0x3a
    33f8:	9b ad       	ldd	r25, Y+59	; 0x3b
    33fa:	01 96       	adiw	r24, 0x01	; 1
    33fc:	9b af       	std	Y+59, r25	; 0x3b
    33fe:	8a af       	std	Y+58, r24	; 0x3a
    3400:	2a ad       	ldd	r18, Y+58	; 0x3a
    3402:	3b ad       	ldd	r19, Y+59	; 0x3b
    3404:	8c ad       	ldd	r24, Y+60	; 0x3c
    3406:	9d ad       	ldd	r25, Y+61	; 0x3d
    3408:	28 17       	cp	r18, r24
    340a:	39 07       	cpc	r19, r25
    340c:	08 f4       	brcc	.+2      	; 0x3410 <STEP_MOTORu8StartFullMode+0x202>
    340e:	62 cf       	rjmp	.-316    	; 0x32d4 <STEP_MOTORu8StartFullMode+0xc6>
    3410:	1f c2       	rjmp	.+1086   	; 0x3850 <STEP_MOTORu8StartFullMode+0x642>
					DIO_u8SetLowNibbleValue(Copy_pStep->Port,(MASK_CW<<Local_u8ItrateStep));
					_delay_ms(2);
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
    3412:	fe 01       	movw	r30, r28
    3414:	ef 5b       	subi	r30, 0xBF	; 191
    3416:	ff 4f       	sbci	r31, 0xFF	; 255
    3418:	01 90       	ld	r0, Z+
    341a:	f0 81       	ld	r31, Z
    341c:	e0 2d       	mov	r30, r0
    341e:	82 81       	ldd	r24, Z+2	; 0x02
    3420:	81 30       	cpi	r24, 0x01	; 1
    3422:	09 f0       	breq	.+2      	; 0x3426 <STEP_MOTORu8StartFullMode+0x218>
    3424:	a2 c0       	rjmp	.+324    	; 0x356a <STEP_MOTORu8StartFullMode+0x35c>
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3426:	1b ae       	std	Y+59, r1	; 0x3b
    3428:	1a ae       	std	Y+58, r1	; 0x3a
    342a:	96 c0       	rjmp	.+300    	; 0x3558 <STEP_MOTORu8StartFullMode+0x34a>
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    342c:	19 ae       	std	Y+57, r1	; 0x39
    342e:	8b c0       	rjmp	.+278    	; 0x3546 <STEP_MOTORu8StartFullMode+0x338>
				{
					DIO_u8SetLowNibbleValue(Copy_pStep->Port,(MASK_CCW>>Local_u8ItrateStep));
    3430:	fe 01       	movw	r30, r28
    3432:	ef 5b       	subi	r30, 0xBF	; 191
    3434:	ff 4f       	sbci	r31, 0xFF	; 255
    3436:	01 90       	ld	r0, Z+
    3438:	f0 81       	ld	r31, Z
    343a:	e0 2d       	mov	r30, r0
    343c:	40 81       	ld	r20, Z
    343e:	89 ad       	ldd	r24, Y+57	; 0x39
    3440:	28 2f       	mov	r18, r24
    3442:	30 e0       	ldi	r19, 0x00	; 0
    3444:	88 e0       	ldi	r24, 0x08	; 8
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	02 c0       	rjmp	.+4      	; 0x344e <STEP_MOTORu8StartFullMode+0x240>
    344a:	95 95       	asr	r25
    344c:	87 95       	ror	r24
    344e:	2a 95       	dec	r18
    3450:	e2 f7       	brpl	.-8      	; 0x344a <STEP_MOTORu8StartFullMode+0x23c>
    3452:	98 2f       	mov	r25, r24
    3454:	84 2f       	mov	r24, r20
    3456:	69 2f       	mov	r22, r25
    3458:	0e 94 be 12 	call	0x257c	; 0x257c <DIO_u8SetLowNibbleValue>
    345c:	80 e0       	ldi	r24, 0x00	; 0
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	a0 e0       	ldi	r26, 0x00	; 0
    3462:	b0 e4       	ldi	r27, 0x40	; 64
    3464:	8f a3       	std	Y+39, r24	; 0x27
    3466:	98 a7       	std	Y+40, r25	; 0x28
    3468:	a9 a7       	std	Y+41, r26	; 0x29
    346a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    346c:	6f a1       	ldd	r22, Y+39	; 0x27
    346e:	78 a5       	ldd	r23, Y+40	; 0x28
    3470:	89 a5       	ldd	r24, Y+41	; 0x29
    3472:	9a a5       	ldd	r25, Y+42	; 0x2a
    3474:	20 e0       	ldi	r18, 0x00	; 0
    3476:	30 e0       	ldi	r19, 0x00	; 0
    3478:	4a ef       	ldi	r20, 0xFA	; 250
    347a:	54 e4       	ldi	r21, 0x44	; 68
    347c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3480:	dc 01       	movw	r26, r24
    3482:	cb 01       	movw	r24, r22
    3484:	8b a3       	std	Y+35, r24	; 0x23
    3486:	9c a3       	std	Y+36, r25	; 0x24
    3488:	ad a3       	std	Y+37, r26	; 0x25
    348a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    348c:	6b a1       	ldd	r22, Y+35	; 0x23
    348e:	7c a1       	ldd	r23, Y+36	; 0x24
    3490:	8d a1       	ldd	r24, Y+37	; 0x25
    3492:	9e a1       	ldd	r25, Y+38	; 0x26
    3494:	20 e0       	ldi	r18, 0x00	; 0
    3496:	30 e0       	ldi	r19, 0x00	; 0
    3498:	40 e8       	ldi	r20, 0x80	; 128
    349a:	5f e3       	ldi	r21, 0x3F	; 63
    349c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34a0:	88 23       	and	r24, r24
    34a2:	2c f4       	brge	.+10     	; 0x34ae <STEP_MOTORu8StartFullMode+0x2a0>
		__ticks = 1;
    34a4:	81 e0       	ldi	r24, 0x01	; 1
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	9a a3       	std	Y+34, r25	; 0x22
    34aa:	89 a3       	std	Y+33, r24	; 0x21
    34ac:	3f c0       	rjmp	.+126    	; 0x352c <STEP_MOTORu8StartFullMode+0x31e>
	else if (__tmp > 65535)
    34ae:	6b a1       	ldd	r22, Y+35	; 0x23
    34b0:	7c a1       	ldd	r23, Y+36	; 0x24
    34b2:	8d a1       	ldd	r24, Y+37	; 0x25
    34b4:	9e a1       	ldd	r25, Y+38	; 0x26
    34b6:	20 e0       	ldi	r18, 0x00	; 0
    34b8:	3f ef       	ldi	r19, 0xFF	; 255
    34ba:	4f e7       	ldi	r20, 0x7F	; 127
    34bc:	57 e4       	ldi	r21, 0x47	; 71
    34be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34c2:	18 16       	cp	r1, r24
    34c4:	4c f5       	brge	.+82     	; 0x3518 <STEP_MOTORu8StartFullMode+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34c6:	6f a1       	ldd	r22, Y+39	; 0x27
    34c8:	78 a5       	ldd	r23, Y+40	; 0x28
    34ca:	89 a5       	ldd	r24, Y+41	; 0x29
    34cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    34ce:	20 e0       	ldi	r18, 0x00	; 0
    34d0:	30 e0       	ldi	r19, 0x00	; 0
    34d2:	40 e2       	ldi	r20, 0x20	; 32
    34d4:	51 e4       	ldi	r21, 0x41	; 65
    34d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34da:	dc 01       	movw	r26, r24
    34dc:	cb 01       	movw	r24, r22
    34de:	bc 01       	movw	r22, r24
    34e0:	cd 01       	movw	r24, r26
    34e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34e6:	dc 01       	movw	r26, r24
    34e8:	cb 01       	movw	r24, r22
    34ea:	9a a3       	std	Y+34, r25	; 0x22
    34ec:	89 a3       	std	Y+33, r24	; 0x21
    34ee:	0f c0       	rjmp	.+30     	; 0x350e <STEP_MOTORu8StartFullMode+0x300>
    34f0:	88 ec       	ldi	r24, 0xC8	; 200
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	98 a3       	std	Y+32, r25	; 0x20
    34f6:	8f 8f       	std	Y+31, r24	; 0x1f
    34f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34fa:	98 a1       	ldd	r25, Y+32	; 0x20
    34fc:	01 97       	sbiw	r24, 0x01	; 1
    34fe:	f1 f7       	brne	.-4      	; 0x34fc <STEP_MOTORu8StartFullMode+0x2ee>
    3500:	98 a3       	std	Y+32, r25	; 0x20
    3502:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3504:	89 a1       	ldd	r24, Y+33	; 0x21
    3506:	9a a1       	ldd	r25, Y+34	; 0x22
    3508:	01 97       	sbiw	r24, 0x01	; 1
    350a:	9a a3       	std	Y+34, r25	; 0x22
    350c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    350e:	89 a1       	ldd	r24, Y+33	; 0x21
    3510:	9a a1       	ldd	r25, Y+34	; 0x22
    3512:	00 97       	sbiw	r24, 0x00	; 0
    3514:	69 f7       	brne	.-38     	; 0x34f0 <STEP_MOTORu8StartFullMode+0x2e2>
    3516:	14 c0       	rjmp	.+40     	; 0x3540 <STEP_MOTORu8StartFullMode+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3518:	6b a1       	ldd	r22, Y+35	; 0x23
    351a:	7c a1       	ldd	r23, Y+36	; 0x24
    351c:	8d a1       	ldd	r24, Y+37	; 0x25
    351e:	9e a1       	ldd	r25, Y+38	; 0x26
    3520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3524:	dc 01       	movw	r26, r24
    3526:	cb 01       	movw	r24, r22
    3528:	9a a3       	std	Y+34, r25	; 0x22
    352a:	89 a3       	std	Y+33, r24	; 0x21
    352c:	89 a1       	ldd	r24, Y+33	; 0x21
    352e:	9a a1       	ldd	r25, Y+34	; 0x22
    3530:	9e 8f       	std	Y+30, r25	; 0x1e
    3532:	8d 8f       	std	Y+29, r24	; 0x1d
    3534:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3536:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3538:	01 97       	sbiw	r24, 0x01	; 1
    353a:	f1 f7       	brne	.-4      	; 0x3538 <STEP_MOTORu8StartFullMode+0x32a>
    353c:	9e 8f       	std	Y+30, r25	; 0x1e
    353e:	8d 8f       	std	Y+29, r24	; 0x1d
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    3540:	89 ad       	ldd	r24, Y+57	; 0x39
    3542:	8f 5f       	subi	r24, 0xFF	; 255
    3544:	89 af       	std	Y+57, r24	; 0x39
    3546:	89 ad       	ldd	r24, Y+57	; 0x39
    3548:	84 30       	cpi	r24, 0x04	; 4
    354a:	08 f4       	brcc	.+2      	; 0x354e <STEP_MOTORu8StartFullMode+0x340>
    354c:	71 cf       	rjmp	.-286    	; 0x3430 <STEP_MOTORu8StartFullMode+0x222>
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    354e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3550:	9b ad       	ldd	r25, Y+59	; 0x3b
    3552:	01 96       	adiw	r24, 0x01	; 1
    3554:	9b af       	std	Y+59, r25	; 0x3b
    3556:	8a af       	std	Y+58, r24	; 0x3a
    3558:	2a ad       	ldd	r18, Y+58	; 0x3a
    355a:	3b ad       	ldd	r19, Y+59	; 0x3b
    355c:	8c ad       	ldd	r24, Y+60	; 0x3c
    355e:	9d ad       	ldd	r25, Y+61	; 0x3d
    3560:	28 17       	cp	r18, r24
    3562:	39 07       	cpc	r19, r25
    3564:	08 f4       	brcc	.+2      	; 0x3568 <STEP_MOTORu8StartFullMode+0x35a>
    3566:	62 cf       	rjmp	.-316    	; 0x342c <STEP_MOTORu8StartFullMode+0x21e>
    3568:	73 c1       	rjmp	.+742    	; 0x3850 <STEP_MOTORu8StartFullMode+0x642>
					_delay_ms(2);
				}
			}
		}
		else
			Local_u8ErrorState = NOTOK;
    356a:	81 e0       	ldi	r24, 0x01	; 1
    356c:	fe 01       	movw	r30, r28
    356e:	e0 5c       	subi	r30, 0xC0	; 192
    3570:	ff 4f       	sbci	r31, 0xFF	; 255
    3572:	80 83       	st	Z, r24
    3574:	6d c1       	rjmp	.+730    	; 0x3850 <STEP_MOTORu8StartFullMode+0x642>
	}
	else if(STEP_UPPER_NIBBLE == Copy_pStep->Nibble)
    3576:	fe 01       	movw	r30, r28
    3578:	ef 5b       	subi	r30, 0xBF	; 191
    357a:	ff 4f       	sbci	r31, 0xFF	; 255
    357c:	01 90       	ld	r0, Z+
    357e:	f0 81       	ld	r31, Z
    3580:	e0 2d       	mov	r30, r0
    3582:	81 81       	ldd	r24, Z+1	; 0x01
    3584:	81 30       	cpi	r24, 0x01	; 1
    3586:	09 f0       	breq	.+2      	; 0x358a <STEP_MOTORu8StartFullMode+0x37c>
    3588:	5e c1       	rjmp	.+700    	; 0x3846 <STEP_MOTORu8StartFullMode+0x638>
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
    358a:	fe 01       	movw	r30, r28
    358c:	ef 5b       	subi	r30, 0xBF	; 191
    358e:	ff 4f       	sbci	r31, 0xFF	; 255
    3590:	01 90       	ld	r0, Z+
    3592:	f0 81       	ld	r31, Z
    3594:	e0 2d       	mov	r30, r0
    3596:	82 81       	ldd	r24, Z+2	; 0x02
    3598:	88 23       	and	r24, r24
    359a:	09 f0       	breq	.+2      	; 0x359e <STEP_MOTORu8StartFullMode+0x390>
    359c:	a2 c0       	rjmp	.+324    	; 0x36e2 <STEP_MOTORu8StartFullMode+0x4d4>
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    359e:	1b ae       	std	Y+59, r1	; 0x3b
    35a0:	1a ae       	std	Y+58, r1	; 0x3a
    35a2:	96 c0       	rjmp	.+300    	; 0x36d0 <STEP_MOTORu8StartFullMode+0x4c2>
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    35a4:	19 ae       	std	Y+57, r1	; 0x39
    35a6:	8b c0       	rjmp	.+278    	; 0x36be <STEP_MOTORu8StartFullMode+0x4b0>
				{
					DIO_u8SetHighNibbleValue(Copy_pStep->Port,(MASK_CW<<Local_u8ItrateStep));
    35a8:	fe 01       	movw	r30, r28
    35aa:	ef 5b       	subi	r30, 0xBF	; 191
    35ac:	ff 4f       	sbci	r31, 0xFF	; 255
    35ae:	01 90       	ld	r0, Z+
    35b0:	f0 81       	ld	r31, Z
    35b2:	e0 2d       	mov	r30, r0
    35b4:	40 81       	ld	r20, Z
    35b6:	89 ad       	ldd	r24, Y+57	; 0x39
    35b8:	28 2f       	mov	r18, r24
    35ba:	30 e0       	ldi	r19, 0x00	; 0
    35bc:	81 e0       	ldi	r24, 0x01	; 1
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	02 c0       	rjmp	.+4      	; 0x35c6 <STEP_MOTORu8StartFullMode+0x3b8>
    35c2:	88 0f       	add	r24, r24
    35c4:	99 1f       	adc	r25, r25
    35c6:	2a 95       	dec	r18
    35c8:	e2 f7       	brpl	.-8      	; 0x35c2 <STEP_MOTORu8StartFullMode+0x3b4>
    35ca:	98 2f       	mov	r25, r24
    35cc:	84 2f       	mov	r24, r20
    35ce:	69 2f       	mov	r22, r25
    35d0:	0e 94 39 13 	call	0x2672	; 0x2672 <DIO_u8SetHighNibbleValue>
    35d4:	80 e0       	ldi	r24, 0x00	; 0
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	a0 e0       	ldi	r26, 0x00	; 0
    35da:	b0 e4       	ldi	r27, 0x40	; 64
    35dc:	89 8f       	std	Y+25, r24	; 0x19
    35de:	9a 8f       	std	Y+26, r25	; 0x1a
    35e0:	ab 8f       	std	Y+27, r26	; 0x1b
    35e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35e4:	69 8d       	ldd	r22, Y+25	; 0x19
    35e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35ec:	20 e0       	ldi	r18, 0x00	; 0
    35ee:	30 e0       	ldi	r19, 0x00	; 0
    35f0:	4a ef       	ldi	r20, 0xFA	; 250
    35f2:	54 e4       	ldi	r21, 0x44	; 68
    35f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f8:	dc 01       	movw	r26, r24
    35fa:	cb 01       	movw	r24, r22
    35fc:	8d 8b       	std	Y+21, r24	; 0x15
    35fe:	9e 8b       	std	Y+22, r25	; 0x16
    3600:	af 8b       	std	Y+23, r26	; 0x17
    3602:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3604:	6d 89       	ldd	r22, Y+21	; 0x15
    3606:	7e 89       	ldd	r23, Y+22	; 0x16
    3608:	8f 89       	ldd	r24, Y+23	; 0x17
    360a:	98 8d       	ldd	r25, Y+24	; 0x18
    360c:	20 e0       	ldi	r18, 0x00	; 0
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	40 e8       	ldi	r20, 0x80	; 128
    3612:	5f e3       	ldi	r21, 0x3F	; 63
    3614:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3618:	88 23       	and	r24, r24
    361a:	2c f4       	brge	.+10     	; 0x3626 <STEP_MOTORu8StartFullMode+0x418>
		__ticks = 1;
    361c:	81 e0       	ldi	r24, 0x01	; 1
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	9c 8b       	std	Y+20, r25	; 0x14
    3622:	8b 8b       	std	Y+19, r24	; 0x13
    3624:	3f c0       	rjmp	.+126    	; 0x36a4 <STEP_MOTORu8StartFullMode+0x496>
	else if (__tmp > 65535)
    3626:	6d 89       	ldd	r22, Y+21	; 0x15
    3628:	7e 89       	ldd	r23, Y+22	; 0x16
    362a:	8f 89       	ldd	r24, Y+23	; 0x17
    362c:	98 8d       	ldd	r25, Y+24	; 0x18
    362e:	20 e0       	ldi	r18, 0x00	; 0
    3630:	3f ef       	ldi	r19, 0xFF	; 255
    3632:	4f e7       	ldi	r20, 0x7F	; 127
    3634:	57 e4       	ldi	r21, 0x47	; 71
    3636:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    363a:	18 16       	cp	r1, r24
    363c:	4c f5       	brge	.+82     	; 0x3690 <STEP_MOTORu8StartFullMode+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    363e:	69 8d       	ldd	r22, Y+25	; 0x19
    3640:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3642:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3644:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3646:	20 e0       	ldi	r18, 0x00	; 0
    3648:	30 e0       	ldi	r19, 0x00	; 0
    364a:	40 e2       	ldi	r20, 0x20	; 32
    364c:	51 e4       	ldi	r21, 0x41	; 65
    364e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3652:	dc 01       	movw	r26, r24
    3654:	cb 01       	movw	r24, r22
    3656:	bc 01       	movw	r22, r24
    3658:	cd 01       	movw	r24, r26
    365a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    365e:	dc 01       	movw	r26, r24
    3660:	cb 01       	movw	r24, r22
    3662:	9c 8b       	std	Y+20, r25	; 0x14
    3664:	8b 8b       	std	Y+19, r24	; 0x13
    3666:	0f c0       	rjmp	.+30     	; 0x3686 <STEP_MOTORu8StartFullMode+0x478>
    3668:	88 ec       	ldi	r24, 0xC8	; 200
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	9a 8b       	std	Y+18, r25	; 0x12
    366e:	89 8b       	std	Y+17, r24	; 0x11
    3670:	89 89       	ldd	r24, Y+17	; 0x11
    3672:	9a 89       	ldd	r25, Y+18	; 0x12
    3674:	01 97       	sbiw	r24, 0x01	; 1
    3676:	f1 f7       	brne	.-4      	; 0x3674 <STEP_MOTORu8StartFullMode+0x466>
    3678:	9a 8b       	std	Y+18, r25	; 0x12
    367a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    367c:	8b 89       	ldd	r24, Y+19	; 0x13
    367e:	9c 89       	ldd	r25, Y+20	; 0x14
    3680:	01 97       	sbiw	r24, 0x01	; 1
    3682:	9c 8b       	std	Y+20, r25	; 0x14
    3684:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3686:	8b 89       	ldd	r24, Y+19	; 0x13
    3688:	9c 89       	ldd	r25, Y+20	; 0x14
    368a:	00 97       	sbiw	r24, 0x00	; 0
    368c:	69 f7       	brne	.-38     	; 0x3668 <STEP_MOTORu8StartFullMode+0x45a>
    368e:	14 c0       	rjmp	.+40     	; 0x36b8 <STEP_MOTORu8StartFullMode+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3690:	6d 89       	ldd	r22, Y+21	; 0x15
    3692:	7e 89       	ldd	r23, Y+22	; 0x16
    3694:	8f 89       	ldd	r24, Y+23	; 0x17
    3696:	98 8d       	ldd	r25, Y+24	; 0x18
    3698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    369c:	dc 01       	movw	r26, r24
    369e:	cb 01       	movw	r24, r22
    36a0:	9c 8b       	std	Y+20, r25	; 0x14
    36a2:	8b 8b       	std	Y+19, r24	; 0x13
    36a4:	8b 89       	ldd	r24, Y+19	; 0x13
    36a6:	9c 89       	ldd	r25, Y+20	; 0x14
    36a8:	98 8b       	std	Y+16, r25	; 0x10
    36aa:	8f 87       	std	Y+15, r24	; 0x0f
    36ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    36ae:	98 89       	ldd	r25, Y+16	; 0x10
    36b0:	01 97       	sbiw	r24, 0x01	; 1
    36b2:	f1 f7       	brne	.-4      	; 0x36b0 <STEP_MOTORu8StartFullMode+0x4a2>
    36b4:	98 8b       	std	Y+16, r25	; 0x10
    36b6:	8f 87       	std	Y+15, r24	; 0x0f
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    36b8:	89 ad       	ldd	r24, Y+57	; 0x39
    36ba:	8f 5f       	subi	r24, 0xFF	; 255
    36bc:	89 af       	std	Y+57, r24	; 0x39
    36be:	89 ad       	ldd	r24, Y+57	; 0x39
    36c0:	84 30       	cpi	r24, 0x04	; 4
    36c2:	08 f4       	brcc	.+2      	; 0x36c6 <STEP_MOTORu8StartFullMode+0x4b8>
    36c4:	71 cf       	rjmp	.-286    	; 0x35a8 <STEP_MOTORu8StartFullMode+0x39a>
	}
	else if(STEP_UPPER_NIBBLE == Copy_pStep->Nibble)
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    36c6:	8a ad       	ldd	r24, Y+58	; 0x3a
    36c8:	9b ad       	ldd	r25, Y+59	; 0x3b
    36ca:	01 96       	adiw	r24, 0x01	; 1
    36cc:	9b af       	std	Y+59, r25	; 0x3b
    36ce:	8a af       	std	Y+58, r24	; 0x3a
    36d0:	2a ad       	ldd	r18, Y+58	; 0x3a
    36d2:	3b ad       	ldd	r19, Y+59	; 0x3b
    36d4:	8c ad       	ldd	r24, Y+60	; 0x3c
    36d6:	9d ad       	ldd	r25, Y+61	; 0x3d
    36d8:	28 17       	cp	r18, r24
    36da:	39 07       	cpc	r19, r25
    36dc:	08 f4       	brcc	.+2      	; 0x36e0 <STEP_MOTORu8StartFullMode+0x4d2>
    36de:	62 cf       	rjmp	.-316    	; 0x35a4 <STEP_MOTORu8StartFullMode+0x396>
    36e0:	b7 c0       	rjmp	.+366    	; 0x3850 <STEP_MOTORu8StartFullMode+0x642>
					DIO_u8SetHighNibbleValue(Copy_pStep->Port,(MASK_CW<<Local_u8ItrateStep));
					_delay_ms(2);
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
    36e2:	fe 01       	movw	r30, r28
    36e4:	ef 5b       	subi	r30, 0xBF	; 191
    36e6:	ff 4f       	sbci	r31, 0xFF	; 255
    36e8:	01 90       	ld	r0, Z+
    36ea:	f0 81       	ld	r31, Z
    36ec:	e0 2d       	mov	r30, r0
    36ee:	82 81       	ldd	r24, Z+2	; 0x02
    36f0:	81 30       	cpi	r24, 0x01	; 1
    36f2:	09 f0       	breq	.+2      	; 0x36f6 <STEP_MOTORu8StartFullMode+0x4e8>
    36f4:	a2 c0       	rjmp	.+324    	; 0x383a <STEP_MOTORu8StartFullMode+0x62c>
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    36f6:	1b ae       	std	Y+59, r1	; 0x3b
    36f8:	1a ae       	std	Y+58, r1	; 0x3a
    36fa:	96 c0       	rjmp	.+300    	; 0x3828 <STEP_MOTORu8StartFullMode+0x61a>
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    36fc:	19 ae       	std	Y+57, r1	; 0x39
    36fe:	8b c0       	rjmp	.+278    	; 0x3816 <STEP_MOTORu8StartFullMode+0x608>
				{
					DIO_u8SetHighNibbleValue(Copy_pStep->Port,(MASK_CCW>>Local_u8ItrateStep));
    3700:	fe 01       	movw	r30, r28
    3702:	ef 5b       	subi	r30, 0xBF	; 191
    3704:	ff 4f       	sbci	r31, 0xFF	; 255
    3706:	01 90       	ld	r0, Z+
    3708:	f0 81       	ld	r31, Z
    370a:	e0 2d       	mov	r30, r0
    370c:	40 81       	ld	r20, Z
    370e:	89 ad       	ldd	r24, Y+57	; 0x39
    3710:	28 2f       	mov	r18, r24
    3712:	30 e0       	ldi	r19, 0x00	; 0
    3714:	88 e0       	ldi	r24, 0x08	; 8
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	02 c0       	rjmp	.+4      	; 0x371e <STEP_MOTORu8StartFullMode+0x510>
    371a:	95 95       	asr	r25
    371c:	87 95       	ror	r24
    371e:	2a 95       	dec	r18
    3720:	e2 f7       	brpl	.-8      	; 0x371a <STEP_MOTORu8StartFullMode+0x50c>
    3722:	98 2f       	mov	r25, r24
    3724:	84 2f       	mov	r24, r20
    3726:	69 2f       	mov	r22, r25
    3728:	0e 94 39 13 	call	0x2672	; 0x2672 <DIO_u8SetHighNibbleValue>
    372c:	80 e0       	ldi	r24, 0x00	; 0
    372e:	90 e0       	ldi	r25, 0x00	; 0
    3730:	a0 e0       	ldi	r26, 0x00	; 0
    3732:	b0 e4       	ldi	r27, 0x40	; 64
    3734:	8b 87       	std	Y+11, r24	; 0x0b
    3736:	9c 87       	std	Y+12, r25	; 0x0c
    3738:	ad 87       	std	Y+13, r26	; 0x0d
    373a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    373c:	6b 85       	ldd	r22, Y+11	; 0x0b
    373e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3740:	8d 85       	ldd	r24, Y+13	; 0x0d
    3742:	9e 85       	ldd	r25, Y+14	; 0x0e
    3744:	20 e0       	ldi	r18, 0x00	; 0
    3746:	30 e0       	ldi	r19, 0x00	; 0
    3748:	4a ef       	ldi	r20, 0xFA	; 250
    374a:	54 e4       	ldi	r21, 0x44	; 68
    374c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3750:	dc 01       	movw	r26, r24
    3752:	cb 01       	movw	r24, r22
    3754:	8f 83       	std	Y+7, r24	; 0x07
    3756:	98 87       	std	Y+8, r25	; 0x08
    3758:	a9 87       	std	Y+9, r26	; 0x09
    375a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    375c:	6f 81       	ldd	r22, Y+7	; 0x07
    375e:	78 85       	ldd	r23, Y+8	; 0x08
    3760:	89 85       	ldd	r24, Y+9	; 0x09
    3762:	9a 85       	ldd	r25, Y+10	; 0x0a
    3764:	20 e0       	ldi	r18, 0x00	; 0
    3766:	30 e0       	ldi	r19, 0x00	; 0
    3768:	40 e8       	ldi	r20, 0x80	; 128
    376a:	5f e3       	ldi	r21, 0x3F	; 63
    376c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3770:	88 23       	and	r24, r24
    3772:	2c f4       	brge	.+10     	; 0x377e <STEP_MOTORu8StartFullMode+0x570>
		__ticks = 1;
    3774:	81 e0       	ldi	r24, 0x01	; 1
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	9e 83       	std	Y+6, r25	; 0x06
    377a:	8d 83       	std	Y+5, r24	; 0x05
    377c:	3f c0       	rjmp	.+126    	; 0x37fc <STEP_MOTORu8StartFullMode+0x5ee>
	else if (__tmp > 65535)
    377e:	6f 81       	ldd	r22, Y+7	; 0x07
    3780:	78 85       	ldd	r23, Y+8	; 0x08
    3782:	89 85       	ldd	r24, Y+9	; 0x09
    3784:	9a 85       	ldd	r25, Y+10	; 0x0a
    3786:	20 e0       	ldi	r18, 0x00	; 0
    3788:	3f ef       	ldi	r19, 0xFF	; 255
    378a:	4f e7       	ldi	r20, 0x7F	; 127
    378c:	57 e4       	ldi	r21, 0x47	; 71
    378e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3792:	18 16       	cp	r1, r24
    3794:	4c f5       	brge	.+82     	; 0x37e8 <STEP_MOTORu8StartFullMode+0x5da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3796:	6b 85       	ldd	r22, Y+11	; 0x0b
    3798:	7c 85       	ldd	r23, Y+12	; 0x0c
    379a:	8d 85       	ldd	r24, Y+13	; 0x0d
    379c:	9e 85       	ldd	r25, Y+14	; 0x0e
    379e:	20 e0       	ldi	r18, 0x00	; 0
    37a0:	30 e0       	ldi	r19, 0x00	; 0
    37a2:	40 e2       	ldi	r20, 0x20	; 32
    37a4:	51 e4       	ldi	r21, 0x41	; 65
    37a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37aa:	dc 01       	movw	r26, r24
    37ac:	cb 01       	movw	r24, r22
    37ae:	bc 01       	movw	r22, r24
    37b0:	cd 01       	movw	r24, r26
    37b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b6:	dc 01       	movw	r26, r24
    37b8:	cb 01       	movw	r24, r22
    37ba:	9e 83       	std	Y+6, r25	; 0x06
    37bc:	8d 83       	std	Y+5, r24	; 0x05
    37be:	0f c0       	rjmp	.+30     	; 0x37de <STEP_MOTORu8StartFullMode+0x5d0>
    37c0:	88 ec       	ldi	r24, 0xC8	; 200
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	9c 83       	std	Y+4, r25	; 0x04
    37c6:	8b 83       	std	Y+3, r24	; 0x03
    37c8:	8b 81       	ldd	r24, Y+3	; 0x03
    37ca:	9c 81       	ldd	r25, Y+4	; 0x04
    37cc:	01 97       	sbiw	r24, 0x01	; 1
    37ce:	f1 f7       	brne	.-4      	; 0x37cc <STEP_MOTORu8StartFullMode+0x5be>
    37d0:	9c 83       	std	Y+4, r25	; 0x04
    37d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37d4:	8d 81       	ldd	r24, Y+5	; 0x05
    37d6:	9e 81       	ldd	r25, Y+6	; 0x06
    37d8:	01 97       	sbiw	r24, 0x01	; 1
    37da:	9e 83       	std	Y+6, r25	; 0x06
    37dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37de:	8d 81       	ldd	r24, Y+5	; 0x05
    37e0:	9e 81       	ldd	r25, Y+6	; 0x06
    37e2:	00 97       	sbiw	r24, 0x00	; 0
    37e4:	69 f7       	brne	.-38     	; 0x37c0 <STEP_MOTORu8StartFullMode+0x5b2>
    37e6:	14 c0       	rjmp	.+40     	; 0x3810 <STEP_MOTORu8StartFullMode+0x602>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37e8:	6f 81       	ldd	r22, Y+7	; 0x07
    37ea:	78 85       	ldd	r23, Y+8	; 0x08
    37ec:	89 85       	ldd	r24, Y+9	; 0x09
    37ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    37f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37f4:	dc 01       	movw	r26, r24
    37f6:	cb 01       	movw	r24, r22
    37f8:	9e 83       	std	Y+6, r25	; 0x06
    37fa:	8d 83       	std	Y+5, r24	; 0x05
    37fc:	8d 81       	ldd	r24, Y+5	; 0x05
    37fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3800:	9a 83       	std	Y+2, r25	; 0x02
    3802:	89 83       	std	Y+1, r24	; 0x01
    3804:	89 81       	ldd	r24, Y+1	; 0x01
    3806:	9a 81       	ldd	r25, Y+2	; 0x02
    3808:	01 97       	sbiw	r24, 0x01	; 1
    380a:	f1 f7       	brne	.-4      	; 0x3808 <STEP_MOTORu8StartFullMode+0x5fa>
    380c:	9a 83       	std	Y+2, r25	; 0x02
    380e:	89 83       	std	Y+1, r24	; 0x01
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    3810:	89 ad       	ldd	r24, Y+57	; 0x39
    3812:	8f 5f       	subi	r24, 0xFF	; 255
    3814:	89 af       	std	Y+57, r24	; 0x39
    3816:	89 ad       	ldd	r24, Y+57	; 0x39
    3818:	84 30       	cpi	r24, 0x04	; 4
    381a:	08 f4       	brcc	.+2      	; 0x381e <STEP_MOTORu8StartFullMode+0x610>
    381c:	71 cf       	rjmp	.-286    	; 0x3700 <STEP_MOTORu8StartFullMode+0x4f2>
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    381e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3820:	9b ad       	ldd	r25, Y+59	; 0x3b
    3822:	01 96       	adiw	r24, 0x01	; 1
    3824:	9b af       	std	Y+59, r25	; 0x3b
    3826:	8a af       	std	Y+58, r24	; 0x3a
    3828:	2a ad       	ldd	r18, Y+58	; 0x3a
    382a:	3b ad       	ldd	r19, Y+59	; 0x3b
    382c:	8c ad       	ldd	r24, Y+60	; 0x3c
    382e:	9d ad       	ldd	r25, Y+61	; 0x3d
    3830:	28 17       	cp	r18, r24
    3832:	39 07       	cpc	r19, r25
    3834:	08 f4       	brcc	.+2      	; 0x3838 <STEP_MOTORu8StartFullMode+0x62a>
    3836:	62 cf       	rjmp	.-316    	; 0x36fc <STEP_MOTORu8StartFullMode+0x4ee>
    3838:	0b c0       	rjmp	.+22     	; 0x3850 <STEP_MOTORu8StartFullMode+0x642>
					_delay_ms(2);
				}
			}
		}
		else
			Local_u8ErrorState = NOTOK;
    383a:	81 e0       	ldi	r24, 0x01	; 1
    383c:	fe 01       	movw	r30, r28
    383e:	e0 5c       	subi	r30, 0xC0	; 192
    3840:	ff 4f       	sbci	r31, 0xFF	; 255
    3842:	80 83       	st	Z, r24
    3844:	05 c0       	rjmp	.+10     	; 0x3850 <STEP_MOTORu8StartFullMode+0x642>
	}
	else
		Local_u8ErrorState = NOTOK;
    3846:	81 e0       	ldi	r24, 0x01	; 1
    3848:	fe 01       	movw	r30, r28
    384a:	e0 5c       	subi	r30, 0xC0	; 192
    384c:	ff 4f       	sbci	r31, 0xFF	; 255
    384e:	80 83       	st	Z, r24
	return Local_u8ErrorState;
    3850:	fe 01       	movw	r30, r28
    3852:	e0 5c       	subi	r30, 0xC0	; 192
    3854:	ff 4f       	sbci	r31, 0xFF	; 255
    3856:	80 81       	ld	r24, Z
}
    3858:	ce 5b       	subi	r28, 0xBE	; 190
    385a:	df 4f       	sbci	r29, 0xFF	; 255
    385c:	0f b6       	in	r0, 0x3f	; 63
    385e:	f8 94       	cli
    3860:	de bf       	out	0x3e, r29	; 62
    3862:	0f be       	out	0x3f, r0	; 63
    3864:	cd bf       	out	0x3d, r28	; 61
    3866:	cf 91       	pop	r28
    3868:	df 91       	pop	r29
    386a:	08 95       	ret

0000386c <STEP_MOTORu8StartHalfMode>:

u8 STEP_MOTORu8StartHalfMode(STEP_t *Copy_pStep)
{
    386c:	df 93       	push	r29
    386e:	cf 93       	push	r28
    3870:	cd b7       	in	r28, 0x3d	; 61
    3872:	de b7       	in	r29, 0x3e	; 62
    3874:	c4 54       	subi	r28, 0x44	; 68
    3876:	d0 40       	sbci	r29, 0x00	; 0
    3878:	0f b6       	in	r0, 0x3f	; 63
    387a:	f8 94       	cli
    387c:	de bf       	out	0x3e, r29	; 62
    387e:	0f be       	out	0x3f, r0	; 63
    3880:	cd bf       	out	0x3d, r28	; 61
    3882:	fe 01       	movw	r30, r28
    3884:	ed 5b       	subi	r30, 0xBD	; 189
    3886:	ff 4f       	sbci	r31, 0xFF	; 255
    3888:	91 83       	std	Z+1, r25	; 0x01
    388a:	80 83       	st	Z, r24
	u8 Local_u8ErrorState = OK;
    388c:	fe 01       	movw	r30, r28
    388e:	ee 5b       	subi	r30, 0xBE	; 190
    3890:	ff 4f       	sbci	r31, 0xFF	; 255
    3892:	10 82       	st	Z, r1
	u16 Local_u16Counter=0;
    3894:	fe 01       	movw	r30, r28
    3896:	e0 5c       	subi	r30, 0xC0	; 192
    3898:	ff 4f       	sbci	r31, 0xFF	; 255
    389a:	11 82       	std	Z+1, r1	; 0x01
    389c:	10 82       	st	Z, r1
	u16 Local_u16NumOfSteps = (u16)((((f32)Copy_pStep->AngleDegree)/5.625)*64.0);
    389e:	fe 01       	movw	r30, r28
    38a0:	ed 5b       	subi	r30, 0xBD	; 189
    38a2:	ff 4f       	sbci	r31, 0xFF	; 255
    38a4:	01 90       	ld	r0, Z+
    38a6:	f0 81       	ld	r31, Z
    38a8:	e0 2d       	mov	r30, r0
    38aa:	83 81       	ldd	r24, Z+3	; 0x03
    38ac:	94 81       	ldd	r25, Z+4	; 0x04
    38ae:	cc 01       	movw	r24, r24
    38b0:	a0 e0       	ldi	r26, 0x00	; 0
    38b2:	b0 e0       	ldi	r27, 0x00	; 0
    38b4:	bc 01       	movw	r22, r24
    38b6:	cd 01       	movw	r24, r26
    38b8:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    38bc:	dc 01       	movw	r26, r24
    38be:	cb 01       	movw	r24, r22
    38c0:	bc 01       	movw	r22, r24
    38c2:	cd 01       	movw	r24, r26
    38c4:	20 e0       	ldi	r18, 0x00	; 0
    38c6:	30 e0       	ldi	r19, 0x00	; 0
    38c8:	44 eb       	ldi	r20, 0xB4	; 180
    38ca:	50 e4       	ldi	r21, 0x40	; 64
    38cc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    38d0:	dc 01       	movw	r26, r24
    38d2:	cb 01       	movw	r24, r22
    38d4:	bc 01       	movw	r22, r24
    38d6:	cd 01       	movw	r24, r26
    38d8:	20 e0       	ldi	r18, 0x00	; 0
    38da:	30 e0       	ldi	r19, 0x00	; 0
    38dc:	40 e8       	ldi	r20, 0x80	; 128
    38de:	52 e4       	ldi	r21, 0x42	; 66
    38e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38e4:	dc 01       	movw	r26, r24
    38e6:	cb 01       	movw	r24, r22
    38e8:	bc 01       	movw	r22, r24
    38ea:	cd 01       	movw	r24, r26
    38ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38f0:	dc 01       	movw	r26, r24
    38f2:	cb 01       	movw	r24, r22
    38f4:	9f af       	std	Y+63, r25	; 0x3f
    38f6:	8e af       	std	Y+62, r24	; 0x3e
	u16 Local_u16MaxItration = Local_u16NumOfSteps/8;
    38f8:	8e ad       	ldd	r24, Y+62	; 0x3e
    38fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    38fc:	96 95       	lsr	r25
    38fe:	87 95       	ror	r24
    3900:	96 95       	lsr	r25
    3902:	87 95       	ror	r24
    3904:	96 95       	lsr	r25
    3906:	87 95       	ror	r24
    3908:	9d af       	std	Y+61, r25	; 0x3d
    390a:	8c af       	std	Y+60, r24	; 0x3c
	u8 Local_u8ItrateStep = 0,con1,con2 ;
    390c:	1b ae       	std	Y+59, r1	; 0x3b
	if(STEP_LOWER_NIBBLE == Copy_pStep->Nibble)
    390e:	fe 01       	movw	r30, r28
    3910:	ed 5b       	subi	r30, 0xBD	; 189
    3912:	ff 4f       	sbci	r31, 0xFF	; 255
    3914:	01 90       	ld	r0, Z+
    3916:	f0 81       	ld	r31, Z
    3918:	e0 2d       	mov	r30, r0
    391a:	81 81       	ldd	r24, Z+1	; 0x01
    391c:	88 23       	and	r24, r24
    391e:	09 f0       	breq	.+2      	; 0x3922 <STEP_MOTORu8StartHalfMode+0xb6>
    3920:	96 c1       	rjmp	.+812    	; 0x3c4e <STEP_MOTORu8StartHalfMode+0x3e2>
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
    3922:	fe 01       	movw	r30, r28
    3924:	ed 5b       	subi	r30, 0xBD	; 189
    3926:	ff 4f       	sbci	r31, 0xFF	; 255
    3928:	01 90       	ld	r0, Z+
    392a:	f0 81       	ld	r31, Z
    392c:	e0 2d       	mov	r30, r0
    392e:	82 81       	ldd	r24, Z+2	; 0x02
    3930:	88 23       	and	r24, r24
    3932:	09 f0       	breq	.+2      	; 0x3936 <STEP_MOTORu8StartHalfMode+0xca>
    3934:	c1 c0       	rjmp	.+386    	; 0x3ab8 <STEP_MOTORu8StartHalfMode+0x24c>
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3936:	fe 01       	movw	r30, r28
    3938:	e0 5c       	subi	r30, 0xC0	; 192
    393a:	ff 4f       	sbci	r31, 0xFF	; 255
    393c:	11 82       	std	Z+1, r1	; 0x01
    393e:	10 82       	st	Z, r1
    3940:	af c0       	rjmp	.+350    	; 0x3aa0 <STEP_MOTORu8StartHalfMode+0x234>
			{
				con1 = 0x01;
    3942:	81 e0       	ldi	r24, 0x01	; 1
    3944:	8a af       	std	Y+58, r24	; 0x3a
				con2 = 0x03;
    3946:	83 e0       	ldi	r24, 0x03	; 3
    3948:	89 af       	std	Y+57, r24	; 0x39
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    394a:	81 e0       	ldi	r24, 0x01	; 1
    394c:	8b af       	std	Y+59, r24	; 0x3b
    394e:	98 c0       	rjmp	.+304    	; 0x3a80 <STEP_MOTORu8StartHalfMode+0x214>
				{

					if(Local_u8ItrateStep%2==1)
    3950:	8b ad       	ldd	r24, Y+59	; 0x3b
    3952:	88 2f       	mov	r24, r24
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	81 70       	andi	r24, 0x01	; 1
    3958:	90 70       	andi	r25, 0x00	; 0
    395a:	88 23       	and	r24, r24
    395c:	71 f0       	breq	.+28     	; 0x397a <STEP_MOTORu8StartHalfMode+0x10e>
					{
						DIO_u8SetLowNibbleValue(Copy_pStep->Port,con1);
    395e:	fe 01       	movw	r30, r28
    3960:	ed 5b       	subi	r30, 0xBD	; 189
    3962:	ff 4f       	sbci	r31, 0xFF	; 255
    3964:	01 90       	ld	r0, Z+
    3966:	f0 81       	ld	r31, Z
    3968:	e0 2d       	mov	r30, r0
    396a:	80 81       	ld	r24, Z
    396c:	6a ad       	ldd	r22, Y+58	; 0x3a
    396e:	0e 94 be 12 	call	0x257c	; 0x257c <DIO_u8SetLowNibbleValue>
						con1<<=1;
    3972:	8a ad       	ldd	r24, Y+58	; 0x3a
    3974:	88 0f       	add	r24, r24
    3976:	8a af       	std	Y+58, r24	; 0x3a
    3978:	0e c0       	rjmp	.+28     	; 0x3996 <STEP_MOTORu8StartHalfMode+0x12a>
					}
					else
					{
						DIO_u8SetLowNibbleValue(Copy_pStep->Port,con2);
    397a:	fe 01       	movw	r30, r28
    397c:	ed 5b       	subi	r30, 0xBD	; 189
    397e:	ff 4f       	sbci	r31, 0xFF	; 255
    3980:	01 90       	ld	r0, Z+
    3982:	f0 81       	ld	r31, Z
    3984:	e0 2d       	mov	r30, r0
    3986:	80 81       	ld	r24, Z
    3988:	69 ad       	ldd	r22, Y+57	; 0x39
    398a:	0e 94 be 12 	call	0x257c	; 0x257c <DIO_u8SetLowNibbleValue>
						con2 = RotateLeftLowNibble(con2);
    398e:	89 ad       	ldd	r24, Y+57	; 0x39
    3990:	0e 94 2c 20 	call	0x4058	; 0x4058 <RotateLeftLowNibble>
    3994:	89 af       	std	Y+57, r24	; 0x39
    3996:	80 e0       	ldi	r24, 0x00	; 0
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	a0 e0       	ldi	r26, 0x00	; 0
    399c:	b0 e4       	ldi	r27, 0x40	; 64
    399e:	8d ab       	std	Y+53, r24	; 0x35
    39a0:	9e ab       	std	Y+54, r25	; 0x36
    39a2:	af ab       	std	Y+55, r26	; 0x37
    39a4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39a6:	6d a9       	ldd	r22, Y+53	; 0x35
    39a8:	7e a9       	ldd	r23, Y+54	; 0x36
    39aa:	8f a9       	ldd	r24, Y+55	; 0x37
    39ac:	98 ad       	ldd	r25, Y+56	; 0x38
    39ae:	20 e0       	ldi	r18, 0x00	; 0
    39b0:	30 e0       	ldi	r19, 0x00	; 0
    39b2:	4a ef       	ldi	r20, 0xFA	; 250
    39b4:	54 e4       	ldi	r21, 0x44	; 68
    39b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ba:	dc 01       	movw	r26, r24
    39bc:	cb 01       	movw	r24, r22
    39be:	89 ab       	std	Y+49, r24	; 0x31
    39c0:	9a ab       	std	Y+50, r25	; 0x32
    39c2:	ab ab       	std	Y+51, r26	; 0x33
    39c4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    39c6:	69 a9       	ldd	r22, Y+49	; 0x31
    39c8:	7a a9       	ldd	r23, Y+50	; 0x32
    39ca:	8b a9       	ldd	r24, Y+51	; 0x33
    39cc:	9c a9       	ldd	r25, Y+52	; 0x34
    39ce:	20 e0       	ldi	r18, 0x00	; 0
    39d0:	30 e0       	ldi	r19, 0x00	; 0
    39d2:	40 e8       	ldi	r20, 0x80	; 128
    39d4:	5f e3       	ldi	r21, 0x3F	; 63
    39d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39da:	88 23       	and	r24, r24
    39dc:	2c f4       	brge	.+10     	; 0x39e8 <STEP_MOTORu8StartHalfMode+0x17c>
		__ticks = 1;
    39de:	81 e0       	ldi	r24, 0x01	; 1
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	98 ab       	std	Y+48, r25	; 0x30
    39e4:	8f a7       	std	Y+47, r24	; 0x2f
    39e6:	3f c0       	rjmp	.+126    	; 0x3a66 <STEP_MOTORu8StartHalfMode+0x1fa>
	else if (__tmp > 65535)
    39e8:	69 a9       	ldd	r22, Y+49	; 0x31
    39ea:	7a a9       	ldd	r23, Y+50	; 0x32
    39ec:	8b a9       	ldd	r24, Y+51	; 0x33
    39ee:	9c a9       	ldd	r25, Y+52	; 0x34
    39f0:	20 e0       	ldi	r18, 0x00	; 0
    39f2:	3f ef       	ldi	r19, 0xFF	; 255
    39f4:	4f e7       	ldi	r20, 0x7F	; 127
    39f6:	57 e4       	ldi	r21, 0x47	; 71
    39f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39fc:	18 16       	cp	r1, r24
    39fe:	4c f5       	brge	.+82     	; 0x3a52 <STEP_MOTORu8StartHalfMode+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a00:	6d a9       	ldd	r22, Y+53	; 0x35
    3a02:	7e a9       	ldd	r23, Y+54	; 0x36
    3a04:	8f a9       	ldd	r24, Y+55	; 0x37
    3a06:	98 ad       	ldd	r25, Y+56	; 0x38
    3a08:	20 e0       	ldi	r18, 0x00	; 0
    3a0a:	30 e0       	ldi	r19, 0x00	; 0
    3a0c:	40 e2       	ldi	r20, 0x20	; 32
    3a0e:	51 e4       	ldi	r21, 0x41	; 65
    3a10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a14:	dc 01       	movw	r26, r24
    3a16:	cb 01       	movw	r24, r22
    3a18:	bc 01       	movw	r22, r24
    3a1a:	cd 01       	movw	r24, r26
    3a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a20:	dc 01       	movw	r26, r24
    3a22:	cb 01       	movw	r24, r22
    3a24:	98 ab       	std	Y+48, r25	; 0x30
    3a26:	8f a7       	std	Y+47, r24	; 0x2f
    3a28:	0f c0       	rjmp	.+30     	; 0x3a48 <STEP_MOTORu8StartHalfMode+0x1dc>
    3a2a:	88 ec       	ldi	r24, 0xC8	; 200
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
    3a2e:	9e a7       	std	Y+46, r25	; 0x2e
    3a30:	8d a7       	std	Y+45, r24	; 0x2d
    3a32:	8d a5       	ldd	r24, Y+45	; 0x2d
    3a34:	9e a5       	ldd	r25, Y+46	; 0x2e
    3a36:	01 97       	sbiw	r24, 0x01	; 1
    3a38:	f1 f7       	brne	.-4      	; 0x3a36 <STEP_MOTORu8StartHalfMode+0x1ca>
    3a3a:	9e a7       	std	Y+46, r25	; 0x2e
    3a3c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a40:	98 a9       	ldd	r25, Y+48	; 0x30
    3a42:	01 97       	sbiw	r24, 0x01	; 1
    3a44:	98 ab       	std	Y+48, r25	; 0x30
    3a46:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a48:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a4a:	98 a9       	ldd	r25, Y+48	; 0x30
    3a4c:	00 97       	sbiw	r24, 0x00	; 0
    3a4e:	69 f7       	brne	.-38     	; 0x3a2a <STEP_MOTORu8StartHalfMode+0x1be>
    3a50:	14 c0       	rjmp	.+40     	; 0x3a7a <STEP_MOTORu8StartHalfMode+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a52:	69 a9       	ldd	r22, Y+49	; 0x31
    3a54:	7a a9       	ldd	r23, Y+50	; 0x32
    3a56:	8b a9       	ldd	r24, Y+51	; 0x33
    3a58:	9c a9       	ldd	r25, Y+52	; 0x34
    3a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a5e:	dc 01       	movw	r26, r24
    3a60:	cb 01       	movw	r24, r22
    3a62:	98 ab       	std	Y+48, r25	; 0x30
    3a64:	8f a7       	std	Y+47, r24	; 0x2f
    3a66:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a68:	98 a9       	ldd	r25, Y+48	; 0x30
    3a6a:	9c a7       	std	Y+44, r25	; 0x2c
    3a6c:	8b a7       	std	Y+43, r24	; 0x2b
    3a6e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a70:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a72:	01 97       	sbiw	r24, 0x01	; 1
    3a74:	f1 f7       	brne	.-4      	; 0x3a72 <STEP_MOTORu8StartHalfMode+0x206>
    3a76:	9c a7       	std	Y+44, r25	; 0x2c
    3a78:	8b a7       	std	Y+43, r24	; 0x2b

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				con1 = 0x01;
				con2 = 0x03;
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3a7a:	8b ad       	ldd	r24, Y+59	; 0x3b
    3a7c:	8f 5f       	subi	r24, 0xFF	; 255
    3a7e:	8b af       	std	Y+59, r24	; 0x3b
    3a80:	8b ad       	ldd	r24, Y+59	; 0x3b
    3a82:	89 30       	cpi	r24, 0x09	; 9
    3a84:	08 f4       	brcc	.+2      	; 0x3a88 <STEP_MOTORu8StartHalfMode+0x21c>
    3a86:	64 cf       	rjmp	.-312    	; 0x3950 <STEP_MOTORu8StartHalfMode+0xe4>
	if(STEP_LOWER_NIBBLE == Copy_pStep->Nibble)
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3a88:	de 01       	movw	r26, r28
    3a8a:	a0 5c       	subi	r26, 0xC0	; 192
    3a8c:	bf 4f       	sbci	r27, 0xFF	; 255
    3a8e:	fe 01       	movw	r30, r28
    3a90:	e0 5c       	subi	r30, 0xC0	; 192
    3a92:	ff 4f       	sbci	r31, 0xFF	; 255
    3a94:	80 81       	ld	r24, Z
    3a96:	91 81       	ldd	r25, Z+1	; 0x01
    3a98:	01 96       	adiw	r24, 0x01	; 1
    3a9a:	11 96       	adiw	r26, 0x01	; 1
    3a9c:	9c 93       	st	X, r25
    3a9e:	8e 93       	st	-X, r24
    3aa0:	fe 01       	movw	r30, r28
    3aa2:	e0 5c       	subi	r30, 0xC0	; 192
    3aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa6:	20 81       	ld	r18, Z
    3aa8:	31 81       	ldd	r19, Z+1	; 0x01
    3aaa:	8c ad       	ldd	r24, Y+60	; 0x3c
    3aac:	9d ad       	ldd	r25, Y+61	; 0x3d
    3aae:	28 17       	cp	r18, r24
    3ab0:	39 07       	cpc	r19, r25
    3ab2:	08 f4       	brcc	.+2      	; 0x3ab6 <STEP_MOTORu8StartHalfMode+0x24a>
    3ab4:	46 cf       	rjmp	.-372    	; 0x3942 <STEP_MOTORu8StartHalfMode+0xd6>
    3ab6:	82 c2       	rjmp	.+1284   	; 0x3fbc <STEP_MOTORu8StartHalfMode+0x750>
					}
					_delay_ms(2);
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
    3ab8:	fe 01       	movw	r30, r28
    3aba:	ed 5b       	subi	r30, 0xBD	; 189
    3abc:	ff 4f       	sbci	r31, 0xFF	; 255
    3abe:	01 90       	ld	r0, Z+
    3ac0:	f0 81       	ld	r31, Z
    3ac2:	e0 2d       	mov	r30, r0
    3ac4:	82 81       	ldd	r24, Z+2	; 0x02
    3ac6:	81 30       	cpi	r24, 0x01	; 1
    3ac8:	09 f0       	breq	.+2      	; 0x3acc <STEP_MOTORu8StartHalfMode+0x260>
    3aca:	78 c2       	rjmp	.+1264   	; 0x3fbc <STEP_MOTORu8StartHalfMode+0x750>
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3acc:	fe 01       	movw	r30, r28
    3ace:	e0 5c       	subi	r30, 0xC0	; 192
    3ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad2:	11 82       	std	Z+1, r1	; 0x01
    3ad4:	10 82       	st	Z, r1
    3ad6:	af c0       	rjmp	.+350    	; 0x3c36 <STEP_MOTORu8StartHalfMode+0x3ca>
			{
				con1 = 0x08;
    3ad8:	88 e0       	ldi	r24, 0x08	; 8
    3ada:	8a af       	std	Y+58, r24	; 0x3a
				con2 = 0x0c;
    3adc:	8c e0       	ldi	r24, 0x0C	; 12
    3ade:	89 af       	std	Y+57, r24	; 0x39
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3ae0:	81 e0       	ldi	r24, 0x01	; 1
    3ae2:	8b af       	std	Y+59, r24	; 0x3b
    3ae4:	98 c0       	rjmp	.+304    	; 0x3c16 <STEP_MOTORu8StartHalfMode+0x3aa>
				{

					if(Local_u8ItrateStep%2==1)
    3ae6:	8b ad       	ldd	r24, Y+59	; 0x3b
    3ae8:	88 2f       	mov	r24, r24
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	81 70       	andi	r24, 0x01	; 1
    3aee:	90 70       	andi	r25, 0x00	; 0
    3af0:	88 23       	and	r24, r24
    3af2:	71 f0       	breq	.+28     	; 0x3b10 <STEP_MOTORu8StartHalfMode+0x2a4>
					{
						DIO_u8SetLowNibbleValue(Copy_pStep->Port,con1);
    3af4:	fe 01       	movw	r30, r28
    3af6:	ed 5b       	subi	r30, 0xBD	; 189
    3af8:	ff 4f       	sbci	r31, 0xFF	; 255
    3afa:	01 90       	ld	r0, Z+
    3afc:	f0 81       	ld	r31, Z
    3afe:	e0 2d       	mov	r30, r0
    3b00:	80 81       	ld	r24, Z
    3b02:	6a ad       	ldd	r22, Y+58	; 0x3a
    3b04:	0e 94 be 12 	call	0x257c	; 0x257c <DIO_u8SetLowNibbleValue>
						con1>>=1;
    3b08:	8a ad       	ldd	r24, Y+58	; 0x3a
    3b0a:	86 95       	lsr	r24
    3b0c:	8a af       	std	Y+58, r24	; 0x3a
    3b0e:	0e c0       	rjmp	.+28     	; 0x3b2c <STEP_MOTORu8StartHalfMode+0x2c0>
					}
					else
					{
						DIO_u8SetLowNibbleValue(Copy_pStep->Port,con2);
    3b10:	fe 01       	movw	r30, r28
    3b12:	ed 5b       	subi	r30, 0xBD	; 189
    3b14:	ff 4f       	sbci	r31, 0xFF	; 255
    3b16:	01 90       	ld	r0, Z+
    3b18:	f0 81       	ld	r31, Z
    3b1a:	e0 2d       	mov	r30, r0
    3b1c:	80 81       	ld	r24, Z
    3b1e:	69 ad       	ldd	r22, Y+57	; 0x39
    3b20:	0e 94 be 12 	call	0x257c	; 0x257c <DIO_u8SetLowNibbleValue>
						con2 = RotateRightLowNibble(con2);
    3b24:	89 ad       	ldd	r24, Y+57	; 0x39
    3b26:	0e 94 0f 20 	call	0x401e	; 0x401e <RotateRightLowNibble>
    3b2a:	89 af       	std	Y+57, r24	; 0x39
    3b2c:	80 e0       	ldi	r24, 0x00	; 0
    3b2e:	90 e0       	ldi	r25, 0x00	; 0
    3b30:	a0 e0       	ldi	r26, 0x00	; 0
    3b32:	b0 e4       	ldi	r27, 0x40	; 64
    3b34:	8f a3       	std	Y+39, r24	; 0x27
    3b36:	98 a7       	std	Y+40, r25	; 0x28
    3b38:	a9 a7       	std	Y+41, r26	; 0x29
    3b3a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b3c:	6f a1       	ldd	r22, Y+39	; 0x27
    3b3e:	78 a5       	ldd	r23, Y+40	; 0x28
    3b40:	89 a5       	ldd	r24, Y+41	; 0x29
    3b42:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b44:	20 e0       	ldi	r18, 0x00	; 0
    3b46:	30 e0       	ldi	r19, 0x00	; 0
    3b48:	4a ef       	ldi	r20, 0xFA	; 250
    3b4a:	54 e4       	ldi	r21, 0x44	; 68
    3b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b50:	dc 01       	movw	r26, r24
    3b52:	cb 01       	movw	r24, r22
    3b54:	8b a3       	std	Y+35, r24	; 0x23
    3b56:	9c a3       	std	Y+36, r25	; 0x24
    3b58:	ad a3       	std	Y+37, r26	; 0x25
    3b5a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3b5c:	6b a1       	ldd	r22, Y+35	; 0x23
    3b5e:	7c a1       	ldd	r23, Y+36	; 0x24
    3b60:	8d a1       	ldd	r24, Y+37	; 0x25
    3b62:	9e a1       	ldd	r25, Y+38	; 0x26
    3b64:	20 e0       	ldi	r18, 0x00	; 0
    3b66:	30 e0       	ldi	r19, 0x00	; 0
    3b68:	40 e8       	ldi	r20, 0x80	; 128
    3b6a:	5f e3       	ldi	r21, 0x3F	; 63
    3b6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b70:	88 23       	and	r24, r24
    3b72:	2c f4       	brge	.+10     	; 0x3b7e <STEP_MOTORu8StartHalfMode+0x312>
		__ticks = 1;
    3b74:	81 e0       	ldi	r24, 0x01	; 1
    3b76:	90 e0       	ldi	r25, 0x00	; 0
    3b78:	9a a3       	std	Y+34, r25	; 0x22
    3b7a:	89 a3       	std	Y+33, r24	; 0x21
    3b7c:	3f c0       	rjmp	.+126    	; 0x3bfc <STEP_MOTORu8StartHalfMode+0x390>
	else if (__tmp > 65535)
    3b7e:	6b a1       	ldd	r22, Y+35	; 0x23
    3b80:	7c a1       	ldd	r23, Y+36	; 0x24
    3b82:	8d a1       	ldd	r24, Y+37	; 0x25
    3b84:	9e a1       	ldd	r25, Y+38	; 0x26
    3b86:	20 e0       	ldi	r18, 0x00	; 0
    3b88:	3f ef       	ldi	r19, 0xFF	; 255
    3b8a:	4f e7       	ldi	r20, 0x7F	; 127
    3b8c:	57 e4       	ldi	r21, 0x47	; 71
    3b8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b92:	18 16       	cp	r1, r24
    3b94:	4c f5       	brge	.+82     	; 0x3be8 <STEP_MOTORu8StartHalfMode+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b96:	6f a1       	ldd	r22, Y+39	; 0x27
    3b98:	78 a5       	ldd	r23, Y+40	; 0x28
    3b9a:	89 a5       	ldd	r24, Y+41	; 0x29
    3b9c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b9e:	20 e0       	ldi	r18, 0x00	; 0
    3ba0:	30 e0       	ldi	r19, 0x00	; 0
    3ba2:	40 e2       	ldi	r20, 0x20	; 32
    3ba4:	51 e4       	ldi	r21, 0x41	; 65
    3ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3baa:	dc 01       	movw	r26, r24
    3bac:	cb 01       	movw	r24, r22
    3bae:	bc 01       	movw	r22, r24
    3bb0:	cd 01       	movw	r24, r26
    3bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bb6:	dc 01       	movw	r26, r24
    3bb8:	cb 01       	movw	r24, r22
    3bba:	9a a3       	std	Y+34, r25	; 0x22
    3bbc:	89 a3       	std	Y+33, r24	; 0x21
    3bbe:	0f c0       	rjmp	.+30     	; 0x3bde <STEP_MOTORu8StartHalfMode+0x372>
    3bc0:	88 ec       	ldi	r24, 0xC8	; 200
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	98 a3       	std	Y+32, r25	; 0x20
    3bc6:	8f 8f       	std	Y+31, r24	; 0x1f
    3bc8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3bca:	98 a1       	ldd	r25, Y+32	; 0x20
    3bcc:	01 97       	sbiw	r24, 0x01	; 1
    3bce:	f1 f7       	brne	.-4      	; 0x3bcc <STEP_MOTORu8StartHalfMode+0x360>
    3bd0:	98 a3       	std	Y+32, r25	; 0x20
    3bd2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bd4:	89 a1       	ldd	r24, Y+33	; 0x21
    3bd6:	9a a1       	ldd	r25, Y+34	; 0x22
    3bd8:	01 97       	sbiw	r24, 0x01	; 1
    3bda:	9a a3       	std	Y+34, r25	; 0x22
    3bdc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bde:	89 a1       	ldd	r24, Y+33	; 0x21
    3be0:	9a a1       	ldd	r25, Y+34	; 0x22
    3be2:	00 97       	sbiw	r24, 0x00	; 0
    3be4:	69 f7       	brne	.-38     	; 0x3bc0 <STEP_MOTORu8StartHalfMode+0x354>
    3be6:	14 c0       	rjmp	.+40     	; 0x3c10 <STEP_MOTORu8StartHalfMode+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3be8:	6b a1       	ldd	r22, Y+35	; 0x23
    3bea:	7c a1       	ldd	r23, Y+36	; 0x24
    3bec:	8d a1       	ldd	r24, Y+37	; 0x25
    3bee:	9e a1       	ldd	r25, Y+38	; 0x26
    3bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bf4:	dc 01       	movw	r26, r24
    3bf6:	cb 01       	movw	r24, r22
    3bf8:	9a a3       	std	Y+34, r25	; 0x22
    3bfa:	89 a3       	std	Y+33, r24	; 0x21
    3bfc:	89 a1       	ldd	r24, Y+33	; 0x21
    3bfe:	9a a1       	ldd	r25, Y+34	; 0x22
    3c00:	9e 8f       	std	Y+30, r25	; 0x1e
    3c02:	8d 8f       	std	Y+29, r24	; 0x1d
    3c04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c06:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c08:	01 97       	sbiw	r24, 0x01	; 1
    3c0a:	f1 f7       	brne	.-4      	; 0x3c08 <STEP_MOTORu8StartHalfMode+0x39c>
    3c0c:	9e 8f       	std	Y+30, r25	; 0x1e
    3c0e:	8d 8f       	std	Y+29, r24	; 0x1d

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				con1 = 0x08;
				con2 = 0x0c;
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3c10:	8b ad       	ldd	r24, Y+59	; 0x3b
    3c12:	8f 5f       	subi	r24, 0xFF	; 255
    3c14:	8b af       	std	Y+59, r24	; 0x3b
    3c16:	8b ad       	ldd	r24, Y+59	; 0x3b
    3c18:	89 30       	cpi	r24, 0x09	; 9
    3c1a:	08 f4       	brcc	.+2      	; 0x3c1e <STEP_MOTORu8StartHalfMode+0x3b2>
    3c1c:	64 cf       	rjmp	.-312    	; 0x3ae6 <STEP_MOTORu8StartHalfMode+0x27a>
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3c1e:	de 01       	movw	r26, r28
    3c20:	a0 5c       	subi	r26, 0xC0	; 192
    3c22:	bf 4f       	sbci	r27, 0xFF	; 255
    3c24:	fe 01       	movw	r30, r28
    3c26:	e0 5c       	subi	r30, 0xC0	; 192
    3c28:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2a:	80 81       	ld	r24, Z
    3c2c:	91 81       	ldd	r25, Z+1	; 0x01
    3c2e:	01 96       	adiw	r24, 0x01	; 1
    3c30:	11 96       	adiw	r26, 0x01	; 1
    3c32:	9c 93       	st	X, r25
    3c34:	8e 93       	st	-X, r24
    3c36:	fe 01       	movw	r30, r28
    3c38:	e0 5c       	subi	r30, 0xC0	; 192
    3c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3c:	20 81       	ld	r18, Z
    3c3e:	31 81       	ldd	r19, Z+1	; 0x01
    3c40:	8c ad       	ldd	r24, Y+60	; 0x3c
    3c42:	9d ad       	ldd	r25, Y+61	; 0x3d
    3c44:	28 17       	cp	r18, r24
    3c46:	39 07       	cpc	r19, r25
    3c48:	08 f4       	brcc	.+2      	; 0x3c4c <STEP_MOTORu8StartHalfMode+0x3e0>
    3c4a:	46 cf       	rjmp	.-372    	; 0x3ad8 <STEP_MOTORu8StartHalfMode+0x26c>
    3c4c:	b7 c1       	rjmp	.+878    	; 0x3fbc <STEP_MOTORu8StartHalfMode+0x750>
				}
			}
		}

	}
	else if(STEP_UPPER_NIBBLE == Copy_pStep->Nibble)
    3c4e:	fe 01       	movw	r30, r28
    3c50:	ed 5b       	subi	r30, 0xBD	; 189
    3c52:	ff 4f       	sbci	r31, 0xFF	; 255
    3c54:	01 90       	ld	r0, Z+
    3c56:	f0 81       	ld	r31, Z
    3c58:	e0 2d       	mov	r30, r0
    3c5a:	81 81       	ldd	r24, Z+1	; 0x01
    3c5c:	81 30       	cpi	r24, 0x01	; 1
    3c5e:	09 f0       	breq	.+2      	; 0x3c62 <STEP_MOTORu8StartHalfMode+0x3f6>
    3c60:	a8 c1       	rjmp	.+848    	; 0x3fb2 <STEP_MOTORu8StartHalfMode+0x746>
	{

		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
    3c62:	fe 01       	movw	r30, r28
    3c64:	ed 5b       	subi	r30, 0xBD	; 189
    3c66:	ff 4f       	sbci	r31, 0xFF	; 255
    3c68:	01 90       	ld	r0, Z+
    3c6a:	f0 81       	ld	r31, Z
    3c6c:	e0 2d       	mov	r30, r0
    3c6e:	82 81       	ldd	r24, Z+2	; 0x02
    3c70:	88 23       	and	r24, r24
    3c72:	09 f0       	breq	.+2      	; 0x3c76 <STEP_MOTORu8StartHalfMode+0x40a>
    3c74:	cd c0       	rjmp	.+410    	; 0x3e10 <STEP_MOTORu8StartHalfMode+0x5a4>
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3c76:	fe 01       	movw	r30, r28
    3c78:	e0 5c       	subi	r30, 0xC0	; 192
    3c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7c:	11 82       	std	Z+1, r1	; 0x01
    3c7e:	10 82       	st	Z, r1
    3c80:	bb c0       	rjmp	.+374    	; 0x3df8 <STEP_MOTORu8StartHalfMode+0x58c>
			{
				con1 = 0x01;
    3c82:	81 e0       	ldi	r24, 0x01	; 1
    3c84:	8a af       	std	Y+58, r24	; 0x3a
				con2 = 0x03;
    3c86:	83 e0       	ldi	r24, 0x03	; 3
    3c88:	89 af       	std	Y+57, r24	; 0x39
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3c8a:	81 e0       	ldi	r24, 0x01	; 1
    3c8c:	8b af       	std	Y+59, r24	; 0x3b
    3c8e:	a4 c0       	rjmp	.+328    	; 0x3dd8 <STEP_MOTORu8StartHalfMode+0x56c>
				{

					if(Local_u8ItrateStep%2==1)
    3c90:	8b ad       	ldd	r24, Y+59	; 0x3b
    3c92:	88 2f       	mov	r24, r24
    3c94:	90 e0       	ldi	r25, 0x00	; 0
    3c96:	81 70       	andi	r24, 0x01	; 1
    3c98:	90 70       	andi	r25, 0x00	; 0
    3c9a:	88 23       	and	r24, r24
    3c9c:	71 f0       	breq	.+28     	; 0x3cba <STEP_MOTORu8StartHalfMode+0x44e>
					{
						DIO_u8SetHighNibbleValue(Copy_pStep->Port,con1);
    3c9e:	fe 01       	movw	r30, r28
    3ca0:	ed 5b       	subi	r30, 0xBD	; 189
    3ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca4:	01 90       	ld	r0, Z+
    3ca6:	f0 81       	ld	r31, Z
    3ca8:	e0 2d       	mov	r30, r0
    3caa:	80 81       	ld	r24, Z
    3cac:	6a ad       	ldd	r22, Y+58	; 0x3a
    3cae:	0e 94 39 13 	call	0x2672	; 0x2672 <DIO_u8SetHighNibbleValue>
						con1<<=1;
    3cb2:	8a ad       	ldd	r24, Y+58	; 0x3a
    3cb4:	88 0f       	add	r24, r24
    3cb6:	8a af       	std	Y+58, r24	; 0x3a
    3cb8:	1a c0       	rjmp	.+52     	; 0x3cee <STEP_MOTORu8StartHalfMode+0x482>
					}
					else
					{
						DIO_u8SetHighNibbleValue(Copy_pStep->Port,con2);
    3cba:	fe 01       	movw	r30, r28
    3cbc:	ed 5b       	subi	r30, 0xBD	; 189
    3cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc0:	01 90       	ld	r0, Z+
    3cc2:	f0 81       	ld	r31, Z
    3cc4:	e0 2d       	mov	r30, r0
    3cc6:	80 81       	ld	r24, Z
    3cc8:	69 ad       	ldd	r22, Y+57	; 0x39
    3cca:	0e 94 39 13 	call	0x2672	; 0x2672 <DIO_u8SetHighNibbleValue>
						CLCD_voidWriteNumber(con2);
    3cce:	89 ad       	ldd	r24, Y+57	; 0x39
    3cd0:	88 2f       	mov	r24, r24
    3cd2:	90 e0       	ldi	r25, 0x00	; 0
    3cd4:	a0 e0       	ldi	r26, 0x00	; 0
    3cd6:	b0 e0       	ldi	r27, 0x00	; 0
    3cd8:	bc 01       	movw	r22, r24
    3cda:	cd 01       	movw	r24, r26
    3cdc:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <CLCD_voidWriteNumber>
						CLCD_voidSendData(' ');
    3ce0:	80 e2       	ldi	r24, 0x20	; 32
    3ce2:	0e 94 41 0b 	call	0x1682	; 0x1682 <CLCD_voidSendData>
						con2 = RotateLeftLowNibble(con2);
    3ce6:	89 ad       	ldd	r24, Y+57	; 0x39
    3ce8:	0e 94 2c 20 	call	0x4058	; 0x4058 <RotateLeftLowNibble>
    3cec:	89 af       	std	Y+57, r24	; 0x39
    3cee:	80 e0       	ldi	r24, 0x00	; 0
    3cf0:	90 e0       	ldi	r25, 0x00	; 0
    3cf2:	a0 e0       	ldi	r26, 0x00	; 0
    3cf4:	b0 e4       	ldi	r27, 0x40	; 64
    3cf6:	89 8f       	std	Y+25, r24	; 0x19
    3cf8:	9a 8f       	std	Y+26, r25	; 0x1a
    3cfa:	ab 8f       	std	Y+27, r26	; 0x1b
    3cfc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cfe:	69 8d       	ldd	r22, Y+25	; 0x19
    3d00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d06:	20 e0       	ldi	r18, 0x00	; 0
    3d08:	30 e0       	ldi	r19, 0x00	; 0
    3d0a:	4a ef       	ldi	r20, 0xFA	; 250
    3d0c:	54 e4       	ldi	r21, 0x44	; 68
    3d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d12:	dc 01       	movw	r26, r24
    3d14:	cb 01       	movw	r24, r22
    3d16:	8d 8b       	std	Y+21, r24	; 0x15
    3d18:	9e 8b       	std	Y+22, r25	; 0x16
    3d1a:	af 8b       	std	Y+23, r26	; 0x17
    3d1c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d1e:	6d 89       	ldd	r22, Y+21	; 0x15
    3d20:	7e 89       	ldd	r23, Y+22	; 0x16
    3d22:	8f 89       	ldd	r24, Y+23	; 0x17
    3d24:	98 8d       	ldd	r25, Y+24	; 0x18
    3d26:	20 e0       	ldi	r18, 0x00	; 0
    3d28:	30 e0       	ldi	r19, 0x00	; 0
    3d2a:	40 e8       	ldi	r20, 0x80	; 128
    3d2c:	5f e3       	ldi	r21, 0x3F	; 63
    3d2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d32:	88 23       	and	r24, r24
    3d34:	2c f4       	brge	.+10     	; 0x3d40 <STEP_MOTORu8StartHalfMode+0x4d4>
		__ticks = 1;
    3d36:	81 e0       	ldi	r24, 0x01	; 1
    3d38:	90 e0       	ldi	r25, 0x00	; 0
    3d3a:	9c 8b       	std	Y+20, r25	; 0x14
    3d3c:	8b 8b       	std	Y+19, r24	; 0x13
    3d3e:	3f c0       	rjmp	.+126    	; 0x3dbe <STEP_MOTORu8StartHalfMode+0x552>
	else if (__tmp > 65535)
    3d40:	6d 89       	ldd	r22, Y+21	; 0x15
    3d42:	7e 89       	ldd	r23, Y+22	; 0x16
    3d44:	8f 89       	ldd	r24, Y+23	; 0x17
    3d46:	98 8d       	ldd	r25, Y+24	; 0x18
    3d48:	20 e0       	ldi	r18, 0x00	; 0
    3d4a:	3f ef       	ldi	r19, 0xFF	; 255
    3d4c:	4f e7       	ldi	r20, 0x7F	; 127
    3d4e:	57 e4       	ldi	r21, 0x47	; 71
    3d50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d54:	18 16       	cp	r1, r24
    3d56:	4c f5       	brge	.+82     	; 0x3daa <STEP_MOTORu8StartHalfMode+0x53e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d58:	69 8d       	ldd	r22, Y+25	; 0x19
    3d5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d60:	20 e0       	ldi	r18, 0x00	; 0
    3d62:	30 e0       	ldi	r19, 0x00	; 0
    3d64:	40 e2       	ldi	r20, 0x20	; 32
    3d66:	51 e4       	ldi	r21, 0x41	; 65
    3d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d6c:	dc 01       	movw	r26, r24
    3d6e:	cb 01       	movw	r24, r22
    3d70:	bc 01       	movw	r22, r24
    3d72:	cd 01       	movw	r24, r26
    3d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d78:	dc 01       	movw	r26, r24
    3d7a:	cb 01       	movw	r24, r22
    3d7c:	9c 8b       	std	Y+20, r25	; 0x14
    3d7e:	8b 8b       	std	Y+19, r24	; 0x13
    3d80:	0f c0       	rjmp	.+30     	; 0x3da0 <STEP_MOTORu8StartHalfMode+0x534>
    3d82:	88 ec       	ldi	r24, 0xC8	; 200
    3d84:	90 e0       	ldi	r25, 0x00	; 0
    3d86:	9a 8b       	std	Y+18, r25	; 0x12
    3d88:	89 8b       	std	Y+17, r24	; 0x11
    3d8a:	89 89       	ldd	r24, Y+17	; 0x11
    3d8c:	9a 89       	ldd	r25, Y+18	; 0x12
    3d8e:	01 97       	sbiw	r24, 0x01	; 1
    3d90:	f1 f7       	brne	.-4      	; 0x3d8e <STEP_MOTORu8StartHalfMode+0x522>
    3d92:	9a 8b       	std	Y+18, r25	; 0x12
    3d94:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d96:	8b 89       	ldd	r24, Y+19	; 0x13
    3d98:	9c 89       	ldd	r25, Y+20	; 0x14
    3d9a:	01 97       	sbiw	r24, 0x01	; 1
    3d9c:	9c 8b       	std	Y+20, r25	; 0x14
    3d9e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3da0:	8b 89       	ldd	r24, Y+19	; 0x13
    3da2:	9c 89       	ldd	r25, Y+20	; 0x14
    3da4:	00 97       	sbiw	r24, 0x00	; 0
    3da6:	69 f7       	brne	.-38     	; 0x3d82 <STEP_MOTORu8StartHalfMode+0x516>
    3da8:	14 c0       	rjmp	.+40     	; 0x3dd2 <STEP_MOTORu8StartHalfMode+0x566>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3daa:	6d 89       	ldd	r22, Y+21	; 0x15
    3dac:	7e 89       	ldd	r23, Y+22	; 0x16
    3dae:	8f 89       	ldd	r24, Y+23	; 0x17
    3db0:	98 8d       	ldd	r25, Y+24	; 0x18
    3db2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3db6:	dc 01       	movw	r26, r24
    3db8:	cb 01       	movw	r24, r22
    3dba:	9c 8b       	std	Y+20, r25	; 0x14
    3dbc:	8b 8b       	std	Y+19, r24	; 0x13
    3dbe:	8b 89       	ldd	r24, Y+19	; 0x13
    3dc0:	9c 89       	ldd	r25, Y+20	; 0x14
    3dc2:	98 8b       	std	Y+16, r25	; 0x10
    3dc4:	8f 87       	std	Y+15, r24	; 0x0f
    3dc6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dc8:	98 89       	ldd	r25, Y+16	; 0x10
    3dca:	01 97       	sbiw	r24, 0x01	; 1
    3dcc:	f1 f7       	brne	.-4      	; 0x3dca <STEP_MOTORu8StartHalfMode+0x55e>
    3dce:	98 8b       	std	Y+16, r25	; 0x10
    3dd0:	8f 87       	std	Y+15, r24	; 0x0f

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				con1 = 0x01;
				con2 = 0x03;
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3dd2:	8b ad       	ldd	r24, Y+59	; 0x3b
    3dd4:	8f 5f       	subi	r24, 0xFF	; 255
    3dd6:	8b af       	std	Y+59, r24	; 0x3b
    3dd8:	8b ad       	ldd	r24, Y+59	; 0x3b
    3dda:	89 30       	cpi	r24, 0x09	; 9
    3ddc:	08 f4       	brcc	.+2      	; 0x3de0 <STEP_MOTORu8StartHalfMode+0x574>
    3dde:	58 cf       	rjmp	.-336    	; 0x3c90 <STEP_MOTORu8StartHalfMode+0x424>
	{

		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3de0:	de 01       	movw	r26, r28
    3de2:	a0 5c       	subi	r26, 0xC0	; 192
    3de4:	bf 4f       	sbci	r27, 0xFF	; 255
    3de6:	fe 01       	movw	r30, r28
    3de8:	e0 5c       	subi	r30, 0xC0	; 192
    3dea:	ff 4f       	sbci	r31, 0xFF	; 255
    3dec:	80 81       	ld	r24, Z
    3dee:	91 81       	ldd	r25, Z+1	; 0x01
    3df0:	01 96       	adiw	r24, 0x01	; 1
    3df2:	11 96       	adiw	r26, 0x01	; 1
    3df4:	9c 93       	st	X, r25
    3df6:	8e 93       	st	-X, r24
    3df8:	fe 01       	movw	r30, r28
    3dfa:	e0 5c       	subi	r30, 0xC0	; 192
    3dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfe:	20 81       	ld	r18, Z
    3e00:	31 81       	ldd	r19, Z+1	; 0x01
    3e02:	8c ad       	ldd	r24, Y+60	; 0x3c
    3e04:	9d ad       	ldd	r25, Y+61	; 0x3d
    3e06:	28 17       	cp	r18, r24
    3e08:	39 07       	cpc	r19, r25
    3e0a:	08 f4       	brcc	.+2      	; 0x3e0e <STEP_MOTORu8StartHalfMode+0x5a2>
    3e0c:	3a cf       	rjmp	.-396    	; 0x3c82 <STEP_MOTORu8StartHalfMode+0x416>
    3e0e:	d6 c0       	rjmp	.+428    	; 0x3fbc <STEP_MOTORu8StartHalfMode+0x750>
					}
					_delay_ms(2);
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
    3e10:	fe 01       	movw	r30, r28
    3e12:	ed 5b       	subi	r30, 0xBD	; 189
    3e14:	ff 4f       	sbci	r31, 0xFF	; 255
    3e16:	01 90       	ld	r0, Z+
    3e18:	f0 81       	ld	r31, Z
    3e1a:	e0 2d       	mov	r30, r0
    3e1c:	82 81       	ldd	r24, Z+2	; 0x02
    3e1e:	81 30       	cpi	r24, 0x01	; 1
    3e20:	09 f0       	breq	.+2      	; 0x3e24 <STEP_MOTORu8StartHalfMode+0x5b8>
    3e22:	c1 c0       	rjmp	.+386    	; 0x3fa6 <STEP_MOTORu8StartHalfMode+0x73a>
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3e24:	fe 01       	movw	r30, r28
    3e26:	e0 5c       	subi	r30, 0xC0	; 192
    3e28:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2a:	11 82       	std	Z+1, r1	; 0x01
    3e2c:	10 82       	st	Z, r1
    3e2e:	af c0       	rjmp	.+350    	; 0x3f8e <STEP_MOTORu8StartHalfMode+0x722>
			{
				con1 = 0x08;
    3e30:	88 e0       	ldi	r24, 0x08	; 8
    3e32:	8a af       	std	Y+58, r24	; 0x3a
				con2 = 0x0c;
    3e34:	8c e0       	ldi	r24, 0x0C	; 12
    3e36:	89 af       	std	Y+57, r24	; 0x39
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3e38:	81 e0       	ldi	r24, 0x01	; 1
    3e3a:	8b af       	std	Y+59, r24	; 0x3b
    3e3c:	98 c0       	rjmp	.+304    	; 0x3f6e <STEP_MOTORu8StartHalfMode+0x702>
				{

					if(Local_u8ItrateStep%2==1)
    3e3e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3e40:	88 2f       	mov	r24, r24
    3e42:	90 e0       	ldi	r25, 0x00	; 0
    3e44:	81 70       	andi	r24, 0x01	; 1
    3e46:	90 70       	andi	r25, 0x00	; 0
    3e48:	88 23       	and	r24, r24
    3e4a:	71 f0       	breq	.+28     	; 0x3e68 <STEP_MOTORu8StartHalfMode+0x5fc>
					{
						DIO_u8SetHighNibbleValue(Copy_pStep->Port,con1);
    3e4c:	fe 01       	movw	r30, r28
    3e4e:	ed 5b       	subi	r30, 0xBD	; 189
    3e50:	ff 4f       	sbci	r31, 0xFF	; 255
    3e52:	01 90       	ld	r0, Z+
    3e54:	f0 81       	ld	r31, Z
    3e56:	e0 2d       	mov	r30, r0
    3e58:	80 81       	ld	r24, Z
    3e5a:	6a ad       	ldd	r22, Y+58	; 0x3a
    3e5c:	0e 94 39 13 	call	0x2672	; 0x2672 <DIO_u8SetHighNibbleValue>
						con1>>=1;
    3e60:	8a ad       	ldd	r24, Y+58	; 0x3a
    3e62:	86 95       	lsr	r24
    3e64:	8a af       	std	Y+58, r24	; 0x3a
    3e66:	0e c0       	rjmp	.+28     	; 0x3e84 <STEP_MOTORu8StartHalfMode+0x618>
					}
					else
					{
						DIO_u8SetHighNibbleValue(Copy_pStep->Port,con2);
    3e68:	fe 01       	movw	r30, r28
    3e6a:	ed 5b       	subi	r30, 0xBD	; 189
    3e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6e:	01 90       	ld	r0, Z+
    3e70:	f0 81       	ld	r31, Z
    3e72:	e0 2d       	mov	r30, r0
    3e74:	80 81       	ld	r24, Z
    3e76:	69 ad       	ldd	r22, Y+57	; 0x39
    3e78:	0e 94 39 13 	call	0x2672	; 0x2672 <DIO_u8SetHighNibbleValue>
						con2 = RotateRightLowNibble(con2);
    3e7c:	89 ad       	ldd	r24, Y+57	; 0x39
    3e7e:	0e 94 0f 20 	call	0x401e	; 0x401e <RotateRightLowNibble>
    3e82:	89 af       	std	Y+57, r24	; 0x39
    3e84:	80 e0       	ldi	r24, 0x00	; 0
    3e86:	90 e0       	ldi	r25, 0x00	; 0
    3e88:	a0 e0       	ldi	r26, 0x00	; 0
    3e8a:	b0 e4       	ldi	r27, 0x40	; 64
    3e8c:	8b 87       	std	Y+11, r24	; 0x0b
    3e8e:	9c 87       	std	Y+12, r25	; 0x0c
    3e90:	ad 87       	std	Y+13, r26	; 0x0d
    3e92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e94:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e96:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e98:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e9c:	20 e0       	ldi	r18, 0x00	; 0
    3e9e:	30 e0       	ldi	r19, 0x00	; 0
    3ea0:	4a ef       	ldi	r20, 0xFA	; 250
    3ea2:	54 e4       	ldi	r21, 0x44	; 68
    3ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ea8:	dc 01       	movw	r26, r24
    3eaa:	cb 01       	movw	r24, r22
    3eac:	8f 83       	std	Y+7, r24	; 0x07
    3eae:	98 87       	std	Y+8, r25	; 0x08
    3eb0:	a9 87       	std	Y+9, r26	; 0x09
    3eb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3eb4:	6f 81       	ldd	r22, Y+7	; 0x07
    3eb6:	78 85       	ldd	r23, Y+8	; 0x08
    3eb8:	89 85       	ldd	r24, Y+9	; 0x09
    3eba:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ebc:	20 e0       	ldi	r18, 0x00	; 0
    3ebe:	30 e0       	ldi	r19, 0x00	; 0
    3ec0:	40 e8       	ldi	r20, 0x80	; 128
    3ec2:	5f e3       	ldi	r21, 0x3F	; 63
    3ec4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ec8:	88 23       	and	r24, r24
    3eca:	2c f4       	brge	.+10     	; 0x3ed6 <STEP_MOTORu8StartHalfMode+0x66a>
		__ticks = 1;
    3ecc:	81 e0       	ldi	r24, 0x01	; 1
    3ece:	90 e0       	ldi	r25, 0x00	; 0
    3ed0:	9e 83       	std	Y+6, r25	; 0x06
    3ed2:	8d 83       	std	Y+5, r24	; 0x05
    3ed4:	3f c0       	rjmp	.+126    	; 0x3f54 <STEP_MOTORu8StartHalfMode+0x6e8>
	else if (__tmp > 65535)
    3ed6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ed8:	78 85       	ldd	r23, Y+8	; 0x08
    3eda:	89 85       	ldd	r24, Y+9	; 0x09
    3edc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ede:	20 e0       	ldi	r18, 0x00	; 0
    3ee0:	3f ef       	ldi	r19, 0xFF	; 255
    3ee2:	4f e7       	ldi	r20, 0x7F	; 127
    3ee4:	57 e4       	ldi	r21, 0x47	; 71
    3ee6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3eea:	18 16       	cp	r1, r24
    3eec:	4c f5       	brge	.+82     	; 0x3f40 <STEP_MOTORu8StartHalfMode+0x6d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3eee:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ef0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ef2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ef4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ef6:	20 e0       	ldi	r18, 0x00	; 0
    3ef8:	30 e0       	ldi	r19, 0x00	; 0
    3efa:	40 e2       	ldi	r20, 0x20	; 32
    3efc:	51 e4       	ldi	r21, 0x41	; 65
    3efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f02:	dc 01       	movw	r26, r24
    3f04:	cb 01       	movw	r24, r22
    3f06:	bc 01       	movw	r22, r24
    3f08:	cd 01       	movw	r24, r26
    3f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f0e:	dc 01       	movw	r26, r24
    3f10:	cb 01       	movw	r24, r22
    3f12:	9e 83       	std	Y+6, r25	; 0x06
    3f14:	8d 83       	std	Y+5, r24	; 0x05
    3f16:	0f c0       	rjmp	.+30     	; 0x3f36 <STEP_MOTORu8StartHalfMode+0x6ca>
    3f18:	88 ec       	ldi	r24, 0xC8	; 200
    3f1a:	90 e0       	ldi	r25, 0x00	; 0
    3f1c:	9c 83       	std	Y+4, r25	; 0x04
    3f1e:	8b 83       	std	Y+3, r24	; 0x03
    3f20:	8b 81       	ldd	r24, Y+3	; 0x03
    3f22:	9c 81       	ldd	r25, Y+4	; 0x04
    3f24:	01 97       	sbiw	r24, 0x01	; 1
    3f26:	f1 f7       	brne	.-4      	; 0x3f24 <STEP_MOTORu8StartHalfMode+0x6b8>
    3f28:	9c 83       	std	Y+4, r25	; 0x04
    3f2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f30:	01 97       	sbiw	r24, 0x01	; 1
    3f32:	9e 83       	std	Y+6, r25	; 0x06
    3f34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f36:	8d 81       	ldd	r24, Y+5	; 0x05
    3f38:	9e 81       	ldd	r25, Y+6	; 0x06
    3f3a:	00 97       	sbiw	r24, 0x00	; 0
    3f3c:	69 f7       	brne	.-38     	; 0x3f18 <STEP_MOTORu8StartHalfMode+0x6ac>
    3f3e:	14 c0       	rjmp	.+40     	; 0x3f68 <STEP_MOTORu8StartHalfMode+0x6fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f40:	6f 81       	ldd	r22, Y+7	; 0x07
    3f42:	78 85       	ldd	r23, Y+8	; 0x08
    3f44:	89 85       	ldd	r24, Y+9	; 0x09
    3f46:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f4c:	dc 01       	movw	r26, r24
    3f4e:	cb 01       	movw	r24, r22
    3f50:	9e 83       	std	Y+6, r25	; 0x06
    3f52:	8d 83       	std	Y+5, r24	; 0x05
    3f54:	8d 81       	ldd	r24, Y+5	; 0x05
    3f56:	9e 81       	ldd	r25, Y+6	; 0x06
    3f58:	9a 83       	std	Y+2, r25	; 0x02
    3f5a:	89 83       	std	Y+1, r24	; 0x01
    3f5c:	89 81       	ldd	r24, Y+1	; 0x01
    3f5e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f60:	01 97       	sbiw	r24, 0x01	; 1
    3f62:	f1 f7       	brne	.-4      	; 0x3f60 <STEP_MOTORu8StartHalfMode+0x6f4>
    3f64:	9a 83       	std	Y+2, r25	; 0x02
    3f66:	89 83       	std	Y+1, r24	; 0x01

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				con1 = 0x08;
				con2 = 0x0c;
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3f68:	8b ad       	ldd	r24, Y+59	; 0x3b
    3f6a:	8f 5f       	subi	r24, 0xFF	; 255
    3f6c:	8b af       	std	Y+59, r24	; 0x3b
    3f6e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3f70:	89 30       	cpi	r24, 0x09	; 9
    3f72:	08 f4       	brcc	.+2      	; 0x3f76 <STEP_MOTORu8StartHalfMode+0x70a>
    3f74:	64 cf       	rjmp	.-312    	; 0x3e3e <STEP_MOTORu8StartHalfMode+0x5d2>
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3f76:	de 01       	movw	r26, r28
    3f78:	a0 5c       	subi	r26, 0xC0	; 192
    3f7a:	bf 4f       	sbci	r27, 0xFF	; 255
    3f7c:	fe 01       	movw	r30, r28
    3f7e:	e0 5c       	subi	r30, 0xC0	; 192
    3f80:	ff 4f       	sbci	r31, 0xFF	; 255
    3f82:	80 81       	ld	r24, Z
    3f84:	91 81       	ldd	r25, Z+1	; 0x01
    3f86:	01 96       	adiw	r24, 0x01	; 1
    3f88:	11 96       	adiw	r26, 0x01	; 1
    3f8a:	9c 93       	st	X, r25
    3f8c:	8e 93       	st	-X, r24
    3f8e:	fe 01       	movw	r30, r28
    3f90:	e0 5c       	subi	r30, 0xC0	; 192
    3f92:	ff 4f       	sbci	r31, 0xFF	; 255
    3f94:	20 81       	ld	r18, Z
    3f96:	31 81       	ldd	r19, Z+1	; 0x01
    3f98:	8c ad       	ldd	r24, Y+60	; 0x3c
    3f9a:	9d ad       	ldd	r25, Y+61	; 0x3d
    3f9c:	28 17       	cp	r18, r24
    3f9e:	39 07       	cpc	r19, r25
    3fa0:	08 f4       	brcc	.+2      	; 0x3fa4 <STEP_MOTORu8StartHalfMode+0x738>
    3fa2:	46 cf       	rjmp	.-372    	; 0x3e30 <STEP_MOTORu8StartHalfMode+0x5c4>
    3fa4:	0b c0       	rjmp	.+22     	; 0x3fbc <STEP_MOTORu8StartHalfMode+0x750>
					_delay_ms(2);
				}
			}
		}
		else
			Local_u8ErrorState = NOTOK;
    3fa6:	fe 01       	movw	r30, r28
    3fa8:	ee 5b       	subi	r30, 0xBE	; 190
    3faa:	ff 4f       	sbci	r31, 0xFF	; 255
    3fac:	81 e0       	ldi	r24, 0x01	; 1
    3fae:	80 83       	st	Z, r24
    3fb0:	05 c0       	rjmp	.+10     	; 0x3fbc <STEP_MOTORu8StartHalfMode+0x750>
	}
	else
		Local_u8ErrorState = NOTOK;
    3fb2:	fe 01       	movw	r30, r28
    3fb4:	ee 5b       	subi	r30, 0xBE	; 190
    3fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb8:	81 e0       	ldi	r24, 0x01	; 1
    3fba:	80 83       	st	Z, r24
	return Local_u8ErrorState;
    3fbc:	fe 01       	movw	r30, r28
    3fbe:	ee 5b       	subi	r30, 0xBE	; 190
    3fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc2:	80 81       	ld	r24, Z
}
    3fc4:	cc 5b       	subi	r28, 0xBC	; 188
    3fc6:	df 4f       	sbci	r29, 0xFF	; 255
    3fc8:	0f b6       	in	r0, 0x3f	; 63
    3fca:	f8 94       	cli
    3fcc:	de bf       	out	0x3e, r29	; 62
    3fce:	0f be       	out	0x3f, r0	; 63
    3fd0:	cd bf       	out	0x3d, r28	; 61
    3fd2:	cf 91       	pop	r28
    3fd4:	df 91       	pop	r29
    3fd6:	08 95       	ret

00003fd8 <STEP_MOTORvStop>:

void STEP_MOTORvStop(STEP_t *Copy_pStep)
{
    3fd8:	df 93       	push	r29
    3fda:	cf 93       	push	r28
    3fdc:	00 d0       	rcall	.+0      	; 0x3fde <STEP_MOTORvStop+0x6>
    3fde:	cd b7       	in	r28, 0x3d	; 61
    3fe0:	de b7       	in	r29, 0x3e	; 62
    3fe2:	9a 83       	std	Y+2, r25	; 0x02
    3fe4:	89 83       	std	Y+1, r24	; 0x01
	if(STEP_LOWER_NIBBLE == Copy_pStep->Nibble)
    3fe6:	e9 81       	ldd	r30, Y+1	; 0x01
    3fe8:	fa 81       	ldd	r31, Y+2	; 0x02
    3fea:	81 81       	ldd	r24, Z+1	; 0x01
    3fec:	88 23       	and	r24, r24
    3fee:	39 f4       	brne	.+14     	; 0x3ffe <STEP_MOTORvStop+0x26>
	{
		DIO_u8SetLowNibbleValue(Copy_pStep->Port,0);
    3ff0:	e9 81       	ldd	r30, Y+1	; 0x01
    3ff2:	fa 81       	ldd	r31, Y+2	; 0x02
    3ff4:	80 81       	ld	r24, Z
    3ff6:	60 e0       	ldi	r22, 0x00	; 0
    3ff8:	0e 94 be 12 	call	0x257c	; 0x257c <DIO_u8SetLowNibbleValue>
    3ffc:	0b c0       	rjmp	.+22     	; 0x4014 <STEP_MOTORvStop+0x3c>
	}
	else if(STEP_UPPER_NIBBLE == Copy_pStep->Nibble)
    3ffe:	e9 81       	ldd	r30, Y+1	; 0x01
    4000:	fa 81       	ldd	r31, Y+2	; 0x02
    4002:	81 81       	ldd	r24, Z+1	; 0x01
    4004:	81 30       	cpi	r24, 0x01	; 1
    4006:	31 f4       	brne	.+12     	; 0x4014 <STEP_MOTORvStop+0x3c>
	{
		DIO_u8SetHighNibbleValue(Copy_pStep->Port,0);
    4008:	e9 81       	ldd	r30, Y+1	; 0x01
    400a:	fa 81       	ldd	r31, Y+2	; 0x02
    400c:	80 81       	ld	r24, Z
    400e:	60 e0       	ldi	r22, 0x00	; 0
    4010:	0e 94 39 13 	call	0x2672	; 0x2672 <DIO_u8SetHighNibbleValue>
	}
}
    4014:	0f 90       	pop	r0
    4016:	0f 90       	pop	r0
    4018:	cf 91       	pop	r28
    401a:	df 91       	pop	r29
    401c:	08 95       	ret

0000401e <RotateRightLowNibble>:


static u8 RotateRightLowNibble(u8 Val)
{
    401e:	df 93       	push	r29
    4020:	cf 93       	push	r28
    4022:	00 d0       	rcall	.+0      	; 0x4024 <RotateRightLowNibble+0x6>
    4024:	cd b7       	in	r28, 0x3d	; 61
    4026:	de b7       	in	r29, 0x3e	; 62
    4028:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_xVal = 0;
    402a:	19 82       	std	Y+1, r1	; 0x01
	Local_xVal = GET_BIT(Val,0);
    402c:	8a 81       	ldd	r24, Y+2	; 0x02
    402e:	81 70       	andi	r24, 0x01	; 1
    4030:	89 83       	std	Y+1, r24	; 0x01
	Val>>=1;
    4032:	8a 81       	ldd	r24, Y+2	; 0x02
    4034:	86 95       	lsr	r24
    4036:	8a 83       	std	Y+2, r24	; 0x02
	Local_xVal?SET_BIT(Val,3):CLR_BIT(Val,3);
    4038:	89 81       	ldd	r24, Y+1	; 0x01
    403a:	88 23       	and	r24, r24
    403c:	21 f0       	breq	.+8      	; 0x4046 <RotateRightLowNibble+0x28>
    403e:	8a 81       	ldd	r24, Y+2	; 0x02
    4040:	88 60       	ori	r24, 0x08	; 8
    4042:	8a 83       	std	Y+2, r24	; 0x02
    4044:	03 c0       	rjmp	.+6      	; 0x404c <RotateRightLowNibble+0x2e>
    4046:	8a 81       	ldd	r24, Y+2	; 0x02
    4048:	87 7f       	andi	r24, 0xF7	; 247
    404a:	8a 83       	std	Y+2, r24	; 0x02
	return Val;
    404c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    404e:	0f 90       	pop	r0
    4050:	0f 90       	pop	r0
    4052:	cf 91       	pop	r28
    4054:	df 91       	pop	r29
    4056:	08 95       	ret

00004058 <RotateLeftLowNibble>:

static u8 RotateLeftLowNibble(u8 Val)
{
    4058:	df 93       	push	r29
    405a:	cf 93       	push	r28
    405c:	00 d0       	rcall	.+0      	; 0x405e <RotateLeftLowNibble+0x6>
    405e:	cd b7       	in	r28, 0x3d	; 61
    4060:	de b7       	in	r29, 0x3e	; 62
    4062:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_xVal = 0;
    4064:	19 82       	std	Y+1, r1	; 0x01
	Local_xVal = GET_BIT(Val,3);
    4066:	8a 81       	ldd	r24, Y+2	; 0x02
    4068:	86 95       	lsr	r24
    406a:	86 95       	lsr	r24
    406c:	86 95       	lsr	r24
    406e:	81 70       	andi	r24, 0x01	; 1
    4070:	89 83       	std	Y+1, r24	; 0x01
	Val<<=1;
    4072:	8a 81       	ldd	r24, Y+2	; 0x02
    4074:	88 0f       	add	r24, r24
    4076:	8a 83       	std	Y+2, r24	; 0x02
	Local_xVal?SET_BIT(Val,0):CLR_BIT(Val,0);
    4078:	89 81       	ldd	r24, Y+1	; 0x01
    407a:	88 23       	and	r24, r24
    407c:	21 f0       	breq	.+8      	; 0x4086 <RotateLeftLowNibble+0x2e>
    407e:	8a 81       	ldd	r24, Y+2	; 0x02
    4080:	81 60       	ori	r24, 0x01	; 1
    4082:	8a 83       	std	Y+2, r24	; 0x02
    4084:	03 c0       	rjmp	.+6      	; 0x408c <RotateLeftLowNibble+0x34>
    4086:	8a 81       	ldd	r24, Y+2	; 0x02
    4088:	8e 7f       	andi	r24, 0xFE	; 254
    408a:	8a 83       	std	Y+2, r24	; 0x02
	return Val;
    408c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    408e:	0f 90       	pop	r0
    4090:	0f 90       	pop	r0
    4092:	cf 91       	pop	r28
    4094:	df 91       	pop	r29
    4096:	08 95       	ret

00004098 <SW_u8GetState>:
 * 			Copy_SW     : Full with Port,Pin,SelfType,switch function
 * 			Copy_u8State: return State of switch as (0) Pressed , (1) Not pressed
 * use for: Get Switch by delay debouncing of switch as (0) Pressed , (1) Not pressed
 *  */
u8 SW_u8GetState(SW_t* Copy_SW,u8 *Copy_u8State)
{
    4098:	df 93       	push	r29
    409a:	cf 93       	push	r28
    409c:	cd b7       	in	r28, 0x3d	; 61
    409e:	de b7       	in	r29, 0x3e	; 62
    40a0:	a1 97       	sbiw	r28, 0x21	; 33
    40a2:	0f b6       	in	r0, 0x3f	; 63
    40a4:	f8 94       	cli
    40a6:	de bf       	out	0x3e, r29	; 62
    40a8:	0f be       	out	0x3f, r0	; 63
    40aa:	cd bf       	out	0x3d, r28	; 61
    40ac:	9f 8f       	std	Y+31, r25	; 0x1f
    40ae:	8e 8f       	std	Y+30, r24	; 0x1e
    40b0:	79 a3       	std	Y+33, r23	; 0x21
    40b2:	68 a3       	std	Y+32, r22	; 0x20
	u8 Local_u8ErrorState = OK;
    40b4:	1d 8e       	std	Y+29, r1	; 0x1d
	//static u8 pressed_conf_level = 0;
	//static u8 released_conf_level = 0;
	//static u8 pressed = 0;
	//static u8 pressed2 = 0;
	*Copy_u8State = SW_NOT_PRESSED;
    40b6:	e8 a1       	ldd	r30, Y+32	; 0x20
    40b8:	f9 a1       	ldd	r31, Y+33	; 0x21
    40ba:	81 e0       	ldi	r24, 0x01	; 1
    40bc:	80 83       	st	Z, r24
	static u8 Local_u8SwState;
	if(Copy_SW->Pulltype == SW_PULL_UP)
    40be:	ee 8d       	ldd	r30, Y+30	; 0x1e
    40c0:	ff 8d       	ldd	r31, Y+31	; 0x1f
    40c2:	82 81       	ldd	r24, Z+2	; 0x02
    40c4:	88 23       	and	r24, r24
    40c6:	09 f0       	breq	.+2      	; 0x40ca <SW_u8GetState+0x32>
    40c8:	c3 c0       	rjmp	.+390    	; 0x4250 <SW_u8GetState+0x1b8>
	{
		if(Copy_SW->SelfLockType == SW_SELF_LOCK)
    40ca:	ee 8d       	ldd	r30, Y+30	; 0x1e
    40cc:	ff 8d       	ldd	r31, Y+31	; 0x1f
    40ce:	83 81       	ldd	r24, Z+3	; 0x03
    40d0:	81 30       	cpi	r24, 0x01	; 1
    40d2:	09 f0       	breq	.+2      	; 0x40d6 <SW_u8GetState+0x3e>
    40d4:	9c c0       	rjmp	.+312    	; 0x420e <SW_u8GetState+0x176>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    40d6:	ee 8d       	ldd	r30, Y+30	; 0x1e
    40d8:	ff 8d       	ldd	r31, Y+31	; 0x1f
    40da:	80 81       	ld	r24, Z
    40dc:	ee 8d       	ldd	r30, Y+30	; 0x1e
    40de:	ff 8d       	ldd	r31, Y+31	; 0x1f
    40e0:	91 81       	ldd	r25, Z+1	; 0x01
    40e2:	20 ec       	ldi	r18, 0xC0	; 192
    40e4:	31 e0       	ldi	r19, 0x01	; 1
    40e6:	69 2f       	mov	r22, r25
    40e8:	a9 01       	movw	r20, r18
    40ea:	0e 94 98 11 	call	0x2330	; 0x2330 <DIO_u8GetPinValue>
			if(Local_u8SwState == DIO_PIN_LOW)
    40ee:	80 91 c0 01 	lds	r24, 0x01C0
    40f2:	88 23       	and	r24, r24
    40f4:	09 f0       	breq	.+2      	; 0x40f8 <SW_u8GetState+0x60>
    40f6:	6d c1       	rjmp	.+730    	; 0x43d2 <SW_u8GetState+0x33a>
    40f8:	80 e0       	ldi	r24, 0x00	; 0
    40fa:	90 e0       	ldi	r25, 0x00	; 0
    40fc:	a6 e1       	ldi	r26, 0x16	; 22
    40fe:	b3 e4       	ldi	r27, 0x43	; 67
    4100:	89 8f       	std	Y+25, r24	; 0x19
    4102:	9a 8f       	std	Y+26, r25	; 0x1a
    4104:	ab 8f       	std	Y+27, r26	; 0x1b
    4106:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4108:	69 8d       	ldd	r22, Y+25	; 0x19
    410a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    410c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    410e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4110:	20 e0       	ldi	r18, 0x00	; 0
    4112:	30 e0       	ldi	r19, 0x00	; 0
    4114:	4a ef       	ldi	r20, 0xFA	; 250
    4116:	54 e4       	ldi	r21, 0x44	; 68
    4118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    411c:	dc 01       	movw	r26, r24
    411e:	cb 01       	movw	r24, r22
    4120:	8d 8b       	std	Y+21, r24	; 0x15
    4122:	9e 8b       	std	Y+22, r25	; 0x16
    4124:	af 8b       	std	Y+23, r26	; 0x17
    4126:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4128:	6d 89       	ldd	r22, Y+21	; 0x15
    412a:	7e 89       	ldd	r23, Y+22	; 0x16
    412c:	8f 89       	ldd	r24, Y+23	; 0x17
    412e:	98 8d       	ldd	r25, Y+24	; 0x18
    4130:	20 e0       	ldi	r18, 0x00	; 0
    4132:	30 e0       	ldi	r19, 0x00	; 0
    4134:	40 e8       	ldi	r20, 0x80	; 128
    4136:	5f e3       	ldi	r21, 0x3F	; 63
    4138:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    413c:	88 23       	and	r24, r24
    413e:	2c f4       	brge	.+10     	; 0x414a <SW_u8GetState+0xb2>
		__ticks = 1;
    4140:	81 e0       	ldi	r24, 0x01	; 1
    4142:	90 e0       	ldi	r25, 0x00	; 0
    4144:	9c 8b       	std	Y+20, r25	; 0x14
    4146:	8b 8b       	std	Y+19, r24	; 0x13
    4148:	3f c0       	rjmp	.+126    	; 0x41c8 <SW_u8GetState+0x130>
	else if (__tmp > 65535)
    414a:	6d 89       	ldd	r22, Y+21	; 0x15
    414c:	7e 89       	ldd	r23, Y+22	; 0x16
    414e:	8f 89       	ldd	r24, Y+23	; 0x17
    4150:	98 8d       	ldd	r25, Y+24	; 0x18
    4152:	20 e0       	ldi	r18, 0x00	; 0
    4154:	3f ef       	ldi	r19, 0xFF	; 255
    4156:	4f e7       	ldi	r20, 0x7F	; 127
    4158:	57 e4       	ldi	r21, 0x47	; 71
    415a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    415e:	18 16       	cp	r1, r24
    4160:	4c f5       	brge	.+82     	; 0x41b4 <SW_u8GetState+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4162:	69 8d       	ldd	r22, Y+25	; 0x19
    4164:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4166:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4168:	9c 8d       	ldd	r25, Y+28	; 0x1c
    416a:	20 e0       	ldi	r18, 0x00	; 0
    416c:	30 e0       	ldi	r19, 0x00	; 0
    416e:	40 e2       	ldi	r20, 0x20	; 32
    4170:	51 e4       	ldi	r21, 0x41	; 65
    4172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4176:	dc 01       	movw	r26, r24
    4178:	cb 01       	movw	r24, r22
    417a:	bc 01       	movw	r22, r24
    417c:	cd 01       	movw	r24, r26
    417e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4182:	dc 01       	movw	r26, r24
    4184:	cb 01       	movw	r24, r22
    4186:	9c 8b       	std	Y+20, r25	; 0x14
    4188:	8b 8b       	std	Y+19, r24	; 0x13
    418a:	0f c0       	rjmp	.+30     	; 0x41aa <SW_u8GetState+0x112>
    418c:	88 ec       	ldi	r24, 0xC8	; 200
    418e:	90 e0       	ldi	r25, 0x00	; 0
    4190:	9a 8b       	std	Y+18, r25	; 0x12
    4192:	89 8b       	std	Y+17, r24	; 0x11
    4194:	89 89       	ldd	r24, Y+17	; 0x11
    4196:	9a 89       	ldd	r25, Y+18	; 0x12
    4198:	01 97       	sbiw	r24, 0x01	; 1
    419a:	f1 f7       	brne	.-4      	; 0x4198 <SW_u8GetState+0x100>
    419c:	9a 8b       	std	Y+18, r25	; 0x12
    419e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41a0:	8b 89       	ldd	r24, Y+19	; 0x13
    41a2:	9c 89       	ldd	r25, Y+20	; 0x14
    41a4:	01 97       	sbiw	r24, 0x01	; 1
    41a6:	9c 8b       	std	Y+20, r25	; 0x14
    41a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41aa:	8b 89       	ldd	r24, Y+19	; 0x13
    41ac:	9c 89       	ldd	r25, Y+20	; 0x14
    41ae:	00 97       	sbiw	r24, 0x00	; 0
    41b0:	69 f7       	brne	.-38     	; 0x418c <SW_u8GetState+0xf4>
    41b2:	14 c0       	rjmp	.+40     	; 0x41dc <SW_u8GetState+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41b4:	6d 89       	ldd	r22, Y+21	; 0x15
    41b6:	7e 89       	ldd	r23, Y+22	; 0x16
    41b8:	8f 89       	ldd	r24, Y+23	; 0x17
    41ba:	98 8d       	ldd	r25, Y+24	; 0x18
    41bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41c0:	dc 01       	movw	r26, r24
    41c2:	cb 01       	movw	r24, r22
    41c4:	9c 8b       	std	Y+20, r25	; 0x14
    41c6:	8b 8b       	std	Y+19, r24	; 0x13
    41c8:	8b 89       	ldd	r24, Y+19	; 0x13
    41ca:	9c 89       	ldd	r25, Y+20	; 0x14
    41cc:	98 8b       	std	Y+16, r25	; 0x10
    41ce:	8f 87       	std	Y+15, r24	; 0x0f
    41d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    41d2:	98 89       	ldd	r25, Y+16	; 0x10
    41d4:	01 97       	sbiw	r24, 0x01	; 1
    41d6:	f1 f7       	brne	.-4      	; 0x41d4 <SW_u8GetState+0x13c>
    41d8:	98 8b       	std	Y+16, r25	; 0x10
    41da:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(150);
				DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    41dc:	ee 8d       	ldd	r30, Y+30	; 0x1e
    41de:	ff 8d       	ldd	r31, Y+31	; 0x1f
    41e0:	80 81       	ld	r24, Z
    41e2:	ee 8d       	ldd	r30, Y+30	; 0x1e
    41e4:	ff 8d       	ldd	r31, Y+31	; 0x1f
    41e6:	91 81       	ldd	r25, Z+1	; 0x01
    41e8:	20 ec       	ldi	r18, 0xC0	; 192
    41ea:	31 e0       	ldi	r19, 0x01	; 1
    41ec:	69 2f       	mov	r22, r25
    41ee:	a9 01       	movw	r20, r18
    41f0:	0e 94 98 11 	call	0x2330	; 0x2330 <DIO_u8GetPinValue>
				if(Local_u8SwState == DIO_PIN_LOW )
    41f4:	80 91 c0 01 	lds	r24, 0x01C0
    41f8:	88 23       	and	r24, r24
    41fa:	21 f4       	brne	.+8      	; 0x4204 <SW_u8GetState+0x16c>
				{
					*Copy_u8State = SW_PRESSED;
    41fc:	e8 a1       	ldd	r30, Y+32	; 0x20
    41fe:	f9 a1       	ldd	r31, Y+33	; 0x21
    4200:	10 82       	st	Z, r1
    4202:	e7 c0       	rjmp	.+462    	; 0x43d2 <SW_u8GetState+0x33a>
				}
				else
				{
					*Copy_u8State = SW_NOT_PRESSED;
    4204:	e8 a1       	ldd	r30, Y+32	; 0x20
    4206:	f9 a1       	ldd	r31, Y+33	; 0x21
    4208:	81 e0       	ldi	r24, 0x01	; 1
    420a:	80 83       	st	Z, r24
    420c:	e2 c0       	rjmp	.+452    	; 0x43d2 <SW_u8GetState+0x33a>
				}
			}
		}
		else if(Copy_SW->SelfLockType == SW_NOT_SELF_LOCK)
    420e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    4210:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4212:	83 81       	ldd	r24, Z+3	; 0x03
    4214:	88 23       	and	r24, r24
    4216:	c9 f4       	brne	.+50     	; 0x424a <SW_u8GetState+0x1b2>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,Copy_u8State);
    4218:	ee 8d       	ldd	r30, Y+30	; 0x1e
    421a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    421c:	80 81       	ld	r24, Z
    421e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    4220:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4222:	91 81       	ldd	r25, Z+1	; 0x01
    4224:	28 a1       	ldd	r18, Y+32	; 0x20
    4226:	39 a1       	ldd	r19, Y+33	; 0x21
    4228:	69 2f       	mov	r22, r25
    422a:	a9 01       	movw	r20, r18
    422c:	0e 94 98 11 	call	0x2330	; 0x2330 <DIO_u8GetPinValue>
			if (Local_u8SwState == DIO_PIN_LOW)
    4230:	80 91 c0 01 	lds	r24, 0x01C0
    4234:	88 23       	and	r24, r24
    4236:	21 f4       	brne	.+8      	; 0x4240 <SW_u8GetState+0x1a8>
				*Copy_u8State = SW_PRESSED;
    4238:	e8 a1       	ldd	r30, Y+32	; 0x20
    423a:	f9 a1       	ldd	r31, Y+33	; 0x21
    423c:	10 82       	st	Z, r1
    423e:	c9 c0       	rjmp	.+402    	; 0x43d2 <SW_u8GetState+0x33a>
			else
				*Copy_u8State = SW_NOT_PRESSED;
    4240:	e8 a1       	ldd	r30, Y+32	; 0x20
    4242:	f9 a1       	ldd	r31, Y+33	; 0x21
    4244:	81 e0       	ldi	r24, 0x01	; 1
    4246:	80 83       	st	Z, r24
    4248:	c4 c0       	rjmp	.+392    	; 0x43d2 <SW_u8GetState+0x33a>
		}
		else
			Local_u8ErrorState = NOTOK;
    424a:	81 e0       	ldi	r24, 0x01	; 1
    424c:	8d 8f       	std	Y+29, r24	; 0x1d
    424e:	c1 c0       	rjmp	.+386    	; 0x43d2 <SW_u8GetState+0x33a>
	}
	else if(Copy_SW->Pulltype == SW_PULL_DOWN)
    4250:	ee 8d       	ldd	r30, Y+30	; 0x1e
    4252:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4254:	82 81       	ldd	r24, Z+2	; 0x02
    4256:	81 30       	cpi	r24, 0x01	; 1
    4258:	09 f0       	breq	.+2      	; 0x425c <SW_u8GetState+0x1c4>
    425a:	b9 c0       	rjmp	.+370    	; 0x43ce <SW_u8GetState+0x336>
	{

		if(Copy_SW->SelfLockType == SW_SELF_LOCK)
    425c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    425e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4260:	83 81       	ldd	r24, Z+3	; 0x03
    4262:	81 30       	cpi	r24, 0x01	; 1
    4264:	09 f0       	breq	.+2      	; 0x4268 <SW_u8GetState+0x1d0>
    4266:	97 c0       	rjmp	.+302    	; 0x4396 <SW_u8GetState+0x2fe>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    4268:	ee 8d       	ldd	r30, Y+30	; 0x1e
    426a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    426c:	80 81       	ld	r24, Z
    426e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    4270:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4272:	91 81       	ldd	r25, Z+1	; 0x01
    4274:	20 ec       	ldi	r18, 0xC0	; 192
    4276:	31 e0       	ldi	r19, 0x01	; 1
    4278:	69 2f       	mov	r22, r25
    427a:	a9 01       	movw	r20, r18
    427c:	0e 94 98 11 	call	0x2330	; 0x2330 <DIO_u8GetPinValue>
			if(Local_u8SwState == DIO_PIN_HIGH)
    4280:	80 91 c0 01 	lds	r24, 0x01C0
    4284:	81 30       	cpi	r24, 0x01	; 1
    4286:	09 f0       	breq	.+2      	; 0x428a <SW_u8GetState+0x1f2>
    4288:	a4 c0       	rjmp	.+328    	; 0x43d2 <SW_u8GetState+0x33a>
    428a:	80 e0       	ldi	r24, 0x00	; 0
    428c:	90 e0       	ldi	r25, 0x00	; 0
    428e:	a6 e1       	ldi	r26, 0x16	; 22
    4290:	b3 e4       	ldi	r27, 0x43	; 67
    4292:	8b 87       	std	Y+11, r24	; 0x0b
    4294:	9c 87       	std	Y+12, r25	; 0x0c
    4296:	ad 87       	std	Y+13, r26	; 0x0d
    4298:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    429a:	6b 85       	ldd	r22, Y+11	; 0x0b
    429c:	7c 85       	ldd	r23, Y+12	; 0x0c
    429e:	8d 85       	ldd	r24, Y+13	; 0x0d
    42a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    42a2:	20 e0       	ldi	r18, 0x00	; 0
    42a4:	30 e0       	ldi	r19, 0x00	; 0
    42a6:	4a ef       	ldi	r20, 0xFA	; 250
    42a8:	54 e4       	ldi	r21, 0x44	; 68
    42aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42ae:	dc 01       	movw	r26, r24
    42b0:	cb 01       	movw	r24, r22
    42b2:	8f 83       	std	Y+7, r24	; 0x07
    42b4:	98 87       	std	Y+8, r25	; 0x08
    42b6:	a9 87       	std	Y+9, r26	; 0x09
    42b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    42ba:	6f 81       	ldd	r22, Y+7	; 0x07
    42bc:	78 85       	ldd	r23, Y+8	; 0x08
    42be:	89 85       	ldd	r24, Y+9	; 0x09
    42c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    42c2:	20 e0       	ldi	r18, 0x00	; 0
    42c4:	30 e0       	ldi	r19, 0x00	; 0
    42c6:	40 e8       	ldi	r20, 0x80	; 128
    42c8:	5f e3       	ldi	r21, 0x3F	; 63
    42ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42ce:	88 23       	and	r24, r24
    42d0:	2c f4       	brge	.+10     	; 0x42dc <SW_u8GetState+0x244>
		__ticks = 1;
    42d2:	81 e0       	ldi	r24, 0x01	; 1
    42d4:	90 e0       	ldi	r25, 0x00	; 0
    42d6:	9e 83       	std	Y+6, r25	; 0x06
    42d8:	8d 83       	std	Y+5, r24	; 0x05
    42da:	3f c0       	rjmp	.+126    	; 0x435a <SW_u8GetState+0x2c2>
	else if (__tmp > 65535)
    42dc:	6f 81       	ldd	r22, Y+7	; 0x07
    42de:	78 85       	ldd	r23, Y+8	; 0x08
    42e0:	89 85       	ldd	r24, Y+9	; 0x09
    42e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    42e4:	20 e0       	ldi	r18, 0x00	; 0
    42e6:	3f ef       	ldi	r19, 0xFF	; 255
    42e8:	4f e7       	ldi	r20, 0x7F	; 127
    42ea:	57 e4       	ldi	r21, 0x47	; 71
    42ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42f0:	18 16       	cp	r1, r24
    42f2:	4c f5       	brge	.+82     	; 0x4346 <SW_u8GetState+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    42f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    42f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    42fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    42fc:	20 e0       	ldi	r18, 0x00	; 0
    42fe:	30 e0       	ldi	r19, 0x00	; 0
    4300:	40 e2       	ldi	r20, 0x20	; 32
    4302:	51 e4       	ldi	r21, 0x41	; 65
    4304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4308:	dc 01       	movw	r26, r24
    430a:	cb 01       	movw	r24, r22
    430c:	bc 01       	movw	r22, r24
    430e:	cd 01       	movw	r24, r26
    4310:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4314:	dc 01       	movw	r26, r24
    4316:	cb 01       	movw	r24, r22
    4318:	9e 83       	std	Y+6, r25	; 0x06
    431a:	8d 83       	std	Y+5, r24	; 0x05
    431c:	0f c0       	rjmp	.+30     	; 0x433c <SW_u8GetState+0x2a4>
    431e:	88 ec       	ldi	r24, 0xC8	; 200
    4320:	90 e0       	ldi	r25, 0x00	; 0
    4322:	9c 83       	std	Y+4, r25	; 0x04
    4324:	8b 83       	std	Y+3, r24	; 0x03
    4326:	8b 81       	ldd	r24, Y+3	; 0x03
    4328:	9c 81       	ldd	r25, Y+4	; 0x04
    432a:	01 97       	sbiw	r24, 0x01	; 1
    432c:	f1 f7       	brne	.-4      	; 0x432a <SW_u8GetState+0x292>
    432e:	9c 83       	std	Y+4, r25	; 0x04
    4330:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4332:	8d 81       	ldd	r24, Y+5	; 0x05
    4334:	9e 81       	ldd	r25, Y+6	; 0x06
    4336:	01 97       	sbiw	r24, 0x01	; 1
    4338:	9e 83       	std	Y+6, r25	; 0x06
    433a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    433c:	8d 81       	ldd	r24, Y+5	; 0x05
    433e:	9e 81       	ldd	r25, Y+6	; 0x06
    4340:	00 97       	sbiw	r24, 0x00	; 0
    4342:	69 f7       	brne	.-38     	; 0x431e <SW_u8GetState+0x286>
    4344:	14 c0       	rjmp	.+40     	; 0x436e <SW_u8GetState+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4346:	6f 81       	ldd	r22, Y+7	; 0x07
    4348:	78 85       	ldd	r23, Y+8	; 0x08
    434a:	89 85       	ldd	r24, Y+9	; 0x09
    434c:	9a 85       	ldd	r25, Y+10	; 0x0a
    434e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4352:	dc 01       	movw	r26, r24
    4354:	cb 01       	movw	r24, r22
    4356:	9e 83       	std	Y+6, r25	; 0x06
    4358:	8d 83       	std	Y+5, r24	; 0x05
    435a:	8d 81       	ldd	r24, Y+5	; 0x05
    435c:	9e 81       	ldd	r25, Y+6	; 0x06
    435e:	9a 83       	std	Y+2, r25	; 0x02
    4360:	89 83       	std	Y+1, r24	; 0x01
    4362:	89 81       	ldd	r24, Y+1	; 0x01
    4364:	9a 81       	ldd	r25, Y+2	; 0x02
    4366:	01 97       	sbiw	r24, 0x01	; 1
    4368:	f1 f7       	brne	.-4      	; 0x4366 <SW_u8GetState+0x2ce>
    436a:	9a 83       	std	Y+2, r25	; 0x02
    436c:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(150);
				DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    436e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    4370:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4372:	80 81       	ld	r24, Z
    4374:	ee 8d       	ldd	r30, Y+30	; 0x1e
    4376:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4378:	91 81       	ldd	r25, Z+1	; 0x01
    437a:	20 ec       	ldi	r18, 0xC0	; 192
    437c:	31 e0       	ldi	r19, 0x01	; 1
    437e:	69 2f       	mov	r22, r25
    4380:	a9 01       	movw	r20, r18
    4382:	0e 94 98 11 	call	0x2330	; 0x2330 <DIO_u8GetPinValue>
				if(Local_u8SwState == DIO_PIN_HIGH )
    4386:	80 91 c0 01 	lds	r24, 0x01C0
    438a:	81 30       	cpi	r24, 0x01	; 1
    438c:	11 f5       	brne	.+68     	; 0x43d2 <SW_u8GetState+0x33a>
				{
					*Copy_u8State = SW_PRESSED;
    438e:	e8 a1       	ldd	r30, Y+32	; 0x20
    4390:	f9 a1       	ldd	r31, Y+33	; 0x21
    4392:	10 82       	st	Z, r1
    4394:	1e c0       	rjmp	.+60     	; 0x43d2 <SW_u8GetState+0x33a>
				}
			}
		}
		else if(Copy_SW->SelfLockType == SW_NOT_SELF_LOCK)
    4396:	ee 8d       	ldd	r30, Y+30	; 0x1e
    4398:	ff 8d       	ldd	r31, Y+31	; 0x1f
    439a:	83 81       	ldd	r24, Z+3	; 0x03
    439c:	88 23       	and	r24, r24
    439e:	a1 f4       	brne	.+40     	; 0x43c8 <SW_u8GetState+0x330>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,Copy_u8State);
    43a0:	ee 8d       	ldd	r30, Y+30	; 0x1e
    43a2:	ff 8d       	ldd	r31, Y+31	; 0x1f
    43a4:	80 81       	ld	r24, Z
    43a6:	ee 8d       	ldd	r30, Y+30	; 0x1e
    43a8:	ff 8d       	ldd	r31, Y+31	; 0x1f
    43aa:	91 81       	ldd	r25, Z+1	; 0x01
    43ac:	28 a1       	ldd	r18, Y+32	; 0x20
    43ae:	39 a1       	ldd	r19, Y+33	; 0x21
    43b0:	69 2f       	mov	r22, r25
    43b2:	a9 01       	movw	r20, r18
    43b4:	0e 94 98 11 	call	0x2330	; 0x2330 <DIO_u8GetPinValue>
			if (Local_u8SwState == DIO_PIN_HIGH)
    43b8:	80 91 c0 01 	lds	r24, 0x01C0
    43bc:	81 30       	cpi	r24, 0x01	; 1
    43be:	49 f4       	brne	.+18     	; 0x43d2 <SW_u8GetState+0x33a>
				*Copy_u8State = SW_PRESSED;
    43c0:	e8 a1       	ldd	r30, Y+32	; 0x20
    43c2:	f9 a1       	ldd	r31, Y+33	; 0x21
    43c4:	10 82       	st	Z, r1
    43c6:	05 c0       	rjmp	.+10     	; 0x43d2 <SW_u8GetState+0x33a>
		}
		else
			Local_u8ErrorState = NOTOK;
    43c8:	81 e0       	ldi	r24, 0x01	; 1
    43ca:	8d 8f       	std	Y+29, r24	; 0x1d
    43cc:	02 c0       	rjmp	.+4      	; 0x43d2 <SW_u8GetState+0x33a>
	}
	else
		Local_u8ErrorState = NOTOK;
    43ce:	81 e0       	ldi	r24, 0x01	; 1
    43d0:	8d 8f       	std	Y+29, r24	; 0x1d

	return Local_u8ErrorState;
    43d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    43d4:	a1 96       	adiw	r28, 0x21	; 33
    43d6:	0f b6       	in	r0, 0x3f	; 63
    43d8:	f8 94       	cli
    43da:	de bf       	out	0x3e, r29	; 62
    43dc:	0f be       	out	0x3f, r0	; 63
    43de:	cd bf       	out	0x3d, r28	; 61
    43e0:	cf 91       	pop	r28
    43e2:	df 91       	pop	r29
    43e4:	08 95       	ret

000043e6 <SW_u8GetState2>:
 * 			Copy_SW     : Full with Port,Pin,SelfType,switch function
 * 			Copy_u8State: return State of switch as (0) Pressed , (1) Not pressed
 * use for: Get Switch by Function Call Back i.e (switch function )
 *  */
u8 SW_u8GetState2(SW_t* Copy_SW,u8 *Copy_u8State)
{
    43e6:	df 93       	push	r29
    43e8:	cf 93       	push	r28
    43ea:	00 d0       	rcall	.+0      	; 0x43ec <SW_u8GetState2+0x6>
    43ec:	00 d0       	rcall	.+0      	; 0x43ee <SW_u8GetState2+0x8>
    43ee:	0f 92       	push	r0
    43f0:	cd b7       	in	r28, 0x3d	; 61
    43f2:	de b7       	in	r29, 0x3e	; 62
    43f4:	9b 83       	std	Y+3, r25	; 0x03
    43f6:	8a 83       	std	Y+2, r24	; 0x02
    43f8:	7d 83       	std	Y+5, r23	; 0x05
    43fa:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK;
    43fc:	19 82       	std	Y+1, r1	; 0x01
	static u8 pressed_conf_level = 0;
	static u8 released_conf_level = 0;
	static u8 pressed = 0;
	*Copy_u8State = SW_NOT_PRESSED;
    43fe:	ec 81       	ldd	r30, Y+4	; 0x04
    4400:	fd 81       	ldd	r31, Y+5	; 0x05
    4402:	81 e0       	ldi	r24, 0x01	; 1
    4404:	80 83       	st	Z, r24
	static u8 Local_u8SwState;
	if(Copy_SW->Pulltype == SW_PULL_UP)
    4406:	ea 81       	ldd	r30, Y+2	; 0x02
    4408:	fb 81       	ldd	r31, Y+3	; 0x03
    440a:	82 81       	ldd	r24, Z+2	; 0x02
    440c:	88 23       	and	r24, r24
    440e:	09 f0       	breq	.+2      	; 0x4412 <SW_u8GetState2+0x2c>
    4410:	76 c0       	rjmp	.+236    	; 0x44fe <SW_u8GetState2+0x118>
	{
		pressed = 0;
    4412:	10 92 c2 01 	sts	0x01C2, r1
		if(Copy_SW->SelfLockType == SW_SELF_LOCK)
    4416:	ea 81       	ldd	r30, Y+2	; 0x02
    4418:	fb 81       	ldd	r31, Y+3	; 0x03
    441a:	83 81       	ldd	r24, Z+3	; 0x03
    441c:	81 30       	cpi	r24, 0x01	; 1
    441e:	09 f0       	breq	.+2      	; 0x4422 <SW_u8GetState2+0x3c>
    4420:	4d c0       	rjmp	.+154    	; 0x44bc <SW_u8GetState2+0xd6>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    4422:	ea 81       	ldd	r30, Y+2	; 0x02
    4424:	fb 81       	ldd	r31, Y+3	; 0x03
    4426:	80 81       	ld	r24, Z
    4428:	ea 81       	ldd	r30, Y+2	; 0x02
    442a:	fb 81       	ldd	r31, Y+3	; 0x03
    442c:	91 81       	ldd	r25, Z+1	; 0x01
    442e:	21 ec       	ldi	r18, 0xC1	; 193
    4430:	31 e0       	ldi	r19, 0x01	; 1
    4432:	69 2f       	mov	r22, r25
    4434:	a9 01       	movw	r20, r18
    4436:	0e 94 98 11 	call	0x2330	; 0x2330 <DIO_u8GetPinValue>
			if(Local_u8SwState == DIO_PIN_LOW)
    443a:	80 91 c1 01 	lds	r24, 0x01C1
    443e:	88 23       	and	r24, r24
    4440:	09 f0       	breq	.+2      	; 0x4444 <SW_u8GetState2+0x5e>
    4442:	c4 c0       	rjmp	.+392    	; 0x45cc <SW_u8GetState2+0x1e6>
			{
				DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    4444:	ea 81       	ldd	r30, Y+2	; 0x02
    4446:	fb 81       	ldd	r31, Y+3	; 0x03
    4448:	80 81       	ld	r24, Z
    444a:	ea 81       	ldd	r30, Y+2	; 0x02
    444c:	fb 81       	ldd	r31, Y+3	; 0x03
    444e:	91 81       	ldd	r25, Z+1	; 0x01
    4450:	21 ec       	ldi	r18, 0xC1	; 193
    4452:	31 e0       	ldi	r19, 0x01	; 1
    4454:	69 2f       	mov	r22, r25
    4456:	a9 01       	movw	r20, r18
    4458:	0e 94 98 11 	call	0x2330	; 0x2330 <DIO_u8GetPinValue>
				if(Local_u8SwState == DIO_PIN_LOW)
    445c:	80 91 c1 01 	lds	r24, 0x01C1
    4460:	88 23       	and	r24, r24
    4462:	09 f0       	breq	.+2      	; 0x4466 <SW_u8GetState2+0x80>
    4464:	b3 c0       	rjmp	.+358    	; 0x45cc <SW_u8GetState2+0x1e6>
				{
					pressed_conf_level++;
    4466:	80 91 c4 01 	lds	r24, 0x01C4
    446a:	8f 5f       	subi	r24, 0xFF	; 255
    446c:	80 93 c4 01 	sts	0x01C4, r24
					if(pressed_conf_level>20)
    4470:	80 91 c4 01 	lds	r24, 0x01C4
    4474:	85 31       	cpi	r24, 0x15	; 21
    4476:	98 f0       	brcs	.+38     	; 0x449e <SW_u8GetState2+0xb8>
					{
						if(pressed==0)
    4478:	80 91 c2 01 	lds	r24, 0x01C2
    447c:	88 23       	and	r24, r24
    447e:	61 f4       	brne	.+24     	; 0x4498 <SW_u8GetState2+0xb2>
						{
							*Copy_u8State = SW_PRESSED;
    4480:	ec 81       	ldd	r30, Y+4	; 0x04
    4482:	fd 81       	ldd	r31, Y+5	; 0x05
    4484:	10 82       	st	Z, r1
							Copy_SW->Notification();
    4486:	ea 81       	ldd	r30, Y+2	; 0x02
    4488:	fb 81       	ldd	r31, Y+3	; 0x03
    448a:	04 80       	ldd	r0, Z+4	; 0x04
    448c:	f5 81       	ldd	r31, Z+5	; 0x05
    448e:	e0 2d       	mov	r30, r0
    4490:	09 95       	icall
							pressed=1;
    4492:	81 e0       	ldi	r24, 0x01	; 1
    4494:	80 93 c2 01 	sts	0x01C2, r24
						}
						pressed_conf_level=0;
    4498:	10 92 c4 01 	sts	0x01C4, r1
    449c:	97 c0       	rjmp	.+302    	; 0x45cc <SW_u8GetState2+0x1e6>
					}
					else
					{
						released_conf_level++;
    449e:	80 91 c3 01 	lds	r24, 0x01C3
    44a2:	8f 5f       	subi	r24, 0xFF	; 255
    44a4:	80 93 c3 01 	sts	0x01C3, r24
						if(released_conf_level>20)
    44a8:	80 91 c3 01 	lds	r24, 0x01C3
    44ac:	85 31       	cpi	r24, 0x15	; 21
    44ae:	08 f4       	brcc	.+2      	; 0x44b2 <SW_u8GetState2+0xcc>
    44b0:	8d c0       	rjmp	.+282    	; 0x45cc <SW_u8GetState2+0x1e6>
						{
							pressed = 0;
    44b2:	10 92 c2 01 	sts	0x01C2, r1
							released_conf_level = 0;
    44b6:	10 92 c3 01 	sts	0x01C3, r1
    44ba:	88 c0       	rjmp	.+272    	; 0x45cc <SW_u8GetState2+0x1e6>
						}
					}
				}
			}
		}
		else if(Copy_SW->SelfLockType == SW_NOT_SELF_LOCK)
    44bc:	ea 81       	ldd	r30, Y+2	; 0x02
    44be:	fb 81       	ldd	r31, Y+3	; 0x03
    44c0:	83 81       	ldd	r24, Z+3	; 0x03
    44c2:	88 23       	and	r24, r24
    44c4:	c9 f4       	brne	.+50     	; 0x44f8 <SW_u8GetState2+0x112>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,Copy_u8State);
    44c6:	ea 81       	ldd	r30, Y+2	; 0x02
    44c8:	fb 81       	ldd	r31, Y+3	; 0x03
    44ca:	80 81       	ld	r24, Z
    44cc:	ea 81       	ldd	r30, Y+2	; 0x02
    44ce:	fb 81       	ldd	r31, Y+3	; 0x03
    44d0:	91 81       	ldd	r25, Z+1	; 0x01
    44d2:	2c 81       	ldd	r18, Y+4	; 0x04
    44d4:	3d 81       	ldd	r19, Y+5	; 0x05
    44d6:	69 2f       	mov	r22, r25
    44d8:	a9 01       	movw	r20, r18
    44da:	0e 94 98 11 	call	0x2330	; 0x2330 <DIO_u8GetPinValue>
			if (Local_u8SwState == DIO_PIN_LOW)
    44de:	80 91 c1 01 	lds	r24, 0x01C1
    44e2:	88 23       	and	r24, r24
    44e4:	21 f4       	brne	.+8      	; 0x44ee <SW_u8GetState2+0x108>
				*Copy_u8State = SW_PRESSED;
    44e6:	ec 81       	ldd	r30, Y+4	; 0x04
    44e8:	fd 81       	ldd	r31, Y+5	; 0x05
    44ea:	10 82       	st	Z, r1
    44ec:	6f c0       	rjmp	.+222    	; 0x45cc <SW_u8GetState2+0x1e6>
			else
				*Copy_u8State = SW_NOT_PRESSED;
    44ee:	ec 81       	ldd	r30, Y+4	; 0x04
    44f0:	fd 81       	ldd	r31, Y+5	; 0x05
    44f2:	81 e0       	ldi	r24, 0x01	; 1
    44f4:	80 83       	st	Z, r24
    44f6:	6a c0       	rjmp	.+212    	; 0x45cc <SW_u8GetState2+0x1e6>
		}
		else
			Local_u8ErrorState = NOTOK;
    44f8:	81 e0       	ldi	r24, 0x01	; 1
    44fa:	89 83       	std	Y+1, r24	; 0x01
    44fc:	67 c0       	rjmp	.+206    	; 0x45cc <SW_u8GetState2+0x1e6>
	}
	else if(Copy_SW->Pulltype == SW_PULL_DOWN)
    44fe:	ea 81       	ldd	r30, Y+2	; 0x02
    4500:	fb 81       	ldd	r31, Y+3	; 0x03
    4502:	82 81       	ldd	r24, Z+2	; 0x02
    4504:	81 30       	cpi	r24, 0x01	; 1
    4506:	09 f0       	breq	.+2      	; 0x450a <SW_u8GetState2+0x124>
    4508:	5f c0       	rjmp	.+190    	; 0x45c8 <SW_u8GetState2+0x1e2>
	{
		pressed = 1;
    450a:	81 e0       	ldi	r24, 0x01	; 1
    450c:	80 93 c2 01 	sts	0x01C2, r24
		if(Copy_SW->SelfLockType == SW_SELF_LOCK)
    4510:	ea 81       	ldd	r30, Y+2	; 0x02
    4512:	fb 81       	ldd	r31, Y+3	; 0x03
    4514:	83 81       	ldd	r24, Z+3	; 0x03
    4516:	81 30       	cpi	r24, 0x01	; 1
    4518:	d9 f5       	brne	.+118    	; 0x4590 <SW_u8GetState2+0x1aa>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    451a:	ea 81       	ldd	r30, Y+2	; 0x02
    451c:	fb 81       	ldd	r31, Y+3	; 0x03
    451e:	80 81       	ld	r24, Z
    4520:	ea 81       	ldd	r30, Y+2	; 0x02
    4522:	fb 81       	ldd	r31, Y+3	; 0x03
    4524:	91 81       	ldd	r25, Z+1	; 0x01
    4526:	21 ec       	ldi	r18, 0xC1	; 193
    4528:	31 e0       	ldi	r19, 0x01	; 1
    452a:	69 2f       	mov	r22, r25
    452c:	a9 01       	movw	r20, r18
    452e:	0e 94 98 11 	call	0x2330	; 0x2330 <DIO_u8GetPinValue>
			if(Local_u8SwState == DIO_PIN_HIGH)
    4532:	80 91 c1 01 	lds	r24, 0x01C1
    4536:	81 30       	cpi	r24, 0x01	; 1
    4538:	09 f0       	breq	.+2      	; 0x453c <SW_u8GetState2+0x156>
    453a:	48 c0       	rjmp	.+144    	; 0x45cc <SW_u8GetState2+0x1e6>
			{
				pressed_conf_level++;
    453c:	80 91 c4 01 	lds	r24, 0x01C4
    4540:	8f 5f       	subi	r24, 0xFF	; 255
    4542:	80 93 c4 01 	sts	0x01C4, r24
				if(pressed_conf_level>20)
    4546:	80 91 c4 01 	lds	r24, 0x01C4
    454a:	85 31       	cpi	r24, 0x15	; 21
    454c:	90 f0       	brcs	.+36     	; 0x4572 <SW_u8GetState2+0x18c>
				{
					if(pressed==1)
    454e:	80 91 c2 01 	lds	r24, 0x01C2
    4552:	81 30       	cpi	r24, 0x01	; 1
    4554:	59 f4       	brne	.+22     	; 0x456c <SW_u8GetState2+0x186>
					{
						*Copy_u8State = SW_PRESSED;
    4556:	ec 81       	ldd	r30, Y+4	; 0x04
    4558:	fd 81       	ldd	r31, Y+5	; 0x05
    455a:	10 82       	st	Z, r1
						Copy_SW->Notification();
    455c:	ea 81       	ldd	r30, Y+2	; 0x02
    455e:	fb 81       	ldd	r31, Y+3	; 0x03
    4560:	04 80       	ldd	r0, Z+4	; 0x04
    4562:	f5 81       	ldd	r31, Z+5	; 0x05
    4564:	e0 2d       	mov	r30, r0
    4566:	09 95       	icall
						pressed=0;
    4568:	10 92 c2 01 	sts	0x01C2, r1
					}
					pressed_conf_level=0;
    456c:	10 92 c4 01 	sts	0x01C4, r1
    4570:	2d c0       	rjmp	.+90     	; 0x45cc <SW_u8GetState2+0x1e6>
				}
				else
				{
					released_conf_level++;
    4572:	80 91 c3 01 	lds	r24, 0x01C3
    4576:	8f 5f       	subi	r24, 0xFF	; 255
    4578:	80 93 c3 01 	sts	0x01C3, r24
					if(released_conf_level>20)
    457c:	80 91 c3 01 	lds	r24, 0x01C3
    4580:	85 31       	cpi	r24, 0x15	; 21
    4582:	20 f1       	brcs	.+72     	; 0x45cc <SW_u8GetState2+0x1e6>
					{
						pressed = 1;
    4584:	81 e0       	ldi	r24, 0x01	; 1
    4586:	80 93 c2 01 	sts	0x01C2, r24
						released_conf_level = 0;
    458a:	10 92 c3 01 	sts	0x01C3, r1
    458e:	1e c0       	rjmp	.+60     	; 0x45cc <SW_u8GetState2+0x1e6>
					}
				}
			}
		}
		else if(Copy_SW->SelfLockType == SW_NOT_SELF_LOCK)
    4590:	ea 81       	ldd	r30, Y+2	; 0x02
    4592:	fb 81       	ldd	r31, Y+3	; 0x03
    4594:	83 81       	ldd	r24, Z+3	; 0x03
    4596:	88 23       	and	r24, r24
    4598:	a1 f4       	brne	.+40     	; 0x45c2 <SW_u8GetState2+0x1dc>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,Copy_u8State);
    459a:	ea 81       	ldd	r30, Y+2	; 0x02
    459c:	fb 81       	ldd	r31, Y+3	; 0x03
    459e:	80 81       	ld	r24, Z
    45a0:	ea 81       	ldd	r30, Y+2	; 0x02
    45a2:	fb 81       	ldd	r31, Y+3	; 0x03
    45a4:	91 81       	ldd	r25, Z+1	; 0x01
    45a6:	2c 81       	ldd	r18, Y+4	; 0x04
    45a8:	3d 81       	ldd	r19, Y+5	; 0x05
    45aa:	69 2f       	mov	r22, r25
    45ac:	a9 01       	movw	r20, r18
    45ae:	0e 94 98 11 	call	0x2330	; 0x2330 <DIO_u8GetPinValue>
			if (Local_u8SwState == DIO_PIN_HIGH)
    45b2:	80 91 c1 01 	lds	r24, 0x01C1
    45b6:	81 30       	cpi	r24, 0x01	; 1
    45b8:	49 f4       	brne	.+18     	; 0x45cc <SW_u8GetState2+0x1e6>
				*Copy_u8State = SW_PRESSED;
    45ba:	ec 81       	ldd	r30, Y+4	; 0x04
    45bc:	fd 81       	ldd	r31, Y+5	; 0x05
    45be:	10 82       	st	Z, r1
    45c0:	05 c0       	rjmp	.+10     	; 0x45cc <SW_u8GetState2+0x1e6>
		}
		else
			Local_u8ErrorState = NOTOK;
    45c2:	81 e0       	ldi	r24, 0x01	; 1
    45c4:	89 83       	std	Y+1, r24	; 0x01
    45c6:	02 c0       	rjmp	.+4      	; 0x45cc <SW_u8GetState2+0x1e6>
	}
	else
		Local_u8ErrorState = NOTOK;
    45c8:	81 e0       	ldi	r24, 0x01	; 1
    45ca:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    45cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    45ce:	0f 90       	pop	r0
    45d0:	0f 90       	pop	r0
    45d2:	0f 90       	pop	r0
    45d4:	0f 90       	pop	r0
    45d6:	0f 90       	pop	r0
    45d8:	cf 91       	pop	r28
    45da:	df 91       	pop	r29
    45dc:	08 95       	ret

000045de <TIMER_voidInit>:
static u8 TIMER_u8Direction = TIMER1_SCHEDULER;

static u8 Global_u8Preiodic = 0;

void TIMER_voidInit(Timer_t* Copy_Timer)
{
    45de:	df 93       	push	r29
    45e0:	cf 93       	push	r28
    45e2:	cd b7       	in	r28, 0x3d	; 61
    45e4:	de b7       	in	r29, 0x3e	; 62
    45e6:	62 97       	sbiw	r28, 0x12	; 18
    45e8:	0f b6       	in	r0, 0x3f	; 63
    45ea:	f8 94       	cli
    45ec:	de bf       	out	0x3e, r29	; 62
    45ee:	0f be       	out	0x3f, r0	; 63
    45f0:	cd bf       	out	0x3d, r28	; 61
    45f2:	9a 83       	std	Y+2, r25	; 0x02
    45f4:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_Timer->TimerNum)
    45f6:	e9 81       	ldd	r30, Y+1	; 0x01
    45f8:	fa 81       	ldd	r31, Y+2	; 0x02
    45fa:	80 81       	ld	r24, Z
    45fc:	28 2f       	mov	r18, r24
    45fe:	30 e0       	ldi	r19, 0x00	; 0
    4600:	3a 8b       	std	Y+18, r19	; 0x12
    4602:	29 8b       	std	Y+17, r18	; 0x11
    4604:	89 89       	ldd	r24, Y+17	; 0x11
    4606:	9a 89       	ldd	r25, Y+18	; 0x12
    4608:	81 30       	cpi	r24, 0x01	; 1
    460a:	91 05       	cpc	r25, r1
    460c:	09 f4       	brne	.+2      	; 0x4610 <TIMER_voidInit+0x32>
    460e:	c1 c0       	rjmp	.+386    	; 0x4792 <TIMER_voidInit+0x1b4>
    4610:	29 89       	ldd	r18, Y+17	; 0x11
    4612:	3a 89       	ldd	r19, Y+18	; 0x12
    4614:	22 30       	cpi	r18, 0x02	; 2
    4616:	31 05       	cpc	r19, r1
    4618:	09 f4       	brne	.+2      	; 0x461c <TIMER_voidInit+0x3e>
    461a:	3f c1       	rjmp	.+638    	; 0x489a <TIMER_voidInit+0x2bc>
    461c:	89 89       	ldd	r24, Y+17	; 0x11
    461e:	9a 89       	ldd	r25, Y+18	; 0x12
    4620:	00 97       	sbiw	r24, 0x00	; 0
    4622:	09 f0       	breq	.+2      	; 0x4626 <TIMER_voidInit+0x48>
    4624:	ef c1       	rjmp	.+990    	; 0x4a04 <TIMER_voidInit+0x426>
	{
		case TIMER0:
		switch(Copy_Timer->TimerMode)
    4626:	e9 81       	ldd	r30, Y+1	; 0x01
    4628:	fa 81       	ldd	r31, Y+2	; 0x02
    462a:	81 81       	ldd	r24, Z+1	; 0x01
    462c:	28 2f       	mov	r18, r24
    462e:	30 e0       	ldi	r19, 0x00	; 0
    4630:	38 8b       	std	Y+16, r19	; 0x10
    4632:	2f 87       	std	Y+15, r18	; 0x0f
    4634:	8f 85       	ldd	r24, Y+15	; 0x0f
    4636:	98 89       	ldd	r25, Y+16	; 0x10
    4638:	81 30       	cpi	r24, 0x01	; 1
    463a:	91 05       	cpc	r25, r1
    463c:	09 f4       	brne	.+2      	; 0x4640 <TIMER_voidInit+0x62>
    463e:	4a c0       	rjmp	.+148    	; 0x46d4 <TIMER_voidInit+0xf6>
    4640:	2f 85       	ldd	r18, Y+15	; 0x0f
    4642:	38 89       	ldd	r19, Y+16	; 0x10
    4644:	22 30       	cpi	r18, 0x02	; 2
    4646:	31 05       	cpc	r19, r1
    4648:	2c f4       	brge	.+10     	; 0x4654 <TIMER_voidInit+0x76>
    464a:	8f 85       	ldd	r24, Y+15	; 0x0f
    464c:	98 89       	ldd	r25, Y+16	; 0x10
    464e:	00 97       	sbiw	r24, 0x00	; 0
    4650:	69 f0       	breq	.+26     	; 0x466c <TIMER_voidInit+0x8e>
    4652:	73 c0       	rjmp	.+230    	; 0x473a <TIMER_voidInit+0x15c>
    4654:	2f 85       	ldd	r18, Y+15	; 0x0f
    4656:	38 89       	ldd	r19, Y+16	; 0x10
    4658:	22 30       	cpi	r18, 0x02	; 2
    465a:	31 05       	cpc	r19, r1
    465c:	09 f4       	brne	.+2      	; 0x4660 <TIMER_voidInit+0x82>
    465e:	5f c0       	rjmp	.+190    	; 0x471e <TIMER_voidInit+0x140>
    4660:	8f 85       	ldd	r24, Y+15	; 0x0f
    4662:	98 89       	ldd	r25, Y+16	; 0x10
    4664:	83 30       	cpi	r24, 0x03	; 3
    4666:	91 05       	cpc	r25, r1
    4668:	31 f1       	breq	.+76     	; 0x46b6 <TIMER_voidInit+0xd8>
    466a:	67 c0       	rjmp	.+206    	; 0x473a <TIMER_voidInit+0x15c>
		{
		case TIMER0_NORMAL:CLR_BIT(TCCR0,TCCR0_WGM01);CLR_BIT(TCCR0,TCCR0_WGM00);
    466c:	a3 e5       	ldi	r26, 0x53	; 83
    466e:	b0 e0       	ldi	r27, 0x00	; 0
    4670:	e3 e5       	ldi	r30, 0x53	; 83
    4672:	f0 e0       	ldi	r31, 0x00	; 0
    4674:	80 81       	ld	r24, Z
    4676:	87 7f       	andi	r24, 0xF7	; 247
    4678:	8c 93       	st	X, r24
    467a:	a3 e5       	ldi	r26, 0x53	; 83
    467c:	b0 e0       	ldi	r27, 0x00	; 0
    467e:	e3 e5       	ldi	r30, 0x53	; 83
    4680:	f0 e0       	ldi	r31, 0x00	; 0
    4682:	80 81       	ld	r24, Z
    4684:	8f 7b       	andi	r24, 0xBF	; 191
    4686:	8c 93       	st	X, r24
		Copy_Timer->IntEnable?SET_BIT(TIMSK,TIMSK_TOIE0):CLR_BIT(TIMSK,TIMSK_TOIE0);
    4688:	e9 81       	ldd	r30, Y+1	; 0x01
    468a:	fa 81       	ldd	r31, Y+2	; 0x02
    468c:	84 81       	ldd	r24, Z+4	; 0x04
    468e:	88 23       	and	r24, r24
    4690:	49 f0       	breq	.+18     	; 0x46a4 <TIMER_voidInit+0xc6>
    4692:	a9 e5       	ldi	r26, 0x59	; 89
    4694:	b0 e0       	ldi	r27, 0x00	; 0
    4696:	e9 e5       	ldi	r30, 0x59	; 89
    4698:	f0 e0       	ldi	r31, 0x00	; 0
    469a:	80 81       	ld	r24, Z
    469c:	81 60       	ori	r24, 0x01	; 1
    469e:	8c 93       	st	X, r24
    46a0:	9c 91       	ld	r25, X
    46a2:	4b c0       	rjmp	.+150    	; 0x473a <TIMER_voidInit+0x15c>
    46a4:	a9 e5       	ldi	r26, 0x59	; 89
    46a6:	b0 e0       	ldi	r27, 0x00	; 0
    46a8:	e9 e5       	ldi	r30, 0x59	; 89
    46aa:	f0 e0       	ldi	r31, 0x00	; 0
    46ac:	80 81       	ld	r24, Z
    46ae:	8e 7f       	andi	r24, 0xFE	; 254
    46b0:	8c 93       	st	X, r24
    46b2:	2c 91       	ld	r18, X
    46b4:	42 c0       	rjmp	.+132    	; 0x473a <TIMER_voidInit+0x15c>
		break;
		case TIMER0_PHASE_CORRECT_PWM:CLR_BIT(TCCR0,TCCR0_WGM01);SET_BIT(TCCR0,TCCR0_WGM00);break;
    46b6:	a3 e5       	ldi	r26, 0x53	; 83
    46b8:	b0 e0       	ldi	r27, 0x00	; 0
    46ba:	e3 e5       	ldi	r30, 0x53	; 83
    46bc:	f0 e0       	ldi	r31, 0x00	; 0
    46be:	80 81       	ld	r24, Z
    46c0:	87 7f       	andi	r24, 0xF7	; 247
    46c2:	8c 93       	st	X, r24
    46c4:	a3 e5       	ldi	r26, 0x53	; 83
    46c6:	b0 e0       	ldi	r27, 0x00	; 0
    46c8:	e3 e5       	ldi	r30, 0x53	; 83
    46ca:	f0 e0       	ldi	r31, 0x00	; 0
    46cc:	80 81       	ld	r24, Z
    46ce:	80 64       	ori	r24, 0x40	; 64
    46d0:	8c 93       	st	X, r24
    46d2:	33 c0       	rjmp	.+102    	; 0x473a <TIMER_voidInit+0x15c>
		case TIMER0_CTC:SET_BIT(TCCR0,TCCR0_WGM01);CLR_BIT(TCCR0,TCCR0_WGM00);
    46d4:	a3 e5       	ldi	r26, 0x53	; 83
    46d6:	b0 e0       	ldi	r27, 0x00	; 0
    46d8:	e3 e5       	ldi	r30, 0x53	; 83
    46da:	f0 e0       	ldi	r31, 0x00	; 0
    46dc:	80 81       	ld	r24, Z
    46de:	88 60       	ori	r24, 0x08	; 8
    46e0:	8c 93       	st	X, r24
    46e2:	a3 e5       	ldi	r26, 0x53	; 83
    46e4:	b0 e0       	ldi	r27, 0x00	; 0
    46e6:	e3 e5       	ldi	r30, 0x53	; 83
    46e8:	f0 e0       	ldi	r31, 0x00	; 0
    46ea:	80 81       	ld	r24, Z
    46ec:	8f 7b       	andi	r24, 0xBF	; 191
    46ee:	8c 93       	st	X, r24
		Copy_Timer->IntEnable?SET_BIT(TIMSK,TIMSK_OCIE0):CLR_BIT(TIMSK,TIMSK_OCIE0);
    46f0:	e9 81       	ldd	r30, Y+1	; 0x01
    46f2:	fa 81       	ldd	r31, Y+2	; 0x02
    46f4:	84 81       	ldd	r24, Z+4	; 0x04
    46f6:	88 23       	and	r24, r24
    46f8:	49 f0       	breq	.+18     	; 0x470c <TIMER_voidInit+0x12e>
    46fa:	a9 e5       	ldi	r26, 0x59	; 89
    46fc:	b0 e0       	ldi	r27, 0x00	; 0
    46fe:	e9 e5       	ldi	r30, 0x59	; 89
    4700:	f0 e0       	ldi	r31, 0x00	; 0
    4702:	80 81       	ld	r24, Z
    4704:	82 60       	ori	r24, 0x02	; 2
    4706:	8c 93       	st	X, r24
    4708:	3c 91       	ld	r19, X
    470a:	17 c0       	rjmp	.+46     	; 0x473a <TIMER_voidInit+0x15c>
    470c:	a9 e5       	ldi	r26, 0x59	; 89
    470e:	b0 e0       	ldi	r27, 0x00	; 0
    4710:	e9 e5       	ldi	r30, 0x59	; 89
    4712:	f0 e0       	ldi	r31, 0x00	; 0
    4714:	80 81       	ld	r24, Z
    4716:	8d 7f       	andi	r24, 0xFD	; 253
    4718:	8c 93       	st	X, r24
    471a:	8c 91       	ld	r24, X
    471c:	0e c0       	rjmp	.+28     	; 0x473a <TIMER_voidInit+0x15c>
		break;
		case  TIMER0_FAST_PWM:SET_BIT(TCCR0,TCCR0_WGM01);SET_BIT(TCCR0,TCCR0_WGM00);break;
    471e:	a3 e5       	ldi	r26, 0x53	; 83
    4720:	b0 e0       	ldi	r27, 0x00	; 0
    4722:	e3 e5       	ldi	r30, 0x53	; 83
    4724:	f0 e0       	ldi	r31, 0x00	; 0
    4726:	80 81       	ld	r24, Z
    4728:	88 60       	ori	r24, 0x08	; 8
    472a:	8c 93       	st	X, r24
    472c:	a3 e5       	ldi	r26, 0x53	; 83
    472e:	b0 e0       	ldi	r27, 0x00	; 0
    4730:	e3 e5       	ldi	r30, 0x53	; 83
    4732:	f0 e0       	ldi	r31, 0x00	; 0
    4734:	80 81       	ld	r24, Z
    4736:	80 64       	ori	r24, 0x40	; 64
    4738:	8c 93       	st	X, r24
		}
		TCCR0 &= MASK_COMP_MATCH_MODE;
    473a:	a3 e5       	ldi	r26, 0x53	; 83
    473c:	b0 e0       	ldi	r27, 0x00	; 0
    473e:	e3 e5       	ldi	r30, 0x53	; 83
    4740:	f0 e0       	ldi	r31, 0x00	; 0
    4742:	80 81       	ld	r24, Z
    4744:	8f 7c       	andi	r24, 0xCF	; 207
    4746:	8c 93       	st	X, r24
		TCCR0 |= Copy_Timer->CompOutMode<<TCCR0_COM00;
    4748:	a3 e5       	ldi	r26, 0x53	; 83
    474a:	b0 e0       	ldi	r27, 0x00	; 0
    474c:	e3 e5       	ldi	r30, 0x53	; 83
    474e:	f0 e0       	ldi	r31, 0x00	; 0
    4750:	80 81       	ld	r24, Z
    4752:	28 2f       	mov	r18, r24
    4754:	e9 81       	ldd	r30, Y+1	; 0x01
    4756:	fa 81       	ldd	r31, Y+2	; 0x02
    4758:	82 81       	ldd	r24, Z+2	; 0x02
    475a:	88 2f       	mov	r24, r24
    475c:	90 e0       	ldi	r25, 0x00	; 0
    475e:	82 95       	swap	r24
    4760:	92 95       	swap	r25
    4762:	90 7f       	andi	r25, 0xF0	; 240
    4764:	98 27       	eor	r25, r24
    4766:	80 7f       	andi	r24, 0xF0	; 240
    4768:	98 27       	eor	r25, r24
    476a:	82 2b       	or	r24, r18
    476c:	8c 93       	st	X, r24
		TCCR0 &= MASK_CLOCK_MODE;
    476e:	a3 e5       	ldi	r26, 0x53	; 83
    4770:	b0 e0       	ldi	r27, 0x00	; 0
    4772:	e3 e5       	ldi	r30, 0x53	; 83
    4774:	f0 e0       	ldi	r31, 0x00	; 0
    4776:	80 81       	ld	r24, Z
    4778:	88 7f       	andi	r24, 0xF8	; 248
    477a:	8c 93       	st	X, r24
		TCCR0 |= Copy_Timer->ClockSel<<TCCR0_CS00;
    477c:	a3 e5       	ldi	r26, 0x53	; 83
    477e:	b0 e0       	ldi	r27, 0x00	; 0
    4780:	e3 e5       	ldi	r30, 0x53	; 83
    4782:	f0 e0       	ldi	r31, 0x00	; 0
    4784:	90 81       	ld	r25, Z
    4786:	e9 81       	ldd	r30, Y+1	; 0x01
    4788:	fa 81       	ldd	r31, Y+2	; 0x02
    478a:	83 81       	ldd	r24, Z+3	; 0x03
    478c:	89 2b       	or	r24, r25
    478e:	8c 93       	st	X, r24
    4790:	39 c1       	rjmp	.+626    	; 0x4a04 <TIMER_voidInit+0x426>
		break;
		case TIMER1:
			TCCR1A &= MASK_TIMER1A_MODE;
    4792:	af e4       	ldi	r26, 0x4F	; 79
    4794:	b0 e0       	ldi	r27, 0x00	; 0
    4796:	ef e4       	ldi	r30, 0x4F	; 79
    4798:	f0 e0       	ldi	r31, 0x00	; 0
    479a:	80 81       	ld	r24, Z
    479c:	8c 7f       	andi	r24, 0xFC	; 252
    479e:	8c 93       	st	X, r24
			TCCR1A |= (Copy_Timer->TimerMode&(~(MASK_TIMER1A_MODE)));
    47a0:	af e4       	ldi	r26, 0x4F	; 79
    47a2:	b0 e0       	ldi	r27, 0x00	; 0
    47a4:	ef e4       	ldi	r30, 0x4F	; 79
    47a6:	f0 e0       	ldi	r31, 0x00	; 0
    47a8:	80 81       	ld	r24, Z
    47aa:	98 2f       	mov	r25, r24
    47ac:	e9 81       	ldd	r30, Y+1	; 0x01
    47ae:	fa 81       	ldd	r31, Y+2	; 0x02
    47b0:	81 81       	ldd	r24, Z+1	; 0x01
    47b2:	83 70       	andi	r24, 0x03	; 3
    47b4:	89 2b       	or	r24, r25
    47b6:	8c 93       	st	X, r24
			TCCR1B &= MASK_TIMER1B_MODE;
    47b8:	ae e4       	ldi	r26, 0x4E	; 78
    47ba:	b0 e0       	ldi	r27, 0x00	; 0
    47bc:	ee e4       	ldi	r30, 0x4E	; 78
    47be:	f0 e0       	ldi	r31, 0x00	; 0
    47c0:	80 81       	ld	r24, Z
    47c2:	87 7e       	andi	r24, 0xE7	; 231
    47c4:	8c 93       	st	X, r24
			TCCR1B |= ((Copy_Timer->TimerMode&(~(MASK_TIMER1B_MODE_VAL)))<<1);
    47c6:	ae e4       	ldi	r26, 0x4E	; 78
    47c8:	b0 e0       	ldi	r27, 0x00	; 0
    47ca:	ee e4       	ldi	r30, 0x4E	; 78
    47cc:	f0 e0       	ldi	r31, 0x00	; 0
    47ce:	80 81       	ld	r24, Z
    47d0:	28 2f       	mov	r18, r24
    47d2:	e9 81       	ldd	r30, Y+1	; 0x01
    47d4:	fa 81       	ldd	r31, Y+2	; 0x02
    47d6:	81 81       	ldd	r24, Z+1	; 0x01
    47d8:	88 2f       	mov	r24, r24
    47da:	90 e0       	ldi	r25, 0x00	; 0
    47dc:	8c 70       	andi	r24, 0x0C	; 12
    47de:	88 0f       	add	r24, r24
    47e0:	99 1f       	adc	r25, r25
    47e2:	82 2b       	or	r24, r18
    47e4:	8c 93       	st	X, r24
			// set channel A , channel B
			TCCR1A &=MASK_COMP_MATCH1A_MODE;
    47e6:	af e4       	ldi	r26, 0x4F	; 79
    47e8:	b0 e0       	ldi	r27, 0x00	; 0
    47ea:	ef e4       	ldi	r30, 0x4F	; 79
    47ec:	f0 e0       	ldi	r31, 0x00	; 0
    47ee:	80 81       	ld	r24, Z
    47f0:	8f 70       	andi	r24, 0x0F	; 15
    47f2:	8c 93       	st	X, r24
			TCCR1A |= Copy_Timer->CompOutMode<<TCCR1A_COM1B0;
    47f4:	af e4       	ldi	r26, 0x4F	; 79
    47f6:	b0 e0       	ldi	r27, 0x00	; 0
    47f8:	ef e4       	ldi	r30, 0x4F	; 79
    47fa:	f0 e0       	ldi	r31, 0x00	; 0
    47fc:	80 81       	ld	r24, Z
    47fe:	28 2f       	mov	r18, r24
    4800:	e9 81       	ldd	r30, Y+1	; 0x01
    4802:	fa 81       	ldd	r31, Y+2	; 0x02
    4804:	82 81       	ldd	r24, Z+2	; 0x02
    4806:	88 2f       	mov	r24, r24
    4808:	90 e0       	ldi	r25, 0x00	; 0
    480a:	82 95       	swap	r24
    480c:	92 95       	swap	r25
    480e:	90 7f       	andi	r25, 0xF0	; 240
    4810:	98 27       	eor	r25, r24
    4812:	80 7f       	andi	r24, 0xF0	; 240
    4814:	98 27       	eor	r25, r24
    4816:	82 2b       	or	r24, r18
    4818:	8c 93       	st	X, r24

			TCCR1B &= MASK_CLOCK_MODE;
    481a:	ae e4       	ldi	r26, 0x4E	; 78
    481c:	b0 e0       	ldi	r27, 0x00	; 0
    481e:	ee e4       	ldi	r30, 0x4E	; 78
    4820:	f0 e0       	ldi	r31, 0x00	; 0
    4822:	80 81       	ld	r24, Z
    4824:	88 7f       	andi	r24, 0xF8	; 248
    4826:	8c 93       	st	X, r24
			TCCR1B |= Copy_Timer->ClockSel<<TCCR1B_CS10;
    4828:	ae e4       	ldi	r26, 0x4E	; 78
    482a:	b0 e0       	ldi	r27, 0x00	; 0
    482c:	ee e4       	ldi	r30, 0x4E	; 78
    482e:	f0 e0       	ldi	r31, 0x00	; 0
    4830:	90 81       	ld	r25, Z
    4832:	e9 81       	ldd	r30, Y+1	; 0x01
    4834:	fa 81       	ldd	r31, Y+2	; 0x02
    4836:	83 81       	ldd	r24, Z+3	; 0x03
    4838:	89 2b       	or	r24, r25
    483a:	8c 93       	st	X, r24

			Copy_Timer->ICU_EdgeSel?SET_BIT(TCCR1B,TCCR1B_ICES1):CLR_BIT(TCCR1B,TCCR1B_ICES1);
    483c:	e9 81       	ldd	r30, Y+1	; 0x01
    483e:	fa 81       	ldd	r31, Y+2	; 0x02
    4840:	85 81       	ldd	r24, Z+5	; 0x05
    4842:	88 23       	and	r24, r24
    4844:	49 f0       	breq	.+18     	; 0x4858 <TIMER_voidInit+0x27a>
    4846:	ae e4       	ldi	r26, 0x4E	; 78
    4848:	b0 e0       	ldi	r27, 0x00	; 0
    484a:	ee e4       	ldi	r30, 0x4E	; 78
    484c:	f0 e0       	ldi	r31, 0x00	; 0
    484e:	80 81       	ld	r24, Z
    4850:	80 64       	ori	r24, 0x40	; 64
    4852:	8c 93       	st	X, r24
    4854:	9c 91       	ld	r25, X
    4856:	08 c0       	rjmp	.+16     	; 0x4868 <TIMER_voidInit+0x28a>
    4858:	ae e4       	ldi	r26, 0x4E	; 78
    485a:	b0 e0       	ldi	r27, 0x00	; 0
    485c:	ee e4       	ldi	r30, 0x4E	; 78
    485e:	f0 e0       	ldi	r31, 0x00	; 0
    4860:	80 81       	ld	r24, Z
    4862:	8f 7b       	andi	r24, 0xBF	; 191
    4864:	8c 93       	st	X, r24
    4866:	2c 91       	ld	r18, X


			TIMSK &= MASK_TIMER1_INTS;
    4868:	a9 e5       	ldi	r26, 0x59	; 89
    486a:	b0 e0       	ldi	r27, 0x00	; 0
    486c:	e9 e5       	ldi	r30, 0x59	; 89
    486e:	f0 e0       	ldi	r31, 0x00	; 0
    4870:	80 81       	ld	r24, Z
    4872:	83 7c       	andi	r24, 0xC3	; 195
    4874:	8c 93       	st	X, r24
			TIMSK |= Copy_Timer->IntEnable<<TIMSK_TOIE1;
    4876:	a9 e5       	ldi	r26, 0x59	; 89
    4878:	b0 e0       	ldi	r27, 0x00	; 0
    487a:	e9 e5       	ldi	r30, 0x59	; 89
    487c:	f0 e0       	ldi	r31, 0x00	; 0
    487e:	80 81       	ld	r24, Z
    4880:	28 2f       	mov	r18, r24
    4882:	e9 81       	ldd	r30, Y+1	; 0x01
    4884:	fa 81       	ldd	r31, Y+2	; 0x02
    4886:	84 81       	ldd	r24, Z+4	; 0x04
    4888:	88 2f       	mov	r24, r24
    488a:	90 e0       	ldi	r25, 0x00	; 0
    488c:	88 0f       	add	r24, r24
    488e:	99 1f       	adc	r25, r25
    4890:	88 0f       	add	r24, r24
    4892:	99 1f       	adc	r25, r25
    4894:	82 2b       	or	r24, r18
    4896:	8c 93       	st	X, r24
    4898:	b5 c0       	rjmp	.+362    	; 0x4a04 <TIMER_voidInit+0x426>
			break;
		case TIMER2:
			switch(Copy_Timer->TimerMode)
    489a:	e9 81       	ldd	r30, Y+1	; 0x01
    489c:	fa 81       	ldd	r31, Y+2	; 0x02
    489e:	81 81       	ldd	r24, Z+1	; 0x01
    48a0:	28 2f       	mov	r18, r24
    48a2:	30 e0       	ldi	r19, 0x00	; 0
    48a4:	38 87       	std	Y+8, r19	; 0x08
    48a6:	2f 83       	std	Y+7, r18	; 0x07
    48a8:	8f 81       	ldd	r24, Y+7	; 0x07
    48aa:	98 85       	ldd	r25, Y+8	; 0x08
    48ac:	81 30       	cpi	r24, 0x01	; 1
    48ae:	91 05       	cpc	r25, r1
    48b0:	09 f4       	brne	.+2      	; 0x48b4 <TIMER_voidInit+0x2d6>
    48b2:	4a c0       	rjmp	.+148    	; 0x4948 <TIMER_voidInit+0x36a>
    48b4:	2f 81       	ldd	r18, Y+7	; 0x07
    48b6:	38 85       	ldd	r19, Y+8	; 0x08
    48b8:	22 30       	cpi	r18, 0x02	; 2
    48ba:	31 05       	cpc	r19, r1
    48bc:	2c f4       	brge	.+10     	; 0x48c8 <TIMER_voidInit+0x2ea>
    48be:	8f 81       	ldd	r24, Y+7	; 0x07
    48c0:	98 85       	ldd	r25, Y+8	; 0x08
    48c2:	00 97       	sbiw	r24, 0x00	; 0
    48c4:	69 f0       	breq	.+26     	; 0x48e0 <TIMER_voidInit+0x302>
    48c6:	73 c0       	rjmp	.+230    	; 0x49ae <TIMER_voidInit+0x3d0>
    48c8:	2f 81       	ldd	r18, Y+7	; 0x07
    48ca:	38 85       	ldd	r19, Y+8	; 0x08
    48cc:	22 30       	cpi	r18, 0x02	; 2
    48ce:	31 05       	cpc	r19, r1
    48d0:	09 f4       	brne	.+2      	; 0x48d4 <TIMER_voidInit+0x2f6>
    48d2:	5f c0       	rjmp	.+190    	; 0x4992 <TIMER_voidInit+0x3b4>
    48d4:	8f 81       	ldd	r24, Y+7	; 0x07
    48d6:	98 85       	ldd	r25, Y+8	; 0x08
    48d8:	83 30       	cpi	r24, 0x03	; 3
    48da:	91 05       	cpc	r25, r1
    48dc:	31 f1       	breq	.+76     	; 0x492a <TIMER_voidInit+0x34c>
    48de:	67 c0       	rjmp	.+206    	; 0x49ae <TIMER_voidInit+0x3d0>
			{
			case TIMER2_NORMAL:CLR_BIT(TCCR2,TCCR2_WGM21);CLR_BIT(TCCR2,TCCR2_WGM20);
    48e0:	a5 e4       	ldi	r26, 0x45	; 69
    48e2:	b0 e0       	ldi	r27, 0x00	; 0
    48e4:	e5 e4       	ldi	r30, 0x45	; 69
    48e6:	f0 e0       	ldi	r31, 0x00	; 0
    48e8:	80 81       	ld	r24, Z
    48ea:	87 7f       	andi	r24, 0xF7	; 247
    48ec:	8c 93       	st	X, r24
    48ee:	a5 e4       	ldi	r26, 0x45	; 69
    48f0:	b0 e0       	ldi	r27, 0x00	; 0
    48f2:	e5 e4       	ldi	r30, 0x45	; 69
    48f4:	f0 e0       	ldi	r31, 0x00	; 0
    48f6:	80 81       	ld	r24, Z
    48f8:	8f 7b       	andi	r24, 0xBF	; 191
    48fa:	8c 93       	st	X, r24
			Copy_Timer->IntEnable?SET_BIT(TIMSK,TIMSK_TOIE2):CLR_BIT(TIMSK,TIMSK_TOIE2);
    48fc:	e9 81       	ldd	r30, Y+1	; 0x01
    48fe:	fa 81       	ldd	r31, Y+2	; 0x02
    4900:	84 81       	ldd	r24, Z+4	; 0x04
    4902:	88 23       	and	r24, r24
    4904:	49 f0       	breq	.+18     	; 0x4918 <TIMER_voidInit+0x33a>
    4906:	a9 e5       	ldi	r26, 0x59	; 89
    4908:	b0 e0       	ldi	r27, 0x00	; 0
    490a:	e9 e5       	ldi	r30, 0x59	; 89
    490c:	f0 e0       	ldi	r31, 0x00	; 0
    490e:	80 81       	ld	r24, Z
    4910:	80 64       	ori	r24, 0x40	; 64
    4912:	8c 93       	st	X, r24
    4914:	9c 91       	ld	r25, X
    4916:	4b c0       	rjmp	.+150    	; 0x49ae <TIMER_voidInit+0x3d0>
    4918:	a9 e5       	ldi	r26, 0x59	; 89
    491a:	b0 e0       	ldi	r27, 0x00	; 0
    491c:	e9 e5       	ldi	r30, 0x59	; 89
    491e:	f0 e0       	ldi	r31, 0x00	; 0
    4920:	80 81       	ld	r24, Z
    4922:	8f 7b       	andi	r24, 0xBF	; 191
    4924:	8c 93       	st	X, r24
    4926:	2c 91       	ld	r18, X
    4928:	42 c0       	rjmp	.+132    	; 0x49ae <TIMER_voidInit+0x3d0>
			break;
			case TIMER2_PHASE_CORRECT_PWM:CLR_BIT(TCCR2,TCCR2_WGM21);SET_BIT(TCCR2,TCCR2_WGM20);break;
    492a:	a5 e4       	ldi	r26, 0x45	; 69
    492c:	b0 e0       	ldi	r27, 0x00	; 0
    492e:	e5 e4       	ldi	r30, 0x45	; 69
    4930:	f0 e0       	ldi	r31, 0x00	; 0
    4932:	80 81       	ld	r24, Z
    4934:	87 7f       	andi	r24, 0xF7	; 247
    4936:	8c 93       	st	X, r24
    4938:	a5 e4       	ldi	r26, 0x45	; 69
    493a:	b0 e0       	ldi	r27, 0x00	; 0
    493c:	e5 e4       	ldi	r30, 0x45	; 69
    493e:	f0 e0       	ldi	r31, 0x00	; 0
    4940:	80 81       	ld	r24, Z
    4942:	80 64       	ori	r24, 0x40	; 64
    4944:	8c 93       	st	X, r24
    4946:	33 c0       	rjmp	.+102    	; 0x49ae <TIMER_voidInit+0x3d0>
			case TIMER2_CTC:SET_BIT(TCCR2,TCCR2_WGM21);CLR_BIT(TCCR2,TCCR2_WGM20);
    4948:	a5 e4       	ldi	r26, 0x45	; 69
    494a:	b0 e0       	ldi	r27, 0x00	; 0
    494c:	e5 e4       	ldi	r30, 0x45	; 69
    494e:	f0 e0       	ldi	r31, 0x00	; 0
    4950:	80 81       	ld	r24, Z
    4952:	88 60       	ori	r24, 0x08	; 8
    4954:	8c 93       	st	X, r24
    4956:	a5 e4       	ldi	r26, 0x45	; 69
    4958:	b0 e0       	ldi	r27, 0x00	; 0
    495a:	e5 e4       	ldi	r30, 0x45	; 69
    495c:	f0 e0       	ldi	r31, 0x00	; 0
    495e:	80 81       	ld	r24, Z
    4960:	8f 7b       	andi	r24, 0xBF	; 191
    4962:	8c 93       	st	X, r24
			Copy_Timer->IntEnable?SET_BIT(TIMSK,TIMSK_OCIE2):CLR_BIT(TIMSK,TIMSK_OCIE2);
    4964:	e9 81       	ldd	r30, Y+1	; 0x01
    4966:	fa 81       	ldd	r31, Y+2	; 0x02
    4968:	84 81       	ldd	r24, Z+4	; 0x04
    496a:	88 23       	and	r24, r24
    496c:	49 f0       	breq	.+18     	; 0x4980 <TIMER_voidInit+0x3a2>
    496e:	a9 e5       	ldi	r26, 0x59	; 89
    4970:	b0 e0       	ldi	r27, 0x00	; 0
    4972:	e9 e5       	ldi	r30, 0x59	; 89
    4974:	f0 e0       	ldi	r31, 0x00	; 0
    4976:	80 81       	ld	r24, Z
    4978:	80 68       	ori	r24, 0x80	; 128
    497a:	8c 93       	st	X, r24
    497c:	3c 91       	ld	r19, X
    497e:	17 c0       	rjmp	.+46     	; 0x49ae <TIMER_voidInit+0x3d0>
    4980:	a9 e5       	ldi	r26, 0x59	; 89
    4982:	b0 e0       	ldi	r27, 0x00	; 0
    4984:	e9 e5       	ldi	r30, 0x59	; 89
    4986:	f0 e0       	ldi	r31, 0x00	; 0
    4988:	80 81       	ld	r24, Z
    498a:	8f 77       	andi	r24, 0x7F	; 127
    498c:	8c 93       	st	X, r24
    498e:	8c 91       	ld	r24, X
    4990:	0e c0       	rjmp	.+28     	; 0x49ae <TIMER_voidInit+0x3d0>
			break;
			case  TIMER2_FAST_PWM:SET_BIT(TCCR2,TCCR2_WGM21);SET_BIT(TCCR2,TCCR2_WGM20);break;
    4992:	a5 e4       	ldi	r26, 0x45	; 69
    4994:	b0 e0       	ldi	r27, 0x00	; 0
    4996:	e5 e4       	ldi	r30, 0x45	; 69
    4998:	f0 e0       	ldi	r31, 0x00	; 0
    499a:	80 81       	ld	r24, Z
    499c:	88 60       	ori	r24, 0x08	; 8
    499e:	8c 93       	st	X, r24
    49a0:	a5 e4       	ldi	r26, 0x45	; 69
    49a2:	b0 e0       	ldi	r27, 0x00	; 0
    49a4:	e5 e4       	ldi	r30, 0x45	; 69
    49a6:	f0 e0       	ldi	r31, 0x00	; 0
    49a8:	80 81       	ld	r24, Z
    49aa:	80 64       	ori	r24, 0x40	; 64
    49ac:	8c 93       	st	X, r24
			}
			TCCR2 &= MASK_COMP_MATCH_MODE;
    49ae:	a5 e4       	ldi	r26, 0x45	; 69
    49b0:	b0 e0       	ldi	r27, 0x00	; 0
    49b2:	e5 e4       	ldi	r30, 0x45	; 69
    49b4:	f0 e0       	ldi	r31, 0x00	; 0
    49b6:	80 81       	ld	r24, Z
    49b8:	8f 7c       	andi	r24, 0xCF	; 207
    49ba:	8c 93       	st	X, r24
			TCCR2 |= Copy_Timer->CompOutMode<<TCCR2_COM20;
    49bc:	a5 e4       	ldi	r26, 0x45	; 69
    49be:	b0 e0       	ldi	r27, 0x00	; 0
    49c0:	e5 e4       	ldi	r30, 0x45	; 69
    49c2:	f0 e0       	ldi	r31, 0x00	; 0
    49c4:	80 81       	ld	r24, Z
    49c6:	28 2f       	mov	r18, r24
    49c8:	e9 81       	ldd	r30, Y+1	; 0x01
    49ca:	fa 81       	ldd	r31, Y+2	; 0x02
    49cc:	82 81       	ldd	r24, Z+2	; 0x02
    49ce:	88 2f       	mov	r24, r24
    49d0:	90 e0       	ldi	r25, 0x00	; 0
    49d2:	82 95       	swap	r24
    49d4:	92 95       	swap	r25
    49d6:	90 7f       	andi	r25, 0xF0	; 240
    49d8:	98 27       	eor	r25, r24
    49da:	80 7f       	andi	r24, 0xF0	; 240
    49dc:	98 27       	eor	r25, r24
    49de:	82 2b       	or	r24, r18
    49e0:	8c 93       	st	X, r24
			TCCR2 &= MASK_CLOCK_MODE;
    49e2:	a5 e4       	ldi	r26, 0x45	; 69
    49e4:	b0 e0       	ldi	r27, 0x00	; 0
    49e6:	e5 e4       	ldi	r30, 0x45	; 69
    49e8:	f0 e0       	ldi	r31, 0x00	; 0
    49ea:	80 81       	ld	r24, Z
    49ec:	88 7f       	andi	r24, 0xF8	; 248
    49ee:	8c 93       	st	X, r24
			TCCR2 |= Copy_Timer->ClockSel<<TCCR2_CS20;
    49f0:	a5 e4       	ldi	r26, 0x45	; 69
    49f2:	b0 e0       	ldi	r27, 0x00	; 0
    49f4:	e5 e4       	ldi	r30, 0x45	; 69
    49f6:	f0 e0       	ldi	r31, 0x00	; 0
    49f8:	90 81       	ld	r25, Z
    49fa:	e9 81       	ldd	r30, Y+1	; 0x01
    49fc:	fa 81       	ldd	r31, Y+2	; 0x02
    49fe:	83 81       	ldd	r24, Z+3	; 0x03
    4a00:	89 2b       	or	r24, r25
    4a02:	8c 93       	st	X, r24
			break;
	}
}
    4a04:	62 96       	adiw	r28, 0x12	; 18
    4a06:	0f b6       	in	r0, 0x3f	; 63
    4a08:	f8 94       	cli
    4a0a:	de bf       	out	0x3e, r29	; 62
    4a0c:	0f be       	out	0x3f, r0	; 63
    4a0e:	cd bf       	out	0x3d, r28	; 61
    4a10:	cf 91       	pop	r28
    4a12:	df 91       	pop	r29
    4a14:	08 95       	ret

00004a16 <TIMER0_voidSetPreloadValue>:

void TIMER0_voidSetPreloadValue(u8 Copy_u8PreloadValue)
{
    4a16:	df 93       	push	r29
    4a18:	cf 93       	push	r28
    4a1a:	0f 92       	push	r0
    4a1c:	cd b7       	in	r28, 0x3d	; 61
    4a1e:	de b7       	in	r29, 0x3e	; 62
    4a20:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8PreloadValue;
    4a22:	e2 e5       	ldi	r30, 0x52	; 82
    4a24:	f0 e0       	ldi	r31, 0x00	; 0
    4a26:	89 81       	ldd	r24, Y+1	; 0x01
    4a28:	80 83       	st	Z, r24
}
    4a2a:	0f 90       	pop	r0
    4a2c:	cf 91       	pop	r28
    4a2e:	df 91       	pop	r29
    4a30:	08 95       	ret

00004a32 <TIMER0_voidSetCompMatchValue>:

void TIMER0_voidSetCompMatchValue(u8 Copy_u8CompVal)
{
    4a32:	df 93       	push	r29
    4a34:	cf 93       	push	r28
    4a36:	0f 92       	push	r0
    4a38:	cd b7       	in	r28, 0x3d	; 61
    4a3a:	de b7       	in	r29, 0x3e	; 62
    4a3c:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CompVal;
    4a3e:	ec e5       	ldi	r30, 0x5C	; 92
    4a40:	f0 e0       	ldi	r31, 0x00	; 0
    4a42:	89 81       	ldd	r24, Y+1	; 0x01
    4a44:	80 83       	st	Z, r24
}
    4a46:	0f 90       	pop	r0
    4a48:	cf 91       	pop	r28
    4a4a:	df 91       	pop	r29
    4a4c:	08 95       	ret

00004a4e <TIMER0_u8SetCallBack>:

u8 TIMER0_u8SetCallBack(Timer_t *Copy_Timer,void (*Notifiction)())
{
    4a4e:	df 93       	push	r29
    4a50:	cf 93       	push	r28
    4a52:	cd b7       	in	r28, 0x3d	; 61
    4a54:	de b7       	in	r29, 0x3e	; 62
    4a56:	27 97       	sbiw	r28, 0x07	; 7
    4a58:	0f b6       	in	r0, 0x3f	; 63
    4a5a:	f8 94       	cli
    4a5c:	de bf       	out	0x3e, r29	; 62
    4a5e:	0f be       	out	0x3f, r0	; 63
    4a60:	cd bf       	out	0x3d, r28	; 61
    4a62:	9b 83       	std	Y+3, r25	; 0x03
    4a64:	8a 83       	std	Y+2, r24	; 0x02
    4a66:	7d 83       	std	Y+5, r23	; 0x05
    4a68:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK;
    4a6a:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_Timer!=NULL)||(Notifiction !=NULL))
    4a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    4a6e:	9b 81       	ldd	r25, Y+3	; 0x03
    4a70:	00 97       	sbiw	r24, 0x00	; 0
    4a72:	21 f4       	brne	.+8      	; 0x4a7c <TIMER0_u8SetCallBack+0x2e>
    4a74:	8c 81       	ldd	r24, Y+4	; 0x04
    4a76:	9d 81       	ldd	r25, Y+5	; 0x05
    4a78:	00 97       	sbiw	r24, 0x00	; 0
    4a7a:	f9 f0       	breq	.+62     	; 0x4aba <TIMER0_u8SetCallBack+0x6c>
	{

		switch(Copy_Timer->TimerMode)
    4a7c:	ea 81       	ldd	r30, Y+2	; 0x02
    4a7e:	fb 81       	ldd	r31, Y+3	; 0x03
    4a80:	81 81       	ldd	r24, Z+1	; 0x01
    4a82:	28 2f       	mov	r18, r24
    4a84:	30 e0       	ldi	r19, 0x00	; 0
    4a86:	3f 83       	std	Y+7, r19	; 0x07
    4a88:	2e 83       	std	Y+6, r18	; 0x06
    4a8a:	8e 81       	ldd	r24, Y+6	; 0x06
    4a8c:	9f 81       	ldd	r25, Y+7	; 0x07
    4a8e:	00 97       	sbiw	r24, 0x00	; 0
    4a90:	31 f0       	breq	.+12     	; 0x4a9e <TIMER0_u8SetCallBack+0x50>
    4a92:	2e 81       	ldd	r18, Y+6	; 0x06
    4a94:	3f 81       	ldd	r19, Y+7	; 0x07
    4a96:	21 30       	cpi	r18, 0x01	; 1
    4a98:	31 05       	cpc	r19, r1
    4a9a:	41 f0       	breq	.+16     	; 0x4aac <TIMER0_u8SetCallBack+0x5e>
    4a9c:	10 c0       	rjmp	.+32     	; 0x4abe <TIMER0_u8SetCallBack+0x70>
		{
		case TIMER0_NORMAL:TIMER_pvCallBackFunc[TIMER0_OVF] = Notifiction;
    4a9e:	8c 81       	ldd	r24, Y+4	; 0x04
    4aa0:	9d 81       	ldd	r25, Y+5	; 0x05
    4aa2:	90 93 c6 01 	sts	0x01C6, r25
    4aa6:	80 93 c5 01 	sts	0x01C5, r24
    4aaa:	09 c0       	rjmp	.+18     	; 0x4abe <TIMER0_u8SetCallBack+0x70>
		break;
		case TIMER0_CTC:TIMER_pvCallBackFunc[TIMER0_CMV] = Notifiction;
    4aac:	8c 81       	ldd	r24, Y+4	; 0x04
    4aae:	9d 81       	ldd	r25, Y+5	; 0x05
    4ab0:	90 93 c8 01 	sts	0x01C8, r25
    4ab4:	80 93 c7 01 	sts	0x01C7, r24
    4ab8:	02 c0       	rjmp	.+4      	; 0x4abe <TIMER0_u8SetCallBack+0x70>
		break;
		}

	}
	else
		Local_u8ErrorState = NULL_POINTER;
    4aba:	82 e0       	ldi	r24, 0x02	; 2
    4abc:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    4abe:	89 81       	ldd	r24, Y+1	; 0x01
}
    4ac0:	27 96       	adiw	r28, 0x07	; 7
    4ac2:	0f b6       	in	r0, 0x3f	; 63
    4ac4:	f8 94       	cli
    4ac6:	de bf       	out	0x3e, r29	; 62
    4ac8:	0f be       	out	0x3f, r0	; 63
    4aca:	cd bf       	out	0x3d, r28	; 61
    4acc:	cf 91       	pop	r28
    4ace:	df 91       	pop	r29
    4ad0:	08 95       	ret

00004ad2 <TIMER1_voidSetICR>:
	TIMER_voidInit(&t0);
	TIMER0_voidSetCompMatchValue((u8)((256UL*Copy_u8DutyCycle)/100UL));
}
*/
void TIMER1_voidSetICR(u16 Copy_u16Top)
{
    4ad2:	df 93       	push	r29
    4ad4:	cf 93       	push	r28
    4ad6:	00 d0       	rcall	.+0      	; 0x4ad8 <TIMER1_voidSetICR+0x6>
    4ad8:	cd b7       	in	r28, 0x3d	; 61
    4ada:	de b7       	in	r29, 0x3e	; 62
    4adc:	9a 83       	std	Y+2, r25	; 0x02
    4ade:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16Top;
    4ae0:	e6 e4       	ldi	r30, 0x46	; 70
    4ae2:	f0 e0       	ldi	r31, 0x00	; 0
    4ae4:	89 81       	ldd	r24, Y+1	; 0x01
    4ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ae8:	91 83       	std	Z+1, r25	; 0x01
    4aea:	80 83       	st	Z, r24
}
    4aec:	0f 90       	pop	r0
    4aee:	0f 90       	pop	r0
    4af0:	cf 91       	pop	r28
    4af2:	df 91       	pop	r29
    4af4:	08 95       	ret

00004af6 <TIMER1_voidSetPreloadValue>:
void TIMER1_voidSetPreloadValue(u16 Copy_u16PreloadValue)
{
    4af6:	df 93       	push	r29
    4af8:	cf 93       	push	r28
    4afa:	00 d0       	rcall	.+0      	; 0x4afc <TIMER1_voidSetPreloadValue+0x6>
    4afc:	cd b7       	in	r28, 0x3d	; 61
    4afe:	de b7       	in	r29, 0x3e	; 62
    4b00:	9a 83       	std	Y+2, r25	; 0x02
    4b02:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16PreloadValue;
    4b04:	ec e4       	ldi	r30, 0x4C	; 76
    4b06:	f0 e0       	ldi	r31, 0x00	; 0
    4b08:	89 81       	ldd	r24, Y+1	; 0x01
    4b0a:	9a 81       	ldd	r25, Y+2	; 0x02
    4b0c:	91 83       	std	Z+1, r25	; 0x01
    4b0e:	80 83       	st	Z, r24
}
    4b10:	0f 90       	pop	r0
    4b12:	0f 90       	pop	r0
    4b14:	cf 91       	pop	r28
    4b16:	df 91       	pop	r29
    4b18:	08 95       	ret

00004b1a <TIMER1_u16ReadTimerValue>:
u16 TIMER1_u16ReadTimerValue()
{
    4b1a:	df 93       	push	r29
    4b1c:	cf 93       	push	r28
    4b1e:	cd b7       	in	r28, 0x3d	; 61
    4b20:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    4b22:	ec e4       	ldi	r30, 0x4C	; 76
    4b24:	f0 e0       	ldi	r31, 0x00	; 0
    4b26:	80 81       	ld	r24, Z
    4b28:	91 81       	ldd	r25, Z+1	; 0x01
}
    4b2a:	cf 91       	pop	r28
    4b2c:	df 91       	pop	r29
    4b2e:	08 95       	ret

00004b30 <TIMER1_voidSetChannelACompMatch>:

void TIMER1_voidSetChannelACompMatch(u16 Copy_u16CompVal)
{
    4b30:	df 93       	push	r29
    4b32:	cf 93       	push	r28
    4b34:	00 d0       	rcall	.+0      	; 0x4b36 <TIMER1_voidSetChannelACompMatch+0x6>
    4b36:	cd b7       	in	r28, 0x3d	; 61
    4b38:	de b7       	in	r29, 0x3e	; 62
    4b3a:	9a 83       	std	Y+2, r25	; 0x02
    4b3c:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompVal;
    4b3e:	ea e4       	ldi	r30, 0x4A	; 74
    4b40:	f0 e0       	ldi	r31, 0x00	; 0
    4b42:	89 81       	ldd	r24, Y+1	; 0x01
    4b44:	9a 81       	ldd	r25, Y+2	; 0x02
    4b46:	91 83       	std	Z+1, r25	; 0x01
    4b48:	80 83       	st	Z, r24
}
    4b4a:	0f 90       	pop	r0
    4b4c:	0f 90       	pop	r0
    4b4e:	cf 91       	pop	r28
    4b50:	df 91       	pop	r29
    4b52:	08 95       	ret

00004b54 <TIMER1_voidSetChannelBCompMatch>:
void TIMER1_voidSetChannelBCompMatch(u16 Copy_u16CompVal)
{
    4b54:	df 93       	push	r29
    4b56:	cf 93       	push	r28
    4b58:	00 d0       	rcall	.+0      	; 0x4b5a <TIMER1_voidSetChannelBCompMatch+0x6>
    4b5a:	cd b7       	in	r28, 0x3d	; 61
    4b5c:	de b7       	in	r29, 0x3e	; 62
    4b5e:	9a 83       	std	Y+2, r25	; 0x02
    4b60:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Copy_u16CompVal;
    4b62:	e8 e4       	ldi	r30, 0x48	; 72
    4b64:	f0 e0       	ldi	r31, 0x00	; 0
    4b66:	89 81       	ldd	r24, Y+1	; 0x01
    4b68:	9a 81       	ldd	r25, Y+2	; 0x02
    4b6a:	91 83       	std	Z+1, r25	; 0x01
    4b6c:	80 83       	st	Z, r24
}
    4b6e:	0f 90       	pop	r0
    4b70:	0f 90       	pop	r0
    4b72:	cf 91       	pop	r28
    4b74:	df 91       	pop	r29
    4b76:	08 95       	ret

00004b78 <TIMER1_u8SetCallBack>:
u8 TIMER1_u8SetCallBack(Timer_t *Copy_Timer,void(*Notifiction)())
{
    4b78:	df 93       	push	r29
    4b7a:	cf 93       	push	r28
    4b7c:	cd b7       	in	r28, 0x3d	; 61
    4b7e:	de b7       	in	r29, 0x3e	; 62
    4b80:	29 97       	sbiw	r28, 0x09	; 9
    4b82:	0f b6       	in	r0, 0x3f	; 63
    4b84:	f8 94       	cli
    4b86:	de bf       	out	0x3e, r29	; 62
    4b88:	0f be       	out	0x3f, r0	; 63
    4b8a:	cd bf       	out	0x3d, r28	; 61
    4b8c:	9b 83       	std	Y+3, r25	; 0x03
    4b8e:	8a 83       	std	Y+2, r24	; 0x02
    4b90:	7d 83       	std	Y+5, r23	; 0x05
    4b92:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK;
    4b94:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_Timer!=NULL)||(Notifiction !=NULL))
    4b96:	8a 81       	ldd	r24, Y+2	; 0x02
    4b98:	9b 81       	ldd	r25, Y+3	; 0x03
    4b9a:	00 97       	sbiw	r24, 0x00	; 0
    4b9c:	29 f4       	brne	.+10     	; 0x4ba8 <TIMER1_u8SetCallBack+0x30>
    4b9e:	8c 81       	ldd	r24, Y+4	; 0x04
    4ba0:	9d 81       	ldd	r25, Y+5	; 0x05
    4ba2:	00 97       	sbiw	r24, 0x00	; 0
    4ba4:	09 f4       	brne	.+2      	; 0x4ba8 <TIMER1_u8SetCallBack+0x30>
    4ba6:	5d c0       	rjmp	.+186    	; 0x4c62 <TIMER1_u8SetCallBack+0xea>
	{
		switch(Copy_Timer->TimerMode)
    4ba8:	ea 81       	ldd	r30, Y+2	; 0x02
    4baa:	fb 81       	ldd	r31, Y+3	; 0x03
    4bac:	81 81       	ldd	r24, Z+1	; 0x01
    4bae:	28 2f       	mov	r18, r24
    4bb0:	30 e0       	ldi	r19, 0x00	; 0
    4bb2:	39 87       	std	Y+9, r19	; 0x09
    4bb4:	28 87       	std	Y+8, r18	; 0x08
    4bb6:	88 85       	ldd	r24, Y+8	; 0x08
    4bb8:	99 85       	ldd	r25, Y+9	; 0x09
    4bba:	84 30       	cpi	r24, 0x04	; 4
    4bbc:	91 05       	cpc	r25, r1
    4bbe:	a1 f0       	breq	.+40     	; 0x4be8 <TIMER1_u8SetCallBack+0x70>
    4bc0:	28 85       	ldd	r18, Y+8	; 0x08
    4bc2:	39 85       	ldd	r19, Y+9	; 0x09
    4bc4:	2c 30       	cpi	r18, 0x0C	; 12
    4bc6:	31 05       	cpc	r19, r1
    4bc8:	09 f4       	brne	.+2      	; 0x4bcc <TIMER1_u8SetCallBack+0x54>
    4bca:	44 c0       	rjmp	.+136    	; 0x4c54 <TIMER1_u8SetCallBack+0xdc>
    4bcc:	88 85       	ldd	r24, Y+8	; 0x08
    4bce:	99 85       	ldd	r25, Y+9	; 0x09
    4bd0:	00 97       	sbiw	r24, 0x00	; 0
    4bd2:	09 f0       	breq	.+2      	; 0x4bd6 <TIMER1_u8SetCallBack+0x5e>
    4bd4:	48 c0       	rjmp	.+144    	; 0x4c66 <TIMER1_u8SetCallBack+0xee>
		{
		case TIMER1_NORMAL:TIMER_pvCallBackFunc[TIMER1_OVF] = Notifiction;
    4bd6:	8c 81       	ldd	r24, Y+4	; 0x04
    4bd8:	9d 81       	ldd	r25, Y+5	; 0x05
    4bda:	90 93 ca 01 	sts	0x01CA, r25
    4bde:	80 93 c9 01 	sts	0x01C9, r24
		TIMER_u8Direction = TIMER1_ORDINARY;
    4be2:	10 92 9c 01 	sts	0x019C, r1
    4be6:	3f c0       	rjmp	.+126    	; 0x4c66 <TIMER1_u8SetCallBack+0xee>
		break;
		case TIMER1_CTC:
			switch(Copy_Timer->CompOutMode)
    4be8:	ea 81       	ldd	r30, Y+2	; 0x02
    4bea:	fb 81       	ldd	r31, Y+3	; 0x03
    4bec:	82 81       	ldd	r24, Z+2	; 0x02
    4bee:	28 2f       	mov	r18, r24
    4bf0:	30 e0       	ldi	r19, 0x00	; 0
    4bf2:	3f 83       	std	Y+7, r19	; 0x07
    4bf4:	2e 83       	std	Y+6, r18	; 0x06
    4bf6:	8e 81       	ldd	r24, Y+6	; 0x06
    4bf8:	9f 81       	ldd	r25, Y+7	; 0x07
    4bfa:	84 30       	cpi	r24, 0x04	; 4
    4bfc:	91 05       	cpc	r25, r1
    4bfe:	a1 f0       	breq	.+40     	; 0x4c28 <TIMER1_u8SetCallBack+0xb0>
    4c00:	2e 81       	ldd	r18, Y+6	; 0x06
    4c02:	3f 81       	ldd	r19, Y+7	; 0x07
    4c04:	25 30       	cpi	r18, 0x05	; 5
    4c06:	31 05       	cpc	r19, r1
    4c08:	2c f4       	brge	.+10     	; 0x4c14 <TIMER1_u8SetCallBack+0x9c>
    4c0a:	8e 81       	ldd	r24, Y+6	; 0x06
    4c0c:	9f 81       	ldd	r25, Y+7	; 0x07
    4c0e:	00 97       	sbiw	r24, 0x00	; 0
    4c10:	59 f0       	breq	.+22     	; 0x4c28 <TIMER1_u8SetCallBack+0xb0>
    4c12:	10 c0       	rjmp	.+32     	; 0x4c34 <TIMER1_u8SetCallBack+0xbc>
    4c14:	2e 81       	ldd	r18, Y+6	; 0x06
    4c16:	3f 81       	ldd	r19, Y+7	; 0x07
    4c18:	28 30       	cpi	r18, 0x08	; 8
    4c1a:	31 05       	cpc	r19, r1
    4c1c:	29 f0       	breq	.+10     	; 0x4c28 <TIMER1_u8SetCallBack+0xb0>
    4c1e:	8e 81       	ldd	r24, Y+6	; 0x06
    4c20:	9f 81       	ldd	r25, Y+7	; 0x07
    4c22:	8c 30       	cpi	r24, 0x0C	; 12
    4c24:	91 05       	cpc	r25, r1
    4c26:	31 f4       	brne	.+12     	; 0x4c34 <TIMER1_u8SetCallBack+0xbc>
			{
			case OC1A_DIS:case OC1A_TOG:case OC1A_CLR:case OC1A_SET:
				TIMER_pvCallBackFunc[TIMER1A_CMV] = Notifiction;
    4c28:	8c 81       	ldd	r24, Y+4	; 0x04
    4c2a:	9d 81       	ldd	r25, Y+5	; 0x05
    4c2c:	90 93 cc 01 	sts	0x01CC, r25
    4c30:	80 93 cb 01 	sts	0x01CB, r24
				break;
			}
			switch(Copy_Timer->CompOutMode)
    4c34:	ea 81       	ldd	r30, Y+2	; 0x02
    4c36:	fb 81       	ldd	r31, Y+3	; 0x03
    4c38:	82 81       	ldd	r24, Z+2	; 0x02
    4c3a:	88 2f       	mov	r24, r24
    4c3c:	90 e0       	ldi	r25, 0x00	; 0
    4c3e:	00 96       	adiw	r24, 0x00	; 0
    4c40:	84 30       	cpi	r24, 0x04	; 4
    4c42:	91 05       	cpc	r25, r1
    4c44:	80 f4       	brcc	.+32     	; 0x4c66 <TIMER1_u8SetCallBack+0xee>
			{
			case OC1B_DIS:case OC1B_TOG:case OC1B_CLR:case OC1B_SET:
				TIMER_pvCallBackFunc[TIMER1B_CMV] = Notifiction;
    4c46:	8c 81       	ldd	r24, Y+4	; 0x04
    4c48:	9d 81       	ldd	r25, Y+5	; 0x05
    4c4a:	90 93 ce 01 	sts	0x01CE, r25
    4c4e:	80 93 cd 01 	sts	0x01CD, r24
    4c52:	09 c0       	rjmp	.+18     	; 0x4c66 <TIMER1_u8SetCallBack+0xee>
				break;
			}
			break;
		case TIMER1_IC_CTC:
			TIMER_pvCallBackFunc[TIMER1_CAPT] = Notifiction;
    4c54:	8c 81       	ldd	r24, Y+4	; 0x04
    4c56:	9d 81       	ldd	r25, Y+5	; 0x05
    4c58:	90 93 d0 01 	sts	0x01D0, r25
    4c5c:	80 93 cf 01 	sts	0x01CF, r24
    4c60:	02 c0       	rjmp	.+4      	; 0x4c66 <TIMER1_u8SetCallBack+0xee>
			break;

		}
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    4c62:	82 e0       	ldi	r24, 0x02	; 2
    4c64:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    4c66:	89 81       	ldd	r24, Y+1	; 0x01
}
    4c68:	29 96       	adiw	r28, 0x09	; 9
    4c6a:	0f b6       	in	r0, 0x3f	; 63
    4c6c:	f8 94       	cli
    4c6e:	de bf       	out	0x3e, r29	; 62
    4c70:	0f be       	out	0x3f, r0	; 63
    4c72:	cd bf       	out	0x3d, r28	; 61
    4c74:	cf 91       	pop	r28
    4c76:	df 91       	pop	r29
    4c78:	08 95       	ret

00004c7a <TIMER1_voidDisableOvfInterrupt>:

void TIMER1_voidDisableOvfInterrupt()
{
    4c7a:	df 93       	push	r29
    4c7c:	cf 93       	push	r28
    4c7e:	cd b7       	in	r28, 0x3d	; 61
    4c80:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TOIE1);
    4c82:	a9 e5       	ldi	r26, 0x59	; 89
    4c84:	b0 e0       	ldi	r27, 0x00	; 0
    4c86:	e9 e5       	ldi	r30, 0x59	; 89
    4c88:	f0 e0       	ldi	r31, 0x00	; 0
    4c8a:	80 81       	ld	r24, Z
    4c8c:	8b 7f       	andi	r24, 0xFB	; 251
    4c8e:	8c 93       	st	X, r24
}
    4c90:	cf 91       	pop	r28
    4c92:	df 91       	pop	r29
    4c94:	08 95       	ret

00004c96 <ICU_voidInit>:
void ICU_voidInit()
{
    4c96:	df 93       	push	r29
    4c98:	cf 93       	push	r28
    4c9a:	cd b7       	in	r28, 0x3d	; 61
    4c9c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    4c9e:	a9 e5       	ldi	r26, 0x59	; 89
    4ca0:	b0 e0       	ldi	r27, 0x00	; 0
    4ca2:	e9 e5       	ldi	r30, 0x59	; 89
    4ca4:	f0 e0       	ldi	r31, 0x00	; 0
    4ca6:	80 81       	ld	r24, Z
    4ca8:	80 62       	ori	r24, 0x20	; 32
    4caa:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    4cac:	ae e4       	ldi	r26, 0x4E	; 78
    4cae:	b0 e0       	ldi	r27, 0x00	; 0
    4cb0:	ee e4       	ldi	r30, 0x4E	; 78
    4cb2:	f0 e0       	ldi	r31, 0x00	; 0
    4cb4:	80 81       	ld	r24, Z
    4cb6:	80 64       	ori	r24, 0x40	; 64
    4cb8:	8c 93       	st	X, r24
}
    4cba:	cf 91       	pop	r28
    4cbc:	df 91       	pop	r29
    4cbe:	08 95       	ret

00004cc0 <ICU_u16ReadInputCapture>:

u16 ICU_u16ReadInputCapture()
{
    4cc0:	df 93       	push	r29
    4cc2:	cf 93       	push	r28
    4cc4:	cd b7       	in	r28, 0x3d	; 61
    4cc6:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    4cc8:	e6 e4       	ldi	r30, 0x46	; 70
    4cca:	f0 e0       	ldi	r31, 0x00	; 0
    4ccc:	80 81       	ld	r24, Z
    4cce:	91 81       	ldd	r25, Z+1	; 0x01
}
    4cd0:	cf 91       	pop	r28
    4cd2:	df 91       	pop	r29
    4cd4:	08 95       	ret

00004cd6 <ICU_u8CaptureEdgeSelect>:

u8 ICU_u8CaptureEdgeSelect(u8 Copy_u8CapEdge)
{
    4cd6:	df 93       	push	r29
    4cd8:	cf 93       	push	r28
    4cda:	00 d0       	rcall	.+0      	; 0x4cdc <ICU_u8CaptureEdgeSelect+0x6>
    4cdc:	00 d0       	rcall	.+0      	; 0x4cde <ICU_u8CaptureEdgeSelect+0x8>
    4cde:	cd b7       	in	r28, 0x3d	; 61
    4ce0:	de b7       	in	r29, 0x3e	; 62
    4ce2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    4ce4:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8CapEdge)
    4ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ce8:	28 2f       	mov	r18, r24
    4cea:	30 e0       	ldi	r19, 0x00	; 0
    4cec:	3c 83       	std	Y+4, r19	; 0x04
    4cee:	2b 83       	std	Y+3, r18	; 0x03
    4cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    4cf2:	9c 81       	ldd	r25, Y+4	; 0x04
    4cf4:	00 97       	sbiw	r24, 0x00	; 0
    4cf6:	31 f0       	breq	.+12     	; 0x4d04 <ICU_u8CaptureEdgeSelect+0x2e>
    4cf8:	2b 81       	ldd	r18, Y+3	; 0x03
    4cfa:	3c 81       	ldd	r19, Y+4	; 0x04
    4cfc:	21 30       	cpi	r18, 0x01	; 1
    4cfe:	31 05       	cpc	r19, r1
    4d00:	49 f0       	breq	.+18     	; 0x4d14 <ICU_u8CaptureEdgeSelect+0x3e>
    4d02:	10 c0       	rjmp	.+32     	; 0x4d24 <ICU_u8CaptureEdgeSelect+0x4e>
	{
	case ICU_FALLING_EDGE: CLR_BIT(TCCR1B,TCCR1B_ICES1);break;
    4d04:	ae e4       	ldi	r26, 0x4E	; 78
    4d06:	b0 e0       	ldi	r27, 0x00	; 0
    4d08:	ee e4       	ldi	r30, 0x4E	; 78
    4d0a:	f0 e0       	ldi	r31, 0x00	; 0
    4d0c:	80 81       	ld	r24, Z
    4d0e:	8f 7b       	andi	r24, 0xBF	; 191
    4d10:	8c 93       	st	X, r24
    4d12:	0a c0       	rjmp	.+20     	; 0x4d28 <ICU_u8CaptureEdgeSelect+0x52>
	case ICU_RISING_EDGE: SET_BIT(TCCR1B,TCCR1B_ICES1);break;
    4d14:	ae e4       	ldi	r26, 0x4E	; 78
    4d16:	b0 e0       	ldi	r27, 0x00	; 0
    4d18:	ee e4       	ldi	r30, 0x4E	; 78
    4d1a:	f0 e0       	ldi	r31, 0x00	; 0
    4d1c:	80 81       	ld	r24, Z
    4d1e:	80 64       	ori	r24, 0x40	; 64
    4d20:	8c 93       	st	X, r24
    4d22:	02 c0       	rjmp	.+4      	; 0x4d28 <ICU_u8CaptureEdgeSelect+0x52>
	default:Local_u8ErrorState = NOTOK;
    4d24:	81 e0       	ldi	r24, 0x01	; 1
    4d26:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    4d28:	89 81       	ldd	r24, Y+1	; 0x01
}
    4d2a:	0f 90       	pop	r0
    4d2c:	0f 90       	pop	r0
    4d2e:	0f 90       	pop	r0
    4d30:	0f 90       	pop	r0
    4d32:	cf 91       	pop	r28
    4d34:	df 91       	pop	r29
    4d36:	08 95       	ret

00004d38 <ICU_voidInterruptEnable>:

void ICU_voidInterruptEnable()
{
    4d38:	df 93       	push	r29
    4d3a:	cf 93       	push	r28
    4d3c:	cd b7       	in	r28, 0x3d	; 61
    4d3e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    4d40:	a9 e5       	ldi	r26, 0x59	; 89
    4d42:	b0 e0       	ldi	r27, 0x00	; 0
    4d44:	e9 e5       	ldi	r30, 0x59	; 89
    4d46:	f0 e0       	ldi	r31, 0x00	; 0
    4d48:	80 81       	ld	r24, Z
    4d4a:	80 62       	ori	r24, 0x20	; 32
    4d4c:	8c 93       	st	X, r24
}
    4d4e:	cf 91       	pop	r28
    4d50:	df 91       	pop	r29
    4d52:	08 95       	ret

00004d54 <ICU_voidInterruptDisable>:

void ICU_voidInterruptDisable()
{
    4d54:	df 93       	push	r29
    4d56:	cf 93       	push	r28
    4d58:	cd b7       	in	r28, 0x3d	; 61
    4d5a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    4d5c:	a9 e5       	ldi	r26, 0x59	; 89
    4d5e:	b0 e0       	ldi	r27, 0x00	; 0
    4d60:	e9 e5       	ldi	r30, 0x59	; 89
    4d62:	f0 e0       	ldi	r31, 0x00	; 0
    4d64:	80 81       	ld	r24, Z
    4d66:	8f 7d       	andi	r24, 0xDF	; 223
    4d68:	8c 93       	st	X, r24
}
    4d6a:	cf 91       	pop	r28
    4d6c:	df 91       	pop	r29
    4d6e:	08 95       	ret

00004d70 <ICU_u8SetCallBack>:

u8 ICU_u8SetCallBack(void (*Notifiction)())
{
    4d70:	df 93       	push	r29
    4d72:	cf 93       	push	r28
    4d74:	00 d0       	rcall	.+0      	; 0x4d76 <ICU_u8SetCallBack+0x6>
    4d76:	0f 92       	push	r0
    4d78:	cd b7       	in	r28, 0x3d	; 61
    4d7a:	de b7       	in	r29, 0x3e	; 62
    4d7c:	9b 83       	std	Y+3, r25	; 0x03
    4d7e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    4d80:	19 82       	std	Y+1, r1	; 0x01
	if(Notifiction != NULL)
    4d82:	8a 81       	ldd	r24, Y+2	; 0x02
    4d84:	9b 81       	ldd	r25, Y+3	; 0x03
    4d86:	00 97       	sbiw	r24, 0x00	; 0
    4d88:	39 f0       	breq	.+14     	; 0x4d98 <ICU_u8SetCallBack+0x28>
	{
		TIMER_pvCallBackFunc[TIMER1_CAPT] = Notifiction;
    4d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    4d8c:	9b 81       	ldd	r25, Y+3	; 0x03
    4d8e:	90 93 d0 01 	sts	0x01D0, r25
    4d92:	80 93 cf 01 	sts	0x01CF, r24
    4d96:	02 c0       	rjmp	.+4      	; 0x4d9c <ICU_u8SetCallBack+0x2c>
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    4d98:	82 e0       	ldi	r24, 0x02	; 2
    4d9a:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    4d9c:	89 81       	ldd	r24, Y+1	; 0x01
}
    4d9e:	0f 90       	pop	r0
    4da0:	0f 90       	pop	r0
    4da2:	0f 90       	pop	r0
    4da4:	cf 91       	pop	r28
    4da6:	df 91       	pop	r29
    4da8:	08 95       	ret

00004daa <TIMER2_voidSetPreloadValue>:

void TIMER2_voidSetPreloadValue(u8 Copy_u8PreloadValue)
{
    4daa:	df 93       	push	r29
    4dac:	cf 93       	push	r28
    4dae:	0f 92       	push	r0
    4db0:	cd b7       	in	r28, 0x3d	; 61
    4db2:	de b7       	in	r29, 0x3e	; 62
    4db4:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_u8PreloadValue;
    4db6:	e4 e4       	ldi	r30, 0x44	; 68
    4db8:	f0 e0       	ldi	r31, 0x00	; 0
    4dba:	89 81       	ldd	r24, Y+1	; 0x01
    4dbc:	80 83       	st	Z, r24
}
    4dbe:	0f 90       	pop	r0
    4dc0:	cf 91       	pop	r28
    4dc2:	df 91       	pop	r29
    4dc4:	08 95       	ret

00004dc6 <TIMER2_voidSetCompMatchValue>:
void TIMER2_voidSetCompMatchValue(u8 Copy_u8CompVal)
{
    4dc6:	df 93       	push	r29
    4dc8:	cf 93       	push	r28
    4dca:	0f 92       	push	r0
    4dcc:	cd b7       	in	r28, 0x3d	; 61
    4dce:	de b7       	in	r29, 0x3e	; 62
    4dd0:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8CompVal;
    4dd2:	e3 e4       	ldi	r30, 0x43	; 67
    4dd4:	f0 e0       	ldi	r31, 0x00	; 0
    4dd6:	89 81       	ldd	r24, Y+1	; 0x01
    4dd8:	80 83       	st	Z, r24
}
    4dda:	0f 90       	pop	r0
    4ddc:	cf 91       	pop	r28
    4dde:	df 91       	pop	r29
    4de0:	08 95       	ret

00004de2 <TIMER2_u8SetCallBack>:
u8 TIMER2_u8SetCallBack(Timer_t *Copy_Timer,void (*Notifiction)())
{
    4de2:	df 93       	push	r29
    4de4:	cf 93       	push	r28
    4de6:	cd b7       	in	r28, 0x3d	; 61
    4de8:	de b7       	in	r29, 0x3e	; 62
    4dea:	27 97       	sbiw	r28, 0x07	; 7
    4dec:	0f b6       	in	r0, 0x3f	; 63
    4dee:	f8 94       	cli
    4df0:	de bf       	out	0x3e, r29	; 62
    4df2:	0f be       	out	0x3f, r0	; 63
    4df4:	cd bf       	out	0x3d, r28	; 61
    4df6:	9b 83       	std	Y+3, r25	; 0x03
    4df8:	8a 83       	std	Y+2, r24	; 0x02
    4dfa:	7d 83       	std	Y+5, r23	; 0x05
    4dfc:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK;
    4dfe:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_Timer!=NULL)||(Notifiction !=NULL))
    4e00:	8a 81       	ldd	r24, Y+2	; 0x02
    4e02:	9b 81       	ldd	r25, Y+3	; 0x03
    4e04:	00 97       	sbiw	r24, 0x00	; 0
    4e06:	21 f4       	brne	.+8      	; 0x4e10 <TIMER2_u8SetCallBack+0x2e>
    4e08:	8c 81       	ldd	r24, Y+4	; 0x04
    4e0a:	9d 81       	ldd	r25, Y+5	; 0x05
    4e0c:	00 97       	sbiw	r24, 0x00	; 0
    4e0e:	f9 f0       	breq	.+62     	; 0x4e4e <TIMER2_u8SetCallBack+0x6c>
	{
		switch(Copy_Timer->TimerMode)
    4e10:	ea 81       	ldd	r30, Y+2	; 0x02
    4e12:	fb 81       	ldd	r31, Y+3	; 0x03
    4e14:	81 81       	ldd	r24, Z+1	; 0x01
    4e16:	28 2f       	mov	r18, r24
    4e18:	30 e0       	ldi	r19, 0x00	; 0
    4e1a:	3f 83       	std	Y+7, r19	; 0x07
    4e1c:	2e 83       	std	Y+6, r18	; 0x06
    4e1e:	8e 81       	ldd	r24, Y+6	; 0x06
    4e20:	9f 81       	ldd	r25, Y+7	; 0x07
    4e22:	00 97       	sbiw	r24, 0x00	; 0
    4e24:	31 f0       	breq	.+12     	; 0x4e32 <TIMER2_u8SetCallBack+0x50>
    4e26:	2e 81       	ldd	r18, Y+6	; 0x06
    4e28:	3f 81       	ldd	r19, Y+7	; 0x07
    4e2a:	21 30       	cpi	r18, 0x01	; 1
    4e2c:	31 05       	cpc	r19, r1
    4e2e:	41 f0       	breq	.+16     	; 0x4e40 <TIMER2_u8SetCallBack+0x5e>
    4e30:	10 c0       	rjmp	.+32     	; 0x4e52 <TIMER2_u8SetCallBack+0x70>
		{
		case TIMER2_NORMAL:TIMER_pvCallBackFunc[TIMER2_OVF] = Notifiction;
    4e32:	8c 81       	ldd	r24, Y+4	; 0x04
    4e34:	9d 81       	ldd	r25, Y+5	; 0x05
    4e36:	90 93 d2 01 	sts	0x01D2, r25
    4e3a:	80 93 d1 01 	sts	0x01D1, r24
    4e3e:	09 c0       	rjmp	.+18     	; 0x4e52 <TIMER2_u8SetCallBack+0x70>
		break;
		case TIMER2_CTC:TIMER_pvCallBackFunc[TIMER2_CMV] = Notifiction;
    4e40:	8c 81       	ldd	r24, Y+4	; 0x04
    4e42:	9d 81       	ldd	r25, Y+5	; 0x05
    4e44:	90 93 d4 01 	sts	0x01D4, r25
    4e48:	80 93 d3 01 	sts	0x01D3, r24
    4e4c:	02 c0       	rjmp	.+4      	; 0x4e52 <TIMER2_u8SetCallBack+0x70>
		break;
		}

	}
	else
		Local_u8ErrorState = NULL_POINTER;
    4e4e:	82 e0       	ldi	r24, 0x02	; 2
    4e50:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    4e52:	89 81       	ldd	r24, Y+1	; 0x01
}
    4e54:	27 96       	adiw	r28, 0x07	; 7
    4e56:	0f b6       	in	r0, 0x3f	; 63
    4e58:	f8 94       	cli
    4e5a:	de bf       	out	0x3e, r29	; 62
    4e5c:	0f be       	out	0x3f, r0	; 63
    4e5e:	cd bf       	out	0x3d, r28	; 61
    4e60:	cf 91       	pop	r28
    4e62:	df 91       	pop	r29
    4e64:	08 95       	ret

00004e66 <TIMER_u8Scheduler>:

u8 TIMER_u8Scheduler(u16 Copy_u16Delay_ms,void  (*Notifiction)(),u8 Copy_u8Periodic)
{
    4e66:	df 93       	push	r29
    4e68:	cf 93       	push	r28
    4e6a:	cd b7       	in	r28, 0x3d	; 61
    4e6c:	de b7       	in	r29, 0x3e	; 62
    4e6e:	6b 97       	sbiw	r28, 0x1b	; 27
    4e70:	0f b6       	in	r0, 0x3f	; 63
    4e72:	f8 94       	cli
    4e74:	de bf       	out	0x3e, r29	; 62
    4e76:	0f be       	out	0x3f, r0	; 63
    4e78:	cd bf       	out	0x3d, r28	; 61
    4e7a:	9b 8b       	std	Y+19, r25	; 0x13
    4e7c:	8a 8b       	std	Y+18, r24	; 0x12
    4e7e:	7d 8b       	std	Y+21, r23	; 0x15
    4e80:	6c 8b       	std	Y+20, r22	; 0x14
    4e82:	4e 8b       	std	Y+22, r20	; 0x16
	u8 Local_u8ErrorState = OK;
    4e84:	1b 86       	std	Y+11, r1	; 0x0b
	u32 Local_u32CounterOvf = 0;
    4e86:	1f 82       	std	Y+7, r1	; 0x07
    4e88:	18 86       	std	Y+8, r1	; 0x08
    4e8a:	19 86       	std	Y+9, r1	; 0x09
    4e8c:	1a 86       	std	Y+10, r1	; 0x0a
	u16 Local_u16PreloadVal = 0;
    4e8e:	1e 82       	std	Y+6, r1	; 0x06
    4e90:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Delay_us = 0;
    4e92:	19 82       	std	Y+1, r1	; 0x01
    4e94:	1a 82       	std	Y+2, r1	; 0x02
    4e96:	1b 82       	std	Y+3, r1	; 0x03
    4e98:	1c 82       	std	Y+4, r1	; 0x04
	Timer_t t1 = {TIMER1,TIMER1_NORMAL,OC1A_DIS,TIMER10_DIV_8,TIMER1_OVF_INT_ENABLE,ICU_FALLING_EDGE};
    4e9a:	ce 01       	movw	r24, r28
    4e9c:	0c 96       	adiw	r24, 0x0c	; 12
    4e9e:	98 8f       	std	Y+24, r25	; 0x18
    4ea0:	8f 8b       	std	Y+23, r24	; 0x17
    4ea2:	ee e9       	ldi	r30, 0x9E	; 158
    4ea4:	f1 e0       	ldi	r31, 0x01	; 1
    4ea6:	fa 8f       	std	Y+26, r31	; 0x1a
    4ea8:	e9 8f       	std	Y+25, r30	; 0x19
    4eaa:	f6 e0       	ldi	r31, 0x06	; 6
    4eac:	fb 8f       	std	Y+27, r31	; 0x1b
    4eae:	e9 8d       	ldd	r30, Y+25	; 0x19
    4eb0:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4eb2:	00 80       	ld	r0, Z
    4eb4:	89 8d       	ldd	r24, Y+25	; 0x19
    4eb6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4eb8:	01 96       	adiw	r24, 0x01	; 1
    4eba:	9a 8f       	std	Y+26, r25	; 0x1a
    4ebc:	89 8f       	std	Y+25, r24	; 0x19
    4ebe:	ef 89       	ldd	r30, Y+23	; 0x17
    4ec0:	f8 8d       	ldd	r31, Y+24	; 0x18
    4ec2:	00 82       	st	Z, r0
    4ec4:	8f 89       	ldd	r24, Y+23	; 0x17
    4ec6:	98 8d       	ldd	r25, Y+24	; 0x18
    4ec8:	01 96       	adiw	r24, 0x01	; 1
    4eca:	98 8f       	std	Y+24, r25	; 0x18
    4ecc:	8f 8b       	std	Y+23, r24	; 0x17
    4ece:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4ed0:	91 50       	subi	r25, 0x01	; 1
    4ed2:	9b 8f       	std	Y+27, r25	; 0x1b
    4ed4:	eb 8d       	ldd	r30, Y+27	; 0x1b
    4ed6:	ee 23       	and	r30, r30
    4ed8:	51 f7       	brne	.-44     	; 0x4eae <TIMER_u8Scheduler+0x48>
	if(Notifiction!=NULL)
    4eda:	8c 89       	ldd	r24, Y+20	; 0x14
    4edc:	9d 89       	ldd	r25, Y+21	; 0x15
    4ede:	00 97       	sbiw	r24, 0x00	; 0
    4ee0:	09 f4       	brne	.+2      	; 0x4ee4 <TIMER_u8Scheduler+0x7e>
    4ee2:	a7 c0       	rjmp	.+334    	; 0x5032 <TIMER_u8Scheduler+0x1cc>
	{
		TIMER_u8Direction = TIMER1_SCHEDULER;
    4ee4:	81 e0       	ldi	r24, 0x01	; 1
    4ee6:	80 93 9c 01 	sts	0x019C, r24
		Local_u32Delay_us = ((u32)(Copy_u16Delay_ms))*1000UL;
    4eea:	8a 89       	ldd	r24, Y+18	; 0x12
    4eec:	9b 89       	ldd	r25, Y+19	; 0x13
    4eee:	cc 01       	movw	r24, r24
    4ef0:	a0 e0       	ldi	r26, 0x00	; 0
    4ef2:	b0 e0       	ldi	r27, 0x00	; 0
    4ef4:	28 ee       	ldi	r18, 0xE8	; 232
    4ef6:	33 e0       	ldi	r19, 0x03	; 3
    4ef8:	40 e0       	ldi	r20, 0x00	; 0
    4efa:	50 e0       	ldi	r21, 0x00	; 0
    4efc:	bc 01       	movw	r22, r24
    4efe:	cd 01       	movw	r24, r26
    4f00:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__mulsi3>
    4f04:	dc 01       	movw	r26, r24
    4f06:	cb 01       	movw	r24, r22
    4f08:	89 83       	std	Y+1, r24	; 0x01
    4f0a:	9a 83       	std	Y+2, r25	; 0x02
    4f0c:	ab 83       	std	Y+3, r26	; 0x03
    4f0e:	bc 83       	std	Y+4, r27	; 0x04

		if(Local_u32Delay_us<= 65535)
    4f10:	89 81       	ldd	r24, Y+1	; 0x01
    4f12:	9a 81       	ldd	r25, Y+2	; 0x02
    4f14:	ab 81       	ldd	r26, Y+3	; 0x03
    4f16:	bc 81       	ldd	r27, Y+4	; 0x04
    4f18:	80 30       	cpi	r24, 0x00	; 0
    4f1a:	f0 e0       	ldi	r31, 0x00	; 0
    4f1c:	9f 07       	cpc	r25, r31
    4f1e:	f1 e0       	ldi	r31, 0x01	; 1
    4f20:	af 07       	cpc	r26, r31
    4f22:	f0 e0       	ldi	r31, 0x00	; 0
    4f24:	bf 07       	cpc	r27, r31
    4f26:	c0 f4       	brcc	.+48     	; 0x4f58 <TIMER_u8Scheduler+0xf2>
		{
			Local_u16PreloadVal = (u16)(65536UL-Local_u32Delay_us);
    4f28:	89 81       	ldd	r24, Y+1	; 0x01
    4f2a:	9a 81       	ldd	r25, Y+2	; 0x02
    4f2c:	90 95       	com	r25
    4f2e:	81 95       	neg	r24
    4f30:	9f 4f       	sbci	r25, 0xFF	; 255
    4f32:	9e 83       	std	Y+6, r25	; 0x06
    4f34:	8d 83       	std	Y+5, r24	; 0x05
			TIMER1_voidSetPreloadValue(Local_u16PreloadVal);
    4f36:	8d 81       	ldd	r24, Y+5	; 0x05
    4f38:	9e 81       	ldd	r25, Y+6	; 0x06
    4f3a:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <TIMER1_voidSetPreloadValue>
			Global_u32CounterOvf = 1;
    4f3e:	81 e0       	ldi	r24, 0x01	; 1
    4f40:	90 e0       	ldi	r25, 0x00	; 0
    4f42:	a0 e0       	ldi	r26, 0x00	; 0
    4f44:	b0 e0       	ldi	r27, 0x00	; 0
    4f46:	80 93 d5 01 	sts	0x01D5, r24
    4f4a:	90 93 d6 01 	sts	0x01D6, r25
    4f4e:	a0 93 d7 01 	sts	0x01D7, r26
    4f52:	b0 93 d8 01 	sts	0x01D8, r27
    4f56:	59 c0       	rjmp	.+178    	; 0x500a <TIMER_u8Scheduler+0x1a4>
		}
		else
		{
			Local_u32CounterOvf = Local_u32Delay_us/65536UL;
    4f58:	89 81       	ldd	r24, Y+1	; 0x01
    4f5a:	9a 81       	ldd	r25, Y+2	; 0x02
    4f5c:	ab 81       	ldd	r26, Y+3	; 0x03
    4f5e:	bc 81       	ldd	r27, Y+4	; 0x04
    4f60:	cd 01       	movw	r24, r26
    4f62:	aa 27       	eor	r26, r26
    4f64:	bb 27       	eor	r27, r27
    4f66:	8f 83       	std	Y+7, r24	; 0x07
    4f68:	98 87       	std	Y+8, r25	; 0x08
    4f6a:	a9 87       	std	Y+9, r26	; 0x09
    4f6c:	ba 87       	std	Y+10, r27	; 0x0a
			if(Local_u32Delay_us%65536UL==0)
    4f6e:	89 81       	ldd	r24, Y+1	; 0x01
    4f70:	9a 81       	ldd	r25, Y+2	; 0x02
    4f72:	ab 81       	ldd	r26, Y+3	; 0x03
    4f74:	bc 81       	ldd	r27, Y+4	; 0x04
    4f76:	a0 70       	andi	r26, 0x00	; 0
    4f78:	b0 70       	andi	r27, 0x00	; 0
    4f7a:	00 97       	sbiw	r24, 0x00	; 0
    4f7c:	a1 05       	cpc	r26, r1
    4f7e:	b1 05       	cpc	r27, r1
    4f80:	99 f4       	brne	.+38     	; 0x4fa8 <TIMER_u8Scheduler+0x142>
			{
				Global_u32CounterOvf = Local_u32CounterOvf;
    4f82:	8f 81       	ldd	r24, Y+7	; 0x07
    4f84:	98 85       	ldd	r25, Y+8	; 0x08
    4f86:	a9 85       	ldd	r26, Y+9	; 0x09
    4f88:	ba 85       	ldd	r27, Y+10	; 0x0a
    4f8a:	80 93 d5 01 	sts	0x01D5, r24
    4f8e:	90 93 d6 01 	sts	0x01D6, r25
    4f92:	a0 93 d7 01 	sts	0x01D7, r26
    4f96:	b0 93 d8 01 	sts	0x01D8, r27
				Local_u16PreloadVal = 0;
    4f9a:	1e 82       	std	Y+6, r1	; 0x06
    4f9c:	1d 82       	std	Y+5, r1	; 0x05
				TIMER1_voidSetPreloadValue(0);
    4f9e:	80 e0       	ldi	r24, 0x00	; 0
    4fa0:	90 e0       	ldi	r25, 0x00	; 0
    4fa2:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <TIMER1_voidSetPreloadValue>
    4fa6:	31 c0       	rjmp	.+98     	; 0x500a <TIMER_u8Scheduler+0x1a4>

			}
			else
			{
				//Calc_dicmal(Local_u32Delay_us,65536)
				Local_u16PreloadVal = (u16)(((Calc_dicmal(Local_u32Delay_us,65536))*65536UL)/1000UL);
    4fa8:	89 81       	ldd	r24, Y+1	; 0x01
    4faa:	9a 81       	ldd	r25, Y+2	; 0x02
    4fac:	ab 81       	ldd	r26, Y+3	; 0x03
    4fae:	bc 81       	ldd	r27, Y+4	; 0x04
    4fb0:	bc 01       	movw	r22, r24
    4fb2:	cd 01       	movw	r24, r26
    4fb4:	20 e0       	ldi	r18, 0x00	; 0
    4fb6:	30 e0       	ldi	r19, 0x00	; 0
    4fb8:	41 e0       	ldi	r20, 0x01	; 1
    4fba:	50 e0       	ldi	r21, 0x00	; 0
    4fbc:	0e 94 ea 29 	call	0x53d4	; 0x53d4 <Calc_dicmal>
    4fc0:	cc 01       	movw	r24, r24
    4fc2:	a0 e0       	ldi	r26, 0x00	; 0
    4fc4:	b0 e0       	ldi	r27, 0x00	; 0
    4fc6:	dc 01       	movw	r26, r24
    4fc8:	99 27       	eor	r25, r25
    4fca:	88 27       	eor	r24, r24
    4fcc:	28 ee       	ldi	r18, 0xE8	; 232
    4fce:	33 e0       	ldi	r19, 0x03	; 3
    4fd0:	40 e0       	ldi	r20, 0x00	; 0
    4fd2:	50 e0       	ldi	r21, 0x00	; 0
    4fd4:	bc 01       	movw	r22, r24
    4fd6:	cd 01       	movw	r24, r26
    4fd8:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <__udivmodsi4>
    4fdc:	da 01       	movw	r26, r20
    4fde:	c9 01       	movw	r24, r18
    4fe0:	9e 83       	std	Y+6, r25	; 0x06
    4fe2:	8d 83       	std	Y+5, r24	; 0x05
				//Local_u16PreloadVal = (u16)((f32)((f32)(((f32)(Local_u32Delay_us))/65536.0)-Local_u32CounterOvf))*1000UL;
				//CLCD_voidWriteNumber(Local_u16PreloadVal);
				Global_u32CounterOvf = Local_u32CounterOvf + 1;
    4fe4:	8f 81       	ldd	r24, Y+7	; 0x07
    4fe6:	98 85       	ldd	r25, Y+8	; 0x08
    4fe8:	a9 85       	ldd	r26, Y+9	; 0x09
    4fea:	ba 85       	ldd	r27, Y+10	; 0x0a
    4fec:	01 96       	adiw	r24, 0x01	; 1
    4fee:	a1 1d       	adc	r26, r1
    4ff0:	b1 1d       	adc	r27, r1
    4ff2:	80 93 d5 01 	sts	0x01D5, r24
    4ff6:	90 93 d6 01 	sts	0x01D6, r25
    4ffa:	a0 93 d7 01 	sts	0x01D7, r26
    4ffe:	b0 93 d8 01 	sts	0x01D8, r27
				TIMER1_voidSetPreloadValue(Local_u16PreloadVal);
    5002:	8d 81       	ldd	r24, Y+5	; 0x05
    5004:	9e 81       	ldd	r25, Y+6	; 0x06
    5006:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <TIMER1_voidSetPreloadValue>

			}
		}
		Global_u16Preload = Local_u16PreloadVal;
    500a:	8d 81       	ldd	r24, Y+5	; 0x05
    500c:	9e 81       	ldd	r25, Y+6	; 0x06
    500e:	90 93 da 01 	sts	0x01DA, r25
    5012:	80 93 d9 01 	sts	0x01D9, r24
		TIMER_pvCallBackFunc[TIMER1_OVF]=Notifiction;
    5016:	8c 89       	ldd	r24, Y+20	; 0x14
    5018:	9d 89       	ldd	r25, Y+21	; 0x15
    501a:	90 93 ca 01 	sts	0x01CA, r25
    501e:	80 93 c9 01 	sts	0x01C9, r24
		Global_u8Preiodic = Copy_u8Periodic;
    5022:	8e 89       	ldd	r24, Y+22	; 0x16
    5024:	80 93 db 01 	sts	0x01DB, r24
		TIMER_voidInit(&t1);
    5028:	ce 01       	movw	r24, r28
    502a:	0c 96       	adiw	r24, 0x0c	; 12
    502c:	0e 94 ef 22 	call	0x45de	; 0x45de <TIMER_voidInit>
    5030:	02 c0       	rjmp	.+4      	; 0x5036 <TIMER_u8Scheduler+0x1d0>
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    5032:	82 e0       	ldi	r24, 0x02	; 2
    5034:	8b 87       	std	Y+11, r24	; 0x0b
	return Local_u8ErrorState;
    5036:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    5038:	6b 96       	adiw	r28, 0x1b	; 27
    503a:	0f b6       	in	r0, 0x3f	; 63
    503c:	f8 94       	cli
    503e:	de bf       	out	0x3e, r29	; 62
    5040:	0f be       	out	0x3f, r0	; 63
    5042:	cd bf       	out	0x3d, r28	; 61
    5044:	cf 91       	pop	r28
    5046:	df 91       	pop	r29
    5048:	08 95       	ret

0000504a <__vector_10>:

// CTC timer/counter0
void __vector_10 (void)	__attribute__((signal));
void __vector_10 (void)
{
    504a:	1f 92       	push	r1
    504c:	0f 92       	push	r0
    504e:	0f b6       	in	r0, 0x3f	; 63
    5050:	0f 92       	push	r0
    5052:	11 24       	eor	r1, r1
    5054:	2f 93       	push	r18
    5056:	3f 93       	push	r19
    5058:	4f 93       	push	r20
    505a:	5f 93       	push	r21
    505c:	6f 93       	push	r22
    505e:	7f 93       	push	r23
    5060:	8f 93       	push	r24
    5062:	9f 93       	push	r25
    5064:	af 93       	push	r26
    5066:	bf 93       	push	r27
    5068:	ef 93       	push	r30
    506a:	ff 93       	push	r31
    506c:	df 93       	push	r29
    506e:	cf 93       	push	r28
    5070:	cd b7       	in	r28, 0x3d	; 61
    5072:	de b7       	in	r29, 0x3e	; 62
	TIMER_pvCallBackFunc[TIMER0_CMV]();
    5074:	e0 91 c7 01 	lds	r30, 0x01C7
    5078:	f0 91 c8 01 	lds	r31, 0x01C8
    507c:	09 95       	icall

}
    507e:	cf 91       	pop	r28
    5080:	df 91       	pop	r29
    5082:	ff 91       	pop	r31
    5084:	ef 91       	pop	r30
    5086:	bf 91       	pop	r27
    5088:	af 91       	pop	r26
    508a:	9f 91       	pop	r25
    508c:	8f 91       	pop	r24
    508e:	7f 91       	pop	r23
    5090:	6f 91       	pop	r22
    5092:	5f 91       	pop	r21
    5094:	4f 91       	pop	r20
    5096:	3f 91       	pop	r19
    5098:	2f 91       	pop	r18
    509a:	0f 90       	pop	r0
    509c:	0f be       	out	0x3f, r0	; 63
    509e:	0f 90       	pop	r0
    50a0:	1f 90       	pop	r1
    50a2:	18 95       	reti

000050a4 <__vector_11>:
// OVF timer/counter0
void __vector_11 (void)	__attribute__((signal));
void __vector_11 (void)
{
    50a4:	1f 92       	push	r1
    50a6:	0f 92       	push	r0
    50a8:	0f b6       	in	r0, 0x3f	; 63
    50aa:	0f 92       	push	r0
    50ac:	11 24       	eor	r1, r1
    50ae:	2f 93       	push	r18
    50b0:	3f 93       	push	r19
    50b2:	4f 93       	push	r20
    50b4:	5f 93       	push	r21
    50b6:	6f 93       	push	r22
    50b8:	7f 93       	push	r23
    50ba:	8f 93       	push	r24
    50bc:	9f 93       	push	r25
    50be:	af 93       	push	r26
    50c0:	bf 93       	push	r27
    50c2:	ef 93       	push	r30
    50c4:	ff 93       	push	r31
    50c6:	df 93       	push	r29
    50c8:	cf 93       	push	r28
    50ca:	cd b7       	in	r28, 0x3d	; 61
    50cc:	de b7       	in	r29, 0x3e	; 62
	TIMER_pvCallBackFunc[TIMER0_OVF]();
    50ce:	e0 91 c5 01 	lds	r30, 0x01C5
    50d2:	f0 91 c6 01 	lds	r31, 0x01C6
    50d6:	09 95       	icall

}
    50d8:	cf 91       	pop	r28
    50da:	df 91       	pop	r29
    50dc:	ff 91       	pop	r31
    50de:	ef 91       	pop	r30
    50e0:	bf 91       	pop	r27
    50e2:	af 91       	pop	r26
    50e4:	9f 91       	pop	r25
    50e6:	8f 91       	pop	r24
    50e8:	7f 91       	pop	r23
    50ea:	6f 91       	pop	r22
    50ec:	5f 91       	pop	r21
    50ee:	4f 91       	pop	r20
    50f0:	3f 91       	pop	r19
    50f2:	2f 91       	pop	r18
    50f4:	0f 90       	pop	r0
    50f6:	0f be       	out	0x3f, r0	; 63
    50f8:	0f 90       	pop	r0
    50fa:	1f 90       	pop	r1
    50fc:	18 95       	reti

000050fe <__vector_7>:
// CTC timer/counter1A
void __vector_7 (void)	__attribute__((signal));
void __vector_7 (void)
{
    50fe:	1f 92       	push	r1
    5100:	0f 92       	push	r0
    5102:	0f b6       	in	r0, 0x3f	; 63
    5104:	0f 92       	push	r0
    5106:	11 24       	eor	r1, r1
    5108:	2f 93       	push	r18
    510a:	3f 93       	push	r19
    510c:	4f 93       	push	r20
    510e:	5f 93       	push	r21
    5110:	6f 93       	push	r22
    5112:	7f 93       	push	r23
    5114:	8f 93       	push	r24
    5116:	9f 93       	push	r25
    5118:	af 93       	push	r26
    511a:	bf 93       	push	r27
    511c:	ef 93       	push	r30
    511e:	ff 93       	push	r31
    5120:	df 93       	push	r29
    5122:	cf 93       	push	r28
    5124:	cd b7       	in	r28, 0x3d	; 61
    5126:	de b7       	in	r29, 0x3e	; 62
	TIMER_pvCallBackFunc[TIMER1A_CMV]();
    5128:	e0 91 cb 01 	lds	r30, 0x01CB
    512c:	f0 91 cc 01 	lds	r31, 0x01CC
    5130:	09 95       	icall
}
    5132:	cf 91       	pop	r28
    5134:	df 91       	pop	r29
    5136:	ff 91       	pop	r31
    5138:	ef 91       	pop	r30
    513a:	bf 91       	pop	r27
    513c:	af 91       	pop	r26
    513e:	9f 91       	pop	r25
    5140:	8f 91       	pop	r24
    5142:	7f 91       	pop	r23
    5144:	6f 91       	pop	r22
    5146:	5f 91       	pop	r21
    5148:	4f 91       	pop	r20
    514a:	3f 91       	pop	r19
    514c:	2f 91       	pop	r18
    514e:	0f 90       	pop	r0
    5150:	0f be       	out	0x3f, r0	; 63
    5152:	0f 90       	pop	r0
    5154:	1f 90       	pop	r1
    5156:	18 95       	reti

00005158 <__vector_8>:
// CTC timer/counter1B
void __vector_8 (void)	__attribute__((signal));
void __vector_8 (void)
{
    5158:	1f 92       	push	r1
    515a:	0f 92       	push	r0
    515c:	0f b6       	in	r0, 0x3f	; 63
    515e:	0f 92       	push	r0
    5160:	11 24       	eor	r1, r1
    5162:	2f 93       	push	r18
    5164:	3f 93       	push	r19
    5166:	4f 93       	push	r20
    5168:	5f 93       	push	r21
    516a:	6f 93       	push	r22
    516c:	7f 93       	push	r23
    516e:	8f 93       	push	r24
    5170:	9f 93       	push	r25
    5172:	af 93       	push	r26
    5174:	bf 93       	push	r27
    5176:	ef 93       	push	r30
    5178:	ff 93       	push	r31
    517a:	df 93       	push	r29
    517c:	cf 93       	push	r28
    517e:	cd b7       	in	r28, 0x3d	; 61
    5180:	de b7       	in	r29, 0x3e	; 62
	TIMER_pvCallBackFunc[TIMER1B_CMV]();
    5182:	e0 91 cd 01 	lds	r30, 0x01CD
    5186:	f0 91 ce 01 	lds	r31, 0x01CE
    518a:	09 95       	icall
}
    518c:	cf 91       	pop	r28
    518e:	df 91       	pop	r29
    5190:	ff 91       	pop	r31
    5192:	ef 91       	pop	r30
    5194:	bf 91       	pop	r27
    5196:	af 91       	pop	r26
    5198:	9f 91       	pop	r25
    519a:	8f 91       	pop	r24
    519c:	7f 91       	pop	r23
    519e:	6f 91       	pop	r22
    51a0:	5f 91       	pop	r21
    51a2:	4f 91       	pop	r20
    51a4:	3f 91       	pop	r19
    51a6:	2f 91       	pop	r18
    51a8:	0f 90       	pop	r0
    51aa:	0f be       	out	0x3f, r0	; 63
    51ac:	0f 90       	pop	r0
    51ae:	1f 90       	pop	r1
    51b0:	18 95       	reti

000051b2 <__vector_9>:
// OVF timer/counter1
void __vector_9 (void)	__attribute__((signal));
void __vector_9 (void)
{
    51b2:	1f 92       	push	r1
    51b4:	0f 92       	push	r0
    51b6:	0f b6       	in	r0, 0x3f	; 63
    51b8:	0f 92       	push	r0
    51ba:	11 24       	eor	r1, r1
    51bc:	2f 93       	push	r18
    51be:	3f 93       	push	r19
    51c0:	4f 93       	push	r20
    51c2:	5f 93       	push	r21
    51c4:	6f 93       	push	r22
    51c6:	7f 93       	push	r23
    51c8:	8f 93       	push	r24
    51ca:	9f 93       	push	r25
    51cc:	af 93       	push	r26
    51ce:	bf 93       	push	r27
    51d0:	ef 93       	push	r30
    51d2:	ff 93       	push	r31
    51d4:	df 93       	push	r29
    51d6:	cf 93       	push	r28
    51d8:	cd b7       	in	r28, 0x3d	; 61
    51da:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_u8Direction == TIMER1_SCHEDULER)
    51dc:	80 91 9c 01 	lds	r24, 0x019C
    51e0:	81 30       	cpi	r24, 0x01	; 1
    51e2:	09 f0       	breq	.+2      	; 0x51e6 <__vector_9+0x34>
    51e4:	54 c0       	rjmp	.+168    	; 0x528e <__vector_9+0xdc>
	{
		static u32 Local_u32Counter = 0;
		Local_u32Counter++;
    51e6:	80 91 dc 01 	lds	r24, 0x01DC
    51ea:	90 91 dd 01 	lds	r25, 0x01DD
    51ee:	a0 91 de 01 	lds	r26, 0x01DE
    51f2:	b0 91 df 01 	lds	r27, 0x01DF
    51f6:	01 96       	adiw	r24, 0x01	; 1
    51f8:	a1 1d       	adc	r26, r1
    51fa:	b1 1d       	adc	r27, r1
    51fc:	80 93 dc 01 	sts	0x01DC, r24
    5200:	90 93 dd 01 	sts	0x01DD, r25
    5204:	a0 93 de 01 	sts	0x01DE, r26
    5208:	b0 93 df 01 	sts	0x01DF, r27
		if(Global_u32CounterOvf == Local_u32Counter)
    520c:	20 91 d5 01 	lds	r18, 0x01D5
    5210:	30 91 d6 01 	lds	r19, 0x01D6
    5214:	40 91 d7 01 	lds	r20, 0x01D7
    5218:	50 91 d8 01 	lds	r21, 0x01D8
    521c:	80 91 dc 01 	lds	r24, 0x01DC
    5220:	90 91 dd 01 	lds	r25, 0x01DD
    5224:	a0 91 de 01 	lds	r26, 0x01DE
    5228:	b0 91 df 01 	lds	r27, 0x01DF
    522c:	28 17       	cp	r18, r24
    522e:	39 07       	cpc	r19, r25
    5230:	4a 07       	cpc	r20, r26
    5232:	5b 07       	cpc	r21, r27
    5234:	a9 f5       	brne	.+106    	; 0x52a0 <__vector_9+0xee>
		{

			if(Global_u8Preiodic == TIMER_DELAY_PERIODIC)
    5236:	80 91 db 01 	lds	r24, 0x01DB
    523a:	81 30       	cpi	r24, 0x01	; 1
    523c:	a1 f4       	brne	.+40     	; 0x5266 <__vector_9+0xb4>
			{
				TIMER_pvCallBackFunc[TIMER1_OVF]();
    523e:	e0 91 c9 01 	lds	r30, 0x01C9
    5242:	f0 91 ca 01 	lds	r31, 0x01CA
    5246:	09 95       	icall
				TIMER1_voidSetPreloadValue(Global_u16Preload);
    5248:	80 91 d9 01 	lds	r24, 0x01D9
    524c:	90 91 da 01 	lds	r25, 0x01DA
    5250:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <TIMER1_voidSetPreloadValue>
				Local_u32Counter = 0;
    5254:	10 92 dc 01 	sts	0x01DC, r1
    5258:	10 92 dd 01 	sts	0x01DD, r1
    525c:	10 92 de 01 	sts	0x01DE, r1
    5260:	10 92 df 01 	sts	0x01DF, r1
    5264:	1d c0       	rjmp	.+58     	; 0x52a0 <__vector_9+0xee>
			}
			else if(Global_u8Preiodic == TIMER_DELAY_NOT_PERIODIC)
    5266:	80 91 db 01 	lds	r24, 0x01DB
    526a:	82 30       	cpi	r24, 0x02	; 2
    526c:	c9 f4       	brne	.+50     	; 0x52a0 <__vector_9+0xee>
			{
				TIMER_pvCallBackFunc[TIMER1_OVF]();
    526e:	e0 91 c9 01 	lds	r30, 0x01C9
    5272:	f0 91 ca 01 	lds	r31, 0x01CA
    5276:	09 95       	icall
				TIMER1_voidDisableOvfInterrupt();
    5278:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <TIMER1_voidDisableOvfInterrupt>
				Local_u32Counter = 0;
    527c:	10 92 dc 01 	sts	0x01DC, r1
    5280:	10 92 dd 01 	sts	0x01DD, r1
    5284:	10 92 de 01 	sts	0x01DE, r1
    5288:	10 92 df 01 	sts	0x01DF, r1
    528c:	09 c0       	rjmp	.+18     	; 0x52a0 <__vector_9+0xee>
			}

		}
	}
	else if(TIMER_u8Direction == TIMER1_ORDINARY)
    528e:	80 91 9c 01 	lds	r24, 0x019C
    5292:	88 23       	and	r24, r24
    5294:	29 f4       	brne	.+10     	; 0x52a0 <__vector_9+0xee>
		TIMER_pvCallBackFunc[TIMER1_OVF]();
    5296:	e0 91 c9 01 	lds	r30, 0x01C9
    529a:	f0 91 ca 01 	lds	r31, 0x01CA
    529e:	09 95       	icall


}
    52a0:	cf 91       	pop	r28
    52a2:	df 91       	pop	r29
    52a4:	ff 91       	pop	r31
    52a6:	ef 91       	pop	r30
    52a8:	bf 91       	pop	r27
    52aa:	af 91       	pop	r26
    52ac:	9f 91       	pop	r25
    52ae:	8f 91       	pop	r24
    52b0:	7f 91       	pop	r23
    52b2:	6f 91       	pop	r22
    52b4:	5f 91       	pop	r21
    52b6:	4f 91       	pop	r20
    52b8:	3f 91       	pop	r19
    52ba:	2f 91       	pop	r18
    52bc:	0f 90       	pop	r0
    52be:	0f be       	out	0x3f, r0	; 63
    52c0:	0f 90       	pop	r0
    52c2:	1f 90       	pop	r1
    52c4:	18 95       	reti

000052c6 <__vector_6>:


// Capture CTC Event timer/counter1
void __vector_6 (void)	__attribute__((signal));
void __vector_6 (void)
{
    52c6:	1f 92       	push	r1
    52c8:	0f 92       	push	r0
    52ca:	0f b6       	in	r0, 0x3f	; 63
    52cc:	0f 92       	push	r0
    52ce:	11 24       	eor	r1, r1
    52d0:	2f 93       	push	r18
    52d2:	3f 93       	push	r19
    52d4:	4f 93       	push	r20
    52d6:	5f 93       	push	r21
    52d8:	6f 93       	push	r22
    52da:	7f 93       	push	r23
    52dc:	8f 93       	push	r24
    52de:	9f 93       	push	r25
    52e0:	af 93       	push	r26
    52e2:	bf 93       	push	r27
    52e4:	ef 93       	push	r30
    52e6:	ff 93       	push	r31
    52e8:	df 93       	push	r29
    52ea:	cf 93       	push	r28
    52ec:	cd b7       	in	r28, 0x3d	; 61
    52ee:	de b7       	in	r29, 0x3e	; 62
	TIMER_pvCallBackFunc[TIMER1_CAPT]();
    52f0:	e0 91 cf 01 	lds	r30, 0x01CF
    52f4:	f0 91 d0 01 	lds	r31, 0x01D0
    52f8:	09 95       	icall
}
    52fa:	cf 91       	pop	r28
    52fc:	df 91       	pop	r29
    52fe:	ff 91       	pop	r31
    5300:	ef 91       	pop	r30
    5302:	bf 91       	pop	r27
    5304:	af 91       	pop	r26
    5306:	9f 91       	pop	r25
    5308:	8f 91       	pop	r24
    530a:	7f 91       	pop	r23
    530c:	6f 91       	pop	r22
    530e:	5f 91       	pop	r21
    5310:	4f 91       	pop	r20
    5312:	3f 91       	pop	r19
    5314:	2f 91       	pop	r18
    5316:	0f 90       	pop	r0
    5318:	0f be       	out	0x3f, r0	; 63
    531a:	0f 90       	pop	r0
    531c:	1f 90       	pop	r1
    531e:	18 95       	reti

00005320 <__vector_5>:

// OVF timer/counter2
void __vector_5 (void)	__attribute__((signal));
void __vector_5 (void)
{
    5320:	1f 92       	push	r1
    5322:	0f 92       	push	r0
    5324:	0f b6       	in	r0, 0x3f	; 63
    5326:	0f 92       	push	r0
    5328:	11 24       	eor	r1, r1
    532a:	2f 93       	push	r18
    532c:	3f 93       	push	r19
    532e:	4f 93       	push	r20
    5330:	5f 93       	push	r21
    5332:	6f 93       	push	r22
    5334:	7f 93       	push	r23
    5336:	8f 93       	push	r24
    5338:	9f 93       	push	r25
    533a:	af 93       	push	r26
    533c:	bf 93       	push	r27
    533e:	ef 93       	push	r30
    5340:	ff 93       	push	r31
    5342:	df 93       	push	r29
    5344:	cf 93       	push	r28
    5346:	cd b7       	in	r28, 0x3d	; 61
    5348:	de b7       	in	r29, 0x3e	; 62
	TIMER_pvCallBackFunc[TIMER2_OVF]();
    534a:	e0 91 d1 01 	lds	r30, 0x01D1
    534e:	f0 91 d2 01 	lds	r31, 0x01D2
    5352:	09 95       	icall
}
    5354:	cf 91       	pop	r28
    5356:	df 91       	pop	r29
    5358:	ff 91       	pop	r31
    535a:	ef 91       	pop	r30
    535c:	bf 91       	pop	r27
    535e:	af 91       	pop	r26
    5360:	9f 91       	pop	r25
    5362:	8f 91       	pop	r24
    5364:	7f 91       	pop	r23
    5366:	6f 91       	pop	r22
    5368:	5f 91       	pop	r21
    536a:	4f 91       	pop	r20
    536c:	3f 91       	pop	r19
    536e:	2f 91       	pop	r18
    5370:	0f 90       	pop	r0
    5372:	0f be       	out	0x3f, r0	; 63
    5374:	0f 90       	pop	r0
    5376:	1f 90       	pop	r1
    5378:	18 95       	reti

0000537a <__vector_4>:
// CTC timer/counter2
void __vector_4 (void)	__attribute__((signal));
void __vector_4 (void)
{
    537a:	1f 92       	push	r1
    537c:	0f 92       	push	r0
    537e:	0f b6       	in	r0, 0x3f	; 63
    5380:	0f 92       	push	r0
    5382:	11 24       	eor	r1, r1
    5384:	2f 93       	push	r18
    5386:	3f 93       	push	r19
    5388:	4f 93       	push	r20
    538a:	5f 93       	push	r21
    538c:	6f 93       	push	r22
    538e:	7f 93       	push	r23
    5390:	8f 93       	push	r24
    5392:	9f 93       	push	r25
    5394:	af 93       	push	r26
    5396:	bf 93       	push	r27
    5398:	ef 93       	push	r30
    539a:	ff 93       	push	r31
    539c:	df 93       	push	r29
    539e:	cf 93       	push	r28
    53a0:	cd b7       	in	r28, 0x3d	; 61
    53a2:	de b7       	in	r29, 0x3e	; 62
	TIMER_pvCallBackFunc[TIMER2_CMV]();
    53a4:	e0 91 d3 01 	lds	r30, 0x01D3
    53a8:	f0 91 d4 01 	lds	r31, 0x01D4
    53ac:	09 95       	icall
}
    53ae:	cf 91       	pop	r28
    53b0:	df 91       	pop	r29
    53b2:	ff 91       	pop	r31
    53b4:	ef 91       	pop	r30
    53b6:	bf 91       	pop	r27
    53b8:	af 91       	pop	r26
    53ba:	9f 91       	pop	r25
    53bc:	8f 91       	pop	r24
    53be:	7f 91       	pop	r23
    53c0:	6f 91       	pop	r22
    53c2:	5f 91       	pop	r21
    53c4:	4f 91       	pop	r20
    53c6:	3f 91       	pop	r19
    53c8:	2f 91       	pop	r18
    53ca:	0f 90       	pop	r0
    53cc:	0f be       	out	0x3f, r0	; 63
    53ce:	0f 90       	pop	r0
    53d0:	1f 90       	pop	r1
    53d2:	18 95       	reti

000053d4 <Calc_dicmal>:
static u16 Calc_dicmal(u32 x,u32 y)
{
    53d4:	df 93       	push	r29
    53d6:	cf 93       	push	r28
    53d8:	cd b7       	in	r28, 0x3d	; 61
    53da:	de b7       	in	r29, 0x3e	; 62
    53dc:	6a 97       	sbiw	r28, 0x1a	; 26
    53de:	0f b6       	in	r0, 0x3f	; 63
    53e0:	f8 94       	cli
    53e2:	de bf       	out	0x3e, r29	; 62
    53e4:	0f be       	out	0x3f, r0	; 63
    53e6:	cd bf       	out	0x3d, r28	; 61
    53e8:	6b 8b       	std	Y+19, r22	; 0x13
    53ea:	7c 8b       	std	Y+20, r23	; 0x14
    53ec:	8d 8b       	std	Y+21, r24	; 0x15
    53ee:	9e 8b       	std	Y+22, r25	; 0x16
    53f0:	2f 8b       	std	Y+23, r18	; 0x17
    53f2:	38 8f       	std	Y+24, r19	; 0x18
    53f4:	49 8f       	std	Y+25, r20	; 0x19
    53f6:	5a 8f       	std	Y+26, r21	; 0x1a
	u32 e=x/y;
    53f8:	8b 89       	ldd	r24, Y+19	; 0x13
    53fa:	9c 89       	ldd	r25, Y+20	; 0x14
    53fc:	ad 89       	ldd	r26, Y+21	; 0x15
    53fe:	be 89       	ldd	r27, Y+22	; 0x16
    5400:	2f 89       	ldd	r18, Y+23	; 0x17
    5402:	38 8d       	ldd	r19, Y+24	; 0x18
    5404:	49 8d       	ldd	r20, Y+25	; 0x19
    5406:	5a 8d       	ldd	r21, Y+26	; 0x1a
    5408:	bc 01       	movw	r22, r24
    540a:	cd 01       	movw	r24, r26
    540c:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <__udivmodsi4>
    5410:	da 01       	movw	r26, r20
    5412:	c9 01       	movw	r24, r18
    5414:	8f 87       	std	Y+15, r24	; 0x0f
    5416:	98 8b       	std	Y+16, r25	; 0x10
    5418:	a9 8b       	std	Y+17, r26	; 0x11
    541a:	ba 8b       	std	Y+18, r27	; 0x12
	u32 s=x%y;
    541c:	8b 89       	ldd	r24, Y+19	; 0x13
    541e:	9c 89       	ldd	r25, Y+20	; 0x14
    5420:	ad 89       	ldd	r26, Y+21	; 0x15
    5422:	be 89       	ldd	r27, Y+22	; 0x16
    5424:	2f 89       	ldd	r18, Y+23	; 0x17
    5426:	38 8d       	ldd	r19, Y+24	; 0x18
    5428:	49 8d       	ldd	r20, Y+25	; 0x19
    542a:	5a 8d       	ldd	r21, Y+26	; 0x1a
    542c:	bc 01       	movw	r22, r24
    542e:	cd 01       	movw	r24, r26
    5430:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <__udivmodsi4>
    5434:	dc 01       	movw	r26, r24
    5436:	cb 01       	movw	r24, r22
    5438:	8b 87       	std	Y+11, r24	; 0x0b
    543a:	9c 87       	std	Y+12, r25	; 0x0c
    543c:	ad 87       	std	Y+13, r26	; 0x0d
    543e:	be 87       	std	Y+14, r27	; 0x0e
	u8 count = 0;
    5440:	1a 86       	std	Y+10, r1	; 0x0a
	u32 n1,trens=0;
    5442:	1a 82       	std	Y+2, r1	; 0x02
    5444:	1b 82       	std	Y+3, r1	; 0x03
    5446:	1c 82       	std	Y+4, r1	; 0x04
    5448:	1d 82       	std	Y+5, r1	; 0x05
	u8 multi=1;
    544a:	81 e0       	ldi	r24, 0x01	; 1
    544c:	89 83       	std	Y+1, r24	; 0x01
	if(s==0)
    544e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5450:	9c 85       	ldd	r25, Y+12	; 0x0c
    5452:	ad 85       	ldd	r26, Y+13	; 0x0d
    5454:	be 85       	ldd	r27, Y+14	; 0x0e
    5456:	00 97       	sbiw	r24, 0x00	; 0
    5458:	a1 05       	cpc	r26, r1
    545a:	b1 05       	cpc	r27, r1
    545c:	09 f4       	brne	.+2      	; 0x5460 <Calc_dicmal+0x8c>
    545e:	7c c0       	rjmp	.+248    	; 0x5558 <Calc_dicmal+0x184>
	}
	else{
		//CLCD_voidWriteNumber(e);
		//CLCD_voidSendData('.');
		do{
			n1 = (x % y);
    5460:	8b 89       	ldd	r24, Y+19	; 0x13
    5462:	9c 89       	ldd	r25, Y+20	; 0x14
    5464:	ad 89       	ldd	r26, Y+21	; 0x15
    5466:	be 89       	ldd	r27, Y+22	; 0x16
    5468:	2f 89       	ldd	r18, Y+23	; 0x17
    546a:	38 8d       	ldd	r19, Y+24	; 0x18
    546c:	49 8d       	ldd	r20, Y+25	; 0x19
    546e:	5a 8d       	ldd	r21, Y+26	; 0x1a
    5470:	bc 01       	movw	r22, r24
    5472:	cd 01       	movw	r24, r26
    5474:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <__udivmodsi4>
    5478:	dc 01       	movw	r26, r24
    547a:	cb 01       	movw	r24, r22
    547c:	8e 83       	std	Y+6, r24	; 0x06
    547e:	9f 83       	std	Y+7, r25	; 0x07
    5480:	a8 87       	std	Y+8, r26	; 0x08
    5482:	b9 87       	std	Y+9, r27	; 0x09
			n1 *= 10;
    5484:	8e 81       	ldd	r24, Y+6	; 0x06
    5486:	9f 81       	ldd	r25, Y+7	; 0x07
    5488:	a8 85       	ldd	r26, Y+8	; 0x08
    548a:	b9 85       	ldd	r27, Y+9	; 0x09
    548c:	2a e0       	ldi	r18, 0x0A	; 10
    548e:	30 e0       	ldi	r19, 0x00	; 0
    5490:	40 e0       	ldi	r20, 0x00	; 0
    5492:	50 e0       	ldi	r21, 0x00	; 0
    5494:	bc 01       	movw	r22, r24
    5496:	cd 01       	movw	r24, r26
    5498:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__mulsi3>
    549c:	dc 01       	movw	r26, r24
    549e:	cb 01       	movw	r24, r22
    54a0:	8e 83       	std	Y+6, r24	; 0x06
    54a2:	9f 83       	std	Y+7, r25	; 0x07
    54a4:	a8 87       	std	Y+8, r26	; 0x08
    54a6:	b9 87       	std	Y+9, r27	; 0x09
			s=(n1/y);
    54a8:	8e 81       	ldd	r24, Y+6	; 0x06
    54aa:	9f 81       	ldd	r25, Y+7	; 0x07
    54ac:	a8 85       	ldd	r26, Y+8	; 0x08
    54ae:	b9 85       	ldd	r27, Y+9	; 0x09
    54b0:	2f 89       	ldd	r18, Y+23	; 0x17
    54b2:	38 8d       	ldd	r19, Y+24	; 0x18
    54b4:	49 8d       	ldd	r20, Y+25	; 0x19
    54b6:	5a 8d       	ldd	r21, Y+26	; 0x1a
    54b8:	bc 01       	movw	r22, r24
    54ba:	cd 01       	movw	r24, r26
    54bc:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <__udivmodsi4>
    54c0:	da 01       	movw	r26, r20
    54c2:	c9 01       	movw	r24, r18
    54c4:	8b 87       	std	Y+11, r24	; 0x0b
    54c6:	9c 87       	std	Y+12, r25	; 0x0c
    54c8:	ad 87       	std	Y+13, r26	; 0x0d
    54ca:	be 87       	std	Y+14, r27	; 0x0e
			e=(n1%y);
    54cc:	8e 81       	ldd	r24, Y+6	; 0x06
    54ce:	9f 81       	ldd	r25, Y+7	; 0x07
    54d0:	a8 85       	ldd	r26, Y+8	; 0x08
    54d2:	b9 85       	ldd	r27, Y+9	; 0x09
    54d4:	2f 89       	ldd	r18, Y+23	; 0x17
    54d6:	38 8d       	ldd	r19, Y+24	; 0x18
    54d8:	49 8d       	ldd	r20, Y+25	; 0x19
    54da:	5a 8d       	ldd	r21, Y+26	; 0x1a
    54dc:	bc 01       	movw	r22, r24
    54de:	cd 01       	movw	r24, r26
    54e0:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <__udivmodsi4>
    54e4:	dc 01       	movw	r26, r24
    54e6:	cb 01       	movw	r24, r22
    54e8:	8f 87       	std	Y+15, r24	; 0x0f
    54ea:	98 8b       	std	Y+16, r25	; 0x10
    54ec:	a9 8b       	std	Y+17, r26	; 0x11
    54ee:	ba 8b       	std	Y+18, r27	; 0x12
			trens = multi*trens + s ;
    54f0:	89 81       	ldd	r24, Y+1	; 0x01
    54f2:	88 2f       	mov	r24, r24
    54f4:	90 e0       	ldi	r25, 0x00	; 0
    54f6:	a0 e0       	ldi	r26, 0x00	; 0
    54f8:	b0 e0       	ldi	r27, 0x00	; 0
    54fa:	2a 81       	ldd	r18, Y+2	; 0x02
    54fc:	3b 81       	ldd	r19, Y+3	; 0x03
    54fe:	4c 81       	ldd	r20, Y+4	; 0x04
    5500:	5d 81       	ldd	r21, Y+5	; 0x05
    5502:	bc 01       	movw	r22, r24
    5504:	cd 01       	movw	r24, r26
    5506:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__mulsi3>
    550a:	9b 01       	movw	r18, r22
    550c:	ac 01       	movw	r20, r24
    550e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5510:	9c 85       	ldd	r25, Y+12	; 0x0c
    5512:	ad 85       	ldd	r26, Y+13	; 0x0d
    5514:	be 85       	ldd	r27, Y+14	; 0x0e
    5516:	82 0f       	add	r24, r18
    5518:	93 1f       	adc	r25, r19
    551a:	a4 1f       	adc	r26, r20
    551c:	b5 1f       	adc	r27, r21
    551e:	8a 83       	std	Y+2, r24	; 0x02
    5520:	9b 83       	std	Y+3, r25	; 0x03
    5522:	ac 83       	std	Y+4, r26	; 0x04
    5524:	bd 83       	std	Y+5, r27	; 0x05
			x=n1;
    5526:	8e 81       	ldd	r24, Y+6	; 0x06
    5528:	9f 81       	ldd	r25, Y+7	; 0x07
    552a:	a8 85       	ldd	r26, Y+8	; 0x08
    552c:	b9 85       	ldd	r27, Y+9	; 0x09
    552e:	8b 8b       	std	Y+19, r24	; 0x13
    5530:	9c 8b       	std	Y+20, r25	; 0x14
    5532:	ad 8b       	std	Y+21, r26	; 0x15
    5534:	be 8b       	std	Y+22, r27	; 0x16
			multi = 10;
    5536:	8a e0       	ldi	r24, 0x0A	; 10
    5538:	89 83       	std	Y+1, r24	; 0x01
			count++;
    553a:	8a 85       	ldd	r24, Y+10	; 0x0a
    553c:	8f 5f       	subi	r24, 0xFF	; 255
    553e:	8a 87       	std	Y+10, r24	; 0x0a
		}while((e!=0)&&(count!=3));
    5540:	8f 85       	ldd	r24, Y+15	; 0x0f
    5542:	98 89       	ldd	r25, Y+16	; 0x10
    5544:	a9 89       	ldd	r26, Y+17	; 0x11
    5546:	ba 89       	ldd	r27, Y+18	; 0x12
    5548:	00 97       	sbiw	r24, 0x00	; 0
    554a:	a1 05       	cpc	r26, r1
    554c:	b1 05       	cpc	r27, r1
    554e:	21 f0       	breq	.+8      	; 0x5558 <Calc_dicmal+0x184>
    5550:	8a 85       	ldd	r24, Y+10	; 0x0a
    5552:	83 30       	cpi	r24, 0x03	; 3
    5554:	09 f0       	breq	.+2      	; 0x5558 <Calc_dicmal+0x184>
    5556:	84 cf       	rjmp	.-248    	; 0x5460 <Calc_dicmal+0x8c>
	}
	return trens;
    5558:	8a 81       	ldd	r24, Y+2	; 0x02
    555a:	9b 81       	ldd	r25, Y+3	; 0x03
}
    555c:	6a 96       	adiw	r28, 0x1a	; 26
    555e:	0f b6       	in	r0, 0x3f	; 63
    5560:	f8 94       	cli
    5562:	de bf       	out	0x3e, r29	; 62
    5564:	0f be       	out	0x3f, r0	; 63
    5566:	cd bf       	out	0x3d, r28	; 61
    5568:	cf 91       	pop	r28
    556a:	df 91       	pop	r29
    556c:	08 95       	ret

0000556e <WDT_voidEnable>:
#include "../MCAL/WDT_interface.h"
#include "../MCAL/WDT_register.h"


void WDT_voidEnable()
{
    556e:	df 93       	push	r29
    5570:	cf 93       	push	r28
    5572:	cd b7       	in	r28, 0x3d	; 61
    5574:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR,WDTCR_WDE);
    5576:	a1 e4       	ldi	r26, 0x41	; 65
    5578:	b0 e0       	ldi	r27, 0x00	; 0
    557a:	e1 e4       	ldi	r30, 0x41	; 65
    557c:	f0 e0       	ldi	r31, 0x00	; 0
    557e:	80 81       	ld	r24, Z
    5580:	88 60       	ori	r24, 0x08	; 8
    5582:	8c 93       	st	X, r24
}
    5584:	cf 91       	pop	r28
    5586:	df 91       	pop	r29
    5588:	08 95       	ret

0000558a <WDT_voidDisable>:
void WDT_voidDisable()
{
    558a:	df 93       	push	r29
    558c:	cf 93       	push	r28
    558e:	cd b7       	in	r28, 0x3d	; 61
    5590:	de b7       	in	r29, 0x3e	; 62
	WDTCR |= (1<<WDTCR_WDTOE)|(1<<WDTCR_WDE);
    5592:	a1 e4       	ldi	r26, 0x41	; 65
    5594:	b0 e0       	ldi	r27, 0x00	; 0
    5596:	e1 e4       	ldi	r30, 0x41	; 65
    5598:	f0 e0       	ldi	r31, 0x00	; 0
    559a:	80 81       	ld	r24, Z
    559c:	88 61       	ori	r24, 0x18	; 24
    559e:	8c 93       	st	X, r24
	WDTCR = 0;
    55a0:	e1 e4       	ldi	r30, 0x41	; 65
    55a2:	f0 e0       	ldi	r31, 0x00	; 0
    55a4:	10 82       	st	Z, r1
}
    55a6:	cf 91       	pop	r28
    55a8:	df 91       	pop	r29
    55aa:	08 95       	ret

000055ac <WDT_u8Sleep>:
u8 WDT_u8Sleep(u8 Copy_u8TimerSleep)
{
    55ac:	df 93       	push	r29
    55ae:	cf 93       	push	r28
    55b0:	00 d0       	rcall	.+0      	; 0x55b2 <WDT_u8Sleep+0x6>
    55b2:	cd b7       	in	r28, 0x3d	; 61
    55b4:	de b7       	in	r29, 0x3e	; 62
    55b6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState =OK;
    55b8:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8TimerSleep<8)
    55ba:	8a 81       	ldd	r24, Y+2	; 0x02
    55bc:	88 30       	cpi	r24, 0x08	; 8
    55be:	80 f4       	brcc	.+32     	; 0x55e0 <WDT_u8Sleep+0x34>
	{
		WDTCR &= MASK_SLEEP_TIME;
    55c0:	a1 e4       	ldi	r26, 0x41	; 65
    55c2:	b0 e0       	ldi	r27, 0x00	; 0
    55c4:	e1 e4       	ldi	r30, 0x41	; 65
    55c6:	f0 e0       	ldi	r31, 0x00	; 0
    55c8:	80 81       	ld	r24, Z
    55ca:	88 7f       	andi	r24, 0xF8	; 248
    55cc:	8c 93       	st	X, r24
		WDTCR |= Copy_u8TimerSleep;
    55ce:	a1 e4       	ldi	r26, 0x41	; 65
    55d0:	b0 e0       	ldi	r27, 0x00	; 0
    55d2:	e1 e4       	ldi	r30, 0x41	; 65
    55d4:	f0 e0       	ldi	r31, 0x00	; 0
    55d6:	90 81       	ld	r25, Z
    55d8:	8a 81       	ldd	r24, Y+2	; 0x02
    55da:	89 2b       	or	r24, r25
    55dc:	8c 93       	st	X, r24
    55de:	02 c0       	rjmp	.+4      	; 0x55e4 <WDT_u8Sleep+0x38>
	}
	else
		Local_u8ErrorState = NOTOK;
    55e0:	81 e0       	ldi	r24, 0x01	; 1
    55e2:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    55e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    55e6:	0f 90       	pop	r0
    55e8:	0f 90       	pop	r0
    55ea:	cf 91       	pop	r28
    55ec:	df 91       	pop	r29
    55ee:	08 95       	ret

000055f0 <main>:
u32 Duty = 0;

u16 ContOvf = 0;

void main()
{
    55f0:	df 93       	push	r29
    55f2:	cf 93       	push	r28
    55f4:	cd b7       	in	r28, 0x3d	; 61
    55f6:	de b7       	in	r29, 0x3e	; 62
    55f8:	61 97       	sbiw	r28, 0x11	; 17
    55fa:	0f b6       	in	r0, 0x3f	; 63
    55fc:	f8 94       	cli
    55fe:	de bf       	out	0x3e, r29	; 62
    5600:	0f be       	out	0x3f, r0	; 63
    5602:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
    5604:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <PORT_voidInit>
	}

*/
	// ICU generic

	Timer_t t0={TIMER0,TIMER0_FAST_PWM,OC0_CCST,TIMER10_DIV_8,TIMER0_INT_DISABLE};
    5608:	86 e0       	ldi	r24, 0x06	; 6
    560a:	fe 01       	movw	r30, r28
    560c:	31 96       	adiw	r30, 0x01	; 1
    560e:	df 01       	movw	r26, r30
    5610:	98 2f       	mov	r25, r24
    5612:	1d 92       	st	X+, r1
    5614:	9a 95       	dec	r25
    5616:	e9 f7       	brne	.-6      	; 0x5612 <main+0x22>
    5618:	82 e0       	ldi	r24, 0x02	; 2
    561a:	8a 83       	std	Y+2, r24	; 0x02
    561c:	82 e0       	ldi	r24, 0x02	; 2
    561e:	8b 83       	std	Y+3, r24	; 0x03
    5620:	82 e0       	ldi	r24, 0x02	; 2
    5622:	8c 83       	std	Y+4, r24	; 0x04
	Timer_t t1={TIMER1,TIMER1_NORMAL,OC1A_DIS,TIMER10_DIV_8,(TIMER1_IC_INT_ENABLE|TIMER1_OVF_INT_ENABLE),ICU_RISING_EDGE};
    5624:	de 01       	movw	r26, r28
    5626:	17 96       	adiw	r26, 0x07	; 7
    5628:	be 87       	std	Y+14, r27	; 0x0e
    562a:	ad 87       	std	Y+13, r26	; 0x0d
    562c:	e4 ea       	ldi	r30, 0xA4	; 164
    562e:	f1 e0       	ldi	r31, 0x01	; 1
    5630:	f8 8b       	std	Y+16, r31	; 0x10
    5632:	ef 87       	std	Y+15, r30	; 0x0f
    5634:	f6 e0       	ldi	r31, 0x06	; 6
    5636:	f9 8b       	std	Y+17, r31	; 0x11
    5638:	af 85       	ldd	r26, Y+15	; 0x0f
    563a:	b8 89       	ldd	r27, Y+16	; 0x10
    563c:	0c 90       	ld	r0, X
    563e:	ef 85       	ldd	r30, Y+15	; 0x0f
    5640:	f8 89       	ldd	r31, Y+16	; 0x10
    5642:	31 96       	adiw	r30, 0x01	; 1
    5644:	f8 8b       	std	Y+16, r31	; 0x10
    5646:	ef 87       	std	Y+15, r30	; 0x0f
    5648:	ad 85       	ldd	r26, Y+13	; 0x0d
    564a:	be 85       	ldd	r27, Y+14	; 0x0e
    564c:	0c 92       	st	X, r0
    564e:	ed 85       	ldd	r30, Y+13	; 0x0d
    5650:	fe 85       	ldd	r31, Y+14	; 0x0e
    5652:	31 96       	adiw	r30, 0x01	; 1
    5654:	fe 87       	std	Y+14, r31	; 0x0e
    5656:	ed 87       	std	Y+13, r30	; 0x0d
    5658:	f9 89       	ldd	r31, Y+17	; 0x11
    565a:	f1 50       	subi	r31, 0x01	; 1
    565c:	f9 8b       	std	Y+17, r31	; 0x11
    565e:	89 89       	ldd	r24, Y+17	; 0x11
    5660:	88 23       	and	r24, r24
    5662:	51 f7       	brne	.-44     	; 0x5638 <main+0x48>

	TIMER_voidInit(&t0);
    5664:	ce 01       	movw	r24, r28
    5666:	01 96       	adiw	r24, 0x01	; 1
    5668:	0e 94 ef 22 	call	0x45de	; 0x45de <TIMER_voidInit>
	TIMER0_voidSetCompMatchValue(64);
    566c:	80 e4       	ldi	r24, 0x40	; 64
    566e:	0e 94 19 25 	call	0x4a32	; 0x4a32 <TIMER0_voidSetCompMatchValue>
	CLCD_voidInit();
    5672:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <CLCD_voidInit>
	TIMER_voidInit(&t1);
    5676:	ce 01       	movw	r24, r28
    5678:	07 96       	adiw	r24, 0x07	; 7
    567a:	0e 94 ef 22 	call	0x45de	; 0x45de <TIMER_voidInit>
	TIMER1_u8SetCallBack(&t1,TimerOvf);
    567e:	ce 01       	movw	r24, r28
    5680:	07 96       	adiw	r24, 0x07	; 7
    5682:	2b e3       	ldi	r18, 0x3B	; 59
    5684:	3c e2       	ldi	r19, 0x2C	; 44
    5686:	b9 01       	movw	r22, r18
    5688:	0e 94 bc 25 	call	0x4b78	; 0x4b78 <TIMER1_u8SetCallBack>
	ICU_u8SetCallBack(HwICU1);
    568c:	8b e4       	ldi	r24, 0x4B	; 75
    568e:	9c e2       	ldi	r25, 0x2C	; 44
    5690:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <ICU_u8SetCallBack>
	//ICU_voidInit();

	GIE_voidEnable();
    5694:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <GIE_voidEnable>

	while(1)
	{
		while((Period == 0)&&(Duty==0));
    5698:	80 91 e0 01 	lds	r24, 0x01E0
    569c:	90 91 e1 01 	lds	r25, 0x01E1
    56a0:	a0 91 e2 01 	lds	r26, 0x01E2
    56a4:	b0 91 e3 01 	lds	r27, 0x01E3
    56a8:	00 97       	sbiw	r24, 0x00	; 0
    56aa:	a1 05       	cpc	r26, r1
    56ac:	b1 05       	cpc	r27, r1
    56ae:	61 f4       	brne	.+24     	; 0x56c8 <main+0xd8>
    56b0:	80 91 ec 01 	lds	r24, 0x01EC
    56b4:	90 91 ed 01 	lds	r25, 0x01ED
    56b8:	a0 91 ee 01 	lds	r26, 0x01EE
    56bc:	b0 91 ef 01 	lds	r27, 0x01EF
    56c0:	00 97       	sbiw	r24, 0x00	; 0
    56c2:	a1 05       	cpc	r26, r1
    56c4:	b1 05       	cpc	r27, r1
    56c6:	41 f3       	breq	.-48     	; 0x5698 <main+0xa8>
		CLCD_voidGoToXY(0,0);
    56c8:	80 e0       	ldi	r24, 0x00	; 0
    56ca:	60 e0       	ldi	r22, 0x00	; 0
    56cc:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>
		CLCD_voidSendString("Period : ");
    56d0:	80 e6       	ldi	r24, 0x60	; 96
    56d2:	90 e0       	ldi	r25, 0x00	; 0
    56d4:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
		CLCD_voidWriteNumber(Period);
    56d8:	80 91 e0 01 	lds	r24, 0x01E0
    56dc:	90 91 e1 01 	lds	r25, 0x01E1
    56e0:	a0 91 e2 01 	lds	r26, 0x01E2
    56e4:	b0 91 e3 01 	lds	r27, 0x01E3
    56e8:	bc 01       	movw	r22, r24
    56ea:	cd 01       	movw	r24, r26
    56ec:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <CLCD_voidWriteNumber>
		CLCD_voidGoToXY(1,0);
    56f0:	81 e0       	ldi	r24, 0x01	; 1
    56f2:	60 e0       	ldi	r22, 0x00	; 0
    56f4:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidGoToXY>
		CLCD_voidSendString("Duty : ");
    56f8:	8a e6       	ldi	r24, 0x6A	; 106
    56fa:	90 e0       	ldi	r25, 0x00	; 0
    56fc:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <CLCD_voidSendString>
		CLCD_voidWriteNumber(Duty);
    5700:	80 91 ec 01 	lds	r24, 0x01EC
    5704:	90 91 ed 01 	lds	r25, 0x01ED
    5708:	a0 91 ee 01 	lds	r26, 0x01EE
    570c:	b0 91 ef 01 	lds	r27, 0x01EF
    5710:	bc 01       	movw	r22, r24
    5712:	cd 01       	movw	r24, r26
    5714:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <CLCD_voidWriteNumber>
		CLCD_voidSendData(' ');
    5718:	80 e2       	ldi	r24, 0x20	; 32
    571a:	0e 94 41 0b 	call	0x1682	; 0x1682 <CLCD_voidSendData>
		CLCD_voidWriteNumber(ContOvf);
    571e:	80 91 f0 01 	lds	r24, 0x01F0
    5722:	90 91 f1 01 	lds	r25, 0x01F1
    5726:	cc 01       	movw	r24, r24
    5728:	a0 e0       	ldi	r26, 0x00	; 0
    572a:	b0 e0       	ldi	r27, 0x00	; 0
    572c:	bc 01       	movw	r22, r24
    572e:	cd 01       	movw	r24, r26
    5730:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <CLCD_voidWriteNumber>
    5734:	b1 cf       	rjmp	.-158    	; 0x5698 <main+0xa8>

00005736 <HwICU>:
	*/
	while(1);
}

void HwICU()
{
    5736:	ef 92       	push	r14
    5738:	ff 92       	push	r15
    573a:	0f 93       	push	r16
    573c:	1f 93       	push	r17
    573e:	df 93       	push	r29
    5740:	cf 93       	push	r28
    5742:	cd b7       	in	r28, 0x3d	; 61
    5744:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8Cnt = 0;
	Local_u8Cnt++;
    5746:	80 91 f2 01 	lds	r24, 0x01F2
    574a:	8f 5f       	subi	r24, 0xFF	; 255
    574c:	80 93 f2 01 	sts	0x01F2, r24
	if(Local_u8Cnt == 1)
    5750:	80 91 f2 01 	lds	r24, 0x01F2
    5754:	81 30       	cpi	r24, 0x01	; 1
    5756:	71 f4       	brne	.+28     	; 0x5774 <HwICU+0x3e>
	{
		Start = ICU_u16ReadInputCapture();
    5758:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <ICU_u16ReadInputCapture>
    575c:	cc 01       	movw	r24, r24
    575e:	a0 e0       	ldi	r26, 0x00	; 0
    5760:	b0 e0       	ldi	r27, 0x00	; 0
    5762:	80 93 e4 01 	sts	0x01E4, r24
    5766:	90 93 e5 01 	sts	0x01E5, r25
    576a:	a0 93 e6 01 	sts	0x01E6, r26
    576e:	b0 93 e7 01 	sts	0x01E7, r27
    5772:	68 c0       	rjmp	.+208    	; 0x5844 <HwICU+0x10e>
	}
	else if(Local_u8Cnt == 2)
    5774:	80 91 f2 01 	lds	r24, 0x01F2
    5778:	82 30       	cpi	r24, 0x02	; 2
    577a:	89 f5       	brne	.+98     	; 0x57de <HwICU+0xa8>
	{
		End = ICU_u16ReadInputCapture();
    577c:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <ICU_u16ReadInputCapture>
    5780:	cc 01       	movw	r24, r24
    5782:	a0 e0       	ldi	r26, 0x00	; 0
    5784:	b0 e0       	ldi	r27, 0x00	; 0
    5786:	80 93 e8 01 	sts	0x01E8, r24
    578a:	90 93 e9 01 	sts	0x01E9, r25
    578e:	a0 93 ea 01 	sts	0x01EA, r26
    5792:	b0 93 eb 01 	sts	0x01EB, r27
		Period = End - Start;
    5796:	20 91 e8 01 	lds	r18, 0x01E8
    579a:	30 91 e9 01 	lds	r19, 0x01E9
    579e:	40 91 ea 01 	lds	r20, 0x01EA
    57a2:	50 91 eb 01 	lds	r21, 0x01EB
    57a6:	80 91 e4 01 	lds	r24, 0x01E4
    57aa:	90 91 e5 01 	lds	r25, 0x01E5
    57ae:	a0 91 e6 01 	lds	r26, 0x01E6
    57b2:	b0 91 e7 01 	lds	r27, 0x01E7
    57b6:	79 01       	movw	r14, r18
    57b8:	8a 01       	movw	r16, r20
    57ba:	e8 1a       	sub	r14, r24
    57bc:	f9 0a       	sbc	r15, r25
    57be:	0a 0b       	sbc	r16, r26
    57c0:	1b 0b       	sbc	r17, r27
    57c2:	d8 01       	movw	r26, r16
    57c4:	c7 01       	movw	r24, r14
    57c6:	80 93 e0 01 	sts	0x01E0, r24
    57ca:	90 93 e1 01 	sts	0x01E1, r25
    57ce:	a0 93 e2 01 	sts	0x01E2, r26
    57d2:	b0 93 e3 01 	sts	0x01E3, r27
		ICU_u8CaptureEdgeSelect(ICU_FALLING_EDGE);
    57d6:	80 e0       	ldi	r24, 0x00	; 0
    57d8:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <ICU_u8CaptureEdgeSelect>
    57dc:	33 c0       	rjmp	.+102    	; 0x5844 <HwICU+0x10e>
	}
	else if(Local_u8Cnt == 3)
    57de:	80 91 f2 01 	lds	r24, 0x01F2
    57e2:	83 30       	cpi	r24, 0x03	; 3
    57e4:	79 f5       	brne	.+94     	; 0x5844 <HwICU+0x10e>
	{
		Start = ICU_u16ReadInputCapture();
    57e6:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <ICU_u16ReadInputCapture>
    57ea:	cc 01       	movw	r24, r24
    57ec:	a0 e0       	ldi	r26, 0x00	; 0
    57ee:	b0 e0       	ldi	r27, 0x00	; 0
    57f0:	80 93 e4 01 	sts	0x01E4, r24
    57f4:	90 93 e5 01 	sts	0x01E5, r25
    57f8:	a0 93 e6 01 	sts	0x01E6, r26
    57fc:	b0 93 e7 01 	sts	0x01E7, r27
		Duty = Start - End;
    5800:	20 91 e4 01 	lds	r18, 0x01E4
    5804:	30 91 e5 01 	lds	r19, 0x01E5
    5808:	40 91 e6 01 	lds	r20, 0x01E6
    580c:	50 91 e7 01 	lds	r21, 0x01E7
    5810:	80 91 e8 01 	lds	r24, 0x01E8
    5814:	90 91 e9 01 	lds	r25, 0x01E9
    5818:	a0 91 ea 01 	lds	r26, 0x01EA
    581c:	b0 91 eb 01 	lds	r27, 0x01EB
    5820:	79 01       	movw	r14, r18
    5822:	8a 01       	movw	r16, r20
    5824:	e8 1a       	sub	r14, r24
    5826:	f9 0a       	sbc	r15, r25
    5828:	0a 0b       	sbc	r16, r26
    582a:	1b 0b       	sbc	r17, r27
    582c:	d8 01       	movw	r26, r16
    582e:	c7 01       	movw	r24, r14
    5830:	80 93 ec 01 	sts	0x01EC, r24
    5834:	90 93 ed 01 	sts	0x01ED, r25
    5838:	a0 93 ee 01 	sts	0x01EE, r26
    583c:	b0 93 ef 01 	sts	0x01EF, r27
		ICU_voidInterruptDisable();
    5840:	0e 94 aa 26 	call	0x4d54	; 0x4d54 <ICU_voidInterruptDisable>
	}

}
    5844:	cf 91       	pop	r28
    5846:	df 91       	pop	r29
    5848:	1f 91       	pop	r17
    584a:	0f 91       	pop	r16
    584c:	ff 90       	pop	r15
    584e:	ef 90       	pop	r14
    5850:	08 95       	ret

00005852 <schedFunc>:


void schedFunc()
{
    5852:	df 93       	push	r29
    5854:	cf 93       	push	r28
    5856:	cd b7       	in	r28, 0x3d	; 61
    5858:	de b7       	in	r29, 0x3e	; 62
	static u8 LocalState = 1;
	TOG_BIT(LocalState,0);
    585a:	80 91 9d 01 	lds	r24, 0x019D
    585e:	91 e0       	ldi	r25, 0x01	; 1
    5860:	89 27       	eor	r24, r25
    5862:	80 93 9d 01 	sts	0x019D, r24
	DIO_u8SetPinValue(DIO_PORTA,DIO_PIN7,1);
    5866:	80 e0       	ldi	r24, 0x00	; 0
    5868:	67 e0       	ldi	r22, 0x07	; 7
    586a:	41 e0       	ldi	r20, 0x01	; 1
    586c:	0e 94 31 10 	call	0x2062	; 0x2062 <DIO_u8SetPinValue>

}
    5870:	cf 91       	pop	r28
    5872:	df 91       	pop	r29
    5874:	08 95       	ret

00005876 <TimerOvf>:

void TimerOvf()
{
    5876:	df 93       	push	r29
    5878:	cf 93       	push	r28
    587a:	cd b7       	in	r28, 0x3d	; 61
    587c:	de b7       	in	r29, 0x3e	; 62
	ContOvf++;
    587e:	80 91 f0 01 	lds	r24, 0x01F0
    5882:	90 91 f1 01 	lds	r25, 0x01F1
    5886:	01 96       	adiw	r24, 0x01	; 1
    5888:	90 93 f1 01 	sts	0x01F1, r25
    588c:	80 93 f0 01 	sts	0x01F0, r24
}
    5890:	cf 91       	pop	r28
    5892:	df 91       	pop	r29
    5894:	08 95       	ret

00005896 <HwICU1>:
void HwICU1()
{
    5896:	df 93       	push	r29
    5898:	cf 93       	push	r28
    589a:	cd b7       	in	r28, 0x3d	; 61
    589c:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8Cnt = 0;
	Local_u8Cnt++;
    589e:	80 91 f3 01 	lds	r24, 0x01F3
    58a2:	8f 5f       	subi	r24, 0xFF	; 255
    58a4:	80 93 f3 01 	sts	0x01F3, r24
	if(Local_u8Cnt == 1)
    58a8:	80 91 f3 01 	lds	r24, 0x01F3
    58ac:	81 30       	cpi	r24, 0x01	; 1
    58ae:	71 f4       	brne	.+28     	; 0x58cc <HwICU1+0x36>
	{
		Start = ICU_u16ReadInputCapture();
    58b0:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <ICU_u16ReadInputCapture>
    58b4:	cc 01       	movw	r24, r24
    58b6:	a0 e0       	ldi	r26, 0x00	; 0
    58b8:	b0 e0       	ldi	r27, 0x00	; 0
    58ba:	80 93 e4 01 	sts	0x01E4, r24
    58be:	90 93 e5 01 	sts	0x01E5, r25
    58c2:	a0 93 e6 01 	sts	0x01E6, r26
    58c6:	b0 93 e7 01 	sts	0x01E7, r27
    58ca:	91 c0       	rjmp	.+290    	; 0x59ee <HwICU1+0x158>
	}
	else if(Local_u8Cnt == 2)
    58cc:	80 91 f3 01 	lds	r24, 0x01F3
    58d0:	82 30       	cpi	r24, 0x02	; 2
    58d2:	e9 f5       	brne	.+122    	; 0x594e <HwICU1+0xb8>
	{
		End = ICU_u16ReadInputCapture();
    58d4:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <ICU_u16ReadInputCapture>
    58d8:	cc 01       	movw	r24, r24
    58da:	a0 e0       	ldi	r26, 0x00	; 0
    58dc:	b0 e0       	ldi	r27, 0x00	; 0
    58de:	80 93 e8 01 	sts	0x01E8, r24
    58e2:	90 93 e9 01 	sts	0x01E9, r25
    58e6:	a0 93 ea 01 	sts	0x01EA, r26
    58ea:	b0 93 eb 01 	sts	0x01EB, r27
		Period = (u16)(((u32)((u32)((u32)ContOvf * 65536UL) + (u32)End)) - ((u32)Start));
    58ee:	80 91 f0 01 	lds	r24, 0x01F0
    58f2:	90 91 f1 01 	lds	r25, 0x01F1
    58f6:	cc 01       	movw	r24, r24
    58f8:	a0 e0       	ldi	r26, 0x00	; 0
    58fa:	b0 e0       	ldi	r27, 0x00	; 0
    58fc:	dc 01       	movw	r26, r24
    58fe:	99 27       	eor	r25, r25
    5900:	88 27       	eor	r24, r24
    5902:	9c 01       	movw	r18, r24
    5904:	80 91 e8 01 	lds	r24, 0x01E8
    5908:	90 91 e9 01 	lds	r25, 0x01E9
    590c:	a0 91 ea 01 	lds	r26, 0x01EA
    5910:	b0 91 eb 01 	lds	r27, 0x01EB
    5914:	28 0f       	add	r18, r24
    5916:	39 1f       	adc	r19, r25
    5918:	80 91 e4 01 	lds	r24, 0x01E4
    591c:	90 91 e5 01 	lds	r25, 0x01E5
    5920:	a0 91 e6 01 	lds	r26, 0x01E6
    5924:	b0 91 e7 01 	lds	r27, 0x01E7
    5928:	a9 01       	movw	r20, r18
    592a:	48 1b       	sub	r20, r24
    592c:	59 0b       	sbc	r21, r25
    592e:	ca 01       	movw	r24, r20
    5930:	cc 01       	movw	r24, r24
    5932:	a0 e0       	ldi	r26, 0x00	; 0
    5934:	b0 e0       	ldi	r27, 0x00	; 0
    5936:	80 93 e0 01 	sts	0x01E0, r24
    593a:	90 93 e1 01 	sts	0x01E1, r25
    593e:	a0 93 e2 01 	sts	0x01E2, r26
    5942:	b0 93 e3 01 	sts	0x01E3, r27
		ICU_u8CaptureEdgeSelect(ICU_FALLING_EDGE);
    5946:	80 e0       	ldi	r24, 0x00	; 0
    5948:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <ICU_u8CaptureEdgeSelect>
    594c:	50 c0       	rjmp	.+160    	; 0x59ee <HwICU1+0x158>
	}
	else if(Local_u8Cnt == 3)
    594e:	80 91 f3 01 	lds	r24, 0x01F3
    5952:	83 30       	cpi	r24, 0x03	; 3
    5954:	09 f0       	breq	.+2      	; 0x5958 <HwICU1+0xc2>
    5956:	4b c0       	rjmp	.+150    	; 0x59ee <HwICU1+0x158>
	{
		Start = ICU_u16ReadInputCapture();
    5958:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <ICU_u16ReadInputCapture>
    595c:	cc 01       	movw	r24, r24
    595e:	a0 e0       	ldi	r26, 0x00	; 0
    5960:	b0 e0       	ldi	r27, 0x00	; 0
    5962:	80 93 e4 01 	sts	0x01E4, r24
    5966:	90 93 e5 01 	sts	0x01E5, r25
    596a:	a0 93 e6 01 	sts	0x01E6, r26
    596e:	b0 93 e7 01 	sts	0x01E7, r27
		Duty =(u16)(((u32)((u32)((u32)ContOvf * 65536UL) + (u32)Start)) - ((u32)((u32)((u32)ContOvf * 65536UL) + (u32)End)));
    5972:	80 91 f0 01 	lds	r24, 0x01F0
    5976:	90 91 f1 01 	lds	r25, 0x01F1
    597a:	cc 01       	movw	r24, r24
    597c:	a0 e0       	ldi	r26, 0x00	; 0
    597e:	b0 e0       	ldi	r27, 0x00	; 0
    5980:	dc 01       	movw	r26, r24
    5982:	99 27       	eor	r25, r25
    5984:	88 27       	eor	r24, r24
    5986:	9c 01       	movw	r18, r24
    5988:	80 91 e4 01 	lds	r24, 0x01E4
    598c:	90 91 e5 01 	lds	r25, 0x01E5
    5990:	a0 91 e6 01 	lds	r26, 0x01E6
    5994:	b0 91 e7 01 	lds	r27, 0x01E7
    5998:	a9 01       	movw	r20, r18
    599a:	48 0f       	add	r20, r24
    599c:	59 1f       	adc	r21, r25
    599e:	80 91 f0 01 	lds	r24, 0x01F0
    59a2:	90 91 f1 01 	lds	r25, 0x01F1
    59a6:	cc 01       	movw	r24, r24
    59a8:	a0 e0       	ldi	r26, 0x00	; 0
    59aa:	b0 e0       	ldi	r27, 0x00	; 0
    59ac:	dc 01       	movw	r26, r24
    59ae:	99 27       	eor	r25, r25
    59b0:	88 27       	eor	r24, r24
    59b2:	9c 01       	movw	r18, r24
    59b4:	80 91 e8 01 	lds	r24, 0x01E8
    59b8:	90 91 e9 01 	lds	r25, 0x01E9
    59bc:	a0 91 ea 01 	lds	r26, 0x01EA
    59c0:	b0 91 eb 01 	lds	r27, 0x01EB
    59c4:	82 0f       	add	r24, r18
    59c6:	93 1f       	adc	r25, r19
    59c8:	9a 01       	movw	r18, r20
    59ca:	28 1b       	sub	r18, r24
    59cc:	39 0b       	sbc	r19, r25
    59ce:	c9 01       	movw	r24, r18
    59d0:	cc 01       	movw	r24, r24
    59d2:	a0 e0       	ldi	r26, 0x00	; 0
    59d4:	b0 e0       	ldi	r27, 0x00	; 0
    59d6:	80 93 ec 01 	sts	0x01EC, r24
    59da:	90 93 ed 01 	sts	0x01ED, r25
    59de:	a0 93 ee 01 	sts	0x01EE, r26
    59e2:	b0 93 ef 01 	sts	0x01EF, r27
		TIMER1_voidDisableOvfInterrupt();
    59e6:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <TIMER1_voidDisableOvfInterrupt>
		ICU_voidInterruptDisable();
    59ea:	0e 94 aa 26 	call	0x4d54	; 0x4d54 <ICU_voidInterruptDisable>
	}
}
    59ee:	cf 91       	pop	r28
    59f0:	df 91       	pop	r29
    59f2:	08 95       	ret

000059f4 <SwICU1>:

void SwICU1()
{
    59f4:	ef 92       	push	r14
    59f6:	ff 92       	push	r15
    59f8:	0f 93       	push	r16
    59fa:	1f 93       	push	r17
    59fc:	df 93       	push	r29
    59fe:	cf 93       	push	r28
    5a00:	cd b7       	in	r28, 0x3d	; 61
    5a02:	de b7       	in	r29, 0x3e	; 62

	static u8 Local_u8Counter=0;
	Local_u8Counter++;
    5a04:	80 91 f4 01 	lds	r24, 0x01F4
    5a08:	8f 5f       	subi	r24, 0xFF	; 255
    5a0a:	80 93 f4 01 	sts	0x01F4, r24
	if(Local_u8Counter==1)
    5a0e:	80 91 f4 01 	lds	r24, 0x01F4
    5a12:	81 30       	cpi	r24, 0x01	; 1
    5a14:	29 f4       	brne	.+10     	; 0x5a20 <SwICU1+0x2c>
	{
		// first Rising edge
		TIMER1_voidSetPreloadValue(0);
    5a16:	80 e0       	ldi	r24, 0x00	; 0
    5a18:	90 e0       	ldi	r25, 0x00	; 0
    5a1a:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <TIMER1_voidSetPreloadValue>
    5a1e:	96 c0       	rjmp	.+300    	; 0x5b4c <SwICU1+0x158>
	}
	else if(Local_u8Counter==2)
    5a20:	80 91 f4 01 	lds	r24, 0x01F4
    5a24:	82 30       	cpi	r24, 0x02	; 2
    5a26:	79 f5       	brne	.+94     	; 0x5a86 <SwICU1+0x92>
	{
		Period=TIMER1_u16ReadTimerValue();
    5a28:	0e 94 8d 25 	call	0x4b1a	; 0x4b1a <TIMER1_u16ReadTimerValue>
    5a2c:	cc 01       	movw	r24, r24
    5a2e:	a0 e0       	ldi	r26, 0x00	; 0
    5a30:	b0 e0       	ldi	r27, 0x00	; 0
    5a32:	80 93 e0 01 	sts	0x01E0, r24
    5a36:	90 93 e1 01 	sts	0x01E1, r25
    5a3a:	a0 93 e2 01 	sts	0x01E2, r26
    5a3e:	b0 93 e3 01 	sts	0x01E3, r27
		Period=Period+ContOvf*65536UL;
    5a42:	80 91 f0 01 	lds	r24, 0x01F0
    5a46:	90 91 f1 01 	lds	r25, 0x01F1
    5a4a:	cc 01       	movw	r24, r24
    5a4c:	a0 e0       	ldi	r26, 0x00	; 0
    5a4e:	b0 e0       	ldi	r27, 0x00	; 0
    5a50:	ac 01       	movw	r20, r24
    5a52:	33 27       	eor	r19, r19
    5a54:	22 27       	eor	r18, r18
    5a56:	80 91 e0 01 	lds	r24, 0x01E0
    5a5a:	90 91 e1 01 	lds	r25, 0x01E1
    5a5e:	a0 91 e2 01 	lds	r26, 0x01E2
    5a62:	b0 91 e3 01 	lds	r27, 0x01E3
    5a66:	82 0f       	add	r24, r18
    5a68:	93 1f       	adc	r25, r19
    5a6a:	a4 1f       	adc	r26, r20
    5a6c:	b5 1f       	adc	r27, r21
    5a6e:	80 93 e0 01 	sts	0x01E0, r24
    5a72:	90 93 e1 01 	sts	0x01E1, r25
    5a76:	a0 93 e2 01 	sts	0x01E2, r26
    5a7a:	b0 93 e3 01 	sts	0x01E3, r27
		//change triggering to Falling Edge
		EXTI_u8Int0ChangeSence(EXTI0_FALLING_ADGE);
    5a7e:	82 e0       	ldi	r24, 0x02	; 2
    5a80:	0e 94 12 14 	call	0x2824	; 0x2824 <EXTI_u8Int0ChangeSence>
    5a84:	63 c0       	rjmp	.+198    	; 0x5b4c <SwICU1+0x158>
	}
	else if(Local_u8Counter==3)
    5a86:	80 91 f4 01 	lds	r24, 0x01F4
    5a8a:	83 30       	cpi	r24, 0x03	; 3
    5a8c:	09 f0       	breq	.+2      	; 0x5a90 <SwICU1+0x9c>
    5a8e:	5e c0       	rjmp	.+188    	; 0x5b4c <SwICU1+0x158>
	{
		/*Timer reading Now is Period + On ticks*/
		Duty=TIMER1_u16ReadTimerValue();
    5a90:	0e 94 8d 25 	call	0x4b1a	; 0x4b1a <TIMER1_u16ReadTimerValue>
    5a94:	cc 01       	movw	r24, r24
    5a96:	a0 e0       	ldi	r26, 0x00	; 0
    5a98:	b0 e0       	ldi	r27, 0x00	; 0
    5a9a:	80 93 ec 01 	sts	0x01EC, r24
    5a9e:	90 93 ed 01 	sts	0x01ED, r25
    5aa2:	a0 93 ee 01 	sts	0x01EE, r26
    5aa6:	b0 93 ef 01 	sts	0x01EF, r27
		Duty=(Duty+ContOvf*65536UL);
    5aaa:	80 91 f0 01 	lds	r24, 0x01F0
    5aae:	90 91 f1 01 	lds	r25, 0x01F1
    5ab2:	cc 01       	movw	r24, r24
    5ab4:	a0 e0       	ldi	r26, 0x00	; 0
    5ab6:	b0 e0       	ldi	r27, 0x00	; 0
    5ab8:	ac 01       	movw	r20, r24
    5aba:	33 27       	eor	r19, r19
    5abc:	22 27       	eor	r18, r18
    5abe:	80 91 ec 01 	lds	r24, 0x01EC
    5ac2:	90 91 ed 01 	lds	r25, 0x01ED
    5ac6:	a0 91 ee 01 	lds	r26, 0x01EE
    5aca:	b0 91 ef 01 	lds	r27, 0x01EF
    5ace:	82 0f       	add	r24, r18
    5ad0:	93 1f       	adc	r25, r19
    5ad2:	a4 1f       	adc	r26, r20
    5ad4:	b5 1f       	adc	r27, r21
    5ad6:	80 93 ec 01 	sts	0x01EC, r24
    5ada:	90 93 ed 01 	sts	0x01ED, r25
    5ade:	a0 93 ee 01 	sts	0x01EE, r26
    5ae2:	b0 93 ef 01 	sts	0x01EF, r27
		Duty-=(Period+ContOvf*65536UL);
    5ae6:	e0 90 ec 01 	lds	r14, 0x01EC
    5aea:	f0 90 ed 01 	lds	r15, 0x01ED
    5aee:	00 91 ee 01 	lds	r16, 0x01EE
    5af2:	10 91 ef 01 	lds	r17, 0x01EF
    5af6:	80 91 f0 01 	lds	r24, 0x01F0
    5afa:	90 91 f1 01 	lds	r25, 0x01F1
    5afe:	cc 01       	movw	r24, r24
    5b00:	a0 e0       	ldi	r26, 0x00	; 0
    5b02:	b0 e0       	ldi	r27, 0x00	; 0
    5b04:	ac 01       	movw	r20, r24
    5b06:	33 27       	eor	r19, r19
    5b08:	22 27       	eor	r18, r18
    5b0a:	80 91 e0 01 	lds	r24, 0x01E0
    5b0e:	90 91 e1 01 	lds	r25, 0x01E1
    5b12:	a0 91 e2 01 	lds	r26, 0x01E2
    5b16:	b0 91 e3 01 	lds	r27, 0x01E3
    5b1a:	82 0f       	add	r24, r18
    5b1c:	93 1f       	adc	r25, r19
    5b1e:	a4 1f       	adc	r26, r20
    5b20:	b5 1f       	adc	r27, r21
    5b22:	a8 01       	movw	r20, r16
    5b24:	97 01       	movw	r18, r14
    5b26:	28 1b       	sub	r18, r24
    5b28:	39 0b       	sbc	r19, r25
    5b2a:	4a 0b       	sbc	r20, r26
    5b2c:	5b 0b       	sbc	r21, r27
    5b2e:	da 01       	movw	r26, r20
    5b30:	c9 01       	movw	r24, r18
    5b32:	80 93 ec 01 	sts	0x01EC, r24
    5b36:	90 93 ed 01 	sts	0x01ED, r25
    5b3a:	a0 93 ee 01 	sts	0x01EE, r26
    5b3e:	b0 93 ef 01 	sts	0x01EF, r27
		/*Disable INT0 */
		EXTI_u8IntDisable(EXTI0);
    5b42:	80 e0       	ldi	r24, 0x00	; 0
    5b44:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <EXTI_u8IntDisable>
		TIMER1_voidDisableOvfInterrupt();
    5b48:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <TIMER1_voidDisableOvfInterrupt>
	}
}
    5b4c:	cf 91       	pop	r28
    5b4e:	df 91       	pop	r29
    5b50:	1f 91       	pop	r17
    5b52:	0f 91       	pop	r16
    5b54:	ff 90       	pop	r15
    5b56:	ef 90       	pop	r14
    5b58:	08 95       	ret

00005b5a <SwICU>:

void SwICU()
{
    5b5a:	ef 92       	push	r14
    5b5c:	ff 92       	push	r15
    5b5e:	0f 93       	push	r16
    5b60:	1f 93       	push	r17
    5b62:	df 93       	push	r29
    5b64:	cf 93       	push	r28
    5b66:	cd b7       	in	r28, 0x3d	; 61
    5b68:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8Cnt = 0;
	Local_u8Cnt++;
    5b6a:	80 91 f5 01 	lds	r24, 0x01F5
    5b6e:	8f 5f       	subi	r24, 0xFF	; 255
    5b70:	80 93 f5 01 	sts	0x01F5, r24
	if(Local_u8Cnt == 1)
    5b74:	80 91 f5 01 	lds	r24, 0x01F5
    5b78:	81 30       	cpi	r24, 0x01	; 1
    5b7a:	29 f4       	brne	.+10     	; 0x5b86 <SwICU+0x2c>
	{
		TIMER1_voidSetPreloadValue(0);
    5b7c:	80 e0       	ldi	r24, 0x00	; 0
    5b7e:	90 e0       	ldi	r25, 0x00	; 0
    5b80:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <TIMER1_voidSetPreloadValue>
    5b84:	49 c0       	rjmp	.+146    	; 0x5c18 <SwICU+0xbe>
	}
	else if(Local_u8Cnt == 2)
    5b86:	80 91 f5 01 	lds	r24, 0x01F5
    5b8a:	82 30       	cpi	r24, 0x02	; 2
    5b8c:	89 f4       	brne	.+34     	; 0x5bb0 <SwICU+0x56>
	{
		Period = TIMER1_u16ReadTimerValue();
    5b8e:	0e 94 8d 25 	call	0x4b1a	; 0x4b1a <TIMER1_u16ReadTimerValue>
    5b92:	cc 01       	movw	r24, r24
    5b94:	a0 e0       	ldi	r26, 0x00	; 0
    5b96:	b0 e0       	ldi	r27, 0x00	; 0
    5b98:	80 93 e0 01 	sts	0x01E0, r24
    5b9c:	90 93 e1 01 	sts	0x01E1, r25
    5ba0:	a0 93 e2 01 	sts	0x01E2, r26
    5ba4:	b0 93 e3 01 	sts	0x01E3, r27
		EXTI_u8Int0ChangeSence(EXTI0_FALLING_ADGE);
    5ba8:	82 e0       	ldi	r24, 0x02	; 2
    5baa:	0e 94 12 14 	call	0x2824	; 0x2824 <EXTI_u8Int0ChangeSence>
    5bae:	34 c0       	rjmp	.+104    	; 0x5c18 <SwICU+0xbe>
	}
	else if(Local_u8Cnt == 3)
    5bb0:	80 91 f5 01 	lds	r24, 0x01F5
    5bb4:	83 30       	cpi	r24, 0x03	; 3
    5bb6:	81 f5       	brne	.+96     	; 0x5c18 <SwICU+0xbe>
	{
		Duty = TIMER1_u16ReadTimerValue();
    5bb8:	0e 94 8d 25 	call	0x4b1a	; 0x4b1a <TIMER1_u16ReadTimerValue>
    5bbc:	cc 01       	movw	r24, r24
    5bbe:	a0 e0       	ldi	r26, 0x00	; 0
    5bc0:	b0 e0       	ldi	r27, 0x00	; 0
    5bc2:	80 93 ec 01 	sts	0x01EC, r24
    5bc6:	90 93 ed 01 	sts	0x01ED, r25
    5bca:	a0 93 ee 01 	sts	0x01EE, r26
    5bce:	b0 93 ef 01 	sts	0x01EF, r27
		Duty -= Period;
    5bd2:	20 91 ec 01 	lds	r18, 0x01EC
    5bd6:	30 91 ed 01 	lds	r19, 0x01ED
    5bda:	40 91 ee 01 	lds	r20, 0x01EE
    5bde:	50 91 ef 01 	lds	r21, 0x01EF
    5be2:	80 91 e0 01 	lds	r24, 0x01E0
    5be6:	90 91 e1 01 	lds	r25, 0x01E1
    5bea:	a0 91 e2 01 	lds	r26, 0x01E2
    5bee:	b0 91 e3 01 	lds	r27, 0x01E3
    5bf2:	79 01       	movw	r14, r18
    5bf4:	8a 01       	movw	r16, r20
    5bf6:	e8 1a       	sub	r14, r24
    5bf8:	f9 0a       	sbc	r15, r25
    5bfa:	0a 0b       	sbc	r16, r26
    5bfc:	1b 0b       	sbc	r17, r27
    5bfe:	d8 01       	movw	r26, r16
    5c00:	c7 01       	movw	r24, r14
    5c02:	80 93 ec 01 	sts	0x01EC, r24
    5c06:	90 93 ed 01 	sts	0x01ED, r25
    5c0a:	a0 93 ee 01 	sts	0x01EE, r26
    5c0e:	b0 93 ef 01 	sts	0x01EF, r27
		EXTI_u8IntDisable(EXTI0);
    5c12:	80 e0       	ldi	r24, 0x00	; 0
    5c14:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <EXTI_u8IntDisable>

	}
}
    5c18:	cf 91       	pop	r28
    5c1a:	df 91       	pop	r29
    5c1c:	1f 91       	pop	r17
    5c1e:	0f 91       	pop	r16
    5c20:	ff 90       	pop	r15
    5c22:	ef 90       	pop	r14
    5c24:	08 95       	ret

00005c26 <__mulsi3>:
    5c26:	62 9f       	mul	r22, r18
    5c28:	d0 01       	movw	r26, r0
    5c2a:	73 9f       	mul	r23, r19
    5c2c:	f0 01       	movw	r30, r0
    5c2e:	82 9f       	mul	r24, r18
    5c30:	e0 0d       	add	r30, r0
    5c32:	f1 1d       	adc	r31, r1
    5c34:	64 9f       	mul	r22, r20
    5c36:	e0 0d       	add	r30, r0
    5c38:	f1 1d       	adc	r31, r1
    5c3a:	92 9f       	mul	r25, r18
    5c3c:	f0 0d       	add	r31, r0
    5c3e:	83 9f       	mul	r24, r19
    5c40:	f0 0d       	add	r31, r0
    5c42:	74 9f       	mul	r23, r20
    5c44:	f0 0d       	add	r31, r0
    5c46:	65 9f       	mul	r22, r21
    5c48:	f0 0d       	add	r31, r0
    5c4a:	99 27       	eor	r25, r25
    5c4c:	72 9f       	mul	r23, r18
    5c4e:	b0 0d       	add	r27, r0
    5c50:	e1 1d       	adc	r30, r1
    5c52:	f9 1f       	adc	r31, r25
    5c54:	63 9f       	mul	r22, r19
    5c56:	b0 0d       	add	r27, r0
    5c58:	e1 1d       	adc	r30, r1
    5c5a:	f9 1f       	adc	r31, r25
    5c5c:	bd 01       	movw	r22, r26
    5c5e:	cf 01       	movw	r24, r30
    5c60:	11 24       	eor	r1, r1
    5c62:	08 95       	ret

00005c64 <__udivmodhi4>:
    5c64:	aa 1b       	sub	r26, r26
    5c66:	bb 1b       	sub	r27, r27
    5c68:	51 e1       	ldi	r21, 0x11	; 17
    5c6a:	07 c0       	rjmp	.+14     	; 0x5c7a <__udivmodhi4_ep>

00005c6c <__udivmodhi4_loop>:
    5c6c:	aa 1f       	adc	r26, r26
    5c6e:	bb 1f       	adc	r27, r27
    5c70:	a6 17       	cp	r26, r22
    5c72:	b7 07       	cpc	r27, r23
    5c74:	10 f0       	brcs	.+4      	; 0x5c7a <__udivmodhi4_ep>
    5c76:	a6 1b       	sub	r26, r22
    5c78:	b7 0b       	sbc	r27, r23

00005c7a <__udivmodhi4_ep>:
    5c7a:	88 1f       	adc	r24, r24
    5c7c:	99 1f       	adc	r25, r25
    5c7e:	5a 95       	dec	r21
    5c80:	a9 f7       	brne	.-22     	; 0x5c6c <__udivmodhi4_loop>
    5c82:	80 95       	com	r24
    5c84:	90 95       	com	r25
    5c86:	bc 01       	movw	r22, r24
    5c88:	cd 01       	movw	r24, r26
    5c8a:	08 95       	ret

00005c8c <__udivmodsi4>:
    5c8c:	a1 e2       	ldi	r26, 0x21	; 33
    5c8e:	1a 2e       	mov	r1, r26
    5c90:	aa 1b       	sub	r26, r26
    5c92:	bb 1b       	sub	r27, r27
    5c94:	fd 01       	movw	r30, r26
    5c96:	0d c0       	rjmp	.+26     	; 0x5cb2 <__udivmodsi4_ep>

00005c98 <__udivmodsi4_loop>:
    5c98:	aa 1f       	adc	r26, r26
    5c9a:	bb 1f       	adc	r27, r27
    5c9c:	ee 1f       	adc	r30, r30
    5c9e:	ff 1f       	adc	r31, r31
    5ca0:	a2 17       	cp	r26, r18
    5ca2:	b3 07       	cpc	r27, r19
    5ca4:	e4 07       	cpc	r30, r20
    5ca6:	f5 07       	cpc	r31, r21
    5ca8:	20 f0       	brcs	.+8      	; 0x5cb2 <__udivmodsi4_ep>
    5caa:	a2 1b       	sub	r26, r18
    5cac:	b3 0b       	sbc	r27, r19
    5cae:	e4 0b       	sbc	r30, r20
    5cb0:	f5 0b       	sbc	r31, r21

00005cb2 <__udivmodsi4_ep>:
    5cb2:	66 1f       	adc	r22, r22
    5cb4:	77 1f       	adc	r23, r23
    5cb6:	88 1f       	adc	r24, r24
    5cb8:	99 1f       	adc	r25, r25
    5cba:	1a 94       	dec	r1
    5cbc:	69 f7       	brne	.-38     	; 0x5c98 <__udivmodsi4_loop>
    5cbe:	60 95       	com	r22
    5cc0:	70 95       	com	r23
    5cc2:	80 95       	com	r24
    5cc4:	90 95       	com	r25
    5cc6:	9b 01       	movw	r18, r22
    5cc8:	ac 01       	movw	r20, r24
    5cca:	bd 01       	movw	r22, r26
    5ccc:	cf 01       	movw	r24, r30
    5cce:	08 95       	ret

00005cd0 <__prologue_saves__>:
    5cd0:	2f 92       	push	r2
    5cd2:	3f 92       	push	r3
    5cd4:	4f 92       	push	r4
    5cd6:	5f 92       	push	r5
    5cd8:	6f 92       	push	r6
    5cda:	7f 92       	push	r7
    5cdc:	8f 92       	push	r8
    5cde:	9f 92       	push	r9
    5ce0:	af 92       	push	r10
    5ce2:	bf 92       	push	r11
    5ce4:	cf 92       	push	r12
    5ce6:	df 92       	push	r13
    5ce8:	ef 92       	push	r14
    5cea:	ff 92       	push	r15
    5cec:	0f 93       	push	r16
    5cee:	1f 93       	push	r17
    5cf0:	cf 93       	push	r28
    5cf2:	df 93       	push	r29
    5cf4:	cd b7       	in	r28, 0x3d	; 61
    5cf6:	de b7       	in	r29, 0x3e	; 62
    5cf8:	ca 1b       	sub	r28, r26
    5cfa:	db 0b       	sbc	r29, r27
    5cfc:	0f b6       	in	r0, 0x3f	; 63
    5cfe:	f8 94       	cli
    5d00:	de bf       	out	0x3e, r29	; 62
    5d02:	0f be       	out	0x3f, r0	; 63
    5d04:	cd bf       	out	0x3d, r28	; 61
    5d06:	09 94       	ijmp

00005d08 <__epilogue_restores__>:
    5d08:	2a 88       	ldd	r2, Y+18	; 0x12
    5d0a:	39 88       	ldd	r3, Y+17	; 0x11
    5d0c:	48 88       	ldd	r4, Y+16	; 0x10
    5d0e:	5f 84       	ldd	r5, Y+15	; 0x0f
    5d10:	6e 84       	ldd	r6, Y+14	; 0x0e
    5d12:	7d 84       	ldd	r7, Y+13	; 0x0d
    5d14:	8c 84       	ldd	r8, Y+12	; 0x0c
    5d16:	9b 84       	ldd	r9, Y+11	; 0x0b
    5d18:	aa 84       	ldd	r10, Y+10	; 0x0a
    5d1a:	b9 84       	ldd	r11, Y+9	; 0x09
    5d1c:	c8 84       	ldd	r12, Y+8	; 0x08
    5d1e:	df 80       	ldd	r13, Y+7	; 0x07
    5d20:	ee 80       	ldd	r14, Y+6	; 0x06
    5d22:	fd 80       	ldd	r15, Y+5	; 0x05
    5d24:	0c 81       	ldd	r16, Y+4	; 0x04
    5d26:	1b 81       	ldd	r17, Y+3	; 0x03
    5d28:	aa 81       	ldd	r26, Y+2	; 0x02
    5d2a:	b9 81       	ldd	r27, Y+1	; 0x01
    5d2c:	ce 0f       	add	r28, r30
    5d2e:	d1 1d       	adc	r29, r1
    5d30:	0f b6       	in	r0, 0x3f	; 63
    5d32:	f8 94       	cli
    5d34:	de bf       	out	0x3e, r29	; 62
    5d36:	0f be       	out	0x3f, r0	; 63
    5d38:	cd bf       	out	0x3d, r28	; 61
    5d3a:	ed 01       	movw	r28, r26
    5d3c:	08 95       	ret

00005d3e <_exit>:
    5d3e:	f8 94       	cli

00005d40 <__stop_program>:
    5d40:	ff cf       	rjmp	.-2      	; 0x5d40 <__stop_program>
