
SPI_test3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ad0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00002ad0  00002b64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800072  00800072  00002b76  2**0
                  ALLOC
  3 .stab         00002b68  00000000  00000000  00002b78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001086  00000000  00000000  000056e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006766  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000068a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006a16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000865f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000954a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a2f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a458  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a6e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000aeb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ed       	ldi	r30, 0xD0	; 208
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3e 14 	call	0x287c	; 0x287c <main>
      8a:	0c 94 66 15 	jmp	0x2acc	; 0x2acc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2f 15 	jmp	0x2a5e	; 0x2a5e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4b 15 	jmp	0x2a96	; 0x2a96 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 57 15 	jmp	0x2aae	; 0x2aae <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 57 15 	jmp	0x2aae	; 0x2aae <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2f 15 	jmp	0x2a5e	; 0x2a5e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4b 15 	jmp	0x2a96	; 0x2a96 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 57 15 	jmp	0x2aae	; 0x2aae <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 57 15 	jmp	0x2aae	; 0x2aae <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 57 15 	jmp	0x2aae	; 0x2aae <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 3f 15 	jmp	0x2a7e	; 0x2a7e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 5b 15 	jmp	0x2ab6	; 0x2ab6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CLCD_voidSendCommand>:
#include "../HAL/CLCD_interface.h"
#include "../HAL/CLCD_private.h"

static u8 iniIsFinich=0;
void CLCD_voidSendCommand(u8 Copy_u8Command)//math
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	ac 97       	sbiw	r28, 0x2c	; 44
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8c a7       	std	Y+44, r24	; 0x2c
	/*PIN SET  send pulse (E) */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_HIGH);
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_LOW);
#elif CLCD_CHIOCE_MODE==_4_BIT_MODE
	u8 Local_u8Mask = 0b11110000;
     b5c:	80 ef       	ldi	r24, 0xF0	; 240
     b5e:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_PIN_LOW);
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	60 e0       	ldi	r22, 0x00	; 0
     b64:	40 e0       	ldi	r20, 0x00	; 0
     b66:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_u8SetPinValue>
	/*PIN RW SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_PIN_LOW);
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	61 e0       	ldi	r22, 0x01	; 1
     b6e:	40 e0       	ldi	r20, 0x00	; 0
     b70:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_u8SetPinValue>
	/*PORT SET COMMAND*/
	Local_u8Mask &= Copy_u8Command;
     b74:	9b a5       	ldd	r25, Y+43	; 0x2b
     b76:	8c a5       	ldd	r24, Y+44	; 0x2c
     b78:	89 23       	and	r24, r25
     b7a:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPortValue(CLCD_DATA_PORT, Local_u8Mask);
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	6b a5       	ldd	r22, Y+43	; 0x2b
     b80:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <DIO_u8SetPortValue>
	/*PIN SET  send pulse (E) */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_HIGH);
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	62 e0       	ldi	r22, 0x02	; 2
     b88:	41 e0       	ldi	r20, 0x01	; 1
     b8a:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_u8SetPinValue>
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	a0 e0       	ldi	r26, 0x00	; 0
     b94:	b0 e4       	ldi	r27, 0x40	; 64
     b96:	8f a3       	std	Y+39, r24	; 0x27
     b98:	98 a7       	std	Y+40, r25	; 0x28
     b9a:	a9 a7       	std	Y+41, r26	; 0x29
     b9c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b9e:	6f a1       	ldd	r22, Y+39	; 0x27
     ba0:	78 a5       	ldd	r23, Y+40	; 0x28
     ba2:	89 a5       	ldd	r24, Y+41	; 0x29
     ba4:	9a a5       	ldd	r25, Y+42	; 0x2a
     ba6:	20 e0       	ldi	r18, 0x00	; 0
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	4a ef       	ldi	r20, 0xFA	; 250
     bac:	54 e4       	ldi	r21, 0x44	; 68
     bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bb2:	dc 01       	movw	r26, r24
     bb4:	cb 01       	movw	r24, r22
     bb6:	8b a3       	std	Y+35, r24	; 0x23
     bb8:	9c a3       	std	Y+36, r25	; 0x24
     bba:	ad a3       	std	Y+37, r26	; 0x25
     bbc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     bbe:	6b a1       	ldd	r22, Y+35	; 0x23
     bc0:	7c a1       	ldd	r23, Y+36	; 0x24
     bc2:	8d a1       	ldd	r24, Y+37	; 0x25
     bc4:	9e a1       	ldd	r25, Y+38	; 0x26
     bc6:	20 e0       	ldi	r18, 0x00	; 0
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	40 e8       	ldi	r20, 0x80	; 128
     bcc:	5f e3       	ldi	r21, 0x3F	; 63
     bce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bd2:	88 23       	and	r24, r24
     bd4:	2c f4       	brge	.+10     	; 0xbe0 <CLCD_voidSendCommand+0x9a>
		__ticks = 1;
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	9a a3       	std	Y+34, r25	; 0x22
     bdc:	89 a3       	std	Y+33, r24	; 0x21
     bde:	3f c0       	rjmp	.+126    	; 0xc5e <CLCD_voidSendCommand+0x118>
	else if (__tmp > 65535)
     be0:	6b a1       	ldd	r22, Y+35	; 0x23
     be2:	7c a1       	ldd	r23, Y+36	; 0x24
     be4:	8d a1       	ldd	r24, Y+37	; 0x25
     be6:	9e a1       	ldd	r25, Y+38	; 0x26
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	3f ef       	ldi	r19, 0xFF	; 255
     bec:	4f e7       	ldi	r20, 0x7F	; 127
     bee:	57 e4       	ldi	r21, 0x47	; 71
     bf0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bf4:	18 16       	cp	r1, r24
     bf6:	4c f5       	brge	.+82     	; 0xc4a <CLCD_voidSendCommand+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf8:	6f a1       	ldd	r22, Y+39	; 0x27
     bfa:	78 a5       	ldd	r23, Y+40	; 0x28
     bfc:	89 a5       	ldd	r24, Y+41	; 0x29
     bfe:	9a a5       	ldd	r25, Y+42	; 0x2a
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	40 e2       	ldi	r20, 0x20	; 32
     c06:	51 e4       	ldi	r21, 0x41	; 65
     c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	bc 01       	movw	r22, r24
     c12:	cd 01       	movw	r24, r26
     c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c18:	dc 01       	movw	r26, r24
     c1a:	cb 01       	movw	r24, r22
     c1c:	9a a3       	std	Y+34, r25	; 0x22
     c1e:	89 a3       	std	Y+33, r24	; 0x21
     c20:	0f c0       	rjmp	.+30     	; 0xc40 <CLCD_voidSendCommand+0xfa>
     c22:	88 ec       	ldi	r24, 0xC8	; 200
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	98 a3       	std	Y+32, r25	; 0x20
     c28:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c2a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c2c:	98 a1       	ldd	r25, Y+32	; 0x20
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	f1 f7       	brne	.-4      	; 0xc2e <CLCD_voidSendCommand+0xe8>
     c32:	98 a3       	std	Y+32, r25	; 0x20
     c34:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c36:	89 a1       	ldd	r24, Y+33	; 0x21
     c38:	9a a1       	ldd	r25, Y+34	; 0x22
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	9a a3       	std	Y+34, r25	; 0x22
     c3e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c40:	89 a1       	ldd	r24, Y+33	; 0x21
     c42:	9a a1       	ldd	r25, Y+34	; 0x22
     c44:	00 97       	sbiw	r24, 0x00	; 0
     c46:	69 f7       	brne	.-38     	; 0xc22 <CLCD_voidSendCommand+0xdc>
     c48:	14 c0       	rjmp	.+40     	; 0xc72 <CLCD_voidSendCommand+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c4a:	6b a1       	ldd	r22, Y+35	; 0x23
     c4c:	7c a1       	ldd	r23, Y+36	; 0x24
     c4e:	8d a1       	ldd	r24, Y+37	; 0x25
     c50:	9e a1       	ldd	r25, Y+38	; 0x26
     c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c56:	dc 01       	movw	r26, r24
     c58:	cb 01       	movw	r24, r22
     c5a:	9a a3       	std	Y+34, r25	; 0x22
     c5c:	89 a3       	std	Y+33, r24	; 0x21
     c5e:	89 a1       	ldd	r24, Y+33	; 0x21
     c60:	9a a1       	ldd	r25, Y+34	; 0x22
     c62:	9e 8f       	std	Y+30, r25	; 0x1e
     c64:	8d 8f       	std	Y+29, r24	; 0x1d
     c66:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c68:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	f1 f7       	brne	.-4      	; 0xc6a <CLCD_voidSendCommand+0x124>
     c6e:	9e 8f       	std	Y+30, r25	; 0x1e
     c70:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	62 e0       	ldi	r22, 0x02	; 2
     c76:	40 e0       	ldi	r20, 0x00	; 0
     c78:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_u8SetPinValue>
	if(iniIsFinich)
     c7c:	80 91 72 00 	lds	r24, 0x0072
     c80:	88 23       	and	r24, r24
     c82:	09 f4       	brne	.+2      	; 0xc86 <CLCD_voidSendCommand+0x140>
     c84:	8c c0       	rjmp	.+280    	; 0xd9e <CLCD_voidSendCommand+0x258>
	{
		Local_u8Mask = 0b11110000;
     c86:	80 ef       	ldi	r24, 0xF0	; 240
     c88:	8b a7       	std	Y+43, r24	; 0x2b
		Local_u8Mask = ~(Local_u8Mask) & Copy_u8Command;
     c8a:	8b a5       	ldd	r24, Y+43	; 0x2b
     c8c:	98 2f       	mov	r25, r24
     c8e:	90 95       	com	r25
     c90:	8c a5       	ldd	r24, Y+44	; 0x2c
     c92:	89 23       	and	r24, r25
     c94:	8b a7       	std	Y+43, r24	; 0x2b
		DIO_u8SetPortValue(CLCD_DATA_PORT, (Local_u8Mask << 4));
     c96:	8b a5       	ldd	r24, Y+43	; 0x2b
     c98:	98 2f       	mov	r25, r24
     c9a:	92 95       	swap	r25
     c9c:	90 7f       	andi	r25, 0xF0	; 240
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	69 2f       	mov	r22, r25
     ca2:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <DIO_u8SetPortValue>
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_HIGH);
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	62 e0       	ldi	r22, 0x02	; 2
     caa:	41 e0       	ldi	r20, 0x01	; 1
     cac:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_u8SetPinValue>
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	a0 e0       	ldi	r26, 0x00	; 0
     cb6:	b0 e4       	ldi	r27, 0x40	; 64
     cb8:	89 8f       	std	Y+25, r24	; 0x19
     cba:	9a 8f       	std	Y+26, r25	; 0x1a
     cbc:	ab 8f       	std	Y+27, r26	; 0x1b
     cbe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cc0:	69 8d       	ldd	r22, Y+25	; 0x19
     cc2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	4a ef       	ldi	r20, 0xFA	; 250
     cce:	54 e4       	ldi	r21, 0x44	; 68
     cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cd4:	dc 01       	movw	r26, r24
     cd6:	cb 01       	movw	r24, r22
     cd8:	8d 8b       	std	Y+21, r24	; 0x15
     cda:	9e 8b       	std	Y+22, r25	; 0x16
     cdc:	af 8b       	std	Y+23, r26	; 0x17
     cde:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ce0:	6d 89       	ldd	r22, Y+21	; 0x15
     ce2:	7e 89       	ldd	r23, Y+22	; 0x16
     ce4:	8f 89       	ldd	r24, Y+23	; 0x17
     ce6:	98 8d       	ldd	r25, Y+24	; 0x18
     ce8:	20 e0       	ldi	r18, 0x00	; 0
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	40 e8       	ldi	r20, 0x80	; 128
     cee:	5f e3       	ldi	r21, 0x3F	; 63
     cf0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cf4:	88 23       	and	r24, r24
     cf6:	2c f4       	brge	.+10     	; 0xd02 <CLCD_voidSendCommand+0x1bc>
		__ticks = 1;
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	9c 8b       	std	Y+20, r25	; 0x14
     cfe:	8b 8b       	std	Y+19, r24	; 0x13
     d00:	3f c0       	rjmp	.+126    	; 0xd80 <CLCD_voidSendCommand+0x23a>
	else if (__tmp > 65535)
     d02:	6d 89       	ldd	r22, Y+21	; 0x15
     d04:	7e 89       	ldd	r23, Y+22	; 0x16
     d06:	8f 89       	ldd	r24, Y+23	; 0x17
     d08:	98 8d       	ldd	r25, Y+24	; 0x18
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	3f ef       	ldi	r19, 0xFF	; 255
     d0e:	4f e7       	ldi	r20, 0x7F	; 127
     d10:	57 e4       	ldi	r21, 0x47	; 71
     d12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d16:	18 16       	cp	r1, r24
     d18:	4c f5       	brge	.+82     	; 0xd6c <CLCD_voidSendCommand+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d1a:	69 8d       	ldd	r22, Y+25	; 0x19
     d1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d20:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	40 e2       	ldi	r20, 0x20	; 32
     d28:	51 e4       	ldi	r21, 0x41	; 65
     d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d2e:	dc 01       	movw	r26, r24
     d30:	cb 01       	movw	r24, r22
     d32:	bc 01       	movw	r22, r24
     d34:	cd 01       	movw	r24, r26
     d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d3a:	dc 01       	movw	r26, r24
     d3c:	cb 01       	movw	r24, r22
     d3e:	9c 8b       	std	Y+20, r25	; 0x14
     d40:	8b 8b       	std	Y+19, r24	; 0x13
     d42:	0f c0       	rjmp	.+30     	; 0xd62 <CLCD_voidSendCommand+0x21c>
     d44:	88 ec       	ldi	r24, 0xC8	; 200
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	9a 8b       	std	Y+18, r25	; 0x12
     d4a:	89 8b       	std	Y+17, r24	; 0x11
     d4c:	89 89       	ldd	r24, Y+17	; 0x11
     d4e:	9a 89       	ldd	r25, Y+18	; 0x12
     d50:	01 97       	sbiw	r24, 0x01	; 1
     d52:	f1 f7       	brne	.-4      	; 0xd50 <CLCD_voidSendCommand+0x20a>
     d54:	9a 8b       	std	Y+18, r25	; 0x12
     d56:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d58:	8b 89       	ldd	r24, Y+19	; 0x13
     d5a:	9c 89       	ldd	r25, Y+20	; 0x14
     d5c:	01 97       	sbiw	r24, 0x01	; 1
     d5e:	9c 8b       	std	Y+20, r25	; 0x14
     d60:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d62:	8b 89       	ldd	r24, Y+19	; 0x13
     d64:	9c 89       	ldd	r25, Y+20	; 0x14
     d66:	00 97       	sbiw	r24, 0x00	; 0
     d68:	69 f7       	brne	.-38     	; 0xd44 <CLCD_voidSendCommand+0x1fe>
     d6a:	14 c0       	rjmp	.+40     	; 0xd94 <CLCD_voidSendCommand+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d6c:	6d 89       	ldd	r22, Y+21	; 0x15
     d6e:	7e 89       	ldd	r23, Y+22	; 0x16
     d70:	8f 89       	ldd	r24, Y+23	; 0x17
     d72:	98 8d       	ldd	r25, Y+24	; 0x18
     d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d78:	dc 01       	movw	r26, r24
     d7a:	cb 01       	movw	r24, r22
     d7c:	9c 8b       	std	Y+20, r25	; 0x14
     d7e:	8b 8b       	std	Y+19, r24	; 0x13
     d80:	8b 89       	ldd	r24, Y+19	; 0x13
     d82:	9c 89       	ldd	r25, Y+20	; 0x14
     d84:	98 8b       	std	Y+16, r25	; 0x10
     d86:	8f 87       	std	Y+15, r24	; 0x0f
     d88:	8f 85       	ldd	r24, Y+15	; 0x0f
     d8a:	98 89       	ldd	r25, Y+16	; 0x10
     d8c:	01 97       	sbiw	r24, 0x01	; 1
     d8e:	f1 f7       	brne	.-4      	; 0xd8c <CLCD_voidSendCommand+0x246>
     d90:	98 8b       	std	Y+16, r25	; 0x10
     d92:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	62 e0       	ldi	r22, 0x02	; 2
     d98:	40 e0       	ldi	r20, 0x00	; 0
     d9a:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_u8SetPinValue>
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	a0 e0       	ldi	r26, 0x00	; 0
     da4:	b0 e4       	ldi	r27, 0x40	; 64
     da6:	8b 87       	std	Y+11, r24	; 0x0b
     da8:	9c 87       	std	Y+12, r25	; 0x0c
     daa:	ad 87       	std	Y+13, r26	; 0x0d
     dac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dae:	6b 85       	ldd	r22, Y+11	; 0x0b
     db0:	7c 85       	ldd	r23, Y+12	; 0x0c
     db2:	8d 85       	ldd	r24, Y+13	; 0x0d
     db4:	9e 85       	ldd	r25, Y+14	; 0x0e
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	4a ef       	ldi	r20, 0xFA	; 250
     dbc:	54 e4       	ldi	r21, 0x44	; 68
     dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc2:	dc 01       	movw	r26, r24
     dc4:	cb 01       	movw	r24, r22
     dc6:	8f 83       	std	Y+7, r24	; 0x07
     dc8:	98 87       	std	Y+8, r25	; 0x08
     dca:	a9 87       	std	Y+9, r26	; 0x09
     dcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dce:	6f 81       	ldd	r22, Y+7	; 0x07
     dd0:	78 85       	ldd	r23, Y+8	; 0x08
     dd2:	89 85       	ldd	r24, Y+9	; 0x09
     dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd6:	20 e0       	ldi	r18, 0x00	; 0
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	40 e8       	ldi	r20, 0x80	; 128
     ddc:	5f e3       	ldi	r21, 0x3F	; 63
     dde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     de2:	88 23       	and	r24, r24
     de4:	2c f4       	brge	.+10     	; 0xdf0 <CLCD_voidSendCommand+0x2aa>
		__ticks = 1;
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	9e 83       	std	Y+6, r25	; 0x06
     dec:	8d 83       	std	Y+5, r24	; 0x05
     dee:	3f c0       	rjmp	.+126    	; 0xe6e <CLCD_voidSendCommand+0x328>
	else if (__tmp > 65535)
     df0:	6f 81       	ldd	r22, Y+7	; 0x07
     df2:	78 85       	ldd	r23, Y+8	; 0x08
     df4:	89 85       	ldd	r24, Y+9	; 0x09
     df6:	9a 85       	ldd	r25, Y+10	; 0x0a
     df8:	20 e0       	ldi	r18, 0x00	; 0
     dfa:	3f ef       	ldi	r19, 0xFF	; 255
     dfc:	4f e7       	ldi	r20, 0x7F	; 127
     dfe:	57 e4       	ldi	r21, 0x47	; 71
     e00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e04:	18 16       	cp	r1, r24
     e06:	4c f5       	brge	.+82     	; 0xe5a <CLCD_voidSendCommand+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e08:	6b 85       	ldd	r22, Y+11	; 0x0b
     e0a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e0c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e0e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	40 e2       	ldi	r20, 0x20	; 32
     e16:	51 e4       	ldi	r21, 0x41	; 65
     e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e1c:	dc 01       	movw	r26, r24
     e1e:	cb 01       	movw	r24, r22
     e20:	bc 01       	movw	r22, r24
     e22:	cd 01       	movw	r24, r26
     e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e28:	dc 01       	movw	r26, r24
     e2a:	cb 01       	movw	r24, r22
     e2c:	9e 83       	std	Y+6, r25	; 0x06
     e2e:	8d 83       	std	Y+5, r24	; 0x05
     e30:	0f c0       	rjmp	.+30     	; 0xe50 <CLCD_voidSendCommand+0x30a>
     e32:	88 ec       	ldi	r24, 0xC8	; 200
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	9c 83       	std	Y+4, r25	; 0x04
     e38:	8b 83       	std	Y+3, r24	; 0x03
     e3a:	8b 81       	ldd	r24, Y+3	; 0x03
     e3c:	9c 81       	ldd	r25, Y+4	; 0x04
     e3e:	01 97       	sbiw	r24, 0x01	; 1
     e40:	f1 f7       	brne	.-4      	; 0xe3e <CLCD_voidSendCommand+0x2f8>
     e42:	9c 83       	std	Y+4, r25	; 0x04
     e44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e46:	8d 81       	ldd	r24, Y+5	; 0x05
     e48:	9e 81       	ldd	r25, Y+6	; 0x06
     e4a:	01 97       	sbiw	r24, 0x01	; 1
     e4c:	9e 83       	std	Y+6, r25	; 0x06
     e4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e50:	8d 81       	ldd	r24, Y+5	; 0x05
     e52:	9e 81       	ldd	r25, Y+6	; 0x06
     e54:	00 97       	sbiw	r24, 0x00	; 0
     e56:	69 f7       	brne	.-38     	; 0xe32 <CLCD_voidSendCommand+0x2ec>
     e58:	14 c0       	rjmp	.+40     	; 0xe82 <CLCD_voidSendCommand+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e5a:	6f 81       	ldd	r22, Y+7	; 0x07
     e5c:	78 85       	ldd	r23, Y+8	; 0x08
     e5e:	89 85       	ldd	r24, Y+9	; 0x09
     e60:	9a 85       	ldd	r25, Y+10	; 0x0a
     e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e66:	dc 01       	movw	r26, r24
     e68:	cb 01       	movw	r24, r22
     e6a:	9e 83       	std	Y+6, r25	; 0x06
     e6c:	8d 83       	std	Y+5, r24	; 0x05
     e6e:	8d 81       	ldd	r24, Y+5	; 0x05
     e70:	9e 81       	ldd	r25, Y+6	; 0x06
     e72:	9a 83       	std	Y+2, r25	; 0x02
     e74:	89 83       	std	Y+1, r24	; 0x01
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	9a 81       	ldd	r25, Y+2	; 0x02
     e7a:	01 97       	sbiw	r24, 0x01	; 1
     e7c:	f1 f7       	brne	.-4      	; 0xe7a <CLCD_voidSendCommand+0x334>
     e7e:	9a 83       	std	Y+2, r25	; 0x02
     e80:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
#else
#error "In correct cconfigrtion of LCD_MODE"
#endif

}
     e82:	ac 96       	adiw	r28, 0x2c	; 44
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	cd bf       	out	0x3d, r28	; 61
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	08 95       	ret

00000e94 <CLCD_Read_BF_AC>:
u8 CLCD_Read_BF_AC() {
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	00 d0       	rcall	.+0      	; 0xe9a <CLCD_Read_BF_AC+0x6>
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Address = 0;
     e9e:	1a 82       	std	Y+2, r1	; 0x02
	/*PIN RS SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_PIN_LOW);
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	40 e0       	ldi	r20, 0x00	; 0
     ea6:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_u8SetPinValue>
	/*PIN RW SET HIGH  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_PIN_HIGH);
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	61 e0       	ldi	r22, 0x01	; 1
     eae:	41 e0       	ldi	r20, 0x01	; 1
     eb0:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_u8SetPinValue>
	/*PIN SET  send pulse (E) */
	for (u8 i = 0; i < 7; i++) {
     eb4:	19 82       	std	Y+1, r1	; 0x01
     eb6:	1c c0       	rjmp	.+56     	; 0xef0 <CLCD_Read_BF_AC+0x5c>
		DIO_u8GetPinValue(CLCD_DATA_PORT, i, &Local_u8Address);
     eb8:	9e 01       	movw	r18, r28
     eba:	2e 5f       	subi	r18, 0xFE	; 254
     ebc:	3f 4f       	sbci	r19, 0xFF	; 255
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	69 81       	ldd	r22, Y+1	; 0x01
     ec2:	a9 01       	movw	r20, r18
     ec4:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <DIO_u8GetPinValue>
		Local_u8Address += Local_u8Address << i;
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	88 2f       	mov	r24, r24
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	a9 01       	movw	r20, r18
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <CLCD_Read_BF_AC+0x48>
     ed8:	44 0f       	add	r20, r20
     eda:	55 1f       	adc	r21, r21
     edc:	8a 95       	dec	r24
     ede:	e2 f7       	brpl	.-8      	; 0xed8 <CLCD_Read_BF_AC+0x44>
     ee0:	ca 01       	movw	r24, r20
     ee2:	98 2f       	mov	r25, r24
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	89 0f       	add	r24, r25
     ee8:	8a 83       	std	Y+2, r24	; 0x02
	/*PIN RS SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_PIN_LOW);
	/*PIN RW SET HIGH  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_PIN_HIGH);
	/*PIN SET  send pulse (E) */
	for (u8 i = 0; i < 7; i++) {
     eea:	89 81       	ldd	r24, Y+1	; 0x01
     eec:	8f 5f       	subi	r24, 0xFF	; 255
     eee:	89 83       	std	Y+1, r24	; 0x01
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	87 30       	cpi	r24, 0x07	; 7
     ef4:	08 f3       	brcs	.-62     	; 0xeb8 <CLCD_Read_BF_AC+0x24>
		DIO_u8GetPinValue(CLCD_DATA_PORT, i, &Local_u8Address);
		Local_u8Address += Local_u8Address << i;
	}
	return Local_u8Address;
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
}
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	ac 97       	sbiw	r28, 0x2c	; 44
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	cd bf       	out	0x3d, r28	; 61
     f16:	8c a7       	std	Y+44, r24	; 0x2c
	if (Local_u8Address > 0x0f)
		CLCD_voidSendCommand(0x0C);
	else
		CLCD_voidSendCommand(0x06);
#elif CLCD_CHIOCE_MODE==_4_BIT_MODE
	u8 Local_u8Mask = 0b11110000;
     f18:	80 ef       	ldi	r24, 0xF0	; 240
     f1a:	8b a7       	std	Y+43, r24	; 0x2b
	/*PIN RS SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_PIN_HIGH);
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	41 e0       	ldi	r20, 0x01	; 1
     f22:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_u8SetPinValue>
	/*PIN RW SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_PIN_LOW);
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	61 e0       	ldi	r22, 0x01	; 1
     f2a:	40 e0       	ldi	r20, 0x00	; 0
     f2c:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_u8SetPinValue>
	/*PORT SET COMMAND*/
	Local_u8Mask &= Copy_u8Data;
     f30:	9b a5       	ldd	r25, Y+43	; 0x2b
     f32:	8c a5       	ldd	r24, Y+44	; 0x2c
     f34:	89 23       	and	r24, r25
     f36:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Mask);
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	6b a5       	ldd	r22, Y+43	; 0x2b
     f3c:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <DIO_u8SetPortValue>
	/*PIN SET send pulse (E) */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_HIGH);
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	62 e0       	ldi	r22, 0x02	; 2
     f44:	41 e0       	ldi	r20, 0x01	; 1
     f46:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_u8SetPinValue>
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	a0 e0       	ldi	r26, 0x00	; 0
     f50:	b0 e4       	ldi	r27, 0x40	; 64
     f52:	8f a3       	std	Y+39, r24	; 0x27
     f54:	98 a7       	std	Y+40, r25	; 0x28
     f56:	a9 a7       	std	Y+41, r26	; 0x29
     f58:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f5a:	6f a1       	ldd	r22, Y+39	; 0x27
     f5c:	78 a5       	ldd	r23, Y+40	; 0x28
     f5e:	89 a5       	ldd	r24, Y+41	; 0x29
     f60:	9a a5       	ldd	r25, Y+42	; 0x2a
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	4a ef       	ldi	r20, 0xFA	; 250
     f68:	54 e4       	ldi	r21, 0x44	; 68
     f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f6e:	dc 01       	movw	r26, r24
     f70:	cb 01       	movw	r24, r22
     f72:	8b a3       	std	Y+35, r24	; 0x23
     f74:	9c a3       	std	Y+36, r25	; 0x24
     f76:	ad a3       	std	Y+37, r26	; 0x25
     f78:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f7a:	6b a1       	ldd	r22, Y+35	; 0x23
     f7c:	7c a1       	ldd	r23, Y+36	; 0x24
     f7e:	8d a1       	ldd	r24, Y+37	; 0x25
     f80:	9e a1       	ldd	r25, Y+38	; 0x26
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	40 e8       	ldi	r20, 0x80	; 128
     f88:	5f e3       	ldi	r21, 0x3F	; 63
     f8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f8e:	88 23       	and	r24, r24
     f90:	2c f4       	brge	.+10     	; 0xf9c <CLCD_voidSendData+0x9a>
		__ticks = 1;
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	9a a3       	std	Y+34, r25	; 0x22
     f98:	89 a3       	std	Y+33, r24	; 0x21
     f9a:	3f c0       	rjmp	.+126    	; 0x101a <CLCD_voidSendData+0x118>
	else if (__tmp > 65535)
     f9c:	6b a1       	ldd	r22, Y+35	; 0x23
     f9e:	7c a1       	ldd	r23, Y+36	; 0x24
     fa0:	8d a1       	ldd	r24, Y+37	; 0x25
     fa2:	9e a1       	ldd	r25, Y+38	; 0x26
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	3f ef       	ldi	r19, 0xFF	; 255
     fa8:	4f e7       	ldi	r20, 0x7F	; 127
     faa:	57 e4       	ldi	r21, 0x47	; 71
     fac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fb0:	18 16       	cp	r1, r24
     fb2:	4c f5       	brge	.+82     	; 0x1006 <CLCD_voidSendData+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fb4:	6f a1       	ldd	r22, Y+39	; 0x27
     fb6:	78 a5       	ldd	r23, Y+40	; 0x28
     fb8:	89 a5       	ldd	r24, Y+41	; 0x29
     fba:	9a a5       	ldd	r25, Y+42	; 0x2a
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	40 e2       	ldi	r20, 0x20	; 32
     fc2:	51 e4       	ldi	r21, 0x41	; 65
     fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc8:	dc 01       	movw	r26, r24
     fca:	cb 01       	movw	r24, r22
     fcc:	bc 01       	movw	r22, r24
     fce:	cd 01       	movw	r24, r26
     fd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd4:	dc 01       	movw	r26, r24
     fd6:	cb 01       	movw	r24, r22
     fd8:	9a a3       	std	Y+34, r25	; 0x22
     fda:	89 a3       	std	Y+33, r24	; 0x21
     fdc:	0f c0       	rjmp	.+30     	; 0xffc <CLCD_voidSendData+0xfa>
     fde:	88 ec       	ldi	r24, 0xC8	; 200
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	98 a3       	std	Y+32, r25	; 0x20
     fe4:	8f 8f       	std	Y+31, r24	; 0x1f
     fe6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fe8:	98 a1       	ldd	r25, Y+32	; 0x20
     fea:	01 97       	sbiw	r24, 0x01	; 1
     fec:	f1 f7       	brne	.-4      	; 0xfea <CLCD_voidSendData+0xe8>
     fee:	98 a3       	std	Y+32, r25	; 0x20
     ff0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff2:	89 a1       	ldd	r24, Y+33	; 0x21
     ff4:	9a a1       	ldd	r25, Y+34	; 0x22
     ff6:	01 97       	sbiw	r24, 0x01	; 1
     ff8:	9a a3       	std	Y+34, r25	; 0x22
     ffa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ffc:	89 a1       	ldd	r24, Y+33	; 0x21
     ffe:	9a a1       	ldd	r25, Y+34	; 0x22
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	69 f7       	brne	.-38     	; 0xfde <CLCD_voidSendData+0xdc>
    1004:	14 c0       	rjmp	.+40     	; 0x102e <CLCD_voidSendData+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1006:	6b a1       	ldd	r22, Y+35	; 0x23
    1008:	7c a1       	ldd	r23, Y+36	; 0x24
    100a:	8d a1       	ldd	r24, Y+37	; 0x25
    100c:	9e a1       	ldd	r25, Y+38	; 0x26
    100e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	9a a3       	std	Y+34, r25	; 0x22
    1018:	89 a3       	std	Y+33, r24	; 0x21
    101a:	89 a1       	ldd	r24, Y+33	; 0x21
    101c:	9a a1       	ldd	r25, Y+34	; 0x22
    101e:	9e 8f       	std	Y+30, r25	; 0x1e
    1020:	8d 8f       	std	Y+29, r24	; 0x1d
    1022:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1024:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1026:	01 97       	sbiw	r24, 0x01	; 1
    1028:	f1 f7       	brne	.-4      	; 0x1026 <CLCD_voidSendData+0x124>
    102a:	9e 8f       	std	Y+30, r25	; 0x1e
    102c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	62 e0       	ldi	r22, 0x02	; 2
    1032:	40 e0       	ldi	r20, 0x00	; 0
    1034:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_u8SetPinValue>
	Local_u8Mask=0b11110000;
    1038:	80 ef       	ldi	r24, 0xF0	; 240
    103a:	8b a7       	std	Y+43, r24	; 0x2b
	Local_u8Mask = ~(Local_u8Mask) & Copy_u8Data;
    103c:	8b a5       	ldd	r24, Y+43	; 0x2b
    103e:	98 2f       	mov	r25, r24
    1040:	90 95       	com	r25
    1042:	8c a5       	ldd	r24, Y+44	; 0x2c
    1044:	89 23       	and	r24, r25
    1046:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPortValue(CLCD_DATA_PORT, (Local_u8Mask << 4));
    1048:	8b a5       	ldd	r24, Y+43	; 0x2b
    104a:	98 2f       	mov	r25, r24
    104c:	92 95       	swap	r25
    104e:	90 7f       	andi	r25, 0xF0	; 240
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	69 2f       	mov	r22, r25
    1054:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <DIO_u8SetPortValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_HIGH);
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	62 e0       	ldi	r22, 0x02	; 2
    105c:	41 e0       	ldi	r20, 0x01	; 1
    105e:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_u8SetPinValue>
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	a0 e0       	ldi	r26, 0x00	; 0
    1068:	b0 e4       	ldi	r27, 0x40	; 64
    106a:	89 8f       	std	Y+25, r24	; 0x19
    106c:	9a 8f       	std	Y+26, r25	; 0x1a
    106e:	ab 8f       	std	Y+27, r26	; 0x1b
    1070:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1072:	69 8d       	ldd	r22, Y+25	; 0x19
    1074:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1076:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1078:	9c 8d       	ldd	r25, Y+28	; 0x1c
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	4a ef       	ldi	r20, 0xFA	; 250
    1080:	54 e4       	ldi	r21, 0x44	; 68
    1082:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	8d 8b       	std	Y+21, r24	; 0x15
    108c:	9e 8b       	std	Y+22, r25	; 0x16
    108e:	af 8b       	std	Y+23, r26	; 0x17
    1090:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1092:	6d 89       	ldd	r22, Y+21	; 0x15
    1094:	7e 89       	ldd	r23, Y+22	; 0x16
    1096:	8f 89       	ldd	r24, Y+23	; 0x17
    1098:	98 8d       	ldd	r25, Y+24	; 0x18
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	40 e8       	ldi	r20, 0x80	; 128
    10a0:	5f e3       	ldi	r21, 0x3F	; 63
    10a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10a6:	88 23       	and	r24, r24
    10a8:	2c f4       	brge	.+10     	; 0x10b4 <CLCD_voidSendData+0x1b2>
		__ticks = 1;
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	9c 8b       	std	Y+20, r25	; 0x14
    10b0:	8b 8b       	std	Y+19, r24	; 0x13
    10b2:	3f c0       	rjmp	.+126    	; 0x1132 <CLCD_voidSendData+0x230>
	else if (__tmp > 65535)
    10b4:	6d 89       	ldd	r22, Y+21	; 0x15
    10b6:	7e 89       	ldd	r23, Y+22	; 0x16
    10b8:	8f 89       	ldd	r24, Y+23	; 0x17
    10ba:	98 8d       	ldd	r25, Y+24	; 0x18
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	3f ef       	ldi	r19, 0xFF	; 255
    10c0:	4f e7       	ldi	r20, 0x7F	; 127
    10c2:	57 e4       	ldi	r21, 0x47	; 71
    10c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10c8:	18 16       	cp	r1, r24
    10ca:	4c f5       	brge	.+82     	; 0x111e <CLCD_voidSendData+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10cc:	69 8d       	ldd	r22, Y+25	; 0x19
    10ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	40 e2       	ldi	r20, 0x20	; 32
    10da:	51 e4       	ldi	r21, 0x41	; 65
    10dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e0:	dc 01       	movw	r26, r24
    10e2:	cb 01       	movw	r24, r22
    10e4:	bc 01       	movw	r22, r24
    10e6:	cd 01       	movw	r24, r26
    10e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ec:	dc 01       	movw	r26, r24
    10ee:	cb 01       	movw	r24, r22
    10f0:	9c 8b       	std	Y+20, r25	; 0x14
    10f2:	8b 8b       	std	Y+19, r24	; 0x13
    10f4:	0f c0       	rjmp	.+30     	; 0x1114 <CLCD_voidSendData+0x212>
    10f6:	88 ec       	ldi	r24, 0xC8	; 200
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	9a 8b       	std	Y+18, r25	; 0x12
    10fc:	89 8b       	std	Y+17, r24	; 0x11
    10fe:	89 89       	ldd	r24, Y+17	; 0x11
    1100:	9a 89       	ldd	r25, Y+18	; 0x12
    1102:	01 97       	sbiw	r24, 0x01	; 1
    1104:	f1 f7       	brne	.-4      	; 0x1102 <CLCD_voidSendData+0x200>
    1106:	9a 8b       	std	Y+18, r25	; 0x12
    1108:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    110a:	8b 89       	ldd	r24, Y+19	; 0x13
    110c:	9c 89       	ldd	r25, Y+20	; 0x14
    110e:	01 97       	sbiw	r24, 0x01	; 1
    1110:	9c 8b       	std	Y+20, r25	; 0x14
    1112:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1114:	8b 89       	ldd	r24, Y+19	; 0x13
    1116:	9c 89       	ldd	r25, Y+20	; 0x14
    1118:	00 97       	sbiw	r24, 0x00	; 0
    111a:	69 f7       	brne	.-38     	; 0x10f6 <CLCD_voidSendData+0x1f4>
    111c:	14 c0       	rjmp	.+40     	; 0x1146 <CLCD_voidSendData+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    111e:	6d 89       	ldd	r22, Y+21	; 0x15
    1120:	7e 89       	ldd	r23, Y+22	; 0x16
    1122:	8f 89       	ldd	r24, Y+23	; 0x17
    1124:	98 8d       	ldd	r25, Y+24	; 0x18
    1126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	9c 8b       	std	Y+20, r25	; 0x14
    1130:	8b 8b       	std	Y+19, r24	; 0x13
    1132:	8b 89       	ldd	r24, Y+19	; 0x13
    1134:	9c 89       	ldd	r25, Y+20	; 0x14
    1136:	98 8b       	std	Y+16, r25	; 0x10
    1138:	8f 87       	std	Y+15, r24	; 0x0f
    113a:	8f 85       	ldd	r24, Y+15	; 0x0f
    113c:	98 89       	ldd	r25, Y+16	; 0x10
    113e:	01 97       	sbiw	r24, 0x01	; 1
    1140:	f1 f7       	brne	.-4      	; 0x113e <CLCD_voidSendData+0x23c>
    1142:	98 8b       	std	Y+16, r25	; 0x10
    1144:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	62 e0       	ldi	r22, 0x02	; 2
    114a:	40 e0       	ldi	r20, 0x00	; 0
    114c:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_u8SetPinValue>
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	a0 e0       	ldi	r26, 0x00	; 0
    1156:	b0 e4       	ldi	r27, 0x40	; 64
    1158:	8b 87       	std	Y+11, r24	; 0x0b
    115a:	9c 87       	std	Y+12, r25	; 0x0c
    115c:	ad 87       	std	Y+13, r26	; 0x0d
    115e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1160:	6b 85       	ldd	r22, Y+11	; 0x0b
    1162:	7c 85       	ldd	r23, Y+12	; 0x0c
    1164:	8d 85       	ldd	r24, Y+13	; 0x0d
    1166:	9e 85       	ldd	r25, Y+14	; 0x0e
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	4a ef       	ldi	r20, 0xFA	; 250
    116e:	54 e4       	ldi	r21, 0x44	; 68
    1170:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1174:	dc 01       	movw	r26, r24
    1176:	cb 01       	movw	r24, r22
    1178:	8f 83       	std	Y+7, r24	; 0x07
    117a:	98 87       	std	Y+8, r25	; 0x08
    117c:	a9 87       	std	Y+9, r26	; 0x09
    117e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1180:	6f 81       	ldd	r22, Y+7	; 0x07
    1182:	78 85       	ldd	r23, Y+8	; 0x08
    1184:	89 85       	ldd	r24, Y+9	; 0x09
    1186:	9a 85       	ldd	r25, Y+10	; 0x0a
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	40 e8       	ldi	r20, 0x80	; 128
    118e:	5f e3       	ldi	r21, 0x3F	; 63
    1190:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1194:	88 23       	and	r24, r24
    1196:	2c f4       	brge	.+10     	; 0x11a2 <CLCD_voidSendData+0x2a0>
		__ticks = 1;
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	9e 83       	std	Y+6, r25	; 0x06
    119e:	8d 83       	std	Y+5, r24	; 0x05
    11a0:	3f c0       	rjmp	.+126    	; 0x1220 <CLCD_voidSendData+0x31e>
	else if (__tmp > 65535)
    11a2:	6f 81       	ldd	r22, Y+7	; 0x07
    11a4:	78 85       	ldd	r23, Y+8	; 0x08
    11a6:	89 85       	ldd	r24, Y+9	; 0x09
    11a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	3f ef       	ldi	r19, 0xFF	; 255
    11ae:	4f e7       	ldi	r20, 0x7F	; 127
    11b0:	57 e4       	ldi	r21, 0x47	; 71
    11b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11b6:	18 16       	cp	r1, r24
    11b8:	4c f5       	brge	.+82     	; 0x120c <CLCD_voidSendData+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    11bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    11be:	8d 85       	ldd	r24, Y+13	; 0x0d
    11c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	40 e2       	ldi	r20, 0x20	; 32
    11c8:	51 e4       	ldi	r21, 0x41	; 65
    11ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	bc 01       	movw	r22, r24
    11d4:	cd 01       	movw	r24, r26
    11d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11da:	dc 01       	movw	r26, r24
    11dc:	cb 01       	movw	r24, r22
    11de:	9e 83       	std	Y+6, r25	; 0x06
    11e0:	8d 83       	std	Y+5, r24	; 0x05
    11e2:	0f c0       	rjmp	.+30     	; 0x1202 <CLCD_voidSendData+0x300>
    11e4:	88 ec       	ldi	r24, 0xC8	; 200
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	9c 83       	std	Y+4, r25	; 0x04
    11ea:	8b 83       	std	Y+3, r24	; 0x03
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	9c 81       	ldd	r25, Y+4	; 0x04
    11f0:	01 97       	sbiw	r24, 0x01	; 1
    11f2:	f1 f7       	brne	.-4      	; 0x11f0 <CLCD_voidSendData+0x2ee>
    11f4:	9c 83       	std	Y+4, r25	; 0x04
    11f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11f8:	8d 81       	ldd	r24, Y+5	; 0x05
    11fa:	9e 81       	ldd	r25, Y+6	; 0x06
    11fc:	01 97       	sbiw	r24, 0x01	; 1
    11fe:	9e 83       	std	Y+6, r25	; 0x06
    1200:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1202:	8d 81       	ldd	r24, Y+5	; 0x05
    1204:	9e 81       	ldd	r25, Y+6	; 0x06
    1206:	00 97       	sbiw	r24, 0x00	; 0
    1208:	69 f7       	brne	.-38     	; 0x11e4 <CLCD_voidSendData+0x2e2>
    120a:	14 c0       	rjmp	.+40     	; 0x1234 <CLCD_voidSendData+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    120c:	6f 81       	ldd	r22, Y+7	; 0x07
    120e:	78 85       	ldd	r23, Y+8	; 0x08
    1210:	89 85       	ldd	r24, Y+9	; 0x09
    1212:	9a 85       	ldd	r25, Y+10	; 0x0a
    1214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1218:	dc 01       	movw	r26, r24
    121a:	cb 01       	movw	r24, r22
    121c:	9e 83       	std	Y+6, r25	; 0x06
    121e:	8d 83       	std	Y+5, r24	; 0x05
    1220:	8d 81       	ldd	r24, Y+5	; 0x05
    1222:	9e 81       	ldd	r25, Y+6	; 0x06
    1224:	9a 83       	std	Y+2, r25	; 0x02
    1226:	89 83       	std	Y+1, r24	; 0x01
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	9a 81       	ldd	r25, Y+2	; 0x02
    122c:	01 97       	sbiw	r24, 0x01	; 1
    122e:	f1 f7       	brne	.-4      	; 0x122c <CLCD_voidSendData+0x32a>
    1230:	9a 83       	std	Y+2, r25	; 0x02
    1232:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	CLCD_voidSendCommand(0x06);
    1234:	86 e0       	ldi	r24, 0x06	; 6
    1236:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
#else
#error "In correct cconfigrtion of LCD_MODE"
#endif
}
    123a:	ac 96       	adiw	r28, 0x2c	; 44
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
    1246:	cf 91       	pop	r28
    1248:	df 91       	pop	r29
    124a:	08 95       	ret

0000124c <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	e8 97       	sbiw	r28, 0x38	; 56
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	a0 e2       	ldi	r26, 0x20	; 32
    1266:	b2 e4       	ldi	r27, 0x42	; 66
    1268:	8d ab       	std	Y+53, r24	; 0x35
    126a:	9e ab       	std	Y+54, r25	; 0x36
    126c:	af ab       	std	Y+55, r26	; 0x37
    126e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1270:	6d a9       	ldd	r22, Y+53	; 0x35
    1272:	7e a9       	ldd	r23, Y+54	; 0x36
    1274:	8f a9       	ldd	r24, Y+55	; 0x37
    1276:	98 ad       	ldd	r25, Y+56	; 0x38
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	4a ef       	ldi	r20, 0xFA	; 250
    127e:	54 e4       	ldi	r21, 0x44	; 68
    1280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1284:	dc 01       	movw	r26, r24
    1286:	cb 01       	movw	r24, r22
    1288:	89 ab       	std	Y+49, r24	; 0x31
    128a:	9a ab       	std	Y+50, r25	; 0x32
    128c:	ab ab       	std	Y+51, r26	; 0x33
    128e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1290:	69 a9       	ldd	r22, Y+49	; 0x31
    1292:	7a a9       	ldd	r23, Y+50	; 0x32
    1294:	8b a9       	ldd	r24, Y+51	; 0x33
    1296:	9c a9       	ldd	r25, Y+52	; 0x34
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	40 e8       	ldi	r20, 0x80	; 128
    129e:	5f e3       	ldi	r21, 0x3F	; 63
    12a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12a4:	88 23       	and	r24, r24
    12a6:	2c f4       	brge	.+10     	; 0x12b2 <CLCD_voidInit+0x66>
		__ticks = 1;
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	98 ab       	std	Y+48, r25	; 0x30
    12ae:	8f a7       	std	Y+47, r24	; 0x2f
    12b0:	3f c0       	rjmp	.+126    	; 0x1330 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    12b2:	69 a9       	ldd	r22, Y+49	; 0x31
    12b4:	7a a9       	ldd	r23, Y+50	; 0x32
    12b6:	8b a9       	ldd	r24, Y+51	; 0x33
    12b8:	9c a9       	ldd	r25, Y+52	; 0x34
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	3f ef       	ldi	r19, 0xFF	; 255
    12be:	4f e7       	ldi	r20, 0x7F	; 127
    12c0:	57 e4       	ldi	r21, 0x47	; 71
    12c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12c6:	18 16       	cp	r1, r24
    12c8:	4c f5       	brge	.+82     	; 0x131c <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ca:	6d a9       	ldd	r22, Y+53	; 0x35
    12cc:	7e a9       	ldd	r23, Y+54	; 0x36
    12ce:	8f a9       	ldd	r24, Y+55	; 0x37
    12d0:	98 ad       	ldd	r25, Y+56	; 0x38
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	40 e2       	ldi	r20, 0x20	; 32
    12d8:	51 e4       	ldi	r21, 0x41	; 65
    12da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12de:	dc 01       	movw	r26, r24
    12e0:	cb 01       	movw	r24, r22
    12e2:	bc 01       	movw	r22, r24
    12e4:	cd 01       	movw	r24, r26
    12e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ea:	dc 01       	movw	r26, r24
    12ec:	cb 01       	movw	r24, r22
    12ee:	98 ab       	std	Y+48, r25	; 0x30
    12f0:	8f a7       	std	Y+47, r24	; 0x2f
    12f2:	0f c0       	rjmp	.+30     	; 0x1312 <CLCD_voidInit+0xc6>
    12f4:	88 ec       	ldi	r24, 0xC8	; 200
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	9e a7       	std	Y+46, r25	; 0x2e
    12fa:	8d a7       	std	Y+45, r24	; 0x2d
    12fc:	8d a5       	ldd	r24, Y+45	; 0x2d
    12fe:	9e a5       	ldd	r25, Y+46	; 0x2e
    1300:	01 97       	sbiw	r24, 0x01	; 1
    1302:	f1 f7       	brne	.-4      	; 0x1300 <CLCD_voidInit+0xb4>
    1304:	9e a7       	std	Y+46, r25	; 0x2e
    1306:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1308:	8f a5       	ldd	r24, Y+47	; 0x2f
    130a:	98 a9       	ldd	r25, Y+48	; 0x30
    130c:	01 97       	sbiw	r24, 0x01	; 1
    130e:	98 ab       	std	Y+48, r25	; 0x30
    1310:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1312:	8f a5       	ldd	r24, Y+47	; 0x2f
    1314:	98 a9       	ldd	r25, Y+48	; 0x30
    1316:	00 97       	sbiw	r24, 0x00	; 0
    1318:	69 f7       	brne	.-38     	; 0x12f4 <CLCD_voidInit+0xa8>
    131a:	14 c0       	rjmp	.+40     	; 0x1344 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    131c:	69 a9       	ldd	r22, Y+49	; 0x31
    131e:	7a a9       	ldd	r23, Y+50	; 0x32
    1320:	8b a9       	ldd	r24, Y+51	; 0x33
    1322:	9c a9       	ldd	r25, Y+52	; 0x34
    1324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	98 ab       	std	Y+48, r25	; 0x30
    132e:	8f a7       	std	Y+47, r24	; 0x2f
    1330:	8f a5       	ldd	r24, Y+47	; 0x2f
    1332:	98 a9       	ldd	r25, Y+48	; 0x30
    1334:	9c a7       	std	Y+44, r25	; 0x2c
    1336:	8b a7       	std	Y+43, r24	; 0x2b
    1338:	8b a5       	ldd	r24, Y+43	; 0x2b
    133a:	9c a5       	ldd	r25, Y+44	; 0x2c
    133c:	01 97       	sbiw	r24, 0x01	; 1
    133e:	f1 f7       	brne	.-4      	; 0x133c <CLCD_voidInit+0xf0>
    1340:	9c a7       	std	Y+44, r25	; 0x2c
    1342:	8b a7       	std	Y+43, r24	; 0x2b
	CLCD_voidSendCommand(0b00000001);
#elif CLCD_CHIOCE_MODE==_4_BIT_MODE
	/*WAIT FOR MORE THEN 30 MS*/
	_delay_ms(40);
	/*function set command: Set Bit 5 */
	CLCD_voidSendCommand(0b00100000);
    1344:	80 e2       	ldi	r24, 0x20	; 32
    1346:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(0b00100000);
    134a:	80 e2       	ldi	r24, 0x20	; 32
    134c:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

	/*function set command:(7_Bit) N --> Lines,(6_Bit) F --> 5*8 font */
	CLCD_voidSendCommand(0b10000000);
    1350:	80 e8       	ldi	r24, 0x80	; 128
    1352:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	a0 e8       	ldi	r26, 0x80	; 128
    135c:	bf e3       	ldi	r27, 0x3F	; 63
    135e:	8f a3       	std	Y+39, r24	; 0x27
    1360:	98 a7       	std	Y+40, r25	; 0x28
    1362:	a9 a7       	std	Y+41, r26	; 0x29
    1364:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1366:	6f a1       	ldd	r22, Y+39	; 0x27
    1368:	78 a5       	ldd	r23, Y+40	; 0x28
    136a:	89 a5       	ldd	r24, Y+41	; 0x29
    136c:	9a a5       	ldd	r25, Y+42	; 0x2a
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	4a ef       	ldi	r20, 0xFA	; 250
    1374:	54 e4       	ldi	r21, 0x44	; 68
    1376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    137a:	dc 01       	movw	r26, r24
    137c:	cb 01       	movw	r24, r22
    137e:	8b a3       	std	Y+35, r24	; 0x23
    1380:	9c a3       	std	Y+36, r25	; 0x24
    1382:	ad a3       	std	Y+37, r26	; 0x25
    1384:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1386:	6b a1       	ldd	r22, Y+35	; 0x23
    1388:	7c a1       	ldd	r23, Y+36	; 0x24
    138a:	8d a1       	ldd	r24, Y+37	; 0x25
    138c:	9e a1       	ldd	r25, Y+38	; 0x26
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	40 e8       	ldi	r20, 0x80	; 128
    1394:	5f e3       	ldi	r21, 0x3F	; 63
    1396:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    139a:	88 23       	and	r24, r24
    139c:	2c f4       	brge	.+10     	; 0x13a8 <CLCD_voidInit+0x15c>
		__ticks = 1;
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	9a a3       	std	Y+34, r25	; 0x22
    13a4:	89 a3       	std	Y+33, r24	; 0x21
    13a6:	3f c0       	rjmp	.+126    	; 0x1426 <CLCD_voidInit+0x1da>
	else if (__tmp > 65535)
    13a8:	6b a1       	ldd	r22, Y+35	; 0x23
    13aa:	7c a1       	ldd	r23, Y+36	; 0x24
    13ac:	8d a1       	ldd	r24, Y+37	; 0x25
    13ae:	9e a1       	ldd	r25, Y+38	; 0x26
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	3f ef       	ldi	r19, 0xFF	; 255
    13b4:	4f e7       	ldi	r20, 0x7F	; 127
    13b6:	57 e4       	ldi	r21, 0x47	; 71
    13b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13bc:	18 16       	cp	r1, r24
    13be:	4c f5       	brge	.+82     	; 0x1412 <CLCD_voidInit+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c0:	6f a1       	ldd	r22, Y+39	; 0x27
    13c2:	78 a5       	ldd	r23, Y+40	; 0x28
    13c4:	89 a5       	ldd	r24, Y+41	; 0x29
    13c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	40 e2       	ldi	r20, 0x20	; 32
    13ce:	51 e4       	ldi	r21, 0x41	; 65
    13d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	bc 01       	movw	r22, r24
    13da:	cd 01       	movw	r24, r26
    13dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e0:	dc 01       	movw	r26, r24
    13e2:	cb 01       	movw	r24, r22
    13e4:	9a a3       	std	Y+34, r25	; 0x22
    13e6:	89 a3       	std	Y+33, r24	; 0x21
    13e8:	0f c0       	rjmp	.+30     	; 0x1408 <CLCD_voidInit+0x1bc>
    13ea:	88 ec       	ldi	r24, 0xC8	; 200
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	98 a3       	std	Y+32, r25	; 0x20
    13f0:	8f 8f       	std	Y+31, r24	; 0x1f
    13f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13f4:	98 a1       	ldd	r25, Y+32	; 0x20
    13f6:	01 97       	sbiw	r24, 0x01	; 1
    13f8:	f1 f7       	brne	.-4      	; 0x13f6 <CLCD_voidInit+0x1aa>
    13fa:	98 a3       	std	Y+32, r25	; 0x20
    13fc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13fe:	89 a1       	ldd	r24, Y+33	; 0x21
    1400:	9a a1       	ldd	r25, Y+34	; 0x22
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	9a a3       	std	Y+34, r25	; 0x22
    1406:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1408:	89 a1       	ldd	r24, Y+33	; 0x21
    140a:	9a a1       	ldd	r25, Y+34	; 0x22
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	69 f7       	brne	.-38     	; 0x13ea <CLCD_voidInit+0x19e>
    1410:	14 c0       	rjmp	.+40     	; 0x143a <CLCD_voidInit+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1412:	6b a1       	ldd	r22, Y+35	; 0x23
    1414:	7c a1       	ldd	r23, Y+36	; 0x24
    1416:	8d a1       	ldd	r24, Y+37	; 0x25
    1418:	9e a1       	ldd	r25, Y+38	; 0x26
    141a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	9a a3       	std	Y+34, r25	; 0x22
    1424:	89 a3       	std	Y+33, r24	; 0x21
    1426:	89 a1       	ldd	r24, Y+33	; 0x21
    1428:	9a a1       	ldd	r25, Y+34	; 0x22
    142a:	9e 8f       	std	Y+30, r25	; 0x1e
    142c:	8d 8f       	std	Y+29, r24	; 0x1d
    142e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1430:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1432:	01 97       	sbiw	r24, 0x01	; 1
    1434:	f1 f7       	brne	.-4      	; 0x1432 <CLCD_voidInit+0x1e6>
    1436:	9e 8f       	std	Y+30, r25	; 0x1e
    1438:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	CLCD_voidSendCommand(0b0000);
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	/*Display No/00f ctrl  */
	/*Set Bit 7 ,(6_Bit) D --> display enable ,C --> disable cursor ,B --> no blink cursor*/
	CLCD_voidSendCommand(0b011000000);
    1440:	80 ec       	ldi	r24, 0xC0	; 192
    1442:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	a0 e8       	ldi	r26, 0x80	; 128
    144c:	bf e3       	ldi	r27, 0x3F	; 63
    144e:	89 8f       	std	Y+25, r24	; 0x19
    1450:	9a 8f       	std	Y+26, r25	; 0x1a
    1452:	ab 8f       	std	Y+27, r26	; 0x1b
    1454:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1456:	69 8d       	ldd	r22, Y+25	; 0x19
    1458:	7a 8d       	ldd	r23, Y+26	; 0x1a
    145a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    145c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	4a ef       	ldi	r20, 0xFA	; 250
    1464:	54 e4       	ldi	r21, 0x44	; 68
    1466:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    146a:	dc 01       	movw	r26, r24
    146c:	cb 01       	movw	r24, r22
    146e:	8d 8b       	std	Y+21, r24	; 0x15
    1470:	9e 8b       	std	Y+22, r25	; 0x16
    1472:	af 8b       	std	Y+23, r26	; 0x17
    1474:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1476:	6d 89       	ldd	r22, Y+21	; 0x15
    1478:	7e 89       	ldd	r23, Y+22	; 0x16
    147a:	8f 89       	ldd	r24, Y+23	; 0x17
    147c:	98 8d       	ldd	r25, Y+24	; 0x18
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	40 e8       	ldi	r20, 0x80	; 128
    1484:	5f e3       	ldi	r21, 0x3F	; 63
    1486:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    148a:	88 23       	and	r24, r24
    148c:	2c f4       	brge	.+10     	; 0x1498 <CLCD_voidInit+0x24c>
		__ticks = 1;
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	9c 8b       	std	Y+20, r25	; 0x14
    1494:	8b 8b       	std	Y+19, r24	; 0x13
    1496:	3f c0       	rjmp	.+126    	; 0x1516 <CLCD_voidInit+0x2ca>
	else if (__tmp > 65535)
    1498:	6d 89       	ldd	r22, Y+21	; 0x15
    149a:	7e 89       	ldd	r23, Y+22	; 0x16
    149c:	8f 89       	ldd	r24, Y+23	; 0x17
    149e:	98 8d       	ldd	r25, Y+24	; 0x18
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	3f ef       	ldi	r19, 0xFF	; 255
    14a4:	4f e7       	ldi	r20, 0x7F	; 127
    14a6:	57 e4       	ldi	r21, 0x47	; 71
    14a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14ac:	18 16       	cp	r1, r24
    14ae:	4c f5       	brge	.+82     	; 0x1502 <CLCD_voidInit+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14b0:	69 8d       	ldd	r22, Y+25	; 0x19
    14b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	40 e2       	ldi	r20, 0x20	; 32
    14be:	51 e4       	ldi	r21, 0x41	; 65
    14c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c4:	dc 01       	movw	r26, r24
    14c6:	cb 01       	movw	r24, r22
    14c8:	bc 01       	movw	r22, r24
    14ca:	cd 01       	movw	r24, r26
    14cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d0:	dc 01       	movw	r26, r24
    14d2:	cb 01       	movw	r24, r22
    14d4:	9c 8b       	std	Y+20, r25	; 0x14
    14d6:	8b 8b       	std	Y+19, r24	; 0x13
    14d8:	0f c0       	rjmp	.+30     	; 0x14f8 <CLCD_voidInit+0x2ac>
    14da:	88 ec       	ldi	r24, 0xC8	; 200
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	9a 8b       	std	Y+18, r25	; 0x12
    14e0:	89 8b       	std	Y+17, r24	; 0x11
    14e2:	89 89       	ldd	r24, Y+17	; 0x11
    14e4:	9a 89       	ldd	r25, Y+18	; 0x12
    14e6:	01 97       	sbiw	r24, 0x01	; 1
    14e8:	f1 f7       	brne	.-4      	; 0x14e6 <CLCD_voidInit+0x29a>
    14ea:	9a 8b       	std	Y+18, r25	; 0x12
    14ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ee:	8b 89       	ldd	r24, Y+19	; 0x13
    14f0:	9c 89       	ldd	r25, Y+20	; 0x14
    14f2:	01 97       	sbiw	r24, 0x01	; 1
    14f4:	9c 8b       	std	Y+20, r25	; 0x14
    14f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14f8:	8b 89       	ldd	r24, Y+19	; 0x13
    14fa:	9c 89       	ldd	r25, Y+20	; 0x14
    14fc:	00 97       	sbiw	r24, 0x00	; 0
    14fe:	69 f7       	brne	.-38     	; 0x14da <CLCD_voidInit+0x28e>
    1500:	14 c0       	rjmp	.+40     	; 0x152a <CLCD_voidInit+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1502:	6d 89       	ldd	r22, Y+21	; 0x15
    1504:	7e 89       	ldd	r23, Y+22	; 0x16
    1506:	8f 89       	ldd	r24, Y+23	; 0x17
    1508:	98 8d       	ldd	r25, Y+24	; 0x18
    150a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    150e:	dc 01       	movw	r26, r24
    1510:	cb 01       	movw	r24, r22
    1512:	9c 8b       	std	Y+20, r25	; 0x14
    1514:	8b 8b       	std	Y+19, r24	; 0x13
    1516:	8b 89       	ldd	r24, Y+19	; 0x13
    1518:	9c 89       	ldd	r25, Y+20	; 0x14
    151a:	98 8b       	std	Y+16, r25	; 0x10
    151c:	8f 87       	std	Y+15, r24	; 0x0f
    151e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1520:	98 89       	ldd	r25, Y+16	; 0x10
    1522:	01 97       	sbiw	r24, 0x01	; 1
    1524:	f1 f7       	brne	.-4      	; 0x1522 <CLCD_voidInit+0x2d6>
    1526:	98 8b       	std	Y+16, r25	; 0x10
    1528:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLCD_voidSendCommand(0b0000);
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	/*Display Clear */
	CLCD_voidSendCommand(0b00010000);
    1530:	80 e1       	ldi	r24, 0x10	; 16
    1532:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	a0 e0       	ldi	r26, 0x00	; 0
    153c:	b0 e4       	ldi	r27, 0x40	; 64
    153e:	8b 87       	std	Y+11, r24	; 0x0b
    1540:	9c 87       	std	Y+12, r25	; 0x0c
    1542:	ad 87       	std	Y+13, r26	; 0x0d
    1544:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1546:	6b 85       	ldd	r22, Y+11	; 0x0b
    1548:	7c 85       	ldd	r23, Y+12	; 0x0c
    154a:	8d 85       	ldd	r24, Y+13	; 0x0d
    154c:	9e 85       	ldd	r25, Y+14	; 0x0e
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	4a ef       	ldi	r20, 0xFA	; 250
    1554:	54 e4       	ldi	r21, 0x44	; 68
    1556:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    155a:	dc 01       	movw	r26, r24
    155c:	cb 01       	movw	r24, r22
    155e:	8f 83       	std	Y+7, r24	; 0x07
    1560:	98 87       	std	Y+8, r25	; 0x08
    1562:	a9 87       	std	Y+9, r26	; 0x09
    1564:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1566:	6f 81       	ldd	r22, Y+7	; 0x07
    1568:	78 85       	ldd	r23, Y+8	; 0x08
    156a:	89 85       	ldd	r24, Y+9	; 0x09
    156c:	9a 85       	ldd	r25, Y+10	; 0x0a
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	40 e8       	ldi	r20, 0x80	; 128
    1574:	5f e3       	ldi	r21, 0x3F	; 63
    1576:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    157a:	88 23       	and	r24, r24
    157c:	2c f4       	brge	.+10     	; 0x1588 <CLCD_voidInit+0x33c>
		__ticks = 1;
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	9e 83       	std	Y+6, r25	; 0x06
    1584:	8d 83       	std	Y+5, r24	; 0x05
    1586:	3f c0       	rjmp	.+126    	; 0x1606 <CLCD_voidInit+0x3ba>
	else if (__tmp > 65535)
    1588:	6f 81       	ldd	r22, Y+7	; 0x07
    158a:	78 85       	ldd	r23, Y+8	; 0x08
    158c:	89 85       	ldd	r24, Y+9	; 0x09
    158e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	3f ef       	ldi	r19, 0xFF	; 255
    1594:	4f e7       	ldi	r20, 0x7F	; 127
    1596:	57 e4       	ldi	r21, 0x47	; 71
    1598:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    159c:	18 16       	cp	r1, r24
    159e:	4c f5       	brge	.+82     	; 0x15f2 <CLCD_voidInit+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    15a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    15a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	40 e2       	ldi	r20, 0x20	; 32
    15ae:	51 e4       	ldi	r21, 0x41	; 65
    15b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	bc 01       	movw	r22, r24
    15ba:	cd 01       	movw	r24, r26
    15bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	9e 83       	std	Y+6, r25	; 0x06
    15c6:	8d 83       	std	Y+5, r24	; 0x05
    15c8:	0f c0       	rjmp	.+30     	; 0x15e8 <CLCD_voidInit+0x39c>
    15ca:	88 ec       	ldi	r24, 0xC8	; 200
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	9c 83       	std	Y+4, r25	; 0x04
    15d0:	8b 83       	std	Y+3, r24	; 0x03
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	9c 81       	ldd	r25, Y+4	; 0x04
    15d6:	01 97       	sbiw	r24, 0x01	; 1
    15d8:	f1 f7       	brne	.-4      	; 0x15d6 <CLCD_voidInit+0x38a>
    15da:	9c 83       	std	Y+4, r25	; 0x04
    15dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15de:	8d 81       	ldd	r24, Y+5	; 0x05
    15e0:	9e 81       	ldd	r25, Y+6	; 0x06
    15e2:	01 97       	sbiw	r24, 0x01	; 1
    15e4:	9e 83       	std	Y+6, r25	; 0x06
    15e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15e8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ea:	9e 81       	ldd	r25, Y+6	; 0x06
    15ec:	00 97       	sbiw	r24, 0x00	; 0
    15ee:	69 f7       	brne	.-38     	; 0x15ca <CLCD_voidInit+0x37e>
    15f0:	14 c0       	rjmp	.+40     	; 0x161a <CLCD_voidInit+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15f2:	6f 81       	ldd	r22, Y+7	; 0x07
    15f4:	78 85       	ldd	r23, Y+8	; 0x08
    15f6:	89 85       	ldd	r24, Y+9	; 0x09
    15f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15fe:	dc 01       	movw	r26, r24
    1600:	cb 01       	movw	r24, r22
    1602:	9e 83       	std	Y+6, r25	; 0x06
    1604:	8d 83       	std	Y+5, r24	; 0x05
    1606:	8d 81       	ldd	r24, Y+5	; 0x05
    1608:	9e 81       	ldd	r25, Y+6	; 0x06
    160a:	9a 83       	std	Y+2, r25	; 0x02
    160c:	89 83       	std	Y+1, r24	; 0x01
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	9a 81       	ldd	r25, Y+2	; 0x02
    1612:	01 97       	sbiw	r24, 0x01	; 1
    1614:	f1 f7       	brne	.-4      	; 0x1612 <CLCD_voidInit+0x3c6>
    1616:	9a 83       	std	Y+2, r25	; 0x02
    1618:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	iniIsFinich=1;
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	80 93 72 00 	sts	0x0072, r24
#else
#error "In correct cconfigrtion of LCD_MODE"
#endif
}
    1620:	e8 96       	adiw	r28, 0x38	; 56
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	f8 94       	cli
    1626:	de bf       	out	0x3e, r29	; 62
    1628:	0f be       	out	0x3f, r0	; 63
    162a:	cd bf       	out	0x3d, r28	; 61
    162c:	cf 91       	pop	r28
    162e:	df 91       	pop	r29
    1630:	08 95       	ret

00001632 <CLCD_voidSendString>:
void CLCD_voidSendString(const char* Copy_pcString)//char ASCII Value Constant not allow the func to change the sent string
{
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	00 d0       	rcall	.+0      	; 0x1638 <CLCD_voidSendString+0x6>
    1638:	0f 92       	push	r0
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	9b 83       	std	Y+3, r25	; 0x03
    1640:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8cnt=0;
    1642:	19 82       	std	Y+1, r1	; 0x01
    1644:	0e c0       	rjmp	.+28     	; 0x1662 <CLCD_voidSendString+0x30>
	while(Copy_pcString[Local_u8cnt]!='\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8cnt]);
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	9b 81       	ldd	r25, Y+3	; 0x03
    1650:	fc 01       	movw	r30, r24
    1652:	e2 0f       	add	r30, r18
    1654:	f3 1f       	adc	r31, r19
    1656:	80 81       	ld	r24, Z
    1658:	0e 94 81 07 	call	0xf02	; 0xf02 <CLCD_voidSendData>
		Local_u8cnt++;
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	8f 5f       	subi	r24, 0xFF	; 255
    1660:	89 83       	std	Y+1, r24	; 0x01
#endif
}
void CLCD_voidSendString(const char* Copy_pcString)//char ASCII Value Constant not allow the func to change the sent string
{
	u8 Local_u8cnt=0;
	while(Copy_pcString[Local_u8cnt]!='\0')
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	9b 81       	ldd	r25, Y+3	; 0x03
    166c:	fc 01       	movw	r30, r24
    166e:	e2 0f       	add	r30, r18
    1670:	f3 1f       	adc	r31, r19
    1672:	80 81       	ld	r24, Z
    1674:	88 23       	and	r24, r24
    1676:	39 f7       	brne	.-50     	; 0x1646 <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8cnt]);
		Local_u8cnt++;
	}
}
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	cf 91       	pop	r28
    1680:	df 91       	pop	r29
    1682:	08 95       	ret

00001684 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1684:	df 93       	push	r29
    1686:	cf 93       	push	r28
    1688:	00 d0       	rcall	.+0      	; 0x168a <CLCD_voidGoToXY+0x6>
    168a:	0f 92       	push	r0
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
    1690:	8a 83       	std	Y+2, r24	; 0x02
    1692:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	88 23       	and	r24, r24
    1698:	51 f4       	brne	.+20     	; 0x16ae <CLCD_voidGoToXY+0x2a>
	{
		if (Copy_u8YPos > 15) {
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	80 31       	cpi	r24, 0x10	; 16
    169e:	20 f0       	brcs	.+8      	; 0x16a8 <CLCD_voidGoToXY+0x24>
			Local_u8Address = 0x40 + Copy_u8YPos;
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	80 5c       	subi	r24, 0xC0	; 192
    16a4:	89 83       	std	Y+1, r24	; 0x01
    16a6:	09 c0       	rjmp	.+18     	; 0x16ba <CLCD_voidGoToXY+0x36>
		} else {
			Local_u8Address = Copy_u8YPos;
    16a8:	8b 81       	ldd	r24, Y+3	; 0x03
    16aa:	89 83       	std	Y+1, r24	; 0x01
    16ac:	06 c0       	rjmp	.+12     	; 0x16ba <CLCD_voidGoToXY+0x36>
		}
	}
	else if(Copy_u8XPos==1)
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	81 30       	cpi	r24, 0x01	; 1
    16b2:	19 f4       	brne	.+6      	; 0x16ba <CLCD_voidGoToXY+0x36>
	{
		Local_u8Address=0x40+Copy_u8YPos;
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	80 5c       	subi	r24, 0xC0	; 192
    16b8:	89 83       	std	Y+1, r24	; 0x01
	}
	//put command from data sheet
	CLCD_voidSendCommand(Local_u8Address+128);
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	80 58       	subi	r24, 0x80	; 128
    16be:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
}
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	0f 90       	pop	r0
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	08 95       	ret

000016ce <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNmber,u8 Copy_u8XPos,u8 Copy_u8Ypos)
{
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
    16d6:	27 97       	sbiw	r28, 0x07	; 7
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	f8 94       	cli
    16dc:	de bf       	out	0x3e, r29	; 62
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	cd bf       	out	0x3d, r28	; 61
    16e2:	9c 83       	std	Y+4, r25	; 0x04
    16e4:	8b 83       	std	Y+3, r24	; 0x03
    16e6:	6d 83       	std	Y+5, r22	; 0x05
    16e8:	4e 83       	std	Y+6, r20	; 0x06
    16ea:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress=0;
    16ec:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8iterator;
	/*Calculate the CGRAM address whose each block is 8 bytes */
	Local_u8CGRAMAddress= Copy_u8PatternNmber*8;
    16ee:	8d 81       	ldd	r24, Y+5	; 0x05
    16f0:	88 2f       	mov	r24, r24
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	88 0f       	add	r24, r24
    16fa:	99 1f       	adc	r25, r25
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	8a 83       	std	Y+2, r24	; 0x02

	/*Send CGRAM address command to LCD, with setting bit 6 , clear bit 7 */
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	80 5c       	subi	r24, 0xC0	; 192
    1706:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

	/*Write the pattern into CGRAM */
	for(Local_u8iterator=0;Local_u8iterator<8;Local_u8iterator++)
    170a:	19 82       	std	Y+1, r1	; 0x01
    170c:	0e c0       	rjmp	.+28     	; 0x172a <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8iterator]);
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	9c 81       	ldd	r25, Y+4	; 0x04
    1718:	fc 01       	movw	r30, r24
    171a:	e2 0f       	add	r30, r18
    171c:	f3 1f       	adc	r31, r19
    171e:	80 81       	ld	r24, Z
    1720:	0e 94 81 07 	call	0xf02	; 0xf02 <CLCD_voidSendData>

	/*Send CGRAM address command to LCD, with setting bit 6 , clear bit 7 */
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/*Write the pattern into CGRAM */
	for(Local_u8iterator=0;Local_u8iterator<8;Local_u8iterator++)
    1724:	89 81       	ldd	r24, Y+1	; 0x01
    1726:	8f 5f       	subi	r24, 0xFF	; 255
    1728:	89 83       	std	Y+1, r24	; 0x01
    172a:	89 81       	ldd	r24, Y+1	; 0x01
    172c:	88 30       	cpi	r24, 0x08	; 8
    172e:	78 f3       	brcs	.-34     	; 0x170e <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8iterator]);
	}
	/* Go back to DDRAM to display the pattern */
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8Ypos);
    1730:	8e 81       	ldd	r24, Y+6	; 0x06
    1732:	6f 81       	ldd	r22, Y+7	; 0x07
    1734:	0e 94 42 0b 	call	0x1684	; 0x1684 <CLCD_voidGoToXY>

	/* Display the pattern written  in the CGRAM */
	CLCD_voidSendData(Copy_u8PatternNmber);
    1738:	8d 81       	ldd	r24, Y+5	; 0x05
    173a:	0e 94 81 07 	call	0xf02	; 0xf02 <CLCD_voidSendData>

}
    173e:	27 96       	adiw	r28, 0x07	; 7
    1740:	0f b6       	in	r0, 0x3f	; 63
    1742:	f8 94       	cli
    1744:	de bf       	out	0x3e, r29	; 62
    1746:	0f be       	out	0x3f, r0	; 63
    1748:	cd bf       	out	0x3d, r28	; 61
    174a:	cf 91       	pop	r28
    174c:	df 91       	pop	r29
    174e:	08 95       	ret

00001750 <CLCD_voidWriteNumber>:

void CLCD_voidWriteNumber(u16 Copy_u16Number)
{
    1750:	df 93       	push	r29
    1752:	cf 93       	push	r28
    1754:	00 d0       	rcall	.+0      	; 0x1756 <CLCD_voidWriteNumber+0x6>
    1756:	00 d0       	rcall	.+0      	; 0x1758 <CLCD_voidWriteNumber+0x8>
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	9c 83       	std	Y+4, r25	; 0x04
    175e:	8b 83       	std	Y+3, r24	; 0x03

	u8 Max_Digits = Num_length(Copy_u16Number);
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	9c 81       	ldd	r25, Y+4	; 0x04
    1764:	0e 94 df 0b 	call	0x17be	; 0x17be <Num_length>
    1768:	8a 83       	std	Y+2, r24	; 0x02
	for (s8 i = Max_Digits; i > 0; i--) {
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	89 83       	std	Y+1, r24	; 0x01
    176e:	1d c0       	rjmp	.+58     	; 0x17aa <CLCD_voidWriteNumber+0x5a>
		CLCD_voidSendData((Copy_u16Number / Multi_N_10(i - 1)) + '0');
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	81 50       	subi	r24, 0x01	; 1
    1774:	0e 94 09 0c 	call	0x1812	; 0x1812 <Multi_N_10>
    1778:	9c 01       	movw	r18, r24
    177a:	8b 81       	ldd	r24, Y+3	; 0x03
    177c:	9c 81       	ldd	r25, Y+4	; 0x04
    177e:	b9 01       	movw	r22, r18
    1780:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <__udivmodhi4>
    1784:	cb 01       	movw	r24, r22
    1786:	80 5d       	subi	r24, 0xD0	; 208
    1788:	0e 94 81 07 	call	0xf02	; 0xf02 <CLCD_voidSendData>
		Copy_u16Number = (Copy_u16Number % Multi_N_10(i - 1));
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	81 50       	subi	r24, 0x01	; 1
    1790:	0e 94 09 0c 	call	0x1812	; 0x1812 <Multi_N_10>
    1794:	9c 01       	movw	r18, r24
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	9c 81       	ldd	r25, Y+4	; 0x04
    179a:	b9 01       	movw	r22, r18
    179c:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <__udivmodhi4>
    17a0:	9c 83       	std	Y+4, r25	; 0x04
    17a2:	8b 83       	std	Y+3, r24	; 0x03

void CLCD_voidWriteNumber(u16 Copy_u16Number)
{

	u8 Max_Digits = Num_length(Copy_u16Number);
	for (s8 i = Max_Digits; i > 0; i--) {
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	81 50       	subi	r24, 0x01	; 1
    17a8:	89 83       	std	Y+1, r24	; 0x01
    17aa:	89 81       	ldd	r24, Y+1	; 0x01
    17ac:	18 16       	cp	r1, r24
    17ae:	04 f3       	brlt	.-64     	; 0x1770 <CLCD_voidWriteNumber+0x20>
		CLCD_voidSendData((Copy_u16Number / Multi_N_10(i - 1)) + '0');
		Copy_u16Number = (Copy_u16Number % Multi_N_10(i - 1));
	}
}
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	0f 90       	pop	r0
    17b6:	0f 90       	pop	r0
    17b8:	cf 91       	pop	r28
    17ba:	df 91       	pop	r29
    17bc:	08 95       	ret

000017be <Num_length>:


static u8 Num_length(u16 num) {
    17be:	df 93       	push	r29
    17c0:	cf 93       	push	r28
    17c2:	00 d0       	rcall	.+0      	; 0x17c4 <Num_length+0x6>
    17c4:	00 d0       	rcall	.+0      	; 0x17c6 <Num_length+0x8>
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
    17ca:	9b 83       	std	Y+3, r25	; 0x03
    17cc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Cnt = 0;
    17ce:	19 82       	std	Y+1, r1	; 0x01
	if(num == 0)
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	9b 81       	ldd	r25, Y+3	; 0x03
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	79 f4       	brne	.+30     	; 0x17f6 <Num_length+0x38>
		return 0;
    17d8:	1c 82       	std	Y+4, r1	; 0x04
    17da:	13 c0       	rjmp	.+38     	; 0x1802 <Num_length+0x44>
	while (num != 0) {
		num /= 10;
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	9b 81       	ldd	r25, Y+3	; 0x03
    17e0:	2a e0       	ldi	r18, 0x0A	; 10
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	b9 01       	movw	r22, r18
    17e6:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <__udivmodhi4>
    17ea:	cb 01       	movw	r24, r22
    17ec:	9b 83       	std	Y+3, r25	; 0x03
    17ee:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8Cnt++;
    17f0:	89 81       	ldd	r24, Y+1	; 0x01
    17f2:	8f 5f       	subi	r24, 0xFF	; 255
    17f4:	89 83       	std	Y+1, r24	; 0x01

static u8 Num_length(u16 num) {
	u8 Local_u8Cnt = 0;
	if(num == 0)
		return 0;
	while (num != 0) {
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	9b 81       	ldd	r25, Y+3	; 0x03
    17fa:	00 97       	sbiw	r24, 0x00	; 0
    17fc:	79 f7       	brne	.-34     	; 0x17dc <Num_length+0x1e>
		num /= 10;
		Local_u8Cnt++;
	}
	return Local_u8Cnt;
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	8c 83       	std	Y+4, r24	; 0x04
    1802:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	0f 90       	pop	r0
    180c:	cf 91       	pop	r28
    180e:	df 91       	pop	r29
    1810:	08 95       	ret

00001812 <Multi_N_10>:
static u16 Multi_N_10(u8 N) {
    1812:	df 93       	push	r29
    1814:	cf 93       	push	r28
    1816:	00 d0       	rcall	.+0      	; 0x1818 <Multi_N_10+0x6>
    1818:	00 d0       	rcall	.+0      	; 0x181a <Multi_N_10+0x8>
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
    181e:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8Cnt;
	u16 p = 1;
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	9a 83       	std	Y+2, r25	; 0x02
    1826:	89 83       	std	Y+1, r24	; 0x01
	for (Local_u8Cnt = 0; Local_u8Cnt < N; Local_u8Cnt++)
    1828:	1b 82       	std	Y+3, r1	; 0x03
    182a:	11 c0       	rjmp	.+34     	; 0x184e <Multi_N_10+0x3c>
		p *= 10;
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	9a 81       	ldd	r25, Y+2	; 0x02
    1830:	9c 01       	movw	r18, r24
    1832:	22 0f       	add	r18, r18
    1834:	33 1f       	adc	r19, r19
    1836:	c9 01       	movw	r24, r18
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	82 0f       	add	r24, r18
    1842:	93 1f       	adc	r25, r19
    1844:	9a 83       	std	Y+2, r25	; 0x02
    1846:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8Cnt;
}
static u16 Multi_N_10(u8 N) {
	u8 Local_u8Cnt;
	u16 p = 1;
	for (Local_u8Cnt = 0; Local_u8Cnt < N; Local_u8Cnt++)
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	8f 5f       	subi	r24, 0xFF	; 255
    184c:	8b 83       	std	Y+3, r24	; 0x03
    184e:	9b 81       	ldd	r25, Y+3	; 0x03
    1850:	8c 81       	ldd	r24, Y+4	; 0x04
    1852:	98 17       	cp	r25, r24
    1854:	58 f3       	brcs	.-42     	; 0x182c <Multi_N_10+0x1a>
		p *= 10;
	return p;
    1856:	89 81       	ldd	r24, Y+1	; 0x01
    1858:	9a 81       	ldd	r25, Y+2	; 0x02
}
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	cf 91       	pop	r28
    1864:	df 91       	pop	r29
    1866:	08 95       	ret

00001868 <DIO_u8SetPinValue>:




u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
    1868:	df 93       	push	r29
    186a:	cf 93       	push	r28
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
    1870:	28 97       	sbiw	r28, 0x08	; 8
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	f8 94       	cli
    1876:	de bf       	out	0x3e, r29	; 62
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	cd bf       	out	0x3d, r28	; 61
    187c:	8a 83       	std	Y+2, r24	; 0x02
    187e:	6b 83       	std	Y+3, r22	; 0x03
    1880:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1882:	19 82       	std	Y+1, r1	; 0x01
	if(DIO_PIN_HIGH==Copy_u8Value)
    1884:	8c 81       	ldd	r24, Y+4	; 0x04
    1886:	81 30       	cpi	r24, 0x01	; 1
    1888:	09 f0       	breq	.+2      	; 0x188c <DIO_u8SetPinValue+0x24>
    188a:	79 c0       	rjmp	.+242    	; 0x197e <DIO_u8SetPinValue+0x116>
	{
		if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    188c:	8b 81       	ldd	r24, Y+3	; 0x03
    188e:	88 30       	cpi	r24, 0x08	; 8
    1890:	08 f0       	brcs	.+2      	; 0x1894 <DIO_u8SetPinValue+0x2c>
    1892:	72 c0       	rjmp	.+228    	; 0x1978 <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
    1894:	8a 81       	ldd	r24, Y+2	; 0x02
    1896:	28 2f       	mov	r18, r24
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	38 87       	std	Y+8, r19	; 0x08
    189c:	2f 83       	std	Y+7, r18	; 0x07
    189e:	8f 81       	ldd	r24, Y+7	; 0x07
    18a0:	98 85       	ldd	r25, Y+8	; 0x08
    18a2:	81 30       	cpi	r24, 0x01	; 1
    18a4:	91 05       	cpc	r25, r1
    18a6:	49 f1       	breq	.+82     	; 0x18fa <DIO_u8SetPinValue+0x92>
    18a8:	2f 81       	ldd	r18, Y+7	; 0x07
    18aa:	38 85       	ldd	r19, Y+8	; 0x08
    18ac:	22 30       	cpi	r18, 0x02	; 2
    18ae:	31 05       	cpc	r19, r1
    18b0:	2c f4       	brge	.+10     	; 0x18bc <DIO_u8SetPinValue+0x54>
    18b2:	8f 81       	ldd	r24, Y+7	; 0x07
    18b4:	98 85       	ldd	r25, Y+8	; 0x08
    18b6:	00 97       	sbiw	r24, 0x00	; 0
    18b8:	61 f0       	breq	.+24     	; 0x18d2 <DIO_u8SetPinValue+0x6a>
    18ba:	5b c0       	rjmp	.+182    	; 0x1972 <DIO_u8SetPinValue+0x10a>
    18bc:	2f 81       	ldd	r18, Y+7	; 0x07
    18be:	38 85       	ldd	r19, Y+8	; 0x08
    18c0:	22 30       	cpi	r18, 0x02	; 2
    18c2:	31 05       	cpc	r19, r1
    18c4:	71 f1       	breq	.+92     	; 0x1922 <DIO_u8SetPinValue+0xba>
    18c6:	8f 81       	ldd	r24, Y+7	; 0x07
    18c8:	98 85       	ldd	r25, Y+8	; 0x08
    18ca:	83 30       	cpi	r24, 0x03	; 3
    18cc:	91 05       	cpc	r25, r1
    18ce:	e9 f1       	breq	.+122    	; 0x194a <DIO_u8SetPinValue+0xe2>
    18d0:	50 c0       	rjmp	.+160    	; 0x1972 <DIO_u8SetPinValue+0x10a>
			{
				case DIO_PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
    18d2:	ab e3       	ldi	r26, 0x3B	; 59
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	eb e3       	ldi	r30, 0x3B	; 59
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	48 2f       	mov	r20, r24
    18de:	8b 81       	ldd	r24, Y+3	; 0x03
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	02 2e       	mov	r0, r18
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <DIO_u8SetPinValue+0x88>
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	0a 94       	dec	r0
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <DIO_u8SetPinValue+0x84>
    18f4:	84 2b       	or	r24, r20
    18f6:	8c 93       	st	X, r24
    18f8:	c6 c0       	rjmp	.+396    	; 0x1a86 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
    18fa:	a8 e3       	ldi	r26, 0x38	; 56
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e8 e3       	ldi	r30, 0x38	; 56
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	48 2f       	mov	r20, r24
    1906:	8b 81       	ldd	r24, Y+3	; 0x03
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	02 2e       	mov	r0, r18
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <DIO_u8SetPinValue+0xb0>
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	0a 94       	dec	r0
    191a:	e2 f7       	brpl	.-8      	; 0x1914 <DIO_u8SetPinValue+0xac>
    191c:	84 2b       	or	r24, r20
    191e:	8c 93       	st	X, r24
    1920:	b2 c0       	rjmp	.+356    	; 0x1a86 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
    1922:	a5 e3       	ldi	r26, 0x35	; 53
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e5 e3       	ldi	r30, 0x35	; 53
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	48 2f       	mov	r20, r24
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	02 2e       	mov	r0, r18
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <DIO_u8SetPinValue+0xd8>
    193c:	88 0f       	add	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	0a 94       	dec	r0
    1942:	e2 f7       	brpl	.-8      	; 0x193c <DIO_u8SetPinValue+0xd4>
    1944:	84 2b       	or	r24, r20
    1946:	8c 93       	st	X, r24
    1948:	9e c0       	rjmp	.+316    	; 0x1a86 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
    194a:	a2 e3       	ldi	r26, 0x32	; 50
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	e2 e3       	ldi	r30, 0x32	; 50
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	48 2f       	mov	r20, r24
    1956:	8b 81       	ldd	r24, Y+3	; 0x03
    1958:	28 2f       	mov	r18, r24
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	02 2e       	mov	r0, r18
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <DIO_u8SetPinValue+0x100>
    1964:	88 0f       	add	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	0a 94       	dec	r0
    196a:	e2 f7       	brpl	.-8      	; 0x1964 <DIO_u8SetPinValue+0xfc>
    196c:	84 2b       	or	r24, r20
    196e:	8c 93       	st	X, r24
    1970:	8a c0       	rjmp	.+276    	; 0x1a86 <DIO_u8SetPinValue+0x21e>
				default: Local_u8ErrorState=1;				
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	89 83       	std	Y+1, r24	; 0x01
    1976:	87 c0       	rjmp	.+270    	; 0x1a86 <DIO_u8SetPinValue+0x21e>
			}
		}
		else
			Local_u8ErrorState=1;
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	89 83       	std	Y+1, r24	; 0x01
    197c:	84 c0       	rjmp	.+264    	; 0x1a86 <DIO_u8SetPinValue+0x21e>
	}
	else if(DIO_PIN_LOW==Copy_u8Value)
    197e:	8c 81       	ldd	r24, Y+4	; 0x04
    1980:	88 23       	and	r24, r24
    1982:	09 f0       	breq	.+2      	; 0x1986 <DIO_u8SetPinValue+0x11e>
    1984:	7e c0       	rjmp	.+252    	; 0x1a82 <DIO_u8SetPinValue+0x21a>
	{
		if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    1986:	8b 81       	ldd	r24, Y+3	; 0x03
    1988:	88 30       	cpi	r24, 0x08	; 8
    198a:	08 f0       	brcs	.+2      	; 0x198e <DIO_u8SetPinValue+0x126>
    198c:	77 c0       	rjmp	.+238    	; 0x1a7c <DIO_u8SetPinValue+0x214>
		{
			switch(Copy_u8Port)
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	28 2f       	mov	r18, r24
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	3e 83       	std	Y+6, r19	; 0x06
    1996:	2d 83       	std	Y+5, r18	; 0x05
    1998:	8d 81       	ldd	r24, Y+5	; 0x05
    199a:	9e 81       	ldd	r25, Y+6	; 0x06
    199c:	81 30       	cpi	r24, 0x01	; 1
    199e:	91 05       	cpc	r25, r1
    19a0:	59 f1       	breq	.+86     	; 0x19f8 <DIO_u8SetPinValue+0x190>
    19a2:	2d 81       	ldd	r18, Y+5	; 0x05
    19a4:	3e 81       	ldd	r19, Y+6	; 0x06
    19a6:	22 30       	cpi	r18, 0x02	; 2
    19a8:	31 05       	cpc	r19, r1
    19aa:	2c f4       	brge	.+10     	; 0x19b6 <DIO_u8SetPinValue+0x14e>
    19ac:	8d 81       	ldd	r24, Y+5	; 0x05
    19ae:	9e 81       	ldd	r25, Y+6	; 0x06
    19b0:	00 97       	sbiw	r24, 0x00	; 0
    19b2:	69 f0       	breq	.+26     	; 0x19ce <DIO_u8SetPinValue+0x166>
    19b4:	60 c0       	rjmp	.+192    	; 0x1a76 <DIO_u8SetPinValue+0x20e>
    19b6:	2d 81       	ldd	r18, Y+5	; 0x05
    19b8:	3e 81       	ldd	r19, Y+6	; 0x06
    19ba:	22 30       	cpi	r18, 0x02	; 2
    19bc:	31 05       	cpc	r19, r1
    19be:	89 f1       	breq	.+98     	; 0x1a22 <DIO_u8SetPinValue+0x1ba>
    19c0:	8d 81       	ldd	r24, Y+5	; 0x05
    19c2:	9e 81       	ldd	r25, Y+6	; 0x06
    19c4:	83 30       	cpi	r24, 0x03	; 3
    19c6:	91 05       	cpc	r25, r1
    19c8:	09 f4       	brne	.+2      	; 0x19cc <DIO_u8SetPinValue+0x164>
    19ca:	40 c0       	rjmp	.+128    	; 0x1a4c <DIO_u8SetPinValue+0x1e4>
    19cc:	54 c0       	rjmp	.+168    	; 0x1a76 <DIO_u8SetPinValue+0x20e>
			{
				case DIO_PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
    19ce:	ab e3       	ldi	r26, 0x3B	; 59
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	eb e3       	ldi	r30, 0x3B	; 59
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	48 2f       	mov	r20, r24
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	28 2f       	mov	r18, r24
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	02 2e       	mov	r0, r18
    19e6:	02 c0       	rjmp	.+4      	; 0x19ec <DIO_u8SetPinValue+0x184>
    19e8:	88 0f       	add	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	0a 94       	dec	r0
    19ee:	e2 f7       	brpl	.-8      	; 0x19e8 <DIO_u8SetPinValue+0x180>
    19f0:	80 95       	com	r24
    19f2:	84 23       	and	r24, r20
    19f4:	8c 93       	st	X, r24
    19f6:	47 c0       	rjmp	.+142    	; 0x1a86 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
    19f8:	a8 e3       	ldi	r26, 0x38	; 56
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	e8 e3       	ldi	r30, 0x38	; 56
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	48 2f       	mov	r20, r24
    1a04:	8b 81       	ldd	r24, Y+3	; 0x03
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	02 2e       	mov	r0, r18
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <DIO_u8SetPinValue+0x1ae>
    1a12:	88 0f       	add	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	0a 94       	dec	r0
    1a18:	e2 f7       	brpl	.-8      	; 0x1a12 <DIO_u8SetPinValue+0x1aa>
    1a1a:	80 95       	com	r24
    1a1c:	84 23       	and	r24, r20
    1a1e:	8c 93       	st	X, r24
    1a20:	32 c0       	rjmp	.+100    	; 0x1a86 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
    1a22:	a5 e3       	ldi	r26, 0x35	; 53
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e5 e3       	ldi	r30, 0x35	; 53
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	48 2f       	mov	r20, r24
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	28 2f       	mov	r18, r24
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	02 2e       	mov	r0, r18
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <DIO_u8SetPinValue+0x1d8>
    1a3c:	88 0f       	add	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	0a 94       	dec	r0
    1a42:	e2 f7       	brpl	.-8      	; 0x1a3c <DIO_u8SetPinValue+0x1d4>
    1a44:	80 95       	com	r24
    1a46:	84 23       	and	r24, r20
    1a48:	8c 93       	st	X, r24
    1a4a:	1d c0       	rjmp	.+58     	; 0x1a86 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
    1a4c:	a2 e3       	ldi	r26, 0x32	; 50
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	e2 e3       	ldi	r30, 0x32	; 50
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	48 2f       	mov	r20, r24
    1a58:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5a:	28 2f       	mov	r18, r24
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	02 2e       	mov	r0, r18
    1a64:	02 c0       	rjmp	.+4      	; 0x1a6a <DIO_u8SetPinValue+0x202>
    1a66:	88 0f       	add	r24, r24
    1a68:	99 1f       	adc	r25, r25
    1a6a:	0a 94       	dec	r0
    1a6c:	e2 f7       	brpl	.-8      	; 0x1a66 <DIO_u8SetPinValue+0x1fe>
    1a6e:	80 95       	com	r24
    1a70:	84 23       	and	r24, r20
    1a72:	8c 93       	st	X, r24
    1a74:	08 c0       	rjmp	.+16     	; 0x1a86 <DIO_u8SetPinValue+0x21e>
				default: Local_u8ErrorState=1;	
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	89 83       	std	Y+1, r24	; 0x01
    1a7a:	05 c0       	rjmp	.+10     	; 0x1a86 <DIO_u8SetPinValue+0x21e>
			}
		}
		else
			Local_u8ErrorState=1;	
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	89 83       	std	Y+1, r24	; 0x01
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <DIO_u8SetPinValue+0x21e>
	}
	else
		Local_u8ErrorState=1;	
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    1a86:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a88:	28 96       	adiw	r28, 0x08	; 8
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	de bf       	out	0x3e, r29	; 62
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	cd bf       	out	0x3d, r28	; 61
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	08 95       	ret

00001a9a <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    1a9a:	df 93       	push	r29
    1a9c:	cf 93       	push	r28
    1a9e:	00 d0       	rcall	.+0      	; 0x1aa0 <DIO_u8SetPortValue+0x6>
    1aa0:	00 d0       	rcall	.+0      	; 0x1aa2 <DIO_u8SetPortValue+0x8>
    1aa2:	0f 92       	push	r0
    1aa4:	cd b7       	in	r28, 0x3d	; 61
    1aa6:	de b7       	in	r29, 0x3e	; 62
    1aa8:	8a 83       	std	Y+2, r24	; 0x02
    1aaa:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1aac:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    1aae:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab0:	28 2f       	mov	r18, r24
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	3d 83       	std	Y+5, r19	; 0x05
    1ab6:	2c 83       	std	Y+4, r18	; 0x04
    1ab8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aba:	9d 81       	ldd	r25, Y+5	; 0x05
    1abc:	81 30       	cpi	r24, 0x01	; 1
    1abe:	91 05       	cpc	r25, r1
    1ac0:	d1 f0       	breq	.+52     	; 0x1af6 <DIO_u8SetPortValue+0x5c>
    1ac2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ac4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ac6:	22 30       	cpi	r18, 0x02	; 2
    1ac8:	31 05       	cpc	r19, r1
    1aca:	2c f4       	brge	.+10     	; 0x1ad6 <DIO_u8SetPortValue+0x3c>
    1acc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ace:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad0:	00 97       	sbiw	r24, 0x00	; 0
    1ad2:	61 f0       	breq	.+24     	; 0x1aec <DIO_u8SetPortValue+0x52>
    1ad4:	1f c0       	rjmp	.+62     	; 0x1b14 <DIO_u8SetPortValue+0x7a>
    1ad6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ad8:	3d 81       	ldd	r19, Y+5	; 0x05
    1ada:	22 30       	cpi	r18, 0x02	; 2
    1adc:	31 05       	cpc	r19, r1
    1ade:	81 f0       	breq	.+32     	; 0x1b00 <DIO_u8SetPortValue+0x66>
    1ae0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae4:	83 30       	cpi	r24, 0x03	; 3
    1ae6:	91 05       	cpc	r25, r1
    1ae8:	81 f0       	breq	.+32     	; 0x1b0a <DIO_u8SetPortValue+0x70>
    1aea:	14 c0       	rjmp	.+40     	; 0x1b14 <DIO_u8SetPortValue+0x7a>
	{
		case DIO_PORTA:PORTA=Copy_u8Value;break;
    1aec:	eb e3       	ldi	r30, 0x3B	; 59
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	8b 81       	ldd	r24, Y+3	; 0x03
    1af2:	80 83       	st	Z, r24
    1af4:	11 c0       	rjmp	.+34     	; 0x1b18 <DIO_u8SetPortValue+0x7e>
		case DIO_PORTB:PORTB=Copy_u8Value;break;
    1af6:	e8 e3       	ldi	r30, 0x38	; 56
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	8b 81       	ldd	r24, Y+3	; 0x03
    1afc:	80 83       	st	Z, r24
    1afe:	0c c0       	rjmp	.+24     	; 0x1b18 <DIO_u8SetPortValue+0x7e>
		case DIO_PORTC:PORTC=Copy_u8Value;break;
    1b00:	e5 e3       	ldi	r30, 0x35	; 53
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	8b 81       	ldd	r24, Y+3	; 0x03
    1b06:	80 83       	st	Z, r24
    1b08:	07 c0       	rjmp	.+14     	; 0x1b18 <DIO_u8SetPortValue+0x7e>
		case DIO_PORTD:PORTD=Copy_u8Value;break;
    1b0a:	e2 e3       	ldi	r30, 0x32	; 50
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b10:	80 83       	st	Z, r24
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <DIO_u8SetPortValue+0x7e>
		default: Local_u8ErrorState=1;	
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1b18:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	cf 91       	pop	r28
    1b26:	df 91       	pop	r29
    1b28:	08 95       	ret

00001b2a <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 *Copy_pu8Value)
{
    1b2a:	df 93       	push	r29
    1b2c:	cf 93       	push	r28
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
    1b32:	27 97       	sbiw	r28, 0x07	; 7
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	f8 94       	cli
    1b38:	de bf       	out	0x3e, r29	; 62
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	cd bf       	out	0x3d, r28	; 61
    1b3e:	8a 83       	std	Y+2, r24	; 0x02
    1b40:	6b 83       	std	Y+3, r22	; 0x03
    1b42:	5d 83       	std	Y+5, r21	; 0x05
    1b44:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1b46:	19 82       	std	Y+1, r1	; 0x01
	if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    1b48:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4a:	88 30       	cpi	r24, 0x08	; 8
    1b4c:	08 f0       	brcs	.+2      	; 0x1b50 <DIO_u8GetPinValue+0x26>
    1b4e:	74 c0       	rjmp	.+232    	; 0x1c38 <DIO_u8GetPinValue+0x10e>
	{
		switch(Copy_u8Port)
    1b50:	8a 81       	ldd	r24, Y+2	; 0x02
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	3f 83       	std	Y+7, r19	; 0x07
    1b58:	2e 83       	std	Y+6, r18	; 0x06
    1b5a:	4e 81       	ldd	r20, Y+6	; 0x06
    1b5c:	5f 81       	ldd	r21, Y+7	; 0x07
    1b5e:	41 30       	cpi	r20, 0x01	; 1
    1b60:	51 05       	cpc	r21, r1
    1b62:	59 f1       	breq	.+86     	; 0x1bba <DIO_u8GetPinValue+0x90>
    1b64:	8e 81       	ldd	r24, Y+6	; 0x06
    1b66:	9f 81       	ldd	r25, Y+7	; 0x07
    1b68:	82 30       	cpi	r24, 0x02	; 2
    1b6a:	91 05       	cpc	r25, r1
    1b6c:	34 f4       	brge	.+12     	; 0x1b7a <DIO_u8GetPinValue+0x50>
    1b6e:	2e 81       	ldd	r18, Y+6	; 0x06
    1b70:	3f 81       	ldd	r19, Y+7	; 0x07
    1b72:	21 15       	cp	r18, r1
    1b74:	31 05       	cpc	r19, r1
    1b76:	69 f0       	breq	.+26     	; 0x1b92 <DIO_u8GetPinValue+0x68>
    1b78:	5c c0       	rjmp	.+184    	; 0x1c32 <DIO_u8GetPinValue+0x108>
    1b7a:	4e 81       	ldd	r20, Y+6	; 0x06
    1b7c:	5f 81       	ldd	r21, Y+7	; 0x07
    1b7e:	42 30       	cpi	r20, 0x02	; 2
    1b80:	51 05       	cpc	r21, r1
    1b82:	79 f1       	breq	.+94     	; 0x1be2 <DIO_u8GetPinValue+0xb8>
    1b84:	8e 81       	ldd	r24, Y+6	; 0x06
    1b86:	9f 81       	ldd	r25, Y+7	; 0x07
    1b88:	83 30       	cpi	r24, 0x03	; 3
    1b8a:	91 05       	cpc	r25, r1
    1b8c:	09 f4       	brne	.+2      	; 0x1b90 <DIO_u8GetPinValue+0x66>
    1b8e:	3d c0       	rjmp	.+122    	; 0x1c0a <DIO_u8GetPinValue+0xe0>
    1b90:	50 c0       	rjmp	.+160    	; 0x1c32 <DIO_u8GetPinValue+0x108>
		{
			case DIO_PORTA:*Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin);break;
    1b92:	e9 e3       	ldi	r30, 0x39	; 57
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9e:	88 2f       	mov	r24, r24
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	a9 01       	movw	r20, r18
    1ba4:	02 c0       	rjmp	.+4      	; 0x1baa <DIO_u8GetPinValue+0x80>
    1ba6:	55 95       	asr	r21
    1ba8:	47 95       	ror	r20
    1baa:	8a 95       	dec	r24
    1bac:	e2 f7       	brpl	.-8      	; 0x1ba6 <DIO_u8GetPinValue+0x7c>
    1bae:	ca 01       	movw	r24, r20
    1bb0:	81 70       	andi	r24, 0x01	; 1
    1bb2:	ec 81       	ldd	r30, Y+4	; 0x04
    1bb4:	fd 81       	ldd	r31, Y+5	; 0x05
    1bb6:	80 83       	st	Z, r24
    1bb8:	41 c0       	rjmp	.+130    	; 0x1c3c <DIO_u8GetPinValue+0x112>
			case DIO_PORTB:*Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin);break;
    1bba:	e6 e3       	ldi	r30, 0x36	; 54
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	28 2f       	mov	r18, r24
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	88 2f       	mov	r24, r24
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	a9 01       	movw	r20, r18
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <DIO_u8GetPinValue+0xa8>
    1bce:	55 95       	asr	r21
    1bd0:	47 95       	ror	r20
    1bd2:	8a 95       	dec	r24
    1bd4:	e2 f7       	brpl	.-8      	; 0x1bce <DIO_u8GetPinValue+0xa4>
    1bd6:	ca 01       	movw	r24, r20
    1bd8:	81 70       	andi	r24, 0x01	; 1
    1bda:	ec 81       	ldd	r30, Y+4	; 0x04
    1bdc:	fd 81       	ldd	r31, Y+5	; 0x05
    1bde:	80 83       	st	Z, r24
    1be0:	2d c0       	rjmp	.+90     	; 0x1c3c <DIO_u8GetPinValue+0x112>
			case DIO_PORTC:*Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin);break;
    1be2:	e3 e3       	ldi	r30, 0x33	; 51
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	28 2f       	mov	r18, r24
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	88 2f       	mov	r24, r24
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	a9 01       	movw	r20, r18
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <DIO_u8GetPinValue+0xd0>
    1bf6:	55 95       	asr	r21
    1bf8:	47 95       	ror	r20
    1bfa:	8a 95       	dec	r24
    1bfc:	e2 f7       	brpl	.-8      	; 0x1bf6 <DIO_u8GetPinValue+0xcc>
    1bfe:	ca 01       	movw	r24, r20
    1c00:	81 70       	andi	r24, 0x01	; 1
    1c02:	ec 81       	ldd	r30, Y+4	; 0x04
    1c04:	fd 81       	ldd	r31, Y+5	; 0x05
    1c06:	80 83       	st	Z, r24
    1c08:	19 c0       	rjmp	.+50     	; 0x1c3c <DIO_u8GetPinValue+0x112>
			case DIO_PORTD:*Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin);break;
    1c0a:	e0 e3       	ldi	r30, 0x30	; 48
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	28 2f       	mov	r18, r24
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	88 2f       	mov	r24, r24
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	a9 01       	movw	r20, r18
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <DIO_u8GetPinValue+0xf8>
    1c1e:	55 95       	asr	r21
    1c20:	47 95       	ror	r20
    1c22:	8a 95       	dec	r24
    1c24:	e2 f7       	brpl	.-8      	; 0x1c1e <DIO_u8GetPinValue+0xf4>
    1c26:	ca 01       	movw	r24, r20
    1c28:	81 70       	andi	r24, 0x01	; 1
    1c2a:	ec 81       	ldd	r30, Y+4	; 0x04
    1c2c:	fd 81       	ldd	r31, Y+5	; 0x05
    1c2e:	80 83       	st	Z, r24
    1c30:	05 c0       	rjmp	.+10     	; 0x1c3c <DIO_u8GetPinValue+0x112>
			default: Local_u8ErrorState=1;	
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	89 83       	std	Y+1, r24	; 0x01
    1c36:	02 c0       	rjmp	.+4      	; 0x1c3c <DIO_u8GetPinValue+0x112>
		}
	}
	else
		Local_u8ErrorState=1;	
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c3e:	27 96       	adiw	r28, 0x07	; 7
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	f8 94       	cli
    1c44:	de bf       	out	0x3e, r29	; 62
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	cd bf       	out	0x3d, r28	; 61
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	08 95       	ret

00001c50 <DIO_u8TogglePinValue>:
u8 DIO_u8TogglePinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
{
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <DIO_u8TogglePinValue+0x6>
    1c56:	00 d0       	rcall	.+0      	; 0x1c58 <DIO_u8TogglePinValue+0x8>
    1c58:	0f 92       	push	r0
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
    1c5e:	8a 83       	std	Y+2, r24	; 0x02
    1c60:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1c62:	19 82       	std	Y+1, r1	; 0x01
	if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    1c64:	8b 81       	ldd	r24, Y+3	; 0x03
    1c66:	88 30       	cpi	r24, 0x08	; 8
    1c68:	08 f0       	brcs	.+2      	; 0x1c6c <DIO_u8TogglePinValue+0x1c>
    1c6a:	72 c0       	rjmp	.+228    	; 0x1d50 <DIO_u8TogglePinValue+0x100>
	{
		switch(Copy_u8Port)
    1c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6e:	28 2f       	mov	r18, r24
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	3d 83       	std	Y+5, r19	; 0x05
    1c74:	2c 83       	std	Y+4, r18	; 0x04
    1c76:	8c 81       	ldd	r24, Y+4	; 0x04
    1c78:	9d 81       	ldd	r25, Y+5	; 0x05
    1c7a:	81 30       	cpi	r24, 0x01	; 1
    1c7c:	91 05       	cpc	r25, r1
    1c7e:	49 f1       	breq	.+82     	; 0x1cd2 <DIO_u8TogglePinValue+0x82>
    1c80:	2c 81       	ldd	r18, Y+4	; 0x04
    1c82:	3d 81       	ldd	r19, Y+5	; 0x05
    1c84:	22 30       	cpi	r18, 0x02	; 2
    1c86:	31 05       	cpc	r19, r1
    1c88:	2c f4       	brge	.+10     	; 0x1c94 <DIO_u8TogglePinValue+0x44>
    1c8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c8e:	00 97       	sbiw	r24, 0x00	; 0
    1c90:	61 f0       	breq	.+24     	; 0x1caa <DIO_u8TogglePinValue+0x5a>
    1c92:	5b c0       	rjmp	.+182    	; 0x1d4a <DIO_u8TogglePinValue+0xfa>
    1c94:	2c 81       	ldd	r18, Y+4	; 0x04
    1c96:	3d 81       	ldd	r19, Y+5	; 0x05
    1c98:	22 30       	cpi	r18, 0x02	; 2
    1c9a:	31 05       	cpc	r19, r1
    1c9c:	71 f1       	breq	.+92     	; 0x1cfa <DIO_u8TogglePinValue+0xaa>
    1c9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca2:	83 30       	cpi	r24, 0x03	; 3
    1ca4:	91 05       	cpc	r25, r1
    1ca6:	e9 f1       	breq	.+122    	; 0x1d22 <DIO_u8TogglePinValue+0xd2>
    1ca8:	50 c0       	rjmp	.+160    	; 0x1d4a <DIO_u8TogglePinValue+0xfa>
		{
			case DIO_PORTA:TOG_BIT(PORTA,Copy_u8Pin);break;
    1caa:	ab e3       	ldi	r26, 0x3B	; 59
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	eb e3       	ldi	r30, 0x3B	; 59
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	48 2f       	mov	r20, r24
    1cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb8:	28 2f       	mov	r18, r24
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	02 2e       	mov	r0, r18
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <DIO_u8TogglePinValue+0x78>
    1cc4:	88 0f       	add	r24, r24
    1cc6:	99 1f       	adc	r25, r25
    1cc8:	0a 94       	dec	r0
    1cca:	e2 f7       	brpl	.-8      	; 0x1cc4 <DIO_u8TogglePinValue+0x74>
    1ccc:	84 27       	eor	r24, r20
    1cce:	8c 93       	st	X, r24
    1cd0:	41 c0       	rjmp	.+130    	; 0x1d54 <DIO_u8TogglePinValue+0x104>
			case DIO_PORTB:TOG_BIT(PORTB,Copy_u8Pin);break;
    1cd2:	a8 e3       	ldi	r26, 0x38	; 56
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	e8 e3       	ldi	r30, 0x38	; 56
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	48 2f       	mov	r20, r24
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	28 2f       	mov	r18, r24
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	02 2e       	mov	r0, r18
    1cea:	02 c0       	rjmp	.+4      	; 0x1cf0 <DIO_u8TogglePinValue+0xa0>
    1cec:	88 0f       	add	r24, r24
    1cee:	99 1f       	adc	r25, r25
    1cf0:	0a 94       	dec	r0
    1cf2:	e2 f7       	brpl	.-8      	; 0x1cec <DIO_u8TogglePinValue+0x9c>
    1cf4:	84 27       	eor	r24, r20
    1cf6:	8c 93       	st	X, r24
    1cf8:	2d c0       	rjmp	.+90     	; 0x1d54 <DIO_u8TogglePinValue+0x104>
			case DIO_PORTC:TOG_BIT(PORTC,Copy_u8Pin);break;
    1cfa:	a5 e3       	ldi	r26, 0x35	; 53
    1cfc:	b0 e0       	ldi	r27, 0x00	; 0
    1cfe:	e5 e3       	ldi	r30, 0x35	; 53
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	80 81       	ld	r24, Z
    1d04:	48 2f       	mov	r20, r24
    1d06:	8b 81       	ldd	r24, Y+3	; 0x03
    1d08:	28 2f       	mov	r18, r24
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	02 2e       	mov	r0, r18
    1d12:	02 c0       	rjmp	.+4      	; 0x1d18 <DIO_u8TogglePinValue+0xc8>
    1d14:	88 0f       	add	r24, r24
    1d16:	99 1f       	adc	r25, r25
    1d18:	0a 94       	dec	r0
    1d1a:	e2 f7       	brpl	.-8      	; 0x1d14 <DIO_u8TogglePinValue+0xc4>
    1d1c:	84 27       	eor	r24, r20
    1d1e:	8c 93       	st	X, r24
    1d20:	19 c0       	rjmp	.+50     	; 0x1d54 <DIO_u8TogglePinValue+0x104>
			case DIO_PORTD:TOG_BIT(PORTD,Copy_u8Pin);break;
    1d22:	a2 e3       	ldi	r26, 0x32	; 50
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	e2 e3       	ldi	r30, 0x32	; 50
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	48 2f       	mov	r20, r24
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	28 2f       	mov	r18, r24
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	02 2e       	mov	r0, r18
    1d3a:	02 c0       	rjmp	.+4      	; 0x1d40 <DIO_u8TogglePinValue+0xf0>
    1d3c:	88 0f       	add	r24, r24
    1d3e:	99 1f       	adc	r25, r25
    1d40:	0a 94       	dec	r0
    1d42:	e2 f7       	brpl	.-8      	; 0x1d3c <DIO_u8TogglePinValue+0xec>
    1d44:	84 27       	eor	r24, r20
    1d46:	8c 93       	st	X, r24
    1d48:	05 c0       	rjmp	.+10     	; 0x1d54 <DIO_u8TogglePinValue+0x104>
			default: Local_u8ErrorState=1;
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	89 83       	std	Y+1, r24	; 0x01
    1d4e:	02 c0       	rjmp	.+4      	; 0x1d54 <DIO_u8TogglePinValue+0x104>
		}
	}
	else
		Local_u8ErrorState=1;
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	0f 90       	pop	r0
    1d5e:	0f 90       	pop	r0
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	08 95       	ret

00001d66 <EEPROM_u8SendMemByte>:
#include "../HAL/EEPROM_private.h"
#include "../HAL/EEPROM_interface.h"

// SPI EEPROM
u8 EEPROM_u8SendMemByte(u8 Copy_u8Data,u16 Copy_u16Address)
{
    1d66:	df 93       	push	r29
    1d68:	cf 93       	push	r28
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
    1d6e:	a0 97       	sbiw	r28, 0x20	; 32
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	f8 94       	cli
    1d74:	de bf       	out	0x3e, r29	; 62
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	cd bf       	out	0x3d, r28	; 61
    1d7a:	8e 8f       	std	Y+30, r24	; 0x1e
    1d7c:	78 a3       	std	Y+32, r23	; 0x20
    1d7e:	6f 8f       	std	Y+31, r22	; 0x1f
	u8 Local_intErrorState = OK;
    1d80:	1d 8e       	std	Y+29, r1	; 0x1d
	DIO_u8SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_HIGH);
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	64 e0       	ldi	r22, 0x04	; 4
    1d86:	41 e0       	ldi	r20, 0x01	; 1
    1d88:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_LOW);
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	64 e0       	ldi	r22, 0x04	; 4
    1d90:	40 e0       	ldi	r20, 0x00	; 0
    1d92:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_u8SetPinValue>
	SPI_u8MasterSendPolling(WREN);
    1d96:	86 e0       	ldi	r24, 0x06	; 6
    1d98:	0e 94 cb 11 	call	0x2396	; 0x2396 <SPI_u8MasterSendPolling>
	DIO_u8SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_HIGH);
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	64 e0       	ldi	r22, 0x04	; 4
    1da0:	41 e0       	ldi	r20, 0x01	; 1
    1da2:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_u8SetPinValue>
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	a0 ea       	ldi	r26, 0xA0	; 160
    1dac:	b0 e4       	ldi	r27, 0x40	; 64
    1dae:	89 8f       	std	Y+25, r24	; 0x19
    1db0:	9a 8f       	std	Y+26, r25	; 0x1a
    1db2:	ab 8f       	std	Y+27, r26	; 0x1b
    1db4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db6:	69 8d       	ldd	r22, Y+25	; 0x19
    1db8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	4a ef       	ldi	r20, 0xFA	; 250
    1dc4:	54 e4       	ldi	r21, 0x44	; 68
    1dc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	8d 8b       	std	Y+21, r24	; 0x15
    1dd0:	9e 8b       	std	Y+22, r25	; 0x16
    1dd2:	af 8b       	std	Y+23, r26	; 0x17
    1dd4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dd6:	6d 89       	ldd	r22, Y+21	; 0x15
    1dd8:	7e 89       	ldd	r23, Y+22	; 0x16
    1dda:	8f 89       	ldd	r24, Y+23	; 0x17
    1ddc:	98 8d       	ldd	r25, Y+24	; 0x18
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	40 e8       	ldi	r20, 0x80	; 128
    1de4:	5f e3       	ldi	r21, 0x3F	; 63
    1de6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dea:	88 23       	and	r24, r24
    1dec:	2c f4       	brge	.+10     	; 0x1df8 <EEPROM_u8SendMemByte+0x92>
		__ticks = 1;
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	9c 8b       	std	Y+20, r25	; 0x14
    1df4:	8b 8b       	std	Y+19, r24	; 0x13
    1df6:	3f c0       	rjmp	.+126    	; 0x1e76 <EEPROM_u8SendMemByte+0x110>
	else if (__tmp > 65535)
    1df8:	6d 89       	ldd	r22, Y+21	; 0x15
    1dfa:	7e 89       	ldd	r23, Y+22	; 0x16
    1dfc:	8f 89       	ldd	r24, Y+23	; 0x17
    1dfe:	98 8d       	ldd	r25, Y+24	; 0x18
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	3f ef       	ldi	r19, 0xFF	; 255
    1e04:	4f e7       	ldi	r20, 0x7F	; 127
    1e06:	57 e4       	ldi	r21, 0x47	; 71
    1e08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e0c:	18 16       	cp	r1, r24
    1e0e:	4c f5       	brge	.+82     	; 0x1e62 <EEPROM_u8SendMemByte+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e10:	69 8d       	ldd	r22, Y+25	; 0x19
    1e12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	40 e2       	ldi	r20, 0x20	; 32
    1e1e:	51 e4       	ldi	r21, 0x41	; 65
    1e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	bc 01       	movw	r22, r24
    1e2a:	cd 01       	movw	r24, r26
    1e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	9c 8b       	std	Y+20, r25	; 0x14
    1e36:	8b 8b       	std	Y+19, r24	; 0x13
    1e38:	0f c0       	rjmp	.+30     	; 0x1e58 <EEPROM_u8SendMemByte+0xf2>
    1e3a:	88 ec       	ldi	r24, 0xC8	; 200
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	9a 8b       	std	Y+18, r25	; 0x12
    1e40:	89 8b       	std	Y+17, r24	; 0x11
    1e42:	89 89       	ldd	r24, Y+17	; 0x11
    1e44:	9a 89       	ldd	r25, Y+18	; 0x12
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	f1 f7       	brne	.-4      	; 0x1e46 <EEPROM_u8SendMemByte+0xe0>
    1e4a:	9a 8b       	std	Y+18, r25	; 0x12
    1e4c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e50:	9c 89       	ldd	r25, Y+20	; 0x14
    1e52:	01 97       	sbiw	r24, 0x01	; 1
    1e54:	9c 8b       	std	Y+20, r25	; 0x14
    1e56:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e58:	8b 89       	ldd	r24, Y+19	; 0x13
    1e5a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e5c:	00 97       	sbiw	r24, 0x00	; 0
    1e5e:	69 f7       	brne	.-38     	; 0x1e3a <EEPROM_u8SendMemByte+0xd4>
    1e60:	14 c0       	rjmp	.+40     	; 0x1e8a <EEPROM_u8SendMemByte+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e62:	6d 89       	ldd	r22, Y+21	; 0x15
    1e64:	7e 89       	ldd	r23, Y+22	; 0x16
    1e66:	8f 89       	ldd	r24, Y+23	; 0x17
    1e68:	98 8d       	ldd	r25, Y+24	; 0x18
    1e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	9c 8b       	std	Y+20, r25	; 0x14
    1e74:	8b 8b       	std	Y+19, r24	; 0x13
    1e76:	8b 89       	ldd	r24, Y+19	; 0x13
    1e78:	9c 89       	ldd	r25, Y+20	; 0x14
    1e7a:	98 8b       	std	Y+16, r25	; 0x10
    1e7c:	8f 87       	std	Y+15, r24	; 0x0f
    1e7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e80:	98 89       	ldd	r25, Y+16	; 0x10
    1e82:	01 97       	sbiw	r24, 0x01	; 1
    1e84:	f1 f7       	brne	.-4      	; 0x1e82 <EEPROM_u8SendMemByte+0x11c>
    1e86:	98 8b       	std	Y+16, r25	; 0x10
    1e88:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	DIO_u8SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_LOW);
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	64 e0       	ldi	r22, 0x04	; 4
    1e8e:	40 e0       	ldi	r20, 0x00	; 0
    1e90:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_u8SetPinValue>
	SPI_u8MasterSendPolling(WRITE);
    1e94:	82 e0       	ldi	r24, 0x02	; 2
    1e96:	0e 94 cb 11 	call	0x2396	; 0x2396 <SPI_u8MasterSendPolling>
	SPI_u8MasterSendPolling((u8)Copy_u16Address);
    1e9a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e9c:	0e 94 cb 11 	call	0x2396	; 0x2396 <SPI_u8MasterSendPolling>
	SPI_u8MasterSendPolling(Copy_u8Data);
    1ea0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ea2:	0e 94 cb 11 	call	0x2396	; 0x2396 <SPI_u8MasterSendPolling>
	DIO_u8SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_HIGH);
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	64 e0       	ldi	r22, 0x04	; 4
    1eaa:	41 e0       	ldi	r20, 0x01	; 1
    1eac:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_u8SetPinValue>
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	a0 ea       	ldi	r26, 0xA0	; 160
    1eb6:	b0 e4       	ldi	r27, 0x40	; 64
    1eb8:	8b 87       	std	Y+11, r24	; 0x0b
    1eba:	9c 87       	std	Y+12, r25	; 0x0c
    1ebc:	ad 87       	std	Y+13, r26	; 0x0d
    1ebe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ec2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ec4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ec6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	4a ef       	ldi	r20, 0xFA	; 250
    1ece:	54 e4       	ldi	r21, 0x44	; 68
    1ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	8f 83       	std	Y+7, r24	; 0x07
    1eda:	98 87       	std	Y+8, r25	; 0x08
    1edc:	a9 87       	std	Y+9, r26	; 0x09
    1ede:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ee0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee2:	78 85       	ldd	r23, Y+8	; 0x08
    1ee4:	89 85       	ldd	r24, Y+9	; 0x09
    1ee6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	40 e8       	ldi	r20, 0x80	; 128
    1eee:	5f e3       	ldi	r21, 0x3F	; 63
    1ef0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ef4:	88 23       	and	r24, r24
    1ef6:	2c f4       	brge	.+10     	; 0x1f02 <EEPROM_u8SendMemByte+0x19c>
		__ticks = 1;
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	9e 83       	std	Y+6, r25	; 0x06
    1efe:	8d 83       	std	Y+5, r24	; 0x05
    1f00:	3f c0       	rjmp	.+126    	; 0x1f80 <EEPROM_u8SendMemByte+0x21a>
	else if (__tmp > 65535)
    1f02:	6f 81       	ldd	r22, Y+7	; 0x07
    1f04:	78 85       	ldd	r23, Y+8	; 0x08
    1f06:	89 85       	ldd	r24, Y+9	; 0x09
    1f08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	3f ef       	ldi	r19, 0xFF	; 255
    1f0e:	4f e7       	ldi	r20, 0x7F	; 127
    1f10:	57 e4       	ldi	r21, 0x47	; 71
    1f12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f16:	18 16       	cp	r1, r24
    1f18:	4c f5       	brge	.+82     	; 0x1f6c <EEPROM_u8SendMemByte+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	40 e2       	ldi	r20, 0x20	; 32
    1f28:	51 e4       	ldi	r21, 0x41	; 65
    1f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	bc 01       	movw	r22, r24
    1f34:	cd 01       	movw	r24, r26
    1f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	9e 83       	std	Y+6, r25	; 0x06
    1f40:	8d 83       	std	Y+5, r24	; 0x05
    1f42:	0f c0       	rjmp	.+30     	; 0x1f62 <EEPROM_u8SendMemByte+0x1fc>
    1f44:	88 ec       	ldi	r24, 0xC8	; 200
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	9c 83       	std	Y+4, r25	; 0x04
    1f4a:	8b 83       	std	Y+3, r24	; 0x03
    1f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	f1 f7       	brne	.-4      	; 0x1f50 <EEPROM_u8SendMemByte+0x1ea>
    1f54:	9c 83       	std	Y+4, r25	; 0x04
    1f56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f58:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	9e 83       	std	Y+6, r25	; 0x06
    1f60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f62:	8d 81       	ldd	r24, Y+5	; 0x05
    1f64:	9e 81       	ldd	r25, Y+6	; 0x06
    1f66:	00 97       	sbiw	r24, 0x00	; 0
    1f68:	69 f7       	brne	.-38     	; 0x1f44 <EEPROM_u8SendMemByte+0x1de>
    1f6a:	14 c0       	rjmp	.+40     	; 0x1f94 <EEPROM_u8SendMemByte+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6e:	78 85       	ldd	r23, Y+8	; 0x08
    1f70:	89 85       	ldd	r24, Y+9	; 0x09
    1f72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	9e 83       	std	Y+6, r25	; 0x06
    1f7e:	8d 83       	std	Y+5, r24	; 0x05
    1f80:	8d 81       	ldd	r24, Y+5	; 0x05
    1f82:	9e 81       	ldd	r25, Y+6	; 0x06
    1f84:	9a 83       	std	Y+2, r25	; 0x02
    1f86:	89 83       	std	Y+1, r24	; 0x01
    1f88:	89 81       	ldd	r24, Y+1	; 0x01
    1f8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	f1 f7       	brne	.-4      	; 0x1f8c <EEPROM_u8SendMemByte+0x226>
    1f90:	9a 83       	std	Y+2, r25	; 0x02
    1f92:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	return Local_intErrorState;
    1f94:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    1f96:	a0 96       	adiw	r28, 0x20	; 32
    1f98:	0f b6       	in	r0, 0x3f	; 63
    1f9a:	f8 94       	cli
    1f9c:	de bf       	out	0x3e, r29	; 62
    1f9e:	0f be       	out	0x3f, r0	; 63
    1fa0:	cd bf       	out	0x3d, r28	; 61
    1fa2:	cf 91       	pop	r28
    1fa4:	df 91       	pop	r29
    1fa6:	08 95       	ret

00001fa8 <EEPROM_u8SendMem16Byte>:

u8 EEPROM_u8SendMem16Byte(u8 *Copy_u8Data,u16 Copy_u16Address,u8 Copy_u8PageSize)
{
    1fa8:	df 93       	push	r29
    1faa:	cf 93       	push	r28
    1fac:	cd b7       	in	r28, 0x3d	; 61
    1fae:	de b7       	in	r29, 0x3e	; 62
    1fb0:	a3 97       	sbiw	r28, 0x23	; 35
    1fb2:	0f b6       	in	r0, 0x3f	; 63
    1fb4:	f8 94       	cli
    1fb6:	de bf       	out	0x3e, r29	; 62
    1fb8:	0f be       	out	0x3f, r0	; 63
    1fba:	cd bf       	out	0x3d, r28	; 61
    1fbc:	98 a3       	std	Y+32, r25	; 0x20
    1fbe:	8f 8f       	std	Y+31, r24	; 0x1f
    1fc0:	7a a3       	std	Y+34, r23	; 0x22
    1fc2:	69 a3       	std	Y+33, r22	; 0x21
    1fc4:	4b a3       	std	Y+35, r20	; 0x23
	u8 Local_intErrorState = OK;
    1fc6:	1e 8e       	std	Y+30, r1	; 0x1e
	u8 Local_u8itration = 0;
    1fc8:	1d 8e       	std	Y+29, r1	; 0x1d
	DIO_u8SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_HIGH);
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	64 e0       	ldi	r22, 0x04	; 4
    1fce:	41 e0       	ldi	r20, 0x01	; 1
    1fd0:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_LOW);
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	64 e0       	ldi	r22, 0x04	; 4
    1fd8:	40 e0       	ldi	r20, 0x00	; 0
    1fda:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_u8SetPinValue>
	SPI_u8MasterSendPolling(WREN);
    1fde:	86 e0       	ldi	r24, 0x06	; 6
    1fe0:	0e 94 cb 11 	call	0x2396	; 0x2396 <SPI_u8MasterSendPolling>
	DIO_u8SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_HIGH);
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	64 e0       	ldi	r22, 0x04	; 4
    1fe8:	41 e0       	ldi	r20, 0x01	; 1
    1fea:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_u8SetPinValue>
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	a0 ea       	ldi	r26, 0xA0	; 160
    1ff4:	b0 e4       	ldi	r27, 0x40	; 64
    1ff6:	89 8f       	std	Y+25, r24	; 0x19
    1ff8:	9a 8f       	std	Y+26, r25	; 0x1a
    1ffa:	ab 8f       	std	Y+27, r26	; 0x1b
    1ffc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffe:	69 8d       	ldd	r22, Y+25	; 0x19
    2000:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2002:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2004:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	4a ef       	ldi	r20, 0xFA	; 250
    200c:	54 e4       	ldi	r21, 0x44	; 68
    200e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	8d 8b       	std	Y+21, r24	; 0x15
    2018:	9e 8b       	std	Y+22, r25	; 0x16
    201a:	af 8b       	std	Y+23, r26	; 0x17
    201c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    201e:	6d 89       	ldd	r22, Y+21	; 0x15
    2020:	7e 89       	ldd	r23, Y+22	; 0x16
    2022:	8f 89       	ldd	r24, Y+23	; 0x17
    2024:	98 8d       	ldd	r25, Y+24	; 0x18
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	40 e8       	ldi	r20, 0x80	; 128
    202c:	5f e3       	ldi	r21, 0x3F	; 63
    202e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2032:	88 23       	and	r24, r24
    2034:	2c f4       	brge	.+10     	; 0x2040 <EEPROM_u8SendMem16Byte+0x98>
		__ticks = 1;
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	9c 8b       	std	Y+20, r25	; 0x14
    203c:	8b 8b       	std	Y+19, r24	; 0x13
    203e:	3f c0       	rjmp	.+126    	; 0x20be <EEPROM_u8SendMem16Byte+0x116>
	else if (__tmp > 65535)
    2040:	6d 89       	ldd	r22, Y+21	; 0x15
    2042:	7e 89       	ldd	r23, Y+22	; 0x16
    2044:	8f 89       	ldd	r24, Y+23	; 0x17
    2046:	98 8d       	ldd	r25, Y+24	; 0x18
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	3f ef       	ldi	r19, 0xFF	; 255
    204c:	4f e7       	ldi	r20, 0x7F	; 127
    204e:	57 e4       	ldi	r21, 0x47	; 71
    2050:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2054:	18 16       	cp	r1, r24
    2056:	4c f5       	brge	.+82     	; 0x20aa <EEPROM_u8SendMem16Byte+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2058:	69 8d       	ldd	r22, Y+25	; 0x19
    205a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    205c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    205e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e2       	ldi	r20, 0x20	; 32
    2066:	51 e4       	ldi	r21, 0x41	; 65
    2068:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	bc 01       	movw	r22, r24
    2072:	cd 01       	movw	r24, r26
    2074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	9c 8b       	std	Y+20, r25	; 0x14
    207e:	8b 8b       	std	Y+19, r24	; 0x13
    2080:	0f c0       	rjmp	.+30     	; 0x20a0 <EEPROM_u8SendMem16Byte+0xf8>
    2082:	88 ec       	ldi	r24, 0xC8	; 200
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	9a 8b       	std	Y+18, r25	; 0x12
    2088:	89 8b       	std	Y+17, r24	; 0x11
    208a:	89 89       	ldd	r24, Y+17	; 0x11
    208c:	9a 89       	ldd	r25, Y+18	; 0x12
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <EEPROM_u8SendMem16Byte+0xe6>
    2092:	9a 8b       	std	Y+18, r25	; 0x12
    2094:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2096:	8b 89       	ldd	r24, Y+19	; 0x13
    2098:	9c 89       	ldd	r25, Y+20	; 0x14
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	9c 8b       	std	Y+20, r25	; 0x14
    209e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a0:	8b 89       	ldd	r24, Y+19	; 0x13
    20a2:	9c 89       	ldd	r25, Y+20	; 0x14
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	69 f7       	brne	.-38     	; 0x2082 <EEPROM_u8SendMem16Byte+0xda>
    20a8:	14 c0       	rjmp	.+40     	; 0x20d2 <EEPROM_u8SendMem16Byte+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20aa:	6d 89       	ldd	r22, Y+21	; 0x15
    20ac:	7e 89       	ldd	r23, Y+22	; 0x16
    20ae:	8f 89       	ldd	r24, Y+23	; 0x17
    20b0:	98 8d       	ldd	r25, Y+24	; 0x18
    20b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	9c 8b       	std	Y+20, r25	; 0x14
    20bc:	8b 8b       	std	Y+19, r24	; 0x13
    20be:	8b 89       	ldd	r24, Y+19	; 0x13
    20c0:	9c 89       	ldd	r25, Y+20	; 0x14
    20c2:	98 8b       	std	Y+16, r25	; 0x10
    20c4:	8f 87       	std	Y+15, r24	; 0x0f
    20c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    20c8:	98 89       	ldd	r25, Y+16	; 0x10
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <EEPROM_u8SendMem16Byte+0x122>
    20ce:	98 8b       	std	Y+16, r25	; 0x10
    20d0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	DIO_u8SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_LOW);
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	64 e0       	ldi	r22, 0x04	; 4
    20d6:	40 e0       	ldi	r20, 0x00	; 0
    20d8:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_u8SetPinValue>
	SPI_u8MasterSendPolling(WRITE);
    20dc:	82 e0       	ldi	r24, 0x02	; 2
    20de:	0e 94 cb 11 	call	0x2396	; 0x2396 <SPI_u8MasterSendPolling>
	SPI_u8MasterSendPolling((u8)Copy_u16Address);
    20e2:	89 a1       	ldd	r24, Y+33	; 0x21
    20e4:	0e 94 cb 11 	call	0x2396	; 0x2396 <SPI_u8MasterSendPolling>
	for(Local_u8itration = 0;Local_u8itration<Copy_u8PageSize;Local_u8itration++)
    20e8:	1d 8e       	std	Y+29, r1	; 0x1d
    20ea:	0e c0       	rjmp	.+28     	; 0x2108 <EEPROM_u8SendMem16Byte+0x160>
	{
		SPI_u8MasterSendPolling(Copy_u8Data[Local_u8itration]);
    20ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20ee:	28 2f       	mov	r18, r24
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20f4:	98 a1       	ldd	r25, Y+32	; 0x20
    20f6:	fc 01       	movw	r30, r24
    20f8:	e2 0f       	add	r30, r18
    20fa:	f3 1f       	adc	r31, r19
    20fc:	80 81       	ld	r24, Z
    20fe:	0e 94 cb 11 	call	0x2396	; 0x2396 <SPI_u8MasterSendPolling>
	DIO_u8SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_HIGH);
	_delay_ms(5);
	DIO_u8SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_LOW);
	SPI_u8MasterSendPolling(WRITE);
	SPI_u8MasterSendPolling((u8)Copy_u16Address);
	for(Local_u8itration = 0;Local_u8itration<Copy_u8PageSize;Local_u8itration++)
    2102:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2104:	8f 5f       	subi	r24, 0xFF	; 255
    2106:	8d 8f       	std	Y+29, r24	; 0x1d
    2108:	9d 8d       	ldd	r25, Y+29	; 0x1d
    210a:	8b a1       	ldd	r24, Y+35	; 0x23
    210c:	98 17       	cp	r25, r24
    210e:	70 f3       	brcs	.-36     	; 0x20ec <EEPROM_u8SendMem16Byte+0x144>
	{
		SPI_u8MasterSendPolling(Copy_u8Data[Local_u8itration]);
	}
	DIO_u8SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_HIGH);
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	64 e0       	ldi	r22, 0x04	; 4
    2114:	41 e0       	ldi	r20, 0x01	; 1
    2116:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_u8SetPinValue>
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	a0 ea       	ldi	r26, 0xA0	; 160
    2120:	b0 e4       	ldi	r27, 0x40	; 64
    2122:	8b 87       	std	Y+11, r24	; 0x0b
    2124:	9c 87       	std	Y+12, r25	; 0x0c
    2126:	ad 87       	std	Y+13, r26	; 0x0d
    2128:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    212a:	6b 85       	ldd	r22, Y+11	; 0x0b
    212c:	7c 85       	ldd	r23, Y+12	; 0x0c
    212e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2130:	9e 85       	ldd	r25, Y+14	; 0x0e
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	4a ef       	ldi	r20, 0xFA	; 250
    2138:	54 e4       	ldi	r21, 0x44	; 68
    213a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213e:	dc 01       	movw	r26, r24
    2140:	cb 01       	movw	r24, r22
    2142:	8f 83       	std	Y+7, r24	; 0x07
    2144:	98 87       	std	Y+8, r25	; 0x08
    2146:	a9 87       	std	Y+9, r26	; 0x09
    2148:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    214a:	6f 81       	ldd	r22, Y+7	; 0x07
    214c:	78 85       	ldd	r23, Y+8	; 0x08
    214e:	89 85       	ldd	r24, Y+9	; 0x09
    2150:	9a 85       	ldd	r25, Y+10	; 0x0a
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	40 e8       	ldi	r20, 0x80	; 128
    2158:	5f e3       	ldi	r21, 0x3F	; 63
    215a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    215e:	88 23       	and	r24, r24
    2160:	2c f4       	brge	.+10     	; 0x216c <EEPROM_u8SendMem16Byte+0x1c4>
		__ticks = 1;
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	9e 83       	std	Y+6, r25	; 0x06
    2168:	8d 83       	std	Y+5, r24	; 0x05
    216a:	3f c0       	rjmp	.+126    	; 0x21ea <EEPROM_u8SendMem16Byte+0x242>
	else if (__tmp > 65535)
    216c:	6f 81       	ldd	r22, Y+7	; 0x07
    216e:	78 85       	ldd	r23, Y+8	; 0x08
    2170:	89 85       	ldd	r24, Y+9	; 0x09
    2172:	9a 85       	ldd	r25, Y+10	; 0x0a
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	3f ef       	ldi	r19, 0xFF	; 255
    2178:	4f e7       	ldi	r20, 0x7F	; 127
    217a:	57 e4       	ldi	r21, 0x47	; 71
    217c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2180:	18 16       	cp	r1, r24
    2182:	4c f5       	brge	.+82     	; 0x21d6 <EEPROM_u8SendMem16Byte+0x22e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2184:	6b 85       	ldd	r22, Y+11	; 0x0b
    2186:	7c 85       	ldd	r23, Y+12	; 0x0c
    2188:	8d 85       	ldd	r24, Y+13	; 0x0d
    218a:	9e 85       	ldd	r25, Y+14	; 0x0e
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	40 e2       	ldi	r20, 0x20	; 32
    2192:	51 e4       	ldi	r21, 0x41	; 65
    2194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	bc 01       	movw	r22, r24
    219e:	cd 01       	movw	r24, r26
    21a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	9e 83       	std	Y+6, r25	; 0x06
    21aa:	8d 83       	std	Y+5, r24	; 0x05
    21ac:	0f c0       	rjmp	.+30     	; 0x21cc <EEPROM_u8SendMem16Byte+0x224>
    21ae:	88 ec       	ldi	r24, 0xC8	; 200
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	9c 83       	std	Y+4, r25	; 0x04
    21b4:	8b 83       	std	Y+3, r24	; 0x03
    21b6:	8b 81       	ldd	r24, Y+3	; 0x03
    21b8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ba:	01 97       	sbiw	r24, 0x01	; 1
    21bc:	f1 f7       	brne	.-4      	; 0x21ba <EEPROM_u8SendMem16Byte+0x212>
    21be:	9c 83       	std	Y+4, r25	; 0x04
    21c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c2:	8d 81       	ldd	r24, Y+5	; 0x05
    21c4:	9e 81       	ldd	r25, Y+6	; 0x06
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	9e 83       	std	Y+6, r25	; 0x06
    21ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21cc:	8d 81       	ldd	r24, Y+5	; 0x05
    21ce:	9e 81       	ldd	r25, Y+6	; 0x06
    21d0:	00 97       	sbiw	r24, 0x00	; 0
    21d2:	69 f7       	brne	.-38     	; 0x21ae <EEPROM_u8SendMem16Byte+0x206>
    21d4:	14 c0       	rjmp	.+40     	; 0x21fe <EEPROM_u8SendMem16Byte+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d6:	6f 81       	ldd	r22, Y+7	; 0x07
    21d8:	78 85       	ldd	r23, Y+8	; 0x08
    21da:	89 85       	ldd	r24, Y+9	; 0x09
    21dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	9e 83       	std	Y+6, r25	; 0x06
    21e8:	8d 83       	std	Y+5, r24	; 0x05
    21ea:	8d 81       	ldd	r24, Y+5	; 0x05
    21ec:	9e 81       	ldd	r25, Y+6	; 0x06
    21ee:	9a 83       	std	Y+2, r25	; 0x02
    21f0:	89 83       	std	Y+1, r24	; 0x01
    21f2:	89 81       	ldd	r24, Y+1	; 0x01
    21f4:	9a 81       	ldd	r25, Y+2	; 0x02
    21f6:	01 97       	sbiw	r24, 0x01	; 1
    21f8:	f1 f7       	brne	.-4      	; 0x21f6 <EEPROM_u8SendMem16Byte+0x24e>
    21fa:	9a 83       	std	Y+2, r25	; 0x02
    21fc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	return Local_intErrorState;
    21fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
}
    2200:	a3 96       	adiw	r28, 0x23	; 35
    2202:	0f b6       	in	r0, 0x3f	; 63
    2204:	f8 94       	cli
    2206:	de bf       	out	0x3e, r29	; 62
    2208:	0f be       	out	0x3f, r0	; 63
    220a:	cd bf       	out	0x3d, r28	; 61
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <EEPROM_u8ReadMemByte>:
u8 EEPROM_u8ReadMemByte(u8* Copy_pu8Read,u16 Copy_u16Address)
{
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	00 d0       	rcall	.+0      	; 0x2218 <EEPROM_u8ReadMemByte+0x6>
    2218:	00 d0       	rcall	.+0      	; 0x221a <EEPROM_u8ReadMemByte+0x8>
    221a:	0f 92       	push	r0
    221c:	cd b7       	in	r28, 0x3d	; 61
    221e:	de b7       	in	r29, 0x3e	; 62
    2220:	9b 83       	std	Y+3, r25	; 0x03
    2222:	8a 83       	std	Y+2, r24	; 0x02
    2224:	7d 83       	std	Y+5, r23	; 0x05
    2226:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_intErrorState = OK;
    2228:	19 82       	std	Y+1, r1	; 0x01

	DIO_u8SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_HIGH);
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	64 e0       	ldi	r22, 0x04	; 4
    222e:	41 e0       	ldi	r20, 0x01	; 1
    2230:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_LOW);
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	64 e0       	ldi	r22, 0x04	; 4
    2238:	40 e0       	ldi	r20, 0x00	; 0
    223a:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_u8SetPinValue>
	SPI_u8MasterSendPolling(READ);
    223e:	83 e0       	ldi	r24, 0x03	; 3
    2240:	0e 94 cb 11 	call	0x2396	; 0x2396 <SPI_u8MasterSendPolling>
	SPI_u8MasterSendPolling((u8)Copy_u16Address);
    2244:	8c 81       	ldd	r24, Y+4	; 0x04
    2246:	0e 94 cb 11 	call	0x2396	; 0x2396 <SPI_u8MasterSendPolling>
	SPI_u8MasterSendPolling(DUMY_NUM);
    224a:	8f ef       	ldi	r24, 0xFF	; 255
    224c:	0e 94 cb 11 	call	0x2396	; 0x2396 <SPI_u8MasterSendPolling>
	SPI_u8MasterRecvPolling(Copy_pu8Read);
    2250:	8a 81       	ldd	r24, Y+2	; 0x02
    2252:	9b 81       	ldd	r25, Y+3	; 0x03
    2254:	0e 94 83 12 	call	0x2506	; 0x2506 <SPI_u8MasterRecvPolling>
	DIO_u8SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_HIGH);
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	64 e0       	ldi	r22, 0x04	; 4
    225c:	41 e0       	ldi	r20, 0x01	; 1
    225e:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_u8SetPinValue>
	return Local_intErrorState;
    2262:	89 81       	ldd	r24, Y+1	; 0x01
}
    2264:	0f 90       	pop	r0
    2266:	0f 90       	pop	r0
    2268:	0f 90       	pop	r0
    226a:	0f 90       	pop	r0
    226c:	0f 90       	pop	r0
    226e:	cf 91       	pop	r28
    2270:	df 91       	pop	r29
    2272:	08 95       	ret

00002274 <GINT_voidEnable>:

#include "../MCAL/GINT_register.h"
#include "../MCAL/GINT_interface.h"

void GINT_voidEnable()
{
    2274:	df 93       	push	r29
    2276:	cf 93       	push	r28
    2278:	cd b7       	in	r28, 0x3d	; 61
    227a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    227c:	af e5       	ldi	r26, 0x5F	; 95
    227e:	b0 e0       	ldi	r27, 0x00	; 0
    2280:	ef e5       	ldi	r30, 0x5F	; 95
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	80 81       	ld	r24, Z
    2286:	80 68       	ori	r24, 0x80	; 128
    2288:	8c 93       	st	X, r24
}
    228a:	cf 91       	pop	r28
    228c:	df 91       	pop	r29
    228e:	08 95       	ret

00002290 <GINT_voidDisable>:
void GINT_voidDisable()
{
    2290:	df 93       	push	r29
    2292:	cf 93       	push	r28
    2294:	cd b7       	in	r28, 0x3d	; 61
    2296:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    2298:	af e5       	ldi	r26, 0x5F	; 95
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	ef e5       	ldi	r30, 0x5F	; 95
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	8f 77       	andi	r24, 0x7F	; 127
    22a4:	8c 93       	st	X, r24
}
    22a6:	cf 91       	pop	r28
    22a8:	df 91       	pop	r29
    22aa:	08 95       	ret

000022ac <PORT_voidInit>:
#include "../MCAL/PORT_config.h"
#include "../MCAL/PORT_register.h"
#include "../MCAL/PORT_interface.h"

void PORT_voidInit()
{
    22ac:	df 93       	push	r29
    22ae:	cf 93       	push	r28
    22b0:	cd b7       	in	r28, 0x3d	; 61
    22b2:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;	
    22b4:	ea e3       	ldi	r30, 0x3A	; 58
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	84 ef       	ldi	r24, 0xF4	; 244
    22ba:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    22bc:	e7 e3       	ldi	r30, 0x37	; 55
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	87 eb       	ldi	r24, 0xB7	; 183
    22c2:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    22c4:	e4 e3       	ldi	r30, 0x34	; 52
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	10 82       	st	Z, r1
	DDRD = PORTD_DIR;
    22ca:	e1 e3       	ldi	r30, 0x31	; 49
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	10 82       	st	Z, r1
	
	PORTA =PORTA_INIT_VALUE;
    22d0:	eb e3       	ldi	r30, 0x3B	; 59
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	10 82       	st	Z, r1
	PORTB =PORTB_INIT_VALUE;
    22d6:	e8 e3       	ldi	r30, 0x38	; 56
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	80 e1       	ldi	r24, 0x10	; 16
    22dc:	80 83       	st	Z, r24
	PORTC =PORTC_INIT_VALUE;
    22de:	e5 e3       	ldi	r30, 0x35	; 53
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	10 82       	st	Z, r1
	PORTD =PORTD_INIT_VALUE;
    22e4:	e2 e3       	ldi	r30, 0x32	; 50
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	10 82       	st	Z, r1
	
}
    22ea:	cf 91       	pop	r28
    22ec:	df 91       	pop	r29
    22ee:	08 95       	ret

000022f0 <SPI_voidMasterInit>:
static u8 *SPI_u8RecvDataBuff = NULL ;
static u8 SPI_u8BufferSize;
static u8 SPI_u8Direction = SPI_SINGLE_CHAR;

void SPI_voidMasterInit()
{
    22f0:	df 93       	push	r29
    22f2:	cf 93       	push	r28
    22f4:	cd b7       	in	r28, 0x3d	; 61
    22f6:	de b7       	in	r29, 0x3e	; 62
	// Set master mode
	SET_BIT(SPCR,SPCR_MSTR);
    22f8:	ad e2       	ldi	r26, 0x2D	; 45
    22fa:	b0 e0       	ldi	r27, 0x00	; 0
    22fc:	ed e2       	ldi	r30, 0x2D	; 45
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	80 81       	ld	r24, Z
    2302:	80 61       	ori	r24, 0x10	; 16
    2304:	8c 93       	st	X, r24
	// Set Order of data bits
	SPI_DATA_ORDER?SET_BIT(SPCR,SPCR_DORD):CLR_BIT(SPCR,SPCR_DORD);
    2306:	ad e2       	ldi	r26, 0x2D	; 45
    2308:	b0 e0       	ldi	r27, 0x00	; 0
    230a:	ed e2       	ldi	r30, 0x2D	; 45
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	80 81       	ld	r24, Z
    2310:	8f 7d       	andi	r24, 0xDF	; 223
    2312:	8c 93       	st	X, r24
	// Set Clk polarity and Clk Phase
	SPCR &= CLK_POL_PHA_MASK;
    2314:	ad e2       	ldi	r26, 0x2D	; 45
    2316:	b0 e0       	ldi	r27, 0x00	; 0
    2318:	ed e2       	ldi	r30, 0x2D	; 45
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	80 81       	ld	r24, Z
    231e:	83 7f       	andi	r24, 0xF3	; 243
    2320:	8c 93       	st	X, r24
	SPCR |=	SPI_MODE << SPCR_CPHA;
    2322:	ad e2       	ldi	r26, 0x2D	; 45
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	ed e2       	ldi	r30, 0x2D	; 45
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	80 81       	ld	r24, Z
    232c:	8c 93       	st	X, r24
	// prescaler of Clock
	SPCR &= CLK_PRE_MASK;
    232e:	ad e2       	ldi	r26, 0x2D	; 45
    2330:	b0 e0       	ldi	r27, 0x00	; 0
    2332:	ed e2       	ldi	r30, 0x2D	; 45
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	80 81       	ld	r24, Z
    2338:	8c 7f       	andi	r24, 0xFC	; 252
    233a:	8c 93       	st	X, r24
	((CLK_2<=SPI_CLOCK_PRE)&&(SPI_CLOCK_PRE<=CLK_32))?SET_BIT(SPSR,SPSR_SPI2X):CLR_BIT(SPSR,SPSR_SPI2X);
    233c:	ae e2       	ldi	r26, 0x2E	; 46
    233e:	b0 e0       	ldi	r27, 0x00	; 0
    2340:	ee e2       	ldi	r30, 0x2E	; 46
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	80 81       	ld	r24, Z
    2346:	8e 7f       	andi	r24, 0xFE	; 254
    2348:	8c 93       	st	X, r24
	SPCR |= (SPI_CLOCK_PRE & (~CLK_PRE_MASK));
    234a:	ad e2       	ldi	r26, 0x2D	; 45
    234c:	b0 e0       	ldi	r27, 0x00	; 0
    234e:	ed e2       	ldi	r30, 0x2D	; 45
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	80 81       	ld	r24, Z
    2354:	81 60       	ori	r24, 0x01	; 1
    2356:	8c 93       	st	X, r24
	// Enable SPI
	SET_BIT(SPCR,SPCR_SPE);
    2358:	ad e2       	ldi	r26, 0x2D	; 45
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	ed e2       	ldi	r30, 0x2D	; 45
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	80 81       	ld	r24, Z
    2362:	80 64       	ori	r24, 0x40	; 64
    2364:	8c 93       	st	X, r24
}
    2366:	cf 91       	pop	r28
    2368:	df 91       	pop	r29
    236a:	08 95       	ret

0000236c <SPI_voidSlaveInit>:

void SPI_voidSlaveInit()
{
    236c:	df 93       	push	r29
    236e:	cf 93       	push	r28
    2370:	cd b7       	in	r28, 0x3d	; 61
    2372:	de b7       	in	r29, 0x3e	; 62
	// Set slave mode
	CLR_BIT(SPCR,SPCR_MSTR);
    2374:	ad e2       	ldi	r26, 0x2D	; 45
    2376:	b0 e0       	ldi	r27, 0x00	; 0
    2378:	ed e2       	ldi	r30, 0x2D	; 45
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 81       	ld	r24, Z
    237e:	8f 7e       	andi	r24, 0xEF	; 239
    2380:	8c 93       	st	X, r24
	// Enable SPI
	SET_BIT(SPCR,SPCR_SPE);
    2382:	ad e2       	ldi	r26, 0x2D	; 45
    2384:	b0 e0       	ldi	r27, 0x00	; 0
    2386:	ed e2       	ldi	r30, 0x2D	; 45
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	80 64       	ori	r24, 0x40	; 64
    238e:	8c 93       	st	X, r24
}
    2390:	cf 91       	pop	r28
    2392:	df 91       	pop	r29
    2394:	08 95       	ret

00002396 <SPI_u8MasterSendPolling>:

u8 SPI_u8MasterSendPolling(u8 Copy_u8Data)
{
    2396:	df 93       	push	r29
    2398:	cf 93       	push	r28
    239a:	00 d0       	rcall	.+0      	; 0x239c <SPI_u8MasterSendPolling+0x6>
    239c:	00 d0       	rcall	.+0      	; 0x239e <SPI_u8MasterSendPolling+0x8>
    239e:	00 d0       	rcall	.+0      	; 0x23a0 <SPI_u8MasterSendPolling+0xa>
    23a0:	cd b7       	in	r28, 0x3d	; 61
    23a2:	de b7       	in	r29, 0x3e	; 62
    23a4:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_u8ErrorState = OK;
    23a6:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Counter = 0;
    23a8:	19 82       	std	Y+1, r1	; 0x01
    23aa:	1a 82       	std	Y+2, r1	; 0x02
    23ac:	1b 82       	std	Y+3, r1	; 0x03
    23ae:	1c 82       	std	Y+4, r1	; 0x04
	if(SPI_u8BusyFlag == IDLE)
    23b0:	80 91 73 00 	lds	r24, 0x0073
    23b4:	88 23       	and	r24, r24
    23b6:	a9 f5       	brne	.+106    	; 0x2422 <SPI_u8MasterSendPolling+0x8c>
	{
		SPI_u8BusyFlag = BUSY;
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	80 93 73 00 	sts	0x0073, r24
		SPDR = Copy_u8Data;
    23be:	ef e2       	ldi	r30, 0x2F	; 47
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	8e 81       	ldd	r24, Y+6	; 0x06
    23c4:	80 83       	st	Z, r24
    23c6:	0b c0       	rjmp	.+22     	; 0x23de <SPI_u8MasterSendPolling+0x48>
		while((GET_BIT(SPSR,SPSR_SPIF)==0)&&(Local_u32Counter<SPI_u32TIMEOUT))
		{
			Local_u32Counter++;
    23c8:	89 81       	ldd	r24, Y+1	; 0x01
    23ca:	9a 81       	ldd	r25, Y+2	; 0x02
    23cc:	ab 81       	ldd	r26, Y+3	; 0x03
    23ce:	bc 81       	ldd	r27, Y+4	; 0x04
    23d0:	01 96       	adiw	r24, 0x01	; 1
    23d2:	a1 1d       	adc	r26, r1
    23d4:	b1 1d       	adc	r27, r1
    23d6:	89 83       	std	Y+1, r24	; 0x01
    23d8:	9a 83       	std	Y+2, r25	; 0x02
    23da:	ab 83       	std	Y+3, r26	; 0x03
    23dc:	bc 83       	std	Y+4, r27	; 0x04
	u32 Local_u32Counter = 0;
	if(SPI_u8BusyFlag == IDLE)
	{
		SPI_u8BusyFlag = BUSY;
		SPDR = Copy_u8Data;
		while((GET_BIT(SPSR,SPSR_SPIF)==0)&&(Local_u32Counter<SPI_u32TIMEOUT))
    23de:	ee e2       	ldi	r30, 0x2E	; 46
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	88 23       	and	r24, r24
    23e6:	64 f0       	brlt	.+24     	; 0x2400 <SPI_u8MasterSendPolling+0x6a>
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	9a 81       	ldd	r25, Y+2	; 0x02
    23ec:	ab 81       	ldd	r26, Y+3	; 0x03
    23ee:	bc 81       	ldd	r27, Y+4	; 0x04
    23f0:	80 32       	cpi	r24, 0x20	; 32
    23f2:	21 ea       	ldi	r18, 0xA1	; 161
    23f4:	92 07       	cpc	r25, r18
    23f6:	27 e0       	ldi	r18, 0x07	; 7
    23f8:	a2 07       	cpc	r26, r18
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	b2 07       	cpc	r27, r18
    23fe:	20 f3       	brcs	.-56     	; 0x23c8 <SPI_u8MasterSendPolling+0x32>
		{
			Local_u32Counter++;
		}
		if(Local_u32Counter==SPI_u32TIMEOUT)
    2400:	89 81       	ldd	r24, Y+1	; 0x01
    2402:	9a 81       	ldd	r25, Y+2	; 0x02
    2404:	ab 81       	ldd	r26, Y+3	; 0x03
    2406:	bc 81       	ldd	r27, Y+4	; 0x04
    2408:	80 32       	cpi	r24, 0x20	; 32
    240a:	21 ea       	ldi	r18, 0xA1	; 161
    240c:	92 07       	cpc	r25, r18
    240e:	27 e0       	ldi	r18, 0x07	; 7
    2410:	a2 07       	cpc	r26, r18
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	b2 07       	cpc	r27, r18
    2416:	11 f4       	brne	.+4      	; 0x241c <SPI_u8MasterSendPolling+0x86>
		{
			// Nothing
			Local_u8ErrorState = NOTOK;
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	8d 83       	std	Y+5, r24	; 0x05
		}
		SPI_u8BusyFlag = IDLE;
    241c:	10 92 73 00 	sts	0x0073, r1
    2420:	02 c0       	rjmp	.+4      	; 0x2426 <SPI_u8MasterSendPolling+0x90>
	}
	else {
		Local_u8ErrorState = BUSY_FUNC;
    2422:	83 e0       	ldi	r24, 0x03	; 3
    2424:	8d 83       	std	Y+5, r24	; 0x05
	}

	return Local_u8ErrorState;
    2426:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2428:	26 96       	adiw	r28, 0x06	; 6
    242a:	0f b6       	in	r0, 0x3f	; 63
    242c:	f8 94       	cli
    242e:	de bf       	out	0x3e, r29	; 62
    2430:	0f be       	out	0x3f, r0	; 63
    2432:	cd bf       	out	0x3d, r28	; 61
    2434:	cf 91       	pop	r28
    2436:	df 91       	pop	r29
    2438:	08 95       	ret

0000243a <SPI_u8TransceivePolling>:

u8 SPI_u8TransceivePolling(u8 Copy_u8Data,u8* Copy_pu8Read)
{
    243a:	df 93       	push	r29
    243c:	cf 93       	push	r28
    243e:	cd b7       	in	r28, 0x3d	; 61
    2440:	de b7       	in	r29, 0x3e	; 62
    2442:	28 97       	sbiw	r28, 0x08	; 8
    2444:	0f b6       	in	r0, 0x3f	; 63
    2446:	f8 94       	cli
    2448:	de bf       	out	0x3e, r29	; 62
    244a:	0f be       	out	0x3f, r0	; 63
    244c:	cd bf       	out	0x3d, r28	; 61
    244e:	8e 83       	std	Y+6, r24	; 0x06
    2450:	78 87       	std	Y+8, r23	; 0x08
    2452:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = 0;
    2454:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32counter = 0;
    2456:	19 82       	std	Y+1, r1	; 0x01
    2458:	1a 82       	std	Y+2, r1	; 0x02
    245a:	1b 82       	std	Y+3, r1	; 0x03
    245c:	1c 82       	std	Y+4, r1	; 0x04
	if(Copy_pu8Read!=NULL)
    245e:	8f 81       	ldd	r24, Y+7	; 0x07
    2460:	98 85       	ldd	r25, Y+8	; 0x08
    2462:	00 97       	sbiw	r24, 0x00	; 0
    2464:	09 f4       	brne	.+2      	; 0x2468 <SPI_u8TransceivePolling+0x2e>
    2466:	43 c0       	rjmp	.+134    	; 0x24ee <SPI_u8TransceivePolling+0xb4>
	{
		if(SPI_u8BusyFlag == IDLE)
    2468:	80 91 73 00 	lds	r24, 0x0073
    246c:	88 23       	and	r24, r24
    246e:	e1 f5       	brne	.+120    	; 0x24e8 <SPI_u8TransceivePolling+0xae>
		{
			SPI_u8BusyFlag = BUSY;
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	80 93 73 00 	sts	0x0073, r24
			SPDR = Copy_u8Data;
    2476:	ef e2       	ldi	r30, 0x2F	; 47
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	8e 81       	ldd	r24, Y+6	; 0x06
    247c:	80 83       	st	Z, r24
    247e:	0b c0       	rjmp	.+22     	; 0x2496 <SPI_u8TransceivePolling+0x5c>
			while(((GET_BIT(SPSR,SPSR_SPIF)==0))&&(Local_u32counter<SPI_u32TIMEOUT))
			{
				Local_u32counter++;
    2480:	89 81       	ldd	r24, Y+1	; 0x01
    2482:	9a 81       	ldd	r25, Y+2	; 0x02
    2484:	ab 81       	ldd	r26, Y+3	; 0x03
    2486:	bc 81       	ldd	r27, Y+4	; 0x04
    2488:	01 96       	adiw	r24, 0x01	; 1
    248a:	a1 1d       	adc	r26, r1
    248c:	b1 1d       	adc	r27, r1
    248e:	89 83       	std	Y+1, r24	; 0x01
    2490:	9a 83       	std	Y+2, r25	; 0x02
    2492:	ab 83       	std	Y+3, r26	; 0x03
    2494:	bc 83       	std	Y+4, r27	; 0x04
	{
		if(SPI_u8BusyFlag == IDLE)
		{
			SPI_u8BusyFlag = BUSY;
			SPDR = Copy_u8Data;
			while(((GET_BIT(SPSR,SPSR_SPIF)==0))&&(Local_u32counter<SPI_u32TIMEOUT))
    2496:	ee e2       	ldi	r30, 0x2E	; 46
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
    249c:	88 23       	and	r24, r24
    249e:	64 f0       	brlt	.+24     	; 0x24b8 <SPI_u8TransceivePolling+0x7e>
    24a0:	89 81       	ldd	r24, Y+1	; 0x01
    24a2:	9a 81       	ldd	r25, Y+2	; 0x02
    24a4:	ab 81       	ldd	r26, Y+3	; 0x03
    24a6:	bc 81       	ldd	r27, Y+4	; 0x04
    24a8:	80 32       	cpi	r24, 0x20	; 32
    24aa:	21 ea       	ldi	r18, 0xA1	; 161
    24ac:	92 07       	cpc	r25, r18
    24ae:	27 e0       	ldi	r18, 0x07	; 7
    24b0:	a2 07       	cpc	r26, r18
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	b2 07       	cpc	r27, r18
    24b6:	20 f3       	brcs	.-56     	; 0x2480 <SPI_u8TransceivePolling+0x46>
			{
				Local_u32counter++;
			}
			if(Local_u32counter==SPI_u32TIMEOUT)
    24b8:	89 81       	ldd	r24, Y+1	; 0x01
    24ba:	9a 81       	ldd	r25, Y+2	; 0x02
    24bc:	ab 81       	ldd	r26, Y+3	; 0x03
    24be:	bc 81       	ldd	r27, Y+4	; 0x04
    24c0:	80 32       	cpi	r24, 0x20	; 32
    24c2:	21 ea       	ldi	r18, 0xA1	; 161
    24c4:	92 07       	cpc	r25, r18
    24c6:	27 e0       	ldi	r18, 0x07	; 7
    24c8:	a2 07       	cpc	r26, r18
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	b2 07       	cpc	r27, r18
    24ce:	19 f4       	brne	.+6      	; 0x24d6 <SPI_u8TransceivePolling+0x9c>
			{
				Local_u8ErrorState = NOTOK;
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	8d 83       	std	Y+5, r24	; 0x05
    24d4:	06 c0       	rjmp	.+12     	; 0x24e2 <SPI_u8TransceivePolling+0xa8>
			}
			else
				*Copy_pu8Read = SPDR;
    24d6:	ef e2       	ldi	r30, 0x2F	; 47
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	80 81       	ld	r24, Z
    24dc:	ef 81       	ldd	r30, Y+7	; 0x07
    24de:	f8 85       	ldd	r31, Y+8	; 0x08
    24e0:	80 83       	st	Z, r24
			SPI_u8BusyFlag = IDLE;
    24e2:	10 92 73 00 	sts	0x0073, r1
    24e6:	05 c0       	rjmp	.+10     	; 0x24f2 <SPI_u8TransceivePolling+0xb8>
		}
		else
			Local_u8ErrorState = BUSY_FUNC;
    24e8:	83 e0       	ldi	r24, 0x03	; 3
    24ea:	8d 83       	std	Y+5, r24	; 0x05
    24ec:	02 c0       	rjmp	.+4      	; 0x24f2 <SPI_u8TransceivePolling+0xb8>
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    24ee:	82 e0       	ldi	r24, 0x02	; 2
    24f0:	8d 83       	std	Y+5, r24	; 0x05
	return Local_u8ErrorState;
    24f2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    24f4:	28 96       	adiw	r28, 0x08	; 8
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	f8 94       	cli
    24fa:	de bf       	out	0x3e, r29	; 62
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	cd bf       	out	0x3d, r28	; 61
    2500:	cf 91       	pop	r28
    2502:	df 91       	pop	r29
    2504:	08 95       	ret

00002506 <SPI_u8MasterRecvPolling>:
u8 SPI_u8MasterRecvPolling(u8 *Copy_pu8Read)
{
    2506:	df 93       	push	r29
    2508:	cf 93       	push	r28
    250a:	cd b7       	in	r28, 0x3d	; 61
    250c:	de b7       	in	r29, 0x3e	; 62
    250e:	27 97       	sbiw	r28, 0x07	; 7
    2510:	0f b6       	in	r0, 0x3f	; 63
    2512:	f8 94       	cli
    2514:	de bf       	out	0x3e, r29	; 62
    2516:	0f be       	out	0x3f, r0	; 63
    2518:	cd bf       	out	0x3d, r28	; 61
    251a:	9f 83       	std	Y+7, r25	; 0x07
    251c:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_u8ErrorState = OK;
    251e:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Counter = 0;
    2520:	19 82       	std	Y+1, r1	; 0x01
    2522:	1a 82       	std	Y+2, r1	; 0x02
    2524:	1b 82       	std	Y+3, r1	; 0x03
    2526:	1c 82       	std	Y+4, r1	; 0x04
	if(Copy_pu8Read != NULL)
    2528:	8e 81       	ldd	r24, Y+6	; 0x06
    252a:	9f 81       	ldd	r25, Y+7	; 0x07
    252c:	00 97       	sbiw	r24, 0x00	; 0
    252e:	b9 f1       	breq	.+110    	; 0x259e <SPI_u8MasterRecvPolling+0x98>
	{
		if(SPI_u8BusyFlag == IDLE)
    2530:	80 91 73 00 	lds	r24, 0x0073
    2534:	88 23       	and	r24, r24
    2536:	81 f5       	brne	.+96     	; 0x2598 <SPI_u8MasterRecvPolling+0x92>
		{
			SPI_u8BusyFlag = BUSY;
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	80 93 73 00 	sts	0x0073, r24
			SPDR = SPI_DUMY_VALUE;
    253e:	ef e2       	ldi	r30, 0x2F	; 47
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	8f ef       	ldi	r24, 0xFF	; 255
    2544:	80 83       	st	Z, r24
			while((GET_BIT(SPSR,SPSR_SPIF)==0)&&(Local_u32Counter<SPI_u32TIMEOUT));
    2546:	ee e2       	ldi	r30, 0x2E	; 46
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	80 81       	ld	r24, Z
    254c:	88 23       	and	r24, r24
    254e:	64 f0       	brlt	.+24     	; 0x2568 <SPI_u8MasterRecvPolling+0x62>
    2550:	89 81       	ldd	r24, Y+1	; 0x01
    2552:	9a 81       	ldd	r25, Y+2	; 0x02
    2554:	ab 81       	ldd	r26, Y+3	; 0x03
    2556:	bc 81       	ldd	r27, Y+4	; 0x04
    2558:	80 32       	cpi	r24, 0x20	; 32
    255a:	21 ea       	ldi	r18, 0xA1	; 161
    255c:	92 07       	cpc	r25, r18
    255e:	27 e0       	ldi	r18, 0x07	; 7
    2560:	a2 07       	cpc	r26, r18
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	b2 07       	cpc	r27, r18
    2566:	78 f3       	brcs	.-34     	; 0x2546 <SPI_u8MasterRecvPolling+0x40>
			if(Local_u32Counter==SPI_u32TIMEOUT)
    2568:	89 81       	ldd	r24, Y+1	; 0x01
    256a:	9a 81       	ldd	r25, Y+2	; 0x02
    256c:	ab 81       	ldd	r26, Y+3	; 0x03
    256e:	bc 81       	ldd	r27, Y+4	; 0x04
    2570:	80 32       	cpi	r24, 0x20	; 32
    2572:	21 ea       	ldi	r18, 0xA1	; 161
    2574:	92 07       	cpc	r25, r18
    2576:	27 e0       	ldi	r18, 0x07	; 7
    2578:	a2 07       	cpc	r26, r18
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	b2 07       	cpc	r27, r18
    257e:	19 f4       	brne	.+6      	; 0x2586 <SPI_u8MasterRecvPolling+0x80>
			{
				// Nothing
				Local_u8ErrorState =NOTOK;
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	8d 83       	std	Y+5, r24	; 0x05
    2584:	06 c0       	rjmp	.+12     	; 0x2592 <SPI_u8MasterRecvPolling+0x8c>
			}
			else
			{
				*Copy_pu8Read = SPDR;
    2586:	ef e2       	ldi	r30, 0x2F	; 47
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	80 81       	ld	r24, Z
    258c:	ee 81       	ldd	r30, Y+6	; 0x06
    258e:	ff 81       	ldd	r31, Y+7	; 0x07
    2590:	80 83       	st	Z, r24
			}
			SPI_u8BusyFlag = IDLE;
    2592:	10 92 73 00 	sts	0x0073, r1
    2596:	05 c0       	rjmp	.+10     	; 0x25a2 <SPI_u8MasterRecvPolling+0x9c>
		}
		else
			Local_u8ErrorState = BUSY_FUNC;
    2598:	83 e0       	ldi	r24, 0x03	; 3
    259a:	8d 83       	std	Y+5, r24	; 0x05
    259c:	02 c0       	rjmp	.+4      	; 0x25a2 <SPI_u8MasterRecvPolling+0x9c>
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    259e:	82 e0       	ldi	r24, 0x02	; 2
    25a0:	8d 83       	std	Y+5, r24	; 0x05
	return Local_u8ErrorState;
    25a2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    25a4:	27 96       	adiw	r28, 0x07	; 7
    25a6:	0f b6       	in	r0, 0x3f	; 63
    25a8:	f8 94       	cli
    25aa:	de bf       	out	0x3e, r29	; 62
    25ac:	0f be       	out	0x3f, r0	; 63
    25ae:	cd bf       	out	0x3d, r28	; 61
    25b0:	cf 91       	pop	r28
    25b2:	df 91       	pop	r29
    25b4:	08 95       	ret

000025b6 <SPI_u8BufferTransceiveSynch>:

u8 SPI_u8BufferTransceiveSynch(u8* Copy_u8Data,u8* Copy_pu8Read,u8 Copy_u8BufferSize)
{
    25b6:	df 93       	push	r29
    25b8:	cf 93       	push	r28
    25ba:	cd b7       	in	r28, 0x3d	; 61
    25bc:	de b7       	in	r29, 0x3e	; 62
    25be:	27 97       	sbiw	r28, 0x07	; 7
    25c0:	0f b6       	in	r0, 0x3f	; 63
    25c2:	f8 94       	cli
    25c4:	de bf       	out	0x3e, r29	; 62
    25c6:	0f be       	out	0x3f, r0	; 63
    25c8:	cd bf       	out	0x3d, r28	; 61
    25ca:	9c 83       	std	Y+4, r25	; 0x04
    25cc:	8b 83       	std	Y+3, r24	; 0x03
    25ce:	7e 83       	std	Y+6, r23	; 0x06
    25d0:	6d 83       	std	Y+5, r22	; 0x05
    25d2:	4f 83       	std	Y+7, r20	; 0x07
	u8 Local_u8ErrorState = OK;
    25d4:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Counter = 0;
    25d6:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Read != NULL)&&(Copy_u8Data!=NULL))
    25d8:	8d 81       	ldd	r24, Y+5	; 0x05
    25da:	9e 81       	ldd	r25, Y+6	; 0x06
    25dc:	00 97       	sbiw	r24, 0x00	; 0
    25de:	09 f1       	breq	.+66     	; 0x2622 <SPI_u8BufferTransceiveSynch+0x6c>
    25e0:	8b 81       	ldd	r24, Y+3	; 0x03
    25e2:	9c 81       	ldd	r25, Y+4	; 0x04
    25e4:	00 97       	sbiw	r24, 0x00	; 0
    25e6:	e9 f0       	breq	.+58     	; 0x2622 <SPI_u8BufferTransceiveSynch+0x6c>
    25e8:	17 c0       	rjmp	.+46     	; 0x2618 <SPI_u8BufferTransceiveSynch+0x62>
	{
		while(Local_u8Counter<Copy_u8BufferSize)
		{
			SPI_u8TransceivePolling(Copy_u8Data[Local_u8Counter],&Copy_pu8Read[Local_u8Counter]);
    25ea:	89 81       	ldd	r24, Y+1	; 0x01
    25ec:	28 2f       	mov	r18, r24
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	8b 81       	ldd	r24, Y+3	; 0x03
    25f2:	9c 81       	ldd	r25, Y+4	; 0x04
    25f4:	fc 01       	movw	r30, r24
    25f6:	e2 0f       	add	r30, r18
    25f8:	f3 1f       	adc	r31, r19
    25fa:	40 81       	ld	r20, Z
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	28 2f       	mov	r18, r24
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	8d 81       	ldd	r24, Y+5	; 0x05
    2604:	9e 81       	ldd	r25, Y+6	; 0x06
    2606:	28 0f       	add	r18, r24
    2608:	39 1f       	adc	r19, r25
    260a:	84 2f       	mov	r24, r20
    260c:	b9 01       	movw	r22, r18
    260e:	0e 94 1d 12 	call	0x243a	; 0x243a <SPI_u8TransceivePolling>
			Local_u8Counter++;
    2612:	89 81       	ldd	r24, Y+1	; 0x01
    2614:	8f 5f       	subi	r24, 0xFF	; 255
    2616:	89 83       	std	Y+1, r24	; 0x01
{
	u8 Local_u8ErrorState = OK;
	u8 Local_u8Counter = 0;
	if((Copy_pu8Read != NULL)&&(Copy_u8Data!=NULL))
	{
		while(Local_u8Counter<Copy_u8BufferSize)
    2618:	99 81       	ldd	r25, Y+1	; 0x01
    261a:	8f 81       	ldd	r24, Y+7	; 0x07
    261c:	98 17       	cp	r25, r24
    261e:	28 f3       	brcs	.-54     	; 0x25ea <SPI_u8BufferTransceiveSynch+0x34>
    2620:	02 c0       	rjmp	.+4      	; 0x2626 <SPI_u8BufferTransceiveSynch+0x70>
			SPI_u8TransceivePolling(Copy_u8Data[Local_u8Counter],&Copy_pu8Read[Local_u8Counter]);
			Local_u8Counter++;
		}
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    2622:	82 e0       	ldi	r24, 0x02	; 2
    2624:	8a 83       	std	Y+2, r24	; 0x02
	return Local_u8ErrorState;
    2626:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2628:	27 96       	adiw	r28, 0x07	; 7
    262a:	0f b6       	in	r0, 0x3f	; 63
    262c:	f8 94       	cli
    262e:	de bf       	out	0x3e, r29	; 62
    2630:	0f be       	out	0x3f, r0	; 63
    2632:	cd bf       	out	0x3d, r28	; 61
    2634:	cf 91       	pop	r28
    2636:	df 91       	pop	r29
    2638:	08 95       	ret

0000263a <SPI_u8TransceiveInt>:

u8 SPI_u8TransceiveInt(u8 Copy_u8Data,u8* Copy_pu8Read,void (*Notification)())
{
    263a:	df 93       	push	r29
    263c:	cf 93       	push	r28
    263e:	00 d0       	rcall	.+0      	; 0x2640 <SPI_u8TransceiveInt+0x6>
    2640:	00 d0       	rcall	.+0      	; 0x2642 <SPI_u8TransceiveInt+0x8>
    2642:	00 d0       	rcall	.+0      	; 0x2644 <SPI_u8TransceiveInt+0xa>
    2644:	cd b7       	in	r28, 0x3d	; 61
    2646:	de b7       	in	r29, 0x3e	; 62
    2648:	8a 83       	std	Y+2, r24	; 0x02
    264a:	7c 83       	std	Y+4, r23	; 0x04
    264c:	6b 83       	std	Y+3, r22	; 0x03
    264e:	5e 83       	std	Y+6, r21	; 0x06
    2650:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = OK;
    2652:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Read != NULL)&&(Notification!=NULL))
    2654:	8b 81       	ldd	r24, Y+3	; 0x03
    2656:	9c 81       	ldd	r25, Y+4	; 0x04
    2658:	00 97       	sbiw	r24, 0x00	; 0
    265a:	41 f1       	breq	.+80     	; 0x26ac <SPI_u8TransceiveInt+0x72>
    265c:	8d 81       	ldd	r24, Y+5	; 0x05
    265e:	9e 81       	ldd	r25, Y+6	; 0x06
    2660:	00 97       	sbiw	r24, 0x00	; 0
    2662:	21 f1       	breq	.+72     	; 0x26ac <SPI_u8TransceiveInt+0x72>
	{
		if(SPI_u8BusyFlag == IDLE)
    2664:	80 91 73 00 	lds	r24, 0x0073
    2668:	88 23       	and	r24, r24
    266a:	e9 f4       	brne	.+58     	; 0x26a6 <SPI_u8TransceiveInt+0x6c>
		{
			SPI_u8BusyFlag = BUSY;
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	80 93 73 00 	sts	0x0073, r24
			SPI_u8Direction = SPI_SINGLE_CHAR;
    2672:	10 92 7f 00 	sts	0x007F, r1
			SPI_CallBackFunc = Notification;
    2676:	8d 81       	ldd	r24, Y+5	; 0x05
    2678:	9e 81       	ldd	r25, Y+6	; 0x06
    267a:	90 93 75 00 	sts	0x0075, r25
    267e:	80 93 74 00 	sts	0x0074, r24
			SPI_u8RecvData = Copy_pu8Read;
    2682:	8b 81       	ldd	r24, Y+3	; 0x03
    2684:	9c 81       	ldd	r25, Y+4	; 0x04
    2686:	90 93 79 00 	sts	0x0079, r25
    268a:	80 93 78 00 	sts	0x0078, r24
			SET_BIT(SPCR,SPCR_SPIE);
    268e:	ad e2       	ldi	r26, 0x2D	; 45
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	ed e2       	ldi	r30, 0x2D	; 45
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	80 81       	ld	r24, Z
    2698:	80 68       	ori	r24, 0x80	; 128
    269a:	8c 93       	st	X, r24
			SPDR = Copy_u8Data;
    269c:	ef e2       	ldi	r30, 0x2F	; 47
    269e:	f0 e0       	ldi	r31, 0x00	; 0
    26a0:	8a 81       	ldd	r24, Y+2	; 0x02
    26a2:	80 83       	st	Z, r24
    26a4:	05 c0       	rjmp	.+10     	; 0x26b0 <SPI_u8TransceiveInt+0x76>
		}
		else
			Local_u8ErrorState = BUSY_FUNC;
    26a6:	83 e0       	ldi	r24, 0x03	; 3
    26a8:	89 83       	std	Y+1, r24	; 0x01
    26aa:	02 c0       	rjmp	.+4      	; 0x26b0 <SPI_u8TransceiveInt+0x76>
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    26ac:	82 e0       	ldi	r24, 0x02	; 2
    26ae:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    26b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    26b2:	26 96       	adiw	r28, 0x06	; 6
    26b4:	0f b6       	in	r0, 0x3f	; 63
    26b6:	f8 94       	cli
    26b8:	de bf       	out	0x3e, r29	; 62
    26ba:	0f be       	out	0x3f, r0	; 63
    26bc:	cd bf       	out	0x3d, r28	; 61
    26be:	cf 91       	pop	r28
    26c0:	df 91       	pop	r29
    26c2:	08 95       	ret

000026c4 <SPI_u8BufferTransceiveAsynch>:

u8 SPI_u8BufferTransceiveAsynch(u8 *Copy_u8Data,u8* Copy_pu8Read,u8 Copy_u8BufferSize,void (*Notification)())
{
    26c4:	df 93       	push	r29
    26c6:	cf 93       	push	r28
    26c8:	cd b7       	in	r28, 0x3d	; 61
    26ca:	de b7       	in	r29, 0x3e	; 62
    26cc:	28 97       	sbiw	r28, 0x08	; 8
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	f8 94       	cli
    26d2:	de bf       	out	0x3e, r29	; 62
    26d4:	0f be       	out	0x3f, r0	; 63
    26d6:	cd bf       	out	0x3d, r28	; 61
    26d8:	9b 83       	std	Y+3, r25	; 0x03
    26da:	8a 83       	std	Y+2, r24	; 0x02
    26dc:	7d 83       	std	Y+5, r23	; 0x05
    26de:	6c 83       	std	Y+4, r22	; 0x04
    26e0:	4e 83       	std	Y+6, r20	; 0x06
    26e2:	38 87       	std	Y+8, r19	; 0x08
    26e4:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8ErrorState = OK;
    26e6:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Read != NULL)&&(Copy_u8Data!=NULL)&&((Notification!=NULL)))
    26e8:	8c 81       	ldd	r24, Y+4	; 0x04
    26ea:	9d 81       	ldd	r25, Y+5	; 0x05
    26ec:	00 97       	sbiw	r24, 0x00	; 0
    26ee:	09 f4       	brne	.+2      	; 0x26f2 <SPI_u8BufferTransceiveAsynch+0x2e>
    26f0:	41 c0       	rjmp	.+130    	; 0x2774 <SPI_u8BufferTransceiveAsynch+0xb0>
    26f2:	8a 81       	ldd	r24, Y+2	; 0x02
    26f4:	9b 81       	ldd	r25, Y+3	; 0x03
    26f6:	00 97       	sbiw	r24, 0x00	; 0
    26f8:	e9 f1       	breq	.+122    	; 0x2774 <SPI_u8BufferTransceiveAsynch+0xb0>
    26fa:	8f 81       	ldd	r24, Y+7	; 0x07
    26fc:	98 85       	ldd	r25, Y+8	; 0x08
    26fe:	00 97       	sbiw	r24, 0x00	; 0
    2700:	c9 f1       	breq	.+114    	; 0x2774 <SPI_u8BufferTransceiveAsynch+0xb0>
	{
		if(SPI_u8BusyFlag == IDLE)
    2702:	80 91 73 00 	lds	r24, 0x0073
    2706:	88 23       	and	r24, r24
    2708:	91 f5       	brne	.+100    	; 0x276e <SPI_u8BufferTransceiveAsynch+0xaa>
		{
			SPI_u8BusyFlag = BUSY;
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	80 93 73 00 	sts	0x0073, r24
			SPI_u8Direction = SPI_MULTI_CHAR;
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	80 93 7f 00 	sts	0x007F, r24
			SPI_CallBackBuffFunc = Notification;
    2716:	8f 81       	ldd	r24, Y+7	; 0x07
    2718:	98 85       	ldd	r25, Y+8	; 0x08
    271a:	90 93 77 00 	sts	0x0077, r25
    271e:	80 93 76 00 	sts	0x0076, r24
			SPI_u8SendDataBuff = Copy_u8Data;
    2722:	8a 81       	ldd	r24, Y+2	; 0x02
    2724:	9b 81       	ldd	r25, Y+3	; 0x03
    2726:	90 93 7c 00 	sts	0x007C, r25
    272a:	80 93 7b 00 	sts	0x007B, r24
			SPI_u8RecvDataBuff = Copy_pu8Read;
    272e:	8c 81       	ldd	r24, Y+4	; 0x04
    2730:	9d 81       	ldd	r25, Y+5	; 0x05
    2732:	90 93 7e 00 	sts	0x007E, r25
    2736:	80 93 7d 00 	sts	0x007D, r24
			SPI_u8BufferSize = Copy_u8BufferSize;
    273a:	8e 81       	ldd	r24, Y+6	; 0x06
    273c:	80 93 80 00 	sts	0x0080, r24
			SET_BIT(SPCR,SPCR_SPIE);
    2740:	ad e2       	ldi	r26, 0x2D	; 45
    2742:	b0 e0       	ldi	r27, 0x00	; 0
    2744:	ed e2       	ldi	r30, 0x2D	; 45
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	80 81       	ld	r24, Z
    274a:	80 68       	ori	r24, 0x80	; 128
    274c:	8c 93       	st	X, r24
			SPI_u8Index = 0;
    274e:	10 92 7a 00 	sts	0x007A, r1
			SPDR = Copy_u8Data[SPI_u8Index];
    2752:	af e2       	ldi	r26, 0x2F	; 47
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	80 91 7a 00 	lds	r24, 0x007A
    275a:	28 2f       	mov	r18, r24
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	8a 81       	ldd	r24, Y+2	; 0x02
    2760:	9b 81       	ldd	r25, Y+3	; 0x03
    2762:	fc 01       	movw	r30, r24
    2764:	e2 0f       	add	r30, r18
    2766:	f3 1f       	adc	r31, r19
    2768:	80 81       	ld	r24, Z
    276a:	8c 93       	st	X, r24
    276c:	05 c0       	rjmp	.+10     	; 0x2778 <SPI_u8BufferTransceiveAsynch+0xb4>
		}
		else
			Local_u8ErrorState = BUSY_FUNC;
    276e:	83 e0       	ldi	r24, 0x03	; 3
    2770:	89 83       	std	Y+1, r24	; 0x01
    2772:	02 c0       	rjmp	.+4      	; 0x2778 <SPI_u8BufferTransceiveAsynch+0xb4>
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    2774:	82 e0       	ldi	r24, 0x02	; 2
    2776:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2778:	89 81       	ldd	r24, Y+1	; 0x01
}
    277a:	28 96       	adiw	r28, 0x08	; 8
    277c:	0f b6       	in	r0, 0x3f	; 63
    277e:	f8 94       	cli
    2780:	de bf       	out	0x3e, r29	; 62
    2782:	0f be       	out	0x3f, r0	; 63
    2784:	cd bf       	out	0x3d, r28	; 61
    2786:	cf 91       	pop	r28
    2788:	df 91       	pop	r29
    278a:	08 95       	ret

0000278c <__vector_12>:
void __vector_12 (void)	__attribute__((signal));
void __vector_12 (void)
{
    278c:	1f 92       	push	r1
    278e:	0f 92       	push	r0
    2790:	0f b6       	in	r0, 0x3f	; 63
    2792:	0f 92       	push	r0
    2794:	11 24       	eor	r1, r1
    2796:	2f 93       	push	r18
    2798:	3f 93       	push	r19
    279a:	4f 93       	push	r20
    279c:	5f 93       	push	r21
    279e:	6f 93       	push	r22
    27a0:	7f 93       	push	r23
    27a2:	8f 93       	push	r24
    27a4:	9f 93       	push	r25
    27a6:	af 93       	push	r26
    27a8:	bf 93       	push	r27
    27aa:	ef 93       	push	r30
    27ac:	ff 93       	push	r31
    27ae:	df 93       	push	r29
    27b0:	cf 93       	push	r28
    27b2:	cd b7       	in	r28, 0x3d	; 61
    27b4:	de b7       	in	r29, 0x3e	; 62

	if(SPI_SINGLE_CHAR==SPI_u8Direction)
    27b6:	80 91 7f 00 	lds	r24, 0x007F
    27ba:	88 23       	and	r24, r24
    27bc:	81 f4       	brne	.+32     	; 0x27de <__vector_12+0x52>
	{
		*SPI_u8RecvData = SPDR;
    27be:	a0 91 78 00 	lds	r26, 0x0078
    27c2:	b0 91 79 00 	lds	r27, 0x0079
    27c6:	ef e2       	ldi	r30, 0x2F	; 47
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	80 81       	ld	r24, Z
    27cc:	8c 93       	st	X, r24
		SPI_CallBackFunc();
    27ce:	e0 91 74 00 	lds	r30, 0x0074
    27d2:	f0 91 75 00 	lds	r31, 0x0075
    27d6:	09 95       	icall
		SPI_u8BusyFlag = IDLE;
    27d8:	10 92 73 00 	sts	0x0073, r1
    27dc:	3c c0       	rjmp	.+120    	; 0x2856 <__vector_12+0xca>
	}
	else if(SPI_MULTI_CHAR==SPI_u8Direction)
    27de:	80 91 7f 00 	lds	r24, 0x007F
    27e2:	81 30       	cpi	r24, 0x01	; 1
    27e4:	c1 f5       	brne	.+112    	; 0x2856 <__vector_12+0xca>
	{
		SPI_u8RecvDataBuff[SPI_u8Index] = SPDR;
    27e6:	20 91 7d 00 	lds	r18, 0x007D
    27ea:	30 91 7e 00 	lds	r19, 0x007E
    27ee:	80 91 7a 00 	lds	r24, 0x007A
    27f2:	88 2f       	mov	r24, r24
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	d9 01       	movw	r26, r18
    27f8:	a8 0f       	add	r26, r24
    27fa:	b9 1f       	adc	r27, r25
    27fc:	ef e2       	ldi	r30, 0x2F	; 47
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	80 81       	ld	r24, Z
    2802:	8c 93       	st	X, r24
		SPI_u8Index++;
    2804:	80 91 7a 00 	lds	r24, 0x007A
    2808:	8f 5f       	subi	r24, 0xFF	; 255
    280a:	80 93 7a 00 	sts	0x007A, r24
		if(SPI_u8Index==SPI_u8BufferSize)
    280e:	90 91 7a 00 	lds	r25, 0x007A
    2812:	80 91 80 00 	lds	r24, 0x0080
    2816:	98 17       	cp	r25, r24
    2818:	79 f4       	brne	.+30     	; 0x2838 <__vector_12+0xac>
		{
			SPI_u8BusyFlag = IDLE;
    281a:	10 92 73 00 	sts	0x0073, r1
			CLR_BIT(SPCR,SPCR_SPIE);
    281e:	ad e2       	ldi	r26, 0x2D	; 45
    2820:	b0 e0       	ldi	r27, 0x00	; 0
    2822:	ed e2       	ldi	r30, 0x2D	; 45
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	80 81       	ld	r24, Z
    2828:	8f 77       	andi	r24, 0x7F	; 127
    282a:	8c 93       	st	X, r24
			SPI_CallBackBuffFunc();
    282c:	e0 91 76 00 	lds	r30, 0x0076
    2830:	f0 91 77 00 	lds	r31, 0x0077
    2834:	09 95       	icall
    2836:	0f c0       	rjmp	.+30     	; 0x2856 <__vector_12+0xca>
		}
		else
		{
			SPDR = SPI_u8SendDataBuff[SPI_u8Index];
    2838:	af e2       	ldi	r26, 0x2F	; 47
    283a:	b0 e0       	ldi	r27, 0x00	; 0
    283c:	20 91 7b 00 	lds	r18, 0x007B
    2840:	30 91 7c 00 	lds	r19, 0x007C
    2844:	80 91 7a 00 	lds	r24, 0x007A
    2848:	88 2f       	mov	r24, r24
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	f9 01       	movw	r30, r18
    284e:	e8 0f       	add	r30, r24
    2850:	f9 1f       	adc	r31, r25
    2852:	80 81       	ld	r24, Z
    2854:	8c 93       	st	X, r24
		}
	}



}
    2856:	cf 91       	pop	r28
    2858:	df 91       	pop	r29
    285a:	ff 91       	pop	r31
    285c:	ef 91       	pop	r30
    285e:	bf 91       	pop	r27
    2860:	af 91       	pop	r26
    2862:	9f 91       	pop	r25
    2864:	8f 91       	pop	r24
    2866:	7f 91       	pop	r23
    2868:	6f 91       	pop	r22
    286a:	5f 91       	pop	r21
    286c:	4f 91       	pop	r20
    286e:	3f 91       	pop	r19
    2870:	2f 91       	pop	r18
    2872:	0f 90       	pop	r0
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	0f 90       	pop	r0
    2878:	1f 90       	pop	r1
    287a:	18 95       	reti

0000287c <main>:
//#include "../HAL/CLCD_interface.h"
//#include "../HAL/EEPROM_interface.h"
void NotiFunc();
u8 x;
void main()
{
    287c:	df 93       	push	r29
    287e:	cf 93       	push	r28
    2880:	cd b7       	in	r28, 0x3d	; 61
    2882:	de b7       	in	r29, 0x3e	; 62
    2884:	6f 97       	sbiw	r28, 0x1f	; 31
    2886:	0f b6       	in	r0, 0x3f	; 63
    2888:	f8 94       	cli
    288a:	de bf       	out	0x3e, r29	; 62
    288c:	0f be       	out	0x3f, r0	; 63
    288e:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
    2890:	0e 94 56 11 	call	0x22ac	; 0x22ac <PORT_voidInit>
	CLCD_voidInit();
    2894:	0e 94 26 09 	call	0x124c	; 0x124c <CLCD_voidInit>
	GINT_voidEnable();
    2898:	0e 94 3a 11 	call	0x2274	; 0x2274 <GINT_voidEnable>
	SPI_voidMasterInit();
    289c:	0e 94 78 11 	call	0x22f0	; 0x22f0 <SPI_voidMasterInit>
	EEPROM_u8SendMemByte(3,0x04);
	EEPROM_u8SendMemByte(2,0x05);
	EEPROM_u8SendMemByte(1,0x06);
	*/

	u8 DataArr[10]= {1,2,3,4,5,6,7,8,9,10};
    28a0:	ce 01       	movw	r24, r28
    28a2:	40 96       	adiw	r24, 0x10	; 16
    28a4:	9c 8f       	std	Y+28, r25	; 0x1c
    28a6:	8b 8f       	std	Y+27, r24	; 0x1b
    28a8:	e8 e6       	ldi	r30, 0x68	; 104
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	fe 8f       	std	Y+30, r31	; 0x1e
    28ae:	ed 8f       	std	Y+29, r30	; 0x1d
    28b0:	fa e0       	ldi	r31, 0x0A	; 10
    28b2:	ff 8f       	std	Y+31, r31	; 0x1f
    28b4:	ed 8d       	ldd	r30, Y+29	; 0x1d
    28b6:	fe 8d       	ldd	r31, Y+30	; 0x1e
    28b8:	00 80       	ld	r0, Z
    28ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28be:	01 96       	adiw	r24, 0x01	; 1
    28c0:	9e 8f       	std	Y+30, r25	; 0x1e
    28c2:	8d 8f       	std	Y+29, r24	; 0x1d
    28c4:	eb 8d       	ldd	r30, Y+27	; 0x1b
    28c6:	fc 8d       	ldd	r31, Y+28	; 0x1c
    28c8:	00 82       	st	Z, r0
    28ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28ce:	01 96       	adiw	r24, 0x01	; 1
    28d0:	9c 8f       	std	Y+28, r25	; 0x1c
    28d2:	8b 8f       	std	Y+27, r24	; 0x1b
    28d4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    28d6:	91 50       	subi	r25, 0x01	; 1
    28d8:	9f 8f       	std	Y+31, r25	; 0x1f
    28da:	ef 8d       	ldd	r30, Y+31	; 0x1f
    28dc:	ee 23       	and	r30, r30
    28de:	51 f7       	brne	.-44     	; 0x28b4 <main+0x38>

	u8 data = 0,i=0;
    28e0:	1a 8e       	std	Y+26, r1	; 0x1a
    28e2:	1f 86       	std	Y+15, r1	; 0x0f
	EEPROM_u8ReadMemByte(&data,0);
    28e4:	ce 01       	movw	r24, r28
    28e6:	4a 96       	adiw	r24, 0x1a	; 26
    28e8:	60 e0       	ldi	r22, 0x00	; 0
    28ea:	70 e0       	ldi	r23, 0x00	; 0
    28ec:	0e 94 09 11 	call	0x2212	; 0x2212 <EEPROM_u8ReadMemByte>
	if(data==0xff)
    28f0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    28f2:	8f 3f       	cpi	r24, 0xFF	; 255
    28f4:	39 f4       	brne	.+14     	; 0x2904 <main+0x88>
	{
		EEPROM_u8SendMem16Byte(DataArr,0x00,10);
    28f6:	ce 01       	movw	r24, r28
    28f8:	40 96       	adiw	r24, 0x10	; 16
    28fa:	60 e0       	ldi	r22, 0x00	; 0
    28fc:	70 e0       	ldi	r23, 0x00	; 0
    28fe:	4a e0       	ldi	r20, 0x0A	; 10
    2900:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <EEPROM_u8SendMem16Byte>
	}
	while(1){

		for(i=0;i<9;i++)
    2904:	1f 86       	std	Y+15, r1	; 0x0f
    2906:	86 c0       	rjmp	.+268    	; 0x2a14 <main+0x198>
		{
			CLCD_voidGoToXY(0,0);
    2908:	80 e0       	ldi	r24, 0x00	; 0
    290a:	60 e0       	ldi	r22, 0x00	; 0
    290c:	0e 94 42 0b 	call	0x1684	; 0x1684 <CLCD_voidGoToXY>
			EEPROM_u8ReadMemByte(&data,i);
    2910:	8f 85       	ldd	r24, Y+15	; 0x0f
    2912:	28 2f       	mov	r18, r24
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	ce 01       	movw	r24, r28
    2918:	4a 96       	adiw	r24, 0x1a	; 26
    291a:	b9 01       	movw	r22, r18
    291c:	0e 94 09 11 	call	0x2212	; 0x2212 <EEPROM_u8ReadMemByte>
			CLCD_voidWriteNumber(data);
    2920:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2922:	88 2f       	mov	r24, r24
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	0e 94 a8 0b 	call	0x1750	; 0x1750 <CLCD_voidWriteNumber>
    292a:	80 e0       	ldi	r24, 0x00	; 0
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	a8 ec       	ldi	r26, 0xC8	; 200
    2930:	b2 e4       	ldi	r27, 0x42	; 66
    2932:	8b 87       	std	Y+11, r24	; 0x0b
    2934:	9c 87       	std	Y+12, r25	; 0x0c
    2936:	ad 87       	std	Y+13, r26	; 0x0d
    2938:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    293a:	6b 85       	ldd	r22, Y+11	; 0x0b
    293c:	7c 85       	ldd	r23, Y+12	; 0x0c
    293e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2940:	9e 85       	ldd	r25, Y+14	; 0x0e
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	4a ef       	ldi	r20, 0xFA	; 250
    2948:	54 e4       	ldi	r21, 0x44	; 68
    294a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    294e:	dc 01       	movw	r26, r24
    2950:	cb 01       	movw	r24, r22
    2952:	8f 83       	std	Y+7, r24	; 0x07
    2954:	98 87       	std	Y+8, r25	; 0x08
    2956:	a9 87       	std	Y+9, r26	; 0x09
    2958:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    295a:	6f 81       	ldd	r22, Y+7	; 0x07
    295c:	78 85       	ldd	r23, Y+8	; 0x08
    295e:	89 85       	ldd	r24, Y+9	; 0x09
    2960:	9a 85       	ldd	r25, Y+10	; 0x0a
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	40 e8       	ldi	r20, 0x80	; 128
    2968:	5f e3       	ldi	r21, 0x3F	; 63
    296a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    296e:	88 23       	and	r24, r24
    2970:	2c f4       	brge	.+10     	; 0x297c <main+0x100>
		__ticks = 1;
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	9e 83       	std	Y+6, r25	; 0x06
    2978:	8d 83       	std	Y+5, r24	; 0x05
    297a:	3f c0       	rjmp	.+126    	; 0x29fa <main+0x17e>
	else if (__tmp > 65535)
    297c:	6f 81       	ldd	r22, Y+7	; 0x07
    297e:	78 85       	ldd	r23, Y+8	; 0x08
    2980:	89 85       	ldd	r24, Y+9	; 0x09
    2982:	9a 85       	ldd	r25, Y+10	; 0x0a
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	3f ef       	ldi	r19, 0xFF	; 255
    2988:	4f e7       	ldi	r20, 0x7F	; 127
    298a:	57 e4       	ldi	r21, 0x47	; 71
    298c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2990:	18 16       	cp	r1, r24
    2992:	4c f5       	brge	.+82     	; 0x29e6 <main+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2994:	6b 85       	ldd	r22, Y+11	; 0x0b
    2996:	7c 85       	ldd	r23, Y+12	; 0x0c
    2998:	8d 85       	ldd	r24, Y+13	; 0x0d
    299a:	9e 85       	ldd	r25, Y+14	; 0x0e
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	40 e2       	ldi	r20, 0x20	; 32
    29a2:	51 e4       	ldi	r21, 0x41	; 65
    29a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	bc 01       	movw	r22, r24
    29ae:	cd 01       	movw	r24, r26
    29b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	9e 83       	std	Y+6, r25	; 0x06
    29ba:	8d 83       	std	Y+5, r24	; 0x05
    29bc:	0f c0       	rjmp	.+30     	; 0x29dc <main+0x160>
    29be:	88 ec       	ldi	r24, 0xC8	; 200
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	9c 83       	std	Y+4, r25	; 0x04
    29c4:	8b 83       	std	Y+3, r24	; 0x03
    29c6:	8b 81       	ldd	r24, Y+3	; 0x03
    29c8:	9c 81       	ldd	r25, Y+4	; 0x04
    29ca:	01 97       	sbiw	r24, 0x01	; 1
    29cc:	f1 f7       	brne	.-4      	; 0x29ca <main+0x14e>
    29ce:	9c 83       	std	Y+4, r25	; 0x04
    29d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d2:	8d 81       	ldd	r24, Y+5	; 0x05
    29d4:	9e 81       	ldd	r25, Y+6	; 0x06
    29d6:	01 97       	sbiw	r24, 0x01	; 1
    29d8:	9e 83       	std	Y+6, r25	; 0x06
    29da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29dc:	8d 81       	ldd	r24, Y+5	; 0x05
    29de:	9e 81       	ldd	r25, Y+6	; 0x06
    29e0:	00 97       	sbiw	r24, 0x00	; 0
    29e2:	69 f7       	brne	.-38     	; 0x29be <main+0x142>
    29e4:	14 c0       	rjmp	.+40     	; 0x2a0e <main+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e6:	6f 81       	ldd	r22, Y+7	; 0x07
    29e8:	78 85       	ldd	r23, Y+8	; 0x08
    29ea:	89 85       	ldd	r24, Y+9	; 0x09
    29ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f2:	dc 01       	movw	r26, r24
    29f4:	cb 01       	movw	r24, r22
    29f6:	9e 83       	std	Y+6, r25	; 0x06
    29f8:	8d 83       	std	Y+5, r24	; 0x05
    29fa:	8d 81       	ldd	r24, Y+5	; 0x05
    29fc:	9e 81       	ldd	r25, Y+6	; 0x06
    29fe:	9a 83       	std	Y+2, r25	; 0x02
    2a00:	89 83       	std	Y+1, r24	; 0x01
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
    2a04:	9a 81       	ldd	r25, Y+2	; 0x02
    2a06:	01 97       	sbiw	r24, 0x01	; 1
    2a08:	f1 f7       	brne	.-4      	; 0x2a06 <main+0x18a>
    2a0a:	9a 83       	std	Y+2, r25	; 0x02
    2a0c:	89 83       	std	Y+1, r24	; 0x01
	{
		EEPROM_u8SendMem16Byte(DataArr,0x00,10);
	}
	while(1){

		for(i=0;i<9;i++)
    2a0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a10:	8f 5f       	subi	r24, 0xFF	; 255
    2a12:	8f 87       	std	Y+15, r24	; 0x0f
    2a14:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a16:	89 30       	cpi	r24, 0x09	; 9
    2a18:	08 f4       	brcc	.+2      	; 0x2a1c <main+0x1a0>
    2a1a:	76 cf       	rjmp	.-276    	; 0x2908 <main+0x8c>
    2a1c:	73 cf       	rjmp	.-282    	; 0x2904 <main+0x88>

00002a1e <NotiFunc>:

	}
	while(1);
}
void NotiFunc()
{
    2a1e:	df 93       	push	r29
    2a20:	cf 93       	push	r28
    2a22:	cd b7       	in	r28, 0x3d	; 61
    2a24:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_PORTA,DIO_PIN2,DIO_PIN_HIGH);
    2a26:	80 e0       	ldi	r24, 0x00	; 0
    2a28:	62 e0       	ldi	r22, 0x02	; 2
    2a2a:	41 e0       	ldi	r20, 0x01	; 1
    2a2c:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_u8SetPinValue>
}
    2a30:	cf 91       	pop	r28
    2a32:	df 91       	pop	r29
    2a34:	08 95       	ret

00002a36 <__udivmodhi4>:
    2a36:	aa 1b       	sub	r26, r26
    2a38:	bb 1b       	sub	r27, r27
    2a3a:	51 e1       	ldi	r21, 0x11	; 17
    2a3c:	07 c0       	rjmp	.+14     	; 0x2a4c <__udivmodhi4_ep>

00002a3e <__udivmodhi4_loop>:
    2a3e:	aa 1f       	adc	r26, r26
    2a40:	bb 1f       	adc	r27, r27
    2a42:	a6 17       	cp	r26, r22
    2a44:	b7 07       	cpc	r27, r23
    2a46:	10 f0       	brcs	.+4      	; 0x2a4c <__udivmodhi4_ep>
    2a48:	a6 1b       	sub	r26, r22
    2a4a:	b7 0b       	sbc	r27, r23

00002a4c <__udivmodhi4_ep>:
    2a4c:	88 1f       	adc	r24, r24
    2a4e:	99 1f       	adc	r25, r25
    2a50:	5a 95       	dec	r21
    2a52:	a9 f7       	brne	.-22     	; 0x2a3e <__udivmodhi4_loop>
    2a54:	80 95       	com	r24
    2a56:	90 95       	com	r25
    2a58:	bc 01       	movw	r22, r24
    2a5a:	cd 01       	movw	r24, r26
    2a5c:	08 95       	ret

00002a5e <__prologue_saves__>:
    2a5e:	2f 92       	push	r2
    2a60:	3f 92       	push	r3
    2a62:	4f 92       	push	r4
    2a64:	5f 92       	push	r5
    2a66:	6f 92       	push	r6
    2a68:	7f 92       	push	r7
    2a6a:	8f 92       	push	r8
    2a6c:	9f 92       	push	r9
    2a6e:	af 92       	push	r10
    2a70:	bf 92       	push	r11
    2a72:	cf 92       	push	r12
    2a74:	df 92       	push	r13
    2a76:	ef 92       	push	r14
    2a78:	ff 92       	push	r15
    2a7a:	0f 93       	push	r16
    2a7c:	1f 93       	push	r17
    2a7e:	cf 93       	push	r28
    2a80:	df 93       	push	r29
    2a82:	cd b7       	in	r28, 0x3d	; 61
    2a84:	de b7       	in	r29, 0x3e	; 62
    2a86:	ca 1b       	sub	r28, r26
    2a88:	db 0b       	sbc	r29, r27
    2a8a:	0f b6       	in	r0, 0x3f	; 63
    2a8c:	f8 94       	cli
    2a8e:	de bf       	out	0x3e, r29	; 62
    2a90:	0f be       	out	0x3f, r0	; 63
    2a92:	cd bf       	out	0x3d, r28	; 61
    2a94:	09 94       	ijmp

00002a96 <__epilogue_restores__>:
    2a96:	2a 88       	ldd	r2, Y+18	; 0x12
    2a98:	39 88       	ldd	r3, Y+17	; 0x11
    2a9a:	48 88       	ldd	r4, Y+16	; 0x10
    2a9c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a9e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2aa0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2aa2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2aa4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2aa6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2aa8:	b9 84       	ldd	r11, Y+9	; 0x09
    2aaa:	c8 84       	ldd	r12, Y+8	; 0x08
    2aac:	df 80       	ldd	r13, Y+7	; 0x07
    2aae:	ee 80       	ldd	r14, Y+6	; 0x06
    2ab0:	fd 80       	ldd	r15, Y+5	; 0x05
    2ab2:	0c 81       	ldd	r16, Y+4	; 0x04
    2ab4:	1b 81       	ldd	r17, Y+3	; 0x03
    2ab6:	aa 81       	ldd	r26, Y+2	; 0x02
    2ab8:	b9 81       	ldd	r27, Y+1	; 0x01
    2aba:	ce 0f       	add	r28, r30
    2abc:	d1 1d       	adc	r29, r1
    2abe:	0f b6       	in	r0, 0x3f	; 63
    2ac0:	f8 94       	cli
    2ac2:	de bf       	out	0x3e, r29	; 62
    2ac4:	0f be       	out	0x3f, r0	; 63
    2ac6:	cd bf       	out	0x3d, r28	; 61
    2ac8:	ed 01       	movw	r28, r26
    2aca:	08 95       	ret

00002acc <_exit>:
    2acc:	f8 94       	cli

00002ace <__stop_program>:
    2ace:	ff cf       	rjmp	.-2      	; 0x2ace <__stop_program>
