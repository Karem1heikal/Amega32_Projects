
ADC5_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004dea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000136  00800060  00004dea  00004e7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  00800196  00800196  00004fb4  2**0
                  ALLOC
  3 .stab         00004db8  00000000  00000000  00004fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000019ca  00000000  00000000  00009d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000b736  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000b8d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000bac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000ded3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000f259  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00010430  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  000105f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  000108e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011254  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 15 15 	jmp	0x2a2a	; 0x2a2a <__vector_1>
       8:	0c 94 42 15 	jmp	0x2a84	; 0x2a84 <__vector_2>
       c:	0c 94 6f 15 	jmp	0x2ade	; 0x2ade <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 ec 08 	jmp	0x11d8	; 0x11d8 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ee       	ldi	r30, 0xEA	; 234
      68:	fd e4       	ldi	r31, 0x4D	; 77
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3c       	cpi	r26, 0xC1	; 193
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 85 21 	call	0x430a	; 0x430a <main>
      8a:	0c 94 f3 26 	jmp	0x4de6	; 0x4de6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bc 26 	jmp	0x4d78	; 0x4d78 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d8 26 	jmp	0x4db0	; 0x4db0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c8 26 	jmp	0x4d90	; 0x4d90 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e4 26 	jmp	0x4dc8	; 0x4dc8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c8 26 	jmp	0x4d90	; 0x4d90 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e4 26 	jmp	0x4dc8	; 0x4dc8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bc 26 	jmp	0x4d78	; 0x4d78 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d8 26 	jmp	0x4db0	; 0x4db0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c4 26 	jmp	0x4d88	; 0x4d88 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e0 26 	jmp	0x4dc0	; 0x4dc0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c8 26 	jmp	0x4d90	; 0x4d90 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e4 26 	jmp	0x4dc8	; 0x4dc8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c8 26 	jmp	0x4d90	; 0x4d90 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e4 26 	jmp	0x4dc8	; 0x4dc8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c8 26 	jmp	0x4d90	; 0x4d90 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e4 26 	jmp	0x4dc8	; 0x4dc8 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 cc 26 	jmp	0x4d98	; 0x4d98 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 e8 26 	jmp	0x4dd0	; 0x4dd0 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 c4 26 	jmp	0x4d88	; 0x4d88 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 e0 26 	jmp	0x4dc0	; 0x4dc0 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_voidInit>:
static u8 * ADC_pu8ChannelNum = NULL;
static u8 ADC_u8ChannelSize ;
static void (*Global_vChainCallBackFunc)() = NULL;
static u16 * ADC_pu16ChannelReading = NULL;
void ADC_voidInit()
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	ADMUX &= MASK_AREF;
     e36:	a7 e2       	ldi	r26, 0x27	; 39
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e7 e2       	ldi	r30, 0x27	; 39
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	8f 73       	andi	r24, 0x3F	; 63
     e42:	8c 93       	st	X, r24
	ADMUX |= ADC_REF_VOLT<<ADMUX_REFS0;
     e44:	a7 e2       	ldi	r26, 0x27	; 39
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e7 e2       	ldi	r30, 0x27	; 39
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	80 64       	ori	r24, 0x40	; 64
     e50:	8c 93       	st	X, r24
#if ADC_ADJUST_BIT == LEFT_ADJUST
	SET_BIT(ADMUX,ADMUX_ADLAR);
     e52:	a7 e2       	ldi	r26, 0x27	; 39
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e7 e2       	ldi	r30, 0x27	; 39
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	80 62       	ori	r24, 0x20	; 32
     e5e:	8c 93       	st	X, r24
#elif ADC_ADJUST_BIT == RIGHT_ADJUST
	CLR_BIT(ADMUX,ADMUX_ADLAR);
#else
#error "Wrong in choosing configuration of ADC_ADJUST_BIT "
#endif
	ADCSRA &= MASK_CLK_RATE;
     e60:	a6 e2       	ldi	r26, 0x26	; 38
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e6 e2       	ldi	r30, 0x26	; 38
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	88 7f       	andi	r24, 0xF8	; 248
     e6c:	8c 93       	st	X, r24
	ADCSRA |= ADC_CLK_RATE<<ADCSRA_ADPS0;
     e6e:	a6 e2       	ldi	r26, 0x26	; 38
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e6 e2       	ldi	r30, 0x26	; 38
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	86 60       	ori	r24, 0x06	; 6
     e7a:	8c 93       	st	X, r24
#if	ADC_AUTO_TRIGGER_MODE == ENABLE

#if ADC_INTERRUPT_EN == ENABLE
	SET_BIT(ADCSRA,ADCSRA_ADIE);
     e7c:	a6 e2       	ldi	r26, 0x26	; 38
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e6 e2       	ldi	r30, 0x26	; 38
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	88 60       	ori	r24, 0x08	; 8
     e88:	8c 93       	st	X, r24
#elif ADC_INTERRUPT_EN == DISABLE
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
#endif
	SET_BIT(ADCSRA,ADCSRA_ADATE);
     e8a:	a6 e2       	ldi	r26, 0x26	; 38
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e6 e2       	ldi	r30, 0x26	; 38
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	80 62       	ori	r24, 0x20	; 32
     e96:	8c 93       	st	X, r24

	SFIOR &= MASK_AUTO_TRIGGER;
     e98:	a0 e5       	ldi	r26, 0x50	; 80
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e0 e5       	ldi	r30, 0x50	; 80
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	91 81       	ldd	r25, Z+1	; 0x01
     ea4:	8f 71       	andi	r24, 0x1F	; 31
     ea6:	90 70       	andi	r25, 0x00	; 0
     ea8:	11 96       	adiw	r26, 0x01	; 1
     eaa:	9c 93       	st	X, r25
     eac:	8e 93       	st	-X, r24
	SFIOR |= ADC_AUTO_TRIGGER_SRC << SFIOR_ADTS0;
     eae:	a0 e5       	ldi	r26, 0x50	; 80
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e0 e5       	ldi	r30, 0x50	; 80
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	91 81       	ldd	r25, Z+1	; 0x01
     eba:	80 64       	ori	r24, 0x40	; 64
     ebc:	11 96       	adiw	r26, 0x01	; 1
     ebe:	9c 93       	st	X, r25
     ec0:	8e 93       	st	-X, r24

	SET_BIT(ADCSRA,ADCSRA_ADSC);
     ec2:	a6 e2       	ldi	r26, 0x26	; 38
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e6 e2       	ldi	r30, 0x26	; 38
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	80 64       	ori	r24, 0x40	; 64
     ece:	8c 93       	st	X, r24
#elif ADC_AUTO_TRIGGER_MODE == DISABLE
	CLR_BIT(ADCSRA,ADCSRA_ADATE);
#else
#error "Wrong in choosing configuration of ADC_AUTO_TRIGGER_MODE "
#endif
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     ed0:	a6 e2       	ldi	r26, 0x26	; 38
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e6 e2       	ldi	r30, 0x26	; 38
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	80 68       	ori	r24, 0x80	; 128
     edc:	8c 93       	st	X, r24
}
     ede:	cf 91       	pop	r28
     ee0:	df 91       	pop	r29
     ee2:	08 95       	ret

00000ee4 <ADC_u8StartSingleConvPoll>:
// Synch applay Busy Flag For reenterrant
u8 ADC_u8StartSingleConvPoll(u8 Copy_u8Channel,u16 *Copy_pu16Read)
{
     ee4:	df 93       	push	r29
     ee6:	cf 93       	push	r28
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	28 97       	sbiw	r28, 0x08	; 8
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	de bf       	out	0x3e, r29	; 62
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	cd bf       	out	0x3d, r28	; 61
     ef8:	8e 83       	std	Y+6, r24	; 0x06
     efa:	78 87       	std	Y+8, r23	; 0x08
     efc:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = OK;
     efe:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Counter = 0;
     f00:	19 82       	std	Y+1, r1	; 0x01
     f02:	1a 82       	std	Y+2, r1	; 0x02
     f04:	1b 82       	std	Y+3, r1	; 0x03
     f06:	1c 82       	std	Y+4, r1	; 0x04
	if(Global_u8BusyFlag==IDLE)
     f08:	80 91 96 01 	lds	r24, 0x0196
     f0c:	88 23       	and	r24, r24
     f0e:	09 f0       	breq	.+2      	; 0xf12 <ADC_u8StartSingleConvPoll+0x2e>
     f10:	6e c0       	rjmp	.+220    	; 0xfee <ADC_u8StartSingleConvPoll+0x10a>
	{
		Global_u8BusyFlag = BUSY;
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	80 93 96 01 	sts	0x0196, r24
		if(Copy_pu16Read != NULL)
     f18:	8f 81       	ldd	r24, Y+7	; 0x07
     f1a:	98 85       	ldd	r25, Y+8	; 0x08
     f1c:	00 97       	sbiw	r24, 0x00	; 0
     f1e:	09 f4       	brne	.+2      	; 0xf22 <ADC_u8StartSingleConvPoll+0x3e>
     f20:	63 c0       	rjmp	.+198    	; 0xfe8 <ADC_u8StartSingleConvPoll+0x104>
		{
				if(Copy_u8Channel<=MAX_OPTION_CHANNEL)
     f22:	8e 81       	ldd	r24, Y+6	; 0x06
     f24:	80 32       	cpi	r24, 0x20	; 32
     f26:	08 f0       	brcs	.+2      	; 0xf2a <ADC_u8StartSingleConvPoll+0x46>
     f28:	5c c0       	rjmp	.+184    	; 0xfe2 <ADC_u8StartSingleConvPoll+0xfe>
				{
					ADMUX &= MASK_CHANNEL;
     f2a:	a7 e2       	ldi	r26, 0x27	; 39
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e7 e2       	ldi	r30, 0x27	; 39
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	80 7e       	andi	r24, 0xE0	; 224
     f36:	8c 93       	st	X, r24
					ADMUX |= Copy_u8Channel<<ADMUX_MUX0;
     f38:	a7 e2       	ldi	r26, 0x27	; 39
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e7 e2       	ldi	r30, 0x27	; 39
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	90 81       	ld	r25, Z
     f42:	8e 81       	ldd	r24, Y+6	; 0x06
     f44:	89 2b       	or	r24, r25
     f46:	8c 93       	st	X, r24
					SET_BIT(ADCSRA,ADCSRA_ADSC);
     f48:	a6 e2       	ldi	r26, 0x26	; 38
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e6 e2       	ldi	r30, 0x26	; 38
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	80 64       	ori	r24, 0x40	; 64
     f54:	8c 93       	st	X, r24
     f56:	0b c0       	rjmp	.+22     	; 0xf6e <ADC_u8StartSingleConvPoll+0x8a>
					while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0)&&(Local_u32Counter<ADC_U32_TIMEOUT))
					{
						Local_u32Counter++;
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	9a 81       	ldd	r25, Y+2	; 0x02
     f5c:	ab 81       	ldd	r26, Y+3	; 0x03
     f5e:	bc 81       	ldd	r27, Y+4	; 0x04
     f60:	01 96       	adiw	r24, 0x01	; 1
     f62:	a1 1d       	adc	r26, r1
     f64:	b1 1d       	adc	r27, r1
     f66:	89 83       	std	Y+1, r24	; 0x01
     f68:	9a 83       	std	Y+2, r25	; 0x02
     f6a:	ab 83       	std	Y+3, r26	; 0x03
     f6c:	bc 83       	std	Y+4, r27	; 0x04
				if(Copy_u8Channel<=MAX_OPTION_CHANNEL)
				{
					ADMUX &= MASK_CHANNEL;
					ADMUX |= Copy_u8Channel<<ADMUX_MUX0;
					SET_BIT(ADCSRA,ADCSRA_ADSC);
					while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0)&&(Local_u32Counter<ADC_U32_TIMEOUT))
     f6e:	e6 e2       	ldi	r30, 0x26	; 38
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	82 95       	swap	r24
     f76:	8f 70       	andi	r24, 0x0F	; 15
     f78:	88 2f       	mov	r24, r24
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	81 70       	andi	r24, 0x01	; 1
     f7e:	90 70       	andi	r25, 0x00	; 0
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	61 f4       	brne	.+24     	; 0xf9c <ADC_u8StartSingleConvPoll+0xb8>
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	9a 81       	ldd	r25, Y+2	; 0x02
     f88:	ab 81       	ldd	r26, Y+3	; 0x03
     f8a:	bc 81       	ldd	r27, Y+4	; 0x04
     f8c:	80 35       	cpi	r24, 0x50	; 80
     f8e:	23 ec       	ldi	r18, 0xC3	; 195
     f90:	92 07       	cpc	r25, r18
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	a2 07       	cpc	r26, r18
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	b2 07       	cpc	r27, r18
     f9a:	f0 f2       	brcs	.-68     	; 0xf58 <ADC_u8StartSingleConvPoll+0x74>
					{
						Local_u32Counter++;
					}
					if(Local_u32Counter==ADC_U32_TIMEOUT)
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	9a 81       	ldd	r25, Y+2	; 0x02
     fa0:	ab 81       	ldd	r26, Y+3	; 0x03
     fa2:	bc 81       	ldd	r27, Y+4	; 0x04
     fa4:	80 35       	cpi	r24, 0x50	; 80
     fa6:	23 ec       	ldi	r18, 0xC3	; 195
     fa8:	92 07       	cpc	r25, r18
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	a2 07       	cpc	r26, r18
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	b2 07       	cpc	r27, r18
     fb2:	19 f4       	brne	.+6      	; 0xfba <ADC_u8StartSingleConvPoll+0xd6>
					{
						Local_u8ErrorState = NOTOK;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	8d 83       	std	Y+5, r24	; 0x05
     fb8:	1c c0       	rjmp	.+56     	; 0xff2 <ADC_u8StartSingleConvPoll+0x10e>
					}
					else{

						CLR_BIT(ADCSRA,ADCSRA_ADIF);
     fba:	a6 e2       	ldi	r26, 0x26	; 38
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e6 e2       	ldi	r30, 0x26	; 38
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	8f 7e       	andi	r24, 0xEF	; 239
     fc6:	8c 93       	st	X, r24
						if(ADC_ADJUST_BIT == LEFT_ADJUST)
							*Copy_pu16Read = ADC_REG>>8;
     fc8:	e4 e2       	ldi	r30, 0x24	; 36
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	91 81       	ldd	r25, Z+1	; 0x01
     fd0:	89 2f       	mov	r24, r25
     fd2:	99 27       	eor	r25, r25
     fd4:	ef 81       	ldd	r30, Y+7	; 0x07
     fd6:	f8 85       	ldd	r31, Y+8	; 0x08
     fd8:	91 83       	std	Z+1, r25	; 0x01
     fda:	80 83       	st	Z, r24
						else if(ADC_ADJUST_BIT == RIGHT_ADJUST)
							*Copy_pu16Read = ADC_REG;
						Global_u8BusyFlag = IDLE;
     fdc:	10 92 96 01 	sts	0x0196, r1
     fe0:	08 c0       	rjmp	.+16     	; 0xff2 <ADC_u8StartSingleConvPoll+0x10e>
					}
				}
				else
					Local_u8ErrorState = NOTOK;
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	8d 83       	std	Y+5, r24	; 0x05
     fe6:	05 c0       	rjmp	.+10     	; 0xff2 <ADC_u8StartSingleConvPoll+0x10e>
			}
			else
				Local_u8ErrorState = NULL_POINTER;
     fe8:	82 e0       	ldi	r24, 0x02	; 2
     fea:	8d 83       	std	Y+5, r24	; 0x05
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <ADC_u8StartSingleConvPoll+0x10e>
	}
	else
		Local_u8ErrorState = BUSY_FUNC;
     fee:	83 e0       	ldi	r24, 0x03	; 3
     ff0:	8d 83       	std	Y+5, r24	; 0x05
	return Local_u8ErrorState;
     ff2:	8d 81       	ldd	r24, Y+5	; 0x05
}
     ff4:	28 96       	adiw	r28, 0x08	; 8
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	de bf       	out	0x3e, r29	; 62
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	cd bf       	out	0x3d, r28	; 61
    1000:	cf 91       	pop	r28
    1002:	df 91       	pop	r29
    1004:	08 95       	ret

00001006 <ADC_u8StartSingleConvInt>:

u8 ADC_u8StartSingleConvInt(u8 Copy_u8Channel,u16 *Copy_pu16Read,void (*Notifiction)())
{
    1006:	df 93       	push	r29
    1008:	cf 93       	push	r28
    100a:	00 d0       	rcall	.+0      	; 0x100c <ADC_u8StartSingleConvInt+0x6>
    100c:	00 d0       	rcall	.+0      	; 0x100e <ADC_u8StartSingleConvInt+0x8>
    100e:	00 d0       	rcall	.+0      	; 0x1010 <ADC_u8StartSingleConvInt+0xa>
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
    1014:	8a 83       	std	Y+2, r24	; 0x02
    1016:	7c 83       	std	Y+4, r23	; 0x04
    1018:	6b 83       	std	Y+3, r22	; 0x03
    101a:	5e 83       	std	Y+6, r21	; 0x06
    101c:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = OK;
    101e:	19 82       	std	Y+1, r1	; 0x01
	if(Global_u8BusyFlag==IDLE)
    1020:	80 91 96 01 	lds	r24, 0x0196
    1024:	88 23       	and	r24, r24
    1026:	09 f0       	breq	.+2      	; 0x102a <ADC_u8StartSingleConvInt+0x24>
    1028:	40 c0       	rjmp	.+128    	; 0x10aa <ADC_u8StartSingleConvInt+0xa4>
	{
		Global_u8BusyFlag = BUSY;
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	80 93 96 01 	sts	0x0196, r24
		ADC_u8DirectionOfConvFunc = SINGLE_CONVERISION;
    1030:	10 92 9b 01 	sts	0x019B, r1
		if((Copy_pu16Read != NULL)||(Notifiction != NULL))
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	9c 81       	ldd	r25, Y+4	; 0x04
    1038:	00 97       	sbiw	r24, 0x00	; 0
    103a:	21 f4       	brne	.+8      	; 0x1044 <ADC_u8StartSingleConvInt+0x3e>
    103c:	8d 81       	ldd	r24, Y+5	; 0x05
    103e:	9e 81       	ldd	r25, Y+6	; 0x06
    1040:	00 97       	sbiw	r24, 0x00	; 0
    1042:	81 f1       	breq	.+96     	; 0x10a4 <ADC_u8StartSingleConvInt+0x9e>
		{

				if(Copy_u8Channel<=MAX_OPTION_CHANNEL)
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	80 32       	cpi	r24, 0x20	; 32
    1048:	50 f5       	brcc	.+84     	; 0x109e <ADC_u8StartSingleConvInt+0x98>
				{
					ADMUX &= MASK_CHANNEL;
    104a:	a7 e2       	ldi	r26, 0x27	; 39
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e7 e2       	ldi	r30, 0x27	; 39
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	80 7e       	andi	r24, 0xE0	; 224
    1056:	8c 93       	st	X, r24
					ADMUX |= Copy_u8Channel<<ADMUX_MUX0;
    1058:	a7 e2       	ldi	r26, 0x27	; 39
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e7 e2       	ldi	r30, 0x27	; 39
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	90 81       	ld	r25, Z
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	89 2b       	or	r24, r25
    1066:	8c 93       	st	X, r24
					Global_vCallBackFunc = Notifiction;
    1068:	8d 81       	ldd	r24, Y+5	; 0x05
    106a:	9e 81       	ldd	r25, Y+6	; 0x06
    106c:	90 93 98 01 	sts	0x0198, r25
    1070:	80 93 97 01 	sts	0x0197, r24
					Global_pu8Read = Copy_pu16Read;
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	9c 81       	ldd	r25, Y+4	; 0x04
    1078:	90 93 9a 01 	sts	0x019A, r25
    107c:	80 93 99 01 	sts	0x0199, r24
					SET_BIT(ADCSRA,ADCSRA_ADSC);
    1080:	a6 e2       	ldi	r26, 0x26	; 38
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e6 e2       	ldi	r30, 0x26	; 38
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	80 64       	ori	r24, 0x40	; 64
    108c:	8c 93       	st	X, r24
					SET_BIT(ADCSRA,ADCSRA_ADIE);
    108e:	a6 e2       	ldi	r26, 0x26	; 38
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e6 e2       	ldi	r30, 0x26	; 38
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	88 60       	ori	r24, 0x08	; 8
    109a:	8c 93       	st	X, r24
    109c:	08 c0       	rjmp	.+16     	; 0x10ae <ADC_u8StartSingleConvInt+0xa8>
				}
				else
					Local_u8ErrorState = NOTOK;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	89 83       	std	Y+1, r24	; 0x01
    10a2:	05 c0       	rjmp	.+10     	; 0x10ae <ADC_u8StartSingleConvInt+0xa8>
		}
		else
			Local_u8ErrorState = NULL_POINTER;
    10a4:	82 e0       	ldi	r24, 0x02	; 2
    10a6:	89 83       	std	Y+1, r24	; 0x01
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <ADC_u8StartSingleConvInt+0xa8>
	}
	else
		Local_u8ErrorState = BUSY_FUNC;
    10aa:	83 e0       	ldi	r24, 0x03	; 3
    10ac:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    10b0:	26 96       	adiw	r28, 0x06	; 6
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	f8 94       	cli
    10b6:	de bf       	out	0x3e, r29	; 62
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	cd bf       	out	0x3d, r28	; 61
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	08 95       	ret

000010c2 <ADC_u8StartChainConvAsynch>:
u8 ADC_u8StartChainConvAsynch(ADC_Chain *Copy_Chain)
{
    10c2:	df 93       	push	r29
    10c4:	cf 93       	push	r28
    10c6:	00 d0       	rcall	.+0      	; 0x10c8 <ADC_u8StartChainConvAsynch+0x6>
    10c8:	0f 92       	push	r0
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
    10ce:	9b 83       	std	Y+3, r25	; 0x03
    10d0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    10d2:	19 82       	std	Y+1, r1	; 0x01
	if(Global_u8BusyFlag==IDLE)
    10d4:	80 91 96 01 	lds	r24, 0x0196
    10d8:	88 23       	and	r24, r24
    10da:	09 f0       	breq	.+2      	; 0x10de <ADC_u8StartChainConvAsynch+0x1c>
    10dc:	74 c0       	rjmp	.+232    	; 0x11c6 <ADC_u8StartChainConvAsynch+0x104>
	{
		Global_u8BusyFlag = BUSY;
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	80 93 96 01 	sts	0x0196, r24
		ADC_u8DirectionOfConvFunc = CHAIN_CONVERISION;
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	80 93 9b 01 	sts	0x019B, r24
		if((Copy_Chain->ChainId != NULL)||(Copy_Chain->Notifction != NULL)||(Copy_Chain->Result != NULL))
    10ea:	ea 81       	ldd	r30, Y+2	; 0x02
    10ec:	fb 81       	ldd	r31, Y+3	; 0x03
    10ee:	80 81       	ld	r24, Z
    10f0:	91 81       	ldd	r25, Z+1	; 0x01
    10f2:	00 97       	sbiw	r24, 0x00	; 0
    10f4:	69 f4       	brne	.+26     	; 0x1110 <ADC_u8StartChainConvAsynch+0x4e>
    10f6:	ea 81       	ldd	r30, Y+2	; 0x02
    10f8:	fb 81       	ldd	r31, Y+3	; 0x03
    10fa:	83 81       	ldd	r24, Z+3	; 0x03
    10fc:	94 81       	ldd	r25, Z+4	; 0x04
    10fe:	00 97       	sbiw	r24, 0x00	; 0
    1100:	39 f4       	brne	.+14     	; 0x1110 <ADC_u8StartChainConvAsynch+0x4e>
    1102:	ea 81       	ldd	r30, Y+2	; 0x02
    1104:	fb 81       	ldd	r31, Y+3	; 0x03
    1106:	85 81       	ldd	r24, Z+5	; 0x05
    1108:	96 81       	ldd	r25, Z+6	; 0x06
    110a:	00 97       	sbiw	r24, 0x00	; 0
    110c:	09 f4       	brne	.+2      	; 0x1110 <ADC_u8StartChainConvAsynch+0x4e>
    110e:	58 c0       	rjmp	.+176    	; 0x11c0 <ADC_u8StartChainConvAsynch+0xfe>
		{
			if(Copy_Chain->ChainId[ADC_u8ChainIndex]<=MAX_OPTION_CHANNEL)
    1110:	ea 81       	ldd	r30, Y+2	; 0x02
    1112:	fb 81       	ldd	r31, Y+3	; 0x03
    1114:	20 81       	ld	r18, Z
    1116:	31 81       	ldd	r19, Z+1	; 0x01
    1118:	80 91 9c 01 	lds	r24, 0x019C
    111c:	88 2f       	mov	r24, r24
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	f9 01       	movw	r30, r18
    1122:	e8 0f       	add	r30, r24
    1124:	f9 1f       	adc	r31, r25
    1126:	80 81       	ld	r24, Z
    1128:	80 32       	cpi	r24, 0x20	; 32
    112a:	08 f0       	brcs	.+2      	; 0x112e <ADC_u8StartChainConvAsynch+0x6c>
    112c:	46 c0       	rjmp	.+140    	; 0x11ba <ADC_u8StartChainConvAsynch+0xf8>
			{
				ADMUX &= MASK_CHANNEL;
    112e:	a7 e2       	ldi	r26, 0x27	; 39
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e7 e2       	ldi	r30, 0x27	; 39
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	80 7e       	andi	r24, 0xE0	; 224
    113a:	8c 93       	st	X, r24
				ADMUX |= Copy_Chain->ChainId[ADC_u8ChainIndex]<<ADMUX_MUX0;
    113c:	a7 e2       	ldi	r26, 0x27	; 39
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e7 e2       	ldi	r30, 0x27	; 39
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	40 81       	ld	r20, Z
    1146:	ea 81       	ldd	r30, Y+2	; 0x02
    1148:	fb 81       	ldd	r31, Y+3	; 0x03
    114a:	20 81       	ld	r18, Z
    114c:	31 81       	ldd	r19, Z+1	; 0x01
    114e:	80 91 9c 01 	lds	r24, 0x019C
    1152:	88 2f       	mov	r24, r24
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	f9 01       	movw	r30, r18
    1158:	e8 0f       	add	r30, r24
    115a:	f9 1f       	adc	r31, r25
    115c:	80 81       	ld	r24, Z
    115e:	84 2b       	or	r24, r20
    1160:	8c 93       	st	X, r24
				ADC_pu8ChannelNum = Copy_Chain->ChainId;
    1162:	ea 81       	ldd	r30, Y+2	; 0x02
    1164:	fb 81       	ldd	r31, Y+3	; 0x03
    1166:	80 81       	ld	r24, Z
    1168:	91 81       	ldd	r25, Z+1	; 0x01
    116a:	90 93 9e 01 	sts	0x019E, r25
    116e:	80 93 9d 01 	sts	0x019D, r24
				Global_vChainCallBackFunc = Copy_Chain->Notifction;
    1172:	ea 81       	ldd	r30, Y+2	; 0x02
    1174:	fb 81       	ldd	r31, Y+3	; 0x03
    1176:	83 81       	ldd	r24, Z+3	; 0x03
    1178:	94 81       	ldd	r25, Z+4	; 0x04
    117a:	90 93 a0 01 	sts	0x01A0, r25
    117e:	80 93 9f 01 	sts	0x019F, r24
				ADC_pu16ChannelReading = Copy_Chain->Result;
    1182:	ea 81       	ldd	r30, Y+2	; 0x02
    1184:	fb 81       	ldd	r31, Y+3	; 0x03
    1186:	85 81       	ldd	r24, Z+5	; 0x05
    1188:	96 81       	ldd	r25, Z+6	; 0x06
    118a:	90 93 a2 01 	sts	0x01A2, r25
    118e:	80 93 a1 01 	sts	0x01A1, r24
				ADC_u8ChannelSize = Copy_Chain->ChannelSize;
    1192:	ea 81       	ldd	r30, Y+2	; 0x02
    1194:	fb 81       	ldd	r31, Y+3	; 0x03
    1196:	82 81       	ldd	r24, Z+2	; 0x02
    1198:	80 93 a3 01 	sts	0x01A3, r24
				SET_BIT(ADCSRA,ADCSRA_ADSC);
    119c:	a6 e2       	ldi	r26, 0x26	; 38
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e6 e2       	ldi	r30, 0x26	; 38
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	80 64       	ori	r24, 0x40	; 64
    11a8:	8c 93       	st	X, r24
				SET_BIT(ADCSRA,ADCSRA_ADIE);
    11aa:	a6 e2       	ldi	r26, 0x26	; 38
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e6 e2       	ldi	r30, 0x26	; 38
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	88 60       	ori	r24, 0x08	; 8
    11b6:	8c 93       	st	X, r24
    11b8:	08 c0       	rjmp	.+16     	; 0x11ca <ADC_u8StartChainConvAsynch+0x108>
			}
			else
				Local_u8ErrorState = NOTOK;
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	89 83       	std	Y+1, r24	; 0x01
    11be:	05 c0       	rjmp	.+10     	; 0x11ca <ADC_u8StartChainConvAsynch+0x108>
		}
		else
			Local_u8ErrorState = NULL_POINTER;
    11c0:	82 e0       	ldi	r24, 0x02	; 2
    11c2:	89 83       	std	Y+1, r24	; 0x01
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <ADC_u8StartChainConvAsynch+0x108>
	}
	else
		Local_u8ErrorState = BUSY_FUNC;
    11c6:	83 e0       	ldi	r24, 0x03	; 3
    11c8:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    11ca:	89 81       	ldd	r24, Y+1	; 0x01

}
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <__vector_16>:
void __vector_16 (void)	__attribute__((signal));
void __vector_16 (void)
{
    11d8:	1f 92       	push	r1
    11da:	0f 92       	push	r0
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	0f 92       	push	r0
    11e0:	11 24       	eor	r1, r1
    11e2:	2f 93       	push	r18
    11e4:	3f 93       	push	r19
    11e6:	4f 93       	push	r20
    11e8:	5f 93       	push	r21
    11ea:	6f 93       	push	r22
    11ec:	7f 93       	push	r23
    11ee:	8f 93       	push	r24
    11f0:	9f 93       	push	r25
    11f2:	af 93       	push	r26
    11f4:	bf 93       	push	r27
    11f6:	ef 93       	push	r30
    11f8:	ff 93       	push	r31
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8DirectionOfConvFunc == SINGLE_CONVERISION)
    1202:	80 91 9b 01 	lds	r24, 0x019B
    1206:	88 23       	and	r24, r24
    1208:	d9 f4       	brne	.+54     	; 0x1240 <__vector_16+0x68>
	{
		if(ADC_ADJUST_BIT == LEFT_ADJUST)
			*Global_pu8Read = ADC_REG>>8;
    120a:	a0 91 99 01 	lds	r26, 0x0199
    120e:	b0 91 9a 01 	lds	r27, 0x019A
    1212:	e4 e2       	ldi	r30, 0x24	; 36
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	91 81       	ldd	r25, Z+1	; 0x01
    121a:	89 2f       	mov	r24, r25
    121c:	99 27       	eor	r25, r25
    121e:	8d 93       	st	X+, r24
    1220:	9c 93       	st	X, r25
		else if(ADC_ADJUST_BIT == RIGHT_ADJUST)
			*Global_pu8Read = ADC_REG;

		Global_u8BusyFlag = IDLE;
    1222:	10 92 96 01 	sts	0x0196, r1

		Global_vCallBackFunc();
    1226:	e0 91 97 01 	lds	r30, 0x0197
    122a:	f0 91 98 01 	lds	r31, 0x0198
    122e:	09 95       	icall

		CLR_BIT(ADCSRA,ADCSRA_ADIE);
    1230:	a6 e2       	ldi	r26, 0x26	; 38
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e6 e2       	ldi	r30, 0x26	; 38
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	87 7f       	andi	r24, 0xF7	; 247
    123c:	8c 93       	st	X, r24
    123e:	58 c0       	rjmp	.+176    	; 0x12f0 <__vector_16+0x118>
	}
	else if(ADC_u8DirectionOfConvFunc == CHAIN_CONVERISION)
    1240:	80 91 9b 01 	lds	r24, 0x019B
    1244:	81 30       	cpi	r24, 0x01	; 1
    1246:	09 f0       	breq	.+2      	; 0x124a <__vector_16+0x72>
    1248:	53 c0       	rjmp	.+166    	; 0x12f0 <__vector_16+0x118>
	{
		if(ADC_ADJUST_BIT == LEFT_ADJUST)
			ADC_pu16ChannelReading[ADC_u8ChainIndex] = ADC_REG>>8;
    124a:	20 91 a1 01 	lds	r18, 0x01A1
    124e:	30 91 a2 01 	lds	r19, 0x01A2
    1252:	80 91 9c 01 	lds	r24, 0x019C
    1256:	88 2f       	mov	r24, r24
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	d9 01       	movw	r26, r18
    1260:	a8 0f       	add	r26, r24
    1262:	b9 1f       	adc	r27, r25
    1264:	e4 e2       	ldi	r30, 0x24	; 36
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	91 81       	ldd	r25, Z+1	; 0x01
    126c:	89 2f       	mov	r24, r25
    126e:	99 27       	eor	r25, r25
    1270:	11 96       	adiw	r26, 0x01	; 1
    1272:	9c 93       	st	X, r25
    1274:	8e 93       	st	-X, r24
		else if(ADC_ADJUST_BIT == RIGHT_ADJUST)
			ADC_pu16ChannelReading[ADC_u8ChainIndex] = ADC_REG;

		ADC_u8ChainIndex++;
    1276:	80 91 9c 01 	lds	r24, 0x019C
    127a:	8f 5f       	subi	r24, 0xFF	; 255
    127c:	80 93 9c 01 	sts	0x019C, r24
		if(ADC_u8ChainIndex==ADC_u8ChannelSize)
    1280:	90 91 9c 01 	lds	r25, 0x019C
    1284:	80 91 a3 01 	lds	r24, 0x01A3
    1288:	98 17       	cp	r25, r24
    128a:	89 f4       	brne	.+34     	; 0x12ae <__vector_16+0xd6>
		{
			Global_u8BusyFlag = IDLE;
    128c:	10 92 96 01 	sts	0x0196, r1

			Global_vChainCallBackFunc();
    1290:	e0 91 9f 01 	lds	r30, 0x019F
    1294:	f0 91 a0 01 	lds	r31, 0x01A0
    1298:	09 95       	icall

			CLR_BIT(ADCSRA,ADCSRA_ADIE);
    129a:	a6 e2       	ldi	r26, 0x26	; 38
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	e6 e2       	ldi	r30, 0x26	; 38
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	87 7f       	andi	r24, 0xF7	; 247
    12a6:	8c 93       	st	X, r24

			ADC_u8ChainIndex = 0;
    12a8:	10 92 9c 01 	sts	0x019C, r1
    12ac:	21 c0       	rjmp	.+66     	; 0x12f0 <__vector_16+0x118>
		}
		else
		{
			ADMUX &= MASK_CHANNEL;
    12ae:	a7 e2       	ldi	r26, 0x27	; 39
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	e7 e2       	ldi	r30, 0x27	; 39
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	80 7e       	andi	r24, 0xE0	; 224
    12ba:	8c 93       	st	X, r24
			ADMUX |= ADC_pu8ChannelNum[ADC_u8ChainIndex]<<ADMUX_MUX0;
    12bc:	a7 e2       	ldi	r26, 0x27	; 39
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	e7 e2       	ldi	r30, 0x27	; 39
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	40 81       	ld	r20, Z
    12c6:	20 91 9d 01 	lds	r18, 0x019D
    12ca:	30 91 9e 01 	lds	r19, 0x019E
    12ce:	80 91 9c 01 	lds	r24, 0x019C
    12d2:	88 2f       	mov	r24, r24
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	f9 01       	movw	r30, r18
    12d8:	e8 0f       	add	r30, r24
    12da:	f9 1f       	adc	r31, r25
    12dc:	80 81       	ld	r24, Z
    12de:	84 2b       	or	r24, r20
    12e0:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADSC);
    12e2:	a6 e2       	ldi	r26, 0x26	; 38
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e6 e2       	ldi	r30, 0x26	; 38
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	80 64       	ori	r24, 0x40	; 64
    12ee:	8c 93       	st	X, r24
		}

	}
}
    12f0:	cf 91       	pop	r28
    12f2:	df 91       	pop	r29
    12f4:	ff 91       	pop	r31
    12f6:	ef 91       	pop	r30
    12f8:	bf 91       	pop	r27
    12fa:	af 91       	pop	r26
    12fc:	9f 91       	pop	r25
    12fe:	8f 91       	pop	r24
    1300:	7f 91       	pop	r23
    1302:	6f 91       	pop	r22
    1304:	5f 91       	pop	r21
    1306:	4f 91       	pop	r20
    1308:	3f 91       	pop	r19
    130a:	2f 91       	pop	r18
    130c:	0f 90       	pop	r0
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	0f 90       	pop	r0
    1312:	1f 90       	pop	r1
    1314:	18 95       	reti

00001316 <CLCD_voidSendCommand>:
#include "../HAL/CLCD_interface.h"
#include "../HAL/CLCD_private.h"

static u8 iniIsFinich=0;
void CLCD_voidSendCommand(u8 Copy_u8Command)//math
{
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
    131e:	ac 97       	sbiw	r28, 0x2c	; 44
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	f8 94       	cli
    1324:	de bf       	out	0x3e, r29	; 62
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	cd bf       	out	0x3d, r28	; 61
    132a:	8c a7       	std	Y+44, r24	; 0x2c
	/*PIN SET  send pulse (E) */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_HIGH);
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_LOW);
#elif CLCD_CHIOCE_MODE==_4_BIT_MODE
	u8 Local_u8Mask = 0b11110000;
    132c:	80 ef       	ldi	r24, 0xF0	; 240
    132e:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_PIN_LOW);
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	60 e0       	ldi	r22, 0x00	; 0
    1334:	40 e0       	ldi	r20, 0x00	; 0
    1336:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_u8SetPinValue>
	/*PIN RW SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_PIN_LOW);
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	61 e0       	ldi	r22, 0x01	; 1
    133e:	40 e0       	ldi	r20, 0x00	; 0
    1340:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_u8SetPinValue>
	/*PORT SET COMMAND*/
	Local_u8Mask &= Copy_u8Command;
    1344:	9b a5       	ldd	r25, Y+43	; 0x2b
    1346:	8c a5       	ldd	r24, Y+44	; 0x2c
    1348:	89 23       	and	r24, r25
    134a:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPortValue(CLCD_DATA_PORT, Local_u8Mask);
    134c:	82 e0       	ldi	r24, 0x02	; 2
    134e:	6b a5       	ldd	r22, Y+43	; 0x2b
    1350:	0e 94 63 11 	call	0x22c6	; 0x22c6 <DIO_u8SetPortValue>
	/*PIN SET  send pulse (E) */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_HIGH);
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	62 e0       	ldi	r22, 0x02	; 2
    1358:	41 e0       	ldi	r20, 0x01	; 1
    135a:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_u8SetPinValue>
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	a0 e0       	ldi	r26, 0x00	; 0
    1364:	b0 e4       	ldi	r27, 0x40	; 64
    1366:	8f a3       	std	Y+39, r24	; 0x27
    1368:	98 a7       	std	Y+40, r25	; 0x28
    136a:	a9 a7       	std	Y+41, r26	; 0x29
    136c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    136e:	6f a1       	ldd	r22, Y+39	; 0x27
    1370:	78 a5       	ldd	r23, Y+40	; 0x28
    1372:	89 a5       	ldd	r24, Y+41	; 0x29
    1374:	9a a5       	ldd	r25, Y+42	; 0x2a
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	4a ef       	ldi	r20, 0xFA	; 250
    137c:	54 e4       	ldi	r21, 0x44	; 68
    137e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	8b a3       	std	Y+35, r24	; 0x23
    1388:	9c a3       	std	Y+36, r25	; 0x24
    138a:	ad a3       	std	Y+37, r26	; 0x25
    138c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    138e:	6b a1       	ldd	r22, Y+35	; 0x23
    1390:	7c a1       	ldd	r23, Y+36	; 0x24
    1392:	8d a1       	ldd	r24, Y+37	; 0x25
    1394:	9e a1       	ldd	r25, Y+38	; 0x26
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	40 e8       	ldi	r20, 0x80	; 128
    139c:	5f e3       	ldi	r21, 0x3F	; 63
    139e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13a2:	88 23       	and	r24, r24
    13a4:	2c f4       	brge	.+10     	; 0x13b0 <CLCD_voidSendCommand+0x9a>
		__ticks = 1;
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	9a a3       	std	Y+34, r25	; 0x22
    13ac:	89 a3       	std	Y+33, r24	; 0x21
    13ae:	3f c0       	rjmp	.+126    	; 0x142e <CLCD_voidSendCommand+0x118>
	else if (__tmp > 65535)
    13b0:	6b a1       	ldd	r22, Y+35	; 0x23
    13b2:	7c a1       	ldd	r23, Y+36	; 0x24
    13b4:	8d a1       	ldd	r24, Y+37	; 0x25
    13b6:	9e a1       	ldd	r25, Y+38	; 0x26
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	3f ef       	ldi	r19, 0xFF	; 255
    13bc:	4f e7       	ldi	r20, 0x7F	; 127
    13be:	57 e4       	ldi	r21, 0x47	; 71
    13c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13c4:	18 16       	cp	r1, r24
    13c6:	4c f5       	brge	.+82     	; 0x141a <CLCD_voidSendCommand+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c8:	6f a1       	ldd	r22, Y+39	; 0x27
    13ca:	78 a5       	ldd	r23, Y+40	; 0x28
    13cc:	89 a5       	ldd	r24, Y+41	; 0x29
    13ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	40 e2       	ldi	r20, 0x20	; 32
    13d6:	51 e4       	ldi	r21, 0x41	; 65
    13d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	bc 01       	movw	r22, r24
    13e2:	cd 01       	movw	r24, r26
    13e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e8:	dc 01       	movw	r26, r24
    13ea:	cb 01       	movw	r24, r22
    13ec:	9a a3       	std	Y+34, r25	; 0x22
    13ee:	89 a3       	std	Y+33, r24	; 0x21
    13f0:	0f c0       	rjmp	.+30     	; 0x1410 <CLCD_voidSendCommand+0xfa>
    13f2:	88 ec       	ldi	r24, 0xC8	; 200
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	98 a3       	std	Y+32, r25	; 0x20
    13f8:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13fc:	98 a1       	ldd	r25, Y+32	; 0x20
    13fe:	01 97       	sbiw	r24, 0x01	; 1
    1400:	f1 f7       	brne	.-4      	; 0x13fe <CLCD_voidSendCommand+0xe8>
    1402:	98 a3       	std	Y+32, r25	; 0x20
    1404:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1406:	89 a1       	ldd	r24, Y+33	; 0x21
    1408:	9a a1       	ldd	r25, Y+34	; 0x22
    140a:	01 97       	sbiw	r24, 0x01	; 1
    140c:	9a a3       	std	Y+34, r25	; 0x22
    140e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1410:	89 a1       	ldd	r24, Y+33	; 0x21
    1412:	9a a1       	ldd	r25, Y+34	; 0x22
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	69 f7       	brne	.-38     	; 0x13f2 <CLCD_voidSendCommand+0xdc>
    1418:	14 c0       	rjmp	.+40     	; 0x1442 <CLCD_voidSendCommand+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    141a:	6b a1       	ldd	r22, Y+35	; 0x23
    141c:	7c a1       	ldd	r23, Y+36	; 0x24
    141e:	8d a1       	ldd	r24, Y+37	; 0x25
    1420:	9e a1       	ldd	r25, Y+38	; 0x26
    1422:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1426:	dc 01       	movw	r26, r24
    1428:	cb 01       	movw	r24, r22
    142a:	9a a3       	std	Y+34, r25	; 0x22
    142c:	89 a3       	std	Y+33, r24	; 0x21
    142e:	89 a1       	ldd	r24, Y+33	; 0x21
    1430:	9a a1       	ldd	r25, Y+34	; 0x22
    1432:	9e 8f       	std	Y+30, r25	; 0x1e
    1434:	8d 8f       	std	Y+29, r24	; 0x1d
    1436:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1438:	9e 8d       	ldd	r25, Y+30	; 0x1e
    143a:	01 97       	sbiw	r24, 0x01	; 1
    143c:	f1 f7       	brne	.-4      	; 0x143a <CLCD_voidSendCommand+0x124>
    143e:	9e 8f       	std	Y+30, r25	; 0x1e
    1440:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	62 e0       	ldi	r22, 0x02	; 2
    1446:	40 e0       	ldi	r20, 0x00	; 0
    1448:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_u8SetPinValue>
	if(iniIsFinich)
    144c:	80 91 a4 01 	lds	r24, 0x01A4
    1450:	88 23       	and	r24, r24
    1452:	09 f4       	brne	.+2      	; 0x1456 <CLCD_voidSendCommand+0x140>
    1454:	8c c0       	rjmp	.+280    	; 0x156e <CLCD_voidSendCommand+0x258>
	{
		Local_u8Mask = 0b11110000;
    1456:	80 ef       	ldi	r24, 0xF0	; 240
    1458:	8b a7       	std	Y+43, r24	; 0x2b
		Local_u8Mask = ~(Local_u8Mask) & Copy_u8Command;
    145a:	8b a5       	ldd	r24, Y+43	; 0x2b
    145c:	98 2f       	mov	r25, r24
    145e:	90 95       	com	r25
    1460:	8c a5       	ldd	r24, Y+44	; 0x2c
    1462:	89 23       	and	r24, r25
    1464:	8b a7       	std	Y+43, r24	; 0x2b
		DIO_u8SetPortValue(CLCD_DATA_PORT, (Local_u8Mask << 4));
    1466:	8b a5       	ldd	r24, Y+43	; 0x2b
    1468:	98 2f       	mov	r25, r24
    146a:	92 95       	swap	r25
    146c:	90 7f       	andi	r25, 0xF0	; 240
    146e:	82 e0       	ldi	r24, 0x02	; 2
    1470:	69 2f       	mov	r22, r25
    1472:	0e 94 63 11 	call	0x22c6	; 0x22c6 <DIO_u8SetPortValue>
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_HIGH);
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	62 e0       	ldi	r22, 0x02	; 2
    147a:	41 e0       	ldi	r20, 0x01	; 1
    147c:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_u8SetPinValue>
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	a0 e0       	ldi	r26, 0x00	; 0
    1486:	b0 e4       	ldi	r27, 0x40	; 64
    1488:	89 8f       	std	Y+25, r24	; 0x19
    148a:	9a 8f       	std	Y+26, r25	; 0x1a
    148c:	ab 8f       	std	Y+27, r26	; 0x1b
    148e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1490:	69 8d       	ldd	r22, Y+25	; 0x19
    1492:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1494:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1496:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	4a ef       	ldi	r20, 0xFA	; 250
    149e:	54 e4       	ldi	r21, 0x44	; 68
    14a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	8d 8b       	std	Y+21, r24	; 0x15
    14aa:	9e 8b       	std	Y+22, r25	; 0x16
    14ac:	af 8b       	std	Y+23, r26	; 0x17
    14ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14b0:	6d 89       	ldd	r22, Y+21	; 0x15
    14b2:	7e 89       	ldd	r23, Y+22	; 0x16
    14b4:	8f 89       	ldd	r24, Y+23	; 0x17
    14b6:	98 8d       	ldd	r25, Y+24	; 0x18
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	40 e8       	ldi	r20, 0x80	; 128
    14be:	5f e3       	ldi	r21, 0x3F	; 63
    14c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14c4:	88 23       	and	r24, r24
    14c6:	2c f4       	brge	.+10     	; 0x14d2 <CLCD_voidSendCommand+0x1bc>
		__ticks = 1;
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	9c 8b       	std	Y+20, r25	; 0x14
    14ce:	8b 8b       	std	Y+19, r24	; 0x13
    14d0:	3f c0       	rjmp	.+126    	; 0x1550 <CLCD_voidSendCommand+0x23a>
	else if (__tmp > 65535)
    14d2:	6d 89       	ldd	r22, Y+21	; 0x15
    14d4:	7e 89       	ldd	r23, Y+22	; 0x16
    14d6:	8f 89       	ldd	r24, Y+23	; 0x17
    14d8:	98 8d       	ldd	r25, Y+24	; 0x18
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	3f ef       	ldi	r19, 0xFF	; 255
    14de:	4f e7       	ldi	r20, 0x7F	; 127
    14e0:	57 e4       	ldi	r21, 0x47	; 71
    14e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14e6:	18 16       	cp	r1, r24
    14e8:	4c f5       	brge	.+82     	; 0x153c <CLCD_voidSendCommand+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ea:	69 8d       	ldd	r22, Y+25	; 0x19
    14ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	40 e2       	ldi	r20, 0x20	; 32
    14f8:	51 e4       	ldi	r21, 0x41	; 65
    14fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14fe:	dc 01       	movw	r26, r24
    1500:	cb 01       	movw	r24, r22
    1502:	bc 01       	movw	r22, r24
    1504:	cd 01       	movw	r24, r26
    1506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	9c 8b       	std	Y+20, r25	; 0x14
    1510:	8b 8b       	std	Y+19, r24	; 0x13
    1512:	0f c0       	rjmp	.+30     	; 0x1532 <CLCD_voidSendCommand+0x21c>
    1514:	88 ec       	ldi	r24, 0xC8	; 200
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	9a 8b       	std	Y+18, r25	; 0x12
    151a:	89 8b       	std	Y+17, r24	; 0x11
    151c:	89 89       	ldd	r24, Y+17	; 0x11
    151e:	9a 89       	ldd	r25, Y+18	; 0x12
    1520:	01 97       	sbiw	r24, 0x01	; 1
    1522:	f1 f7       	brne	.-4      	; 0x1520 <CLCD_voidSendCommand+0x20a>
    1524:	9a 8b       	std	Y+18, r25	; 0x12
    1526:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1528:	8b 89       	ldd	r24, Y+19	; 0x13
    152a:	9c 89       	ldd	r25, Y+20	; 0x14
    152c:	01 97       	sbiw	r24, 0x01	; 1
    152e:	9c 8b       	std	Y+20, r25	; 0x14
    1530:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1532:	8b 89       	ldd	r24, Y+19	; 0x13
    1534:	9c 89       	ldd	r25, Y+20	; 0x14
    1536:	00 97       	sbiw	r24, 0x00	; 0
    1538:	69 f7       	brne	.-38     	; 0x1514 <CLCD_voidSendCommand+0x1fe>
    153a:	14 c0       	rjmp	.+40     	; 0x1564 <CLCD_voidSendCommand+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    153c:	6d 89       	ldd	r22, Y+21	; 0x15
    153e:	7e 89       	ldd	r23, Y+22	; 0x16
    1540:	8f 89       	ldd	r24, Y+23	; 0x17
    1542:	98 8d       	ldd	r25, Y+24	; 0x18
    1544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	9c 8b       	std	Y+20, r25	; 0x14
    154e:	8b 8b       	std	Y+19, r24	; 0x13
    1550:	8b 89       	ldd	r24, Y+19	; 0x13
    1552:	9c 89       	ldd	r25, Y+20	; 0x14
    1554:	98 8b       	std	Y+16, r25	; 0x10
    1556:	8f 87       	std	Y+15, r24	; 0x0f
    1558:	8f 85       	ldd	r24, Y+15	; 0x0f
    155a:	98 89       	ldd	r25, Y+16	; 0x10
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	f1 f7       	brne	.-4      	; 0x155c <CLCD_voidSendCommand+0x246>
    1560:	98 8b       	std	Y+16, r25	; 0x10
    1562:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	62 e0       	ldi	r22, 0x02	; 2
    1568:	40 e0       	ldi	r20, 0x00	; 0
    156a:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_u8SetPinValue>
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	a0 e0       	ldi	r26, 0x00	; 0
    1574:	b0 e4       	ldi	r27, 0x40	; 64
    1576:	8b 87       	std	Y+11, r24	; 0x0b
    1578:	9c 87       	std	Y+12, r25	; 0x0c
    157a:	ad 87       	std	Y+13, r26	; 0x0d
    157c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    157e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1580:	7c 85       	ldd	r23, Y+12	; 0x0c
    1582:	8d 85       	ldd	r24, Y+13	; 0x0d
    1584:	9e 85       	ldd	r25, Y+14	; 0x0e
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	4a ef       	ldi	r20, 0xFA	; 250
    158c:	54 e4       	ldi	r21, 0x44	; 68
    158e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	8f 83       	std	Y+7, r24	; 0x07
    1598:	98 87       	std	Y+8, r25	; 0x08
    159a:	a9 87       	std	Y+9, r26	; 0x09
    159c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    159e:	6f 81       	ldd	r22, Y+7	; 0x07
    15a0:	78 85       	ldd	r23, Y+8	; 0x08
    15a2:	89 85       	ldd	r24, Y+9	; 0x09
    15a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a6:	20 e0       	ldi	r18, 0x00	; 0
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	40 e8       	ldi	r20, 0x80	; 128
    15ac:	5f e3       	ldi	r21, 0x3F	; 63
    15ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15b2:	88 23       	and	r24, r24
    15b4:	2c f4       	brge	.+10     	; 0x15c0 <CLCD_voidSendCommand+0x2aa>
		__ticks = 1;
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	9e 83       	std	Y+6, r25	; 0x06
    15bc:	8d 83       	std	Y+5, r24	; 0x05
    15be:	3f c0       	rjmp	.+126    	; 0x163e <CLCD_voidSendCommand+0x328>
	else if (__tmp > 65535)
    15c0:	6f 81       	ldd	r22, Y+7	; 0x07
    15c2:	78 85       	ldd	r23, Y+8	; 0x08
    15c4:	89 85       	ldd	r24, Y+9	; 0x09
    15c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	3f ef       	ldi	r19, 0xFF	; 255
    15cc:	4f e7       	ldi	r20, 0x7F	; 127
    15ce:	57 e4       	ldi	r21, 0x47	; 71
    15d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15d4:	18 16       	cp	r1, r24
    15d6:	4c f5       	brge	.+82     	; 0x162a <CLCD_voidSendCommand+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    15da:	7c 85       	ldd	r23, Y+12	; 0x0c
    15dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    15de:	9e 85       	ldd	r25, Y+14	; 0x0e
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	40 e2       	ldi	r20, 0x20	; 32
    15e6:	51 e4       	ldi	r21, 0x41	; 65
    15e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ec:	dc 01       	movw	r26, r24
    15ee:	cb 01       	movw	r24, r22
    15f0:	bc 01       	movw	r22, r24
    15f2:	cd 01       	movw	r24, r26
    15f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	9e 83       	std	Y+6, r25	; 0x06
    15fe:	8d 83       	std	Y+5, r24	; 0x05
    1600:	0f c0       	rjmp	.+30     	; 0x1620 <CLCD_voidSendCommand+0x30a>
    1602:	88 ec       	ldi	r24, 0xC8	; 200
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	9c 83       	std	Y+4, r25	; 0x04
    1608:	8b 83       	std	Y+3, r24	; 0x03
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	9c 81       	ldd	r25, Y+4	; 0x04
    160e:	01 97       	sbiw	r24, 0x01	; 1
    1610:	f1 f7       	brne	.-4      	; 0x160e <CLCD_voidSendCommand+0x2f8>
    1612:	9c 83       	std	Y+4, r25	; 0x04
    1614:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1616:	8d 81       	ldd	r24, Y+5	; 0x05
    1618:	9e 81       	ldd	r25, Y+6	; 0x06
    161a:	01 97       	sbiw	r24, 0x01	; 1
    161c:	9e 83       	std	Y+6, r25	; 0x06
    161e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1620:	8d 81       	ldd	r24, Y+5	; 0x05
    1622:	9e 81       	ldd	r25, Y+6	; 0x06
    1624:	00 97       	sbiw	r24, 0x00	; 0
    1626:	69 f7       	brne	.-38     	; 0x1602 <CLCD_voidSendCommand+0x2ec>
    1628:	14 c0       	rjmp	.+40     	; 0x1652 <CLCD_voidSendCommand+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    162a:	6f 81       	ldd	r22, Y+7	; 0x07
    162c:	78 85       	ldd	r23, Y+8	; 0x08
    162e:	89 85       	ldd	r24, Y+9	; 0x09
    1630:	9a 85       	ldd	r25, Y+10	; 0x0a
    1632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	9e 83       	std	Y+6, r25	; 0x06
    163c:	8d 83       	std	Y+5, r24	; 0x05
    163e:	8d 81       	ldd	r24, Y+5	; 0x05
    1640:	9e 81       	ldd	r25, Y+6	; 0x06
    1642:	9a 83       	std	Y+2, r25	; 0x02
    1644:	89 83       	std	Y+1, r24	; 0x01
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	9a 81       	ldd	r25, Y+2	; 0x02
    164a:	01 97       	sbiw	r24, 0x01	; 1
    164c:	f1 f7       	brne	.-4      	; 0x164a <CLCD_voidSendCommand+0x334>
    164e:	9a 83       	std	Y+2, r25	; 0x02
    1650:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
#else
#error "In correct cconfigrtion of LCD_MODE"
#endif

}
    1652:	ac 96       	adiw	r28, 0x2c	; 44
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	f8 94       	cli
    1658:	de bf       	out	0x3e, r29	; 62
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	cd bf       	out	0x3d, r28	; 61
    165e:	cf 91       	pop	r28
    1660:	df 91       	pop	r29
    1662:	08 95       	ret

00001664 <CLCD_Read_BF_AC>:
u8 CLCD_Read_BF_AC() {
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	00 d0       	rcall	.+0      	; 0x166a <CLCD_Read_BF_AC+0x6>
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Address = 0;
    166e:	1a 82       	std	Y+2, r1	; 0x02
	/*PIN RS SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_PIN_LOW);
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	60 e0       	ldi	r22, 0x00	; 0
    1674:	40 e0       	ldi	r20, 0x00	; 0
    1676:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_u8SetPinValue>
	/*PIN RW SET HIGH  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_PIN_HIGH);
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	61 e0       	ldi	r22, 0x01	; 1
    167e:	41 e0       	ldi	r20, 0x01	; 1
    1680:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_u8SetPinValue>
	/*PIN SET  send pulse (E) */
	for (u8 i = 0; i < 7; i++) {
    1684:	19 82       	std	Y+1, r1	; 0x01
    1686:	1c c0       	rjmp	.+56     	; 0x16c0 <CLCD_Read_BF_AC+0x5c>
		DIO_u8GetPinValue(CLCD_DATA_PORT, i, &Local_u8Address);
    1688:	9e 01       	movw	r18, r28
    168a:	2e 5f       	subi	r18, 0xFE	; 254
    168c:	3f 4f       	sbci	r19, 0xFF	; 255
    168e:	82 e0       	ldi	r24, 0x02	; 2
    1690:	69 81       	ldd	r22, Y+1	; 0x01
    1692:	a9 01       	movw	r20, r18
    1694:	0e 94 b1 11 	call	0x2362	; 0x2362 <DIO_u8GetPinValue>
		Local_u8Address += Local_u8Address << i;
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	89 81       	ldd	r24, Y+1	; 0x01
    16a0:	88 2f       	mov	r24, r24
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	a9 01       	movw	r20, r18
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <CLCD_Read_BF_AC+0x48>
    16a8:	44 0f       	add	r20, r20
    16aa:	55 1f       	adc	r21, r21
    16ac:	8a 95       	dec	r24
    16ae:	e2 f7       	brpl	.-8      	; 0x16a8 <CLCD_Read_BF_AC+0x44>
    16b0:	ca 01       	movw	r24, r20
    16b2:	98 2f       	mov	r25, r24
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	89 0f       	add	r24, r25
    16b8:	8a 83       	std	Y+2, r24	; 0x02
	/*PIN RS SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_PIN_LOW);
	/*PIN RW SET HIGH  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_PIN_HIGH);
	/*PIN SET  send pulse (E) */
	for (u8 i = 0; i < 7; i++) {
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	8f 5f       	subi	r24, 0xFF	; 255
    16be:	89 83       	std	Y+1, r24	; 0x01
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	87 30       	cpi	r24, 0x07	; 7
    16c4:	08 f3       	brcs	.-62     	; 0x1688 <CLCD_Read_BF_AC+0x24>
		DIO_u8GetPinValue(CLCD_DATA_PORT, i, &Local_u8Address);
		Local_u8Address += Local_u8Address << i;
	}
	return Local_u8Address;
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	cf 91       	pop	r28
    16ce:	df 91       	pop	r29
    16d0:	08 95       	ret

000016d2 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    16d2:	df 93       	push	r29
    16d4:	cf 93       	push	r28
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
    16da:	ac 97       	sbiw	r28, 0x2c	; 44
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	f8 94       	cli
    16e0:	de bf       	out	0x3e, r29	; 62
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	cd bf       	out	0x3d, r28	; 61
    16e6:	8c a7       	std	Y+44, r24	; 0x2c
	if (Local_u8Address > 0x0f)
		CLCD_voidSendCommand(0x0C);
	else
		CLCD_voidSendCommand(0x06);
#elif CLCD_CHIOCE_MODE==_4_BIT_MODE
	u8 Local_u8Mask = 0b11110000;
    16e8:	80 ef       	ldi	r24, 0xF0	; 240
    16ea:	8b a7       	std	Y+43, r24	; 0x2b
	/*PIN RS SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_PIN_HIGH);
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	60 e0       	ldi	r22, 0x00	; 0
    16f0:	41 e0       	ldi	r20, 0x01	; 1
    16f2:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_u8SetPinValue>
	/*PIN RW SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_PIN_LOW);
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	61 e0       	ldi	r22, 0x01	; 1
    16fa:	40 e0       	ldi	r20, 0x00	; 0
    16fc:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_u8SetPinValue>
	/*PORT SET COMMAND*/
	Local_u8Mask &= Copy_u8Data;
    1700:	9b a5       	ldd	r25, Y+43	; 0x2b
    1702:	8c a5       	ldd	r24, Y+44	; 0x2c
    1704:	89 23       	and	r24, r25
    1706:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Mask);
    1708:	82 e0       	ldi	r24, 0x02	; 2
    170a:	6b a5       	ldd	r22, Y+43	; 0x2b
    170c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <DIO_u8SetPortValue>
	/*PIN SET send pulse (E) */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_HIGH);
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	62 e0       	ldi	r22, 0x02	; 2
    1714:	41 e0       	ldi	r20, 0x01	; 1
    1716:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_u8SetPinValue>
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	a0 e0       	ldi	r26, 0x00	; 0
    1720:	b0 e4       	ldi	r27, 0x40	; 64
    1722:	8f a3       	std	Y+39, r24	; 0x27
    1724:	98 a7       	std	Y+40, r25	; 0x28
    1726:	a9 a7       	std	Y+41, r26	; 0x29
    1728:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    172a:	6f a1       	ldd	r22, Y+39	; 0x27
    172c:	78 a5       	ldd	r23, Y+40	; 0x28
    172e:	89 a5       	ldd	r24, Y+41	; 0x29
    1730:	9a a5       	ldd	r25, Y+42	; 0x2a
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	4a ef       	ldi	r20, 0xFA	; 250
    1738:	54 e4       	ldi	r21, 0x44	; 68
    173a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	8b a3       	std	Y+35, r24	; 0x23
    1744:	9c a3       	std	Y+36, r25	; 0x24
    1746:	ad a3       	std	Y+37, r26	; 0x25
    1748:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    174a:	6b a1       	ldd	r22, Y+35	; 0x23
    174c:	7c a1       	ldd	r23, Y+36	; 0x24
    174e:	8d a1       	ldd	r24, Y+37	; 0x25
    1750:	9e a1       	ldd	r25, Y+38	; 0x26
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	40 e8       	ldi	r20, 0x80	; 128
    1758:	5f e3       	ldi	r21, 0x3F	; 63
    175a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    175e:	88 23       	and	r24, r24
    1760:	2c f4       	brge	.+10     	; 0x176c <CLCD_voidSendData+0x9a>
		__ticks = 1;
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	9a a3       	std	Y+34, r25	; 0x22
    1768:	89 a3       	std	Y+33, r24	; 0x21
    176a:	3f c0       	rjmp	.+126    	; 0x17ea <CLCD_voidSendData+0x118>
	else if (__tmp > 65535)
    176c:	6b a1       	ldd	r22, Y+35	; 0x23
    176e:	7c a1       	ldd	r23, Y+36	; 0x24
    1770:	8d a1       	ldd	r24, Y+37	; 0x25
    1772:	9e a1       	ldd	r25, Y+38	; 0x26
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	3f ef       	ldi	r19, 0xFF	; 255
    1778:	4f e7       	ldi	r20, 0x7F	; 127
    177a:	57 e4       	ldi	r21, 0x47	; 71
    177c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1780:	18 16       	cp	r1, r24
    1782:	4c f5       	brge	.+82     	; 0x17d6 <CLCD_voidSendData+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1784:	6f a1       	ldd	r22, Y+39	; 0x27
    1786:	78 a5       	ldd	r23, Y+40	; 0x28
    1788:	89 a5       	ldd	r24, Y+41	; 0x29
    178a:	9a a5       	ldd	r25, Y+42	; 0x2a
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	40 e2       	ldi	r20, 0x20	; 32
    1792:	51 e4       	ldi	r21, 0x41	; 65
    1794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	bc 01       	movw	r22, r24
    179e:	cd 01       	movw	r24, r26
    17a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	9a a3       	std	Y+34, r25	; 0x22
    17aa:	89 a3       	std	Y+33, r24	; 0x21
    17ac:	0f c0       	rjmp	.+30     	; 0x17cc <CLCD_voidSendData+0xfa>
    17ae:	88 ec       	ldi	r24, 0xC8	; 200
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	98 a3       	std	Y+32, r25	; 0x20
    17b4:	8f 8f       	std	Y+31, r24	; 0x1f
    17b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17b8:	98 a1       	ldd	r25, Y+32	; 0x20
    17ba:	01 97       	sbiw	r24, 0x01	; 1
    17bc:	f1 f7       	brne	.-4      	; 0x17ba <CLCD_voidSendData+0xe8>
    17be:	98 a3       	std	Y+32, r25	; 0x20
    17c0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c2:	89 a1       	ldd	r24, Y+33	; 0x21
    17c4:	9a a1       	ldd	r25, Y+34	; 0x22
    17c6:	01 97       	sbiw	r24, 0x01	; 1
    17c8:	9a a3       	std	Y+34, r25	; 0x22
    17ca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17cc:	89 a1       	ldd	r24, Y+33	; 0x21
    17ce:	9a a1       	ldd	r25, Y+34	; 0x22
    17d0:	00 97       	sbiw	r24, 0x00	; 0
    17d2:	69 f7       	brne	.-38     	; 0x17ae <CLCD_voidSendData+0xdc>
    17d4:	14 c0       	rjmp	.+40     	; 0x17fe <CLCD_voidSendData+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d6:	6b a1       	ldd	r22, Y+35	; 0x23
    17d8:	7c a1       	ldd	r23, Y+36	; 0x24
    17da:	8d a1       	ldd	r24, Y+37	; 0x25
    17dc:	9e a1       	ldd	r25, Y+38	; 0x26
    17de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	9a a3       	std	Y+34, r25	; 0x22
    17e8:	89 a3       	std	Y+33, r24	; 0x21
    17ea:	89 a1       	ldd	r24, Y+33	; 0x21
    17ec:	9a a1       	ldd	r25, Y+34	; 0x22
    17ee:	9e 8f       	std	Y+30, r25	; 0x1e
    17f0:	8d 8f       	std	Y+29, r24	; 0x1d
    17f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17f6:	01 97       	sbiw	r24, 0x01	; 1
    17f8:	f1 f7       	brne	.-4      	; 0x17f6 <CLCD_voidSendData+0x124>
    17fa:	9e 8f       	std	Y+30, r25	; 0x1e
    17fc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	62 e0       	ldi	r22, 0x02	; 2
    1802:	40 e0       	ldi	r20, 0x00	; 0
    1804:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_u8SetPinValue>
	Local_u8Mask=0b11110000;
    1808:	80 ef       	ldi	r24, 0xF0	; 240
    180a:	8b a7       	std	Y+43, r24	; 0x2b
	Local_u8Mask = ~(Local_u8Mask) & Copy_u8Data;
    180c:	8b a5       	ldd	r24, Y+43	; 0x2b
    180e:	98 2f       	mov	r25, r24
    1810:	90 95       	com	r25
    1812:	8c a5       	ldd	r24, Y+44	; 0x2c
    1814:	89 23       	and	r24, r25
    1816:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPortValue(CLCD_DATA_PORT, (Local_u8Mask << 4));
    1818:	8b a5       	ldd	r24, Y+43	; 0x2b
    181a:	98 2f       	mov	r25, r24
    181c:	92 95       	swap	r25
    181e:	90 7f       	andi	r25, 0xF0	; 240
    1820:	82 e0       	ldi	r24, 0x02	; 2
    1822:	69 2f       	mov	r22, r25
    1824:	0e 94 63 11 	call	0x22c6	; 0x22c6 <DIO_u8SetPortValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_HIGH);
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	62 e0       	ldi	r22, 0x02	; 2
    182c:	41 e0       	ldi	r20, 0x01	; 1
    182e:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_u8SetPinValue>
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	a0 e0       	ldi	r26, 0x00	; 0
    1838:	b0 e4       	ldi	r27, 0x40	; 64
    183a:	89 8f       	std	Y+25, r24	; 0x19
    183c:	9a 8f       	std	Y+26, r25	; 0x1a
    183e:	ab 8f       	std	Y+27, r26	; 0x1b
    1840:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1842:	69 8d       	ldd	r22, Y+25	; 0x19
    1844:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1846:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1848:	9c 8d       	ldd	r25, Y+28	; 0x1c
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	4a ef       	ldi	r20, 0xFA	; 250
    1850:	54 e4       	ldi	r21, 0x44	; 68
    1852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	8d 8b       	std	Y+21, r24	; 0x15
    185c:	9e 8b       	std	Y+22, r25	; 0x16
    185e:	af 8b       	std	Y+23, r26	; 0x17
    1860:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1862:	6d 89       	ldd	r22, Y+21	; 0x15
    1864:	7e 89       	ldd	r23, Y+22	; 0x16
    1866:	8f 89       	ldd	r24, Y+23	; 0x17
    1868:	98 8d       	ldd	r25, Y+24	; 0x18
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e8       	ldi	r20, 0x80	; 128
    1870:	5f e3       	ldi	r21, 0x3F	; 63
    1872:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1876:	88 23       	and	r24, r24
    1878:	2c f4       	brge	.+10     	; 0x1884 <CLCD_voidSendData+0x1b2>
		__ticks = 1;
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	9c 8b       	std	Y+20, r25	; 0x14
    1880:	8b 8b       	std	Y+19, r24	; 0x13
    1882:	3f c0       	rjmp	.+126    	; 0x1902 <CLCD_voidSendData+0x230>
	else if (__tmp > 65535)
    1884:	6d 89       	ldd	r22, Y+21	; 0x15
    1886:	7e 89       	ldd	r23, Y+22	; 0x16
    1888:	8f 89       	ldd	r24, Y+23	; 0x17
    188a:	98 8d       	ldd	r25, Y+24	; 0x18
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	3f ef       	ldi	r19, 0xFF	; 255
    1890:	4f e7       	ldi	r20, 0x7F	; 127
    1892:	57 e4       	ldi	r21, 0x47	; 71
    1894:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1898:	18 16       	cp	r1, r24
    189a:	4c f5       	brge	.+82     	; 0x18ee <CLCD_voidSendData+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189c:	69 8d       	ldd	r22, Y+25	; 0x19
    189e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	40 e2       	ldi	r20, 0x20	; 32
    18aa:	51 e4       	ldi	r21, 0x41	; 65
    18ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	bc 01       	movw	r22, r24
    18b6:	cd 01       	movw	r24, r26
    18b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	9c 8b       	std	Y+20, r25	; 0x14
    18c2:	8b 8b       	std	Y+19, r24	; 0x13
    18c4:	0f c0       	rjmp	.+30     	; 0x18e4 <CLCD_voidSendData+0x212>
    18c6:	88 ec       	ldi	r24, 0xC8	; 200
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	9a 8b       	std	Y+18, r25	; 0x12
    18cc:	89 8b       	std	Y+17, r24	; 0x11
    18ce:	89 89       	ldd	r24, Y+17	; 0x11
    18d0:	9a 89       	ldd	r25, Y+18	; 0x12
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <CLCD_voidSendData+0x200>
    18d6:	9a 8b       	std	Y+18, r25	; 0x12
    18d8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18da:	8b 89       	ldd	r24, Y+19	; 0x13
    18dc:	9c 89       	ldd	r25, Y+20	; 0x14
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	9c 8b       	std	Y+20, r25	; 0x14
    18e2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e4:	8b 89       	ldd	r24, Y+19	; 0x13
    18e6:	9c 89       	ldd	r25, Y+20	; 0x14
    18e8:	00 97       	sbiw	r24, 0x00	; 0
    18ea:	69 f7       	brne	.-38     	; 0x18c6 <CLCD_voidSendData+0x1f4>
    18ec:	14 c0       	rjmp	.+40     	; 0x1916 <CLCD_voidSendData+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ee:	6d 89       	ldd	r22, Y+21	; 0x15
    18f0:	7e 89       	ldd	r23, Y+22	; 0x16
    18f2:	8f 89       	ldd	r24, Y+23	; 0x17
    18f4:	98 8d       	ldd	r25, Y+24	; 0x18
    18f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	9c 8b       	std	Y+20, r25	; 0x14
    1900:	8b 8b       	std	Y+19, r24	; 0x13
    1902:	8b 89       	ldd	r24, Y+19	; 0x13
    1904:	9c 89       	ldd	r25, Y+20	; 0x14
    1906:	98 8b       	std	Y+16, r25	; 0x10
    1908:	8f 87       	std	Y+15, r24	; 0x0f
    190a:	8f 85       	ldd	r24, Y+15	; 0x0f
    190c:	98 89       	ldd	r25, Y+16	; 0x10
    190e:	01 97       	sbiw	r24, 0x01	; 1
    1910:	f1 f7       	brne	.-4      	; 0x190e <CLCD_voidSendData+0x23c>
    1912:	98 8b       	std	Y+16, r25	; 0x10
    1914:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	62 e0       	ldi	r22, 0x02	; 2
    191a:	40 e0       	ldi	r20, 0x00	; 0
    191c:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_u8SetPinValue>
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	a0 e0       	ldi	r26, 0x00	; 0
    1926:	b0 e4       	ldi	r27, 0x40	; 64
    1928:	8b 87       	std	Y+11, r24	; 0x0b
    192a:	9c 87       	std	Y+12, r25	; 0x0c
    192c:	ad 87       	std	Y+13, r26	; 0x0d
    192e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1930:	6b 85       	ldd	r22, Y+11	; 0x0b
    1932:	7c 85       	ldd	r23, Y+12	; 0x0c
    1934:	8d 85       	ldd	r24, Y+13	; 0x0d
    1936:	9e 85       	ldd	r25, Y+14	; 0x0e
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	4a ef       	ldi	r20, 0xFA	; 250
    193e:	54 e4       	ldi	r21, 0x44	; 68
    1940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	8f 83       	std	Y+7, r24	; 0x07
    194a:	98 87       	std	Y+8, r25	; 0x08
    194c:	a9 87       	std	Y+9, r26	; 0x09
    194e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1950:	6f 81       	ldd	r22, Y+7	; 0x07
    1952:	78 85       	ldd	r23, Y+8	; 0x08
    1954:	89 85       	ldd	r24, Y+9	; 0x09
    1956:	9a 85       	ldd	r25, Y+10	; 0x0a
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	40 e8       	ldi	r20, 0x80	; 128
    195e:	5f e3       	ldi	r21, 0x3F	; 63
    1960:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1964:	88 23       	and	r24, r24
    1966:	2c f4       	brge	.+10     	; 0x1972 <CLCD_voidSendData+0x2a0>
		__ticks = 1;
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	9e 83       	std	Y+6, r25	; 0x06
    196e:	8d 83       	std	Y+5, r24	; 0x05
    1970:	3f c0       	rjmp	.+126    	; 0x19f0 <CLCD_voidSendData+0x31e>
	else if (__tmp > 65535)
    1972:	6f 81       	ldd	r22, Y+7	; 0x07
    1974:	78 85       	ldd	r23, Y+8	; 0x08
    1976:	89 85       	ldd	r24, Y+9	; 0x09
    1978:	9a 85       	ldd	r25, Y+10	; 0x0a
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	3f ef       	ldi	r19, 0xFF	; 255
    197e:	4f e7       	ldi	r20, 0x7F	; 127
    1980:	57 e4       	ldi	r21, 0x47	; 71
    1982:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1986:	18 16       	cp	r1, r24
    1988:	4c f5       	brge	.+82     	; 0x19dc <CLCD_voidSendData+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    198a:	6b 85       	ldd	r22, Y+11	; 0x0b
    198c:	7c 85       	ldd	r23, Y+12	; 0x0c
    198e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1990:	9e 85       	ldd	r25, Y+14	; 0x0e
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	40 e2       	ldi	r20, 0x20	; 32
    1998:	51 e4       	ldi	r21, 0x41	; 65
    199a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	bc 01       	movw	r22, r24
    19a4:	cd 01       	movw	r24, r26
    19a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19aa:	dc 01       	movw	r26, r24
    19ac:	cb 01       	movw	r24, r22
    19ae:	9e 83       	std	Y+6, r25	; 0x06
    19b0:	8d 83       	std	Y+5, r24	; 0x05
    19b2:	0f c0       	rjmp	.+30     	; 0x19d2 <CLCD_voidSendData+0x300>
    19b4:	88 ec       	ldi	r24, 0xC8	; 200
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	9c 83       	std	Y+4, r25	; 0x04
    19ba:	8b 83       	std	Y+3, r24	; 0x03
    19bc:	8b 81       	ldd	r24, Y+3	; 0x03
    19be:	9c 81       	ldd	r25, Y+4	; 0x04
    19c0:	01 97       	sbiw	r24, 0x01	; 1
    19c2:	f1 f7       	brne	.-4      	; 0x19c0 <CLCD_voidSendData+0x2ee>
    19c4:	9c 83       	std	Y+4, r25	; 0x04
    19c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19c8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ca:	9e 81       	ldd	r25, Y+6	; 0x06
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	9e 83       	std	Y+6, r25	; 0x06
    19d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d2:	8d 81       	ldd	r24, Y+5	; 0x05
    19d4:	9e 81       	ldd	r25, Y+6	; 0x06
    19d6:	00 97       	sbiw	r24, 0x00	; 0
    19d8:	69 f7       	brne	.-38     	; 0x19b4 <CLCD_voidSendData+0x2e2>
    19da:	14 c0       	rjmp	.+40     	; 0x1a04 <CLCD_voidSendData+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19dc:	6f 81       	ldd	r22, Y+7	; 0x07
    19de:	78 85       	ldd	r23, Y+8	; 0x08
    19e0:	89 85       	ldd	r24, Y+9	; 0x09
    19e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	9e 83       	std	Y+6, r25	; 0x06
    19ee:	8d 83       	std	Y+5, r24	; 0x05
    19f0:	8d 81       	ldd	r24, Y+5	; 0x05
    19f2:	9e 81       	ldd	r25, Y+6	; 0x06
    19f4:	9a 83       	std	Y+2, r25	; 0x02
    19f6:	89 83       	std	Y+1, r24	; 0x01
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
    19fa:	9a 81       	ldd	r25, Y+2	; 0x02
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	f1 f7       	brne	.-4      	; 0x19fc <CLCD_voidSendData+0x32a>
    1a00:	9a 83       	std	Y+2, r25	; 0x02
    1a02:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	CLCD_voidSendCommand(0x06);
    1a04:	86 e0       	ldi	r24, 0x06	; 6
    1a06:	0e 94 8b 09 	call	0x1316	; 0x1316 <CLCD_voidSendCommand>
#else
#error "In correct cconfigrtion of LCD_MODE"
#endif
}
    1a0a:	ac 96       	adiw	r28, 0x2c	; 44
    1a0c:	0f b6       	in	r0, 0x3f	; 63
    1a0e:	f8 94       	cli
    1a10:	de bf       	out	0x3e, r29	; 62
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	cd bf       	out	0x3d, r28	; 61
    1a16:	cf 91       	pop	r28
    1a18:	df 91       	pop	r29
    1a1a:	08 95       	ret

00001a1c <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    1a1c:	df 93       	push	r29
    1a1e:	cf 93       	push	r28
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62
    1a24:	e8 97       	sbiw	r28, 0x38	; 56
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	f8 94       	cli
    1a2a:	de bf       	out	0x3e, r29	; 62
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	cd bf       	out	0x3d, r28	; 61
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	a0 e2       	ldi	r26, 0x20	; 32
    1a36:	b2 e4       	ldi	r27, 0x42	; 66
    1a38:	8d ab       	std	Y+53, r24	; 0x35
    1a3a:	9e ab       	std	Y+54, r25	; 0x36
    1a3c:	af ab       	std	Y+55, r26	; 0x37
    1a3e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a40:	6d a9       	ldd	r22, Y+53	; 0x35
    1a42:	7e a9       	ldd	r23, Y+54	; 0x36
    1a44:	8f a9       	ldd	r24, Y+55	; 0x37
    1a46:	98 ad       	ldd	r25, Y+56	; 0x38
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	4a ef       	ldi	r20, 0xFA	; 250
    1a4e:	54 e4       	ldi	r21, 0x44	; 68
    1a50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	89 ab       	std	Y+49, r24	; 0x31
    1a5a:	9a ab       	std	Y+50, r25	; 0x32
    1a5c:	ab ab       	std	Y+51, r26	; 0x33
    1a5e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a60:	69 a9       	ldd	r22, Y+49	; 0x31
    1a62:	7a a9       	ldd	r23, Y+50	; 0x32
    1a64:	8b a9       	ldd	r24, Y+51	; 0x33
    1a66:	9c a9       	ldd	r25, Y+52	; 0x34
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	40 e8       	ldi	r20, 0x80	; 128
    1a6e:	5f e3       	ldi	r21, 0x3F	; 63
    1a70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a74:	88 23       	and	r24, r24
    1a76:	2c f4       	brge	.+10     	; 0x1a82 <CLCD_voidInit+0x66>
		__ticks = 1;
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	98 ab       	std	Y+48, r25	; 0x30
    1a7e:	8f a7       	std	Y+47, r24	; 0x2f
    1a80:	3f c0       	rjmp	.+126    	; 0x1b00 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1a82:	69 a9       	ldd	r22, Y+49	; 0x31
    1a84:	7a a9       	ldd	r23, Y+50	; 0x32
    1a86:	8b a9       	ldd	r24, Y+51	; 0x33
    1a88:	9c a9       	ldd	r25, Y+52	; 0x34
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	3f ef       	ldi	r19, 0xFF	; 255
    1a8e:	4f e7       	ldi	r20, 0x7F	; 127
    1a90:	57 e4       	ldi	r21, 0x47	; 71
    1a92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a96:	18 16       	cp	r1, r24
    1a98:	4c f5       	brge	.+82     	; 0x1aec <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a9a:	6d a9       	ldd	r22, Y+53	; 0x35
    1a9c:	7e a9       	ldd	r23, Y+54	; 0x36
    1a9e:	8f a9       	ldd	r24, Y+55	; 0x37
    1aa0:	98 ad       	ldd	r25, Y+56	; 0x38
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	40 e2       	ldi	r20, 0x20	; 32
    1aa8:	51 e4       	ldi	r21, 0x41	; 65
    1aaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	bc 01       	movw	r22, r24
    1ab4:	cd 01       	movw	r24, r26
    1ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	98 ab       	std	Y+48, r25	; 0x30
    1ac0:	8f a7       	std	Y+47, r24	; 0x2f
    1ac2:	0f c0       	rjmp	.+30     	; 0x1ae2 <CLCD_voidInit+0xc6>
    1ac4:	88 ec       	ldi	r24, 0xC8	; 200
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	9e a7       	std	Y+46, r25	; 0x2e
    1aca:	8d a7       	std	Y+45, r24	; 0x2d
    1acc:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ace:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ad0:	01 97       	sbiw	r24, 0x01	; 1
    1ad2:	f1 f7       	brne	.-4      	; 0x1ad0 <CLCD_voidInit+0xb4>
    1ad4:	9e a7       	std	Y+46, r25	; 0x2e
    1ad6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ada:	98 a9       	ldd	r25, Y+48	; 0x30
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	98 ab       	std	Y+48, r25	; 0x30
    1ae0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ae4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ae6:	00 97       	sbiw	r24, 0x00	; 0
    1ae8:	69 f7       	brne	.-38     	; 0x1ac4 <CLCD_voidInit+0xa8>
    1aea:	14 c0       	rjmp	.+40     	; 0x1b14 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aec:	69 a9       	ldd	r22, Y+49	; 0x31
    1aee:	7a a9       	ldd	r23, Y+50	; 0x32
    1af0:	8b a9       	ldd	r24, Y+51	; 0x33
    1af2:	9c a9       	ldd	r25, Y+52	; 0x34
    1af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	98 ab       	std	Y+48, r25	; 0x30
    1afe:	8f a7       	std	Y+47, r24	; 0x2f
    1b00:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b02:	98 a9       	ldd	r25, Y+48	; 0x30
    1b04:	9c a7       	std	Y+44, r25	; 0x2c
    1b06:	8b a7       	std	Y+43, r24	; 0x2b
    1b08:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b0a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	f1 f7       	brne	.-4      	; 0x1b0c <CLCD_voidInit+0xf0>
    1b10:	9c a7       	std	Y+44, r25	; 0x2c
    1b12:	8b a7       	std	Y+43, r24	; 0x2b
	CLCD_voidSendCommand(0b00000001);
#elif CLCD_CHIOCE_MODE==_4_BIT_MODE
	/*WAIT FOR MORE THEN 30 MS*/
	_delay_ms(40);
	/*function set command: Set Bit 5 */
	CLCD_voidSendCommand(0b00100000);
    1b14:	80 e2       	ldi	r24, 0x20	; 32
    1b16:	0e 94 8b 09 	call	0x1316	; 0x1316 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(0b00100000);
    1b1a:	80 e2       	ldi	r24, 0x20	; 32
    1b1c:	0e 94 8b 09 	call	0x1316	; 0x1316 <CLCD_voidSendCommand>

	/*function set command:(7_Bit) N --> Lines,(6_Bit) F --> 5*8 font */
	CLCD_voidSendCommand(0b10000000);
    1b20:	80 e8       	ldi	r24, 0x80	; 128
    1b22:	0e 94 8b 09 	call	0x1316	; 0x1316 <CLCD_voidSendCommand>
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	a0 e8       	ldi	r26, 0x80	; 128
    1b2c:	bf e3       	ldi	r27, 0x3F	; 63
    1b2e:	8f a3       	std	Y+39, r24	; 0x27
    1b30:	98 a7       	std	Y+40, r25	; 0x28
    1b32:	a9 a7       	std	Y+41, r26	; 0x29
    1b34:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b36:	6f a1       	ldd	r22, Y+39	; 0x27
    1b38:	78 a5       	ldd	r23, Y+40	; 0x28
    1b3a:	89 a5       	ldd	r24, Y+41	; 0x29
    1b3c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	4a ef       	ldi	r20, 0xFA	; 250
    1b44:	54 e4       	ldi	r21, 0x44	; 68
    1b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	8b a3       	std	Y+35, r24	; 0x23
    1b50:	9c a3       	std	Y+36, r25	; 0x24
    1b52:	ad a3       	std	Y+37, r26	; 0x25
    1b54:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b56:	6b a1       	ldd	r22, Y+35	; 0x23
    1b58:	7c a1       	ldd	r23, Y+36	; 0x24
    1b5a:	8d a1       	ldd	r24, Y+37	; 0x25
    1b5c:	9e a1       	ldd	r25, Y+38	; 0x26
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	40 e8       	ldi	r20, 0x80	; 128
    1b64:	5f e3       	ldi	r21, 0x3F	; 63
    1b66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b6a:	88 23       	and	r24, r24
    1b6c:	2c f4       	brge	.+10     	; 0x1b78 <CLCD_voidInit+0x15c>
		__ticks = 1;
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	9a a3       	std	Y+34, r25	; 0x22
    1b74:	89 a3       	std	Y+33, r24	; 0x21
    1b76:	3f c0       	rjmp	.+126    	; 0x1bf6 <CLCD_voidInit+0x1da>
	else if (__tmp > 65535)
    1b78:	6b a1       	ldd	r22, Y+35	; 0x23
    1b7a:	7c a1       	ldd	r23, Y+36	; 0x24
    1b7c:	8d a1       	ldd	r24, Y+37	; 0x25
    1b7e:	9e a1       	ldd	r25, Y+38	; 0x26
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	3f ef       	ldi	r19, 0xFF	; 255
    1b84:	4f e7       	ldi	r20, 0x7F	; 127
    1b86:	57 e4       	ldi	r21, 0x47	; 71
    1b88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b8c:	18 16       	cp	r1, r24
    1b8e:	4c f5       	brge	.+82     	; 0x1be2 <CLCD_voidInit+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b90:	6f a1       	ldd	r22, Y+39	; 0x27
    1b92:	78 a5       	ldd	r23, Y+40	; 0x28
    1b94:	89 a5       	ldd	r24, Y+41	; 0x29
    1b96:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 e2       	ldi	r20, 0x20	; 32
    1b9e:	51 e4       	ldi	r21, 0x41	; 65
    1ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	bc 01       	movw	r22, r24
    1baa:	cd 01       	movw	r24, r26
    1bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	9a a3       	std	Y+34, r25	; 0x22
    1bb6:	89 a3       	std	Y+33, r24	; 0x21
    1bb8:	0f c0       	rjmp	.+30     	; 0x1bd8 <CLCD_voidInit+0x1bc>
    1bba:	88 ec       	ldi	r24, 0xC8	; 200
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	98 a3       	std	Y+32, r25	; 0x20
    1bc0:	8f 8f       	std	Y+31, r24	; 0x1f
    1bc2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bc4:	98 a1       	ldd	r25, Y+32	; 0x20
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	f1 f7       	brne	.-4      	; 0x1bc6 <CLCD_voidInit+0x1aa>
    1bca:	98 a3       	std	Y+32, r25	; 0x20
    1bcc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bce:	89 a1       	ldd	r24, Y+33	; 0x21
    1bd0:	9a a1       	ldd	r25, Y+34	; 0x22
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	9a a3       	std	Y+34, r25	; 0x22
    1bd6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd8:	89 a1       	ldd	r24, Y+33	; 0x21
    1bda:	9a a1       	ldd	r25, Y+34	; 0x22
    1bdc:	00 97       	sbiw	r24, 0x00	; 0
    1bde:	69 f7       	brne	.-38     	; 0x1bba <CLCD_voidInit+0x19e>
    1be0:	14 c0       	rjmp	.+40     	; 0x1c0a <CLCD_voidInit+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be2:	6b a1       	ldd	r22, Y+35	; 0x23
    1be4:	7c a1       	ldd	r23, Y+36	; 0x24
    1be6:	8d a1       	ldd	r24, Y+37	; 0x25
    1be8:	9e a1       	ldd	r25, Y+38	; 0x26
    1bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	9a a3       	std	Y+34, r25	; 0x22
    1bf4:	89 a3       	std	Y+33, r24	; 0x21
    1bf6:	89 a1       	ldd	r24, Y+33	; 0x21
    1bf8:	9a a1       	ldd	r25, Y+34	; 0x22
    1bfa:	9e 8f       	std	Y+30, r25	; 0x1e
    1bfc:	8d 8f       	std	Y+29, r24	; 0x1d
    1bfe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c00:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	f1 f7       	brne	.-4      	; 0x1c02 <CLCD_voidInit+0x1e6>
    1c06:	9e 8f       	std	Y+30, r25	; 0x1e
    1c08:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	CLCD_voidSendCommand(0b0000);
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	0e 94 8b 09 	call	0x1316	; 0x1316 <CLCD_voidSendCommand>
	/*Display No/00f ctrl  */
	/*Set Bit 7 ,(6_Bit) D --> display enable ,C --> disable cursor ,B --> no blink cursor*/
	CLCD_voidSendCommand(0b11000000);
    1c10:	80 ec       	ldi	r24, 0xC0	; 192
    1c12:	0e 94 8b 09 	call	0x1316	; 0x1316 <CLCD_voidSendCommand>
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	a0 e8       	ldi	r26, 0x80	; 128
    1c1c:	bf e3       	ldi	r27, 0x3F	; 63
    1c1e:	89 8f       	std	Y+25, r24	; 0x19
    1c20:	9a 8f       	std	Y+26, r25	; 0x1a
    1c22:	ab 8f       	std	Y+27, r26	; 0x1b
    1c24:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c26:	69 8d       	ldd	r22, Y+25	; 0x19
    1c28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	4a ef       	ldi	r20, 0xFA	; 250
    1c34:	54 e4       	ldi	r21, 0x44	; 68
    1c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	8d 8b       	std	Y+21, r24	; 0x15
    1c40:	9e 8b       	std	Y+22, r25	; 0x16
    1c42:	af 8b       	std	Y+23, r26	; 0x17
    1c44:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c46:	6d 89       	ldd	r22, Y+21	; 0x15
    1c48:	7e 89       	ldd	r23, Y+22	; 0x16
    1c4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	40 e8       	ldi	r20, 0x80	; 128
    1c54:	5f e3       	ldi	r21, 0x3F	; 63
    1c56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c5a:	88 23       	and	r24, r24
    1c5c:	2c f4       	brge	.+10     	; 0x1c68 <CLCD_voidInit+0x24c>
		__ticks = 1;
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	9c 8b       	std	Y+20, r25	; 0x14
    1c64:	8b 8b       	std	Y+19, r24	; 0x13
    1c66:	3f c0       	rjmp	.+126    	; 0x1ce6 <CLCD_voidInit+0x2ca>
	else if (__tmp > 65535)
    1c68:	6d 89       	ldd	r22, Y+21	; 0x15
    1c6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	3f ef       	ldi	r19, 0xFF	; 255
    1c74:	4f e7       	ldi	r20, 0x7F	; 127
    1c76:	57 e4       	ldi	r21, 0x47	; 71
    1c78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c7c:	18 16       	cp	r1, r24
    1c7e:	4c f5       	brge	.+82     	; 0x1cd2 <CLCD_voidInit+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c80:	69 8d       	ldd	r22, Y+25	; 0x19
    1c82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	40 e2       	ldi	r20, 0x20	; 32
    1c8e:	51 e4       	ldi	r21, 0x41	; 65
    1c90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	bc 01       	movw	r22, r24
    1c9a:	cd 01       	movw	r24, r26
    1c9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	9c 8b       	std	Y+20, r25	; 0x14
    1ca6:	8b 8b       	std	Y+19, r24	; 0x13
    1ca8:	0f c0       	rjmp	.+30     	; 0x1cc8 <CLCD_voidInit+0x2ac>
    1caa:	88 ec       	ldi	r24, 0xC8	; 200
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	9a 8b       	std	Y+18, r25	; 0x12
    1cb0:	89 8b       	std	Y+17, r24	; 0x11
    1cb2:	89 89       	ldd	r24, Y+17	; 0x11
    1cb4:	9a 89       	ldd	r25, Y+18	; 0x12
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	f1 f7       	brne	.-4      	; 0x1cb6 <CLCD_voidInit+0x29a>
    1cba:	9a 8b       	std	Y+18, r25	; 0x12
    1cbc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cbe:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc0:	9c 89       	ldd	r25, Y+20	; 0x14
    1cc2:	01 97       	sbiw	r24, 0x01	; 1
    1cc4:	9c 8b       	std	Y+20, r25	; 0x14
    1cc6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cca:	9c 89       	ldd	r25, Y+20	; 0x14
    1ccc:	00 97       	sbiw	r24, 0x00	; 0
    1cce:	69 f7       	brne	.-38     	; 0x1caa <CLCD_voidInit+0x28e>
    1cd0:	14 c0       	rjmp	.+40     	; 0x1cfa <CLCD_voidInit+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd2:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd4:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	9c 8b       	std	Y+20, r25	; 0x14
    1ce4:	8b 8b       	std	Y+19, r24	; 0x13
    1ce6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ce8:	9c 89       	ldd	r25, Y+20	; 0x14
    1cea:	98 8b       	std	Y+16, r25	; 0x10
    1cec:	8f 87       	std	Y+15, r24	; 0x0f
    1cee:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cf0:	98 89       	ldd	r25, Y+16	; 0x10
    1cf2:	01 97       	sbiw	r24, 0x01	; 1
    1cf4:	f1 f7       	brne	.-4      	; 0x1cf2 <CLCD_voidInit+0x2d6>
    1cf6:	98 8b       	std	Y+16, r25	; 0x10
    1cf8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLCD_voidSendCommand(0b0000);
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	0e 94 8b 09 	call	0x1316	; 0x1316 <CLCD_voidSendCommand>
	/*Display Clear */
	CLCD_voidSendCommand(0b00010000);
    1d00:	80 e1       	ldi	r24, 0x10	; 16
    1d02:	0e 94 8b 09 	call	0x1316	; 0x1316 <CLCD_voidSendCommand>
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	a0 e0       	ldi	r26, 0x00	; 0
    1d0c:	b0 e4       	ldi	r27, 0x40	; 64
    1d0e:	8b 87       	std	Y+11, r24	; 0x0b
    1d10:	9c 87       	std	Y+12, r25	; 0x0c
    1d12:	ad 87       	std	Y+13, r26	; 0x0d
    1d14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	4a ef       	ldi	r20, 0xFA	; 250
    1d24:	54 e4       	ldi	r21, 0x44	; 68
    1d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	8f 83       	std	Y+7, r24	; 0x07
    1d30:	98 87       	std	Y+8, r25	; 0x08
    1d32:	a9 87       	std	Y+9, r26	; 0x09
    1d34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d36:	6f 81       	ldd	r22, Y+7	; 0x07
    1d38:	78 85       	ldd	r23, Y+8	; 0x08
    1d3a:	89 85       	ldd	r24, Y+9	; 0x09
    1d3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	40 e8       	ldi	r20, 0x80	; 128
    1d44:	5f e3       	ldi	r21, 0x3F	; 63
    1d46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d4a:	88 23       	and	r24, r24
    1d4c:	2c f4       	brge	.+10     	; 0x1d58 <CLCD_voidInit+0x33c>
		__ticks = 1;
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	9e 83       	std	Y+6, r25	; 0x06
    1d54:	8d 83       	std	Y+5, r24	; 0x05
    1d56:	3f c0       	rjmp	.+126    	; 0x1dd6 <CLCD_voidInit+0x3ba>
	else if (__tmp > 65535)
    1d58:	6f 81       	ldd	r22, Y+7	; 0x07
    1d5a:	78 85       	ldd	r23, Y+8	; 0x08
    1d5c:	89 85       	ldd	r24, Y+9	; 0x09
    1d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	3f ef       	ldi	r19, 0xFF	; 255
    1d64:	4f e7       	ldi	r20, 0x7F	; 127
    1d66:	57 e4       	ldi	r21, 0x47	; 71
    1d68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d6c:	18 16       	cp	r1, r24
    1d6e:	4c f5       	brge	.+82     	; 0x1dc2 <CLCD_voidInit+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d70:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d72:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d74:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d76:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	40 e2       	ldi	r20, 0x20	; 32
    1d7e:	51 e4       	ldi	r21, 0x41	; 65
    1d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	bc 01       	movw	r22, r24
    1d8a:	cd 01       	movw	r24, r26
    1d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	9e 83       	std	Y+6, r25	; 0x06
    1d96:	8d 83       	std	Y+5, r24	; 0x05
    1d98:	0f c0       	rjmp	.+30     	; 0x1db8 <CLCD_voidInit+0x39c>
    1d9a:	88 ec       	ldi	r24, 0xC8	; 200
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	9c 83       	std	Y+4, r25	; 0x04
    1da0:	8b 83       	std	Y+3, r24	; 0x03
    1da2:	8b 81       	ldd	r24, Y+3	; 0x03
    1da4:	9c 81       	ldd	r25, Y+4	; 0x04
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	f1 f7       	brne	.-4      	; 0x1da6 <CLCD_voidInit+0x38a>
    1daa:	9c 83       	std	Y+4, r25	; 0x04
    1dac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dae:	8d 81       	ldd	r24, Y+5	; 0x05
    1db0:	9e 81       	ldd	r25, Y+6	; 0x06
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	9e 83       	std	Y+6, r25	; 0x06
    1db6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dba:	9e 81       	ldd	r25, Y+6	; 0x06
    1dbc:	00 97       	sbiw	r24, 0x00	; 0
    1dbe:	69 f7       	brne	.-38     	; 0x1d9a <CLCD_voidInit+0x37e>
    1dc0:	14 c0       	rjmp	.+40     	; 0x1dea <CLCD_voidInit+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc2:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc4:	78 85       	ldd	r23, Y+8	; 0x08
    1dc6:	89 85       	ldd	r24, Y+9	; 0x09
    1dc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	9e 83       	std	Y+6, r25	; 0x06
    1dd4:	8d 83       	std	Y+5, r24	; 0x05
    1dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dda:	9a 83       	std	Y+2, r25	; 0x02
    1ddc:	89 83       	std	Y+1, r24	; 0x01
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	9a 81       	ldd	r25, Y+2	; 0x02
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	f1 f7       	brne	.-4      	; 0x1de2 <CLCD_voidInit+0x3c6>
    1de6:	9a 83       	std	Y+2, r25	; 0x02
    1de8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	iniIsFinich=1;
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	80 93 a4 01 	sts	0x01A4, r24
#else
#error "In correct cconfigrtion of LCD_MODE"
#endif
}
    1df0:	e8 96       	adiw	r28, 0x38	; 56
    1df2:	0f b6       	in	r0, 0x3f	; 63
    1df4:	f8 94       	cli
    1df6:	de bf       	out	0x3e, r29	; 62
    1df8:	0f be       	out	0x3f, r0	; 63
    1dfa:	cd bf       	out	0x3d, r28	; 61
    1dfc:	cf 91       	pop	r28
    1dfe:	df 91       	pop	r29
    1e00:	08 95       	ret

00001e02 <CLCD_voidSendString>:
void CLCD_voidSendString(const char* Copy_pcString)//char ASCII Value Constant not allow the func to change the sent string
{
    1e02:	df 93       	push	r29
    1e04:	cf 93       	push	r28
    1e06:	00 d0       	rcall	.+0      	; 0x1e08 <CLCD_voidSendString+0x6>
    1e08:	0f 92       	push	r0
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
    1e0e:	9b 83       	std	Y+3, r25	; 0x03
    1e10:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8cnt=0;
    1e12:	19 82       	std	Y+1, r1	; 0x01
    1e14:	0e c0       	rjmp	.+28     	; 0x1e32 <CLCD_voidSendString+0x30>
	while(Copy_pcString[Local_u8cnt]!='\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8cnt]);
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
    1e18:	28 2f       	mov	r18, r24
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e20:	fc 01       	movw	r30, r24
    1e22:	e2 0f       	add	r30, r18
    1e24:	f3 1f       	adc	r31, r19
    1e26:	80 81       	ld	r24, Z
    1e28:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <CLCD_voidSendData>
		Local_u8cnt++;
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
    1e2e:	8f 5f       	subi	r24, 0xFF	; 255
    1e30:	89 83       	std	Y+1, r24	; 0x01
#endif
}
void CLCD_voidSendString(const char* Copy_pcString)//char ASCII Value Constant not allow the func to change the sent string
{
	u8 Local_u8cnt=0;
	while(Copy_pcString[Local_u8cnt]!='\0')
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
    1e34:	28 2f       	mov	r18, r24
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	e2 0f       	add	r30, r18
    1e40:	f3 1f       	adc	r31, r19
    1e42:	80 81       	ld	r24, Z
    1e44:	88 23       	and	r24, r24
    1e46:	39 f7       	brne	.-50     	; 0x1e16 <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8cnt]);
		Local_u8cnt++;
	}
}
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	cf 91       	pop	r28
    1e50:	df 91       	pop	r29
    1e52:	08 95       	ret

00001e54 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1e54:	df 93       	push	r29
    1e56:	cf 93       	push	r28
    1e58:	00 d0       	rcall	.+0      	; 0x1e5a <CLCD_voidGoToXY+0x6>
    1e5a:	0f 92       	push	r0
    1e5c:	cd b7       	in	r28, 0x3d	; 61
    1e5e:	de b7       	in	r29, 0x3e	; 62
    1e60:	8a 83       	std	Y+2, r24	; 0x02
    1e62:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
    1e64:	8a 81       	ldd	r24, Y+2	; 0x02
    1e66:	88 23       	and	r24, r24
    1e68:	51 f4       	brne	.+20     	; 0x1e7e <CLCD_voidGoToXY+0x2a>
	{
		if (Copy_u8YPos > 15) {
    1e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6c:	80 31       	cpi	r24, 0x10	; 16
    1e6e:	20 f0       	brcs	.+8      	; 0x1e78 <CLCD_voidGoToXY+0x24>
			Local_u8Address = 0x40 + Copy_u8YPos;
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
    1e72:	80 5c       	subi	r24, 0xC0	; 192
    1e74:	89 83       	std	Y+1, r24	; 0x01
    1e76:	09 c0       	rjmp	.+18     	; 0x1e8a <CLCD_voidGoToXY+0x36>
		} else {
			Local_u8Address = Copy_u8YPos;
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7a:	89 83       	std	Y+1, r24	; 0x01
    1e7c:	06 c0       	rjmp	.+12     	; 0x1e8a <CLCD_voidGoToXY+0x36>
		}
	}
	else if(Copy_u8XPos==1)
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	81 30       	cpi	r24, 0x01	; 1
    1e82:	19 f4       	brne	.+6      	; 0x1e8a <CLCD_voidGoToXY+0x36>
	{
		Local_u8Address=0x40+Copy_u8YPos;
    1e84:	8b 81       	ldd	r24, Y+3	; 0x03
    1e86:	80 5c       	subi	r24, 0xC0	; 192
    1e88:	89 83       	std	Y+1, r24	; 0x01
	}
	//put command from data sheet
	CLCD_voidSendCommand(Local_u8Address+128);
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	80 58       	subi	r24, 0x80	; 128
    1e8e:	0e 94 8b 09 	call	0x1316	; 0x1316 <CLCD_voidSendCommand>
}
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	cf 91       	pop	r28
    1e9a:	df 91       	pop	r29
    1e9c:	08 95       	ret

00001e9e <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNmber,u8 Copy_u8XPos,u8 Copy_u8Ypos)
{
    1e9e:	df 93       	push	r29
    1ea0:	cf 93       	push	r28
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
    1ea6:	27 97       	sbiw	r28, 0x07	; 7
    1ea8:	0f b6       	in	r0, 0x3f	; 63
    1eaa:	f8 94       	cli
    1eac:	de bf       	out	0x3e, r29	; 62
    1eae:	0f be       	out	0x3f, r0	; 63
    1eb0:	cd bf       	out	0x3d, r28	; 61
    1eb2:	9c 83       	std	Y+4, r25	; 0x04
    1eb4:	8b 83       	std	Y+3, r24	; 0x03
    1eb6:	6d 83       	std	Y+5, r22	; 0x05
    1eb8:	4e 83       	std	Y+6, r20	; 0x06
    1eba:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress=0;
    1ebc:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8iterator;
	/*Calculate the CGRAM address whose each block is 8 bytes */
	Local_u8CGRAMAddress= Copy_u8PatternNmber*8;
    1ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec0:	88 2f       	mov	r24, r24
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	88 0f       	add	r24, r24
    1ec6:	99 1f       	adc	r25, r25
    1ec8:	88 0f       	add	r24, r24
    1eca:	99 1f       	adc	r25, r25
    1ecc:	88 0f       	add	r24, r24
    1ece:	99 1f       	adc	r25, r25
    1ed0:	8a 83       	std	Y+2, r24	; 0x02

	/*Send CGRAM address command to LCD, with setting bit 6 , clear bit 7 */
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
    1ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed4:	80 5c       	subi	r24, 0xC0	; 192
    1ed6:	0e 94 8b 09 	call	0x1316	; 0x1316 <CLCD_voidSendCommand>

	/*Write the pattern into CGRAM */
	for(Local_u8iterator=0;Local_u8iterator<8;Local_u8iterator++)
    1eda:	19 82       	std	Y+1, r1	; 0x01
    1edc:	0e c0       	rjmp	.+28     	; 0x1efa <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8iterator]);
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
    1ee0:	28 2f       	mov	r18, r24
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee8:	fc 01       	movw	r30, r24
    1eea:	e2 0f       	add	r30, r18
    1eec:	f3 1f       	adc	r31, r19
    1eee:	80 81       	ld	r24, Z
    1ef0:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <CLCD_voidSendData>

	/*Send CGRAM address command to LCD, with setting bit 6 , clear bit 7 */
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/*Write the pattern into CGRAM */
	for(Local_u8iterator=0;Local_u8iterator<8;Local_u8iterator++)
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	8f 5f       	subi	r24, 0xFF	; 255
    1ef8:	89 83       	std	Y+1, r24	; 0x01
    1efa:	89 81       	ldd	r24, Y+1	; 0x01
    1efc:	88 30       	cpi	r24, 0x08	; 8
    1efe:	78 f3       	brcs	.-34     	; 0x1ede <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8iterator]);
	}
	/* Go back to DDRAM to display the pattern */
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8Ypos);
    1f00:	8e 81       	ldd	r24, Y+6	; 0x06
    1f02:	6f 81       	ldd	r22, Y+7	; 0x07
    1f04:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <CLCD_voidGoToXY>

	/* Display the pattern written  in the CGRAM */
	CLCD_voidSendData(Copy_u8PatternNmber);
    1f08:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0a:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <CLCD_voidSendData>

}
    1f0e:	27 96       	adiw	r28, 0x07	; 7
    1f10:	0f b6       	in	r0, 0x3f	; 63
    1f12:	f8 94       	cli
    1f14:	de bf       	out	0x3e, r29	; 62
    1f16:	0f be       	out	0x3f, r0	; 63
    1f18:	cd bf       	out	0x3d, r28	; 61
    1f1a:	cf 91       	pop	r28
    1f1c:	df 91       	pop	r29
    1f1e:	08 95       	ret

00001f20 <CLCD_voidWriteNumber>:

void CLCD_voidWriteNumber(u16 Copy_u16Number)
{
    1f20:	df 93       	push	r29
    1f22:	cf 93       	push	r28
    1f24:	00 d0       	rcall	.+0      	; 0x1f26 <CLCD_voidWriteNumber+0x6>
    1f26:	00 d0       	rcall	.+0      	; 0x1f28 <CLCD_voidWriteNumber+0x8>
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	9c 83       	std	Y+4, r25	; 0x04
    1f2e:	8b 83       	std	Y+3, r24	; 0x03

	u8 Max_Digits = Num_length(Copy_u16Number);
    1f30:	8b 81       	ldd	r24, Y+3	; 0x03
    1f32:	9c 81       	ldd	r25, Y+4	; 0x04
    1f34:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <Num_length>
    1f38:	8a 83       	std	Y+2, r24	; 0x02
	for (s8 i = Max_Digits; i > 0; i--) {
    1f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3c:	89 83       	std	Y+1, r24	; 0x01
    1f3e:	1d c0       	rjmp	.+58     	; 0x1f7a <CLCD_voidWriteNumber+0x5a>
		CLCD_voidSendData((Copy_u16Number / Multi_N_10(i - 1)) + '0');
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
    1f42:	81 50       	subi	r24, 0x01	; 1
    1f44:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <Multi_N_10>
    1f48:	9c 01       	movw	r18, r24
    1f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4e:	b9 01       	movw	r22, r18
    1f50:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <__udivmodhi4>
    1f54:	cb 01       	movw	r24, r22
    1f56:	80 5d       	subi	r24, 0xD0	; 208
    1f58:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <CLCD_voidSendData>
		Copy_u16Number = (Copy_u16Number % Multi_N_10(i - 1));
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
    1f5e:	81 50       	subi	r24, 0x01	; 1
    1f60:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <Multi_N_10>
    1f64:	9c 01       	movw	r18, r24
    1f66:	8b 81       	ldd	r24, Y+3	; 0x03
    1f68:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6a:	b9 01       	movw	r22, r18
    1f6c:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <__udivmodhi4>
    1f70:	9c 83       	std	Y+4, r25	; 0x04
    1f72:	8b 83       	std	Y+3, r24	; 0x03

void CLCD_voidWriteNumber(u16 Copy_u16Number)
{

	u8 Max_Digits = Num_length(Copy_u16Number);
	for (s8 i = Max_Digits; i > 0; i--) {
    1f74:	89 81       	ldd	r24, Y+1	; 0x01
    1f76:	81 50       	subi	r24, 0x01	; 1
    1f78:	89 83       	std	Y+1, r24	; 0x01
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
    1f7c:	18 16       	cp	r1, r24
    1f7e:	04 f3       	brlt	.-64     	; 0x1f40 <CLCD_voidWriteNumber+0x20>
		CLCD_voidSendData((Copy_u16Number / Multi_N_10(i - 1)) + '0');
		Copy_u16Number = (Copy_u16Number % Multi_N_10(i - 1));
	}
}
    1f80:	0f 90       	pop	r0
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	cf 91       	pop	r28
    1f8a:	df 91       	pop	r29
    1f8c:	08 95       	ret

00001f8e <Num_length>:


static u8 Num_length(u16 num) {
    1f8e:	df 93       	push	r29
    1f90:	cf 93       	push	r28
    1f92:	00 d0       	rcall	.+0      	; 0x1f94 <Num_length+0x6>
    1f94:	00 d0       	rcall	.+0      	; 0x1f96 <Num_length+0x8>
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
    1f9a:	9b 83       	std	Y+3, r25	; 0x03
    1f9c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Cnt = 0;
    1f9e:	19 82       	std	Y+1, r1	; 0x01
	if(num == 0)
    1fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa2:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa4:	00 97       	sbiw	r24, 0x00	; 0
    1fa6:	81 f4       	brne	.+32     	; 0x1fc8 <Num_length+0x3a>
		return 1;
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	8c 83       	std	Y+4, r24	; 0x04
    1fac:	13 c0       	rjmp	.+38     	; 0x1fd4 <Num_length+0x46>
	while (num != 0) {
		num /= 10;
    1fae:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb2:	2a e0       	ldi	r18, 0x0A	; 10
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	b9 01       	movw	r22, r18
    1fb8:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <__udivmodhi4>
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	9b 83       	std	Y+3, r25	; 0x03
    1fc0:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8Cnt++;
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
    1fc4:	8f 5f       	subi	r24, 0xFF	; 255
    1fc6:	89 83       	std	Y+1, r24	; 0x01

static u8 Num_length(u16 num) {
	u8 Local_u8Cnt = 0;
	if(num == 0)
		return 1;
	while (num != 0) {
    1fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fca:	9b 81       	ldd	r25, Y+3	; 0x03
    1fcc:	00 97       	sbiw	r24, 0x00	; 0
    1fce:	79 f7       	brne	.-34     	; 0x1fae <Num_length+0x20>
		num /= 10;
		Local_u8Cnt++;
	}
	return Local_u8Cnt;
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	8c 83       	std	Y+4, r24	; 0x04
    1fd4:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1fd6:	0f 90       	pop	r0
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	08 95       	ret

00001fe4 <Multi_N_10>:
static u16 Multi_N_10(u8 N) {
    1fe4:	df 93       	push	r29
    1fe6:	cf 93       	push	r28
    1fe8:	00 d0       	rcall	.+0      	; 0x1fea <Multi_N_10+0x6>
    1fea:	00 d0       	rcall	.+0      	; 0x1fec <Multi_N_10+0x8>
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
    1ff0:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8Cnt;
	u16 p = 1;
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	9a 83       	std	Y+2, r25	; 0x02
    1ff8:	89 83       	std	Y+1, r24	; 0x01
	for (Local_u8Cnt = 0; Local_u8Cnt < N; Local_u8Cnt++)
    1ffa:	1b 82       	std	Y+3, r1	; 0x03
    1ffc:	11 c0       	rjmp	.+34     	; 0x2020 <Multi_N_10+0x3c>
		p *= 10;
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	9a 81       	ldd	r25, Y+2	; 0x02
    2002:	9c 01       	movw	r18, r24
    2004:	22 0f       	add	r18, r18
    2006:	33 1f       	adc	r19, r19
    2008:	c9 01       	movw	r24, r18
    200a:	88 0f       	add	r24, r24
    200c:	99 1f       	adc	r25, r25
    200e:	88 0f       	add	r24, r24
    2010:	99 1f       	adc	r25, r25
    2012:	82 0f       	add	r24, r18
    2014:	93 1f       	adc	r25, r19
    2016:	9a 83       	std	Y+2, r25	; 0x02
    2018:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8Cnt;
}
static u16 Multi_N_10(u8 N) {
	u8 Local_u8Cnt;
	u16 p = 1;
	for (Local_u8Cnt = 0; Local_u8Cnt < N; Local_u8Cnt++)
    201a:	8b 81       	ldd	r24, Y+3	; 0x03
    201c:	8f 5f       	subi	r24, 0xFF	; 255
    201e:	8b 83       	std	Y+3, r24	; 0x03
    2020:	9b 81       	ldd	r25, Y+3	; 0x03
    2022:	8c 81       	ldd	r24, Y+4	; 0x04
    2024:	98 17       	cp	r25, r24
    2026:	58 f3       	brcs	.-42     	; 0x1ffe <Multi_N_10+0x1a>
		p *= 10;
	return p;
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
    2034:	cf 91       	pop	r28
    2036:	df 91       	pop	r29
    2038:	08 95       	ret

0000203a <DAC_voidSetAnalogValue>:
#include "../HAL/DAC_interface.h"
#include "../HAL/DAC_config.h"
#include "../HAL/DAC_private.h"

void DAC_voidSetAnalogValue(u8 Copy_u8Port,u16 Copy_u16Value_mV)
{
    203a:	df 93       	push	r29
    203c:	cf 93       	push	r28
    203e:	00 d0       	rcall	.+0      	; 0x2040 <DAC_voidSetAnalogValue+0x6>
    2040:	0f 92       	push	r0
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62
    2046:	89 83       	std	Y+1, r24	; 0x01
    2048:	7b 83       	std	Y+3, r23	; 0x03
    204a:	6a 83       	std	Y+2, r22	; 0x02
	DIO_u8SetPortValue(Copy_u8Port,(u8)((u16)((Copy_u16Value_mV*255UL)/5000UL)));
    204c:	8a 81       	ldd	r24, Y+2	; 0x02
    204e:	9b 81       	ldd	r25, Y+3	; 0x03
    2050:	cc 01       	movw	r24, r24
    2052:	a0 e0       	ldi	r26, 0x00	; 0
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	2f ef       	ldi	r18, 0xFF	; 255
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	40 e0       	ldi	r20, 0x00	; 0
    205c:	50 e0       	ldi	r21, 0x00	; 0
    205e:	bc 01       	movw	r22, r24
    2060:	cd 01       	movw	r24, r26
    2062:	0e 94 67 26 	call	0x4cce	; 0x4cce <__mulsi3>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	28 e8       	ldi	r18, 0x88	; 136
    206c:	33 e1       	ldi	r19, 0x13	; 19
    206e:	40 e0       	ldi	r20, 0x00	; 0
    2070:	50 e0       	ldi	r21, 0x00	; 0
    2072:	bc 01       	movw	r22, r24
    2074:	cd 01       	movw	r24, r26
    2076:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <__udivmodsi4>
    207a:	da 01       	movw	r26, r20
    207c:	c9 01       	movw	r24, r18
    207e:	98 2f       	mov	r25, r24
    2080:	89 81       	ldd	r24, Y+1	; 0x01
    2082:	69 2f       	mov	r22, r25
    2084:	0e 94 63 11 	call	0x22c6	; 0x22c6 <DIO_u8SetPortValue>
}
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	08 95       	ret

00002094 <DIO_u8SetPinValue>:
#include "../MCAL/DIO_config.h"
#include "../MCAL/DIO_interface.h"
#include "../MCAL/DIO_register.h"

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
    2094:	df 93       	push	r29
    2096:	cf 93       	push	r28
    2098:	cd b7       	in	r28, 0x3d	; 61
    209a:	de b7       	in	r29, 0x3e	; 62
    209c:	28 97       	sbiw	r28, 0x08	; 8
    209e:	0f b6       	in	r0, 0x3f	; 63
    20a0:	f8 94       	cli
    20a2:	de bf       	out	0x3e, r29	; 62
    20a4:	0f be       	out	0x3f, r0	; 63
    20a6:	cd bf       	out	0x3d, r28	; 61
    20a8:	8a 83       	std	Y+2, r24	; 0x02
    20aa:	6b 83       	std	Y+3, r22	; 0x03
    20ac:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    20ae:	19 82       	std	Y+1, r1	; 0x01
	if(DIO_PIN_HIGH==Copy_u8Value)
    20b0:	8c 81       	ldd	r24, Y+4	; 0x04
    20b2:	81 30       	cpi	r24, 0x01	; 1
    20b4:	09 f0       	breq	.+2      	; 0x20b8 <DIO_u8SetPinValue+0x24>
    20b6:	79 c0       	rjmp	.+242    	; 0x21aa <DIO_u8SetPinValue+0x116>
	{
		if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    20b8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ba:	88 30       	cpi	r24, 0x08	; 8
    20bc:	08 f0       	brcs	.+2      	; 0x20c0 <DIO_u8SetPinValue+0x2c>
    20be:	72 c0       	rjmp	.+228    	; 0x21a4 <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
    20c0:	8a 81       	ldd	r24, Y+2	; 0x02
    20c2:	28 2f       	mov	r18, r24
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	38 87       	std	Y+8, r19	; 0x08
    20c8:	2f 83       	std	Y+7, r18	; 0x07
    20ca:	8f 81       	ldd	r24, Y+7	; 0x07
    20cc:	98 85       	ldd	r25, Y+8	; 0x08
    20ce:	81 30       	cpi	r24, 0x01	; 1
    20d0:	91 05       	cpc	r25, r1
    20d2:	49 f1       	breq	.+82     	; 0x2126 <DIO_u8SetPinValue+0x92>
    20d4:	2f 81       	ldd	r18, Y+7	; 0x07
    20d6:	38 85       	ldd	r19, Y+8	; 0x08
    20d8:	22 30       	cpi	r18, 0x02	; 2
    20da:	31 05       	cpc	r19, r1
    20dc:	2c f4       	brge	.+10     	; 0x20e8 <DIO_u8SetPinValue+0x54>
    20de:	8f 81       	ldd	r24, Y+7	; 0x07
    20e0:	98 85       	ldd	r25, Y+8	; 0x08
    20e2:	00 97       	sbiw	r24, 0x00	; 0
    20e4:	61 f0       	breq	.+24     	; 0x20fe <DIO_u8SetPinValue+0x6a>
    20e6:	5b c0       	rjmp	.+182    	; 0x219e <DIO_u8SetPinValue+0x10a>
    20e8:	2f 81       	ldd	r18, Y+7	; 0x07
    20ea:	38 85       	ldd	r19, Y+8	; 0x08
    20ec:	22 30       	cpi	r18, 0x02	; 2
    20ee:	31 05       	cpc	r19, r1
    20f0:	71 f1       	breq	.+92     	; 0x214e <DIO_u8SetPinValue+0xba>
    20f2:	8f 81       	ldd	r24, Y+7	; 0x07
    20f4:	98 85       	ldd	r25, Y+8	; 0x08
    20f6:	83 30       	cpi	r24, 0x03	; 3
    20f8:	91 05       	cpc	r25, r1
    20fa:	e9 f1       	breq	.+122    	; 0x2176 <DIO_u8SetPinValue+0xe2>
    20fc:	50 c0       	rjmp	.+160    	; 0x219e <DIO_u8SetPinValue+0x10a>
			{
				case DIO_PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
    20fe:	ab e3       	ldi	r26, 0x3B	; 59
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	eb e3       	ldi	r30, 0x3B	; 59
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	48 2f       	mov	r20, r24
    210a:	8b 81       	ldd	r24, Y+3	; 0x03
    210c:	28 2f       	mov	r18, r24
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	02 2e       	mov	r0, r18
    2116:	02 c0       	rjmp	.+4      	; 0x211c <DIO_u8SetPinValue+0x88>
    2118:	88 0f       	add	r24, r24
    211a:	99 1f       	adc	r25, r25
    211c:	0a 94       	dec	r0
    211e:	e2 f7       	brpl	.-8      	; 0x2118 <DIO_u8SetPinValue+0x84>
    2120:	84 2b       	or	r24, r20
    2122:	8c 93       	st	X, r24
    2124:	c6 c0       	rjmp	.+396    	; 0x22b2 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
    2126:	a8 e3       	ldi	r26, 0x38	; 56
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	e8 e3       	ldi	r30, 0x38	; 56
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	48 2f       	mov	r20, r24
    2132:	8b 81       	ldd	r24, Y+3	; 0x03
    2134:	28 2f       	mov	r18, r24
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	02 2e       	mov	r0, r18
    213e:	02 c0       	rjmp	.+4      	; 0x2144 <DIO_u8SetPinValue+0xb0>
    2140:	88 0f       	add	r24, r24
    2142:	99 1f       	adc	r25, r25
    2144:	0a 94       	dec	r0
    2146:	e2 f7       	brpl	.-8      	; 0x2140 <DIO_u8SetPinValue+0xac>
    2148:	84 2b       	or	r24, r20
    214a:	8c 93       	st	X, r24
    214c:	b2 c0       	rjmp	.+356    	; 0x22b2 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
    214e:	a5 e3       	ldi	r26, 0x35	; 53
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	e5 e3       	ldi	r30, 0x35	; 53
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	48 2f       	mov	r20, r24
    215a:	8b 81       	ldd	r24, Y+3	; 0x03
    215c:	28 2f       	mov	r18, r24
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	02 2e       	mov	r0, r18
    2166:	02 c0       	rjmp	.+4      	; 0x216c <DIO_u8SetPinValue+0xd8>
    2168:	88 0f       	add	r24, r24
    216a:	99 1f       	adc	r25, r25
    216c:	0a 94       	dec	r0
    216e:	e2 f7       	brpl	.-8      	; 0x2168 <DIO_u8SetPinValue+0xd4>
    2170:	84 2b       	or	r24, r20
    2172:	8c 93       	st	X, r24
    2174:	9e c0       	rjmp	.+316    	; 0x22b2 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
    2176:	a2 e3       	ldi	r26, 0x32	; 50
    2178:	b0 e0       	ldi	r27, 0x00	; 0
    217a:	e2 e3       	ldi	r30, 0x32	; 50
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	80 81       	ld	r24, Z
    2180:	48 2f       	mov	r20, r24
    2182:	8b 81       	ldd	r24, Y+3	; 0x03
    2184:	28 2f       	mov	r18, r24
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	02 2e       	mov	r0, r18
    218e:	02 c0       	rjmp	.+4      	; 0x2194 <DIO_u8SetPinValue+0x100>
    2190:	88 0f       	add	r24, r24
    2192:	99 1f       	adc	r25, r25
    2194:	0a 94       	dec	r0
    2196:	e2 f7       	brpl	.-8      	; 0x2190 <DIO_u8SetPinValue+0xfc>
    2198:	84 2b       	or	r24, r20
    219a:	8c 93       	st	X, r24
    219c:	8a c0       	rjmp	.+276    	; 0x22b2 <DIO_u8SetPinValue+0x21e>
				default: Local_u8ErrorState=1;				
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	89 83       	std	Y+1, r24	; 0x01
    21a2:	87 c0       	rjmp	.+270    	; 0x22b2 <DIO_u8SetPinValue+0x21e>
			}
		}
		else
			Local_u8ErrorState=1;
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	89 83       	std	Y+1, r24	; 0x01
    21a8:	84 c0       	rjmp	.+264    	; 0x22b2 <DIO_u8SetPinValue+0x21e>
	}
	else if(DIO_PIN_LOW==Copy_u8Value)
    21aa:	8c 81       	ldd	r24, Y+4	; 0x04
    21ac:	88 23       	and	r24, r24
    21ae:	09 f0       	breq	.+2      	; 0x21b2 <DIO_u8SetPinValue+0x11e>
    21b0:	7e c0       	rjmp	.+252    	; 0x22ae <DIO_u8SetPinValue+0x21a>
	{
		if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    21b2:	8b 81       	ldd	r24, Y+3	; 0x03
    21b4:	88 30       	cpi	r24, 0x08	; 8
    21b6:	08 f0       	brcs	.+2      	; 0x21ba <DIO_u8SetPinValue+0x126>
    21b8:	77 c0       	rjmp	.+238    	; 0x22a8 <DIO_u8SetPinValue+0x214>
		{
			switch(Copy_u8Port)
    21ba:	8a 81       	ldd	r24, Y+2	; 0x02
    21bc:	28 2f       	mov	r18, r24
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	3e 83       	std	Y+6, r19	; 0x06
    21c2:	2d 83       	std	Y+5, r18	; 0x05
    21c4:	8d 81       	ldd	r24, Y+5	; 0x05
    21c6:	9e 81       	ldd	r25, Y+6	; 0x06
    21c8:	81 30       	cpi	r24, 0x01	; 1
    21ca:	91 05       	cpc	r25, r1
    21cc:	59 f1       	breq	.+86     	; 0x2224 <DIO_u8SetPinValue+0x190>
    21ce:	2d 81       	ldd	r18, Y+5	; 0x05
    21d0:	3e 81       	ldd	r19, Y+6	; 0x06
    21d2:	22 30       	cpi	r18, 0x02	; 2
    21d4:	31 05       	cpc	r19, r1
    21d6:	2c f4       	brge	.+10     	; 0x21e2 <DIO_u8SetPinValue+0x14e>
    21d8:	8d 81       	ldd	r24, Y+5	; 0x05
    21da:	9e 81       	ldd	r25, Y+6	; 0x06
    21dc:	00 97       	sbiw	r24, 0x00	; 0
    21de:	69 f0       	breq	.+26     	; 0x21fa <DIO_u8SetPinValue+0x166>
    21e0:	60 c0       	rjmp	.+192    	; 0x22a2 <DIO_u8SetPinValue+0x20e>
    21e2:	2d 81       	ldd	r18, Y+5	; 0x05
    21e4:	3e 81       	ldd	r19, Y+6	; 0x06
    21e6:	22 30       	cpi	r18, 0x02	; 2
    21e8:	31 05       	cpc	r19, r1
    21ea:	89 f1       	breq	.+98     	; 0x224e <DIO_u8SetPinValue+0x1ba>
    21ec:	8d 81       	ldd	r24, Y+5	; 0x05
    21ee:	9e 81       	ldd	r25, Y+6	; 0x06
    21f0:	83 30       	cpi	r24, 0x03	; 3
    21f2:	91 05       	cpc	r25, r1
    21f4:	09 f4       	brne	.+2      	; 0x21f8 <DIO_u8SetPinValue+0x164>
    21f6:	40 c0       	rjmp	.+128    	; 0x2278 <DIO_u8SetPinValue+0x1e4>
    21f8:	54 c0       	rjmp	.+168    	; 0x22a2 <DIO_u8SetPinValue+0x20e>
			{
				case DIO_PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
    21fa:	ab e3       	ldi	r26, 0x3B	; 59
    21fc:	b0 e0       	ldi	r27, 0x00	; 0
    21fe:	eb e3       	ldi	r30, 0x3B	; 59
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	80 81       	ld	r24, Z
    2204:	48 2f       	mov	r20, r24
    2206:	8b 81       	ldd	r24, Y+3	; 0x03
    2208:	28 2f       	mov	r18, r24
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	02 2e       	mov	r0, r18
    2212:	02 c0       	rjmp	.+4      	; 0x2218 <DIO_u8SetPinValue+0x184>
    2214:	88 0f       	add	r24, r24
    2216:	99 1f       	adc	r25, r25
    2218:	0a 94       	dec	r0
    221a:	e2 f7       	brpl	.-8      	; 0x2214 <DIO_u8SetPinValue+0x180>
    221c:	80 95       	com	r24
    221e:	84 23       	and	r24, r20
    2220:	8c 93       	st	X, r24
    2222:	47 c0       	rjmp	.+142    	; 0x22b2 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
    2224:	a8 e3       	ldi	r26, 0x38	; 56
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	e8 e3       	ldi	r30, 0x38	; 56
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	48 2f       	mov	r20, r24
    2230:	8b 81       	ldd	r24, Y+3	; 0x03
    2232:	28 2f       	mov	r18, r24
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	02 2e       	mov	r0, r18
    223c:	02 c0       	rjmp	.+4      	; 0x2242 <DIO_u8SetPinValue+0x1ae>
    223e:	88 0f       	add	r24, r24
    2240:	99 1f       	adc	r25, r25
    2242:	0a 94       	dec	r0
    2244:	e2 f7       	brpl	.-8      	; 0x223e <DIO_u8SetPinValue+0x1aa>
    2246:	80 95       	com	r24
    2248:	84 23       	and	r24, r20
    224a:	8c 93       	st	X, r24
    224c:	32 c0       	rjmp	.+100    	; 0x22b2 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
    224e:	a5 e3       	ldi	r26, 0x35	; 53
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	e5 e3       	ldi	r30, 0x35	; 53
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	48 2f       	mov	r20, r24
    225a:	8b 81       	ldd	r24, Y+3	; 0x03
    225c:	28 2f       	mov	r18, r24
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	02 2e       	mov	r0, r18
    2266:	02 c0       	rjmp	.+4      	; 0x226c <DIO_u8SetPinValue+0x1d8>
    2268:	88 0f       	add	r24, r24
    226a:	99 1f       	adc	r25, r25
    226c:	0a 94       	dec	r0
    226e:	e2 f7       	brpl	.-8      	; 0x2268 <DIO_u8SetPinValue+0x1d4>
    2270:	80 95       	com	r24
    2272:	84 23       	and	r24, r20
    2274:	8c 93       	st	X, r24
    2276:	1d c0       	rjmp	.+58     	; 0x22b2 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
    2278:	a2 e3       	ldi	r26, 0x32	; 50
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	e2 e3       	ldi	r30, 0x32	; 50
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	48 2f       	mov	r20, r24
    2284:	8b 81       	ldd	r24, Y+3	; 0x03
    2286:	28 2f       	mov	r18, r24
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	02 2e       	mov	r0, r18
    2290:	02 c0       	rjmp	.+4      	; 0x2296 <DIO_u8SetPinValue+0x202>
    2292:	88 0f       	add	r24, r24
    2294:	99 1f       	adc	r25, r25
    2296:	0a 94       	dec	r0
    2298:	e2 f7       	brpl	.-8      	; 0x2292 <DIO_u8SetPinValue+0x1fe>
    229a:	80 95       	com	r24
    229c:	84 23       	and	r24, r20
    229e:	8c 93       	st	X, r24
    22a0:	08 c0       	rjmp	.+16     	; 0x22b2 <DIO_u8SetPinValue+0x21e>
				default: Local_u8ErrorState=1;	
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	89 83       	std	Y+1, r24	; 0x01
    22a6:	05 c0       	rjmp	.+10     	; 0x22b2 <DIO_u8SetPinValue+0x21e>
			}
		}
		else
			Local_u8ErrorState=1;	
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	89 83       	std	Y+1, r24	; 0x01
    22ac:	02 c0       	rjmp	.+4      	; 0x22b2 <DIO_u8SetPinValue+0x21e>
	}
	else
		Local_u8ErrorState=1;	
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    22b4:	28 96       	adiw	r28, 0x08	; 8
    22b6:	0f b6       	in	r0, 0x3f	; 63
    22b8:	f8 94       	cli
    22ba:	de bf       	out	0x3e, r29	; 62
    22bc:	0f be       	out	0x3f, r0	; 63
    22be:	cd bf       	out	0x3d, r28	; 61
    22c0:	cf 91       	pop	r28
    22c2:	df 91       	pop	r29
    22c4:	08 95       	ret

000022c6 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    22c6:	df 93       	push	r29
    22c8:	cf 93       	push	r28
    22ca:	00 d0       	rcall	.+0      	; 0x22cc <DIO_u8SetPortValue+0x6>
    22cc:	00 d0       	rcall	.+0      	; 0x22ce <DIO_u8SetPortValue+0x8>
    22ce:	0f 92       	push	r0
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    22d4:	8a 83       	std	Y+2, r24	; 0x02
    22d6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    22d8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port<=7)
    22da:	8a 81       	ldd	r24, Y+2	; 0x02
    22dc:	88 30       	cpi	r24, 0x08	; 8
    22de:	b0 f5       	brcc	.+108    	; 0x234c <DIO_u8SetPortValue+0x86>
	{
		switch(Copy_u8Port)
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	28 2f       	mov	r18, r24
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	3d 83       	std	Y+5, r19	; 0x05
    22e8:	2c 83       	std	Y+4, r18	; 0x04
    22ea:	8c 81       	ldd	r24, Y+4	; 0x04
    22ec:	9d 81       	ldd	r25, Y+5	; 0x05
    22ee:	81 30       	cpi	r24, 0x01	; 1
    22f0:	91 05       	cpc	r25, r1
    22f2:	d1 f0       	breq	.+52     	; 0x2328 <DIO_u8SetPortValue+0x62>
    22f4:	2c 81       	ldd	r18, Y+4	; 0x04
    22f6:	3d 81       	ldd	r19, Y+5	; 0x05
    22f8:	22 30       	cpi	r18, 0x02	; 2
    22fa:	31 05       	cpc	r19, r1
    22fc:	2c f4       	brge	.+10     	; 0x2308 <DIO_u8SetPortValue+0x42>
    22fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2300:	9d 81       	ldd	r25, Y+5	; 0x05
    2302:	00 97       	sbiw	r24, 0x00	; 0
    2304:	61 f0       	breq	.+24     	; 0x231e <DIO_u8SetPortValue+0x58>
    2306:	1f c0       	rjmp	.+62     	; 0x2346 <DIO_u8SetPortValue+0x80>
    2308:	2c 81       	ldd	r18, Y+4	; 0x04
    230a:	3d 81       	ldd	r19, Y+5	; 0x05
    230c:	22 30       	cpi	r18, 0x02	; 2
    230e:	31 05       	cpc	r19, r1
    2310:	81 f0       	breq	.+32     	; 0x2332 <DIO_u8SetPortValue+0x6c>
    2312:	8c 81       	ldd	r24, Y+4	; 0x04
    2314:	9d 81       	ldd	r25, Y+5	; 0x05
    2316:	83 30       	cpi	r24, 0x03	; 3
    2318:	91 05       	cpc	r25, r1
    231a:	81 f0       	breq	.+32     	; 0x233c <DIO_u8SetPortValue+0x76>
    231c:	14 c0       	rjmp	.+40     	; 0x2346 <DIO_u8SetPortValue+0x80>
		{
			case DIO_PORTA:PORTA=Copy_u8Value;break;
    231e:	eb e3       	ldi	r30, 0x3B	; 59
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	8b 81       	ldd	r24, Y+3	; 0x03
    2324:	80 83       	st	Z, r24
    2326:	14 c0       	rjmp	.+40     	; 0x2350 <DIO_u8SetPortValue+0x8a>
			case DIO_PORTB:PORTB=Copy_u8Value;break;
    2328:	e8 e3       	ldi	r30, 0x38	; 56
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	8b 81       	ldd	r24, Y+3	; 0x03
    232e:	80 83       	st	Z, r24
    2330:	0f c0       	rjmp	.+30     	; 0x2350 <DIO_u8SetPortValue+0x8a>
			case DIO_PORTC:PORTC=Copy_u8Value;break;
    2332:	e5 e3       	ldi	r30, 0x35	; 53
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	8b 81       	ldd	r24, Y+3	; 0x03
    2338:	80 83       	st	Z, r24
    233a:	0a c0       	rjmp	.+20     	; 0x2350 <DIO_u8SetPortValue+0x8a>
			case DIO_PORTD:PORTD=Copy_u8Value;break;
    233c:	e2 e3       	ldi	r30, 0x32	; 50
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	8b 81       	ldd	r24, Y+3	; 0x03
    2342:	80 83       	st	Z, r24
    2344:	05 c0       	rjmp	.+10     	; 0x2350 <DIO_u8SetPortValue+0x8a>
			default: Local_u8ErrorState=1;
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	89 83       	std	Y+1, r24	; 0x01
    234a:	02 c0       	rjmp	.+4      	; 0x2350 <DIO_u8SetPortValue+0x8a>
		}
	}
	else
		Local_u8ErrorState = NOTOK;
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2350:	89 81       	ldd	r24, Y+1	; 0x01
}
    2352:	0f 90       	pop	r0
    2354:	0f 90       	pop	r0
    2356:	0f 90       	pop	r0
    2358:	0f 90       	pop	r0
    235a:	0f 90       	pop	r0
    235c:	cf 91       	pop	r28
    235e:	df 91       	pop	r29
    2360:	08 95       	ret

00002362 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 *Copy_pu8Value)
{
    2362:	df 93       	push	r29
    2364:	cf 93       	push	r28
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
    236a:	27 97       	sbiw	r28, 0x07	; 7
    236c:	0f b6       	in	r0, 0x3f	; 63
    236e:	f8 94       	cli
    2370:	de bf       	out	0x3e, r29	; 62
    2372:	0f be       	out	0x3f, r0	; 63
    2374:	cd bf       	out	0x3d, r28	; 61
    2376:	8a 83       	std	Y+2, r24	; 0x02
    2378:	6b 83       	std	Y+3, r22	; 0x03
    237a:	5d 83       	std	Y+5, r21	; 0x05
    237c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    237e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value!=NULL)
    2380:	8c 81       	ldd	r24, Y+4	; 0x04
    2382:	9d 81       	ldd	r25, Y+5	; 0x05
    2384:	00 97       	sbiw	r24, 0x00	; 0
    2386:	09 f4       	brne	.+2      	; 0x238a <DIO_u8GetPinValue+0x28>
    2388:	7b c0       	rjmp	.+246    	; 0x2480 <DIO_u8GetPinValue+0x11e>
	{


		if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    238a:	8b 81       	ldd	r24, Y+3	; 0x03
    238c:	88 30       	cpi	r24, 0x08	; 8
    238e:	08 f0       	brcs	.+2      	; 0x2392 <DIO_u8GetPinValue+0x30>
    2390:	74 c0       	rjmp	.+232    	; 0x247a <DIO_u8GetPinValue+0x118>
		{
			switch(Copy_u8Port)
    2392:	8a 81       	ldd	r24, Y+2	; 0x02
    2394:	28 2f       	mov	r18, r24
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	3f 83       	std	Y+7, r19	; 0x07
    239a:	2e 83       	std	Y+6, r18	; 0x06
    239c:	4e 81       	ldd	r20, Y+6	; 0x06
    239e:	5f 81       	ldd	r21, Y+7	; 0x07
    23a0:	41 30       	cpi	r20, 0x01	; 1
    23a2:	51 05       	cpc	r21, r1
    23a4:	59 f1       	breq	.+86     	; 0x23fc <DIO_u8GetPinValue+0x9a>
    23a6:	8e 81       	ldd	r24, Y+6	; 0x06
    23a8:	9f 81       	ldd	r25, Y+7	; 0x07
    23aa:	82 30       	cpi	r24, 0x02	; 2
    23ac:	91 05       	cpc	r25, r1
    23ae:	34 f4       	brge	.+12     	; 0x23bc <DIO_u8GetPinValue+0x5a>
    23b0:	2e 81       	ldd	r18, Y+6	; 0x06
    23b2:	3f 81       	ldd	r19, Y+7	; 0x07
    23b4:	21 15       	cp	r18, r1
    23b6:	31 05       	cpc	r19, r1
    23b8:	69 f0       	breq	.+26     	; 0x23d4 <DIO_u8GetPinValue+0x72>
    23ba:	5c c0       	rjmp	.+184    	; 0x2474 <DIO_u8GetPinValue+0x112>
    23bc:	4e 81       	ldd	r20, Y+6	; 0x06
    23be:	5f 81       	ldd	r21, Y+7	; 0x07
    23c0:	42 30       	cpi	r20, 0x02	; 2
    23c2:	51 05       	cpc	r21, r1
    23c4:	79 f1       	breq	.+94     	; 0x2424 <DIO_u8GetPinValue+0xc2>
    23c6:	8e 81       	ldd	r24, Y+6	; 0x06
    23c8:	9f 81       	ldd	r25, Y+7	; 0x07
    23ca:	83 30       	cpi	r24, 0x03	; 3
    23cc:	91 05       	cpc	r25, r1
    23ce:	09 f4       	brne	.+2      	; 0x23d2 <DIO_u8GetPinValue+0x70>
    23d0:	3d c0       	rjmp	.+122    	; 0x244c <DIO_u8GetPinValue+0xea>
    23d2:	50 c0       	rjmp	.+160    	; 0x2474 <DIO_u8GetPinValue+0x112>
			{
				case DIO_PORTA:*Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin);break;
    23d4:	e9 e3       	ldi	r30, 0x39	; 57
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	80 81       	ld	r24, Z
    23da:	28 2f       	mov	r18, r24
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	8b 81       	ldd	r24, Y+3	; 0x03
    23e0:	88 2f       	mov	r24, r24
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	a9 01       	movw	r20, r18
    23e6:	02 c0       	rjmp	.+4      	; 0x23ec <DIO_u8GetPinValue+0x8a>
    23e8:	55 95       	asr	r21
    23ea:	47 95       	ror	r20
    23ec:	8a 95       	dec	r24
    23ee:	e2 f7       	brpl	.-8      	; 0x23e8 <DIO_u8GetPinValue+0x86>
    23f0:	ca 01       	movw	r24, r20
    23f2:	81 70       	andi	r24, 0x01	; 1
    23f4:	ec 81       	ldd	r30, Y+4	; 0x04
    23f6:	fd 81       	ldd	r31, Y+5	; 0x05
    23f8:	80 83       	st	Z, r24
    23fa:	44 c0       	rjmp	.+136    	; 0x2484 <DIO_u8GetPinValue+0x122>
				case DIO_PORTB:*Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin);break;
    23fc:	e6 e3       	ldi	r30, 0x36	; 54
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	28 2f       	mov	r18, r24
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	8b 81       	ldd	r24, Y+3	; 0x03
    2408:	88 2f       	mov	r24, r24
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	a9 01       	movw	r20, r18
    240e:	02 c0       	rjmp	.+4      	; 0x2414 <DIO_u8GetPinValue+0xb2>
    2410:	55 95       	asr	r21
    2412:	47 95       	ror	r20
    2414:	8a 95       	dec	r24
    2416:	e2 f7       	brpl	.-8      	; 0x2410 <DIO_u8GetPinValue+0xae>
    2418:	ca 01       	movw	r24, r20
    241a:	81 70       	andi	r24, 0x01	; 1
    241c:	ec 81       	ldd	r30, Y+4	; 0x04
    241e:	fd 81       	ldd	r31, Y+5	; 0x05
    2420:	80 83       	st	Z, r24
    2422:	30 c0       	rjmp	.+96     	; 0x2484 <DIO_u8GetPinValue+0x122>
				case DIO_PORTC:*Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin);break;
    2424:	e3 e3       	ldi	r30, 0x33	; 51
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	28 2f       	mov	r18, r24
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	8b 81       	ldd	r24, Y+3	; 0x03
    2430:	88 2f       	mov	r24, r24
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	a9 01       	movw	r20, r18
    2436:	02 c0       	rjmp	.+4      	; 0x243c <DIO_u8GetPinValue+0xda>
    2438:	55 95       	asr	r21
    243a:	47 95       	ror	r20
    243c:	8a 95       	dec	r24
    243e:	e2 f7       	brpl	.-8      	; 0x2438 <DIO_u8GetPinValue+0xd6>
    2440:	ca 01       	movw	r24, r20
    2442:	81 70       	andi	r24, 0x01	; 1
    2444:	ec 81       	ldd	r30, Y+4	; 0x04
    2446:	fd 81       	ldd	r31, Y+5	; 0x05
    2448:	80 83       	st	Z, r24
    244a:	1c c0       	rjmp	.+56     	; 0x2484 <DIO_u8GetPinValue+0x122>
				case DIO_PORTD:*Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin);break;
    244c:	e0 e3       	ldi	r30, 0x30	; 48
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	28 2f       	mov	r18, r24
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	8b 81       	ldd	r24, Y+3	; 0x03
    2458:	88 2f       	mov	r24, r24
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	a9 01       	movw	r20, r18
    245e:	02 c0       	rjmp	.+4      	; 0x2464 <DIO_u8GetPinValue+0x102>
    2460:	55 95       	asr	r21
    2462:	47 95       	ror	r20
    2464:	8a 95       	dec	r24
    2466:	e2 f7       	brpl	.-8      	; 0x2460 <DIO_u8GetPinValue+0xfe>
    2468:	ca 01       	movw	r24, r20
    246a:	81 70       	andi	r24, 0x01	; 1
    246c:	ec 81       	ldd	r30, Y+4	; 0x04
    246e:	fd 81       	ldd	r31, Y+5	; 0x05
    2470:	80 83       	st	Z, r24
    2472:	08 c0       	rjmp	.+16     	; 0x2484 <DIO_u8GetPinValue+0x122>
				default: Local_u8ErrorState=1;
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	89 83       	std	Y+1, r24	; 0x01
    2478:	05 c0       	rjmp	.+10     	; 0x2484 <DIO_u8GetPinValue+0x122>
			}
		}
		else
			Local_u8ErrorState=1;
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	89 83       	std	Y+1, r24	; 0x01
    247e:	02 c0       	rjmp	.+4      	; 0x2484 <DIO_u8GetPinValue+0x122>
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    2480:	82 e0       	ldi	r24, 0x02	; 2
    2482:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2484:	89 81       	ldd	r24, Y+1	; 0x01
}
    2486:	27 96       	adiw	r28, 0x07	; 7
    2488:	0f b6       	in	r0, 0x3f	; 63
    248a:	f8 94       	cli
    248c:	de bf       	out	0x3e, r29	; 62
    248e:	0f be       	out	0x3f, r0	; 63
    2490:	cd bf       	out	0x3d, r28	; 61
    2492:	cf 91       	pop	r28
    2494:	df 91       	pop	r29
    2496:	08 95       	ret

00002498 <DIO_u8TogglePinValue>:
u8 DIO_u8TogglePinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
{
    2498:	df 93       	push	r29
    249a:	cf 93       	push	r28
    249c:	00 d0       	rcall	.+0      	; 0x249e <DIO_u8TogglePinValue+0x6>
    249e:	00 d0       	rcall	.+0      	; 0x24a0 <DIO_u8TogglePinValue+0x8>
    24a0:	0f 92       	push	r0
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
    24a6:	8a 83       	std	Y+2, r24	; 0x02
    24a8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    24aa:	19 82       	std	Y+1, r1	; 0x01
	if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    24ac:	8b 81       	ldd	r24, Y+3	; 0x03
    24ae:	88 30       	cpi	r24, 0x08	; 8
    24b0:	08 f0       	brcs	.+2      	; 0x24b4 <DIO_u8TogglePinValue+0x1c>
    24b2:	72 c0       	rjmp	.+228    	; 0x2598 <DIO_u8TogglePinValue+0x100>
	{
		switch(Copy_u8Port)
    24b4:	8a 81       	ldd	r24, Y+2	; 0x02
    24b6:	28 2f       	mov	r18, r24
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	3d 83       	std	Y+5, r19	; 0x05
    24bc:	2c 83       	std	Y+4, r18	; 0x04
    24be:	8c 81       	ldd	r24, Y+4	; 0x04
    24c0:	9d 81       	ldd	r25, Y+5	; 0x05
    24c2:	81 30       	cpi	r24, 0x01	; 1
    24c4:	91 05       	cpc	r25, r1
    24c6:	49 f1       	breq	.+82     	; 0x251a <DIO_u8TogglePinValue+0x82>
    24c8:	2c 81       	ldd	r18, Y+4	; 0x04
    24ca:	3d 81       	ldd	r19, Y+5	; 0x05
    24cc:	22 30       	cpi	r18, 0x02	; 2
    24ce:	31 05       	cpc	r19, r1
    24d0:	2c f4       	brge	.+10     	; 0x24dc <DIO_u8TogglePinValue+0x44>
    24d2:	8c 81       	ldd	r24, Y+4	; 0x04
    24d4:	9d 81       	ldd	r25, Y+5	; 0x05
    24d6:	00 97       	sbiw	r24, 0x00	; 0
    24d8:	61 f0       	breq	.+24     	; 0x24f2 <DIO_u8TogglePinValue+0x5a>
    24da:	5b c0       	rjmp	.+182    	; 0x2592 <DIO_u8TogglePinValue+0xfa>
    24dc:	2c 81       	ldd	r18, Y+4	; 0x04
    24de:	3d 81       	ldd	r19, Y+5	; 0x05
    24e0:	22 30       	cpi	r18, 0x02	; 2
    24e2:	31 05       	cpc	r19, r1
    24e4:	71 f1       	breq	.+92     	; 0x2542 <DIO_u8TogglePinValue+0xaa>
    24e6:	8c 81       	ldd	r24, Y+4	; 0x04
    24e8:	9d 81       	ldd	r25, Y+5	; 0x05
    24ea:	83 30       	cpi	r24, 0x03	; 3
    24ec:	91 05       	cpc	r25, r1
    24ee:	e9 f1       	breq	.+122    	; 0x256a <DIO_u8TogglePinValue+0xd2>
    24f0:	50 c0       	rjmp	.+160    	; 0x2592 <DIO_u8TogglePinValue+0xfa>
		{
			case DIO_PORTA:TOG_BIT(PORTA,Copy_u8Pin);break;
    24f2:	ab e3       	ldi	r26, 0x3B	; 59
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	eb e3       	ldi	r30, 0x3B	; 59
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	80 81       	ld	r24, Z
    24fc:	48 2f       	mov	r20, r24
    24fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2500:	28 2f       	mov	r18, r24
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	02 2e       	mov	r0, r18
    250a:	02 c0       	rjmp	.+4      	; 0x2510 <DIO_u8TogglePinValue+0x78>
    250c:	88 0f       	add	r24, r24
    250e:	99 1f       	adc	r25, r25
    2510:	0a 94       	dec	r0
    2512:	e2 f7       	brpl	.-8      	; 0x250c <DIO_u8TogglePinValue+0x74>
    2514:	84 27       	eor	r24, r20
    2516:	8c 93       	st	X, r24
    2518:	41 c0       	rjmp	.+130    	; 0x259c <DIO_u8TogglePinValue+0x104>
			case DIO_PORTB:TOG_BIT(PORTB,Copy_u8Pin);break;
    251a:	a8 e3       	ldi	r26, 0x38	; 56
    251c:	b0 e0       	ldi	r27, 0x00	; 0
    251e:	e8 e3       	ldi	r30, 0x38	; 56
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	80 81       	ld	r24, Z
    2524:	48 2f       	mov	r20, r24
    2526:	8b 81       	ldd	r24, Y+3	; 0x03
    2528:	28 2f       	mov	r18, r24
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	02 2e       	mov	r0, r18
    2532:	02 c0       	rjmp	.+4      	; 0x2538 <DIO_u8TogglePinValue+0xa0>
    2534:	88 0f       	add	r24, r24
    2536:	99 1f       	adc	r25, r25
    2538:	0a 94       	dec	r0
    253a:	e2 f7       	brpl	.-8      	; 0x2534 <DIO_u8TogglePinValue+0x9c>
    253c:	84 27       	eor	r24, r20
    253e:	8c 93       	st	X, r24
    2540:	2d c0       	rjmp	.+90     	; 0x259c <DIO_u8TogglePinValue+0x104>
			case DIO_PORTC:TOG_BIT(PORTC,Copy_u8Pin);break;
    2542:	a5 e3       	ldi	r26, 0x35	; 53
    2544:	b0 e0       	ldi	r27, 0x00	; 0
    2546:	e5 e3       	ldi	r30, 0x35	; 53
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	80 81       	ld	r24, Z
    254c:	48 2f       	mov	r20, r24
    254e:	8b 81       	ldd	r24, Y+3	; 0x03
    2550:	28 2f       	mov	r18, r24
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	02 2e       	mov	r0, r18
    255a:	02 c0       	rjmp	.+4      	; 0x2560 <DIO_u8TogglePinValue+0xc8>
    255c:	88 0f       	add	r24, r24
    255e:	99 1f       	adc	r25, r25
    2560:	0a 94       	dec	r0
    2562:	e2 f7       	brpl	.-8      	; 0x255c <DIO_u8TogglePinValue+0xc4>
    2564:	84 27       	eor	r24, r20
    2566:	8c 93       	st	X, r24
    2568:	19 c0       	rjmp	.+50     	; 0x259c <DIO_u8TogglePinValue+0x104>
			case DIO_PORTD:TOG_BIT(PORTD,Copy_u8Pin);break;
    256a:	a2 e3       	ldi	r26, 0x32	; 50
    256c:	b0 e0       	ldi	r27, 0x00	; 0
    256e:	e2 e3       	ldi	r30, 0x32	; 50
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	80 81       	ld	r24, Z
    2574:	48 2f       	mov	r20, r24
    2576:	8b 81       	ldd	r24, Y+3	; 0x03
    2578:	28 2f       	mov	r18, r24
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	02 2e       	mov	r0, r18
    2582:	02 c0       	rjmp	.+4      	; 0x2588 <DIO_u8TogglePinValue+0xf0>
    2584:	88 0f       	add	r24, r24
    2586:	99 1f       	adc	r25, r25
    2588:	0a 94       	dec	r0
    258a:	e2 f7       	brpl	.-8      	; 0x2584 <DIO_u8TogglePinValue+0xec>
    258c:	84 27       	eor	r24, r20
    258e:	8c 93       	st	X, r24
    2590:	05 c0       	rjmp	.+10     	; 0x259c <DIO_u8TogglePinValue+0x104>
			default: Local_u8ErrorState=1;
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	89 83       	std	Y+1, r24	; 0x01
    2596:	02 c0       	rjmp	.+4      	; 0x259c <DIO_u8TogglePinValue+0x104>
		}
	}
	else
		Local_u8ErrorState=1;
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    259c:	89 81       	ldd	r24, Y+1	; 0x01
}
    259e:	0f 90       	pop	r0
    25a0:	0f 90       	pop	r0
    25a2:	0f 90       	pop	r0
    25a4:	0f 90       	pop	r0
    25a6:	0f 90       	pop	r0
    25a8:	cf 91       	pop	r28
    25aa:	df 91       	pop	r29
    25ac:	08 95       	ret

000025ae <DIO_u8SetLowNibbleValue>:

u8 DIO_u8SetLowNibbleValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    25ae:	df 93       	push	r29
    25b0:	cf 93       	push	r28
    25b2:	00 d0       	rcall	.+0      	; 0x25b4 <DIO_u8SetLowNibbleValue+0x6>
    25b4:	00 d0       	rcall	.+0      	; 0x25b6 <DIO_u8SetLowNibbleValue+0x8>
    25b6:	0f 92       	push	r0
    25b8:	cd b7       	in	r28, 0x3d	; 61
    25ba:	de b7       	in	r29, 0x3e	; 62
    25bc:	8a 83       	std	Y+2, r24	; 0x02
    25be:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    25c0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port<=DIO_PORTD){
    25c2:	8a 81       	ldd	r24, Y+2	; 0x02
    25c4:	84 30       	cpi	r24, 0x04	; 4
    25c6:	08 f0       	brcs	.+2      	; 0x25ca <DIO_u8SetLowNibbleValue+0x1c>
    25c8:	62 c0       	rjmp	.+196    	; 0x268e <DIO_u8SetLowNibbleValue+0xe0>
		switch(Copy_u8Port)
    25ca:	8a 81       	ldd	r24, Y+2	; 0x02
    25cc:	28 2f       	mov	r18, r24
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	3d 83       	std	Y+5, r19	; 0x05
    25d2:	2c 83       	std	Y+4, r18	; 0x04
    25d4:	8c 81       	ldd	r24, Y+4	; 0x04
    25d6:	9d 81       	ldd	r25, Y+5	; 0x05
    25d8:	81 30       	cpi	r24, 0x01	; 1
    25da:	91 05       	cpc	r25, r1
    25dc:	29 f1       	breq	.+74     	; 0x2628 <DIO_u8SetLowNibbleValue+0x7a>
    25de:	2c 81       	ldd	r18, Y+4	; 0x04
    25e0:	3d 81       	ldd	r19, Y+5	; 0x05
    25e2:	22 30       	cpi	r18, 0x02	; 2
    25e4:	31 05       	cpc	r19, r1
    25e6:	2c f4       	brge	.+10     	; 0x25f2 <DIO_u8SetLowNibbleValue+0x44>
    25e8:	8c 81       	ldd	r24, Y+4	; 0x04
    25ea:	9d 81       	ldd	r25, Y+5	; 0x05
    25ec:	00 97       	sbiw	r24, 0x00	; 0
    25ee:	61 f0       	breq	.+24     	; 0x2608 <DIO_u8SetLowNibbleValue+0x5a>
    25f0:	4b c0       	rjmp	.+150    	; 0x2688 <DIO_u8SetLowNibbleValue+0xda>
    25f2:	2c 81       	ldd	r18, Y+4	; 0x04
    25f4:	3d 81       	ldd	r19, Y+5	; 0x05
    25f6:	22 30       	cpi	r18, 0x02	; 2
    25f8:	31 05       	cpc	r19, r1
    25fa:	31 f1       	breq	.+76     	; 0x2648 <DIO_u8SetLowNibbleValue+0x9a>
    25fc:	8c 81       	ldd	r24, Y+4	; 0x04
    25fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2600:	83 30       	cpi	r24, 0x03	; 3
    2602:	91 05       	cpc	r25, r1
    2604:	89 f1       	breq	.+98     	; 0x2668 <DIO_u8SetLowNibbleValue+0xba>
    2606:	40 c0       	rjmp	.+128    	; 0x2688 <DIO_u8SetLowNibbleValue+0xda>
		{
			case DIO_PORTA:PORTA&=DIO_LOWNIBBLE_MASK;PORTA|=Copy_u8Value;break;
    2608:	ab e3       	ldi	r26, 0x3B	; 59
    260a:	b0 e0       	ldi	r27, 0x00	; 0
    260c:	eb e3       	ldi	r30, 0x3B	; 59
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	80 81       	ld	r24, Z
    2612:	80 7f       	andi	r24, 0xF0	; 240
    2614:	8c 93       	st	X, r24
    2616:	ab e3       	ldi	r26, 0x3B	; 59
    2618:	b0 e0       	ldi	r27, 0x00	; 0
    261a:	eb e3       	ldi	r30, 0x3B	; 59
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	90 81       	ld	r25, Z
    2620:	8b 81       	ldd	r24, Y+3	; 0x03
    2622:	89 2b       	or	r24, r25
    2624:	8c 93       	st	X, r24
    2626:	35 c0       	rjmp	.+106    	; 0x2692 <DIO_u8SetLowNibbleValue+0xe4>
			case DIO_PORTB:PORTB&=DIO_LOWNIBBLE_MASK;PORTB|=Copy_u8Value;break;
    2628:	a8 e3       	ldi	r26, 0x38	; 56
    262a:	b0 e0       	ldi	r27, 0x00	; 0
    262c:	e8 e3       	ldi	r30, 0x38	; 56
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	80 81       	ld	r24, Z
    2632:	80 7f       	andi	r24, 0xF0	; 240
    2634:	8c 93       	st	X, r24
    2636:	a8 e3       	ldi	r26, 0x38	; 56
    2638:	b0 e0       	ldi	r27, 0x00	; 0
    263a:	e8 e3       	ldi	r30, 0x38	; 56
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	90 81       	ld	r25, Z
    2640:	8b 81       	ldd	r24, Y+3	; 0x03
    2642:	89 2b       	or	r24, r25
    2644:	8c 93       	st	X, r24
    2646:	25 c0       	rjmp	.+74     	; 0x2692 <DIO_u8SetLowNibbleValue+0xe4>
			case DIO_PORTC:PORTC&=DIO_LOWNIBBLE_MASK;PORTC|=Copy_u8Value;break;
    2648:	a5 e3       	ldi	r26, 0x35	; 53
    264a:	b0 e0       	ldi	r27, 0x00	; 0
    264c:	e5 e3       	ldi	r30, 0x35	; 53
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	80 81       	ld	r24, Z
    2652:	80 7f       	andi	r24, 0xF0	; 240
    2654:	8c 93       	st	X, r24
    2656:	a5 e3       	ldi	r26, 0x35	; 53
    2658:	b0 e0       	ldi	r27, 0x00	; 0
    265a:	e5 e3       	ldi	r30, 0x35	; 53
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	90 81       	ld	r25, Z
    2660:	8b 81       	ldd	r24, Y+3	; 0x03
    2662:	89 2b       	or	r24, r25
    2664:	8c 93       	st	X, r24
    2666:	15 c0       	rjmp	.+42     	; 0x2692 <DIO_u8SetLowNibbleValue+0xe4>
			case DIO_PORTD:PORTD&=DIO_LOWNIBBLE_MASK;PORTD|=Copy_u8Value;break;
    2668:	a2 e3       	ldi	r26, 0x32	; 50
    266a:	b0 e0       	ldi	r27, 0x00	; 0
    266c:	e2 e3       	ldi	r30, 0x32	; 50
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	80 81       	ld	r24, Z
    2672:	80 7f       	andi	r24, 0xF0	; 240
    2674:	8c 93       	st	X, r24
    2676:	a2 e3       	ldi	r26, 0x32	; 50
    2678:	b0 e0       	ldi	r27, 0x00	; 0
    267a:	e2 e3       	ldi	r30, 0x32	; 50
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	90 81       	ld	r25, Z
    2680:	8b 81       	ldd	r24, Y+3	; 0x03
    2682:	89 2b       	or	r24, r25
    2684:	8c 93       	st	X, r24
    2686:	05 c0       	rjmp	.+10     	; 0x2692 <DIO_u8SetLowNibbleValue+0xe4>
			default: Local_u8ErrorState=1;
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	89 83       	std	Y+1, r24	; 0x01
    268c:	02 c0       	rjmp	.+4      	; 0x2692 <DIO_u8SetLowNibbleValue+0xe4>
		}
	}
	else
		Local_u8ErrorState=1;
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2692:	89 81       	ldd	r24, Y+1	; 0x01
}
    2694:	0f 90       	pop	r0
    2696:	0f 90       	pop	r0
    2698:	0f 90       	pop	r0
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	cf 91       	pop	r28
    26a0:	df 91       	pop	r29
    26a2:	08 95       	ret

000026a4 <DIO_u8SetHighNibbleValue>:
u8 DIO_u8SetHighNibbleValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    26a4:	df 93       	push	r29
    26a6:	cf 93       	push	r28
    26a8:	00 d0       	rcall	.+0      	; 0x26aa <DIO_u8SetHighNibbleValue+0x6>
    26aa:	00 d0       	rcall	.+0      	; 0x26ac <DIO_u8SetHighNibbleValue+0x8>
    26ac:	0f 92       	push	r0
    26ae:	cd b7       	in	r28, 0x3d	; 61
    26b0:	de b7       	in	r29, 0x3e	; 62
    26b2:	8a 83       	std	Y+2, r24	; 0x02
    26b4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    26b6:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port<=DIO_PORTD){
    26b8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ba:	84 30       	cpi	r24, 0x04	; 4
    26bc:	08 f0       	brcs	.+2      	; 0x26c0 <DIO_u8SetHighNibbleValue+0x1c>
    26be:	87 c0       	rjmp	.+270    	; 0x27ce <DIO_u8SetHighNibbleValue+0x12a>
		switch(Copy_u8Port)
    26c0:	8a 81       	ldd	r24, Y+2	; 0x02
    26c2:	28 2f       	mov	r18, r24
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	3d 83       	std	Y+5, r19	; 0x05
    26c8:	2c 83       	std	Y+4, r18	; 0x04
    26ca:	8c 81       	ldd	r24, Y+4	; 0x04
    26cc:	9d 81       	ldd	r25, Y+5	; 0x05
    26ce:	81 30       	cpi	r24, 0x01	; 1
    26d0:	91 05       	cpc	r25, r1
    26d2:	79 f1       	breq	.+94     	; 0x2732 <DIO_u8SetHighNibbleValue+0x8e>
    26d4:	2c 81       	ldd	r18, Y+4	; 0x04
    26d6:	3d 81       	ldd	r19, Y+5	; 0x05
    26d8:	22 30       	cpi	r18, 0x02	; 2
    26da:	31 05       	cpc	r19, r1
    26dc:	2c f4       	brge	.+10     	; 0x26e8 <DIO_u8SetHighNibbleValue+0x44>
    26de:	8c 81       	ldd	r24, Y+4	; 0x04
    26e0:	9d 81       	ldd	r25, Y+5	; 0x05
    26e2:	00 97       	sbiw	r24, 0x00	; 0
    26e4:	69 f0       	breq	.+26     	; 0x2700 <DIO_u8SetHighNibbleValue+0x5c>
    26e6:	70 c0       	rjmp	.+224    	; 0x27c8 <DIO_u8SetHighNibbleValue+0x124>
    26e8:	2c 81       	ldd	r18, Y+4	; 0x04
    26ea:	3d 81       	ldd	r19, Y+5	; 0x05
    26ec:	22 30       	cpi	r18, 0x02	; 2
    26ee:	31 05       	cpc	r19, r1
    26f0:	c9 f1       	breq	.+114    	; 0x2764 <DIO_u8SetHighNibbleValue+0xc0>
    26f2:	8c 81       	ldd	r24, Y+4	; 0x04
    26f4:	9d 81       	ldd	r25, Y+5	; 0x05
    26f6:	83 30       	cpi	r24, 0x03	; 3
    26f8:	91 05       	cpc	r25, r1
    26fa:	09 f4       	brne	.+2      	; 0x26fe <DIO_u8SetHighNibbleValue+0x5a>
    26fc:	4c c0       	rjmp	.+152    	; 0x2796 <DIO_u8SetHighNibbleValue+0xf2>
    26fe:	64 c0       	rjmp	.+200    	; 0x27c8 <DIO_u8SetHighNibbleValue+0x124>
		{
			case DIO_PORTA:PORTA &= DIO_HIGHNIBBLE_MASK;PORTA |= (Copy_u8Value<<4);break;
    2700:	ab e3       	ldi	r26, 0x3B	; 59
    2702:	b0 e0       	ldi	r27, 0x00	; 0
    2704:	eb e3       	ldi	r30, 0x3B	; 59
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	80 81       	ld	r24, Z
    270a:	8f 70       	andi	r24, 0x0F	; 15
    270c:	8c 93       	st	X, r24
    270e:	ab e3       	ldi	r26, 0x3B	; 59
    2710:	b0 e0       	ldi	r27, 0x00	; 0
    2712:	eb e3       	ldi	r30, 0x3B	; 59
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	80 81       	ld	r24, Z
    2718:	28 2f       	mov	r18, r24
    271a:	8b 81       	ldd	r24, Y+3	; 0x03
    271c:	88 2f       	mov	r24, r24
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	82 95       	swap	r24
    2722:	92 95       	swap	r25
    2724:	90 7f       	andi	r25, 0xF0	; 240
    2726:	98 27       	eor	r25, r24
    2728:	80 7f       	andi	r24, 0xF0	; 240
    272a:	98 27       	eor	r25, r24
    272c:	82 2b       	or	r24, r18
    272e:	8c 93       	st	X, r24
    2730:	50 c0       	rjmp	.+160    	; 0x27d2 <DIO_u8SetHighNibbleValue+0x12e>
			case DIO_PORTB:PORTB &= DIO_HIGHNIBBLE_MASK;PORTB |= (Copy_u8Value<<4);break;
    2732:	a8 e3       	ldi	r26, 0x38	; 56
    2734:	b0 e0       	ldi	r27, 0x00	; 0
    2736:	e8 e3       	ldi	r30, 0x38	; 56
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	80 81       	ld	r24, Z
    273c:	8f 70       	andi	r24, 0x0F	; 15
    273e:	8c 93       	st	X, r24
    2740:	a8 e3       	ldi	r26, 0x38	; 56
    2742:	b0 e0       	ldi	r27, 0x00	; 0
    2744:	e8 e3       	ldi	r30, 0x38	; 56
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	80 81       	ld	r24, Z
    274a:	28 2f       	mov	r18, r24
    274c:	8b 81       	ldd	r24, Y+3	; 0x03
    274e:	88 2f       	mov	r24, r24
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	82 95       	swap	r24
    2754:	92 95       	swap	r25
    2756:	90 7f       	andi	r25, 0xF0	; 240
    2758:	98 27       	eor	r25, r24
    275a:	80 7f       	andi	r24, 0xF0	; 240
    275c:	98 27       	eor	r25, r24
    275e:	82 2b       	or	r24, r18
    2760:	8c 93       	st	X, r24
    2762:	37 c0       	rjmp	.+110    	; 0x27d2 <DIO_u8SetHighNibbleValue+0x12e>
			case DIO_PORTC:PORTC &= DIO_HIGHNIBBLE_MASK;PORTC |= (Copy_u8Value<<4);break;
    2764:	a5 e3       	ldi	r26, 0x35	; 53
    2766:	b0 e0       	ldi	r27, 0x00	; 0
    2768:	e5 e3       	ldi	r30, 0x35	; 53
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	80 81       	ld	r24, Z
    276e:	8f 70       	andi	r24, 0x0F	; 15
    2770:	8c 93       	st	X, r24
    2772:	a5 e3       	ldi	r26, 0x35	; 53
    2774:	b0 e0       	ldi	r27, 0x00	; 0
    2776:	e5 e3       	ldi	r30, 0x35	; 53
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	80 81       	ld	r24, Z
    277c:	28 2f       	mov	r18, r24
    277e:	8b 81       	ldd	r24, Y+3	; 0x03
    2780:	88 2f       	mov	r24, r24
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	82 95       	swap	r24
    2786:	92 95       	swap	r25
    2788:	90 7f       	andi	r25, 0xF0	; 240
    278a:	98 27       	eor	r25, r24
    278c:	80 7f       	andi	r24, 0xF0	; 240
    278e:	98 27       	eor	r25, r24
    2790:	82 2b       	or	r24, r18
    2792:	8c 93       	st	X, r24
    2794:	1e c0       	rjmp	.+60     	; 0x27d2 <DIO_u8SetHighNibbleValue+0x12e>
			case DIO_PORTD:PORTD &= DIO_HIGHNIBBLE_MASK;PORTD |= (Copy_u8Value<<4);break;
    2796:	a2 e3       	ldi	r26, 0x32	; 50
    2798:	b0 e0       	ldi	r27, 0x00	; 0
    279a:	e2 e3       	ldi	r30, 0x32	; 50
    279c:	f0 e0       	ldi	r31, 0x00	; 0
    279e:	80 81       	ld	r24, Z
    27a0:	8f 70       	andi	r24, 0x0F	; 15
    27a2:	8c 93       	st	X, r24
    27a4:	a2 e3       	ldi	r26, 0x32	; 50
    27a6:	b0 e0       	ldi	r27, 0x00	; 0
    27a8:	e2 e3       	ldi	r30, 0x32	; 50
    27aa:	f0 e0       	ldi	r31, 0x00	; 0
    27ac:	80 81       	ld	r24, Z
    27ae:	28 2f       	mov	r18, r24
    27b0:	8b 81       	ldd	r24, Y+3	; 0x03
    27b2:	88 2f       	mov	r24, r24
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	82 95       	swap	r24
    27b8:	92 95       	swap	r25
    27ba:	90 7f       	andi	r25, 0xF0	; 240
    27bc:	98 27       	eor	r25, r24
    27be:	80 7f       	andi	r24, 0xF0	; 240
    27c0:	98 27       	eor	r25, r24
    27c2:	82 2b       	or	r24, r18
    27c4:	8c 93       	st	X, r24
    27c6:	05 c0       	rjmp	.+10     	; 0x27d2 <DIO_u8SetHighNibbleValue+0x12e>
			default: Local_u8ErrorState=1;
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	89 83       	std	Y+1, r24	; 0x01
    27cc:	02 c0       	rjmp	.+4      	; 0x27d2 <DIO_u8SetHighNibbleValue+0x12e>
		}
	}
	else
		Local_u8ErrorState=1;
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    27d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    27d4:	0f 90       	pop	r0
    27d6:	0f 90       	pop	r0
    27d8:	0f 90       	pop	r0
    27da:	0f 90       	pop	r0
    27dc:	0f 90       	pop	r0
    27de:	cf 91       	pop	r28
    27e0:	df 91       	pop	r29
    27e2:	08 95       	ret

000027e4 <EXTI_voidInt0Init>:

static void (*EXTI_voidCallBack[3])() = {NULL};


void EXTI_voidInt0Init()
{
    27e4:	df 93       	push	r29
    27e6:	cf 93       	push	r28
    27e8:	cd b7       	in	r28, 0x3d	; 61
    27ea:	de b7       	in	r29, 0x3e	; 62
	MCUCR &= MASK_SENCE_INT0;
    27ec:	a5 e5       	ldi	r26, 0x55	; 85
    27ee:	b0 e0       	ldi	r27, 0x00	; 0
    27f0:	e5 e5       	ldi	r30, 0x55	; 85
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	80 81       	ld	r24, Z
    27f6:	8c 7f       	andi	r24, 0xFC	; 252
    27f8:	8c 93       	st	X, r24
	MCUCR |= EXTI0_SENCECONTROL<<MCUCR_ISC00;
    27fa:	a5 e5       	ldi	r26, 0x55	; 85
    27fc:	b0 e0       	ldi	r27, 0x00	; 0
    27fe:	e5 e5       	ldi	r30, 0x55	; 85
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	80 81       	ld	r24, Z
    2804:	82 60       	ori	r24, 0x02	; 2
    2806:	8c 93       	st	X, r24

	SET_BIT(GICR,GICR_INT0);
    2808:	ab e5       	ldi	r26, 0x5B	; 91
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	eb e5       	ldi	r30, 0x5B	; 91
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	80 81       	ld	r24, Z
    2812:	80 64       	ori	r24, 0x40	; 64
    2814:	8c 93       	st	X, r24
}
    2816:	cf 91       	pop	r28
    2818:	df 91       	pop	r29
    281a:	08 95       	ret

0000281c <EXTI_u8Int0CallBack>:

u8 EXTI_u8Int0CallBack(void (*Notification)())
{
    281c:	df 93       	push	r29
    281e:	cf 93       	push	r28
    2820:	00 d0       	rcall	.+0      	; 0x2822 <EXTI_u8Int0CallBack+0x6>
    2822:	0f 92       	push	r0
    2824:	cd b7       	in	r28, 0x3d	; 61
    2826:	de b7       	in	r29, 0x3e	; 62
    2828:	9b 83       	std	Y+3, r25	; 0x03
    282a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    282c:	19 82       	std	Y+1, r1	; 0x01
	if(Notification != NULL )
    282e:	8a 81       	ldd	r24, Y+2	; 0x02
    2830:	9b 81       	ldd	r25, Y+3	; 0x03
    2832:	00 97       	sbiw	r24, 0x00	; 0
    2834:	39 f0       	breq	.+14     	; 0x2844 <EXTI_u8Int0CallBack+0x28>
	{
		EXTI_voidCallBack[EXTI0] = Notification;
    2836:	8a 81       	ldd	r24, Y+2	; 0x02
    2838:	9b 81       	ldd	r25, Y+3	; 0x03
    283a:	90 93 a6 01 	sts	0x01A6, r25
    283e:	80 93 a5 01 	sts	0x01A5, r24
    2842:	02 c0       	rjmp	.+4      	; 0x2848 <EXTI_u8Int0CallBack+0x2c>
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    2844:	82 e0       	ldi	r24, 0x02	; 2
    2846:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2848:	89 81       	ldd	r24, Y+1	; 0x01
}
    284a:	0f 90       	pop	r0
    284c:	0f 90       	pop	r0
    284e:	0f 90       	pop	r0
    2850:	cf 91       	pop	r28
    2852:	df 91       	pop	r29
    2854:	08 95       	ret

00002856 <EXTI_voidInt0ChangeSence>:

u8 EXTI_voidInt0ChangeSence(u8 Copy_u8Sence)
{
    2856:	df 93       	push	r29
    2858:	cf 93       	push	r28
    285a:	00 d0       	rcall	.+0      	; 0x285c <EXTI_voidInt0ChangeSence+0x6>
    285c:	cd b7       	in	r28, 0x3d	; 61
    285e:	de b7       	in	r29, 0x3e	; 62
    2860:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2862:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Sence<=EXTI0_RISING_ADGE)
    2864:	8a 81       	ldd	r24, Y+2	; 0x02
    2866:	84 30       	cpi	r24, 0x04	; 4
    2868:	80 f4       	brcc	.+32     	; 0x288a <EXTI_voidInt0ChangeSence+0x34>
	{
		MCUCR &= MASK_SENCE_INT0;
    286a:	a5 e5       	ldi	r26, 0x55	; 85
    286c:	b0 e0       	ldi	r27, 0x00	; 0
    286e:	e5 e5       	ldi	r30, 0x55	; 85
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	80 81       	ld	r24, Z
    2874:	8c 7f       	andi	r24, 0xFC	; 252
    2876:	8c 93       	st	X, r24
		MCUCR |= Copy_u8Sence<<MCUCR_ISC00;
    2878:	a5 e5       	ldi	r26, 0x55	; 85
    287a:	b0 e0       	ldi	r27, 0x00	; 0
    287c:	e5 e5       	ldi	r30, 0x55	; 85
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	90 81       	ld	r25, Z
    2882:	8a 81       	ldd	r24, Y+2	; 0x02
    2884:	89 2b       	or	r24, r25
    2886:	8c 93       	st	X, r24
    2888:	02 c0       	rjmp	.+4      	; 0x288e <EXTI_voidInt0ChangeSence+0x38>
	}
	else
		Local_u8ErrorState = NOTOK;
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    288e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2890:	0f 90       	pop	r0
    2892:	0f 90       	pop	r0
    2894:	cf 91       	pop	r28
    2896:	df 91       	pop	r29
    2898:	08 95       	ret

0000289a <EXTI_voidInt1Init>:
void EXTI_voidInt1Init()
{
    289a:	df 93       	push	r29
    289c:	cf 93       	push	r28
    289e:	cd b7       	in	r28, 0x3d	; 61
    28a0:	de b7       	in	r29, 0x3e	; 62
	MCUCR &= MASK_SENCE_INT1;
    28a2:	a5 e5       	ldi	r26, 0x55	; 85
    28a4:	b0 e0       	ldi	r27, 0x00	; 0
    28a6:	e5 e5       	ldi	r30, 0x55	; 85
    28a8:	f0 e0       	ldi	r31, 0x00	; 0
    28aa:	80 81       	ld	r24, Z
    28ac:	83 7f       	andi	r24, 0xF3	; 243
    28ae:	8c 93       	st	X, r24
	MCUCR |= EXTI1_SENCECONTROL<<MCUCR_ISC10;
    28b0:	a5 e5       	ldi	r26, 0x55	; 85
    28b2:	b0 e0       	ldi	r27, 0x00	; 0
    28b4:	e5 e5       	ldi	r30, 0x55	; 85
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	80 81       	ld	r24, Z
    28ba:	88 60       	ori	r24, 0x08	; 8
    28bc:	8c 93       	st	X, r24

	SET_BIT(GICR,GICR_INT1);
    28be:	ab e5       	ldi	r26, 0x5B	; 91
    28c0:	b0 e0       	ldi	r27, 0x00	; 0
    28c2:	eb e5       	ldi	r30, 0x5B	; 91
    28c4:	f0 e0       	ldi	r31, 0x00	; 0
    28c6:	80 81       	ld	r24, Z
    28c8:	80 68       	ori	r24, 0x80	; 128
    28ca:	8c 93       	st	X, r24
}
    28cc:	cf 91       	pop	r28
    28ce:	df 91       	pop	r29
    28d0:	08 95       	ret

000028d2 <EXTI_u8Int1CallBack>:

u8 EXTI_u8Int1CallBack(void (*Notification)())
{
    28d2:	df 93       	push	r29
    28d4:	cf 93       	push	r28
    28d6:	00 d0       	rcall	.+0      	; 0x28d8 <EXTI_u8Int1CallBack+0x6>
    28d8:	0f 92       	push	r0
    28da:	cd b7       	in	r28, 0x3d	; 61
    28dc:	de b7       	in	r29, 0x3e	; 62
    28de:	9b 83       	std	Y+3, r25	; 0x03
    28e0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    28e2:	19 82       	std	Y+1, r1	; 0x01
	if(Notification != NULL )
    28e4:	8a 81       	ldd	r24, Y+2	; 0x02
    28e6:	9b 81       	ldd	r25, Y+3	; 0x03
    28e8:	00 97       	sbiw	r24, 0x00	; 0
    28ea:	39 f0       	breq	.+14     	; 0x28fa <EXTI_u8Int1CallBack+0x28>
	{
		EXTI_voidCallBack[EXTI1] = Notification;
    28ec:	8a 81       	ldd	r24, Y+2	; 0x02
    28ee:	9b 81       	ldd	r25, Y+3	; 0x03
    28f0:	90 93 a8 01 	sts	0x01A8, r25
    28f4:	80 93 a7 01 	sts	0x01A7, r24
    28f8:	02 c0       	rjmp	.+4      	; 0x28fe <EXTI_u8Int1CallBack+0x2c>
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    28fa:	82 e0       	ldi	r24, 0x02	; 2
    28fc:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    28fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2900:	0f 90       	pop	r0
    2902:	0f 90       	pop	r0
    2904:	0f 90       	pop	r0
    2906:	cf 91       	pop	r28
    2908:	df 91       	pop	r29
    290a:	08 95       	ret

0000290c <EXTI_voidInt1ChangeSence>:
u8 EXTI_voidInt1ChangeSence(u8 Copy_u8Sence)
{
    290c:	df 93       	push	r29
    290e:	cf 93       	push	r28
    2910:	00 d0       	rcall	.+0      	; 0x2912 <EXTI_voidInt1ChangeSence+0x6>
    2912:	cd b7       	in	r28, 0x3d	; 61
    2914:	de b7       	in	r29, 0x3e	; 62
    2916:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2918:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Sence<=EXTI1_RISING_ADGE)
    291a:	8a 81       	ldd	r24, Y+2	; 0x02
    291c:	84 30       	cpi	r24, 0x04	; 4
    291e:	b8 f4       	brcc	.+46     	; 0x294e <EXTI_voidInt1ChangeSence+0x42>
	{
		MCUCR &= MASK_SENCE_INT1;
    2920:	a5 e5       	ldi	r26, 0x55	; 85
    2922:	b0 e0       	ldi	r27, 0x00	; 0
    2924:	e5 e5       	ldi	r30, 0x55	; 85
    2926:	f0 e0       	ldi	r31, 0x00	; 0
    2928:	80 81       	ld	r24, Z
    292a:	83 7f       	andi	r24, 0xF3	; 243
    292c:	8c 93       	st	X, r24
		MCUCR |= Copy_u8Sence<<MCUCR_ISC10;
    292e:	a5 e5       	ldi	r26, 0x55	; 85
    2930:	b0 e0       	ldi	r27, 0x00	; 0
    2932:	e5 e5       	ldi	r30, 0x55	; 85
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	80 81       	ld	r24, Z
    2938:	28 2f       	mov	r18, r24
    293a:	8a 81       	ldd	r24, Y+2	; 0x02
    293c:	88 2f       	mov	r24, r24
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	88 0f       	add	r24, r24
    2942:	99 1f       	adc	r25, r25
    2944:	88 0f       	add	r24, r24
    2946:	99 1f       	adc	r25, r25
    2948:	82 2b       	or	r24, r18
    294a:	8c 93       	st	X, r24
    294c:	02 c0       	rjmp	.+4      	; 0x2952 <EXTI_voidInt1ChangeSence+0x46>
	}
	else
		Local_u8ErrorState = NOTOK;
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2952:	89 81       	ldd	r24, Y+1	; 0x01
}
    2954:	0f 90       	pop	r0
    2956:	0f 90       	pop	r0
    2958:	cf 91       	pop	r28
    295a:	df 91       	pop	r29
    295c:	08 95       	ret

0000295e <EXTI_voidInt2Init>:
void EXTI_voidInt2Init()
{
    295e:	df 93       	push	r29
    2960:	cf 93       	push	r28
    2962:	cd b7       	in	r28, 0x3d	; 61
    2964:	de b7       	in	r29, 0x3e	; 62
	MCUCSR &= MASK_SENCE_INT2;
    2966:	a4 e5       	ldi	r26, 0x54	; 84
    2968:	b0 e0       	ldi	r27, 0x00	; 0
    296a:	e4 e5       	ldi	r30, 0x54	; 84
    296c:	f0 e0       	ldi	r31, 0x00	; 0
    296e:	80 81       	ld	r24, Z
    2970:	8f 7b       	andi	r24, 0xBF	; 191
    2972:	8c 93       	st	X, r24
	MCUCSR |= EXTI2_SENCECONTROL<<MCUCSR_ISC2;
    2974:	a4 e5       	ldi	r26, 0x54	; 84
    2976:	b0 e0       	ldi	r27, 0x00	; 0
    2978:	e4 e5       	ldi	r30, 0x54	; 84
    297a:	f0 e0       	ldi	r31, 0x00	; 0
    297c:	80 81       	ld	r24, Z
    297e:	8c 93       	st	X, r24

	SET_BIT(GICR,GICR_INT2);
    2980:	ab e5       	ldi	r26, 0x5B	; 91
    2982:	b0 e0       	ldi	r27, 0x00	; 0
    2984:	eb e5       	ldi	r30, 0x5B	; 91
    2986:	f0 e0       	ldi	r31, 0x00	; 0
    2988:	80 81       	ld	r24, Z
    298a:	80 62       	ori	r24, 0x20	; 32
    298c:	8c 93       	st	X, r24
}
    298e:	cf 91       	pop	r28
    2990:	df 91       	pop	r29
    2992:	08 95       	ret

00002994 <EXTI_u8Int2CallBack>:

u8 EXTI_u8Int2CallBack(void (*Notification)())
{
    2994:	df 93       	push	r29
    2996:	cf 93       	push	r28
    2998:	00 d0       	rcall	.+0      	; 0x299a <EXTI_u8Int2CallBack+0x6>
    299a:	0f 92       	push	r0
    299c:	cd b7       	in	r28, 0x3d	; 61
    299e:	de b7       	in	r29, 0x3e	; 62
    29a0:	9b 83       	std	Y+3, r25	; 0x03
    29a2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    29a4:	19 82       	std	Y+1, r1	; 0x01
	if(Notification != NULL )
    29a6:	8a 81       	ldd	r24, Y+2	; 0x02
    29a8:	9b 81       	ldd	r25, Y+3	; 0x03
    29aa:	00 97       	sbiw	r24, 0x00	; 0
    29ac:	39 f0       	breq	.+14     	; 0x29bc <EXTI_u8Int2CallBack+0x28>
	{
		EXTI_voidCallBack[EXTI2] = Notification;
    29ae:	8a 81       	ldd	r24, Y+2	; 0x02
    29b0:	9b 81       	ldd	r25, Y+3	; 0x03
    29b2:	90 93 aa 01 	sts	0x01AA, r25
    29b6:	80 93 a9 01 	sts	0x01A9, r24
    29ba:	02 c0       	rjmp	.+4      	; 0x29c0 <EXTI_u8Int2CallBack+0x2c>
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    29bc:	82 e0       	ldi	r24, 0x02	; 2
    29be:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    29c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    29c2:	0f 90       	pop	r0
    29c4:	0f 90       	pop	r0
    29c6:	0f 90       	pop	r0
    29c8:	cf 91       	pop	r28
    29ca:	df 91       	pop	r29
    29cc:	08 95       	ret

000029ce <EXTI_voidInt2ChangeSence>:

u8 EXTI_voidInt2ChangeSence(u8 Copy_u8Sence)
{
    29ce:	df 93       	push	r29
    29d0:	cf 93       	push	r28
    29d2:	00 d0       	rcall	.+0      	; 0x29d4 <EXTI_voidInt2ChangeSence+0x6>
    29d4:	cd b7       	in	r28, 0x3d	; 61
    29d6:	de b7       	in	r29, 0x3e	; 62
    29d8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    29da:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Sence<=EXTI2_RISING_ADGE)
    29dc:	8a 81       	ldd	r24, Y+2	; 0x02
    29de:	82 30       	cpi	r24, 0x02	; 2
    29e0:	e0 f4       	brcc	.+56     	; 0x2a1a <EXTI_voidInt2ChangeSence+0x4c>
	{
		MCUCSR &= MASK_SENCE_INT2;
    29e2:	a4 e5       	ldi	r26, 0x54	; 84
    29e4:	b0 e0       	ldi	r27, 0x00	; 0
    29e6:	e4 e5       	ldi	r30, 0x54	; 84
    29e8:	f0 e0       	ldi	r31, 0x00	; 0
    29ea:	80 81       	ld	r24, Z
    29ec:	8f 7b       	andi	r24, 0xBF	; 191
    29ee:	8c 93       	st	X, r24
		MCUCSR |= Copy_u8Sence<<MCUCSR_ISC2;
    29f0:	a4 e5       	ldi	r26, 0x54	; 84
    29f2:	b0 e0       	ldi	r27, 0x00	; 0
    29f4:	e4 e5       	ldi	r30, 0x54	; 84
    29f6:	f0 e0       	ldi	r31, 0x00	; 0
    29f8:	80 81       	ld	r24, Z
    29fa:	28 2f       	mov	r18, r24
    29fc:	8a 81       	ldd	r24, Y+2	; 0x02
    29fe:	88 2f       	mov	r24, r24
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	00 24       	eor	r0, r0
    2a04:	96 95       	lsr	r25
    2a06:	87 95       	ror	r24
    2a08:	07 94       	ror	r0
    2a0a:	96 95       	lsr	r25
    2a0c:	87 95       	ror	r24
    2a0e:	07 94       	ror	r0
    2a10:	98 2f       	mov	r25, r24
    2a12:	80 2d       	mov	r24, r0
    2a14:	82 2b       	or	r24, r18
    2a16:	8c 93       	st	X, r24
    2a18:	02 c0       	rjmp	.+4      	; 0x2a1e <EXTI_voidInt2ChangeSence+0x50>
	}
	else
		Local_u8ErrorState = NOTOK;
    2a1a:	81 e0       	ldi	r24, 0x01	; 1
    2a1c:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2a1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a20:	0f 90       	pop	r0
    2a22:	0f 90       	pop	r0
    2a24:	cf 91       	pop	r28
    2a26:	df 91       	pop	r29
    2a28:	08 95       	ret

00002a2a <__vector_1>:
void __vector_1 (void)	__attribute__((signal));
void __vector_1 (void)
{
    2a2a:	1f 92       	push	r1
    2a2c:	0f 92       	push	r0
    2a2e:	0f b6       	in	r0, 0x3f	; 63
    2a30:	0f 92       	push	r0
    2a32:	11 24       	eor	r1, r1
    2a34:	2f 93       	push	r18
    2a36:	3f 93       	push	r19
    2a38:	4f 93       	push	r20
    2a3a:	5f 93       	push	r21
    2a3c:	6f 93       	push	r22
    2a3e:	7f 93       	push	r23
    2a40:	8f 93       	push	r24
    2a42:	9f 93       	push	r25
    2a44:	af 93       	push	r26
    2a46:	bf 93       	push	r27
    2a48:	ef 93       	push	r30
    2a4a:	ff 93       	push	r31
    2a4c:	df 93       	push	r29
    2a4e:	cf 93       	push	r28
    2a50:	cd b7       	in	r28, 0x3d	; 61
    2a52:	de b7       	in	r29, 0x3e	; 62
	EXTI_voidCallBack[EXTI0]();
    2a54:	e0 91 a5 01 	lds	r30, 0x01A5
    2a58:	f0 91 a6 01 	lds	r31, 0x01A6
    2a5c:	09 95       	icall
}
    2a5e:	cf 91       	pop	r28
    2a60:	df 91       	pop	r29
    2a62:	ff 91       	pop	r31
    2a64:	ef 91       	pop	r30
    2a66:	bf 91       	pop	r27
    2a68:	af 91       	pop	r26
    2a6a:	9f 91       	pop	r25
    2a6c:	8f 91       	pop	r24
    2a6e:	7f 91       	pop	r23
    2a70:	6f 91       	pop	r22
    2a72:	5f 91       	pop	r21
    2a74:	4f 91       	pop	r20
    2a76:	3f 91       	pop	r19
    2a78:	2f 91       	pop	r18
    2a7a:	0f 90       	pop	r0
    2a7c:	0f be       	out	0x3f, r0	; 63
    2a7e:	0f 90       	pop	r0
    2a80:	1f 90       	pop	r1
    2a82:	18 95       	reti

00002a84 <__vector_2>:

void __vector_2 (void)	__attribute__((signal));
void __vector_2 (void)
{
    2a84:	1f 92       	push	r1
    2a86:	0f 92       	push	r0
    2a88:	0f b6       	in	r0, 0x3f	; 63
    2a8a:	0f 92       	push	r0
    2a8c:	11 24       	eor	r1, r1
    2a8e:	2f 93       	push	r18
    2a90:	3f 93       	push	r19
    2a92:	4f 93       	push	r20
    2a94:	5f 93       	push	r21
    2a96:	6f 93       	push	r22
    2a98:	7f 93       	push	r23
    2a9a:	8f 93       	push	r24
    2a9c:	9f 93       	push	r25
    2a9e:	af 93       	push	r26
    2aa0:	bf 93       	push	r27
    2aa2:	ef 93       	push	r30
    2aa4:	ff 93       	push	r31
    2aa6:	df 93       	push	r29
    2aa8:	cf 93       	push	r28
    2aaa:	cd b7       	in	r28, 0x3d	; 61
    2aac:	de b7       	in	r29, 0x3e	; 62
	EXTI_voidCallBack[EXTI1]();
    2aae:	e0 91 a7 01 	lds	r30, 0x01A7
    2ab2:	f0 91 a8 01 	lds	r31, 0x01A8
    2ab6:	09 95       	icall
}
    2ab8:	cf 91       	pop	r28
    2aba:	df 91       	pop	r29
    2abc:	ff 91       	pop	r31
    2abe:	ef 91       	pop	r30
    2ac0:	bf 91       	pop	r27
    2ac2:	af 91       	pop	r26
    2ac4:	9f 91       	pop	r25
    2ac6:	8f 91       	pop	r24
    2ac8:	7f 91       	pop	r23
    2aca:	6f 91       	pop	r22
    2acc:	5f 91       	pop	r21
    2ace:	4f 91       	pop	r20
    2ad0:	3f 91       	pop	r19
    2ad2:	2f 91       	pop	r18
    2ad4:	0f 90       	pop	r0
    2ad6:	0f be       	out	0x3f, r0	; 63
    2ad8:	0f 90       	pop	r0
    2ada:	1f 90       	pop	r1
    2adc:	18 95       	reti

00002ade <__vector_3>:

void __vector_3 (void)	__attribute__((signal));
void __vector_3 (void)
{
    2ade:	1f 92       	push	r1
    2ae0:	0f 92       	push	r0
    2ae2:	0f b6       	in	r0, 0x3f	; 63
    2ae4:	0f 92       	push	r0
    2ae6:	11 24       	eor	r1, r1
    2ae8:	2f 93       	push	r18
    2aea:	3f 93       	push	r19
    2aec:	4f 93       	push	r20
    2aee:	5f 93       	push	r21
    2af0:	6f 93       	push	r22
    2af2:	7f 93       	push	r23
    2af4:	8f 93       	push	r24
    2af6:	9f 93       	push	r25
    2af8:	af 93       	push	r26
    2afa:	bf 93       	push	r27
    2afc:	ef 93       	push	r30
    2afe:	ff 93       	push	r31
    2b00:	df 93       	push	r29
    2b02:	cf 93       	push	r28
    2b04:	cd b7       	in	r28, 0x3d	; 61
    2b06:	de b7       	in	r29, 0x3e	; 62
	EXTI_voidCallBack[EXTI2]();
    2b08:	e0 91 a9 01 	lds	r30, 0x01A9
    2b0c:	f0 91 aa 01 	lds	r31, 0x01AA
    2b10:	09 95       	icall
}
    2b12:	cf 91       	pop	r28
    2b14:	df 91       	pop	r29
    2b16:	ff 91       	pop	r31
    2b18:	ef 91       	pop	r30
    2b1a:	bf 91       	pop	r27
    2b1c:	af 91       	pop	r26
    2b1e:	9f 91       	pop	r25
    2b20:	8f 91       	pop	r24
    2b22:	7f 91       	pop	r23
    2b24:	6f 91       	pop	r22
    2b26:	5f 91       	pop	r21
    2b28:	4f 91       	pop	r20
    2b2a:	3f 91       	pop	r19
    2b2c:	2f 91       	pop	r18
    2b2e:	0f 90       	pop	r0
    2b30:	0f be       	out	0x3f, r0	; 63
    2b32:	0f 90       	pop	r0
    2b34:	1f 90       	pop	r1
    2b36:	18 95       	reti

00002b38 <GIE_voidEnable>:
#include "../MCAL/GIE_interface.h"
#include "../MCAL/GIE_register.h"


void GIE_voidEnable()
{
    2b38:	df 93       	push	r29
    2b3a:	cf 93       	push	r28
    2b3c:	cd b7       	in	r28, 0x3d	; 61
    2b3e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    2b40:	af e5       	ldi	r26, 0x5F	; 95
    2b42:	b0 e0       	ldi	r27, 0x00	; 0
    2b44:	ef e5       	ldi	r30, 0x5F	; 95
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	80 81       	ld	r24, Z
    2b4a:	80 68       	ori	r24, 0x80	; 128
    2b4c:	8c 93       	st	X, r24
}
    2b4e:	cf 91       	pop	r28
    2b50:	df 91       	pop	r29
    2b52:	08 95       	ret

00002b54 <GIE_voidDisable>:

void GIE_voidDisable()
{
    2b54:	df 93       	push	r29
    2b56:	cf 93       	push	r28
    2b58:	cd b7       	in	r28, 0x3d	; 61
    2b5a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    2b5c:	af e5       	ldi	r26, 0x5F	; 95
    2b5e:	b0 e0       	ldi	r27, 0x00	; 0
    2b60:	ef e5       	ldi	r30, 0x5F	; 95
    2b62:	f0 e0       	ldi	r31, 0x00	; 0
    2b64:	80 81       	ld	r24, Z
    2b66:	8f 77       	andi	r24, 0x7F	; 127
    2b68:	8c 93       	st	X, r24
}
    2b6a:	cf 91       	pop	r28
    2b6c:	df 91       	pop	r29
    2b6e:	08 95       	ret

00002b70 <KPD_u8Key_pressed>:
#include "../HAL/KPD_config.h"
#include "../HAL/KPD_interface.h"
#include "../HAL/KPD_private.h"

u8 KPD_u8Key_pressed()
{
    2b70:	df 93       	push	r29
    2b72:	cf 93       	push	r28
    2b74:	00 d0       	rcall	.+0      	; 0x2b76 <KPD_u8Key_pressed+0x6>
    2b76:	00 d0       	rcall	.+0      	; 0x2b78 <KPD_u8Key_pressed+0x8>
    2b78:	0f 92       	push	r0
    2b7a:	cd b7       	in	r28, 0x3d	; 61
    2b7c:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8RowItrator;
	u8 Local_u8ColItrator;
	u8 Local_u8GetState;
	u8 Local_u8KeyPressed = KPD_NO_PRESSED_KEY;
    2b7e:	8f ef       	ldi	r24, 0xFF	; 255
    2b80:	89 83       	std	Y+1, r24	; 0x01
	static u8 Local_u8KPD_ROW_PINS[Max_Rows] = { KPD_ROW_PIN0, KPD_ROW_PIN1,
			KPD_ROW_PIN2, KPD_ROW_PIN3 };
	static u8 Local_u8KPD_COL_PINS[Max_Cols] = { KPD_COL_PIN0, KPD_COL_PIN1,
			KPD_COL_PIN2, KPD_COL_PIN3 };
	static u8 Local_u8KPD_Nums[Max_Rows][Max_Cols] = KPD_u8ARR;
	for (Local_u8ColItrator = 0; Local_u8ColItrator < Max_Cols;
    2b82:	1a 82       	std	Y+2, r1	; 0x02
    2b84:	5e c0       	rjmp	.+188    	; 0x2c42 <KPD_u8Key_pressed+0xd2>
			Local_u8ColItrator++) {
		DIO_u8SetPinValue(KPD_INPUT_PORT,
    2b86:	8a 81       	ldd	r24, Y+2	; 0x02
    2b88:	88 2f       	mov	r24, r24
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	fc 01       	movw	r30, r24
    2b8e:	e8 58       	subi	r30, 0x88	; 136
    2b90:	fe 4f       	sbci	r31, 0xFE	; 254
    2b92:	90 81       	ld	r25, Z
    2b94:	83 e0       	ldi	r24, 0x03	; 3
    2b96:	69 2f       	mov	r22, r25
    2b98:	40 e0       	ldi	r20, 0x00	; 0
    2b9a:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_u8SetPinValue>
				Local_u8KPD_COL_PINS[Local_u8ColItrator], DIO_PIN_LOW);
		/*Read the current Row*/
		for (Local_u8RowItrator = 0; Local_u8RowItrator < Max_Rows;
    2b9e:	1b 82       	std	Y+3, r1	; 0x03
    2ba0:	3d c0       	rjmp	.+122    	; 0x2c1c <KPD_u8Key_pressed+0xac>
				Local_u8RowItrator++) {
			DIO_u8GetPinValue(KPD_INPUT_PORT,
    2ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba4:	88 2f       	mov	r24, r24
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	fc 01       	movw	r30, r24
    2baa:	e4 58       	subi	r30, 0x84	; 132
    2bac:	fe 4f       	sbci	r31, 0xFE	; 254
    2bae:	90 81       	ld	r25, Z
    2bb0:	9e 01       	movw	r18, r28
    2bb2:	2c 5f       	subi	r18, 0xFC	; 252
    2bb4:	3f 4f       	sbci	r19, 0xFF	; 255
    2bb6:	83 e0       	ldi	r24, 0x03	; 3
    2bb8:	69 2f       	mov	r22, r25
    2bba:	a9 01       	movw	r20, r18
    2bbc:	0e 94 b1 11 	call	0x2362	; 0x2362 <DIO_u8GetPinValue>
					Local_u8KPD_ROW_PINS[Local_u8RowItrator],
					&Local_u8GetState);
			/*chick switch id pressed */
			if (Local_u8GetState == DIO_PIN_LOW) {
    2bc0:	8c 81       	ldd	r24, Y+4	; 0x04
    2bc2:	88 23       	and	r24, r24
    2bc4:	41 f5       	brne	.+80     	; 0x2c16 <KPD_u8Key_pressed+0xa6>
				Local_u8KeyPressed =
    2bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc8:	48 2f       	mov	r20, r24
    2bca:	50 e0       	ldi	r21, 0x00	; 0
    2bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bce:	28 2f       	mov	r18, r24
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	ca 01       	movw	r24, r20
    2bd4:	88 0f       	add	r24, r24
    2bd6:	99 1f       	adc	r25, r25
    2bd8:	88 0f       	add	r24, r24
    2bda:	99 1f       	adc	r25, r25
    2bdc:	82 0f       	add	r24, r18
    2bde:	93 1f       	adc	r25, r19
    2be0:	fc 01       	movw	r30, r24
    2be2:	e8 59       	subi	r30, 0x98	; 152
    2be4:	fe 4f       	sbci	r31, 0xFE	; 254
    2be6:	80 81       	ld	r24, Z
    2be8:	89 83       	std	Y+1, r24	; 0x01
    2bea:	0f c0       	rjmp	.+30     	; 0x2c0a <KPD_u8Key_pressed+0x9a>
						Local_u8KPD_Nums[Local_u8RowItrator][Local_u8ColItrator];
				/*polling busy waiting until the key is released*/
				while (Local_u8GetState == DIO_PIN_LOW) {
					DIO_u8GetPinValue(KPD_INPUT_PORT,
    2bec:	8b 81       	ldd	r24, Y+3	; 0x03
    2bee:	88 2f       	mov	r24, r24
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	fc 01       	movw	r30, r24
    2bf4:	e4 58       	subi	r30, 0x84	; 132
    2bf6:	fe 4f       	sbci	r31, 0xFE	; 254
    2bf8:	90 81       	ld	r25, Z
    2bfa:	9e 01       	movw	r18, r28
    2bfc:	2c 5f       	subi	r18, 0xFC	; 252
    2bfe:	3f 4f       	sbci	r19, 0xFF	; 255
    2c00:	83 e0       	ldi	r24, 0x03	; 3
    2c02:	69 2f       	mov	r22, r25
    2c04:	a9 01       	movw	r20, r18
    2c06:	0e 94 b1 11 	call	0x2362	; 0x2362 <DIO_u8GetPinValue>
			/*chick switch id pressed */
			if (Local_u8GetState == DIO_PIN_LOW) {
				Local_u8KeyPressed =
						Local_u8KPD_Nums[Local_u8RowItrator][Local_u8ColItrator];
				/*polling busy waiting until the key is released*/
				while (Local_u8GetState == DIO_PIN_LOW) {
    2c0a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c0c:	88 23       	and	r24, r24
    2c0e:	71 f3       	breq	.-36     	; 0x2bec <KPD_u8Key_pressed+0x7c>
					DIO_u8GetPinValue(KPD_INPUT_PORT,
							Local_u8KPD_ROW_PINS[Local_u8RowItrator],
							&Local_u8GetState);
				}
				return Local_u8KeyPressed;
    2c10:	89 81       	ldd	r24, Y+1	; 0x01
    2c12:	8d 83       	std	Y+5, r24	; 0x05
    2c14:	1c c0       	rjmp	.+56     	; 0x2c4e <KPD_u8Key_pressed+0xde>
			Local_u8ColItrator++) {
		DIO_u8SetPinValue(KPD_INPUT_PORT,
				Local_u8KPD_COL_PINS[Local_u8ColItrator], DIO_PIN_LOW);
		/*Read the current Row*/
		for (Local_u8RowItrator = 0; Local_u8RowItrator < Max_Rows;
				Local_u8RowItrator++) {
    2c16:	8b 81       	ldd	r24, Y+3	; 0x03
    2c18:	8f 5f       	subi	r24, 0xFF	; 255
    2c1a:	8b 83       	std	Y+3, r24	; 0x03
	for (Local_u8ColItrator = 0; Local_u8ColItrator < Max_Cols;
			Local_u8ColItrator++) {
		DIO_u8SetPinValue(KPD_INPUT_PORT,
				Local_u8KPD_COL_PINS[Local_u8ColItrator], DIO_PIN_LOW);
		/*Read the current Row*/
		for (Local_u8RowItrator = 0; Local_u8RowItrator < Max_Rows;
    2c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1e:	84 30       	cpi	r24, 0x04	; 4
    2c20:	08 f4       	brcc	.+2      	; 0x2c24 <KPD_u8Key_pressed+0xb4>
    2c22:	bf cf       	rjmp	.-130    	; 0x2ba2 <KPD_u8Key_pressed+0x32>
							&Local_u8GetState);
				}
				return Local_u8KeyPressed;
			}
		}
		DIO_u8SetPinValue(KPD_INPUT_PORT,
    2c24:	8a 81       	ldd	r24, Y+2	; 0x02
    2c26:	88 2f       	mov	r24, r24
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	fc 01       	movw	r30, r24
    2c2c:	e8 58       	subi	r30, 0x88	; 136
    2c2e:	fe 4f       	sbci	r31, 0xFE	; 254
    2c30:	90 81       	ld	r25, Z
    2c32:	83 e0       	ldi	r24, 0x03	; 3
    2c34:	69 2f       	mov	r22, r25
    2c36:	41 e0       	ldi	r20, 0x01	; 1
    2c38:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_u8SetPinValue>
			KPD_ROW_PIN2, KPD_ROW_PIN3 };
	static u8 Local_u8KPD_COL_PINS[Max_Cols] = { KPD_COL_PIN0, KPD_COL_PIN1,
			KPD_COL_PIN2, KPD_COL_PIN3 };
	static u8 Local_u8KPD_Nums[Max_Rows][Max_Cols] = KPD_u8ARR;
	for (Local_u8ColItrator = 0; Local_u8ColItrator < Max_Cols;
			Local_u8ColItrator++) {
    2c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3e:	8f 5f       	subi	r24, 0xFF	; 255
    2c40:	8a 83       	std	Y+2, r24	; 0x02
	static u8 Local_u8KPD_ROW_PINS[Max_Rows] = { KPD_ROW_PIN0, KPD_ROW_PIN1,
			KPD_ROW_PIN2, KPD_ROW_PIN3 };
	static u8 Local_u8KPD_COL_PINS[Max_Cols] = { KPD_COL_PIN0, KPD_COL_PIN1,
			KPD_COL_PIN2, KPD_COL_PIN3 };
	static u8 Local_u8KPD_Nums[Max_Rows][Max_Cols] = KPD_u8ARR;
	for (Local_u8ColItrator = 0; Local_u8ColItrator < Max_Cols;
    2c42:	8a 81       	ldd	r24, Y+2	; 0x02
    2c44:	84 30       	cpi	r24, 0x04	; 4
    2c46:	08 f4       	brcc	.+2      	; 0x2c4a <KPD_u8Key_pressed+0xda>
    2c48:	9e cf       	rjmp	.-196    	; 0x2b86 <KPD_u8Key_pressed+0x16>
			}
		}
		DIO_u8SetPinValue(KPD_INPUT_PORT,
				Local_u8KPD_COL_PINS[Local_u8ColItrator], DIO_PIN_HIGH);
	}
	return Local_u8KeyPressed;
    2c4a:	89 81       	ldd	r24, Y+1	; 0x01
    2c4c:	8d 83       	std	Y+5, r24	; 0x05
    2c4e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2c50:	0f 90       	pop	r0
    2c52:	0f 90       	pop	r0
    2c54:	0f 90       	pop	r0
    2c56:	0f 90       	pop	r0
    2c58:	0f 90       	pop	r0
    2c5a:	cf 91       	pop	r28
    2c5c:	df 91       	pop	r29
    2c5e:	08 95       	ret

00002c60 <LED_u8TurnOn>:
#include "../HAL/LED_private.h"
#include "../HAL/LED_config.h"
#include "../HAL/LED_interface.h"

u8 LED_u8TurnOn(LED_t * Copy_LED)
{
    2c60:	df 93       	push	r29
    2c62:	cf 93       	push	r28
    2c64:	00 d0       	rcall	.+0      	; 0x2c66 <LED_u8TurnOn+0x6>
    2c66:	0f 92       	push	r0
    2c68:	cd b7       	in	r28, 0x3d	; 61
    2c6a:	de b7       	in	r29, 0x3e	; 62
    2c6c:	9b 83       	std	Y+3, r25	; 0x03
    2c6e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2c70:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_LED->ConnType==LED_SOUCE)
    2c72:	ea 81       	ldd	r30, Y+2	; 0x02
    2c74:	fb 81       	ldd	r31, Y+3	; 0x03
    2c76:	82 81       	ldd	r24, Z+2	; 0x02
    2c78:	81 30       	cpi	r24, 0x01	; 1
    2c7a:	59 f4       	brne	.+22     	; 0x2c92 <LED_u8TurnOn+0x32>
	{
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,DIO_PIN_HIGH);
    2c7c:	ea 81       	ldd	r30, Y+2	; 0x02
    2c7e:	fb 81       	ldd	r31, Y+3	; 0x03
    2c80:	80 81       	ld	r24, Z
    2c82:	ea 81       	ldd	r30, Y+2	; 0x02
    2c84:	fb 81       	ldd	r31, Y+3	; 0x03
    2c86:	91 81       	ldd	r25, Z+1	; 0x01
    2c88:	69 2f       	mov	r22, r25
    2c8a:	41 e0       	ldi	r20, 0x01	; 1
    2c8c:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_u8SetPinValue>
    2c90:	12 c0       	rjmp	.+36     	; 0x2cb6 <LED_u8TurnOn+0x56>
	}
	else if(Copy_LED->ConnType==LED_SINK)
    2c92:	ea 81       	ldd	r30, Y+2	; 0x02
    2c94:	fb 81       	ldd	r31, Y+3	; 0x03
    2c96:	82 81       	ldd	r24, Z+2	; 0x02
    2c98:	88 23       	and	r24, r24
    2c9a:	59 f4       	brne	.+22     	; 0x2cb2 <LED_u8TurnOn+0x52>
	{
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,DIO_PIN_LOW);
    2c9c:	ea 81       	ldd	r30, Y+2	; 0x02
    2c9e:	fb 81       	ldd	r31, Y+3	; 0x03
    2ca0:	80 81       	ld	r24, Z
    2ca2:	ea 81       	ldd	r30, Y+2	; 0x02
    2ca4:	fb 81       	ldd	r31, Y+3	; 0x03
    2ca6:	91 81       	ldd	r25, Z+1	; 0x01
    2ca8:	69 2f       	mov	r22, r25
    2caa:	40 e0       	ldi	r20, 0x00	; 0
    2cac:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_u8SetPinValue>
    2cb0:	02 c0       	rjmp	.+4      	; 0x2cb6 <LED_u8TurnOn+0x56>
	}
	else
		Local_u8ErrorState = NOTOK;
    2cb2:	81 e0       	ldi	r24, 0x01	; 1
    2cb4:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    2cb6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cb8:	0f 90       	pop	r0
    2cba:	0f 90       	pop	r0
    2cbc:	0f 90       	pop	r0
    2cbe:	cf 91       	pop	r28
    2cc0:	df 91       	pop	r29
    2cc2:	08 95       	ret

00002cc4 <LED_u8TurnOff>:
u8 LED_u8TurnOff(LED_t * Copy_LED)
{
    2cc4:	df 93       	push	r29
    2cc6:	cf 93       	push	r28
    2cc8:	00 d0       	rcall	.+0      	; 0x2cca <LED_u8TurnOff+0x6>
    2cca:	0f 92       	push	r0
    2ccc:	cd b7       	in	r28, 0x3d	; 61
    2cce:	de b7       	in	r29, 0x3e	; 62
    2cd0:	9b 83       	std	Y+3, r25	; 0x03
    2cd2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2cd4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_LED->ConnType==LED_SOUCE)
    2cd6:	ea 81       	ldd	r30, Y+2	; 0x02
    2cd8:	fb 81       	ldd	r31, Y+3	; 0x03
    2cda:	82 81       	ldd	r24, Z+2	; 0x02
    2cdc:	81 30       	cpi	r24, 0x01	; 1
    2cde:	59 f4       	brne	.+22     	; 0x2cf6 <LED_u8TurnOff+0x32>
	{
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,DIO_PIN_LOW);
    2ce0:	ea 81       	ldd	r30, Y+2	; 0x02
    2ce2:	fb 81       	ldd	r31, Y+3	; 0x03
    2ce4:	80 81       	ld	r24, Z
    2ce6:	ea 81       	ldd	r30, Y+2	; 0x02
    2ce8:	fb 81       	ldd	r31, Y+3	; 0x03
    2cea:	91 81       	ldd	r25, Z+1	; 0x01
    2cec:	69 2f       	mov	r22, r25
    2cee:	40 e0       	ldi	r20, 0x00	; 0
    2cf0:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_u8SetPinValue>
    2cf4:	12 c0       	rjmp	.+36     	; 0x2d1a <LED_u8TurnOff+0x56>
	}
	else if(Copy_LED->ConnType==LED_SINK)
    2cf6:	ea 81       	ldd	r30, Y+2	; 0x02
    2cf8:	fb 81       	ldd	r31, Y+3	; 0x03
    2cfa:	82 81       	ldd	r24, Z+2	; 0x02
    2cfc:	88 23       	and	r24, r24
    2cfe:	59 f4       	brne	.+22     	; 0x2d16 <LED_u8TurnOff+0x52>
	{
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,DIO_PIN_HIGH);
    2d00:	ea 81       	ldd	r30, Y+2	; 0x02
    2d02:	fb 81       	ldd	r31, Y+3	; 0x03
    2d04:	80 81       	ld	r24, Z
    2d06:	ea 81       	ldd	r30, Y+2	; 0x02
    2d08:	fb 81       	ldd	r31, Y+3	; 0x03
    2d0a:	91 81       	ldd	r25, Z+1	; 0x01
    2d0c:	69 2f       	mov	r22, r25
    2d0e:	41 e0       	ldi	r20, 0x01	; 1
    2d10:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_u8SetPinValue>
    2d14:	02 c0       	rjmp	.+4      	; 0x2d1a <LED_u8TurnOff+0x56>
	}
	else
		Local_u8ErrorState = NOTOK;
    2d16:	81 e0       	ldi	r24, 0x01	; 1
    2d18:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    2d1a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d1c:	0f 90       	pop	r0
    2d1e:	0f 90       	pop	r0
    2d20:	0f 90       	pop	r0
    2d22:	cf 91       	pop	r28
    2d24:	df 91       	pop	r29
    2d26:	08 95       	ret

00002d28 <LED_u8TogLed>:
u8 LED_u8TogLed(LED_t *Copy_LED)
{
    2d28:	df 93       	push	r29
    2d2a:	cf 93       	push	r28
    2d2c:	00 d0       	rcall	.+0      	; 0x2d2e <LED_u8TogLed+0x6>
    2d2e:	0f 92       	push	r0
    2d30:	cd b7       	in	r28, 0x3d	; 61
    2d32:	de b7       	in	r29, 0x3e	; 62
    2d34:	9b 83       	std	Y+3, r25	; 0x03
    2d36:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2d38:	19 82       	std	Y+1, r1	; 0x01
	static u8 Local_u8State = 0;
	if(Copy_LED->ConnType==LED_SOUCE)
    2d3a:	ea 81       	ldd	r30, Y+2	; 0x02
    2d3c:	fb 81       	ldd	r31, Y+3	; 0x03
    2d3e:	82 81       	ldd	r24, Z+2	; 0x02
    2d40:	81 30       	cpi	r24, 0x01	; 1
    2d42:	99 f4       	brne	.+38     	; 0x2d6a <LED_u8TogLed+0x42>
	{
		TOG_BIT(Local_u8State,0);
    2d44:	90 91 ab 01 	lds	r25, 0x01AB
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	89 27       	eor	r24, r25
    2d4c:	80 93 ab 01 	sts	0x01AB, r24
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,Local_u8State);
    2d50:	ea 81       	ldd	r30, Y+2	; 0x02
    2d52:	fb 81       	ldd	r31, Y+3	; 0x03
    2d54:	80 81       	ld	r24, Z
    2d56:	ea 81       	ldd	r30, Y+2	; 0x02
    2d58:	fb 81       	ldd	r31, Y+3	; 0x03
    2d5a:	91 81       	ldd	r25, Z+1	; 0x01
    2d5c:	20 91 ab 01 	lds	r18, 0x01AB
    2d60:	69 2f       	mov	r22, r25
    2d62:	42 2f       	mov	r20, r18
    2d64:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_u8SetPinValue>
    2d68:	1a c0       	rjmp	.+52     	; 0x2d9e <LED_u8TogLed+0x76>
	}
	else if(Copy_LED->ConnType==LED_SINK)
    2d6a:	ea 81       	ldd	r30, Y+2	; 0x02
    2d6c:	fb 81       	ldd	r31, Y+3	; 0x03
    2d6e:	82 81       	ldd	r24, Z+2	; 0x02
    2d70:	88 23       	and	r24, r24
    2d72:	99 f4       	brne	.+38     	; 0x2d9a <LED_u8TogLed+0x72>
	{
		TOG_BIT(Local_u8State,0);
    2d74:	90 91 ab 01 	lds	r25, 0x01AB
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	89 27       	eor	r24, r25
    2d7c:	80 93 ab 01 	sts	0x01AB, r24
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,Local_u8State);
    2d80:	ea 81       	ldd	r30, Y+2	; 0x02
    2d82:	fb 81       	ldd	r31, Y+3	; 0x03
    2d84:	80 81       	ld	r24, Z
    2d86:	ea 81       	ldd	r30, Y+2	; 0x02
    2d88:	fb 81       	ldd	r31, Y+3	; 0x03
    2d8a:	91 81       	ldd	r25, Z+1	; 0x01
    2d8c:	20 91 ab 01 	lds	r18, 0x01AB
    2d90:	69 2f       	mov	r22, r25
    2d92:	42 2f       	mov	r20, r18
    2d94:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_u8SetPinValue>
    2d98:	02 c0       	rjmp	.+4      	; 0x2d9e <LED_u8TogLed+0x76>
	}
	else
		Local_u8ErrorState = NOTOK;
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
    2d9c:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    2d9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2da0:	0f 90       	pop	r0
    2da2:	0f 90       	pop	r0
    2da4:	0f 90       	pop	r0
    2da6:	cf 91       	pop	r28
    2da8:	df 91       	pop	r29
    2daa:	08 95       	ret

00002dac <PORT_voidInit>:
#include "../MCAL/PORT_config.h"
#include "../MCAL/PORT_register.h"
#include "../MCAL/PORT_interface.h"

void PORT_voidInit()
{
    2dac:	df 93       	push	r29
    2dae:	cf 93       	push	r28
    2db0:	cd b7       	in	r28, 0x3d	; 61
    2db2:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;	
    2db4:	ea e3       	ldi	r30, 0x3A	; 58
    2db6:	f0 e0       	ldi	r31, 0x00	; 0
    2db8:	10 82       	st	Z, r1
	DDRB = PORTB_DIR;
    2dba:	e7 e3       	ldi	r30, 0x37	; 55
    2dbc:	f0 e0       	ldi	r31, 0x00	; 0
    2dbe:	85 e0       	ldi	r24, 0x05	; 5
    2dc0:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    2dc2:	e4 e3       	ldi	r30, 0x34	; 52
    2dc4:	f0 e0       	ldi	r31, 0x00	; 0
    2dc6:	80 ef       	ldi	r24, 0xF0	; 240
    2dc8:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    2dca:	e1 e3       	ldi	r30, 0x31	; 49
    2dcc:	f0 e0       	ldi	r31, 0x00	; 0
    2dce:	10 82       	st	Z, r1
	
	PORTA =PORTA_INIT_VALUE;
    2dd0:	eb e3       	ldi	r30, 0x3B	; 59
    2dd2:	f0 e0       	ldi	r31, 0x00	; 0
    2dd4:	8f e9       	ldi	r24, 0x9F	; 159
    2dd6:	80 83       	st	Z, r24
	PORTB =PORTB_INIT_VALUE;
    2dd8:	e8 e3       	ldi	r30, 0x38	; 56
    2dda:	f0 e0       	ldi	r31, 0x00	; 0
    2ddc:	10 82       	st	Z, r1
	PORTC =PORTC_INIT_VALUE;
    2dde:	e5 e3       	ldi	r30, 0x35	; 53
    2de0:	f0 e0       	ldi	r31, 0x00	; 0
    2de2:	80 ef       	ldi	r24, 0xF0	; 240
    2de4:	80 83       	st	Z, r24
	PORTD =PORTD_INIT_VALUE;
    2de6:	e2 e3       	ldi	r30, 0x32	; 50
    2de8:	f0 e0       	ldi	r31, 0x00	; 0
    2dea:	10 82       	st	Z, r1
	
}
    2dec:	cf 91       	pop	r28
    2dee:	df 91       	pop	r29
    2df0:	08 95       	ret

00002df2 <SSD_u8SetNumber>:
#include "../HAL/SSD_private.h"
#include "../HAL/SSD_config.h"
#include "../HAL/SSD_interface.h"

u8 SSD_u8SetNumber(u8 Copy_u8Number,SSD_t *Copy_SSD)
{
    2df2:	df 93       	push	r29
    2df4:	cf 93       	push	r28
    2df6:	00 d0       	rcall	.+0      	; 0x2df8 <SSD_u8SetNumber+0x6>
    2df8:	00 d0       	rcall	.+0      	; 0x2dfa <SSD_u8SetNumber+0x8>
    2dfa:	cd b7       	in	r28, 0x3d	; 61
    2dfc:	de b7       	in	r29, 0x3e	; 62
    2dfe:	8a 83       	std	Y+2, r24	; 0x02
    2e00:	7c 83       	std	Y+4, r23	; 0x04
    2e02:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState= OK;
    2e04:	19 82       	std	Y+1, r1	; 0x01
	static u8 SSD_Arr[10] = SSD_ARR_OF_NUM;
	if(Copy_SSD->ComType==ANODE)
    2e06:	eb 81       	ldd	r30, Y+3	; 0x03
    2e08:	fc 81       	ldd	r31, Y+4	; 0x04
    2e0a:	80 81       	ld	r24, Z
    2e0c:	88 23       	and	r24, r24
    2e0e:	91 f4       	brne	.+36     	; 0x2e34 <SSD_u8SetNumber+0x42>
	{
		Local_u8ErrorState = DIO_u8SetPortValue(Copy_SSD->Port,~SSD_Arr[Copy_u8Number]);
    2e10:	eb 81       	ldd	r30, Y+3	; 0x03
    2e12:	fc 81       	ldd	r31, Y+4	; 0x04
    2e14:	21 81       	ldd	r18, Z+1	; 0x01
    2e16:	8a 81       	ldd	r24, Y+2	; 0x02
    2e18:	88 2f       	mov	r24, r24
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	fc 01       	movw	r30, r24
    2e1e:	e0 58       	subi	r30, 0x80	; 128
    2e20:	fe 4f       	sbci	r31, 0xFE	; 254
    2e22:	80 81       	ld	r24, Z
    2e24:	98 2f       	mov	r25, r24
    2e26:	90 95       	com	r25
    2e28:	82 2f       	mov	r24, r18
    2e2a:	69 2f       	mov	r22, r25
    2e2c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <DIO_u8SetPortValue>
    2e30:	89 83       	std	Y+1, r24	; 0x01
    2e32:	17 c0       	rjmp	.+46     	; 0x2e62 <SSD_u8SetNumber+0x70>
	}
	else if(Copy_SSD->ComType==CATHODE )
    2e34:	eb 81       	ldd	r30, Y+3	; 0x03
    2e36:	fc 81       	ldd	r31, Y+4	; 0x04
    2e38:	80 81       	ld	r24, Z
    2e3a:	81 30       	cpi	r24, 0x01	; 1
    2e3c:	81 f4       	brne	.+32     	; 0x2e5e <SSD_u8SetNumber+0x6c>
	{
		Local_u8ErrorState = DIO_u8SetPortValue(Copy_SSD->Port,SSD_Arr[Copy_u8Number]);
    2e3e:	eb 81       	ldd	r30, Y+3	; 0x03
    2e40:	fc 81       	ldd	r31, Y+4	; 0x04
    2e42:	21 81       	ldd	r18, Z+1	; 0x01
    2e44:	8a 81       	ldd	r24, Y+2	; 0x02
    2e46:	88 2f       	mov	r24, r24
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	fc 01       	movw	r30, r24
    2e4c:	e0 58       	subi	r30, 0x80	; 128
    2e4e:	fe 4f       	sbci	r31, 0xFE	; 254
    2e50:	90 81       	ld	r25, Z
    2e52:	82 2f       	mov	r24, r18
    2e54:	69 2f       	mov	r22, r25
    2e56:	0e 94 63 11 	call	0x22c6	; 0x22c6 <DIO_u8SetPortValue>
    2e5a:	89 83       	std	Y+1, r24	; 0x01
    2e5c:	02 c0       	rjmp	.+4      	; 0x2e62 <SSD_u8SetNumber+0x70>
	}
	else
		Local_u8ErrorState = NOTOK;
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2e62:	89 81       	ldd	r24, Y+1	; 0x01

}
    2e64:	0f 90       	pop	r0
    2e66:	0f 90       	pop	r0
    2e68:	0f 90       	pop	r0
    2e6a:	0f 90       	pop	r0
    2e6c:	cf 91       	pop	r28
    2e6e:	df 91       	pop	r29
    2e70:	08 95       	ret

00002e72 <SSD_u8Enable>:
u8 SSD_u8Enable(SSD_t *Copy_SSD)
{
    2e72:	df 93       	push	r29
    2e74:	cf 93       	push	r28
    2e76:	00 d0       	rcall	.+0      	; 0x2e78 <SSD_u8Enable+0x6>
    2e78:	0f 92       	push	r0
    2e7a:	cd b7       	in	r28, 0x3d	; 61
    2e7c:	de b7       	in	r29, 0x3e	; 62
    2e7e:	9b 83       	std	Y+3, r25	; 0x03
    2e80:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState= OK;
    2e82:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_SSD->ComType==ANODE)
    2e84:	ea 81       	ldd	r30, Y+2	; 0x02
    2e86:	fb 81       	ldd	r31, Y+3	; 0x03
    2e88:	80 81       	ld	r24, Z
    2e8a:	88 23       	and	r24, r24
    2e8c:	61 f4       	brne	.+24     	; 0x2ea6 <SSD_u8Enable+0x34>
	{
		Local_u8ErrorState = DIO_u8SetPinValue(Copy_SSD->EnablePort,Copy_SSD->EnablePin,DIO_PIN_HIGH);
    2e8e:	ea 81       	ldd	r30, Y+2	; 0x02
    2e90:	fb 81       	ldd	r31, Y+3	; 0x03
    2e92:	82 81       	ldd	r24, Z+2	; 0x02
    2e94:	ea 81       	ldd	r30, Y+2	; 0x02
    2e96:	fb 81       	ldd	r31, Y+3	; 0x03
    2e98:	93 81       	ldd	r25, Z+3	; 0x03
    2e9a:	69 2f       	mov	r22, r25
    2e9c:	41 e0       	ldi	r20, 0x01	; 1
    2e9e:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_u8SetPinValue>
    2ea2:	89 83       	std	Y+1, r24	; 0x01
    2ea4:	13 c0       	rjmp	.+38     	; 0x2ecc <SSD_u8Enable+0x5a>
	}
	else if(Copy_SSD->ComType==CATHODE )
    2ea6:	ea 81       	ldd	r30, Y+2	; 0x02
    2ea8:	fb 81       	ldd	r31, Y+3	; 0x03
    2eaa:	80 81       	ld	r24, Z
    2eac:	81 30       	cpi	r24, 0x01	; 1
    2eae:	61 f4       	brne	.+24     	; 0x2ec8 <SSD_u8Enable+0x56>
	{
		Local_u8ErrorState = DIO_u8SetPinValue(Copy_SSD->EnablePort,Copy_SSD->EnablePin,DIO_PIN_LOW);
    2eb0:	ea 81       	ldd	r30, Y+2	; 0x02
    2eb2:	fb 81       	ldd	r31, Y+3	; 0x03
    2eb4:	82 81       	ldd	r24, Z+2	; 0x02
    2eb6:	ea 81       	ldd	r30, Y+2	; 0x02
    2eb8:	fb 81       	ldd	r31, Y+3	; 0x03
    2eba:	93 81       	ldd	r25, Z+3	; 0x03
    2ebc:	69 2f       	mov	r22, r25
    2ebe:	40 e0       	ldi	r20, 0x00	; 0
    2ec0:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_u8SetPinValue>
    2ec4:	89 83       	std	Y+1, r24	; 0x01
    2ec6:	02 c0       	rjmp	.+4      	; 0x2ecc <SSD_u8Enable+0x5a>
	}
	else
		Local_u8ErrorState = NOTOK;
    2ec8:	81 e0       	ldi	r24, 0x01	; 1
    2eca:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2ecc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ece:	0f 90       	pop	r0
    2ed0:	0f 90       	pop	r0
    2ed2:	0f 90       	pop	r0
    2ed4:	cf 91       	pop	r28
    2ed6:	df 91       	pop	r29
    2ed8:	08 95       	ret

00002eda <SSD_u8Disable>:

u8 SSD_u8Disable(SSD_t *Copy_SSD)
{
    2eda:	df 93       	push	r29
    2edc:	cf 93       	push	r28
    2ede:	00 d0       	rcall	.+0      	; 0x2ee0 <SSD_u8Disable+0x6>
    2ee0:	0f 92       	push	r0
    2ee2:	cd b7       	in	r28, 0x3d	; 61
    2ee4:	de b7       	in	r29, 0x3e	; 62
    2ee6:	9b 83       	std	Y+3, r25	; 0x03
    2ee8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState= OK;
    2eea:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_SSD->ComType==ANODE)
    2eec:	ea 81       	ldd	r30, Y+2	; 0x02
    2eee:	fb 81       	ldd	r31, Y+3	; 0x03
    2ef0:	80 81       	ld	r24, Z
    2ef2:	88 23       	and	r24, r24
    2ef4:	61 f4       	brne	.+24     	; 0x2f0e <SSD_u8Disable+0x34>
	{
		Local_u8ErrorState = DIO_u8SetPinValue(Copy_SSD->EnablePort,Copy_SSD->EnablePin,DIO_PIN_LOW);
    2ef6:	ea 81       	ldd	r30, Y+2	; 0x02
    2ef8:	fb 81       	ldd	r31, Y+3	; 0x03
    2efa:	82 81       	ldd	r24, Z+2	; 0x02
    2efc:	ea 81       	ldd	r30, Y+2	; 0x02
    2efe:	fb 81       	ldd	r31, Y+3	; 0x03
    2f00:	93 81       	ldd	r25, Z+3	; 0x03
    2f02:	69 2f       	mov	r22, r25
    2f04:	40 e0       	ldi	r20, 0x00	; 0
    2f06:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_u8SetPinValue>
    2f0a:	89 83       	std	Y+1, r24	; 0x01
    2f0c:	13 c0       	rjmp	.+38     	; 0x2f34 <SSD_u8Disable+0x5a>
	}
	else if(Copy_SSD->ComType==CATHODE )
    2f0e:	ea 81       	ldd	r30, Y+2	; 0x02
    2f10:	fb 81       	ldd	r31, Y+3	; 0x03
    2f12:	80 81       	ld	r24, Z
    2f14:	81 30       	cpi	r24, 0x01	; 1
    2f16:	61 f4       	brne	.+24     	; 0x2f30 <SSD_u8Disable+0x56>
	{
		Local_u8ErrorState = DIO_u8SetPinValue(Copy_SSD->EnablePort,Copy_SSD->EnablePin,DIO_PIN_HIGH);
    2f18:	ea 81       	ldd	r30, Y+2	; 0x02
    2f1a:	fb 81       	ldd	r31, Y+3	; 0x03
    2f1c:	82 81       	ldd	r24, Z+2	; 0x02
    2f1e:	ea 81       	ldd	r30, Y+2	; 0x02
    2f20:	fb 81       	ldd	r31, Y+3	; 0x03
    2f22:	93 81       	ldd	r25, Z+3	; 0x03
    2f24:	69 2f       	mov	r22, r25
    2f26:	41 e0       	ldi	r20, 0x01	; 1
    2f28:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_u8SetPinValue>
    2f2c:	89 83       	std	Y+1, r24	; 0x01
    2f2e:	02 c0       	rjmp	.+4      	; 0x2f34 <SSD_u8Disable+0x5a>
	}
	else
		Local_u8ErrorState = NOTOK;
    2f30:	81 e0       	ldi	r24, 0x01	; 1
    2f32:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2f34:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f36:	0f 90       	pop	r0
    2f38:	0f 90       	pop	r0
    2f3a:	0f 90       	pop	r0
    2f3c:	cf 91       	pop	r28
    2f3e:	df 91       	pop	r29
    2f40:	08 95       	ret

00002f42 <STEP_MOTORu8StartFullMode>:
#include "../HAL/STEP_MOTOR_config.h"
#include "../HAL/STEP_MOTOR_private.h"
#include "../HAL/STEP_MOTOR_interface.h"
#include "../HAL/CLCD_interface.h"
u8 STEP_MOTORu8StartFullMode(STEP_t *Copy_pStep)
{
    2f42:	df 93       	push	r29
    2f44:	cf 93       	push	r28
    2f46:	cd b7       	in	r28, 0x3d	; 61
    2f48:	de b7       	in	r29, 0x3e	; 62
    2f4a:	c2 54       	subi	r28, 0x42	; 66
    2f4c:	d0 40       	sbci	r29, 0x00	; 0
    2f4e:	0f b6       	in	r0, 0x3f	; 63
    2f50:	f8 94       	cli
    2f52:	de bf       	out	0x3e, r29	; 62
    2f54:	0f be       	out	0x3f, r0	; 63
    2f56:	cd bf       	out	0x3d, r28	; 61
    2f58:	fe 01       	movw	r30, r28
    2f5a:	ef 5b       	subi	r30, 0xBF	; 191
    2f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5e:	91 83       	std	Z+1, r25	; 0x01
    2f60:	80 83       	st	Z, r24
	u8 Local_u8ErrorState = OK;
    2f62:	fe 01       	movw	r30, r28
    2f64:	e0 5c       	subi	r30, 0xC0	; 192
    2f66:	ff 4f       	sbci	r31, 0xFF	; 255
    2f68:	10 82       	st	Z, r1
	u16 Local_u16NumOfSteps = (u16)((((f32)Copy_pStep->AngleDegree)/11.2)*64.0);
    2f6a:	fe 01       	movw	r30, r28
    2f6c:	ef 5b       	subi	r30, 0xBF	; 191
    2f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f70:	01 90       	ld	r0, Z+
    2f72:	f0 81       	ld	r31, Z
    2f74:	e0 2d       	mov	r30, r0
    2f76:	83 81       	ldd	r24, Z+3	; 0x03
    2f78:	94 81       	ldd	r25, Z+4	; 0x04
    2f7a:	cc 01       	movw	r24, r24
    2f7c:	a0 e0       	ldi	r26, 0x00	; 0
    2f7e:	b0 e0       	ldi	r27, 0x00	; 0
    2f80:	bc 01       	movw	r22, r24
    2f82:	cd 01       	movw	r24, r26
    2f84:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2f88:	dc 01       	movw	r26, r24
    2f8a:	cb 01       	movw	r24, r22
    2f8c:	bc 01       	movw	r22, r24
    2f8e:	cd 01       	movw	r24, r26
    2f90:	23 e3       	ldi	r18, 0x33	; 51
    2f92:	33 e3       	ldi	r19, 0x33	; 51
    2f94:	43 e3       	ldi	r20, 0x33	; 51
    2f96:	51 e4       	ldi	r21, 0x41	; 65
    2f98:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f9c:	dc 01       	movw	r26, r24
    2f9e:	cb 01       	movw	r24, r22
    2fa0:	bc 01       	movw	r22, r24
    2fa2:	cd 01       	movw	r24, r26
    2fa4:	20 e0       	ldi	r18, 0x00	; 0
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	40 e8       	ldi	r20, 0x80	; 128
    2faa:	52 e4       	ldi	r21, 0x42	; 66
    2fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb0:	dc 01       	movw	r26, r24
    2fb2:	cb 01       	movw	r24, r22
    2fb4:	bc 01       	movw	r22, r24
    2fb6:	cd 01       	movw	r24, r26
    2fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fbc:	dc 01       	movw	r26, r24
    2fbe:	cb 01       	movw	r24, r22
    2fc0:	9f af       	std	Y+63, r25	; 0x3f
    2fc2:	8e af       	std	Y+62, r24	; 0x3e
	u16 Local_u16MaxItration = (Local_u16NumOfSteps/MAX_FULL_STEP );
    2fc4:	8e ad       	ldd	r24, Y+62	; 0x3e
    2fc6:	9f ad       	ldd	r25, Y+63	; 0x3f
    2fc8:	96 95       	lsr	r25
    2fca:	87 95       	ror	r24
    2fcc:	96 95       	lsr	r25
    2fce:	87 95       	ror	r24
    2fd0:	9d af       	std	Y+61, r25	; 0x3d
    2fd2:	8c af       	std	Y+60, r24	; 0x3c
	u16 Local_u16Counter = 0;
    2fd4:	1b ae       	std	Y+59, r1	; 0x3b
    2fd6:	1a ae       	std	Y+58, r1	; 0x3a
	u8 Local_u8ItrateStep = 0;
    2fd8:	19 ae       	std	Y+57, r1	; 0x39
	if(STEP_LOWER_NIBBLE == Copy_pStep->Nibble)
    2fda:	fe 01       	movw	r30, r28
    2fdc:	ef 5b       	subi	r30, 0xBF	; 191
    2fde:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe0:	01 90       	ld	r0, Z+
    2fe2:	f0 81       	ld	r31, Z
    2fe4:	e0 2d       	mov	r30, r0
    2fe6:	81 81       	ldd	r24, Z+1	; 0x01
    2fe8:	88 23       	and	r24, r24
    2fea:	09 f0       	breq	.+2      	; 0x2fee <STEP_MOTORu8StartFullMode+0xac>
    2fec:	5e c1       	rjmp	.+700    	; 0x32aa <STEP_MOTORu8StartFullMode+0x368>
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
    2fee:	fe 01       	movw	r30, r28
    2ff0:	ef 5b       	subi	r30, 0xBF	; 191
    2ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff4:	01 90       	ld	r0, Z+
    2ff6:	f0 81       	ld	r31, Z
    2ff8:	e0 2d       	mov	r30, r0
    2ffa:	82 81       	ldd	r24, Z+2	; 0x02
    2ffc:	88 23       	and	r24, r24
    2ffe:	09 f0       	breq	.+2      	; 0x3002 <STEP_MOTORu8StartFullMode+0xc0>
    3000:	a2 c0       	rjmp	.+324    	; 0x3146 <STEP_MOTORu8StartFullMode+0x204>
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3002:	1b ae       	std	Y+59, r1	; 0x3b
    3004:	1a ae       	std	Y+58, r1	; 0x3a
    3006:	96 c0       	rjmp	.+300    	; 0x3134 <STEP_MOTORu8StartFullMode+0x1f2>
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    3008:	19 ae       	std	Y+57, r1	; 0x39
    300a:	8b c0       	rjmp	.+278    	; 0x3122 <STEP_MOTORu8StartFullMode+0x1e0>
				{
					DIO_u8SetLowNibbleValue(Copy_pStep->Port,(MASK_CW<<Local_u8ItrateStep));
    300c:	fe 01       	movw	r30, r28
    300e:	ef 5b       	subi	r30, 0xBF	; 191
    3010:	ff 4f       	sbci	r31, 0xFF	; 255
    3012:	01 90       	ld	r0, Z+
    3014:	f0 81       	ld	r31, Z
    3016:	e0 2d       	mov	r30, r0
    3018:	40 81       	ld	r20, Z
    301a:	89 ad       	ldd	r24, Y+57	; 0x39
    301c:	28 2f       	mov	r18, r24
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	81 e0       	ldi	r24, 0x01	; 1
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	02 c0       	rjmp	.+4      	; 0x302a <STEP_MOTORu8StartFullMode+0xe8>
    3026:	88 0f       	add	r24, r24
    3028:	99 1f       	adc	r25, r25
    302a:	2a 95       	dec	r18
    302c:	e2 f7       	brpl	.-8      	; 0x3026 <STEP_MOTORu8StartFullMode+0xe4>
    302e:	98 2f       	mov	r25, r24
    3030:	84 2f       	mov	r24, r20
    3032:	69 2f       	mov	r22, r25
    3034:	0e 94 d7 12 	call	0x25ae	; 0x25ae <DIO_u8SetLowNibbleValue>
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	a0 e0       	ldi	r26, 0x00	; 0
    303e:	b0 e4       	ldi	r27, 0x40	; 64
    3040:	8d ab       	std	Y+53, r24	; 0x35
    3042:	9e ab       	std	Y+54, r25	; 0x36
    3044:	af ab       	std	Y+55, r26	; 0x37
    3046:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3048:	6d a9       	ldd	r22, Y+53	; 0x35
    304a:	7e a9       	ldd	r23, Y+54	; 0x36
    304c:	8f a9       	ldd	r24, Y+55	; 0x37
    304e:	98 ad       	ldd	r25, Y+56	; 0x38
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	4a ef       	ldi	r20, 0xFA	; 250
    3056:	54 e4       	ldi	r21, 0x44	; 68
    3058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	89 ab       	std	Y+49, r24	; 0x31
    3062:	9a ab       	std	Y+50, r25	; 0x32
    3064:	ab ab       	std	Y+51, r26	; 0x33
    3066:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3068:	69 a9       	ldd	r22, Y+49	; 0x31
    306a:	7a a9       	ldd	r23, Y+50	; 0x32
    306c:	8b a9       	ldd	r24, Y+51	; 0x33
    306e:	9c a9       	ldd	r25, Y+52	; 0x34
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	40 e8       	ldi	r20, 0x80	; 128
    3076:	5f e3       	ldi	r21, 0x3F	; 63
    3078:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    307c:	88 23       	and	r24, r24
    307e:	2c f4       	brge	.+10     	; 0x308a <STEP_MOTORu8StartFullMode+0x148>
		__ticks = 1;
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	98 ab       	std	Y+48, r25	; 0x30
    3086:	8f a7       	std	Y+47, r24	; 0x2f
    3088:	3f c0       	rjmp	.+126    	; 0x3108 <STEP_MOTORu8StartFullMode+0x1c6>
	else if (__tmp > 65535)
    308a:	69 a9       	ldd	r22, Y+49	; 0x31
    308c:	7a a9       	ldd	r23, Y+50	; 0x32
    308e:	8b a9       	ldd	r24, Y+51	; 0x33
    3090:	9c a9       	ldd	r25, Y+52	; 0x34
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	3f ef       	ldi	r19, 0xFF	; 255
    3096:	4f e7       	ldi	r20, 0x7F	; 127
    3098:	57 e4       	ldi	r21, 0x47	; 71
    309a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    309e:	18 16       	cp	r1, r24
    30a0:	4c f5       	brge	.+82     	; 0x30f4 <STEP_MOTORu8StartFullMode+0x1b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30a2:	6d a9       	ldd	r22, Y+53	; 0x35
    30a4:	7e a9       	ldd	r23, Y+54	; 0x36
    30a6:	8f a9       	ldd	r24, Y+55	; 0x37
    30a8:	98 ad       	ldd	r25, Y+56	; 0x38
    30aa:	20 e0       	ldi	r18, 0x00	; 0
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	40 e2       	ldi	r20, 0x20	; 32
    30b0:	51 e4       	ldi	r21, 0x41	; 65
    30b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	bc 01       	movw	r22, r24
    30bc:	cd 01       	movw	r24, r26
    30be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	98 ab       	std	Y+48, r25	; 0x30
    30c8:	8f a7       	std	Y+47, r24	; 0x2f
    30ca:	0f c0       	rjmp	.+30     	; 0x30ea <STEP_MOTORu8StartFullMode+0x1a8>
    30cc:	88 ec       	ldi	r24, 0xC8	; 200
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	9e a7       	std	Y+46, r25	; 0x2e
    30d2:	8d a7       	std	Y+45, r24	; 0x2d
    30d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    30d6:	9e a5       	ldd	r25, Y+46	; 0x2e
    30d8:	01 97       	sbiw	r24, 0x01	; 1
    30da:	f1 f7       	brne	.-4      	; 0x30d8 <STEP_MOTORu8StartFullMode+0x196>
    30dc:	9e a7       	std	Y+46, r25	; 0x2e
    30de:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    30e2:	98 a9       	ldd	r25, Y+48	; 0x30
    30e4:	01 97       	sbiw	r24, 0x01	; 1
    30e6:	98 ab       	std	Y+48, r25	; 0x30
    30e8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    30ec:	98 a9       	ldd	r25, Y+48	; 0x30
    30ee:	00 97       	sbiw	r24, 0x00	; 0
    30f0:	69 f7       	brne	.-38     	; 0x30cc <STEP_MOTORu8StartFullMode+0x18a>
    30f2:	14 c0       	rjmp	.+40     	; 0x311c <STEP_MOTORu8StartFullMode+0x1da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f4:	69 a9       	ldd	r22, Y+49	; 0x31
    30f6:	7a a9       	ldd	r23, Y+50	; 0x32
    30f8:	8b a9       	ldd	r24, Y+51	; 0x33
    30fa:	9c a9       	ldd	r25, Y+52	; 0x34
    30fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	98 ab       	std	Y+48, r25	; 0x30
    3106:	8f a7       	std	Y+47, r24	; 0x2f
    3108:	8f a5       	ldd	r24, Y+47	; 0x2f
    310a:	98 a9       	ldd	r25, Y+48	; 0x30
    310c:	9c a7       	std	Y+44, r25	; 0x2c
    310e:	8b a7       	std	Y+43, r24	; 0x2b
    3110:	8b a5       	ldd	r24, Y+43	; 0x2b
    3112:	9c a5       	ldd	r25, Y+44	; 0x2c
    3114:	01 97       	sbiw	r24, 0x01	; 1
    3116:	f1 f7       	brne	.-4      	; 0x3114 <STEP_MOTORu8StartFullMode+0x1d2>
    3118:	9c a7       	std	Y+44, r25	; 0x2c
    311a:	8b a7       	std	Y+43, r24	; 0x2b
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    311c:	89 ad       	ldd	r24, Y+57	; 0x39
    311e:	8f 5f       	subi	r24, 0xFF	; 255
    3120:	89 af       	std	Y+57, r24	; 0x39
    3122:	89 ad       	ldd	r24, Y+57	; 0x39
    3124:	84 30       	cpi	r24, 0x04	; 4
    3126:	08 f4       	brcc	.+2      	; 0x312a <STEP_MOTORu8StartFullMode+0x1e8>
    3128:	71 cf       	rjmp	.-286    	; 0x300c <STEP_MOTORu8StartFullMode+0xca>
	u8 Local_u8ItrateStep = 0;
	if(STEP_LOWER_NIBBLE == Copy_pStep->Nibble)
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    312a:	8a ad       	ldd	r24, Y+58	; 0x3a
    312c:	9b ad       	ldd	r25, Y+59	; 0x3b
    312e:	01 96       	adiw	r24, 0x01	; 1
    3130:	9b af       	std	Y+59, r25	; 0x3b
    3132:	8a af       	std	Y+58, r24	; 0x3a
    3134:	2a ad       	ldd	r18, Y+58	; 0x3a
    3136:	3b ad       	ldd	r19, Y+59	; 0x3b
    3138:	8c ad       	ldd	r24, Y+60	; 0x3c
    313a:	9d ad       	ldd	r25, Y+61	; 0x3d
    313c:	28 17       	cp	r18, r24
    313e:	39 07       	cpc	r19, r25
    3140:	08 f4       	brcc	.+2      	; 0x3144 <STEP_MOTORu8StartFullMode+0x202>
    3142:	62 cf       	rjmp	.-316    	; 0x3008 <STEP_MOTORu8StartFullMode+0xc6>
    3144:	1f c2       	rjmp	.+1086   	; 0x3584 <STEP_MOTORu8StartFullMode+0x642>
					DIO_u8SetLowNibbleValue(Copy_pStep->Port,(MASK_CW<<Local_u8ItrateStep));
					_delay_ms(2);
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
    3146:	fe 01       	movw	r30, r28
    3148:	ef 5b       	subi	r30, 0xBF	; 191
    314a:	ff 4f       	sbci	r31, 0xFF	; 255
    314c:	01 90       	ld	r0, Z+
    314e:	f0 81       	ld	r31, Z
    3150:	e0 2d       	mov	r30, r0
    3152:	82 81       	ldd	r24, Z+2	; 0x02
    3154:	81 30       	cpi	r24, 0x01	; 1
    3156:	09 f0       	breq	.+2      	; 0x315a <STEP_MOTORu8StartFullMode+0x218>
    3158:	a2 c0       	rjmp	.+324    	; 0x329e <STEP_MOTORu8StartFullMode+0x35c>
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    315a:	1b ae       	std	Y+59, r1	; 0x3b
    315c:	1a ae       	std	Y+58, r1	; 0x3a
    315e:	96 c0       	rjmp	.+300    	; 0x328c <STEP_MOTORu8StartFullMode+0x34a>
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    3160:	19 ae       	std	Y+57, r1	; 0x39
    3162:	8b c0       	rjmp	.+278    	; 0x327a <STEP_MOTORu8StartFullMode+0x338>
				{
					DIO_u8SetLowNibbleValue(Copy_pStep->Port,(MASK_CCW>>Local_u8ItrateStep));
    3164:	fe 01       	movw	r30, r28
    3166:	ef 5b       	subi	r30, 0xBF	; 191
    3168:	ff 4f       	sbci	r31, 0xFF	; 255
    316a:	01 90       	ld	r0, Z+
    316c:	f0 81       	ld	r31, Z
    316e:	e0 2d       	mov	r30, r0
    3170:	40 81       	ld	r20, Z
    3172:	89 ad       	ldd	r24, Y+57	; 0x39
    3174:	28 2f       	mov	r18, r24
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	88 e0       	ldi	r24, 0x08	; 8
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	02 c0       	rjmp	.+4      	; 0x3182 <STEP_MOTORu8StartFullMode+0x240>
    317e:	95 95       	asr	r25
    3180:	87 95       	ror	r24
    3182:	2a 95       	dec	r18
    3184:	e2 f7       	brpl	.-8      	; 0x317e <STEP_MOTORu8StartFullMode+0x23c>
    3186:	98 2f       	mov	r25, r24
    3188:	84 2f       	mov	r24, r20
    318a:	69 2f       	mov	r22, r25
    318c:	0e 94 d7 12 	call	0x25ae	; 0x25ae <DIO_u8SetLowNibbleValue>
    3190:	80 e0       	ldi	r24, 0x00	; 0
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	a0 e0       	ldi	r26, 0x00	; 0
    3196:	b0 e4       	ldi	r27, 0x40	; 64
    3198:	8f a3       	std	Y+39, r24	; 0x27
    319a:	98 a7       	std	Y+40, r25	; 0x28
    319c:	a9 a7       	std	Y+41, r26	; 0x29
    319e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31a0:	6f a1       	ldd	r22, Y+39	; 0x27
    31a2:	78 a5       	ldd	r23, Y+40	; 0x28
    31a4:	89 a5       	ldd	r24, Y+41	; 0x29
    31a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    31a8:	20 e0       	ldi	r18, 0x00	; 0
    31aa:	30 e0       	ldi	r19, 0x00	; 0
    31ac:	4a ef       	ldi	r20, 0xFA	; 250
    31ae:	54 e4       	ldi	r21, 0x44	; 68
    31b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b4:	dc 01       	movw	r26, r24
    31b6:	cb 01       	movw	r24, r22
    31b8:	8b a3       	std	Y+35, r24	; 0x23
    31ba:	9c a3       	std	Y+36, r25	; 0x24
    31bc:	ad a3       	std	Y+37, r26	; 0x25
    31be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    31c0:	6b a1       	ldd	r22, Y+35	; 0x23
    31c2:	7c a1       	ldd	r23, Y+36	; 0x24
    31c4:	8d a1       	ldd	r24, Y+37	; 0x25
    31c6:	9e a1       	ldd	r25, Y+38	; 0x26
    31c8:	20 e0       	ldi	r18, 0x00	; 0
    31ca:	30 e0       	ldi	r19, 0x00	; 0
    31cc:	40 e8       	ldi	r20, 0x80	; 128
    31ce:	5f e3       	ldi	r21, 0x3F	; 63
    31d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31d4:	88 23       	and	r24, r24
    31d6:	2c f4       	brge	.+10     	; 0x31e2 <STEP_MOTORu8StartFullMode+0x2a0>
		__ticks = 1;
    31d8:	81 e0       	ldi	r24, 0x01	; 1
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	9a a3       	std	Y+34, r25	; 0x22
    31de:	89 a3       	std	Y+33, r24	; 0x21
    31e0:	3f c0       	rjmp	.+126    	; 0x3260 <STEP_MOTORu8StartFullMode+0x31e>
	else if (__tmp > 65535)
    31e2:	6b a1       	ldd	r22, Y+35	; 0x23
    31e4:	7c a1       	ldd	r23, Y+36	; 0x24
    31e6:	8d a1       	ldd	r24, Y+37	; 0x25
    31e8:	9e a1       	ldd	r25, Y+38	; 0x26
    31ea:	20 e0       	ldi	r18, 0x00	; 0
    31ec:	3f ef       	ldi	r19, 0xFF	; 255
    31ee:	4f e7       	ldi	r20, 0x7F	; 127
    31f0:	57 e4       	ldi	r21, 0x47	; 71
    31f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31f6:	18 16       	cp	r1, r24
    31f8:	4c f5       	brge	.+82     	; 0x324c <STEP_MOTORu8StartFullMode+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31fa:	6f a1       	ldd	r22, Y+39	; 0x27
    31fc:	78 a5       	ldd	r23, Y+40	; 0x28
    31fe:	89 a5       	ldd	r24, Y+41	; 0x29
    3200:	9a a5       	ldd	r25, Y+42	; 0x2a
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	40 e2       	ldi	r20, 0x20	; 32
    3208:	51 e4       	ldi	r21, 0x41	; 65
    320a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    320e:	dc 01       	movw	r26, r24
    3210:	cb 01       	movw	r24, r22
    3212:	bc 01       	movw	r22, r24
    3214:	cd 01       	movw	r24, r26
    3216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    321a:	dc 01       	movw	r26, r24
    321c:	cb 01       	movw	r24, r22
    321e:	9a a3       	std	Y+34, r25	; 0x22
    3220:	89 a3       	std	Y+33, r24	; 0x21
    3222:	0f c0       	rjmp	.+30     	; 0x3242 <STEP_MOTORu8StartFullMode+0x300>
    3224:	88 ec       	ldi	r24, 0xC8	; 200
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	98 a3       	std	Y+32, r25	; 0x20
    322a:	8f 8f       	std	Y+31, r24	; 0x1f
    322c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    322e:	98 a1       	ldd	r25, Y+32	; 0x20
    3230:	01 97       	sbiw	r24, 0x01	; 1
    3232:	f1 f7       	brne	.-4      	; 0x3230 <STEP_MOTORu8StartFullMode+0x2ee>
    3234:	98 a3       	std	Y+32, r25	; 0x20
    3236:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3238:	89 a1       	ldd	r24, Y+33	; 0x21
    323a:	9a a1       	ldd	r25, Y+34	; 0x22
    323c:	01 97       	sbiw	r24, 0x01	; 1
    323e:	9a a3       	std	Y+34, r25	; 0x22
    3240:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3242:	89 a1       	ldd	r24, Y+33	; 0x21
    3244:	9a a1       	ldd	r25, Y+34	; 0x22
    3246:	00 97       	sbiw	r24, 0x00	; 0
    3248:	69 f7       	brne	.-38     	; 0x3224 <STEP_MOTORu8StartFullMode+0x2e2>
    324a:	14 c0       	rjmp	.+40     	; 0x3274 <STEP_MOTORu8StartFullMode+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    324c:	6b a1       	ldd	r22, Y+35	; 0x23
    324e:	7c a1       	ldd	r23, Y+36	; 0x24
    3250:	8d a1       	ldd	r24, Y+37	; 0x25
    3252:	9e a1       	ldd	r25, Y+38	; 0x26
    3254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3258:	dc 01       	movw	r26, r24
    325a:	cb 01       	movw	r24, r22
    325c:	9a a3       	std	Y+34, r25	; 0x22
    325e:	89 a3       	std	Y+33, r24	; 0x21
    3260:	89 a1       	ldd	r24, Y+33	; 0x21
    3262:	9a a1       	ldd	r25, Y+34	; 0x22
    3264:	9e 8f       	std	Y+30, r25	; 0x1e
    3266:	8d 8f       	std	Y+29, r24	; 0x1d
    3268:	8d 8d       	ldd	r24, Y+29	; 0x1d
    326a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    326c:	01 97       	sbiw	r24, 0x01	; 1
    326e:	f1 f7       	brne	.-4      	; 0x326c <STEP_MOTORu8StartFullMode+0x32a>
    3270:	9e 8f       	std	Y+30, r25	; 0x1e
    3272:	8d 8f       	std	Y+29, r24	; 0x1d
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    3274:	89 ad       	ldd	r24, Y+57	; 0x39
    3276:	8f 5f       	subi	r24, 0xFF	; 255
    3278:	89 af       	std	Y+57, r24	; 0x39
    327a:	89 ad       	ldd	r24, Y+57	; 0x39
    327c:	84 30       	cpi	r24, 0x04	; 4
    327e:	08 f4       	brcc	.+2      	; 0x3282 <STEP_MOTORu8StartFullMode+0x340>
    3280:	71 cf       	rjmp	.-286    	; 0x3164 <STEP_MOTORu8StartFullMode+0x222>
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3282:	8a ad       	ldd	r24, Y+58	; 0x3a
    3284:	9b ad       	ldd	r25, Y+59	; 0x3b
    3286:	01 96       	adiw	r24, 0x01	; 1
    3288:	9b af       	std	Y+59, r25	; 0x3b
    328a:	8a af       	std	Y+58, r24	; 0x3a
    328c:	2a ad       	ldd	r18, Y+58	; 0x3a
    328e:	3b ad       	ldd	r19, Y+59	; 0x3b
    3290:	8c ad       	ldd	r24, Y+60	; 0x3c
    3292:	9d ad       	ldd	r25, Y+61	; 0x3d
    3294:	28 17       	cp	r18, r24
    3296:	39 07       	cpc	r19, r25
    3298:	08 f4       	brcc	.+2      	; 0x329c <STEP_MOTORu8StartFullMode+0x35a>
    329a:	62 cf       	rjmp	.-316    	; 0x3160 <STEP_MOTORu8StartFullMode+0x21e>
    329c:	73 c1       	rjmp	.+742    	; 0x3584 <STEP_MOTORu8StartFullMode+0x642>
					_delay_ms(2);
				}
			}
		}
		else
			Local_u8ErrorState = NOTOK;
    329e:	81 e0       	ldi	r24, 0x01	; 1
    32a0:	fe 01       	movw	r30, r28
    32a2:	e0 5c       	subi	r30, 0xC0	; 192
    32a4:	ff 4f       	sbci	r31, 0xFF	; 255
    32a6:	80 83       	st	Z, r24
    32a8:	6d c1       	rjmp	.+730    	; 0x3584 <STEP_MOTORu8StartFullMode+0x642>
	}
	else if(STEP_UPPER_NIBBLE == Copy_pStep->Nibble)
    32aa:	fe 01       	movw	r30, r28
    32ac:	ef 5b       	subi	r30, 0xBF	; 191
    32ae:	ff 4f       	sbci	r31, 0xFF	; 255
    32b0:	01 90       	ld	r0, Z+
    32b2:	f0 81       	ld	r31, Z
    32b4:	e0 2d       	mov	r30, r0
    32b6:	81 81       	ldd	r24, Z+1	; 0x01
    32b8:	81 30       	cpi	r24, 0x01	; 1
    32ba:	09 f0       	breq	.+2      	; 0x32be <STEP_MOTORu8StartFullMode+0x37c>
    32bc:	5e c1       	rjmp	.+700    	; 0x357a <STEP_MOTORu8StartFullMode+0x638>
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
    32be:	fe 01       	movw	r30, r28
    32c0:	ef 5b       	subi	r30, 0xBF	; 191
    32c2:	ff 4f       	sbci	r31, 0xFF	; 255
    32c4:	01 90       	ld	r0, Z+
    32c6:	f0 81       	ld	r31, Z
    32c8:	e0 2d       	mov	r30, r0
    32ca:	82 81       	ldd	r24, Z+2	; 0x02
    32cc:	88 23       	and	r24, r24
    32ce:	09 f0       	breq	.+2      	; 0x32d2 <STEP_MOTORu8StartFullMode+0x390>
    32d0:	a2 c0       	rjmp	.+324    	; 0x3416 <STEP_MOTORu8StartFullMode+0x4d4>
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    32d2:	1b ae       	std	Y+59, r1	; 0x3b
    32d4:	1a ae       	std	Y+58, r1	; 0x3a
    32d6:	96 c0       	rjmp	.+300    	; 0x3404 <STEP_MOTORu8StartFullMode+0x4c2>
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    32d8:	19 ae       	std	Y+57, r1	; 0x39
    32da:	8b c0       	rjmp	.+278    	; 0x33f2 <STEP_MOTORu8StartFullMode+0x4b0>
				{
					DIO_u8SetHighNibbleValue(Copy_pStep->Port,(MASK_CW<<Local_u8ItrateStep));
    32dc:	fe 01       	movw	r30, r28
    32de:	ef 5b       	subi	r30, 0xBF	; 191
    32e0:	ff 4f       	sbci	r31, 0xFF	; 255
    32e2:	01 90       	ld	r0, Z+
    32e4:	f0 81       	ld	r31, Z
    32e6:	e0 2d       	mov	r30, r0
    32e8:	40 81       	ld	r20, Z
    32ea:	89 ad       	ldd	r24, Y+57	; 0x39
    32ec:	28 2f       	mov	r18, r24
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	81 e0       	ldi	r24, 0x01	; 1
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	02 c0       	rjmp	.+4      	; 0x32fa <STEP_MOTORu8StartFullMode+0x3b8>
    32f6:	88 0f       	add	r24, r24
    32f8:	99 1f       	adc	r25, r25
    32fa:	2a 95       	dec	r18
    32fc:	e2 f7       	brpl	.-8      	; 0x32f6 <STEP_MOTORu8StartFullMode+0x3b4>
    32fe:	98 2f       	mov	r25, r24
    3300:	84 2f       	mov	r24, r20
    3302:	69 2f       	mov	r22, r25
    3304:	0e 94 52 13 	call	0x26a4	; 0x26a4 <DIO_u8SetHighNibbleValue>
    3308:	80 e0       	ldi	r24, 0x00	; 0
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	a0 e0       	ldi	r26, 0x00	; 0
    330e:	b0 e4       	ldi	r27, 0x40	; 64
    3310:	89 8f       	std	Y+25, r24	; 0x19
    3312:	9a 8f       	std	Y+26, r25	; 0x1a
    3314:	ab 8f       	std	Y+27, r26	; 0x1b
    3316:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3318:	69 8d       	ldd	r22, Y+25	; 0x19
    331a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    331c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    331e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3320:	20 e0       	ldi	r18, 0x00	; 0
    3322:	30 e0       	ldi	r19, 0x00	; 0
    3324:	4a ef       	ldi	r20, 0xFA	; 250
    3326:	54 e4       	ldi	r21, 0x44	; 68
    3328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    332c:	dc 01       	movw	r26, r24
    332e:	cb 01       	movw	r24, r22
    3330:	8d 8b       	std	Y+21, r24	; 0x15
    3332:	9e 8b       	std	Y+22, r25	; 0x16
    3334:	af 8b       	std	Y+23, r26	; 0x17
    3336:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3338:	6d 89       	ldd	r22, Y+21	; 0x15
    333a:	7e 89       	ldd	r23, Y+22	; 0x16
    333c:	8f 89       	ldd	r24, Y+23	; 0x17
    333e:	98 8d       	ldd	r25, Y+24	; 0x18
    3340:	20 e0       	ldi	r18, 0x00	; 0
    3342:	30 e0       	ldi	r19, 0x00	; 0
    3344:	40 e8       	ldi	r20, 0x80	; 128
    3346:	5f e3       	ldi	r21, 0x3F	; 63
    3348:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    334c:	88 23       	and	r24, r24
    334e:	2c f4       	brge	.+10     	; 0x335a <STEP_MOTORu8StartFullMode+0x418>
		__ticks = 1;
    3350:	81 e0       	ldi	r24, 0x01	; 1
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	9c 8b       	std	Y+20, r25	; 0x14
    3356:	8b 8b       	std	Y+19, r24	; 0x13
    3358:	3f c0       	rjmp	.+126    	; 0x33d8 <STEP_MOTORu8StartFullMode+0x496>
	else if (__tmp > 65535)
    335a:	6d 89       	ldd	r22, Y+21	; 0x15
    335c:	7e 89       	ldd	r23, Y+22	; 0x16
    335e:	8f 89       	ldd	r24, Y+23	; 0x17
    3360:	98 8d       	ldd	r25, Y+24	; 0x18
    3362:	20 e0       	ldi	r18, 0x00	; 0
    3364:	3f ef       	ldi	r19, 0xFF	; 255
    3366:	4f e7       	ldi	r20, 0x7F	; 127
    3368:	57 e4       	ldi	r21, 0x47	; 71
    336a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    336e:	18 16       	cp	r1, r24
    3370:	4c f5       	brge	.+82     	; 0x33c4 <STEP_MOTORu8StartFullMode+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3372:	69 8d       	ldd	r22, Y+25	; 0x19
    3374:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3376:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3378:	9c 8d       	ldd	r25, Y+28	; 0x1c
    337a:	20 e0       	ldi	r18, 0x00	; 0
    337c:	30 e0       	ldi	r19, 0x00	; 0
    337e:	40 e2       	ldi	r20, 0x20	; 32
    3380:	51 e4       	ldi	r21, 0x41	; 65
    3382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3386:	dc 01       	movw	r26, r24
    3388:	cb 01       	movw	r24, r22
    338a:	bc 01       	movw	r22, r24
    338c:	cd 01       	movw	r24, r26
    338e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3392:	dc 01       	movw	r26, r24
    3394:	cb 01       	movw	r24, r22
    3396:	9c 8b       	std	Y+20, r25	; 0x14
    3398:	8b 8b       	std	Y+19, r24	; 0x13
    339a:	0f c0       	rjmp	.+30     	; 0x33ba <STEP_MOTORu8StartFullMode+0x478>
    339c:	88 ec       	ldi	r24, 0xC8	; 200
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	9a 8b       	std	Y+18, r25	; 0x12
    33a2:	89 8b       	std	Y+17, r24	; 0x11
    33a4:	89 89       	ldd	r24, Y+17	; 0x11
    33a6:	9a 89       	ldd	r25, Y+18	; 0x12
    33a8:	01 97       	sbiw	r24, 0x01	; 1
    33aa:	f1 f7       	brne	.-4      	; 0x33a8 <STEP_MOTORu8StartFullMode+0x466>
    33ac:	9a 8b       	std	Y+18, r25	; 0x12
    33ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33b0:	8b 89       	ldd	r24, Y+19	; 0x13
    33b2:	9c 89       	ldd	r25, Y+20	; 0x14
    33b4:	01 97       	sbiw	r24, 0x01	; 1
    33b6:	9c 8b       	std	Y+20, r25	; 0x14
    33b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33ba:	8b 89       	ldd	r24, Y+19	; 0x13
    33bc:	9c 89       	ldd	r25, Y+20	; 0x14
    33be:	00 97       	sbiw	r24, 0x00	; 0
    33c0:	69 f7       	brne	.-38     	; 0x339c <STEP_MOTORu8StartFullMode+0x45a>
    33c2:	14 c0       	rjmp	.+40     	; 0x33ec <STEP_MOTORu8StartFullMode+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33c4:	6d 89       	ldd	r22, Y+21	; 0x15
    33c6:	7e 89       	ldd	r23, Y+22	; 0x16
    33c8:	8f 89       	ldd	r24, Y+23	; 0x17
    33ca:	98 8d       	ldd	r25, Y+24	; 0x18
    33cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d0:	dc 01       	movw	r26, r24
    33d2:	cb 01       	movw	r24, r22
    33d4:	9c 8b       	std	Y+20, r25	; 0x14
    33d6:	8b 8b       	std	Y+19, r24	; 0x13
    33d8:	8b 89       	ldd	r24, Y+19	; 0x13
    33da:	9c 89       	ldd	r25, Y+20	; 0x14
    33dc:	98 8b       	std	Y+16, r25	; 0x10
    33de:	8f 87       	std	Y+15, r24	; 0x0f
    33e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    33e2:	98 89       	ldd	r25, Y+16	; 0x10
    33e4:	01 97       	sbiw	r24, 0x01	; 1
    33e6:	f1 f7       	brne	.-4      	; 0x33e4 <STEP_MOTORu8StartFullMode+0x4a2>
    33e8:	98 8b       	std	Y+16, r25	; 0x10
    33ea:	8f 87       	std	Y+15, r24	; 0x0f
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    33ec:	89 ad       	ldd	r24, Y+57	; 0x39
    33ee:	8f 5f       	subi	r24, 0xFF	; 255
    33f0:	89 af       	std	Y+57, r24	; 0x39
    33f2:	89 ad       	ldd	r24, Y+57	; 0x39
    33f4:	84 30       	cpi	r24, 0x04	; 4
    33f6:	08 f4       	brcc	.+2      	; 0x33fa <STEP_MOTORu8StartFullMode+0x4b8>
    33f8:	71 cf       	rjmp	.-286    	; 0x32dc <STEP_MOTORu8StartFullMode+0x39a>
	}
	else if(STEP_UPPER_NIBBLE == Copy_pStep->Nibble)
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    33fa:	8a ad       	ldd	r24, Y+58	; 0x3a
    33fc:	9b ad       	ldd	r25, Y+59	; 0x3b
    33fe:	01 96       	adiw	r24, 0x01	; 1
    3400:	9b af       	std	Y+59, r25	; 0x3b
    3402:	8a af       	std	Y+58, r24	; 0x3a
    3404:	2a ad       	ldd	r18, Y+58	; 0x3a
    3406:	3b ad       	ldd	r19, Y+59	; 0x3b
    3408:	8c ad       	ldd	r24, Y+60	; 0x3c
    340a:	9d ad       	ldd	r25, Y+61	; 0x3d
    340c:	28 17       	cp	r18, r24
    340e:	39 07       	cpc	r19, r25
    3410:	08 f4       	brcc	.+2      	; 0x3414 <STEP_MOTORu8StartFullMode+0x4d2>
    3412:	62 cf       	rjmp	.-316    	; 0x32d8 <STEP_MOTORu8StartFullMode+0x396>
    3414:	b7 c0       	rjmp	.+366    	; 0x3584 <STEP_MOTORu8StartFullMode+0x642>
					DIO_u8SetHighNibbleValue(Copy_pStep->Port,(MASK_CW<<Local_u8ItrateStep));
					_delay_ms(2);
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
    3416:	fe 01       	movw	r30, r28
    3418:	ef 5b       	subi	r30, 0xBF	; 191
    341a:	ff 4f       	sbci	r31, 0xFF	; 255
    341c:	01 90       	ld	r0, Z+
    341e:	f0 81       	ld	r31, Z
    3420:	e0 2d       	mov	r30, r0
    3422:	82 81       	ldd	r24, Z+2	; 0x02
    3424:	81 30       	cpi	r24, 0x01	; 1
    3426:	09 f0       	breq	.+2      	; 0x342a <STEP_MOTORu8StartFullMode+0x4e8>
    3428:	a2 c0       	rjmp	.+324    	; 0x356e <STEP_MOTORu8StartFullMode+0x62c>
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    342a:	1b ae       	std	Y+59, r1	; 0x3b
    342c:	1a ae       	std	Y+58, r1	; 0x3a
    342e:	96 c0       	rjmp	.+300    	; 0x355c <STEP_MOTORu8StartFullMode+0x61a>
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    3430:	19 ae       	std	Y+57, r1	; 0x39
    3432:	8b c0       	rjmp	.+278    	; 0x354a <STEP_MOTORu8StartFullMode+0x608>
				{
					DIO_u8SetHighNibbleValue(Copy_pStep->Port,(MASK_CCW>>Local_u8ItrateStep));
    3434:	fe 01       	movw	r30, r28
    3436:	ef 5b       	subi	r30, 0xBF	; 191
    3438:	ff 4f       	sbci	r31, 0xFF	; 255
    343a:	01 90       	ld	r0, Z+
    343c:	f0 81       	ld	r31, Z
    343e:	e0 2d       	mov	r30, r0
    3440:	40 81       	ld	r20, Z
    3442:	89 ad       	ldd	r24, Y+57	; 0x39
    3444:	28 2f       	mov	r18, r24
    3446:	30 e0       	ldi	r19, 0x00	; 0
    3448:	88 e0       	ldi	r24, 0x08	; 8
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	02 c0       	rjmp	.+4      	; 0x3452 <STEP_MOTORu8StartFullMode+0x510>
    344e:	95 95       	asr	r25
    3450:	87 95       	ror	r24
    3452:	2a 95       	dec	r18
    3454:	e2 f7       	brpl	.-8      	; 0x344e <STEP_MOTORu8StartFullMode+0x50c>
    3456:	98 2f       	mov	r25, r24
    3458:	84 2f       	mov	r24, r20
    345a:	69 2f       	mov	r22, r25
    345c:	0e 94 52 13 	call	0x26a4	; 0x26a4 <DIO_u8SetHighNibbleValue>
    3460:	80 e0       	ldi	r24, 0x00	; 0
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	a0 e0       	ldi	r26, 0x00	; 0
    3466:	b0 e4       	ldi	r27, 0x40	; 64
    3468:	8b 87       	std	Y+11, r24	; 0x0b
    346a:	9c 87       	std	Y+12, r25	; 0x0c
    346c:	ad 87       	std	Y+13, r26	; 0x0d
    346e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3470:	6b 85       	ldd	r22, Y+11	; 0x0b
    3472:	7c 85       	ldd	r23, Y+12	; 0x0c
    3474:	8d 85       	ldd	r24, Y+13	; 0x0d
    3476:	9e 85       	ldd	r25, Y+14	; 0x0e
    3478:	20 e0       	ldi	r18, 0x00	; 0
    347a:	30 e0       	ldi	r19, 0x00	; 0
    347c:	4a ef       	ldi	r20, 0xFA	; 250
    347e:	54 e4       	ldi	r21, 0x44	; 68
    3480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3484:	dc 01       	movw	r26, r24
    3486:	cb 01       	movw	r24, r22
    3488:	8f 83       	std	Y+7, r24	; 0x07
    348a:	98 87       	std	Y+8, r25	; 0x08
    348c:	a9 87       	std	Y+9, r26	; 0x09
    348e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3490:	6f 81       	ldd	r22, Y+7	; 0x07
    3492:	78 85       	ldd	r23, Y+8	; 0x08
    3494:	89 85       	ldd	r24, Y+9	; 0x09
    3496:	9a 85       	ldd	r25, Y+10	; 0x0a
    3498:	20 e0       	ldi	r18, 0x00	; 0
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	40 e8       	ldi	r20, 0x80	; 128
    349e:	5f e3       	ldi	r21, 0x3F	; 63
    34a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34a4:	88 23       	and	r24, r24
    34a6:	2c f4       	brge	.+10     	; 0x34b2 <STEP_MOTORu8StartFullMode+0x570>
		__ticks = 1;
    34a8:	81 e0       	ldi	r24, 0x01	; 1
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	9e 83       	std	Y+6, r25	; 0x06
    34ae:	8d 83       	std	Y+5, r24	; 0x05
    34b0:	3f c0       	rjmp	.+126    	; 0x3530 <STEP_MOTORu8StartFullMode+0x5ee>
	else if (__tmp > 65535)
    34b2:	6f 81       	ldd	r22, Y+7	; 0x07
    34b4:	78 85       	ldd	r23, Y+8	; 0x08
    34b6:	89 85       	ldd	r24, Y+9	; 0x09
    34b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ba:	20 e0       	ldi	r18, 0x00	; 0
    34bc:	3f ef       	ldi	r19, 0xFF	; 255
    34be:	4f e7       	ldi	r20, 0x7F	; 127
    34c0:	57 e4       	ldi	r21, 0x47	; 71
    34c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34c6:	18 16       	cp	r1, r24
    34c8:	4c f5       	brge	.+82     	; 0x351c <STEP_MOTORu8StartFullMode+0x5da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    34cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    34ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    34d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    34d2:	20 e0       	ldi	r18, 0x00	; 0
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	40 e2       	ldi	r20, 0x20	; 32
    34d8:	51 e4       	ldi	r21, 0x41	; 65
    34da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34de:	dc 01       	movw	r26, r24
    34e0:	cb 01       	movw	r24, r22
    34e2:	bc 01       	movw	r22, r24
    34e4:	cd 01       	movw	r24, r26
    34e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ea:	dc 01       	movw	r26, r24
    34ec:	cb 01       	movw	r24, r22
    34ee:	9e 83       	std	Y+6, r25	; 0x06
    34f0:	8d 83       	std	Y+5, r24	; 0x05
    34f2:	0f c0       	rjmp	.+30     	; 0x3512 <STEP_MOTORu8StartFullMode+0x5d0>
    34f4:	88 ec       	ldi	r24, 0xC8	; 200
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	9c 83       	std	Y+4, r25	; 0x04
    34fa:	8b 83       	std	Y+3, r24	; 0x03
    34fc:	8b 81       	ldd	r24, Y+3	; 0x03
    34fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3500:	01 97       	sbiw	r24, 0x01	; 1
    3502:	f1 f7       	brne	.-4      	; 0x3500 <STEP_MOTORu8StartFullMode+0x5be>
    3504:	9c 83       	std	Y+4, r25	; 0x04
    3506:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3508:	8d 81       	ldd	r24, Y+5	; 0x05
    350a:	9e 81       	ldd	r25, Y+6	; 0x06
    350c:	01 97       	sbiw	r24, 0x01	; 1
    350e:	9e 83       	std	Y+6, r25	; 0x06
    3510:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3512:	8d 81       	ldd	r24, Y+5	; 0x05
    3514:	9e 81       	ldd	r25, Y+6	; 0x06
    3516:	00 97       	sbiw	r24, 0x00	; 0
    3518:	69 f7       	brne	.-38     	; 0x34f4 <STEP_MOTORu8StartFullMode+0x5b2>
    351a:	14 c0       	rjmp	.+40     	; 0x3544 <STEP_MOTORu8StartFullMode+0x602>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    351c:	6f 81       	ldd	r22, Y+7	; 0x07
    351e:	78 85       	ldd	r23, Y+8	; 0x08
    3520:	89 85       	ldd	r24, Y+9	; 0x09
    3522:	9a 85       	ldd	r25, Y+10	; 0x0a
    3524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3528:	dc 01       	movw	r26, r24
    352a:	cb 01       	movw	r24, r22
    352c:	9e 83       	std	Y+6, r25	; 0x06
    352e:	8d 83       	std	Y+5, r24	; 0x05
    3530:	8d 81       	ldd	r24, Y+5	; 0x05
    3532:	9e 81       	ldd	r25, Y+6	; 0x06
    3534:	9a 83       	std	Y+2, r25	; 0x02
    3536:	89 83       	std	Y+1, r24	; 0x01
    3538:	89 81       	ldd	r24, Y+1	; 0x01
    353a:	9a 81       	ldd	r25, Y+2	; 0x02
    353c:	01 97       	sbiw	r24, 0x01	; 1
    353e:	f1 f7       	brne	.-4      	; 0x353c <STEP_MOTORu8StartFullMode+0x5fa>
    3540:	9a 83       	std	Y+2, r25	; 0x02
    3542:	89 83       	std	Y+1, r24	; 0x01
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    3544:	89 ad       	ldd	r24, Y+57	; 0x39
    3546:	8f 5f       	subi	r24, 0xFF	; 255
    3548:	89 af       	std	Y+57, r24	; 0x39
    354a:	89 ad       	ldd	r24, Y+57	; 0x39
    354c:	84 30       	cpi	r24, 0x04	; 4
    354e:	08 f4       	brcc	.+2      	; 0x3552 <STEP_MOTORu8StartFullMode+0x610>
    3550:	71 cf       	rjmp	.-286    	; 0x3434 <STEP_MOTORu8StartFullMode+0x4f2>
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3552:	8a ad       	ldd	r24, Y+58	; 0x3a
    3554:	9b ad       	ldd	r25, Y+59	; 0x3b
    3556:	01 96       	adiw	r24, 0x01	; 1
    3558:	9b af       	std	Y+59, r25	; 0x3b
    355a:	8a af       	std	Y+58, r24	; 0x3a
    355c:	2a ad       	ldd	r18, Y+58	; 0x3a
    355e:	3b ad       	ldd	r19, Y+59	; 0x3b
    3560:	8c ad       	ldd	r24, Y+60	; 0x3c
    3562:	9d ad       	ldd	r25, Y+61	; 0x3d
    3564:	28 17       	cp	r18, r24
    3566:	39 07       	cpc	r19, r25
    3568:	08 f4       	brcc	.+2      	; 0x356c <STEP_MOTORu8StartFullMode+0x62a>
    356a:	62 cf       	rjmp	.-316    	; 0x3430 <STEP_MOTORu8StartFullMode+0x4ee>
    356c:	0b c0       	rjmp	.+22     	; 0x3584 <STEP_MOTORu8StartFullMode+0x642>
					_delay_ms(2);
				}
			}
		}
		else
			Local_u8ErrorState = NOTOK;
    356e:	81 e0       	ldi	r24, 0x01	; 1
    3570:	fe 01       	movw	r30, r28
    3572:	e0 5c       	subi	r30, 0xC0	; 192
    3574:	ff 4f       	sbci	r31, 0xFF	; 255
    3576:	80 83       	st	Z, r24
    3578:	05 c0       	rjmp	.+10     	; 0x3584 <STEP_MOTORu8StartFullMode+0x642>
	}
	else
		Local_u8ErrorState = NOTOK;
    357a:	81 e0       	ldi	r24, 0x01	; 1
    357c:	fe 01       	movw	r30, r28
    357e:	e0 5c       	subi	r30, 0xC0	; 192
    3580:	ff 4f       	sbci	r31, 0xFF	; 255
    3582:	80 83       	st	Z, r24
	return Local_u8ErrorState;
    3584:	fe 01       	movw	r30, r28
    3586:	e0 5c       	subi	r30, 0xC0	; 192
    3588:	ff 4f       	sbci	r31, 0xFF	; 255
    358a:	80 81       	ld	r24, Z
}
    358c:	ce 5b       	subi	r28, 0xBE	; 190
    358e:	df 4f       	sbci	r29, 0xFF	; 255
    3590:	0f b6       	in	r0, 0x3f	; 63
    3592:	f8 94       	cli
    3594:	de bf       	out	0x3e, r29	; 62
    3596:	0f be       	out	0x3f, r0	; 63
    3598:	cd bf       	out	0x3d, r28	; 61
    359a:	cf 91       	pop	r28
    359c:	df 91       	pop	r29
    359e:	08 95       	ret

000035a0 <STEP_MOTORu8StartHalfMode>:

u8 STEP_MOTORu8StartHalfMode(STEP_t *Copy_pStep)
{
    35a0:	df 93       	push	r29
    35a2:	cf 93       	push	r28
    35a4:	cd b7       	in	r28, 0x3d	; 61
    35a6:	de b7       	in	r29, 0x3e	; 62
    35a8:	c4 54       	subi	r28, 0x44	; 68
    35aa:	d0 40       	sbci	r29, 0x00	; 0
    35ac:	0f b6       	in	r0, 0x3f	; 63
    35ae:	f8 94       	cli
    35b0:	de bf       	out	0x3e, r29	; 62
    35b2:	0f be       	out	0x3f, r0	; 63
    35b4:	cd bf       	out	0x3d, r28	; 61
    35b6:	fe 01       	movw	r30, r28
    35b8:	ed 5b       	subi	r30, 0xBD	; 189
    35ba:	ff 4f       	sbci	r31, 0xFF	; 255
    35bc:	91 83       	std	Z+1, r25	; 0x01
    35be:	80 83       	st	Z, r24
	u8 Local_u8ErrorState = OK;
    35c0:	fe 01       	movw	r30, r28
    35c2:	ee 5b       	subi	r30, 0xBE	; 190
    35c4:	ff 4f       	sbci	r31, 0xFF	; 255
    35c6:	10 82       	st	Z, r1
	u16 Local_u16Counter=0;
    35c8:	fe 01       	movw	r30, r28
    35ca:	e0 5c       	subi	r30, 0xC0	; 192
    35cc:	ff 4f       	sbci	r31, 0xFF	; 255
    35ce:	11 82       	std	Z+1, r1	; 0x01
    35d0:	10 82       	st	Z, r1
	u16 Local_u16NumOfSteps = (u16)((((f32)Copy_pStep->AngleDegree)/5.625)*64.0);
    35d2:	fe 01       	movw	r30, r28
    35d4:	ed 5b       	subi	r30, 0xBD	; 189
    35d6:	ff 4f       	sbci	r31, 0xFF	; 255
    35d8:	01 90       	ld	r0, Z+
    35da:	f0 81       	ld	r31, Z
    35dc:	e0 2d       	mov	r30, r0
    35de:	83 81       	ldd	r24, Z+3	; 0x03
    35e0:	94 81       	ldd	r25, Z+4	; 0x04
    35e2:	cc 01       	movw	r24, r24
    35e4:	a0 e0       	ldi	r26, 0x00	; 0
    35e6:	b0 e0       	ldi	r27, 0x00	; 0
    35e8:	bc 01       	movw	r22, r24
    35ea:	cd 01       	movw	r24, r26
    35ec:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    35f0:	dc 01       	movw	r26, r24
    35f2:	cb 01       	movw	r24, r22
    35f4:	bc 01       	movw	r22, r24
    35f6:	cd 01       	movw	r24, r26
    35f8:	20 e0       	ldi	r18, 0x00	; 0
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	44 eb       	ldi	r20, 0xB4	; 180
    35fe:	50 e4       	ldi	r21, 0x40	; 64
    3600:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3604:	dc 01       	movw	r26, r24
    3606:	cb 01       	movw	r24, r22
    3608:	bc 01       	movw	r22, r24
    360a:	cd 01       	movw	r24, r26
    360c:	20 e0       	ldi	r18, 0x00	; 0
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	40 e8       	ldi	r20, 0x80	; 128
    3612:	52 e4       	ldi	r21, 0x42	; 66
    3614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3618:	dc 01       	movw	r26, r24
    361a:	cb 01       	movw	r24, r22
    361c:	bc 01       	movw	r22, r24
    361e:	cd 01       	movw	r24, r26
    3620:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3624:	dc 01       	movw	r26, r24
    3626:	cb 01       	movw	r24, r22
    3628:	9f af       	std	Y+63, r25	; 0x3f
    362a:	8e af       	std	Y+62, r24	; 0x3e
	u16 Local_u16MaxItration = Local_u16NumOfSteps/8;
    362c:	8e ad       	ldd	r24, Y+62	; 0x3e
    362e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3630:	96 95       	lsr	r25
    3632:	87 95       	ror	r24
    3634:	96 95       	lsr	r25
    3636:	87 95       	ror	r24
    3638:	96 95       	lsr	r25
    363a:	87 95       	ror	r24
    363c:	9d af       	std	Y+61, r25	; 0x3d
    363e:	8c af       	std	Y+60, r24	; 0x3c
	u8 Local_u8ItrateStep = 0,con1,con2 ;
    3640:	1b ae       	std	Y+59, r1	; 0x3b
	if(STEP_LOWER_NIBBLE == Copy_pStep->Nibble)
    3642:	fe 01       	movw	r30, r28
    3644:	ed 5b       	subi	r30, 0xBD	; 189
    3646:	ff 4f       	sbci	r31, 0xFF	; 255
    3648:	01 90       	ld	r0, Z+
    364a:	f0 81       	ld	r31, Z
    364c:	e0 2d       	mov	r30, r0
    364e:	81 81       	ldd	r24, Z+1	; 0x01
    3650:	88 23       	and	r24, r24
    3652:	09 f0       	breq	.+2      	; 0x3656 <STEP_MOTORu8StartHalfMode+0xb6>
    3654:	96 c1       	rjmp	.+812    	; 0x3982 <STEP_MOTORu8StartHalfMode+0x3e2>
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
    3656:	fe 01       	movw	r30, r28
    3658:	ed 5b       	subi	r30, 0xBD	; 189
    365a:	ff 4f       	sbci	r31, 0xFF	; 255
    365c:	01 90       	ld	r0, Z+
    365e:	f0 81       	ld	r31, Z
    3660:	e0 2d       	mov	r30, r0
    3662:	82 81       	ldd	r24, Z+2	; 0x02
    3664:	88 23       	and	r24, r24
    3666:	09 f0       	breq	.+2      	; 0x366a <STEP_MOTORu8StartHalfMode+0xca>
    3668:	c1 c0       	rjmp	.+386    	; 0x37ec <STEP_MOTORu8StartHalfMode+0x24c>
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    366a:	fe 01       	movw	r30, r28
    366c:	e0 5c       	subi	r30, 0xC0	; 192
    366e:	ff 4f       	sbci	r31, 0xFF	; 255
    3670:	11 82       	std	Z+1, r1	; 0x01
    3672:	10 82       	st	Z, r1
    3674:	af c0       	rjmp	.+350    	; 0x37d4 <STEP_MOTORu8StartHalfMode+0x234>
			{
				con1 = 0x01;
    3676:	81 e0       	ldi	r24, 0x01	; 1
    3678:	8a af       	std	Y+58, r24	; 0x3a
				con2 = 0x03;
    367a:	83 e0       	ldi	r24, 0x03	; 3
    367c:	89 af       	std	Y+57, r24	; 0x39
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    367e:	81 e0       	ldi	r24, 0x01	; 1
    3680:	8b af       	std	Y+59, r24	; 0x3b
    3682:	98 c0       	rjmp	.+304    	; 0x37b4 <STEP_MOTORu8StartHalfMode+0x214>
				{

					if(Local_u8ItrateStep%2==1)
    3684:	8b ad       	ldd	r24, Y+59	; 0x3b
    3686:	88 2f       	mov	r24, r24
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	81 70       	andi	r24, 0x01	; 1
    368c:	90 70       	andi	r25, 0x00	; 0
    368e:	88 23       	and	r24, r24
    3690:	71 f0       	breq	.+28     	; 0x36ae <STEP_MOTORu8StartHalfMode+0x10e>
					{
						DIO_u8SetLowNibbleValue(Copy_pStep->Port,con1);
    3692:	fe 01       	movw	r30, r28
    3694:	ed 5b       	subi	r30, 0xBD	; 189
    3696:	ff 4f       	sbci	r31, 0xFF	; 255
    3698:	01 90       	ld	r0, Z+
    369a:	f0 81       	ld	r31, Z
    369c:	e0 2d       	mov	r30, r0
    369e:	80 81       	ld	r24, Z
    36a0:	6a ad       	ldd	r22, Y+58	; 0x3a
    36a2:	0e 94 d7 12 	call	0x25ae	; 0x25ae <DIO_u8SetLowNibbleValue>
						con1<<=1;
    36a6:	8a ad       	ldd	r24, Y+58	; 0x3a
    36a8:	88 0f       	add	r24, r24
    36aa:	8a af       	std	Y+58, r24	; 0x3a
    36ac:	0e c0       	rjmp	.+28     	; 0x36ca <STEP_MOTORu8StartHalfMode+0x12a>
					}
					else
					{
						DIO_u8SetLowNibbleValue(Copy_pStep->Port,con2);
    36ae:	fe 01       	movw	r30, r28
    36b0:	ed 5b       	subi	r30, 0xBD	; 189
    36b2:	ff 4f       	sbci	r31, 0xFF	; 255
    36b4:	01 90       	ld	r0, Z+
    36b6:	f0 81       	ld	r31, Z
    36b8:	e0 2d       	mov	r30, r0
    36ba:	80 81       	ld	r24, Z
    36bc:	69 ad       	ldd	r22, Y+57	; 0x39
    36be:	0e 94 d7 12 	call	0x25ae	; 0x25ae <DIO_u8SetLowNibbleValue>
						con2 = RotateLeftLowNibble(con2);
    36c2:	89 ad       	ldd	r24, Y+57	; 0x39
    36c4:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <RotateLeftLowNibble>
    36c8:	89 af       	std	Y+57, r24	; 0x39
    36ca:	80 e0       	ldi	r24, 0x00	; 0
    36cc:	90 e0       	ldi	r25, 0x00	; 0
    36ce:	a0 e0       	ldi	r26, 0x00	; 0
    36d0:	b0 e4       	ldi	r27, 0x40	; 64
    36d2:	8d ab       	std	Y+53, r24	; 0x35
    36d4:	9e ab       	std	Y+54, r25	; 0x36
    36d6:	af ab       	std	Y+55, r26	; 0x37
    36d8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36da:	6d a9       	ldd	r22, Y+53	; 0x35
    36dc:	7e a9       	ldd	r23, Y+54	; 0x36
    36de:	8f a9       	ldd	r24, Y+55	; 0x37
    36e0:	98 ad       	ldd	r25, Y+56	; 0x38
    36e2:	20 e0       	ldi	r18, 0x00	; 0
    36e4:	30 e0       	ldi	r19, 0x00	; 0
    36e6:	4a ef       	ldi	r20, 0xFA	; 250
    36e8:	54 e4       	ldi	r21, 0x44	; 68
    36ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ee:	dc 01       	movw	r26, r24
    36f0:	cb 01       	movw	r24, r22
    36f2:	89 ab       	std	Y+49, r24	; 0x31
    36f4:	9a ab       	std	Y+50, r25	; 0x32
    36f6:	ab ab       	std	Y+51, r26	; 0x33
    36f8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    36fa:	69 a9       	ldd	r22, Y+49	; 0x31
    36fc:	7a a9       	ldd	r23, Y+50	; 0x32
    36fe:	8b a9       	ldd	r24, Y+51	; 0x33
    3700:	9c a9       	ldd	r25, Y+52	; 0x34
    3702:	20 e0       	ldi	r18, 0x00	; 0
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	40 e8       	ldi	r20, 0x80	; 128
    3708:	5f e3       	ldi	r21, 0x3F	; 63
    370a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    370e:	88 23       	and	r24, r24
    3710:	2c f4       	brge	.+10     	; 0x371c <STEP_MOTORu8StartHalfMode+0x17c>
		__ticks = 1;
    3712:	81 e0       	ldi	r24, 0x01	; 1
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	98 ab       	std	Y+48, r25	; 0x30
    3718:	8f a7       	std	Y+47, r24	; 0x2f
    371a:	3f c0       	rjmp	.+126    	; 0x379a <STEP_MOTORu8StartHalfMode+0x1fa>
	else if (__tmp > 65535)
    371c:	69 a9       	ldd	r22, Y+49	; 0x31
    371e:	7a a9       	ldd	r23, Y+50	; 0x32
    3720:	8b a9       	ldd	r24, Y+51	; 0x33
    3722:	9c a9       	ldd	r25, Y+52	; 0x34
    3724:	20 e0       	ldi	r18, 0x00	; 0
    3726:	3f ef       	ldi	r19, 0xFF	; 255
    3728:	4f e7       	ldi	r20, 0x7F	; 127
    372a:	57 e4       	ldi	r21, 0x47	; 71
    372c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3730:	18 16       	cp	r1, r24
    3732:	4c f5       	brge	.+82     	; 0x3786 <STEP_MOTORu8StartHalfMode+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3734:	6d a9       	ldd	r22, Y+53	; 0x35
    3736:	7e a9       	ldd	r23, Y+54	; 0x36
    3738:	8f a9       	ldd	r24, Y+55	; 0x37
    373a:	98 ad       	ldd	r25, Y+56	; 0x38
    373c:	20 e0       	ldi	r18, 0x00	; 0
    373e:	30 e0       	ldi	r19, 0x00	; 0
    3740:	40 e2       	ldi	r20, 0x20	; 32
    3742:	51 e4       	ldi	r21, 0x41	; 65
    3744:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3748:	dc 01       	movw	r26, r24
    374a:	cb 01       	movw	r24, r22
    374c:	bc 01       	movw	r22, r24
    374e:	cd 01       	movw	r24, r26
    3750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3754:	dc 01       	movw	r26, r24
    3756:	cb 01       	movw	r24, r22
    3758:	98 ab       	std	Y+48, r25	; 0x30
    375a:	8f a7       	std	Y+47, r24	; 0x2f
    375c:	0f c0       	rjmp	.+30     	; 0x377c <STEP_MOTORu8StartHalfMode+0x1dc>
    375e:	88 ec       	ldi	r24, 0xC8	; 200
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	9e a7       	std	Y+46, r25	; 0x2e
    3764:	8d a7       	std	Y+45, r24	; 0x2d
    3766:	8d a5       	ldd	r24, Y+45	; 0x2d
    3768:	9e a5       	ldd	r25, Y+46	; 0x2e
    376a:	01 97       	sbiw	r24, 0x01	; 1
    376c:	f1 f7       	brne	.-4      	; 0x376a <STEP_MOTORu8StartHalfMode+0x1ca>
    376e:	9e a7       	std	Y+46, r25	; 0x2e
    3770:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3772:	8f a5       	ldd	r24, Y+47	; 0x2f
    3774:	98 a9       	ldd	r25, Y+48	; 0x30
    3776:	01 97       	sbiw	r24, 0x01	; 1
    3778:	98 ab       	std	Y+48, r25	; 0x30
    377a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    377c:	8f a5       	ldd	r24, Y+47	; 0x2f
    377e:	98 a9       	ldd	r25, Y+48	; 0x30
    3780:	00 97       	sbiw	r24, 0x00	; 0
    3782:	69 f7       	brne	.-38     	; 0x375e <STEP_MOTORu8StartHalfMode+0x1be>
    3784:	14 c0       	rjmp	.+40     	; 0x37ae <STEP_MOTORu8StartHalfMode+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3786:	69 a9       	ldd	r22, Y+49	; 0x31
    3788:	7a a9       	ldd	r23, Y+50	; 0x32
    378a:	8b a9       	ldd	r24, Y+51	; 0x33
    378c:	9c a9       	ldd	r25, Y+52	; 0x34
    378e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3792:	dc 01       	movw	r26, r24
    3794:	cb 01       	movw	r24, r22
    3796:	98 ab       	std	Y+48, r25	; 0x30
    3798:	8f a7       	std	Y+47, r24	; 0x2f
    379a:	8f a5       	ldd	r24, Y+47	; 0x2f
    379c:	98 a9       	ldd	r25, Y+48	; 0x30
    379e:	9c a7       	std	Y+44, r25	; 0x2c
    37a0:	8b a7       	std	Y+43, r24	; 0x2b
    37a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    37a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    37a6:	01 97       	sbiw	r24, 0x01	; 1
    37a8:	f1 f7       	brne	.-4      	; 0x37a6 <STEP_MOTORu8StartHalfMode+0x206>
    37aa:	9c a7       	std	Y+44, r25	; 0x2c
    37ac:	8b a7       	std	Y+43, r24	; 0x2b

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				con1 = 0x01;
				con2 = 0x03;
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    37ae:	8b ad       	ldd	r24, Y+59	; 0x3b
    37b0:	8f 5f       	subi	r24, 0xFF	; 255
    37b2:	8b af       	std	Y+59, r24	; 0x3b
    37b4:	8b ad       	ldd	r24, Y+59	; 0x3b
    37b6:	89 30       	cpi	r24, 0x09	; 9
    37b8:	08 f4       	brcc	.+2      	; 0x37bc <STEP_MOTORu8StartHalfMode+0x21c>
    37ba:	64 cf       	rjmp	.-312    	; 0x3684 <STEP_MOTORu8StartHalfMode+0xe4>
	if(STEP_LOWER_NIBBLE == Copy_pStep->Nibble)
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    37bc:	de 01       	movw	r26, r28
    37be:	a0 5c       	subi	r26, 0xC0	; 192
    37c0:	bf 4f       	sbci	r27, 0xFF	; 255
    37c2:	fe 01       	movw	r30, r28
    37c4:	e0 5c       	subi	r30, 0xC0	; 192
    37c6:	ff 4f       	sbci	r31, 0xFF	; 255
    37c8:	80 81       	ld	r24, Z
    37ca:	91 81       	ldd	r25, Z+1	; 0x01
    37cc:	01 96       	adiw	r24, 0x01	; 1
    37ce:	11 96       	adiw	r26, 0x01	; 1
    37d0:	9c 93       	st	X, r25
    37d2:	8e 93       	st	-X, r24
    37d4:	fe 01       	movw	r30, r28
    37d6:	e0 5c       	subi	r30, 0xC0	; 192
    37d8:	ff 4f       	sbci	r31, 0xFF	; 255
    37da:	20 81       	ld	r18, Z
    37dc:	31 81       	ldd	r19, Z+1	; 0x01
    37de:	8c ad       	ldd	r24, Y+60	; 0x3c
    37e0:	9d ad       	ldd	r25, Y+61	; 0x3d
    37e2:	28 17       	cp	r18, r24
    37e4:	39 07       	cpc	r19, r25
    37e6:	08 f4       	brcc	.+2      	; 0x37ea <STEP_MOTORu8StartHalfMode+0x24a>
    37e8:	46 cf       	rjmp	.-372    	; 0x3676 <STEP_MOTORu8StartHalfMode+0xd6>
    37ea:	7e c2       	rjmp	.+1276   	; 0x3ce8 <STEP_MOTORu8StartHalfMode+0x748>
					}
					_delay_ms(2);
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
    37ec:	fe 01       	movw	r30, r28
    37ee:	ed 5b       	subi	r30, 0xBD	; 189
    37f0:	ff 4f       	sbci	r31, 0xFF	; 255
    37f2:	01 90       	ld	r0, Z+
    37f4:	f0 81       	ld	r31, Z
    37f6:	e0 2d       	mov	r30, r0
    37f8:	82 81       	ldd	r24, Z+2	; 0x02
    37fa:	81 30       	cpi	r24, 0x01	; 1
    37fc:	09 f0       	breq	.+2      	; 0x3800 <STEP_MOTORu8StartHalfMode+0x260>
    37fe:	74 c2       	rjmp	.+1256   	; 0x3ce8 <STEP_MOTORu8StartHalfMode+0x748>
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3800:	fe 01       	movw	r30, r28
    3802:	e0 5c       	subi	r30, 0xC0	; 192
    3804:	ff 4f       	sbci	r31, 0xFF	; 255
    3806:	11 82       	std	Z+1, r1	; 0x01
    3808:	10 82       	st	Z, r1
    380a:	af c0       	rjmp	.+350    	; 0x396a <STEP_MOTORu8StartHalfMode+0x3ca>
			{
				con1 = 0x08;
    380c:	88 e0       	ldi	r24, 0x08	; 8
    380e:	8a af       	std	Y+58, r24	; 0x3a
				con2 = 0x0c;
    3810:	8c e0       	ldi	r24, 0x0C	; 12
    3812:	89 af       	std	Y+57, r24	; 0x39
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3814:	81 e0       	ldi	r24, 0x01	; 1
    3816:	8b af       	std	Y+59, r24	; 0x3b
    3818:	98 c0       	rjmp	.+304    	; 0x394a <STEP_MOTORu8StartHalfMode+0x3aa>
				{

					if(Local_u8ItrateStep%2==1)
    381a:	8b ad       	ldd	r24, Y+59	; 0x3b
    381c:	88 2f       	mov	r24, r24
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	81 70       	andi	r24, 0x01	; 1
    3822:	90 70       	andi	r25, 0x00	; 0
    3824:	88 23       	and	r24, r24
    3826:	71 f0       	breq	.+28     	; 0x3844 <STEP_MOTORu8StartHalfMode+0x2a4>
					{
						DIO_u8SetLowNibbleValue(Copy_pStep->Port,con1);
    3828:	fe 01       	movw	r30, r28
    382a:	ed 5b       	subi	r30, 0xBD	; 189
    382c:	ff 4f       	sbci	r31, 0xFF	; 255
    382e:	01 90       	ld	r0, Z+
    3830:	f0 81       	ld	r31, Z
    3832:	e0 2d       	mov	r30, r0
    3834:	80 81       	ld	r24, Z
    3836:	6a ad       	ldd	r22, Y+58	; 0x3a
    3838:	0e 94 d7 12 	call	0x25ae	; 0x25ae <DIO_u8SetLowNibbleValue>
						con1>>=1;
    383c:	8a ad       	ldd	r24, Y+58	; 0x3a
    383e:	86 95       	lsr	r24
    3840:	8a af       	std	Y+58, r24	; 0x3a
    3842:	0e c0       	rjmp	.+28     	; 0x3860 <STEP_MOTORu8StartHalfMode+0x2c0>
					}
					else
					{
						DIO_u8SetLowNibbleValue(Copy_pStep->Port,con2);
    3844:	fe 01       	movw	r30, r28
    3846:	ed 5b       	subi	r30, 0xBD	; 189
    3848:	ff 4f       	sbci	r31, 0xFF	; 255
    384a:	01 90       	ld	r0, Z+
    384c:	f0 81       	ld	r31, Z
    384e:	e0 2d       	mov	r30, r0
    3850:	80 81       	ld	r24, Z
    3852:	69 ad       	ldd	r22, Y+57	; 0x39
    3854:	0e 94 d7 12 	call	0x25ae	; 0x25ae <DIO_u8SetLowNibbleValue>
						con2 = RotateRightLowNibble(con2);
    3858:	89 ad       	ldd	r24, Y+57	; 0x39
    385a:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <RotateRightLowNibble>
    385e:	89 af       	std	Y+57, r24	; 0x39
    3860:	80 e0       	ldi	r24, 0x00	; 0
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	a0 e0       	ldi	r26, 0x00	; 0
    3866:	b0 e4       	ldi	r27, 0x40	; 64
    3868:	8f a3       	std	Y+39, r24	; 0x27
    386a:	98 a7       	std	Y+40, r25	; 0x28
    386c:	a9 a7       	std	Y+41, r26	; 0x29
    386e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3870:	6f a1       	ldd	r22, Y+39	; 0x27
    3872:	78 a5       	ldd	r23, Y+40	; 0x28
    3874:	89 a5       	ldd	r24, Y+41	; 0x29
    3876:	9a a5       	ldd	r25, Y+42	; 0x2a
    3878:	20 e0       	ldi	r18, 0x00	; 0
    387a:	30 e0       	ldi	r19, 0x00	; 0
    387c:	4a ef       	ldi	r20, 0xFA	; 250
    387e:	54 e4       	ldi	r21, 0x44	; 68
    3880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3884:	dc 01       	movw	r26, r24
    3886:	cb 01       	movw	r24, r22
    3888:	8b a3       	std	Y+35, r24	; 0x23
    388a:	9c a3       	std	Y+36, r25	; 0x24
    388c:	ad a3       	std	Y+37, r26	; 0x25
    388e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3890:	6b a1       	ldd	r22, Y+35	; 0x23
    3892:	7c a1       	ldd	r23, Y+36	; 0x24
    3894:	8d a1       	ldd	r24, Y+37	; 0x25
    3896:	9e a1       	ldd	r25, Y+38	; 0x26
    3898:	20 e0       	ldi	r18, 0x00	; 0
    389a:	30 e0       	ldi	r19, 0x00	; 0
    389c:	40 e8       	ldi	r20, 0x80	; 128
    389e:	5f e3       	ldi	r21, 0x3F	; 63
    38a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38a4:	88 23       	and	r24, r24
    38a6:	2c f4       	brge	.+10     	; 0x38b2 <STEP_MOTORu8StartHalfMode+0x312>
		__ticks = 1;
    38a8:	81 e0       	ldi	r24, 0x01	; 1
    38aa:	90 e0       	ldi	r25, 0x00	; 0
    38ac:	9a a3       	std	Y+34, r25	; 0x22
    38ae:	89 a3       	std	Y+33, r24	; 0x21
    38b0:	3f c0       	rjmp	.+126    	; 0x3930 <STEP_MOTORu8StartHalfMode+0x390>
	else if (__tmp > 65535)
    38b2:	6b a1       	ldd	r22, Y+35	; 0x23
    38b4:	7c a1       	ldd	r23, Y+36	; 0x24
    38b6:	8d a1       	ldd	r24, Y+37	; 0x25
    38b8:	9e a1       	ldd	r25, Y+38	; 0x26
    38ba:	20 e0       	ldi	r18, 0x00	; 0
    38bc:	3f ef       	ldi	r19, 0xFF	; 255
    38be:	4f e7       	ldi	r20, 0x7F	; 127
    38c0:	57 e4       	ldi	r21, 0x47	; 71
    38c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38c6:	18 16       	cp	r1, r24
    38c8:	4c f5       	brge	.+82     	; 0x391c <STEP_MOTORu8StartHalfMode+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ca:	6f a1       	ldd	r22, Y+39	; 0x27
    38cc:	78 a5       	ldd	r23, Y+40	; 0x28
    38ce:	89 a5       	ldd	r24, Y+41	; 0x29
    38d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    38d2:	20 e0       	ldi	r18, 0x00	; 0
    38d4:	30 e0       	ldi	r19, 0x00	; 0
    38d6:	40 e2       	ldi	r20, 0x20	; 32
    38d8:	51 e4       	ldi	r21, 0x41	; 65
    38da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38de:	dc 01       	movw	r26, r24
    38e0:	cb 01       	movw	r24, r22
    38e2:	bc 01       	movw	r22, r24
    38e4:	cd 01       	movw	r24, r26
    38e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ea:	dc 01       	movw	r26, r24
    38ec:	cb 01       	movw	r24, r22
    38ee:	9a a3       	std	Y+34, r25	; 0x22
    38f0:	89 a3       	std	Y+33, r24	; 0x21
    38f2:	0f c0       	rjmp	.+30     	; 0x3912 <STEP_MOTORu8StartHalfMode+0x372>
    38f4:	88 ec       	ldi	r24, 0xC8	; 200
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	98 a3       	std	Y+32, r25	; 0x20
    38fa:	8f 8f       	std	Y+31, r24	; 0x1f
    38fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38fe:	98 a1       	ldd	r25, Y+32	; 0x20
    3900:	01 97       	sbiw	r24, 0x01	; 1
    3902:	f1 f7       	brne	.-4      	; 0x3900 <STEP_MOTORu8StartHalfMode+0x360>
    3904:	98 a3       	std	Y+32, r25	; 0x20
    3906:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3908:	89 a1       	ldd	r24, Y+33	; 0x21
    390a:	9a a1       	ldd	r25, Y+34	; 0x22
    390c:	01 97       	sbiw	r24, 0x01	; 1
    390e:	9a a3       	std	Y+34, r25	; 0x22
    3910:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3912:	89 a1       	ldd	r24, Y+33	; 0x21
    3914:	9a a1       	ldd	r25, Y+34	; 0x22
    3916:	00 97       	sbiw	r24, 0x00	; 0
    3918:	69 f7       	brne	.-38     	; 0x38f4 <STEP_MOTORu8StartHalfMode+0x354>
    391a:	14 c0       	rjmp	.+40     	; 0x3944 <STEP_MOTORu8StartHalfMode+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    391c:	6b a1       	ldd	r22, Y+35	; 0x23
    391e:	7c a1       	ldd	r23, Y+36	; 0x24
    3920:	8d a1       	ldd	r24, Y+37	; 0x25
    3922:	9e a1       	ldd	r25, Y+38	; 0x26
    3924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3928:	dc 01       	movw	r26, r24
    392a:	cb 01       	movw	r24, r22
    392c:	9a a3       	std	Y+34, r25	; 0x22
    392e:	89 a3       	std	Y+33, r24	; 0x21
    3930:	89 a1       	ldd	r24, Y+33	; 0x21
    3932:	9a a1       	ldd	r25, Y+34	; 0x22
    3934:	9e 8f       	std	Y+30, r25	; 0x1e
    3936:	8d 8f       	std	Y+29, r24	; 0x1d
    3938:	8d 8d       	ldd	r24, Y+29	; 0x1d
    393a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    393c:	01 97       	sbiw	r24, 0x01	; 1
    393e:	f1 f7       	brne	.-4      	; 0x393c <STEP_MOTORu8StartHalfMode+0x39c>
    3940:	9e 8f       	std	Y+30, r25	; 0x1e
    3942:	8d 8f       	std	Y+29, r24	; 0x1d

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				con1 = 0x08;
				con2 = 0x0c;
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3944:	8b ad       	ldd	r24, Y+59	; 0x3b
    3946:	8f 5f       	subi	r24, 0xFF	; 255
    3948:	8b af       	std	Y+59, r24	; 0x3b
    394a:	8b ad       	ldd	r24, Y+59	; 0x3b
    394c:	89 30       	cpi	r24, 0x09	; 9
    394e:	08 f4       	brcc	.+2      	; 0x3952 <STEP_MOTORu8StartHalfMode+0x3b2>
    3950:	64 cf       	rjmp	.-312    	; 0x381a <STEP_MOTORu8StartHalfMode+0x27a>
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3952:	de 01       	movw	r26, r28
    3954:	a0 5c       	subi	r26, 0xC0	; 192
    3956:	bf 4f       	sbci	r27, 0xFF	; 255
    3958:	fe 01       	movw	r30, r28
    395a:	e0 5c       	subi	r30, 0xC0	; 192
    395c:	ff 4f       	sbci	r31, 0xFF	; 255
    395e:	80 81       	ld	r24, Z
    3960:	91 81       	ldd	r25, Z+1	; 0x01
    3962:	01 96       	adiw	r24, 0x01	; 1
    3964:	11 96       	adiw	r26, 0x01	; 1
    3966:	9c 93       	st	X, r25
    3968:	8e 93       	st	-X, r24
    396a:	fe 01       	movw	r30, r28
    396c:	e0 5c       	subi	r30, 0xC0	; 192
    396e:	ff 4f       	sbci	r31, 0xFF	; 255
    3970:	20 81       	ld	r18, Z
    3972:	31 81       	ldd	r19, Z+1	; 0x01
    3974:	8c ad       	ldd	r24, Y+60	; 0x3c
    3976:	9d ad       	ldd	r25, Y+61	; 0x3d
    3978:	28 17       	cp	r18, r24
    397a:	39 07       	cpc	r19, r25
    397c:	08 f4       	brcc	.+2      	; 0x3980 <STEP_MOTORu8StartHalfMode+0x3e0>
    397e:	46 cf       	rjmp	.-372    	; 0x380c <STEP_MOTORu8StartHalfMode+0x26c>
    3980:	b3 c1       	rjmp	.+870    	; 0x3ce8 <STEP_MOTORu8StartHalfMode+0x748>
				}
			}
		}

	}
	else if(STEP_UPPER_NIBBLE == Copy_pStep->Nibble)
    3982:	fe 01       	movw	r30, r28
    3984:	ed 5b       	subi	r30, 0xBD	; 189
    3986:	ff 4f       	sbci	r31, 0xFF	; 255
    3988:	01 90       	ld	r0, Z+
    398a:	f0 81       	ld	r31, Z
    398c:	e0 2d       	mov	r30, r0
    398e:	81 81       	ldd	r24, Z+1	; 0x01
    3990:	81 30       	cpi	r24, 0x01	; 1
    3992:	09 f0       	breq	.+2      	; 0x3996 <STEP_MOTORu8StartHalfMode+0x3f6>
    3994:	a4 c1       	rjmp	.+840    	; 0x3cde <STEP_MOTORu8StartHalfMode+0x73e>
	{

		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
    3996:	fe 01       	movw	r30, r28
    3998:	ed 5b       	subi	r30, 0xBD	; 189
    399a:	ff 4f       	sbci	r31, 0xFF	; 255
    399c:	01 90       	ld	r0, Z+
    399e:	f0 81       	ld	r31, Z
    39a0:	e0 2d       	mov	r30, r0
    39a2:	82 81       	ldd	r24, Z+2	; 0x02
    39a4:	88 23       	and	r24, r24
    39a6:	09 f0       	breq	.+2      	; 0x39aa <STEP_MOTORu8StartHalfMode+0x40a>
    39a8:	c9 c0       	rjmp	.+402    	; 0x3b3c <STEP_MOTORu8StartHalfMode+0x59c>
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    39aa:	fe 01       	movw	r30, r28
    39ac:	e0 5c       	subi	r30, 0xC0	; 192
    39ae:	ff 4f       	sbci	r31, 0xFF	; 255
    39b0:	11 82       	std	Z+1, r1	; 0x01
    39b2:	10 82       	st	Z, r1
    39b4:	b7 c0       	rjmp	.+366    	; 0x3b24 <STEP_MOTORu8StartHalfMode+0x584>
			{
				con1 = 0x01;
    39b6:	81 e0       	ldi	r24, 0x01	; 1
    39b8:	8a af       	std	Y+58, r24	; 0x3a
				con2 = 0x03;
    39ba:	83 e0       	ldi	r24, 0x03	; 3
    39bc:	89 af       	std	Y+57, r24	; 0x39
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    39be:	81 e0       	ldi	r24, 0x01	; 1
    39c0:	8b af       	std	Y+59, r24	; 0x3b
    39c2:	a0 c0       	rjmp	.+320    	; 0x3b04 <STEP_MOTORu8StartHalfMode+0x564>
				{

					if(Local_u8ItrateStep%2==1)
    39c4:	8b ad       	ldd	r24, Y+59	; 0x3b
    39c6:	88 2f       	mov	r24, r24
    39c8:	90 e0       	ldi	r25, 0x00	; 0
    39ca:	81 70       	andi	r24, 0x01	; 1
    39cc:	90 70       	andi	r25, 0x00	; 0
    39ce:	88 23       	and	r24, r24
    39d0:	71 f0       	breq	.+28     	; 0x39ee <STEP_MOTORu8StartHalfMode+0x44e>
					{
						DIO_u8SetHighNibbleValue(Copy_pStep->Port,con1);
    39d2:	fe 01       	movw	r30, r28
    39d4:	ed 5b       	subi	r30, 0xBD	; 189
    39d6:	ff 4f       	sbci	r31, 0xFF	; 255
    39d8:	01 90       	ld	r0, Z+
    39da:	f0 81       	ld	r31, Z
    39dc:	e0 2d       	mov	r30, r0
    39de:	80 81       	ld	r24, Z
    39e0:	6a ad       	ldd	r22, Y+58	; 0x3a
    39e2:	0e 94 52 13 	call	0x26a4	; 0x26a4 <DIO_u8SetHighNibbleValue>
						con1<<=1;
    39e6:	8a ad       	ldd	r24, Y+58	; 0x3a
    39e8:	88 0f       	add	r24, r24
    39ea:	8a af       	std	Y+58, r24	; 0x3a
    39ec:	16 c0       	rjmp	.+44     	; 0x3a1a <STEP_MOTORu8StartHalfMode+0x47a>
					}
					else
					{
						DIO_u8SetHighNibbleValue(Copy_pStep->Port,con2);
    39ee:	fe 01       	movw	r30, r28
    39f0:	ed 5b       	subi	r30, 0xBD	; 189
    39f2:	ff 4f       	sbci	r31, 0xFF	; 255
    39f4:	01 90       	ld	r0, Z+
    39f6:	f0 81       	ld	r31, Z
    39f8:	e0 2d       	mov	r30, r0
    39fa:	80 81       	ld	r24, Z
    39fc:	69 ad       	ldd	r22, Y+57	; 0x39
    39fe:	0e 94 52 13 	call	0x26a4	; 0x26a4 <DIO_u8SetHighNibbleValue>
						CLCD_voidWriteNumber(con2);
    3a02:	89 ad       	ldd	r24, Y+57	; 0x39
    3a04:	88 2f       	mov	r24, r24
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <CLCD_voidWriteNumber>
						CLCD_voidSendData(' ');
    3a0c:	80 e2       	ldi	r24, 0x20	; 32
    3a0e:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <CLCD_voidSendData>
						con2 = RotateLeftLowNibble(con2);
    3a12:	89 ad       	ldd	r24, Y+57	; 0x39
    3a14:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <RotateLeftLowNibble>
    3a18:	89 af       	std	Y+57, r24	; 0x39
    3a1a:	80 e0       	ldi	r24, 0x00	; 0
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	a0 e0       	ldi	r26, 0x00	; 0
    3a20:	b0 e4       	ldi	r27, 0x40	; 64
    3a22:	89 8f       	std	Y+25, r24	; 0x19
    3a24:	9a 8f       	std	Y+26, r25	; 0x1a
    3a26:	ab 8f       	std	Y+27, r26	; 0x1b
    3a28:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a2a:	69 8d       	ldd	r22, Y+25	; 0x19
    3a2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a32:	20 e0       	ldi	r18, 0x00	; 0
    3a34:	30 e0       	ldi	r19, 0x00	; 0
    3a36:	4a ef       	ldi	r20, 0xFA	; 250
    3a38:	54 e4       	ldi	r21, 0x44	; 68
    3a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a3e:	dc 01       	movw	r26, r24
    3a40:	cb 01       	movw	r24, r22
    3a42:	8d 8b       	std	Y+21, r24	; 0x15
    3a44:	9e 8b       	std	Y+22, r25	; 0x16
    3a46:	af 8b       	std	Y+23, r26	; 0x17
    3a48:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a4a:	6d 89       	ldd	r22, Y+21	; 0x15
    3a4c:	7e 89       	ldd	r23, Y+22	; 0x16
    3a4e:	8f 89       	ldd	r24, Y+23	; 0x17
    3a50:	98 8d       	ldd	r25, Y+24	; 0x18
    3a52:	20 e0       	ldi	r18, 0x00	; 0
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	40 e8       	ldi	r20, 0x80	; 128
    3a58:	5f e3       	ldi	r21, 0x3F	; 63
    3a5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a5e:	88 23       	and	r24, r24
    3a60:	2c f4       	brge	.+10     	; 0x3a6c <STEP_MOTORu8StartHalfMode+0x4cc>
		__ticks = 1;
    3a62:	81 e0       	ldi	r24, 0x01	; 1
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	9c 8b       	std	Y+20, r25	; 0x14
    3a68:	8b 8b       	std	Y+19, r24	; 0x13
    3a6a:	3f c0       	rjmp	.+126    	; 0x3aea <STEP_MOTORu8StartHalfMode+0x54a>
	else if (__tmp > 65535)
    3a6c:	6d 89       	ldd	r22, Y+21	; 0x15
    3a6e:	7e 89       	ldd	r23, Y+22	; 0x16
    3a70:	8f 89       	ldd	r24, Y+23	; 0x17
    3a72:	98 8d       	ldd	r25, Y+24	; 0x18
    3a74:	20 e0       	ldi	r18, 0x00	; 0
    3a76:	3f ef       	ldi	r19, 0xFF	; 255
    3a78:	4f e7       	ldi	r20, 0x7F	; 127
    3a7a:	57 e4       	ldi	r21, 0x47	; 71
    3a7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a80:	18 16       	cp	r1, r24
    3a82:	4c f5       	brge	.+82     	; 0x3ad6 <STEP_MOTORu8StartHalfMode+0x536>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a84:	69 8d       	ldd	r22, Y+25	; 0x19
    3a86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a8c:	20 e0       	ldi	r18, 0x00	; 0
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	40 e2       	ldi	r20, 0x20	; 32
    3a92:	51 e4       	ldi	r21, 0x41	; 65
    3a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a98:	dc 01       	movw	r26, r24
    3a9a:	cb 01       	movw	r24, r22
    3a9c:	bc 01       	movw	r22, r24
    3a9e:	cd 01       	movw	r24, r26
    3aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa4:	dc 01       	movw	r26, r24
    3aa6:	cb 01       	movw	r24, r22
    3aa8:	9c 8b       	std	Y+20, r25	; 0x14
    3aaa:	8b 8b       	std	Y+19, r24	; 0x13
    3aac:	0f c0       	rjmp	.+30     	; 0x3acc <STEP_MOTORu8StartHalfMode+0x52c>
    3aae:	88 ec       	ldi	r24, 0xC8	; 200
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
    3ab2:	9a 8b       	std	Y+18, r25	; 0x12
    3ab4:	89 8b       	std	Y+17, r24	; 0x11
    3ab6:	89 89       	ldd	r24, Y+17	; 0x11
    3ab8:	9a 89       	ldd	r25, Y+18	; 0x12
    3aba:	01 97       	sbiw	r24, 0x01	; 1
    3abc:	f1 f7       	brne	.-4      	; 0x3aba <STEP_MOTORu8StartHalfMode+0x51a>
    3abe:	9a 8b       	std	Y+18, r25	; 0x12
    3ac0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ac2:	8b 89       	ldd	r24, Y+19	; 0x13
    3ac4:	9c 89       	ldd	r25, Y+20	; 0x14
    3ac6:	01 97       	sbiw	r24, 0x01	; 1
    3ac8:	9c 8b       	std	Y+20, r25	; 0x14
    3aca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3acc:	8b 89       	ldd	r24, Y+19	; 0x13
    3ace:	9c 89       	ldd	r25, Y+20	; 0x14
    3ad0:	00 97       	sbiw	r24, 0x00	; 0
    3ad2:	69 f7       	brne	.-38     	; 0x3aae <STEP_MOTORu8StartHalfMode+0x50e>
    3ad4:	14 c0       	rjmp	.+40     	; 0x3afe <STEP_MOTORu8StartHalfMode+0x55e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ad6:	6d 89       	ldd	r22, Y+21	; 0x15
    3ad8:	7e 89       	ldd	r23, Y+22	; 0x16
    3ada:	8f 89       	ldd	r24, Y+23	; 0x17
    3adc:	98 8d       	ldd	r25, Y+24	; 0x18
    3ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ae2:	dc 01       	movw	r26, r24
    3ae4:	cb 01       	movw	r24, r22
    3ae6:	9c 8b       	std	Y+20, r25	; 0x14
    3ae8:	8b 8b       	std	Y+19, r24	; 0x13
    3aea:	8b 89       	ldd	r24, Y+19	; 0x13
    3aec:	9c 89       	ldd	r25, Y+20	; 0x14
    3aee:	98 8b       	std	Y+16, r25	; 0x10
    3af0:	8f 87       	std	Y+15, r24	; 0x0f
    3af2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3af4:	98 89       	ldd	r25, Y+16	; 0x10
    3af6:	01 97       	sbiw	r24, 0x01	; 1
    3af8:	f1 f7       	brne	.-4      	; 0x3af6 <STEP_MOTORu8StartHalfMode+0x556>
    3afa:	98 8b       	std	Y+16, r25	; 0x10
    3afc:	8f 87       	std	Y+15, r24	; 0x0f

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				con1 = 0x01;
				con2 = 0x03;
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3afe:	8b ad       	ldd	r24, Y+59	; 0x3b
    3b00:	8f 5f       	subi	r24, 0xFF	; 255
    3b02:	8b af       	std	Y+59, r24	; 0x3b
    3b04:	8b ad       	ldd	r24, Y+59	; 0x3b
    3b06:	89 30       	cpi	r24, 0x09	; 9
    3b08:	08 f4       	brcc	.+2      	; 0x3b0c <STEP_MOTORu8StartHalfMode+0x56c>
    3b0a:	5c cf       	rjmp	.-328    	; 0x39c4 <STEP_MOTORu8StartHalfMode+0x424>
	{

		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3b0c:	de 01       	movw	r26, r28
    3b0e:	a0 5c       	subi	r26, 0xC0	; 192
    3b10:	bf 4f       	sbci	r27, 0xFF	; 255
    3b12:	fe 01       	movw	r30, r28
    3b14:	e0 5c       	subi	r30, 0xC0	; 192
    3b16:	ff 4f       	sbci	r31, 0xFF	; 255
    3b18:	80 81       	ld	r24, Z
    3b1a:	91 81       	ldd	r25, Z+1	; 0x01
    3b1c:	01 96       	adiw	r24, 0x01	; 1
    3b1e:	11 96       	adiw	r26, 0x01	; 1
    3b20:	9c 93       	st	X, r25
    3b22:	8e 93       	st	-X, r24
    3b24:	fe 01       	movw	r30, r28
    3b26:	e0 5c       	subi	r30, 0xC0	; 192
    3b28:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2a:	20 81       	ld	r18, Z
    3b2c:	31 81       	ldd	r19, Z+1	; 0x01
    3b2e:	8c ad       	ldd	r24, Y+60	; 0x3c
    3b30:	9d ad       	ldd	r25, Y+61	; 0x3d
    3b32:	28 17       	cp	r18, r24
    3b34:	39 07       	cpc	r19, r25
    3b36:	08 f4       	brcc	.+2      	; 0x3b3a <STEP_MOTORu8StartHalfMode+0x59a>
    3b38:	3e cf       	rjmp	.-388    	; 0x39b6 <STEP_MOTORu8StartHalfMode+0x416>
    3b3a:	d6 c0       	rjmp	.+428    	; 0x3ce8 <STEP_MOTORu8StartHalfMode+0x748>
					}
					_delay_ms(2);
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
    3b3c:	fe 01       	movw	r30, r28
    3b3e:	ed 5b       	subi	r30, 0xBD	; 189
    3b40:	ff 4f       	sbci	r31, 0xFF	; 255
    3b42:	01 90       	ld	r0, Z+
    3b44:	f0 81       	ld	r31, Z
    3b46:	e0 2d       	mov	r30, r0
    3b48:	82 81       	ldd	r24, Z+2	; 0x02
    3b4a:	81 30       	cpi	r24, 0x01	; 1
    3b4c:	09 f0       	breq	.+2      	; 0x3b50 <STEP_MOTORu8StartHalfMode+0x5b0>
    3b4e:	c1 c0       	rjmp	.+386    	; 0x3cd2 <STEP_MOTORu8StartHalfMode+0x732>
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3b50:	fe 01       	movw	r30, r28
    3b52:	e0 5c       	subi	r30, 0xC0	; 192
    3b54:	ff 4f       	sbci	r31, 0xFF	; 255
    3b56:	11 82       	std	Z+1, r1	; 0x01
    3b58:	10 82       	st	Z, r1
    3b5a:	af c0       	rjmp	.+350    	; 0x3cba <STEP_MOTORu8StartHalfMode+0x71a>
			{
				con1 = 0x08;
    3b5c:	88 e0       	ldi	r24, 0x08	; 8
    3b5e:	8a af       	std	Y+58, r24	; 0x3a
				con2 = 0x0c;
    3b60:	8c e0       	ldi	r24, 0x0C	; 12
    3b62:	89 af       	std	Y+57, r24	; 0x39
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3b64:	81 e0       	ldi	r24, 0x01	; 1
    3b66:	8b af       	std	Y+59, r24	; 0x3b
    3b68:	98 c0       	rjmp	.+304    	; 0x3c9a <STEP_MOTORu8StartHalfMode+0x6fa>
				{

					if(Local_u8ItrateStep%2==1)
    3b6a:	8b ad       	ldd	r24, Y+59	; 0x3b
    3b6c:	88 2f       	mov	r24, r24
    3b6e:	90 e0       	ldi	r25, 0x00	; 0
    3b70:	81 70       	andi	r24, 0x01	; 1
    3b72:	90 70       	andi	r25, 0x00	; 0
    3b74:	88 23       	and	r24, r24
    3b76:	71 f0       	breq	.+28     	; 0x3b94 <STEP_MOTORu8StartHalfMode+0x5f4>
					{
						DIO_u8SetHighNibbleValue(Copy_pStep->Port,con1);
    3b78:	fe 01       	movw	r30, r28
    3b7a:	ed 5b       	subi	r30, 0xBD	; 189
    3b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7e:	01 90       	ld	r0, Z+
    3b80:	f0 81       	ld	r31, Z
    3b82:	e0 2d       	mov	r30, r0
    3b84:	80 81       	ld	r24, Z
    3b86:	6a ad       	ldd	r22, Y+58	; 0x3a
    3b88:	0e 94 52 13 	call	0x26a4	; 0x26a4 <DIO_u8SetHighNibbleValue>
						con1>>=1;
    3b8c:	8a ad       	ldd	r24, Y+58	; 0x3a
    3b8e:	86 95       	lsr	r24
    3b90:	8a af       	std	Y+58, r24	; 0x3a
    3b92:	0e c0       	rjmp	.+28     	; 0x3bb0 <STEP_MOTORu8StartHalfMode+0x610>
					}
					else
					{
						DIO_u8SetHighNibbleValue(Copy_pStep->Port,con2);
    3b94:	fe 01       	movw	r30, r28
    3b96:	ed 5b       	subi	r30, 0xBD	; 189
    3b98:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9a:	01 90       	ld	r0, Z+
    3b9c:	f0 81       	ld	r31, Z
    3b9e:	e0 2d       	mov	r30, r0
    3ba0:	80 81       	ld	r24, Z
    3ba2:	69 ad       	ldd	r22, Y+57	; 0x39
    3ba4:	0e 94 52 13 	call	0x26a4	; 0x26a4 <DIO_u8SetHighNibbleValue>
						con2 = RotateRightLowNibble(con2);
    3ba8:	89 ad       	ldd	r24, Y+57	; 0x39
    3baa:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <RotateRightLowNibble>
    3bae:	89 af       	std	Y+57, r24	; 0x39
    3bb0:	80 e0       	ldi	r24, 0x00	; 0
    3bb2:	90 e0       	ldi	r25, 0x00	; 0
    3bb4:	a0 e0       	ldi	r26, 0x00	; 0
    3bb6:	b0 e4       	ldi	r27, 0x40	; 64
    3bb8:	8b 87       	std	Y+11, r24	; 0x0b
    3bba:	9c 87       	std	Y+12, r25	; 0x0c
    3bbc:	ad 87       	std	Y+13, r26	; 0x0d
    3bbe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bc8:	20 e0       	ldi	r18, 0x00	; 0
    3bca:	30 e0       	ldi	r19, 0x00	; 0
    3bcc:	4a ef       	ldi	r20, 0xFA	; 250
    3bce:	54 e4       	ldi	r21, 0x44	; 68
    3bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bd4:	dc 01       	movw	r26, r24
    3bd6:	cb 01       	movw	r24, r22
    3bd8:	8f 83       	std	Y+7, r24	; 0x07
    3bda:	98 87       	std	Y+8, r25	; 0x08
    3bdc:	a9 87       	std	Y+9, r26	; 0x09
    3bde:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3be0:	6f 81       	ldd	r22, Y+7	; 0x07
    3be2:	78 85       	ldd	r23, Y+8	; 0x08
    3be4:	89 85       	ldd	r24, Y+9	; 0x09
    3be6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3be8:	20 e0       	ldi	r18, 0x00	; 0
    3bea:	30 e0       	ldi	r19, 0x00	; 0
    3bec:	40 e8       	ldi	r20, 0x80	; 128
    3bee:	5f e3       	ldi	r21, 0x3F	; 63
    3bf0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bf4:	88 23       	and	r24, r24
    3bf6:	2c f4       	brge	.+10     	; 0x3c02 <STEP_MOTORu8StartHalfMode+0x662>
		__ticks = 1;
    3bf8:	81 e0       	ldi	r24, 0x01	; 1
    3bfa:	90 e0       	ldi	r25, 0x00	; 0
    3bfc:	9e 83       	std	Y+6, r25	; 0x06
    3bfe:	8d 83       	std	Y+5, r24	; 0x05
    3c00:	3f c0       	rjmp	.+126    	; 0x3c80 <STEP_MOTORu8StartHalfMode+0x6e0>
	else if (__tmp > 65535)
    3c02:	6f 81       	ldd	r22, Y+7	; 0x07
    3c04:	78 85       	ldd	r23, Y+8	; 0x08
    3c06:	89 85       	ldd	r24, Y+9	; 0x09
    3c08:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c0a:	20 e0       	ldi	r18, 0x00	; 0
    3c0c:	3f ef       	ldi	r19, 0xFF	; 255
    3c0e:	4f e7       	ldi	r20, 0x7F	; 127
    3c10:	57 e4       	ldi	r21, 0x47	; 71
    3c12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c16:	18 16       	cp	r1, r24
    3c18:	4c f5       	brge	.+82     	; 0x3c6c <STEP_MOTORu8StartHalfMode+0x6cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c20:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c22:	20 e0       	ldi	r18, 0x00	; 0
    3c24:	30 e0       	ldi	r19, 0x00	; 0
    3c26:	40 e2       	ldi	r20, 0x20	; 32
    3c28:	51 e4       	ldi	r21, 0x41	; 65
    3c2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c2e:	dc 01       	movw	r26, r24
    3c30:	cb 01       	movw	r24, r22
    3c32:	bc 01       	movw	r22, r24
    3c34:	cd 01       	movw	r24, r26
    3c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c3a:	dc 01       	movw	r26, r24
    3c3c:	cb 01       	movw	r24, r22
    3c3e:	9e 83       	std	Y+6, r25	; 0x06
    3c40:	8d 83       	std	Y+5, r24	; 0x05
    3c42:	0f c0       	rjmp	.+30     	; 0x3c62 <STEP_MOTORu8StartHalfMode+0x6c2>
    3c44:	88 ec       	ldi	r24, 0xC8	; 200
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	9c 83       	std	Y+4, r25	; 0x04
    3c4a:	8b 83       	std	Y+3, r24	; 0x03
    3c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c4e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c50:	01 97       	sbiw	r24, 0x01	; 1
    3c52:	f1 f7       	brne	.-4      	; 0x3c50 <STEP_MOTORu8StartHalfMode+0x6b0>
    3c54:	9c 83       	std	Y+4, r25	; 0x04
    3c56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c58:	8d 81       	ldd	r24, Y+5	; 0x05
    3c5a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c5c:	01 97       	sbiw	r24, 0x01	; 1
    3c5e:	9e 83       	std	Y+6, r25	; 0x06
    3c60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c62:	8d 81       	ldd	r24, Y+5	; 0x05
    3c64:	9e 81       	ldd	r25, Y+6	; 0x06
    3c66:	00 97       	sbiw	r24, 0x00	; 0
    3c68:	69 f7       	brne	.-38     	; 0x3c44 <STEP_MOTORu8StartHalfMode+0x6a4>
    3c6a:	14 c0       	rjmp	.+40     	; 0x3c94 <STEP_MOTORu8StartHalfMode+0x6f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c6c:	6f 81       	ldd	r22, Y+7	; 0x07
    3c6e:	78 85       	ldd	r23, Y+8	; 0x08
    3c70:	89 85       	ldd	r24, Y+9	; 0x09
    3c72:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c78:	dc 01       	movw	r26, r24
    3c7a:	cb 01       	movw	r24, r22
    3c7c:	9e 83       	std	Y+6, r25	; 0x06
    3c7e:	8d 83       	std	Y+5, r24	; 0x05
    3c80:	8d 81       	ldd	r24, Y+5	; 0x05
    3c82:	9e 81       	ldd	r25, Y+6	; 0x06
    3c84:	9a 83       	std	Y+2, r25	; 0x02
    3c86:	89 83       	std	Y+1, r24	; 0x01
    3c88:	89 81       	ldd	r24, Y+1	; 0x01
    3c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c8c:	01 97       	sbiw	r24, 0x01	; 1
    3c8e:	f1 f7       	brne	.-4      	; 0x3c8c <STEP_MOTORu8StartHalfMode+0x6ec>
    3c90:	9a 83       	std	Y+2, r25	; 0x02
    3c92:	89 83       	std	Y+1, r24	; 0x01

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				con1 = 0x08;
				con2 = 0x0c;
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3c94:	8b ad       	ldd	r24, Y+59	; 0x3b
    3c96:	8f 5f       	subi	r24, 0xFF	; 255
    3c98:	8b af       	std	Y+59, r24	; 0x3b
    3c9a:	8b ad       	ldd	r24, Y+59	; 0x3b
    3c9c:	89 30       	cpi	r24, 0x09	; 9
    3c9e:	08 f4       	brcc	.+2      	; 0x3ca2 <STEP_MOTORu8StartHalfMode+0x702>
    3ca0:	64 cf       	rjmp	.-312    	; 0x3b6a <STEP_MOTORu8StartHalfMode+0x5ca>
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3ca2:	de 01       	movw	r26, r28
    3ca4:	a0 5c       	subi	r26, 0xC0	; 192
    3ca6:	bf 4f       	sbci	r27, 0xFF	; 255
    3ca8:	fe 01       	movw	r30, r28
    3caa:	e0 5c       	subi	r30, 0xC0	; 192
    3cac:	ff 4f       	sbci	r31, 0xFF	; 255
    3cae:	80 81       	ld	r24, Z
    3cb0:	91 81       	ldd	r25, Z+1	; 0x01
    3cb2:	01 96       	adiw	r24, 0x01	; 1
    3cb4:	11 96       	adiw	r26, 0x01	; 1
    3cb6:	9c 93       	st	X, r25
    3cb8:	8e 93       	st	-X, r24
    3cba:	fe 01       	movw	r30, r28
    3cbc:	e0 5c       	subi	r30, 0xC0	; 192
    3cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc0:	20 81       	ld	r18, Z
    3cc2:	31 81       	ldd	r19, Z+1	; 0x01
    3cc4:	8c ad       	ldd	r24, Y+60	; 0x3c
    3cc6:	9d ad       	ldd	r25, Y+61	; 0x3d
    3cc8:	28 17       	cp	r18, r24
    3cca:	39 07       	cpc	r19, r25
    3ccc:	08 f4       	brcc	.+2      	; 0x3cd0 <STEP_MOTORu8StartHalfMode+0x730>
    3cce:	46 cf       	rjmp	.-372    	; 0x3b5c <STEP_MOTORu8StartHalfMode+0x5bc>
    3cd0:	0b c0       	rjmp	.+22     	; 0x3ce8 <STEP_MOTORu8StartHalfMode+0x748>
					_delay_ms(2);
				}
			}
		}
		else
			Local_u8ErrorState = NOTOK;
    3cd2:	fe 01       	movw	r30, r28
    3cd4:	ee 5b       	subi	r30, 0xBE	; 190
    3cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd8:	81 e0       	ldi	r24, 0x01	; 1
    3cda:	80 83       	st	Z, r24
    3cdc:	05 c0       	rjmp	.+10     	; 0x3ce8 <STEP_MOTORu8StartHalfMode+0x748>
	}
	else
		Local_u8ErrorState = NOTOK;
    3cde:	fe 01       	movw	r30, r28
    3ce0:	ee 5b       	subi	r30, 0xBE	; 190
    3ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce4:	81 e0       	ldi	r24, 0x01	; 1
    3ce6:	80 83       	st	Z, r24
	return Local_u8ErrorState;
    3ce8:	fe 01       	movw	r30, r28
    3cea:	ee 5b       	subi	r30, 0xBE	; 190
    3cec:	ff 4f       	sbci	r31, 0xFF	; 255
    3cee:	80 81       	ld	r24, Z
}
    3cf0:	cc 5b       	subi	r28, 0xBC	; 188
    3cf2:	df 4f       	sbci	r29, 0xFF	; 255
    3cf4:	0f b6       	in	r0, 0x3f	; 63
    3cf6:	f8 94       	cli
    3cf8:	de bf       	out	0x3e, r29	; 62
    3cfa:	0f be       	out	0x3f, r0	; 63
    3cfc:	cd bf       	out	0x3d, r28	; 61
    3cfe:	cf 91       	pop	r28
    3d00:	df 91       	pop	r29
    3d02:	08 95       	ret

00003d04 <STEP_MOTORvStop>:

void STEP_MOTORvStop(STEP_t *Copy_pStep)
{
    3d04:	df 93       	push	r29
    3d06:	cf 93       	push	r28
    3d08:	00 d0       	rcall	.+0      	; 0x3d0a <STEP_MOTORvStop+0x6>
    3d0a:	cd b7       	in	r28, 0x3d	; 61
    3d0c:	de b7       	in	r29, 0x3e	; 62
    3d0e:	9a 83       	std	Y+2, r25	; 0x02
    3d10:	89 83       	std	Y+1, r24	; 0x01
	if(STEP_LOWER_NIBBLE == Copy_pStep->Nibble)
    3d12:	e9 81       	ldd	r30, Y+1	; 0x01
    3d14:	fa 81       	ldd	r31, Y+2	; 0x02
    3d16:	81 81       	ldd	r24, Z+1	; 0x01
    3d18:	88 23       	and	r24, r24
    3d1a:	39 f4       	brne	.+14     	; 0x3d2a <STEP_MOTORvStop+0x26>
	{
		DIO_u8SetLowNibbleValue(Copy_pStep->Port,0);
    3d1c:	e9 81       	ldd	r30, Y+1	; 0x01
    3d1e:	fa 81       	ldd	r31, Y+2	; 0x02
    3d20:	80 81       	ld	r24, Z
    3d22:	60 e0       	ldi	r22, 0x00	; 0
    3d24:	0e 94 d7 12 	call	0x25ae	; 0x25ae <DIO_u8SetLowNibbleValue>
    3d28:	0b c0       	rjmp	.+22     	; 0x3d40 <STEP_MOTORvStop+0x3c>
	}
	else if(STEP_UPPER_NIBBLE == Copy_pStep->Nibble)
    3d2a:	e9 81       	ldd	r30, Y+1	; 0x01
    3d2c:	fa 81       	ldd	r31, Y+2	; 0x02
    3d2e:	81 81       	ldd	r24, Z+1	; 0x01
    3d30:	81 30       	cpi	r24, 0x01	; 1
    3d32:	31 f4       	brne	.+12     	; 0x3d40 <STEP_MOTORvStop+0x3c>
	{
		DIO_u8SetHighNibbleValue(Copy_pStep->Port,0);
    3d34:	e9 81       	ldd	r30, Y+1	; 0x01
    3d36:	fa 81       	ldd	r31, Y+2	; 0x02
    3d38:	80 81       	ld	r24, Z
    3d3a:	60 e0       	ldi	r22, 0x00	; 0
    3d3c:	0e 94 52 13 	call	0x26a4	; 0x26a4 <DIO_u8SetHighNibbleValue>
	}
}
    3d40:	0f 90       	pop	r0
    3d42:	0f 90       	pop	r0
    3d44:	cf 91       	pop	r28
    3d46:	df 91       	pop	r29
    3d48:	08 95       	ret

00003d4a <RotateRightLowNibble>:


static u8 RotateRightLowNibble(u8 Val)
{
    3d4a:	df 93       	push	r29
    3d4c:	cf 93       	push	r28
    3d4e:	00 d0       	rcall	.+0      	; 0x3d50 <RotateRightLowNibble+0x6>
    3d50:	cd b7       	in	r28, 0x3d	; 61
    3d52:	de b7       	in	r29, 0x3e	; 62
    3d54:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_xVal = 0;
    3d56:	19 82       	std	Y+1, r1	; 0x01
	Local_xVal = GET_BIT(Val,0);
    3d58:	8a 81       	ldd	r24, Y+2	; 0x02
    3d5a:	81 70       	andi	r24, 0x01	; 1
    3d5c:	89 83       	std	Y+1, r24	; 0x01
	Val>>=1;
    3d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d60:	86 95       	lsr	r24
    3d62:	8a 83       	std	Y+2, r24	; 0x02
	Local_xVal?SET_BIT(Val,3):CLR_BIT(Val,3);
    3d64:	89 81       	ldd	r24, Y+1	; 0x01
    3d66:	88 23       	and	r24, r24
    3d68:	21 f0       	breq	.+8      	; 0x3d72 <RotateRightLowNibble+0x28>
    3d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d6c:	88 60       	ori	r24, 0x08	; 8
    3d6e:	8a 83       	std	Y+2, r24	; 0x02
    3d70:	03 c0       	rjmp	.+6      	; 0x3d78 <RotateRightLowNibble+0x2e>
    3d72:	8a 81       	ldd	r24, Y+2	; 0x02
    3d74:	87 7f       	andi	r24, 0xF7	; 247
    3d76:	8a 83       	std	Y+2, r24	; 0x02
	return Val;
    3d78:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3d7a:	0f 90       	pop	r0
    3d7c:	0f 90       	pop	r0
    3d7e:	cf 91       	pop	r28
    3d80:	df 91       	pop	r29
    3d82:	08 95       	ret

00003d84 <RotateLeftLowNibble>:

static u8 RotateLeftLowNibble(u8 Val)
{
    3d84:	df 93       	push	r29
    3d86:	cf 93       	push	r28
    3d88:	00 d0       	rcall	.+0      	; 0x3d8a <RotateLeftLowNibble+0x6>
    3d8a:	cd b7       	in	r28, 0x3d	; 61
    3d8c:	de b7       	in	r29, 0x3e	; 62
    3d8e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_xVal = 0;
    3d90:	19 82       	std	Y+1, r1	; 0x01
	Local_xVal = GET_BIT(Val,3);
    3d92:	8a 81       	ldd	r24, Y+2	; 0x02
    3d94:	86 95       	lsr	r24
    3d96:	86 95       	lsr	r24
    3d98:	86 95       	lsr	r24
    3d9a:	81 70       	andi	r24, 0x01	; 1
    3d9c:	89 83       	std	Y+1, r24	; 0x01
	Val<<=1;
    3d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3da0:	88 0f       	add	r24, r24
    3da2:	8a 83       	std	Y+2, r24	; 0x02
	Local_xVal?SET_BIT(Val,0):CLR_BIT(Val,0);
    3da4:	89 81       	ldd	r24, Y+1	; 0x01
    3da6:	88 23       	and	r24, r24
    3da8:	21 f0       	breq	.+8      	; 0x3db2 <RotateLeftLowNibble+0x2e>
    3daa:	8a 81       	ldd	r24, Y+2	; 0x02
    3dac:	81 60       	ori	r24, 0x01	; 1
    3dae:	8a 83       	std	Y+2, r24	; 0x02
    3db0:	03 c0       	rjmp	.+6      	; 0x3db8 <RotateLeftLowNibble+0x34>
    3db2:	8a 81       	ldd	r24, Y+2	; 0x02
    3db4:	8e 7f       	andi	r24, 0xFE	; 254
    3db6:	8a 83       	std	Y+2, r24	; 0x02
	return Val;
    3db8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3dba:	0f 90       	pop	r0
    3dbc:	0f 90       	pop	r0
    3dbe:	cf 91       	pop	r28
    3dc0:	df 91       	pop	r29
    3dc2:	08 95       	ret

00003dc4 <SW_u8GetState>:
 * 			Copy_SW     : Full with Port,Pin,SelfType,switch function
 * 			Copy_u8State: return State of switch as (0) Pressed , (1) Not pressed
 * use for: Get Switch by delay debouncing of switch as (0) Pressed , (1) Not pressed
 *  */
u8 SW_u8GetState(SW_t* Copy_SW,u8 *Copy_u8State)
{
    3dc4:	df 93       	push	r29
    3dc6:	cf 93       	push	r28
    3dc8:	cd b7       	in	r28, 0x3d	; 61
    3dca:	de b7       	in	r29, 0x3e	; 62
    3dcc:	a1 97       	sbiw	r28, 0x21	; 33
    3dce:	0f b6       	in	r0, 0x3f	; 63
    3dd0:	f8 94       	cli
    3dd2:	de bf       	out	0x3e, r29	; 62
    3dd4:	0f be       	out	0x3f, r0	; 63
    3dd6:	cd bf       	out	0x3d, r28	; 61
    3dd8:	9f 8f       	std	Y+31, r25	; 0x1f
    3dda:	8e 8f       	std	Y+30, r24	; 0x1e
    3ddc:	79 a3       	std	Y+33, r23	; 0x21
    3dde:	68 a3       	std	Y+32, r22	; 0x20
	u8 Local_u8ErrorState = OK;
    3de0:	1d 8e       	std	Y+29, r1	; 0x1d
	//static u8 pressed_conf_level = 0;
	//static u8 released_conf_level = 0;
	//static u8 pressed = 0;
	//static u8 pressed2 = 0;
	*Copy_u8State = SW_NOT_PRESSED;
    3de2:	e8 a1       	ldd	r30, Y+32	; 0x20
    3de4:	f9 a1       	ldd	r31, Y+33	; 0x21
    3de6:	81 e0       	ldi	r24, 0x01	; 1
    3de8:	80 83       	st	Z, r24
	static u8 Local_u8SwState;
	if(Copy_SW->Pulltype == SW_PULL_UP)
    3dea:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3dec:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3dee:	82 81       	ldd	r24, Z+2	; 0x02
    3df0:	88 23       	and	r24, r24
    3df2:	09 f0       	breq	.+2      	; 0x3df6 <SW_u8GetState+0x32>
    3df4:	c3 c0       	rjmp	.+390    	; 0x3f7c <SW_u8GetState+0x1b8>
	{
		if(Copy_SW->SelfLockType == SW_SELF_LOCK)
    3df6:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3df8:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3dfa:	83 81       	ldd	r24, Z+3	; 0x03
    3dfc:	81 30       	cpi	r24, 0x01	; 1
    3dfe:	09 f0       	breq	.+2      	; 0x3e02 <SW_u8GetState+0x3e>
    3e00:	9c c0       	rjmp	.+312    	; 0x3f3a <SW_u8GetState+0x176>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    3e02:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3e04:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3e06:	80 81       	ld	r24, Z
    3e08:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3e0a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3e0c:	91 81       	ldd	r25, Z+1	; 0x01
    3e0e:	2c ea       	ldi	r18, 0xAC	; 172
    3e10:	31 e0       	ldi	r19, 0x01	; 1
    3e12:	69 2f       	mov	r22, r25
    3e14:	a9 01       	movw	r20, r18
    3e16:	0e 94 b1 11 	call	0x2362	; 0x2362 <DIO_u8GetPinValue>
			if(Local_u8SwState == DIO_PIN_LOW)
    3e1a:	80 91 ac 01 	lds	r24, 0x01AC
    3e1e:	88 23       	and	r24, r24
    3e20:	09 f0       	breq	.+2      	; 0x3e24 <SW_u8GetState+0x60>
    3e22:	6d c1       	rjmp	.+730    	; 0x40fe <SW_u8GetState+0x33a>
    3e24:	80 e0       	ldi	r24, 0x00	; 0
    3e26:	90 e0       	ldi	r25, 0x00	; 0
    3e28:	a6 e1       	ldi	r26, 0x16	; 22
    3e2a:	b3 e4       	ldi	r27, 0x43	; 67
    3e2c:	89 8f       	std	Y+25, r24	; 0x19
    3e2e:	9a 8f       	std	Y+26, r25	; 0x1a
    3e30:	ab 8f       	std	Y+27, r26	; 0x1b
    3e32:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e34:	69 8d       	ldd	r22, Y+25	; 0x19
    3e36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e3c:	20 e0       	ldi	r18, 0x00	; 0
    3e3e:	30 e0       	ldi	r19, 0x00	; 0
    3e40:	4a ef       	ldi	r20, 0xFA	; 250
    3e42:	54 e4       	ldi	r21, 0x44	; 68
    3e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e48:	dc 01       	movw	r26, r24
    3e4a:	cb 01       	movw	r24, r22
    3e4c:	8d 8b       	std	Y+21, r24	; 0x15
    3e4e:	9e 8b       	std	Y+22, r25	; 0x16
    3e50:	af 8b       	std	Y+23, r26	; 0x17
    3e52:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3e54:	6d 89       	ldd	r22, Y+21	; 0x15
    3e56:	7e 89       	ldd	r23, Y+22	; 0x16
    3e58:	8f 89       	ldd	r24, Y+23	; 0x17
    3e5a:	98 8d       	ldd	r25, Y+24	; 0x18
    3e5c:	20 e0       	ldi	r18, 0x00	; 0
    3e5e:	30 e0       	ldi	r19, 0x00	; 0
    3e60:	40 e8       	ldi	r20, 0x80	; 128
    3e62:	5f e3       	ldi	r21, 0x3F	; 63
    3e64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e68:	88 23       	and	r24, r24
    3e6a:	2c f4       	brge	.+10     	; 0x3e76 <SW_u8GetState+0xb2>
		__ticks = 1;
    3e6c:	81 e0       	ldi	r24, 0x01	; 1
    3e6e:	90 e0       	ldi	r25, 0x00	; 0
    3e70:	9c 8b       	std	Y+20, r25	; 0x14
    3e72:	8b 8b       	std	Y+19, r24	; 0x13
    3e74:	3f c0       	rjmp	.+126    	; 0x3ef4 <SW_u8GetState+0x130>
	else if (__tmp > 65535)
    3e76:	6d 89       	ldd	r22, Y+21	; 0x15
    3e78:	7e 89       	ldd	r23, Y+22	; 0x16
    3e7a:	8f 89       	ldd	r24, Y+23	; 0x17
    3e7c:	98 8d       	ldd	r25, Y+24	; 0x18
    3e7e:	20 e0       	ldi	r18, 0x00	; 0
    3e80:	3f ef       	ldi	r19, 0xFF	; 255
    3e82:	4f e7       	ldi	r20, 0x7F	; 127
    3e84:	57 e4       	ldi	r21, 0x47	; 71
    3e86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e8a:	18 16       	cp	r1, r24
    3e8c:	4c f5       	brge	.+82     	; 0x3ee0 <SW_u8GetState+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e8e:	69 8d       	ldd	r22, Y+25	; 0x19
    3e90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e96:	20 e0       	ldi	r18, 0x00	; 0
    3e98:	30 e0       	ldi	r19, 0x00	; 0
    3e9a:	40 e2       	ldi	r20, 0x20	; 32
    3e9c:	51 e4       	ldi	r21, 0x41	; 65
    3e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ea2:	dc 01       	movw	r26, r24
    3ea4:	cb 01       	movw	r24, r22
    3ea6:	bc 01       	movw	r22, r24
    3ea8:	cd 01       	movw	r24, r26
    3eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eae:	dc 01       	movw	r26, r24
    3eb0:	cb 01       	movw	r24, r22
    3eb2:	9c 8b       	std	Y+20, r25	; 0x14
    3eb4:	8b 8b       	std	Y+19, r24	; 0x13
    3eb6:	0f c0       	rjmp	.+30     	; 0x3ed6 <SW_u8GetState+0x112>
    3eb8:	88 ec       	ldi	r24, 0xC8	; 200
    3eba:	90 e0       	ldi	r25, 0x00	; 0
    3ebc:	9a 8b       	std	Y+18, r25	; 0x12
    3ebe:	89 8b       	std	Y+17, r24	; 0x11
    3ec0:	89 89       	ldd	r24, Y+17	; 0x11
    3ec2:	9a 89       	ldd	r25, Y+18	; 0x12
    3ec4:	01 97       	sbiw	r24, 0x01	; 1
    3ec6:	f1 f7       	brne	.-4      	; 0x3ec4 <SW_u8GetState+0x100>
    3ec8:	9a 8b       	std	Y+18, r25	; 0x12
    3eca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ecc:	8b 89       	ldd	r24, Y+19	; 0x13
    3ece:	9c 89       	ldd	r25, Y+20	; 0x14
    3ed0:	01 97       	sbiw	r24, 0x01	; 1
    3ed2:	9c 8b       	std	Y+20, r25	; 0x14
    3ed4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ed6:	8b 89       	ldd	r24, Y+19	; 0x13
    3ed8:	9c 89       	ldd	r25, Y+20	; 0x14
    3eda:	00 97       	sbiw	r24, 0x00	; 0
    3edc:	69 f7       	brne	.-38     	; 0x3eb8 <SW_u8GetState+0xf4>
    3ede:	14 c0       	rjmp	.+40     	; 0x3f08 <SW_u8GetState+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ee0:	6d 89       	ldd	r22, Y+21	; 0x15
    3ee2:	7e 89       	ldd	r23, Y+22	; 0x16
    3ee4:	8f 89       	ldd	r24, Y+23	; 0x17
    3ee6:	98 8d       	ldd	r25, Y+24	; 0x18
    3ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eec:	dc 01       	movw	r26, r24
    3eee:	cb 01       	movw	r24, r22
    3ef0:	9c 8b       	std	Y+20, r25	; 0x14
    3ef2:	8b 8b       	std	Y+19, r24	; 0x13
    3ef4:	8b 89       	ldd	r24, Y+19	; 0x13
    3ef6:	9c 89       	ldd	r25, Y+20	; 0x14
    3ef8:	98 8b       	std	Y+16, r25	; 0x10
    3efa:	8f 87       	std	Y+15, r24	; 0x0f
    3efc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3efe:	98 89       	ldd	r25, Y+16	; 0x10
    3f00:	01 97       	sbiw	r24, 0x01	; 1
    3f02:	f1 f7       	brne	.-4      	; 0x3f00 <SW_u8GetState+0x13c>
    3f04:	98 8b       	std	Y+16, r25	; 0x10
    3f06:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(150);
				DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    3f08:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3f0a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3f0c:	80 81       	ld	r24, Z
    3f0e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3f10:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3f12:	91 81       	ldd	r25, Z+1	; 0x01
    3f14:	2c ea       	ldi	r18, 0xAC	; 172
    3f16:	31 e0       	ldi	r19, 0x01	; 1
    3f18:	69 2f       	mov	r22, r25
    3f1a:	a9 01       	movw	r20, r18
    3f1c:	0e 94 b1 11 	call	0x2362	; 0x2362 <DIO_u8GetPinValue>
				if(Local_u8SwState == DIO_PIN_LOW )
    3f20:	80 91 ac 01 	lds	r24, 0x01AC
    3f24:	88 23       	and	r24, r24
    3f26:	21 f4       	brne	.+8      	; 0x3f30 <SW_u8GetState+0x16c>
				{
					*Copy_u8State = SW_PRESSED;
    3f28:	e8 a1       	ldd	r30, Y+32	; 0x20
    3f2a:	f9 a1       	ldd	r31, Y+33	; 0x21
    3f2c:	10 82       	st	Z, r1
    3f2e:	e7 c0       	rjmp	.+462    	; 0x40fe <SW_u8GetState+0x33a>
				}
				else
				{
					*Copy_u8State = SW_NOT_PRESSED;
    3f30:	e8 a1       	ldd	r30, Y+32	; 0x20
    3f32:	f9 a1       	ldd	r31, Y+33	; 0x21
    3f34:	81 e0       	ldi	r24, 0x01	; 1
    3f36:	80 83       	st	Z, r24
    3f38:	e2 c0       	rjmp	.+452    	; 0x40fe <SW_u8GetState+0x33a>
				}
			}
		}
		else if(Copy_SW->SelfLockType == SW_NOT_SELF_LOCK)
    3f3a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3f3c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3f3e:	83 81       	ldd	r24, Z+3	; 0x03
    3f40:	88 23       	and	r24, r24
    3f42:	c9 f4       	brne	.+50     	; 0x3f76 <SW_u8GetState+0x1b2>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,Copy_u8State);
    3f44:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3f46:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3f48:	80 81       	ld	r24, Z
    3f4a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3f4c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3f4e:	91 81       	ldd	r25, Z+1	; 0x01
    3f50:	28 a1       	ldd	r18, Y+32	; 0x20
    3f52:	39 a1       	ldd	r19, Y+33	; 0x21
    3f54:	69 2f       	mov	r22, r25
    3f56:	a9 01       	movw	r20, r18
    3f58:	0e 94 b1 11 	call	0x2362	; 0x2362 <DIO_u8GetPinValue>
			if (Local_u8SwState == DIO_PIN_LOW)
    3f5c:	80 91 ac 01 	lds	r24, 0x01AC
    3f60:	88 23       	and	r24, r24
    3f62:	21 f4       	brne	.+8      	; 0x3f6c <SW_u8GetState+0x1a8>
				*Copy_u8State = SW_PRESSED;
    3f64:	e8 a1       	ldd	r30, Y+32	; 0x20
    3f66:	f9 a1       	ldd	r31, Y+33	; 0x21
    3f68:	10 82       	st	Z, r1
    3f6a:	c9 c0       	rjmp	.+402    	; 0x40fe <SW_u8GetState+0x33a>
			else
				*Copy_u8State = SW_NOT_PRESSED;
    3f6c:	e8 a1       	ldd	r30, Y+32	; 0x20
    3f6e:	f9 a1       	ldd	r31, Y+33	; 0x21
    3f70:	81 e0       	ldi	r24, 0x01	; 1
    3f72:	80 83       	st	Z, r24
    3f74:	c4 c0       	rjmp	.+392    	; 0x40fe <SW_u8GetState+0x33a>
		}
		else
			Local_u8ErrorState = NOTOK;
    3f76:	81 e0       	ldi	r24, 0x01	; 1
    3f78:	8d 8f       	std	Y+29, r24	; 0x1d
    3f7a:	c1 c0       	rjmp	.+386    	; 0x40fe <SW_u8GetState+0x33a>
	}
	else if(Copy_SW->Pulltype == SW_PULL_DOWN)
    3f7c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3f7e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3f80:	82 81       	ldd	r24, Z+2	; 0x02
    3f82:	81 30       	cpi	r24, 0x01	; 1
    3f84:	09 f0       	breq	.+2      	; 0x3f88 <SW_u8GetState+0x1c4>
    3f86:	b9 c0       	rjmp	.+370    	; 0x40fa <SW_u8GetState+0x336>
	{

		if(Copy_SW->SelfLockType == SW_SELF_LOCK)
    3f88:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3f8a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3f8c:	83 81       	ldd	r24, Z+3	; 0x03
    3f8e:	81 30       	cpi	r24, 0x01	; 1
    3f90:	09 f0       	breq	.+2      	; 0x3f94 <SW_u8GetState+0x1d0>
    3f92:	97 c0       	rjmp	.+302    	; 0x40c2 <SW_u8GetState+0x2fe>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    3f94:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3f96:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3f98:	80 81       	ld	r24, Z
    3f9a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3f9c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3f9e:	91 81       	ldd	r25, Z+1	; 0x01
    3fa0:	2c ea       	ldi	r18, 0xAC	; 172
    3fa2:	31 e0       	ldi	r19, 0x01	; 1
    3fa4:	69 2f       	mov	r22, r25
    3fa6:	a9 01       	movw	r20, r18
    3fa8:	0e 94 b1 11 	call	0x2362	; 0x2362 <DIO_u8GetPinValue>
			if(Local_u8SwState == DIO_PIN_HIGH)
    3fac:	80 91 ac 01 	lds	r24, 0x01AC
    3fb0:	81 30       	cpi	r24, 0x01	; 1
    3fb2:	09 f0       	breq	.+2      	; 0x3fb6 <SW_u8GetState+0x1f2>
    3fb4:	a4 c0       	rjmp	.+328    	; 0x40fe <SW_u8GetState+0x33a>
    3fb6:	80 e0       	ldi	r24, 0x00	; 0
    3fb8:	90 e0       	ldi	r25, 0x00	; 0
    3fba:	a6 e1       	ldi	r26, 0x16	; 22
    3fbc:	b3 e4       	ldi	r27, 0x43	; 67
    3fbe:	8b 87       	std	Y+11, r24	; 0x0b
    3fc0:	9c 87       	std	Y+12, r25	; 0x0c
    3fc2:	ad 87       	std	Y+13, r26	; 0x0d
    3fc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fca:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fce:	20 e0       	ldi	r18, 0x00	; 0
    3fd0:	30 e0       	ldi	r19, 0x00	; 0
    3fd2:	4a ef       	ldi	r20, 0xFA	; 250
    3fd4:	54 e4       	ldi	r21, 0x44	; 68
    3fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fda:	dc 01       	movw	r26, r24
    3fdc:	cb 01       	movw	r24, r22
    3fde:	8f 83       	std	Y+7, r24	; 0x07
    3fe0:	98 87       	std	Y+8, r25	; 0x08
    3fe2:	a9 87       	std	Y+9, r26	; 0x09
    3fe4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3fe6:	6f 81       	ldd	r22, Y+7	; 0x07
    3fe8:	78 85       	ldd	r23, Y+8	; 0x08
    3fea:	89 85       	ldd	r24, Y+9	; 0x09
    3fec:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fee:	20 e0       	ldi	r18, 0x00	; 0
    3ff0:	30 e0       	ldi	r19, 0x00	; 0
    3ff2:	40 e8       	ldi	r20, 0x80	; 128
    3ff4:	5f e3       	ldi	r21, 0x3F	; 63
    3ff6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ffa:	88 23       	and	r24, r24
    3ffc:	2c f4       	brge	.+10     	; 0x4008 <SW_u8GetState+0x244>
		__ticks = 1;
    3ffe:	81 e0       	ldi	r24, 0x01	; 1
    4000:	90 e0       	ldi	r25, 0x00	; 0
    4002:	9e 83       	std	Y+6, r25	; 0x06
    4004:	8d 83       	std	Y+5, r24	; 0x05
    4006:	3f c0       	rjmp	.+126    	; 0x4086 <SW_u8GetState+0x2c2>
	else if (__tmp > 65535)
    4008:	6f 81       	ldd	r22, Y+7	; 0x07
    400a:	78 85       	ldd	r23, Y+8	; 0x08
    400c:	89 85       	ldd	r24, Y+9	; 0x09
    400e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4010:	20 e0       	ldi	r18, 0x00	; 0
    4012:	3f ef       	ldi	r19, 0xFF	; 255
    4014:	4f e7       	ldi	r20, 0x7F	; 127
    4016:	57 e4       	ldi	r21, 0x47	; 71
    4018:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    401c:	18 16       	cp	r1, r24
    401e:	4c f5       	brge	.+82     	; 0x4072 <SW_u8GetState+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4020:	6b 85       	ldd	r22, Y+11	; 0x0b
    4022:	7c 85       	ldd	r23, Y+12	; 0x0c
    4024:	8d 85       	ldd	r24, Y+13	; 0x0d
    4026:	9e 85       	ldd	r25, Y+14	; 0x0e
    4028:	20 e0       	ldi	r18, 0x00	; 0
    402a:	30 e0       	ldi	r19, 0x00	; 0
    402c:	40 e2       	ldi	r20, 0x20	; 32
    402e:	51 e4       	ldi	r21, 0x41	; 65
    4030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4034:	dc 01       	movw	r26, r24
    4036:	cb 01       	movw	r24, r22
    4038:	bc 01       	movw	r22, r24
    403a:	cd 01       	movw	r24, r26
    403c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4040:	dc 01       	movw	r26, r24
    4042:	cb 01       	movw	r24, r22
    4044:	9e 83       	std	Y+6, r25	; 0x06
    4046:	8d 83       	std	Y+5, r24	; 0x05
    4048:	0f c0       	rjmp	.+30     	; 0x4068 <SW_u8GetState+0x2a4>
    404a:	88 ec       	ldi	r24, 0xC8	; 200
    404c:	90 e0       	ldi	r25, 0x00	; 0
    404e:	9c 83       	std	Y+4, r25	; 0x04
    4050:	8b 83       	std	Y+3, r24	; 0x03
    4052:	8b 81       	ldd	r24, Y+3	; 0x03
    4054:	9c 81       	ldd	r25, Y+4	; 0x04
    4056:	01 97       	sbiw	r24, 0x01	; 1
    4058:	f1 f7       	brne	.-4      	; 0x4056 <SW_u8GetState+0x292>
    405a:	9c 83       	std	Y+4, r25	; 0x04
    405c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    405e:	8d 81       	ldd	r24, Y+5	; 0x05
    4060:	9e 81       	ldd	r25, Y+6	; 0x06
    4062:	01 97       	sbiw	r24, 0x01	; 1
    4064:	9e 83       	std	Y+6, r25	; 0x06
    4066:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4068:	8d 81       	ldd	r24, Y+5	; 0x05
    406a:	9e 81       	ldd	r25, Y+6	; 0x06
    406c:	00 97       	sbiw	r24, 0x00	; 0
    406e:	69 f7       	brne	.-38     	; 0x404a <SW_u8GetState+0x286>
    4070:	14 c0       	rjmp	.+40     	; 0x409a <SW_u8GetState+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4072:	6f 81       	ldd	r22, Y+7	; 0x07
    4074:	78 85       	ldd	r23, Y+8	; 0x08
    4076:	89 85       	ldd	r24, Y+9	; 0x09
    4078:	9a 85       	ldd	r25, Y+10	; 0x0a
    407a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    407e:	dc 01       	movw	r26, r24
    4080:	cb 01       	movw	r24, r22
    4082:	9e 83       	std	Y+6, r25	; 0x06
    4084:	8d 83       	std	Y+5, r24	; 0x05
    4086:	8d 81       	ldd	r24, Y+5	; 0x05
    4088:	9e 81       	ldd	r25, Y+6	; 0x06
    408a:	9a 83       	std	Y+2, r25	; 0x02
    408c:	89 83       	std	Y+1, r24	; 0x01
    408e:	89 81       	ldd	r24, Y+1	; 0x01
    4090:	9a 81       	ldd	r25, Y+2	; 0x02
    4092:	01 97       	sbiw	r24, 0x01	; 1
    4094:	f1 f7       	brne	.-4      	; 0x4092 <SW_u8GetState+0x2ce>
    4096:	9a 83       	std	Y+2, r25	; 0x02
    4098:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(150);
				DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    409a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    409c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    409e:	80 81       	ld	r24, Z
    40a0:	ee 8d       	ldd	r30, Y+30	; 0x1e
    40a2:	ff 8d       	ldd	r31, Y+31	; 0x1f
    40a4:	91 81       	ldd	r25, Z+1	; 0x01
    40a6:	2c ea       	ldi	r18, 0xAC	; 172
    40a8:	31 e0       	ldi	r19, 0x01	; 1
    40aa:	69 2f       	mov	r22, r25
    40ac:	a9 01       	movw	r20, r18
    40ae:	0e 94 b1 11 	call	0x2362	; 0x2362 <DIO_u8GetPinValue>
				if(Local_u8SwState == DIO_PIN_HIGH )
    40b2:	80 91 ac 01 	lds	r24, 0x01AC
    40b6:	81 30       	cpi	r24, 0x01	; 1
    40b8:	11 f5       	brne	.+68     	; 0x40fe <SW_u8GetState+0x33a>
				{
					*Copy_u8State = SW_PRESSED;
    40ba:	e8 a1       	ldd	r30, Y+32	; 0x20
    40bc:	f9 a1       	ldd	r31, Y+33	; 0x21
    40be:	10 82       	st	Z, r1
    40c0:	1e c0       	rjmp	.+60     	; 0x40fe <SW_u8GetState+0x33a>
				}
			}
		}
		else if(Copy_SW->SelfLockType == SW_NOT_SELF_LOCK)
    40c2:	ee 8d       	ldd	r30, Y+30	; 0x1e
    40c4:	ff 8d       	ldd	r31, Y+31	; 0x1f
    40c6:	83 81       	ldd	r24, Z+3	; 0x03
    40c8:	88 23       	and	r24, r24
    40ca:	a1 f4       	brne	.+40     	; 0x40f4 <SW_u8GetState+0x330>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,Copy_u8State);
    40cc:	ee 8d       	ldd	r30, Y+30	; 0x1e
    40ce:	ff 8d       	ldd	r31, Y+31	; 0x1f
    40d0:	80 81       	ld	r24, Z
    40d2:	ee 8d       	ldd	r30, Y+30	; 0x1e
    40d4:	ff 8d       	ldd	r31, Y+31	; 0x1f
    40d6:	91 81       	ldd	r25, Z+1	; 0x01
    40d8:	28 a1       	ldd	r18, Y+32	; 0x20
    40da:	39 a1       	ldd	r19, Y+33	; 0x21
    40dc:	69 2f       	mov	r22, r25
    40de:	a9 01       	movw	r20, r18
    40e0:	0e 94 b1 11 	call	0x2362	; 0x2362 <DIO_u8GetPinValue>
			if (Local_u8SwState == DIO_PIN_HIGH)
    40e4:	80 91 ac 01 	lds	r24, 0x01AC
    40e8:	81 30       	cpi	r24, 0x01	; 1
    40ea:	49 f4       	brne	.+18     	; 0x40fe <SW_u8GetState+0x33a>
				*Copy_u8State = SW_PRESSED;
    40ec:	e8 a1       	ldd	r30, Y+32	; 0x20
    40ee:	f9 a1       	ldd	r31, Y+33	; 0x21
    40f0:	10 82       	st	Z, r1
    40f2:	05 c0       	rjmp	.+10     	; 0x40fe <SW_u8GetState+0x33a>
		}
		else
			Local_u8ErrorState = NOTOK;
    40f4:	81 e0       	ldi	r24, 0x01	; 1
    40f6:	8d 8f       	std	Y+29, r24	; 0x1d
    40f8:	02 c0       	rjmp	.+4      	; 0x40fe <SW_u8GetState+0x33a>
	}
	else
		Local_u8ErrorState = NOTOK;
    40fa:	81 e0       	ldi	r24, 0x01	; 1
    40fc:	8d 8f       	std	Y+29, r24	; 0x1d

	return Local_u8ErrorState;
    40fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    4100:	a1 96       	adiw	r28, 0x21	; 33
    4102:	0f b6       	in	r0, 0x3f	; 63
    4104:	f8 94       	cli
    4106:	de bf       	out	0x3e, r29	; 62
    4108:	0f be       	out	0x3f, r0	; 63
    410a:	cd bf       	out	0x3d, r28	; 61
    410c:	cf 91       	pop	r28
    410e:	df 91       	pop	r29
    4110:	08 95       	ret

00004112 <SW_u8GetState2>:
 * 			Copy_SW     : Full with Port,Pin,SelfType,switch function
 * 			Copy_u8State: return State of switch as (0) Pressed , (1) Not pressed
 * use for: Get Switch by Function Call Back i.e (switch function )
 *  */
u8 SW_u8GetState2(SW_t* Copy_SW,u8 *Copy_u8State)
{
    4112:	df 93       	push	r29
    4114:	cf 93       	push	r28
    4116:	00 d0       	rcall	.+0      	; 0x4118 <SW_u8GetState2+0x6>
    4118:	00 d0       	rcall	.+0      	; 0x411a <SW_u8GetState2+0x8>
    411a:	0f 92       	push	r0
    411c:	cd b7       	in	r28, 0x3d	; 61
    411e:	de b7       	in	r29, 0x3e	; 62
    4120:	9b 83       	std	Y+3, r25	; 0x03
    4122:	8a 83       	std	Y+2, r24	; 0x02
    4124:	7d 83       	std	Y+5, r23	; 0x05
    4126:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK;
    4128:	19 82       	std	Y+1, r1	; 0x01
	static u8 pressed_conf_level = 0;
	static u8 released_conf_level = 0;
	static u8 pressed = 0;
	*Copy_u8State = SW_NOT_PRESSED;
    412a:	ec 81       	ldd	r30, Y+4	; 0x04
    412c:	fd 81       	ldd	r31, Y+5	; 0x05
    412e:	81 e0       	ldi	r24, 0x01	; 1
    4130:	80 83       	st	Z, r24
	static u8 Local_u8SwState;
	if(Copy_SW->Pulltype == SW_PULL_UP)
    4132:	ea 81       	ldd	r30, Y+2	; 0x02
    4134:	fb 81       	ldd	r31, Y+3	; 0x03
    4136:	82 81       	ldd	r24, Z+2	; 0x02
    4138:	88 23       	and	r24, r24
    413a:	09 f0       	breq	.+2      	; 0x413e <SW_u8GetState2+0x2c>
    413c:	76 c0       	rjmp	.+236    	; 0x422a <SW_u8GetState2+0x118>
	{
		pressed = 0;
    413e:	10 92 ae 01 	sts	0x01AE, r1
		if(Copy_SW->SelfLockType == SW_SELF_LOCK)
    4142:	ea 81       	ldd	r30, Y+2	; 0x02
    4144:	fb 81       	ldd	r31, Y+3	; 0x03
    4146:	83 81       	ldd	r24, Z+3	; 0x03
    4148:	81 30       	cpi	r24, 0x01	; 1
    414a:	09 f0       	breq	.+2      	; 0x414e <SW_u8GetState2+0x3c>
    414c:	4d c0       	rjmp	.+154    	; 0x41e8 <SW_u8GetState2+0xd6>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    414e:	ea 81       	ldd	r30, Y+2	; 0x02
    4150:	fb 81       	ldd	r31, Y+3	; 0x03
    4152:	80 81       	ld	r24, Z
    4154:	ea 81       	ldd	r30, Y+2	; 0x02
    4156:	fb 81       	ldd	r31, Y+3	; 0x03
    4158:	91 81       	ldd	r25, Z+1	; 0x01
    415a:	2d ea       	ldi	r18, 0xAD	; 173
    415c:	31 e0       	ldi	r19, 0x01	; 1
    415e:	69 2f       	mov	r22, r25
    4160:	a9 01       	movw	r20, r18
    4162:	0e 94 b1 11 	call	0x2362	; 0x2362 <DIO_u8GetPinValue>
			if(Local_u8SwState == DIO_PIN_LOW)
    4166:	80 91 ad 01 	lds	r24, 0x01AD
    416a:	88 23       	and	r24, r24
    416c:	09 f0       	breq	.+2      	; 0x4170 <SW_u8GetState2+0x5e>
    416e:	c4 c0       	rjmp	.+392    	; 0x42f8 <SW_u8GetState2+0x1e6>
			{
				DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    4170:	ea 81       	ldd	r30, Y+2	; 0x02
    4172:	fb 81       	ldd	r31, Y+3	; 0x03
    4174:	80 81       	ld	r24, Z
    4176:	ea 81       	ldd	r30, Y+2	; 0x02
    4178:	fb 81       	ldd	r31, Y+3	; 0x03
    417a:	91 81       	ldd	r25, Z+1	; 0x01
    417c:	2d ea       	ldi	r18, 0xAD	; 173
    417e:	31 e0       	ldi	r19, 0x01	; 1
    4180:	69 2f       	mov	r22, r25
    4182:	a9 01       	movw	r20, r18
    4184:	0e 94 b1 11 	call	0x2362	; 0x2362 <DIO_u8GetPinValue>
				if(Local_u8SwState == DIO_PIN_LOW)
    4188:	80 91 ad 01 	lds	r24, 0x01AD
    418c:	88 23       	and	r24, r24
    418e:	09 f0       	breq	.+2      	; 0x4192 <SW_u8GetState2+0x80>
    4190:	b3 c0       	rjmp	.+358    	; 0x42f8 <SW_u8GetState2+0x1e6>
				{
					pressed_conf_level++;
    4192:	80 91 b0 01 	lds	r24, 0x01B0
    4196:	8f 5f       	subi	r24, 0xFF	; 255
    4198:	80 93 b0 01 	sts	0x01B0, r24
					if(pressed_conf_level>20)
    419c:	80 91 b0 01 	lds	r24, 0x01B0
    41a0:	85 31       	cpi	r24, 0x15	; 21
    41a2:	98 f0       	brcs	.+38     	; 0x41ca <SW_u8GetState2+0xb8>
					{
						if(pressed==0)
    41a4:	80 91 ae 01 	lds	r24, 0x01AE
    41a8:	88 23       	and	r24, r24
    41aa:	61 f4       	brne	.+24     	; 0x41c4 <SW_u8GetState2+0xb2>
						{
							*Copy_u8State = SW_PRESSED;
    41ac:	ec 81       	ldd	r30, Y+4	; 0x04
    41ae:	fd 81       	ldd	r31, Y+5	; 0x05
    41b0:	10 82       	st	Z, r1
							Copy_SW->Notification();
    41b2:	ea 81       	ldd	r30, Y+2	; 0x02
    41b4:	fb 81       	ldd	r31, Y+3	; 0x03
    41b6:	04 80       	ldd	r0, Z+4	; 0x04
    41b8:	f5 81       	ldd	r31, Z+5	; 0x05
    41ba:	e0 2d       	mov	r30, r0
    41bc:	09 95       	icall
							pressed=1;
    41be:	81 e0       	ldi	r24, 0x01	; 1
    41c0:	80 93 ae 01 	sts	0x01AE, r24
						}
						pressed_conf_level=0;
    41c4:	10 92 b0 01 	sts	0x01B0, r1
    41c8:	97 c0       	rjmp	.+302    	; 0x42f8 <SW_u8GetState2+0x1e6>
					}
					else
					{
						released_conf_level++;
    41ca:	80 91 af 01 	lds	r24, 0x01AF
    41ce:	8f 5f       	subi	r24, 0xFF	; 255
    41d0:	80 93 af 01 	sts	0x01AF, r24
						if(released_conf_level>20)
    41d4:	80 91 af 01 	lds	r24, 0x01AF
    41d8:	85 31       	cpi	r24, 0x15	; 21
    41da:	08 f4       	brcc	.+2      	; 0x41de <SW_u8GetState2+0xcc>
    41dc:	8d c0       	rjmp	.+282    	; 0x42f8 <SW_u8GetState2+0x1e6>
						{
							pressed = 0;
    41de:	10 92 ae 01 	sts	0x01AE, r1
							released_conf_level = 0;
    41e2:	10 92 af 01 	sts	0x01AF, r1
    41e6:	88 c0       	rjmp	.+272    	; 0x42f8 <SW_u8GetState2+0x1e6>
						}
					}
				}
			}
		}
		else if(Copy_SW->SelfLockType == SW_NOT_SELF_LOCK)
    41e8:	ea 81       	ldd	r30, Y+2	; 0x02
    41ea:	fb 81       	ldd	r31, Y+3	; 0x03
    41ec:	83 81       	ldd	r24, Z+3	; 0x03
    41ee:	88 23       	and	r24, r24
    41f0:	c9 f4       	brne	.+50     	; 0x4224 <SW_u8GetState2+0x112>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,Copy_u8State);
    41f2:	ea 81       	ldd	r30, Y+2	; 0x02
    41f4:	fb 81       	ldd	r31, Y+3	; 0x03
    41f6:	80 81       	ld	r24, Z
    41f8:	ea 81       	ldd	r30, Y+2	; 0x02
    41fa:	fb 81       	ldd	r31, Y+3	; 0x03
    41fc:	91 81       	ldd	r25, Z+1	; 0x01
    41fe:	2c 81       	ldd	r18, Y+4	; 0x04
    4200:	3d 81       	ldd	r19, Y+5	; 0x05
    4202:	69 2f       	mov	r22, r25
    4204:	a9 01       	movw	r20, r18
    4206:	0e 94 b1 11 	call	0x2362	; 0x2362 <DIO_u8GetPinValue>
			if (Local_u8SwState == DIO_PIN_LOW)
    420a:	80 91 ad 01 	lds	r24, 0x01AD
    420e:	88 23       	and	r24, r24
    4210:	21 f4       	brne	.+8      	; 0x421a <SW_u8GetState2+0x108>
				*Copy_u8State = SW_PRESSED;
    4212:	ec 81       	ldd	r30, Y+4	; 0x04
    4214:	fd 81       	ldd	r31, Y+5	; 0x05
    4216:	10 82       	st	Z, r1
    4218:	6f c0       	rjmp	.+222    	; 0x42f8 <SW_u8GetState2+0x1e6>
			else
				*Copy_u8State = SW_NOT_PRESSED;
    421a:	ec 81       	ldd	r30, Y+4	; 0x04
    421c:	fd 81       	ldd	r31, Y+5	; 0x05
    421e:	81 e0       	ldi	r24, 0x01	; 1
    4220:	80 83       	st	Z, r24
    4222:	6a c0       	rjmp	.+212    	; 0x42f8 <SW_u8GetState2+0x1e6>
		}
		else
			Local_u8ErrorState = NOTOK;
    4224:	81 e0       	ldi	r24, 0x01	; 1
    4226:	89 83       	std	Y+1, r24	; 0x01
    4228:	67 c0       	rjmp	.+206    	; 0x42f8 <SW_u8GetState2+0x1e6>
	}
	else if(Copy_SW->Pulltype == SW_PULL_DOWN)
    422a:	ea 81       	ldd	r30, Y+2	; 0x02
    422c:	fb 81       	ldd	r31, Y+3	; 0x03
    422e:	82 81       	ldd	r24, Z+2	; 0x02
    4230:	81 30       	cpi	r24, 0x01	; 1
    4232:	09 f0       	breq	.+2      	; 0x4236 <SW_u8GetState2+0x124>
    4234:	5f c0       	rjmp	.+190    	; 0x42f4 <SW_u8GetState2+0x1e2>
	{
		pressed = 1;
    4236:	81 e0       	ldi	r24, 0x01	; 1
    4238:	80 93 ae 01 	sts	0x01AE, r24
		if(Copy_SW->SelfLockType == SW_SELF_LOCK)
    423c:	ea 81       	ldd	r30, Y+2	; 0x02
    423e:	fb 81       	ldd	r31, Y+3	; 0x03
    4240:	83 81       	ldd	r24, Z+3	; 0x03
    4242:	81 30       	cpi	r24, 0x01	; 1
    4244:	d9 f5       	brne	.+118    	; 0x42bc <SW_u8GetState2+0x1aa>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    4246:	ea 81       	ldd	r30, Y+2	; 0x02
    4248:	fb 81       	ldd	r31, Y+3	; 0x03
    424a:	80 81       	ld	r24, Z
    424c:	ea 81       	ldd	r30, Y+2	; 0x02
    424e:	fb 81       	ldd	r31, Y+3	; 0x03
    4250:	91 81       	ldd	r25, Z+1	; 0x01
    4252:	2d ea       	ldi	r18, 0xAD	; 173
    4254:	31 e0       	ldi	r19, 0x01	; 1
    4256:	69 2f       	mov	r22, r25
    4258:	a9 01       	movw	r20, r18
    425a:	0e 94 b1 11 	call	0x2362	; 0x2362 <DIO_u8GetPinValue>
			if(Local_u8SwState == DIO_PIN_HIGH)
    425e:	80 91 ad 01 	lds	r24, 0x01AD
    4262:	81 30       	cpi	r24, 0x01	; 1
    4264:	09 f0       	breq	.+2      	; 0x4268 <SW_u8GetState2+0x156>
    4266:	48 c0       	rjmp	.+144    	; 0x42f8 <SW_u8GetState2+0x1e6>
			{
				pressed_conf_level++;
    4268:	80 91 b0 01 	lds	r24, 0x01B0
    426c:	8f 5f       	subi	r24, 0xFF	; 255
    426e:	80 93 b0 01 	sts	0x01B0, r24
				if(pressed_conf_level>20)
    4272:	80 91 b0 01 	lds	r24, 0x01B0
    4276:	85 31       	cpi	r24, 0x15	; 21
    4278:	90 f0       	brcs	.+36     	; 0x429e <SW_u8GetState2+0x18c>
				{
					if(pressed==1)
    427a:	80 91 ae 01 	lds	r24, 0x01AE
    427e:	81 30       	cpi	r24, 0x01	; 1
    4280:	59 f4       	brne	.+22     	; 0x4298 <SW_u8GetState2+0x186>
					{
						*Copy_u8State = SW_PRESSED;
    4282:	ec 81       	ldd	r30, Y+4	; 0x04
    4284:	fd 81       	ldd	r31, Y+5	; 0x05
    4286:	10 82       	st	Z, r1
						Copy_SW->Notification();
    4288:	ea 81       	ldd	r30, Y+2	; 0x02
    428a:	fb 81       	ldd	r31, Y+3	; 0x03
    428c:	04 80       	ldd	r0, Z+4	; 0x04
    428e:	f5 81       	ldd	r31, Z+5	; 0x05
    4290:	e0 2d       	mov	r30, r0
    4292:	09 95       	icall
						pressed=0;
    4294:	10 92 ae 01 	sts	0x01AE, r1
					}
					pressed_conf_level=0;
    4298:	10 92 b0 01 	sts	0x01B0, r1
    429c:	2d c0       	rjmp	.+90     	; 0x42f8 <SW_u8GetState2+0x1e6>
				}
				else
				{
					released_conf_level++;
    429e:	80 91 af 01 	lds	r24, 0x01AF
    42a2:	8f 5f       	subi	r24, 0xFF	; 255
    42a4:	80 93 af 01 	sts	0x01AF, r24
					if(released_conf_level>20)
    42a8:	80 91 af 01 	lds	r24, 0x01AF
    42ac:	85 31       	cpi	r24, 0x15	; 21
    42ae:	20 f1       	brcs	.+72     	; 0x42f8 <SW_u8GetState2+0x1e6>
					{
						pressed = 1;
    42b0:	81 e0       	ldi	r24, 0x01	; 1
    42b2:	80 93 ae 01 	sts	0x01AE, r24
						released_conf_level = 0;
    42b6:	10 92 af 01 	sts	0x01AF, r1
    42ba:	1e c0       	rjmp	.+60     	; 0x42f8 <SW_u8GetState2+0x1e6>
					}
				}
			}
		}
		else if(Copy_SW->SelfLockType == SW_NOT_SELF_LOCK)
    42bc:	ea 81       	ldd	r30, Y+2	; 0x02
    42be:	fb 81       	ldd	r31, Y+3	; 0x03
    42c0:	83 81       	ldd	r24, Z+3	; 0x03
    42c2:	88 23       	and	r24, r24
    42c4:	a1 f4       	brne	.+40     	; 0x42ee <SW_u8GetState2+0x1dc>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,Copy_u8State);
    42c6:	ea 81       	ldd	r30, Y+2	; 0x02
    42c8:	fb 81       	ldd	r31, Y+3	; 0x03
    42ca:	80 81       	ld	r24, Z
    42cc:	ea 81       	ldd	r30, Y+2	; 0x02
    42ce:	fb 81       	ldd	r31, Y+3	; 0x03
    42d0:	91 81       	ldd	r25, Z+1	; 0x01
    42d2:	2c 81       	ldd	r18, Y+4	; 0x04
    42d4:	3d 81       	ldd	r19, Y+5	; 0x05
    42d6:	69 2f       	mov	r22, r25
    42d8:	a9 01       	movw	r20, r18
    42da:	0e 94 b1 11 	call	0x2362	; 0x2362 <DIO_u8GetPinValue>
			if (Local_u8SwState == DIO_PIN_HIGH)
    42de:	80 91 ad 01 	lds	r24, 0x01AD
    42e2:	81 30       	cpi	r24, 0x01	; 1
    42e4:	49 f4       	brne	.+18     	; 0x42f8 <SW_u8GetState2+0x1e6>
				*Copy_u8State = SW_PRESSED;
    42e6:	ec 81       	ldd	r30, Y+4	; 0x04
    42e8:	fd 81       	ldd	r31, Y+5	; 0x05
    42ea:	10 82       	st	Z, r1
    42ec:	05 c0       	rjmp	.+10     	; 0x42f8 <SW_u8GetState2+0x1e6>
		}
		else
			Local_u8ErrorState = NOTOK;
    42ee:	81 e0       	ldi	r24, 0x01	; 1
    42f0:	89 83       	std	Y+1, r24	; 0x01
    42f2:	02 c0       	rjmp	.+4      	; 0x42f8 <SW_u8GetState2+0x1e6>
	}
	else
		Local_u8ErrorState = NOTOK;
    42f4:	81 e0       	ldi	r24, 0x01	; 1
    42f6:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    42f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    42fa:	0f 90       	pop	r0
    42fc:	0f 90       	pop	r0
    42fe:	0f 90       	pop	r0
    4300:	0f 90       	pop	r0
    4302:	0f 90       	pop	r0
    4304:	cf 91       	pop	r28
    4306:	df 91       	pop	r29
    4308:	08 95       	ret

0000430a <main>:
u32 AppMap(u32 InMin,u32 InMax,u32 OutMin,u32 OutMax,u32 InVal);

void DispNum();

void main()
{
    430a:	df 93       	push	r29
    430c:	cf 93       	push	r28
    430e:	cd b7       	in	r28, 0x3d	; 61
    4310:	de b7       	in	r29, 0x3e	; 62
    4312:	6b 97       	sbiw	r28, 0x1b	; 27
    4314:	0f b6       	in	r0, 0x3f	; 63
    4316:	f8 94       	cli
    4318:	de bf       	out	0x3e, r29	; 62
    431a:	0f be       	out	0x3f, r0	; 63
    431c:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
    431e:	0e 94 d6 16 	call	0x2dac	; 0x2dac <PORT_voidInit>
	CLCD_voidInit();
    4322:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <CLCD_voidInit>
	ADC_voidInit();
    4326:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_voidInit>
	GIE_voidEnable();
    432a:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <GIE_voidEnable>
	ADC_Chain adc1 = {ChannelId,5,NotifyFunc,ReadSensors};
    432e:	ce 01       	movw	r24, r28
    4330:	0f 96       	adiw	r24, 0x0f	; 15
    4332:	98 8f       	std	Y+24, r25	; 0x18
    4334:	8f 8b       	std	Y+23, r24	; 0x17
    4336:	ef e8       	ldi	r30, 0x8F	; 143
    4338:	f1 e0       	ldi	r31, 0x01	; 1
    433a:	fa 8f       	std	Y+26, r31	; 0x1a
    433c:	e9 8f       	std	Y+25, r30	; 0x19
    433e:	f7 e0       	ldi	r31, 0x07	; 7
    4340:	fb 8f       	std	Y+27, r31	; 0x1b
    4342:	e9 8d       	ldd	r30, Y+25	; 0x19
    4344:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4346:	00 80       	ld	r0, Z
    4348:	89 8d       	ldd	r24, Y+25	; 0x19
    434a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    434c:	01 96       	adiw	r24, 0x01	; 1
    434e:	9a 8f       	std	Y+26, r25	; 0x1a
    4350:	89 8f       	std	Y+25, r24	; 0x19
    4352:	ef 89       	ldd	r30, Y+23	; 0x17
    4354:	f8 8d       	ldd	r31, Y+24	; 0x18
    4356:	00 82       	st	Z, r0
    4358:	8f 89       	ldd	r24, Y+23	; 0x17
    435a:	98 8d       	ldd	r25, Y+24	; 0x18
    435c:	01 96       	adiw	r24, 0x01	; 1
    435e:	98 8f       	std	Y+24, r25	; 0x18
    4360:	8f 8b       	std	Y+23, r24	; 0x17
    4362:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4364:	91 50       	subi	r25, 0x01	; 1
    4366:	9b 8f       	std	Y+27, r25	; 0x1b
    4368:	eb 8d       	ldd	r30, Y+27	; 0x1b
    436a:	ee 23       	and	r30, r30
    436c:	51 f7       	brne	.-44     	; 0x4342 <main+0x38>
	u8 state = 0;
    436e:	1e 8a       	std	Y+22, r1	; 0x16

	while(1)
	{
		ADC_u8StartChainConvAsynch(&adc1);
    4370:	ce 01       	movw	r24, r28
    4372:	0f 96       	adiw	r24, 0x0f	; 15
    4374:	0e 94 61 08 	call	0x10c2	; 0x10c2 <ADC_u8StartChainConvAsynch>
		DIO_u8GetPinValue(DIO_PORTA,DIO_PIN7,&state);
    4378:	9e 01       	movw	r18, r28
    437a:	2a 5e       	subi	r18, 0xEA	; 234
    437c:	3f 4f       	sbci	r19, 0xFF	; 255
    437e:	80 e0       	ldi	r24, 0x00	; 0
    4380:	67 e0       	ldi	r22, 0x07	; 7
    4382:	a9 01       	movw	r20, r18
    4384:	0e 94 b1 11 	call	0x2362	; 0x2362 <DIO_u8GetPinValue>
		DispNum();
    4388:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <DispNum>
		if(state == 0)
    438c:	8e 89       	ldd	r24, Y+22	; 0x16
    438e:	88 23       	and	r24, r24
    4390:	79 f7       	brne	.-34     	; 0x4370 <main+0x66>
    4392:	80 e0       	ldi	r24, 0x00	; 0
    4394:	90 e0       	ldi	r25, 0x00	; 0
    4396:	a8 e4       	ldi	r26, 0x48	; 72
    4398:	b3 e4       	ldi	r27, 0x43	; 67
    439a:	8b 87       	std	Y+11, r24	; 0x0b
    439c:	9c 87       	std	Y+12, r25	; 0x0c
    439e:	ad 87       	std	Y+13, r26	; 0x0d
    43a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    43a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    43a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    43a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    43aa:	20 e0       	ldi	r18, 0x00	; 0
    43ac:	30 e0       	ldi	r19, 0x00	; 0
    43ae:	4a ef       	ldi	r20, 0xFA	; 250
    43b0:	54 e4       	ldi	r21, 0x44	; 68
    43b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43b6:	dc 01       	movw	r26, r24
    43b8:	cb 01       	movw	r24, r22
    43ba:	8f 83       	std	Y+7, r24	; 0x07
    43bc:	98 87       	std	Y+8, r25	; 0x08
    43be:	a9 87       	std	Y+9, r26	; 0x09
    43c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    43c2:	6f 81       	ldd	r22, Y+7	; 0x07
    43c4:	78 85       	ldd	r23, Y+8	; 0x08
    43c6:	89 85       	ldd	r24, Y+9	; 0x09
    43c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    43ca:	20 e0       	ldi	r18, 0x00	; 0
    43cc:	30 e0       	ldi	r19, 0x00	; 0
    43ce:	40 e8       	ldi	r20, 0x80	; 128
    43d0:	5f e3       	ldi	r21, 0x3F	; 63
    43d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43d6:	88 23       	and	r24, r24
    43d8:	2c f4       	brge	.+10     	; 0x43e4 <main+0xda>
		__ticks = 1;
    43da:	81 e0       	ldi	r24, 0x01	; 1
    43dc:	90 e0       	ldi	r25, 0x00	; 0
    43de:	9e 83       	std	Y+6, r25	; 0x06
    43e0:	8d 83       	std	Y+5, r24	; 0x05
    43e2:	3f c0       	rjmp	.+126    	; 0x4462 <main+0x158>
	else if (__tmp > 65535)
    43e4:	6f 81       	ldd	r22, Y+7	; 0x07
    43e6:	78 85       	ldd	r23, Y+8	; 0x08
    43e8:	89 85       	ldd	r24, Y+9	; 0x09
    43ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    43ec:	20 e0       	ldi	r18, 0x00	; 0
    43ee:	3f ef       	ldi	r19, 0xFF	; 255
    43f0:	4f e7       	ldi	r20, 0x7F	; 127
    43f2:	57 e4       	ldi	r21, 0x47	; 71
    43f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43f8:	18 16       	cp	r1, r24
    43fa:	4c f5       	brge	.+82     	; 0x444e <main+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    43fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    4400:	8d 85       	ldd	r24, Y+13	; 0x0d
    4402:	9e 85       	ldd	r25, Y+14	; 0x0e
    4404:	20 e0       	ldi	r18, 0x00	; 0
    4406:	30 e0       	ldi	r19, 0x00	; 0
    4408:	40 e2       	ldi	r20, 0x20	; 32
    440a:	51 e4       	ldi	r21, 0x41	; 65
    440c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4410:	dc 01       	movw	r26, r24
    4412:	cb 01       	movw	r24, r22
    4414:	bc 01       	movw	r22, r24
    4416:	cd 01       	movw	r24, r26
    4418:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    441c:	dc 01       	movw	r26, r24
    441e:	cb 01       	movw	r24, r22
    4420:	9e 83       	std	Y+6, r25	; 0x06
    4422:	8d 83       	std	Y+5, r24	; 0x05
    4424:	0f c0       	rjmp	.+30     	; 0x4444 <main+0x13a>
    4426:	88 ec       	ldi	r24, 0xC8	; 200
    4428:	90 e0       	ldi	r25, 0x00	; 0
    442a:	9c 83       	std	Y+4, r25	; 0x04
    442c:	8b 83       	std	Y+3, r24	; 0x03
    442e:	8b 81       	ldd	r24, Y+3	; 0x03
    4430:	9c 81       	ldd	r25, Y+4	; 0x04
    4432:	01 97       	sbiw	r24, 0x01	; 1
    4434:	f1 f7       	brne	.-4      	; 0x4432 <main+0x128>
    4436:	9c 83       	std	Y+4, r25	; 0x04
    4438:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    443a:	8d 81       	ldd	r24, Y+5	; 0x05
    443c:	9e 81       	ldd	r25, Y+6	; 0x06
    443e:	01 97       	sbiw	r24, 0x01	; 1
    4440:	9e 83       	std	Y+6, r25	; 0x06
    4442:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4444:	8d 81       	ldd	r24, Y+5	; 0x05
    4446:	9e 81       	ldd	r25, Y+6	; 0x06
    4448:	00 97       	sbiw	r24, 0x00	; 0
    444a:	69 f7       	brne	.-38     	; 0x4426 <main+0x11c>
    444c:	14 c0       	rjmp	.+40     	; 0x4476 <main+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    444e:	6f 81       	ldd	r22, Y+7	; 0x07
    4450:	78 85       	ldd	r23, Y+8	; 0x08
    4452:	89 85       	ldd	r24, Y+9	; 0x09
    4454:	9a 85       	ldd	r25, Y+10	; 0x0a
    4456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    445a:	dc 01       	movw	r26, r24
    445c:	cb 01       	movw	r24, r22
    445e:	9e 83       	std	Y+6, r25	; 0x06
    4460:	8d 83       	std	Y+5, r24	; 0x05
    4462:	8d 81       	ldd	r24, Y+5	; 0x05
    4464:	9e 81       	ldd	r25, Y+6	; 0x06
    4466:	9a 83       	std	Y+2, r25	; 0x02
    4468:	89 83       	std	Y+1, r24	; 0x01
    446a:	89 81       	ldd	r24, Y+1	; 0x01
    446c:	9a 81       	ldd	r25, Y+2	; 0x02
    446e:	01 97       	sbiw	r24, 0x01	; 1
    4470:	f1 f7       	brne	.-4      	; 0x446e <main+0x164>
    4472:	9a 83       	std	Y+2, r25	; 0x02
    4474:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(200);
			SignCheck();
    4476:	0e 94 3e 22 	call	0x447c	; 0x447c <SignCheck>
    447a:	7a cf       	rjmp	.-268    	; 0x4370 <main+0x66>

0000447c <SignCheck>:
	}

	while(1);
}
void SignCheck()
{
    447c:	df 93       	push	r29
    447e:	cf 93       	push	r28
    4480:	cd b7       	in	r28, 0x3d	; 61
    4482:	de b7       	in	r29, 0x3e	; 62
	static u8 count = 0;
	CLCD_voidGoToXY(1,count);
    4484:	90 91 b1 01 	lds	r25, 0x01B1
    4488:	81 e0       	ldi	r24, 0x01	; 1
    448a:	69 2f       	mov	r22, r25
    448c:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <CLCD_voidGoToXY>
	count++;
    4490:	80 91 b1 01 	lds	r24, 0x01B1
    4494:	8f 5f       	subi	r24, 0xFF	; 255
    4496:	80 93 b1 01 	sts	0x01B1, r24
	if((angle[4]==0)&&(angle[3]==0)&&(angle[2]==0)&&(angle[1]==0)&&(angle[0]==0))
    449a:	80 91 b6 01 	lds	r24, 0x01B6
    449e:	88 23       	and	r24, r24
    44a0:	89 f4       	brne	.+34     	; 0x44c4 <SignCheck+0x48>
    44a2:	80 91 b5 01 	lds	r24, 0x01B5
    44a6:	88 23       	and	r24, r24
    44a8:	69 f4       	brne	.+26     	; 0x44c4 <SignCheck+0x48>
    44aa:	80 91 b4 01 	lds	r24, 0x01B4
    44ae:	88 23       	and	r24, r24
    44b0:	49 f4       	brne	.+18     	; 0x44c4 <SignCheck+0x48>
    44b2:	80 91 b3 01 	lds	r24, 0x01B3
    44b6:	88 23       	and	r24, r24
    44b8:	29 f4       	brne	.+10     	; 0x44c4 <SignCheck+0x48>
    44ba:	80 91 b2 01 	lds	r24, 0x01B2
    44be:	88 23       	and	r24, r24
    44c0:	09 f4       	brne	.+2      	; 0x44c4 <SignCheck+0x48>
    44c2:	af c1       	rjmp	.+862    	; 0x4822 <SignCheck+0x3a6>
	{
		// Nothing
	}
	else if((angle[4]==90)&&(angle[3]==90)&&(angle[2]==90)&&(angle[1]==90)&&(angle[0]==0))
    44c4:	80 91 b6 01 	lds	r24, 0x01B6
    44c8:	8a 35       	cpi	r24, 0x5A	; 90
    44ca:	a1 f4       	brne	.+40     	; 0x44f4 <SignCheck+0x78>
    44cc:	80 91 b5 01 	lds	r24, 0x01B5
    44d0:	8a 35       	cpi	r24, 0x5A	; 90
    44d2:	81 f4       	brne	.+32     	; 0x44f4 <SignCheck+0x78>
    44d4:	80 91 b4 01 	lds	r24, 0x01B4
    44d8:	8a 35       	cpi	r24, 0x5A	; 90
    44da:	61 f4       	brne	.+24     	; 0x44f4 <SignCheck+0x78>
    44dc:	80 91 b3 01 	lds	r24, 0x01B3
    44e0:	8a 35       	cpi	r24, 0x5A	; 90
    44e2:	41 f4       	brne	.+16     	; 0x44f4 <SignCheck+0x78>
    44e4:	80 91 b2 01 	lds	r24, 0x01B2
    44e8:	88 23       	and	r24, r24
    44ea:	21 f4       	brne	.+8      	; 0x44f4 <SignCheck+0x78>
		CLCD_voidSendData('A');
    44ec:	81 e4       	ldi	r24, 0x41	; 65
    44ee:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <CLCD_voidSendData>
    44f2:	97 c1       	rjmp	.+814    	; 0x4822 <SignCheck+0x3a6>
	else if((angle[4]==0)&&(angle[3]==0)&&(angle[2]==0)&&(angle[1]==0)&&(angle[0]==90))
    44f4:	80 91 b6 01 	lds	r24, 0x01B6
    44f8:	88 23       	and	r24, r24
    44fa:	a1 f4       	brne	.+40     	; 0x4524 <SignCheck+0xa8>
    44fc:	80 91 b5 01 	lds	r24, 0x01B5
    4500:	88 23       	and	r24, r24
    4502:	81 f4       	brne	.+32     	; 0x4524 <SignCheck+0xa8>
    4504:	80 91 b4 01 	lds	r24, 0x01B4
    4508:	88 23       	and	r24, r24
    450a:	61 f4       	brne	.+24     	; 0x4524 <SignCheck+0xa8>
    450c:	80 91 b3 01 	lds	r24, 0x01B3
    4510:	88 23       	and	r24, r24
    4512:	41 f4       	brne	.+16     	; 0x4524 <SignCheck+0xa8>
    4514:	80 91 b2 01 	lds	r24, 0x01B2
    4518:	8a 35       	cpi	r24, 0x5A	; 90
    451a:	21 f4       	brne	.+8      	; 0x4524 <SignCheck+0xa8>
		CLCD_voidSendData('B');
    451c:	82 e4       	ldi	r24, 0x42	; 66
    451e:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <CLCD_voidSendData>
    4522:	7f c1       	rjmp	.+766    	; 0x4822 <SignCheck+0x3a6>
	else if((angle[4]==82)&&(angle[3]==82)&&(angle[2]==82)&&(angle[1]==82)&&(angle[0]==82))
    4524:	80 91 b6 01 	lds	r24, 0x01B6
    4528:	82 35       	cpi	r24, 0x52	; 82
    452a:	a1 f4       	brne	.+40     	; 0x4554 <SignCheck+0xd8>
    452c:	80 91 b5 01 	lds	r24, 0x01B5
    4530:	82 35       	cpi	r24, 0x52	; 82
    4532:	81 f4       	brne	.+32     	; 0x4554 <SignCheck+0xd8>
    4534:	80 91 b4 01 	lds	r24, 0x01B4
    4538:	82 35       	cpi	r24, 0x52	; 82
    453a:	61 f4       	brne	.+24     	; 0x4554 <SignCheck+0xd8>
    453c:	80 91 b3 01 	lds	r24, 0x01B3
    4540:	82 35       	cpi	r24, 0x52	; 82
    4542:	41 f4       	brne	.+16     	; 0x4554 <SignCheck+0xd8>
    4544:	80 91 b2 01 	lds	r24, 0x01B2
    4548:	82 35       	cpi	r24, 0x52	; 82
    454a:	21 f4       	brne	.+8      	; 0x4554 <SignCheck+0xd8>
		CLCD_voidSendData('C');
    454c:	83 e4       	ldi	r24, 0x43	; 67
    454e:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <CLCD_voidSendData>
    4552:	67 c1       	rjmp	.+718    	; 0x4822 <SignCheck+0x3a6>
	else if((angle[4]==90)&&(angle[3]==90)&&(angle[2]==77)&&(angle[1]==0)&&(angle[0]==77))
    4554:	80 91 b6 01 	lds	r24, 0x01B6
    4558:	8a 35       	cpi	r24, 0x5A	; 90
    455a:	a1 f4       	brne	.+40     	; 0x4584 <SignCheck+0x108>
    455c:	80 91 b5 01 	lds	r24, 0x01B5
    4560:	8a 35       	cpi	r24, 0x5A	; 90
    4562:	81 f4       	brne	.+32     	; 0x4584 <SignCheck+0x108>
    4564:	80 91 b4 01 	lds	r24, 0x01B4
    4568:	8d 34       	cpi	r24, 0x4D	; 77
    456a:	61 f4       	brne	.+24     	; 0x4584 <SignCheck+0x108>
    456c:	80 91 b3 01 	lds	r24, 0x01B3
    4570:	88 23       	and	r24, r24
    4572:	41 f4       	brne	.+16     	; 0x4584 <SignCheck+0x108>
    4574:	80 91 b2 01 	lds	r24, 0x01B2
    4578:	8d 34       	cpi	r24, 0x4D	; 77
    457a:	21 f4       	brne	.+8      	; 0x4584 <SignCheck+0x108>
		CLCD_voidSendData('D');
    457c:	84 e4       	ldi	r24, 0x44	; 68
    457e:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <CLCD_voidSendData>
    4582:	4f c1       	rjmp	.+670    	; 0x4822 <SignCheck+0x3a6>
	else if((angle[4]==45)&&(angle[3]==45)&&(angle[2]==45)&&(angle[1]==45)&&(angle[0]==45))
    4584:	80 91 b6 01 	lds	r24, 0x01B6
    4588:	8d 32       	cpi	r24, 0x2D	; 45
    458a:	a1 f4       	brne	.+40     	; 0x45b4 <SignCheck+0x138>
    458c:	80 91 b5 01 	lds	r24, 0x01B5
    4590:	8d 32       	cpi	r24, 0x2D	; 45
    4592:	81 f4       	brne	.+32     	; 0x45b4 <SignCheck+0x138>
    4594:	80 91 b4 01 	lds	r24, 0x01B4
    4598:	8d 32       	cpi	r24, 0x2D	; 45
    459a:	61 f4       	brne	.+24     	; 0x45b4 <SignCheck+0x138>
    459c:	80 91 b3 01 	lds	r24, 0x01B3
    45a0:	8d 32       	cpi	r24, 0x2D	; 45
    45a2:	41 f4       	brne	.+16     	; 0x45b4 <SignCheck+0x138>
    45a4:	80 91 b2 01 	lds	r24, 0x01B2
    45a8:	8d 32       	cpi	r24, 0x2D	; 45
    45aa:	21 f4       	brne	.+8      	; 0x45b4 <SignCheck+0x138>
		CLCD_voidSendData('E');
    45ac:	85 e4       	ldi	r24, 0x45	; 69
    45ae:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <CLCD_voidSendData>
    45b2:	37 c1       	rjmp	.+622    	; 0x4822 <SignCheck+0x3a6>
	else if((angle[4]==0)&&(angle[3]==0)&&(angle[2]==0)&&(angle[1]==77)&&(angle[0]==0))
    45b4:	80 91 b6 01 	lds	r24, 0x01B6
    45b8:	88 23       	and	r24, r24
    45ba:	a1 f4       	brne	.+40     	; 0x45e4 <SignCheck+0x168>
    45bc:	80 91 b5 01 	lds	r24, 0x01B5
    45c0:	88 23       	and	r24, r24
    45c2:	81 f4       	brne	.+32     	; 0x45e4 <SignCheck+0x168>
    45c4:	80 91 b4 01 	lds	r24, 0x01B4
    45c8:	88 23       	and	r24, r24
    45ca:	61 f4       	brne	.+24     	; 0x45e4 <SignCheck+0x168>
    45cc:	80 91 b3 01 	lds	r24, 0x01B3
    45d0:	8d 34       	cpi	r24, 0x4D	; 77
    45d2:	41 f4       	brne	.+16     	; 0x45e4 <SignCheck+0x168>
    45d4:	80 91 b2 01 	lds	r24, 0x01B2
    45d8:	88 23       	and	r24, r24
    45da:	21 f4       	brne	.+8      	; 0x45e4 <SignCheck+0x168>
		CLCD_voidSendData('F');
    45dc:	86 e4       	ldi	r24, 0x46	; 70
    45de:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <CLCD_voidSendData>
    45e2:	1f c1       	rjmp	.+574    	; 0x4822 <SignCheck+0x3a6>
	else if((angle[4]==90)&&(angle[3]==90)&&(angle[2]==90)&&(angle[1]==0)&&(angle[0]==77))
    45e4:	80 91 b6 01 	lds	r24, 0x01B6
    45e8:	8a 35       	cpi	r24, 0x5A	; 90
    45ea:	a1 f4       	brne	.+40     	; 0x4614 <SignCheck+0x198>
    45ec:	80 91 b5 01 	lds	r24, 0x01B5
    45f0:	8a 35       	cpi	r24, 0x5A	; 90
    45f2:	81 f4       	brne	.+32     	; 0x4614 <SignCheck+0x198>
    45f4:	80 91 b4 01 	lds	r24, 0x01B4
    45f8:	8a 35       	cpi	r24, 0x5A	; 90
    45fa:	61 f4       	brne	.+24     	; 0x4614 <SignCheck+0x198>
    45fc:	80 91 b3 01 	lds	r24, 0x01B3
    4600:	88 23       	and	r24, r24
    4602:	41 f4       	brne	.+16     	; 0x4614 <SignCheck+0x198>
    4604:	80 91 b2 01 	lds	r24, 0x01B2
    4608:	8d 34       	cpi	r24, 0x4D	; 77
    460a:	21 f4       	brne	.+8      	; 0x4614 <SignCheck+0x198>
		CLCD_voidSendData('G');
    460c:	87 e4       	ldi	r24, 0x47	; 71
    460e:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <CLCD_voidSendData>
    4612:	07 c1       	rjmp	.+526    	; 0x4822 <SignCheck+0x3a6>
	else if((angle[4]==0)&&(angle[3]==90)&&(angle[2]==90)&&(angle[1]==0)&&(angle[0]==90))
    4614:	80 91 b6 01 	lds	r24, 0x01B6
    4618:	88 23       	and	r24, r24
    461a:	a1 f4       	brne	.+40     	; 0x4644 <SignCheck+0x1c8>
    461c:	80 91 b5 01 	lds	r24, 0x01B5
    4620:	8a 35       	cpi	r24, 0x5A	; 90
    4622:	81 f4       	brne	.+32     	; 0x4644 <SignCheck+0x1c8>
    4624:	80 91 b4 01 	lds	r24, 0x01B4
    4628:	8a 35       	cpi	r24, 0x5A	; 90
    462a:	61 f4       	brne	.+24     	; 0x4644 <SignCheck+0x1c8>
    462c:	80 91 b3 01 	lds	r24, 0x01B3
    4630:	88 23       	and	r24, r24
    4632:	41 f4       	brne	.+16     	; 0x4644 <SignCheck+0x1c8>
    4634:	80 91 b2 01 	lds	r24, 0x01B2
    4638:	8a 35       	cpi	r24, 0x5A	; 90
    463a:	21 f4       	brne	.+8      	; 0x4644 <SignCheck+0x1c8>
		CLCD_voidSendData('H');
    463c:	88 e4       	ldi	r24, 0x48	; 72
    463e:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <CLCD_voidSendData>
    4642:	ef c0       	rjmp	.+478    	; 0x4822 <SignCheck+0x3a6>
	else if((angle[4]==0)&&(angle[3]==90)&&(angle[2]==90)&&(angle[1]==90)&&(angle[0]==90))
    4644:	80 91 b6 01 	lds	r24, 0x01B6
    4648:	88 23       	and	r24, r24
    464a:	a1 f4       	brne	.+40     	; 0x4674 <SignCheck+0x1f8>
    464c:	80 91 b5 01 	lds	r24, 0x01B5
    4650:	8a 35       	cpi	r24, 0x5A	; 90
    4652:	81 f4       	brne	.+32     	; 0x4674 <SignCheck+0x1f8>
    4654:	80 91 b4 01 	lds	r24, 0x01B4
    4658:	8a 35       	cpi	r24, 0x5A	; 90
    465a:	61 f4       	brne	.+24     	; 0x4674 <SignCheck+0x1f8>
    465c:	80 91 b3 01 	lds	r24, 0x01B3
    4660:	8a 35       	cpi	r24, 0x5A	; 90
    4662:	41 f4       	brne	.+16     	; 0x4674 <SignCheck+0x1f8>
    4664:	80 91 b2 01 	lds	r24, 0x01B2
    4668:	8a 35       	cpi	r24, 0x5A	; 90
    466a:	21 f4       	brne	.+8      	; 0x4674 <SignCheck+0x1f8>
		CLCD_voidSendData('I');
    466c:	89 e4       	ldi	r24, 0x49	; 73
    466e:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <CLCD_voidSendData>
    4672:	d7 c0       	rjmp	.+430    	; 0x4822 <SignCheck+0x3a6>
	else if((angle[4]==90)&&(angle[3]==90)&&(angle[2]==0)&&(angle[1]==0)&&(angle[0]==0))
    4674:	80 91 b6 01 	lds	r24, 0x01B6
    4678:	8a 35       	cpi	r24, 0x5A	; 90
    467a:	a1 f4       	brne	.+40     	; 0x46a4 <SignCheck+0x228>
    467c:	80 91 b5 01 	lds	r24, 0x01B5
    4680:	8a 35       	cpi	r24, 0x5A	; 90
    4682:	81 f4       	brne	.+32     	; 0x46a4 <SignCheck+0x228>
    4684:	80 91 b4 01 	lds	r24, 0x01B4
    4688:	88 23       	and	r24, r24
    468a:	61 f4       	brne	.+24     	; 0x46a4 <SignCheck+0x228>
    468c:	80 91 b3 01 	lds	r24, 0x01B3
    4690:	88 23       	and	r24, r24
    4692:	41 f4       	brne	.+16     	; 0x46a4 <SignCheck+0x228>
    4694:	80 91 b2 01 	lds	r24, 0x01B2
    4698:	88 23       	and	r24, r24
    469a:	21 f4       	brne	.+8      	; 0x46a4 <SignCheck+0x228>
		CLCD_voidSendData('K');
    469c:	8b e4       	ldi	r24, 0x4B	; 75
    469e:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <CLCD_voidSendData>
    46a2:	bf c0       	rjmp	.+382    	; 0x4822 <SignCheck+0x3a6>
	else if((angle[4]==90)&&(angle[3]==90)&&(angle[2]==90)&&(angle[1]==0)&&(angle[0]==0))
    46a4:	80 91 b6 01 	lds	r24, 0x01B6
    46a8:	8a 35       	cpi	r24, 0x5A	; 90
    46aa:	a1 f4       	brne	.+40     	; 0x46d4 <SignCheck+0x258>
    46ac:	80 91 b5 01 	lds	r24, 0x01B5
    46b0:	8a 35       	cpi	r24, 0x5A	; 90
    46b2:	81 f4       	brne	.+32     	; 0x46d4 <SignCheck+0x258>
    46b4:	80 91 b4 01 	lds	r24, 0x01B4
    46b8:	8a 35       	cpi	r24, 0x5A	; 90
    46ba:	61 f4       	brne	.+24     	; 0x46d4 <SignCheck+0x258>
    46bc:	80 91 b3 01 	lds	r24, 0x01B3
    46c0:	88 23       	and	r24, r24
    46c2:	41 f4       	brne	.+16     	; 0x46d4 <SignCheck+0x258>
    46c4:	80 91 b2 01 	lds	r24, 0x01B2
    46c8:	88 23       	and	r24, r24
    46ca:	21 f4       	brne	.+8      	; 0x46d4 <SignCheck+0x258>
		CLCD_voidSendData('L');
    46cc:	8c e4       	ldi	r24, 0x4C	; 76
    46ce:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <CLCD_voidSendData>
    46d2:	a7 c0       	rjmp	.+334    	; 0x4822 <SignCheck+0x3a6>
	else if((angle[4]==90)&&(angle[3]==90)&&(angle[2]==90)&&(angle[1]==90)&&(angle[0]==90))
    46d4:	80 91 b6 01 	lds	r24, 0x01B6
    46d8:	8a 35       	cpi	r24, 0x5A	; 90
    46da:	a1 f4       	brne	.+40     	; 0x4704 <SignCheck+0x288>
    46dc:	80 91 b5 01 	lds	r24, 0x01B5
    46e0:	8a 35       	cpi	r24, 0x5A	; 90
    46e2:	81 f4       	brne	.+32     	; 0x4704 <SignCheck+0x288>
    46e4:	80 91 b4 01 	lds	r24, 0x01B4
    46e8:	8a 35       	cpi	r24, 0x5A	; 90
    46ea:	61 f4       	brne	.+24     	; 0x4704 <SignCheck+0x288>
    46ec:	80 91 b3 01 	lds	r24, 0x01B3
    46f0:	8a 35       	cpi	r24, 0x5A	; 90
    46f2:	41 f4       	brne	.+16     	; 0x4704 <SignCheck+0x288>
    46f4:	80 91 b2 01 	lds	r24, 0x01B2
    46f8:	8a 35       	cpi	r24, 0x5A	; 90
    46fa:	21 f4       	brne	.+8      	; 0x4704 <SignCheck+0x288>
		CLCD_voidSendData('O');
    46fc:	8f e4       	ldi	r24, 0x4F	; 79
    46fe:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <CLCD_voidSendData>
    4702:	8f c0       	rjmp	.+286    	; 0x4822 <SignCheck+0x3a6>
	else if((angle[4]==90)&&(angle[3]==90)&&(angle[2]==90)&&(angle[1]==90)&&(angle[0]==77))
    4704:	80 91 b6 01 	lds	r24, 0x01B6
    4708:	8a 35       	cpi	r24, 0x5A	; 90
    470a:	a1 f4       	brne	.+40     	; 0x4734 <SignCheck+0x2b8>
    470c:	80 91 b5 01 	lds	r24, 0x01B5
    4710:	8a 35       	cpi	r24, 0x5A	; 90
    4712:	81 f4       	brne	.+32     	; 0x4734 <SignCheck+0x2b8>
    4714:	80 91 b4 01 	lds	r24, 0x01B4
    4718:	8a 35       	cpi	r24, 0x5A	; 90
    471a:	61 f4       	brne	.+24     	; 0x4734 <SignCheck+0x2b8>
    471c:	80 91 b3 01 	lds	r24, 0x01B3
    4720:	8a 35       	cpi	r24, 0x5A	; 90
    4722:	41 f4       	brne	.+16     	; 0x4734 <SignCheck+0x2b8>
    4724:	80 91 b2 01 	lds	r24, 0x01B2
    4728:	8d 34       	cpi	r24, 0x4D	; 77
    472a:	21 f4       	brne	.+8      	; 0x4734 <SignCheck+0x2b8>
		CLCD_voidSendData('S');
    472c:	83 e5       	ldi	r24, 0x53	; 83
    472e:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <CLCD_voidSendData>
    4732:	77 c0       	rjmp	.+238    	; 0x4822 <SignCheck+0x3a6>
	else if((angle[4]==0)&&(angle[3]==0)&&(angle[2]==0)&&(angle[1]==90)&&(angle[0]==0))
    4734:	80 91 b6 01 	lds	r24, 0x01B6
    4738:	88 23       	and	r24, r24
    473a:	a1 f4       	brne	.+40     	; 0x4764 <SignCheck+0x2e8>
    473c:	80 91 b5 01 	lds	r24, 0x01B5
    4740:	88 23       	and	r24, r24
    4742:	81 f4       	brne	.+32     	; 0x4764 <SignCheck+0x2e8>
    4744:	80 91 b4 01 	lds	r24, 0x01B4
    4748:	88 23       	and	r24, r24
    474a:	61 f4       	brne	.+24     	; 0x4764 <SignCheck+0x2e8>
    474c:	80 91 b3 01 	lds	r24, 0x01B3
    4750:	8a 35       	cpi	r24, 0x5A	; 90
    4752:	41 f4       	brne	.+16     	; 0x4764 <SignCheck+0x2e8>
    4754:	80 91 b2 01 	lds	r24, 0x01B2
    4758:	88 23       	and	r24, r24
    475a:	21 f4       	brne	.+8      	; 0x4764 <SignCheck+0x2e8>
		CLCD_voidSendData('T');
    475c:	84 e5       	ldi	r24, 0x54	; 84
    475e:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <CLCD_voidSendData>
    4762:	5f c0       	rjmp	.+190    	; 0x4822 <SignCheck+0x3a6>
	else if((angle[4]==90)&&(angle[3]==90)&&(angle[2]==0)&&(angle[1]==0)&&(angle[0]==90))
    4764:	80 91 b6 01 	lds	r24, 0x01B6
    4768:	8a 35       	cpi	r24, 0x5A	; 90
    476a:	a1 f4       	brne	.+40     	; 0x4794 <SignCheck+0x318>
    476c:	80 91 b5 01 	lds	r24, 0x01B5
    4770:	8a 35       	cpi	r24, 0x5A	; 90
    4772:	81 f4       	brne	.+32     	; 0x4794 <SignCheck+0x318>
    4774:	80 91 b4 01 	lds	r24, 0x01B4
    4778:	88 23       	and	r24, r24
    477a:	61 f4       	brne	.+24     	; 0x4794 <SignCheck+0x318>
    477c:	80 91 b3 01 	lds	r24, 0x01B3
    4780:	88 23       	and	r24, r24
    4782:	41 f4       	brne	.+16     	; 0x4794 <SignCheck+0x318>
    4784:	80 91 b2 01 	lds	r24, 0x01B2
    4788:	8a 35       	cpi	r24, 0x5A	; 90
    478a:	21 f4       	brne	.+8      	; 0x4794 <SignCheck+0x318>
		CLCD_voidSendData('U');
    478c:	85 e5       	ldi	r24, 0x55	; 85
    478e:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <CLCD_voidSendData>
    4792:	47 c0       	rjmp	.+142    	; 0x4822 <SignCheck+0x3a6>
	else if((angle[4]==90)&&(angle[3]==0)&&(angle[2]==0)&&(angle[1]==0)&&(angle[0]==90))
    4794:	80 91 b6 01 	lds	r24, 0x01B6
    4798:	8a 35       	cpi	r24, 0x5A	; 90
    479a:	a1 f4       	brne	.+40     	; 0x47c4 <SignCheck+0x348>
    479c:	80 91 b5 01 	lds	r24, 0x01B5
    47a0:	88 23       	and	r24, r24
    47a2:	81 f4       	brne	.+32     	; 0x47c4 <SignCheck+0x348>
    47a4:	80 91 b4 01 	lds	r24, 0x01B4
    47a8:	88 23       	and	r24, r24
    47aa:	61 f4       	brne	.+24     	; 0x47c4 <SignCheck+0x348>
    47ac:	80 91 b3 01 	lds	r24, 0x01B3
    47b0:	88 23       	and	r24, r24
    47b2:	41 f4       	brne	.+16     	; 0x47c4 <SignCheck+0x348>
    47b4:	80 91 b2 01 	lds	r24, 0x01B2
    47b8:	8a 35       	cpi	r24, 0x5A	; 90
    47ba:	21 f4       	brne	.+8      	; 0x47c4 <SignCheck+0x348>
		CLCD_voidSendData('W');
    47bc:	87 e5       	ldi	r24, 0x57	; 87
    47be:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <CLCD_voidSendData>
    47c2:	2f c0       	rjmp	.+94     	; 0x4822 <SignCheck+0x3a6>
	else if((angle[4]==90)&&(angle[3]==0)&&(angle[2]==71)&&(angle[1]==71)&&(angle[0]==90))
    47c4:	80 91 b6 01 	lds	r24, 0x01B6
    47c8:	8a 35       	cpi	r24, 0x5A	; 90
    47ca:	a1 f4       	brne	.+40     	; 0x47f4 <SignCheck+0x378>
    47cc:	80 91 b5 01 	lds	r24, 0x01B5
    47d0:	88 23       	and	r24, r24
    47d2:	81 f4       	brne	.+32     	; 0x47f4 <SignCheck+0x378>
    47d4:	80 91 b4 01 	lds	r24, 0x01B4
    47d8:	87 34       	cpi	r24, 0x47	; 71
    47da:	61 f4       	brne	.+24     	; 0x47f4 <SignCheck+0x378>
    47dc:	80 91 b3 01 	lds	r24, 0x01B3
    47e0:	87 34       	cpi	r24, 0x47	; 71
    47e2:	41 f4       	brne	.+16     	; 0x47f4 <SignCheck+0x378>
    47e4:	80 91 b2 01 	lds	r24, 0x01B2
    47e8:	8a 35       	cpi	r24, 0x5A	; 90
    47ea:	21 f4       	brne	.+8      	; 0x47f4 <SignCheck+0x378>
		CLCD_voidSendData('X');
    47ec:	88 e5       	ldi	r24, 0x58	; 88
    47ee:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <CLCD_voidSendData>
    47f2:	17 c0       	rjmp	.+46     	; 0x4822 <SignCheck+0x3a6>
	else if((angle[4]==0)&&(angle[3]==90)&&(angle[2]==90)&&(angle[1]==90)&&(angle[0]==0))
    47f4:	80 91 b6 01 	lds	r24, 0x01B6
    47f8:	88 23       	and	r24, r24
    47fa:	99 f4       	brne	.+38     	; 0x4822 <SignCheck+0x3a6>
    47fc:	80 91 b5 01 	lds	r24, 0x01B5
    4800:	8a 35       	cpi	r24, 0x5A	; 90
    4802:	79 f4       	brne	.+30     	; 0x4822 <SignCheck+0x3a6>
    4804:	80 91 b4 01 	lds	r24, 0x01B4
    4808:	8a 35       	cpi	r24, 0x5A	; 90
    480a:	59 f4       	brne	.+22     	; 0x4822 <SignCheck+0x3a6>
    480c:	80 91 b3 01 	lds	r24, 0x01B3
    4810:	8a 35       	cpi	r24, 0x5A	; 90
    4812:	39 f4       	brne	.+14     	; 0x4822 <SignCheck+0x3a6>
    4814:	80 91 b2 01 	lds	r24, 0x01B2
    4818:	88 23       	and	r24, r24
    481a:	19 f4       	brne	.+6      	; 0x4822 <SignCheck+0x3a6>
		CLCD_voidSendData('Y');
    481c:	89 e5       	ldi	r24, 0x59	; 89
    481e:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <CLCD_voidSendData>
}
    4822:	cf 91       	pop	r28
    4824:	df 91       	pop	r29
    4826:	08 95       	ret

00004828 <NotifyFunc>:

void NotifyFunc()
{
    4828:	af 92       	push	r10
    482a:	bf 92       	push	r11
    482c:	cf 92       	push	r12
    482e:	df 92       	push	r13
    4830:	ef 92       	push	r14
    4832:	ff 92       	push	r15
    4834:	0f 93       	push	r16
    4836:	1f 93       	push	r17
    4838:	df 93       	push	r29
    483a:	cf 93       	push	r28
    483c:	cd b7       	in	r28, 0x3d	; 61
    483e:	de b7       	in	r29, 0x3e	; 62
	// sensor1
	ReadSensors[0] = (u16)(((u32)(ReadSensors[0]*5000UL))/256UL);
    4840:	80 91 b7 01 	lds	r24, 0x01B7
    4844:	90 91 b8 01 	lds	r25, 0x01B8
    4848:	cc 01       	movw	r24, r24
    484a:	a0 e0       	ldi	r26, 0x00	; 0
    484c:	b0 e0       	ldi	r27, 0x00	; 0
    484e:	28 e8       	ldi	r18, 0x88	; 136
    4850:	33 e1       	ldi	r19, 0x13	; 19
    4852:	40 e0       	ldi	r20, 0x00	; 0
    4854:	50 e0       	ldi	r21, 0x00	; 0
    4856:	bc 01       	movw	r22, r24
    4858:	cd 01       	movw	r24, r26
    485a:	0e 94 67 26 	call	0x4cce	; 0x4cce <__mulsi3>
    485e:	dc 01       	movw	r26, r24
    4860:	cb 01       	movw	r24, r22
    4862:	89 2f       	mov	r24, r25
    4864:	9a 2f       	mov	r25, r26
    4866:	ab 2f       	mov	r26, r27
    4868:	bb 27       	eor	r27, r27
    486a:	90 93 b8 01 	sts	0x01B8, r25
    486e:	80 93 b7 01 	sts	0x01B7, r24
	angle[0] = AppMap(2421, 3496, straightAngle, bentAngle, ReadSensors[0]);
    4872:	80 91 b7 01 	lds	r24, 0x01B7
    4876:	90 91 b8 01 	lds	r25, 0x01B8
    487a:	cc 01       	movw	r24, r24
    487c:	a0 e0       	ldi	r26, 0x00	; 0
    487e:	b0 e0       	ldi	r27, 0x00	; 0
    4880:	00 d0       	rcall	.+0      	; 0x4882 <NotifyFunc+0x5a>
    4882:	00 d0       	rcall	.+0      	; 0x4884 <NotifyFunc+0x5c>
    4884:	ed b7       	in	r30, 0x3d	; 61
    4886:	fe b7       	in	r31, 0x3e	; 62
    4888:	31 96       	adiw	r30, 0x01	; 1
    488a:	80 83       	st	Z, r24
    488c:	91 83       	std	Z+1, r25	; 0x01
    488e:	a2 83       	std	Z+2, r26	; 0x02
    4890:	b3 83       	std	Z+3, r27	; 0x03
    4892:	65 e7       	ldi	r22, 0x75	; 117
    4894:	79 e0       	ldi	r23, 0x09	; 9
    4896:	80 e0       	ldi	r24, 0x00	; 0
    4898:	90 e0       	ldi	r25, 0x00	; 0
    489a:	28 ea       	ldi	r18, 0xA8	; 168
    489c:	3d e0       	ldi	r19, 0x0D	; 13
    489e:	40 e0       	ldi	r20, 0x00	; 0
    48a0:	50 e0       	ldi	r21, 0x00	; 0
    48a2:	ee 24       	eor	r14, r14
    48a4:	ff 24       	eor	r15, r15
    48a6:	87 01       	movw	r16, r14
    48a8:	0f 2e       	mov	r0, r31
    48aa:	fa e5       	ldi	r31, 0x5A	; 90
    48ac:	af 2e       	mov	r10, r31
    48ae:	f0 e0       	ldi	r31, 0x00	; 0
    48b0:	bf 2e       	mov	r11, r31
    48b2:	f0 e0       	ldi	r31, 0x00	; 0
    48b4:	cf 2e       	mov	r12, r31
    48b6:	f0 e0       	ldi	r31, 0x00	; 0
    48b8:	df 2e       	mov	r13, r31
    48ba:	f0 2d       	mov	r31, r0
    48bc:	0e 94 ea 25 	call	0x4bd4	; 0x4bd4 <AppMap>
    48c0:	0f 90       	pop	r0
    48c2:	0f 90       	pop	r0
    48c4:	0f 90       	pop	r0
    48c6:	0f 90       	pop	r0
    48c8:	dc 01       	movw	r26, r24
    48ca:	cb 01       	movw	r24, r22
    48cc:	80 93 b2 01 	sts	0x01B2, r24
	angle[0]=90-angle[0];
    48d0:	90 91 b2 01 	lds	r25, 0x01B2
    48d4:	8a e5       	ldi	r24, 0x5A	; 90
    48d6:	89 1b       	sub	r24, r25
    48d8:	80 93 b2 01 	sts	0x01B2, r24

	// sensor2
	ReadSensors[1] = (u16)(((u32)(ReadSensors[1]*5000UL))/256UL);
    48dc:	80 91 b9 01 	lds	r24, 0x01B9
    48e0:	90 91 ba 01 	lds	r25, 0x01BA
    48e4:	cc 01       	movw	r24, r24
    48e6:	a0 e0       	ldi	r26, 0x00	; 0
    48e8:	b0 e0       	ldi	r27, 0x00	; 0
    48ea:	28 e8       	ldi	r18, 0x88	; 136
    48ec:	33 e1       	ldi	r19, 0x13	; 19
    48ee:	40 e0       	ldi	r20, 0x00	; 0
    48f0:	50 e0       	ldi	r21, 0x00	; 0
    48f2:	bc 01       	movw	r22, r24
    48f4:	cd 01       	movw	r24, r26
    48f6:	0e 94 67 26 	call	0x4cce	; 0x4cce <__mulsi3>
    48fa:	dc 01       	movw	r26, r24
    48fc:	cb 01       	movw	r24, r22
    48fe:	89 2f       	mov	r24, r25
    4900:	9a 2f       	mov	r25, r26
    4902:	ab 2f       	mov	r26, r27
    4904:	bb 27       	eor	r27, r27
    4906:	90 93 ba 01 	sts	0x01BA, r25
    490a:	80 93 b9 01 	sts	0x01B9, r24
	angle[1] = AppMap(2421, 3496, straightAngle, bentAngle, ReadSensors[1]);
    490e:	80 91 b9 01 	lds	r24, 0x01B9
    4912:	90 91 ba 01 	lds	r25, 0x01BA
    4916:	cc 01       	movw	r24, r24
    4918:	a0 e0       	ldi	r26, 0x00	; 0
    491a:	b0 e0       	ldi	r27, 0x00	; 0
    491c:	00 d0       	rcall	.+0      	; 0x491e <NotifyFunc+0xf6>
    491e:	00 d0       	rcall	.+0      	; 0x4920 <NotifyFunc+0xf8>
    4920:	ed b7       	in	r30, 0x3d	; 61
    4922:	fe b7       	in	r31, 0x3e	; 62
    4924:	31 96       	adiw	r30, 0x01	; 1
    4926:	80 83       	st	Z, r24
    4928:	91 83       	std	Z+1, r25	; 0x01
    492a:	a2 83       	std	Z+2, r26	; 0x02
    492c:	b3 83       	std	Z+3, r27	; 0x03
    492e:	65 e7       	ldi	r22, 0x75	; 117
    4930:	79 e0       	ldi	r23, 0x09	; 9
    4932:	80 e0       	ldi	r24, 0x00	; 0
    4934:	90 e0       	ldi	r25, 0x00	; 0
    4936:	28 ea       	ldi	r18, 0xA8	; 168
    4938:	3d e0       	ldi	r19, 0x0D	; 13
    493a:	40 e0       	ldi	r20, 0x00	; 0
    493c:	50 e0       	ldi	r21, 0x00	; 0
    493e:	ee 24       	eor	r14, r14
    4940:	ff 24       	eor	r15, r15
    4942:	87 01       	movw	r16, r14
    4944:	0f 2e       	mov	r0, r31
    4946:	fa e5       	ldi	r31, 0x5A	; 90
    4948:	af 2e       	mov	r10, r31
    494a:	f0 e0       	ldi	r31, 0x00	; 0
    494c:	bf 2e       	mov	r11, r31
    494e:	f0 e0       	ldi	r31, 0x00	; 0
    4950:	cf 2e       	mov	r12, r31
    4952:	f0 e0       	ldi	r31, 0x00	; 0
    4954:	df 2e       	mov	r13, r31
    4956:	f0 2d       	mov	r31, r0
    4958:	0e 94 ea 25 	call	0x4bd4	; 0x4bd4 <AppMap>
    495c:	0f 90       	pop	r0
    495e:	0f 90       	pop	r0
    4960:	0f 90       	pop	r0
    4962:	0f 90       	pop	r0
    4964:	dc 01       	movw	r26, r24
    4966:	cb 01       	movw	r24, r22
    4968:	80 93 b3 01 	sts	0x01B3, r24
	angle[1]=90-angle[1];
    496c:	90 91 b3 01 	lds	r25, 0x01B3
    4970:	8a e5       	ldi	r24, 0x5A	; 90
    4972:	89 1b       	sub	r24, r25
    4974:	80 93 b3 01 	sts	0x01B3, r24

	// sensor3
	ReadSensors[2] = (u16)(((u32)(ReadSensors[2]*5000UL))/256UL);
    4978:	80 91 bb 01 	lds	r24, 0x01BB
    497c:	90 91 bc 01 	lds	r25, 0x01BC
    4980:	cc 01       	movw	r24, r24
    4982:	a0 e0       	ldi	r26, 0x00	; 0
    4984:	b0 e0       	ldi	r27, 0x00	; 0
    4986:	28 e8       	ldi	r18, 0x88	; 136
    4988:	33 e1       	ldi	r19, 0x13	; 19
    498a:	40 e0       	ldi	r20, 0x00	; 0
    498c:	50 e0       	ldi	r21, 0x00	; 0
    498e:	bc 01       	movw	r22, r24
    4990:	cd 01       	movw	r24, r26
    4992:	0e 94 67 26 	call	0x4cce	; 0x4cce <__mulsi3>
    4996:	dc 01       	movw	r26, r24
    4998:	cb 01       	movw	r24, r22
    499a:	89 2f       	mov	r24, r25
    499c:	9a 2f       	mov	r25, r26
    499e:	ab 2f       	mov	r26, r27
    49a0:	bb 27       	eor	r27, r27
    49a2:	90 93 bc 01 	sts	0x01BC, r25
    49a6:	80 93 bb 01 	sts	0x01BB, r24
	angle[2] = AppMap(2421, 3496, straightAngle, bentAngle, ReadSensors[2]);
    49aa:	80 91 bb 01 	lds	r24, 0x01BB
    49ae:	90 91 bc 01 	lds	r25, 0x01BC
    49b2:	cc 01       	movw	r24, r24
    49b4:	a0 e0       	ldi	r26, 0x00	; 0
    49b6:	b0 e0       	ldi	r27, 0x00	; 0
    49b8:	00 d0       	rcall	.+0      	; 0x49ba <NotifyFunc+0x192>
    49ba:	00 d0       	rcall	.+0      	; 0x49bc <NotifyFunc+0x194>
    49bc:	ed b7       	in	r30, 0x3d	; 61
    49be:	fe b7       	in	r31, 0x3e	; 62
    49c0:	31 96       	adiw	r30, 0x01	; 1
    49c2:	80 83       	st	Z, r24
    49c4:	91 83       	std	Z+1, r25	; 0x01
    49c6:	a2 83       	std	Z+2, r26	; 0x02
    49c8:	b3 83       	std	Z+3, r27	; 0x03
    49ca:	65 e7       	ldi	r22, 0x75	; 117
    49cc:	79 e0       	ldi	r23, 0x09	; 9
    49ce:	80 e0       	ldi	r24, 0x00	; 0
    49d0:	90 e0       	ldi	r25, 0x00	; 0
    49d2:	28 ea       	ldi	r18, 0xA8	; 168
    49d4:	3d e0       	ldi	r19, 0x0D	; 13
    49d6:	40 e0       	ldi	r20, 0x00	; 0
    49d8:	50 e0       	ldi	r21, 0x00	; 0
    49da:	ee 24       	eor	r14, r14
    49dc:	ff 24       	eor	r15, r15
    49de:	87 01       	movw	r16, r14
    49e0:	0f 2e       	mov	r0, r31
    49e2:	fa e5       	ldi	r31, 0x5A	; 90
    49e4:	af 2e       	mov	r10, r31
    49e6:	f0 e0       	ldi	r31, 0x00	; 0
    49e8:	bf 2e       	mov	r11, r31
    49ea:	f0 e0       	ldi	r31, 0x00	; 0
    49ec:	cf 2e       	mov	r12, r31
    49ee:	f0 e0       	ldi	r31, 0x00	; 0
    49f0:	df 2e       	mov	r13, r31
    49f2:	f0 2d       	mov	r31, r0
    49f4:	0e 94 ea 25 	call	0x4bd4	; 0x4bd4 <AppMap>
    49f8:	0f 90       	pop	r0
    49fa:	0f 90       	pop	r0
    49fc:	0f 90       	pop	r0
    49fe:	0f 90       	pop	r0
    4a00:	dc 01       	movw	r26, r24
    4a02:	cb 01       	movw	r24, r22
    4a04:	80 93 b4 01 	sts	0x01B4, r24
	angle[2]=90-angle[2];
    4a08:	90 91 b4 01 	lds	r25, 0x01B4
    4a0c:	8a e5       	ldi	r24, 0x5A	; 90
    4a0e:	89 1b       	sub	r24, r25
    4a10:	80 93 b4 01 	sts	0x01B4, r24

	// sensor4
	ReadSensors[3] = (u16)(((u32)(ReadSensors[3]*5000UL))/256UL);
    4a14:	80 91 bd 01 	lds	r24, 0x01BD
    4a18:	90 91 be 01 	lds	r25, 0x01BE
    4a1c:	cc 01       	movw	r24, r24
    4a1e:	a0 e0       	ldi	r26, 0x00	; 0
    4a20:	b0 e0       	ldi	r27, 0x00	; 0
    4a22:	28 e8       	ldi	r18, 0x88	; 136
    4a24:	33 e1       	ldi	r19, 0x13	; 19
    4a26:	40 e0       	ldi	r20, 0x00	; 0
    4a28:	50 e0       	ldi	r21, 0x00	; 0
    4a2a:	bc 01       	movw	r22, r24
    4a2c:	cd 01       	movw	r24, r26
    4a2e:	0e 94 67 26 	call	0x4cce	; 0x4cce <__mulsi3>
    4a32:	dc 01       	movw	r26, r24
    4a34:	cb 01       	movw	r24, r22
    4a36:	89 2f       	mov	r24, r25
    4a38:	9a 2f       	mov	r25, r26
    4a3a:	ab 2f       	mov	r26, r27
    4a3c:	bb 27       	eor	r27, r27
    4a3e:	90 93 be 01 	sts	0x01BE, r25
    4a42:	80 93 bd 01 	sts	0x01BD, r24
	angle[3] = AppMap(2421, 3496, straightAngle, bentAngle, ReadSensors[3]);
    4a46:	80 91 bd 01 	lds	r24, 0x01BD
    4a4a:	90 91 be 01 	lds	r25, 0x01BE
    4a4e:	cc 01       	movw	r24, r24
    4a50:	a0 e0       	ldi	r26, 0x00	; 0
    4a52:	b0 e0       	ldi	r27, 0x00	; 0
    4a54:	00 d0       	rcall	.+0      	; 0x4a56 <NotifyFunc+0x22e>
    4a56:	00 d0       	rcall	.+0      	; 0x4a58 <NotifyFunc+0x230>
    4a58:	ed b7       	in	r30, 0x3d	; 61
    4a5a:	fe b7       	in	r31, 0x3e	; 62
    4a5c:	31 96       	adiw	r30, 0x01	; 1
    4a5e:	80 83       	st	Z, r24
    4a60:	91 83       	std	Z+1, r25	; 0x01
    4a62:	a2 83       	std	Z+2, r26	; 0x02
    4a64:	b3 83       	std	Z+3, r27	; 0x03
    4a66:	65 e7       	ldi	r22, 0x75	; 117
    4a68:	79 e0       	ldi	r23, 0x09	; 9
    4a6a:	80 e0       	ldi	r24, 0x00	; 0
    4a6c:	90 e0       	ldi	r25, 0x00	; 0
    4a6e:	28 ea       	ldi	r18, 0xA8	; 168
    4a70:	3d e0       	ldi	r19, 0x0D	; 13
    4a72:	40 e0       	ldi	r20, 0x00	; 0
    4a74:	50 e0       	ldi	r21, 0x00	; 0
    4a76:	ee 24       	eor	r14, r14
    4a78:	ff 24       	eor	r15, r15
    4a7a:	87 01       	movw	r16, r14
    4a7c:	0f 2e       	mov	r0, r31
    4a7e:	fa e5       	ldi	r31, 0x5A	; 90
    4a80:	af 2e       	mov	r10, r31
    4a82:	f0 e0       	ldi	r31, 0x00	; 0
    4a84:	bf 2e       	mov	r11, r31
    4a86:	f0 e0       	ldi	r31, 0x00	; 0
    4a88:	cf 2e       	mov	r12, r31
    4a8a:	f0 e0       	ldi	r31, 0x00	; 0
    4a8c:	df 2e       	mov	r13, r31
    4a8e:	f0 2d       	mov	r31, r0
    4a90:	0e 94 ea 25 	call	0x4bd4	; 0x4bd4 <AppMap>
    4a94:	0f 90       	pop	r0
    4a96:	0f 90       	pop	r0
    4a98:	0f 90       	pop	r0
    4a9a:	0f 90       	pop	r0
    4a9c:	dc 01       	movw	r26, r24
    4a9e:	cb 01       	movw	r24, r22
    4aa0:	80 93 b5 01 	sts	0x01B5, r24
	angle[3]=90-angle[3];
    4aa4:	90 91 b5 01 	lds	r25, 0x01B5
    4aa8:	8a e5       	ldi	r24, 0x5A	; 90
    4aaa:	89 1b       	sub	r24, r25
    4aac:	80 93 b5 01 	sts	0x01B5, r24

	// sensor5
	ReadSensors[4] = (u16)(((u32)(ReadSensors[4]*5000UL))/256UL);
    4ab0:	80 91 bf 01 	lds	r24, 0x01BF
    4ab4:	90 91 c0 01 	lds	r25, 0x01C0
    4ab8:	cc 01       	movw	r24, r24
    4aba:	a0 e0       	ldi	r26, 0x00	; 0
    4abc:	b0 e0       	ldi	r27, 0x00	; 0
    4abe:	28 e8       	ldi	r18, 0x88	; 136
    4ac0:	33 e1       	ldi	r19, 0x13	; 19
    4ac2:	40 e0       	ldi	r20, 0x00	; 0
    4ac4:	50 e0       	ldi	r21, 0x00	; 0
    4ac6:	bc 01       	movw	r22, r24
    4ac8:	cd 01       	movw	r24, r26
    4aca:	0e 94 67 26 	call	0x4cce	; 0x4cce <__mulsi3>
    4ace:	dc 01       	movw	r26, r24
    4ad0:	cb 01       	movw	r24, r22
    4ad2:	89 2f       	mov	r24, r25
    4ad4:	9a 2f       	mov	r25, r26
    4ad6:	ab 2f       	mov	r26, r27
    4ad8:	bb 27       	eor	r27, r27
    4ada:	90 93 c0 01 	sts	0x01C0, r25
    4ade:	80 93 bf 01 	sts	0x01BF, r24
	angle[4] = AppMap(2421, 3496, straightAngle, bentAngle, ReadSensors[4]);
    4ae2:	80 91 bf 01 	lds	r24, 0x01BF
    4ae6:	90 91 c0 01 	lds	r25, 0x01C0
    4aea:	cc 01       	movw	r24, r24
    4aec:	a0 e0       	ldi	r26, 0x00	; 0
    4aee:	b0 e0       	ldi	r27, 0x00	; 0
    4af0:	00 d0       	rcall	.+0      	; 0x4af2 <NotifyFunc+0x2ca>
    4af2:	00 d0       	rcall	.+0      	; 0x4af4 <NotifyFunc+0x2cc>
    4af4:	ed b7       	in	r30, 0x3d	; 61
    4af6:	fe b7       	in	r31, 0x3e	; 62
    4af8:	31 96       	adiw	r30, 0x01	; 1
    4afa:	80 83       	st	Z, r24
    4afc:	91 83       	std	Z+1, r25	; 0x01
    4afe:	a2 83       	std	Z+2, r26	; 0x02
    4b00:	b3 83       	std	Z+3, r27	; 0x03
    4b02:	65 e7       	ldi	r22, 0x75	; 117
    4b04:	79 e0       	ldi	r23, 0x09	; 9
    4b06:	80 e0       	ldi	r24, 0x00	; 0
    4b08:	90 e0       	ldi	r25, 0x00	; 0
    4b0a:	28 ea       	ldi	r18, 0xA8	; 168
    4b0c:	3d e0       	ldi	r19, 0x0D	; 13
    4b0e:	40 e0       	ldi	r20, 0x00	; 0
    4b10:	50 e0       	ldi	r21, 0x00	; 0
    4b12:	ee 24       	eor	r14, r14
    4b14:	ff 24       	eor	r15, r15
    4b16:	87 01       	movw	r16, r14
    4b18:	0f 2e       	mov	r0, r31
    4b1a:	fa e5       	ldi	r31, 0x5A	; 90
    4b1c:	af 2e       	mov	r10, r31
    4b1e:	f0 e0       	ldi	r31, 0x00	; 0
    4b20:	bf 2e       	mov	r11, r31
    4b22:	f0 e0       	ldi	r31, 0x00	; 0
    4b24:	cf 2e       	mov	r12, r31
    4b26:	f0 e0       	ldi	r31, 0x00	; 0
    4b28:	df 2e       	mov	r13, r31
    4b2a:	f0 2d       	mov	r31, r0
    4b2c:	0e 94 ea 25 	call	0x4bd4	; 0x4bd4 <AppMap>
    4b30:	0f 90       	pop	r0
    4b32:	0f 90       	pop	r0
    4b34:	0f 90       	pop	r0
    4b36:	0f 90       	pop	r0
    4b38:	dc 01       	movw	r26, r24
    4b3a:	cb 01       	movw	r24, r22
    4b3c:	80 93 b6 01 	sts	0x01B6, r24
	angle[4]=90-angle[4];
    4b40:	90 91 b6 01 	lds	r25, 0x01B6
    4b44:	8a e5       	ldi	r24, 0x5A	; 90
    4b46:	89 1b       	sub	r24, r25
    4b48:	80 93 b6 01 	sts	0x01B6, r24


}
    4b4c:	cf 91       	pop	r28
    4b4e:	df 91       	pop	r29
    4b50:	1f 91       	pop	r17
    4b52:	0f 91       	pop	r16
    4b54:	ff 90       	pop	r15
    4b56:	ef 90       	pop	r14
    4b58:	df 90       	pop	r13
    4b5a:	cf 90       	pop	r12
    4b5c:	bf 90       	pop	r11
    4b5e:	af 90       	pop	r10
    4b60:	08 95       	ret

00004b62 <DispNum>:
void DispNum()
{
    4b62:	df 93       	push	r29
    4b64:	cf 93       	push	r28
    4b66:	cd b7       	in	r28, 0x3d	; 61
    4b68:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidGoToXY(0,0);
    4b6a:	80 e0       	ldi	r24, 0x00	; 0
    4b6c:	60 e0       	ldi	r22, 0x00	; 0
    4b6e:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <CLCD_voidGoToXY>
	CLCD_voidWriteNumber(angle[0]);
    4b72:	80 91 b2 01 	lds	r24, 0x01B2
    4b76:	88 2f       	mov	r24, r24
    4b78:	90 e0       	ldi	r25, 0x00	; 0
    4b7a:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <CLCD_voidWriteNumber>
	CLCD_voidGoToXY(0,3);
    4b7e:	80 e0       	ldi	r24, 0x00	; 0
    4b80:	63 e0       	ldi	r22, 0x03	; 3
    4b82:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <CLCD_voidGoToXY>
	CLCD_voidWriteNumber(angle[1]);
    4b86:	80 91 b3 01 	lds	r24, 0x01B3
    4b8a:	88 2f       	mov	r24, r24
    4b8c:	90 e0       	ldi	r25, 0x00	; 0
    4b8e:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <CLCD_voidWriteNumber>
	CLCD_voidGoToXY(0,6);
    4b92:	80 e0       	ldi	r24, 0x00	; 0
    4b94:	66 e0       	ldi	r22, 0x06	; 6
    4b96:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <CLCD_voidGoToXY>
	CLCD_voidWriteNumber(angle[2]);
    4b9a:	80 91 b4 01 	lds	r24, 0x01B4
    4b9e:	88 2f       	mov	r24, r24
    4ba0:	90 e0       	ldi	r25, 0x00	; 0
    4ba2:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <CLCD_voidWriteNumber>
	CLCD_voidGoToXY(0,9);
    4ba6:	80 e0       	ldi	r24, 0x00	; 0
    4ba8:	69 e0       	ldi	r22, 0x09	; 9
    4baa:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <CLCD_voidGoToXY>
	CLCD_voidWriteNumber(angle[3]);
    4bae:	80 91 b5 01 	lds	r24, 0x01B5
    4bb2:	88 2f       	mov	r24, r24
    4bb4:	90 e0       	ldi	r25, 0x00	; 0
    4bb6:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <CLCD_voidWriteNumber>
	CLCD_voidGoToXY(0,12);
    4bba:	80 e0       	ldi	r24, 0x00	; 0
    4bbc:	6c e0       	ldi	r22, 0x0C	; 12
    4bbe:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <CLCD_voidGoToXY>
	CLCD_voidWriteNumber(angle[4]);
    4bc2:	80 91 b6 01 	lds	r24, 0x01B6
    4bc6:	88 2f       	mov	r24, r24
    4bc8:	90 e0       	ldi	r25, 0x00	; 0
    4bca:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <CLCD_voidWriteNumber>
}
    4bce:	cf 91       	pop	r28
    4bd0:	df 91       	pop	r29
    4bd2:	08 95       	ret

00004bd4 <AppMap>:
u32 AppMap(u32 InMin,u32 InMax,u32 OutMin,u32 OutMax,u32 InVal)
{
    4bd4:	af 92       	push	r10
    4bd6:	bf 92       	push	r11
    4bd8:	cf 92       	push	r12
    4bda:	df 92       	push	r13
    4bdc:	ef 92       	push	r14
    4bde:	ff 92       	push	r15
    4be0:	0f 93       	push	r16
    4be2:	1f 93       	push	r17
    4be4:	df 93       	push	r29
    4be6:	cf 93       	push	r28
    4be8:	cd b7       	in	r28, 0x3d	; 61
    4bea:	de b7       	in	r29, 0x3e	; 62
    4bec:	64 97       	sbiw	r28, 0x14	; 20
    4bee:	0f b6       	in	r0, 0x3f	; 63
    4bf0:	f8 94       	cli
    4bf2:	de bf       	out	0x3e, r29	; 62
    4bf4:	0f be       	out	0x3f, r0	; 63
    4bf6:	cd bf       	out	0x3d, r28	; 61
    4bf8:	6d 83       	std	Y+5, r22	; 0x05
    4bfa:	7e 83       	std	Y+6, r23	; 0x06
    4bfc:	8f 83       	std	Y+7, r24	; 0x07
    4bfe:	98 87       	std	Y+8, r25	; 0x08
    4c00:	29 87       	std	Y+9, r18	; 0x09
    4c02:	3a 87       	std	Y+10, r19	; 0x0a
    4c04:	4b 87       	std	Y+11, r20	; 0x0b
    4c06:	5c 87       	std	Y+12, r21	; 0x0c
    4c08:	ed 86       	std	Y+13, r14	; 0x0d
    4c0a:	fe 86       	std	Y+14, r15	; 0x0e
    4c0c:	0f 87       	std	Y+15, r16	; 0x0f
    4c0e:	18 8b       	std	Y+16, r17	; 0x10
    4c10:	a9 8a       	std	Y+17, r10	; 0x11
    4c12:	ba 8a       	std	Y+18, r11	; 0x12
    4c14:	cb 8a       	std	Y+19, r12	; 0x13
    4c16:	dc 8a       	std	Y+20, r13	; 0x14
	u32 Local=0;
    4c18:	19 82       	std	Y+1, r1	; 0x01
    4c1a:	1a 82       	std	Y+2, r1	; 0x02
    4c1c:	1b 82       	std	Y+3, r1	; 0x03
    4c1e:	1c 82       	std	Y+4, r1	; 0x04
	Local = (((InVal-InMin)*(OutMax-OutMin))/(InMax-InMin))+OutMin;
    4c20:	29 a1       	ldd	r18, Y+33	; 0x21
    4c22:	3a a1       	ldd	r19, Y+34	; 0x22
    4c24:	4b a1       	ldd	r20, Y+35	; 0x23
    4c26:	5c a1       	ldd	r21, Y+36	; 0x24
    4c28:	8d 81       	ldd	r24, Y+5	; 0x05
    4c2a:	9e 81       	ldd	r25, Y+6	; 0x06
    4c2c:	af 81       	ldd	r26, Y+7	; 0x07
    4c2e:	b8 85       	ldd	r27, Y+8	; 0x08
    4c30:	79 01       	movw	r14, r18
    4c32:	8a 01       	movw	r16, r20
    4c34:	e8 1a       	sub	r14, r24
    4c36:	f9 0a       	sbc	r15, r25
    4c38:	0a 0b       	sbc	r16, r26
    4c3a:	1b 0b       	sbc	r17, r27
    4c3c:	29 89       	ldd	r18, Y+17	; 0x11
    4c3e:	3a 89       	ldd	r19, Y+18	; 0x12
    4c40:	4b 89       	ldd	r20, Y+19	; 0x13
    4c42:	5c 89       	ldd	r21, Y+20	; 0x14
    4c44:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c46:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c48:	af 85       	ldd	r26, Y+15	; 0x0f
    4c4a:	b8 89       	ldd	r27, Y+16	; 0x10
    4c4c:	28 1b       	sub	r18, r24
    4c4e:	39 0b       	sbc	r19, r25
    4c50:	4a 0b       	sbc	r20, r26
    4c52:	5b 0b       	sbc	r21, r27
    4c54:	c8 01       	movw	r24, r16
    4c56:	b7 01       	movw	r22, r14
    4c58:	0e 94 67 26 	call	0x4cce	; 0x4cce <__mulsi3>
    4c5c:	7b 01       	movw	r14, r22
    4c5e:	8c 01       	movw	r16, r24
    4c60:	29 85       	ldd	r18, Y+9	; 0x09
    4c62:	3a 85       	ldd	r19, Y+10	; 0x0a
    4c64:	4b 85       	ldd	r20, Y+11	; 0x0b
    4c66:	5c 85       	ldd	r21, Y+12	; 0x0c
    4c68:	8d 81       	ldd	r24, Y+5	; 0x05
    4c6a:	9e 81       	ldd	r25, Y+6	; 0x06
    4c6c:	af 81       	ldd	r26, Y+7	; 0x07
    4c6e:	b8 85       	ldd	r27, Y+8	; 0x08
    4c70:	28 1b       	sub	r18, r24
    4c72:	39 0b       	sbc	r19, r25
    4c74:	4a 0b       	sbc	r20, r26
    4c76:	5b 0b       	sbc	r21, r27
    4c78:	c8 01       	movw	r24, r16
    4c7a:	b7 01       	movw	r22, r14
    4c7c:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <__udivmodsi4>
    4c80:	da 01       	movw	r26, r20
    4c82:	c9 01       	movw	r24, r18
    4c84:	9c 01       	movw	r18, r24
    4c86:	ad 01       	movw	r20, r26
    4c88:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c8c:	af 85       	ldd	r26, Y+15	; 0x0f
    4c8e:	b8 89       	ldd	r27, Y+16	; 0x10
    4c90:	82 0f       	add	r24, r18
    4c92:	93 1f       	adc	r25, r19
    4c94:	a4 1f       	adc	r26, r20
    4c96:	b5 1f       	adc	r27, r21
    4c98:	89 83       	std	Y+1, r24	; 0x01
    4c9a:	9a 83       	std	Y+2, r25	; 0x02
    4c9c:	ab 83       	std	Y+3, r26	; 0x03
    4c9e:	bc 83       	std	Y+4, r27	; 0x04
	return Local;
    4ca0:	89 81       	ldd	r24, Y+1	; 0x01
    4ca2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ca4:	ab 81       	ldd	r26, Y+3	; 0x03
    4ca6:	bc 81       	ldd	r27, Y+4	; 0x04
}
    4ca8:	bc 01       	movw	r22, r24
    4caa:	cd 01       	movw	r24, r26
    4cac:	64 96       	adiw	r28, 0x14	; 20
    4cae:	0f b6       	in	r0, 0x3f	; 63
    4cb0:	f8 94       	cli
    4cb2:	de bf       	out	0x3e, r29	; 62
    4cb4:	0f be       	out	0x3f, r0	; 63
    4cb6:	cd bf       	out	0x3d, r28	; 61
    4cb8:	cf 91       	pop	r28
    4cba:	df 91       	pop	r29
    4cbc:	1f 91       	pop	r17
    4cbe:	0f 91       	pop	r16
    4cc0:	ff 90       	pop	r15
    4cc2:	ef 90       	pop	r14
    4cc4:	df 90       	pop	r13
    4cc6:	cf 90       	pop	r12
    4cc8:	bf 90       	pop	r11
    4cca:	af 90       	pop	r10
    4ccc:	08 95       	ret

00004cce <__mulsi3>:
    4cce:	62 9f       	mul	r22, r18
    4cd0:	d0 01       	movw	r26, r0
    4cd2:	73 9f       	mul	r23, r19
    4cd4:	f0 01       	movw	r30, r0
    4cd6:	82 9f       	mul	r24, r18
    4cd8:	e0 0d       	add	r30, r0
    4cda:	f1 1d       	adc	r31, r1
    4cdc:	64 9f       	mul	r22, r20
    4cde:	e0 0d       	add	r30, r0
    4ce0:	f1 1d       	adc	r31, r1
    4ce2:	92 9f       	mul	r25, r18
    4ce4:	f0 0d       	add	r31, r0
    4ce6:	83 9f       	mul	r24, r19
    4ce8:	f0 0d       	add	r31, r0
    4cea:	74 9f       	mul	r23, r20
    4cec:	f0 0d       	add	r31, r0
    4cee:	65 9f       	mul	r22, r21
    4cf0:	f0 0d       	add	r31, r0
    4cf2:	99 27       	eor	r25, r25
    4cf4:	72 9f       	mul	r23, r18
    4cf6:	b0 0d       	add	r27, r0
    4cf8:	e1 1d       	adc	r30, r1
    4cfa:	f9 1f       	adc	r31, r25
    4cfc:	63 9f       	mul	r22, r19
    4cfe:	b0 0d       	add	r27, r0
    4d00:	e1 1d       	adc	r30, r1
    4d02:	f9 1f       	adc	r31, r25
    4d04:	bd 01       	movw	r22, r26
    4d06:	cf 01       	movw	r24, r30
    4d08:	11 24       	eor	r1, r1
    4d0a:	08 95       	ret

00004d0c <__udivmodhi4>:
    4d0c:	aa 1b       	sub	r26, r26
    4d0e:	bb 1b       	sub	r27, r27
    4d10:	51 e1       	ldi	r21, 0x11	; 17
    4d12:	07 c0       	rjmp	.+14     	; 0x4d22 <__udivmodhi4_ep>

00004d14 <__udivmodhi4_loop>:
    4d14:	aa 1f       	adc	r26, r26
    4d16:	bb 1f       	adc	r27, r27
    4d18:	a6 17       	cp	r26, r22
    4d1a:	b7 07       	cpc	r27, r23
    4d1c:	10 f0       	brcs	.+4      	; 0x4d22 <__udivmodhi4_ep>
    4d1e:	a6 1b       	sub	r26, r22
    4d20:	b7 0b       	sbc	r27, r23

00004d22 <__udivmodhi4_ep>:
    4d22:	88 1f       	adc	r24, r24
    4d24:	99 1f       	adc	r25, r25
    4d26:	5a 95       	dec	r21
    4d28:	a9 f7       	brne	.-22     	; 0x4d14 <__udivmodhi4_loop>
    4d2a:	80 95       	com	r24
    4d2c:	90 95       	com	r25
    4d2e:	bc 01       	movw	r22, r24
    4d30:	cd 01       	movw	r24, r26
    4d32:	08 95       	ret

00004d34 <__udivmodsi4>:
    4d34:	a1 e2       	ldi	r26, 0x21	; 33
    4d36:	1a 2e       	mov	r1, r26
    4d38:	aa 1b       	sub	r26, r26
    4d3a:	bb 1b       	sub	r27, r27
    4d3c:	fd 01       	movw	r30, r26
    4d3e:	0d c0       	rjmp	.+26     	; 0x4d5a <__udivmodsi4_ep>

00004d40 <__udivmodsi4_loop>:
    4d40:	aa 1f       	adc	r26, r26
    4d42:	bb 1f       	adc	r27, r27
    4d44:	ee 1f       	adc	r30, r30
    4d46:	ff 1f       	adc	r31, r31
    4d48:	a2 17       	cp	r26, r18
    4d4a:	b3 07       	cpc	r27, r19
    4d4c:	e4 07       	cpc	r30, r20
    4d4e:	f5 07       	cpc	r31, r21
    4d50:	20 f0       	brcs	.+8      	; 0x4d5a <__udivmodsi4_ep>
    4d52:	a2 1b       	sub	r26, r18
    4d54:	b3 0b       	sbc	r27, r19
    4d56:	e4 0b       	sbc	r30, r20
    4d58:	f5 0b       	sbc	r31, r21

00004d5a <__udivmodsi4_ep>:
    4d5a:	66 1f       	adc	r22, r22
    4d5c:	77 1f       	adc	r23, r23
    4d5e:	88 1f       	adc	r24, r24
    4d60:	99 1f       	adc	r25, r25
    4d62:	1a 94       	dec	r1
    4d64:	69 f7       	brne	.-38     	; 0x4d40 <__udivmodsi4_loop>
    4d66:	60 95       	com	r22
    4d68:	70 95       	com	r23
    4d6a:	80 95       	com	r24
    4d6c:	90 95       	com	r25
    4d6e:	9b 01       	movw	r18, r22
    4d70:	ac 01       	movw	r20, r24
    4d72:	bd 01       	movw	r22, r26
    4d74:	cf 01       	movw	r24, r30
    4d76:	08 95       	ret

00004d78 <__prologue_saves__>:
    4d78:	2f 92       	push	r2
    4d7a:	3f 92       	push	r3
    4d7c:	4f 92       	push	r4
    4d7e:	5f 92       	push	r5
    4d80:	6f 92       	push	r6
    4d82:	7f 92       	push	r7
    4d84:	8f 92       	push	r8
    4d86:	9f 92       	push	r9
    4d88:	af 92       	push	r10
    4d8a:	bf 92       	push	r11
    4d8c:	cf 92       	push	r12
    4d8e:	df 92       	push	r13
    4d90:	ef 92       	push	r14
    4d92:	ff 92       	push	r15
    4d94:	0f 93       	push	r16
    4d96:	1f 93       	push	r17
    4d98:	cf 93       	push	r28
    4d9a:	df 93       	push	r29
    4d9c:	cd b7       	in	r28, 0x3d	; 61
    4d9e:	de b7       	in	r29, 0x3e	; 62
    4da0:	ca 1b       	sub	r28, r26
    4da2:	db 0b       	sbc	r29, r27
    4da4:	0f b6       	in	r0, 0x3f	; 63
    4da6:	f8 94       	cli
    4da8:	de bf       	out	0x3e, r29	; 62
    4daa:	0f be       	out	0x3f, r0	; 63
    4dac:	cd bf       	out	0x3d, r28	; 61
    4dae:	09 94       	ijmp

00004db0 <__epilogue_restores__>:
    4db0:	2a 88       	ldd	r2, Y+18	; 0x12
    4db2:	39 88       	ldd	r3, Y+17	; 0x11
    4db4:	48 88       	ldd	r4, Y+16	; 0x10
    4db6:	5f 84       	ldd	r5, Y+15	; 0x0f
    4db8:	6e 84       	ldd	r6, Y+14	; 0x0e
    4dba:	7d 84       	ldd	r7, Y+13	; 0x0d
    4dbc:	8c 84       	ldd	r8, Y+12	; 0x0c
    4dbe:	9b 84       	ldd	r9, Y+11	; 0x0b
    4dc0:	aa 84       	ldd	r10, Y+10	; 0x0a
    4dc2:	b9 84       	ldd	r11, Y+9	; 0x09
    4dc4:	c8 84       	ldd	r12, Y+8	; 0x08
    4dc6:	df 80       	ldd	r13, Y+7	; 0x07
    4dc8:	ee 80       	ldd	r14, Y+6	; 0x06
    4dca:	fd 80       	ldd	r15, Y+5	; 0x05
    4dcc:	0c 81       	ldd	r16, Y+4	; 0x04
    4dce:	1b 81       	ldd	r17, Y+3	; 0x03
    4dd0:	aa 81       	ldd	r26, Y+2	; 0x02
    4dd2:	b9 81       	ldd	r27, Y+1	; 0x01
    4dd4:	ce 0f       	add	r28, r30
    4dd6:	d1 1d       	adc	r29, r1
    4dd8:	0f b6       	in	r0, 0x3f	; 63
    4dda:	f8 94       	cli
    4ddc:	de bf       	out	0x3e, r29	; 62
    4dde:	0f be       	out	0x3f, r0	; 63
    4de0:	cd bf       	out	0x3d, r28	; 61
    4de2:	ed 01       	movw	r28, r26
    4de4:	08 95       	ret

00004de6 <_exit>:
    4de6:	f8 94       	cli

00004de8 <__stop_program>:
    4de8:	ff cf       	rjmp	.-2      	; 0x4de8 <__stop_program>
