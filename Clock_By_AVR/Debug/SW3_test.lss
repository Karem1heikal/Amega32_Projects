
SW3_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000473a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000144  00800060  0000473a  000047ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  008001a4  008001a4  00004912  2**0
                  ALLOC
  3 .stab         000049bc  00000000  00000000  00004914  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016c1  00000000  00000000  000092d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000a991  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000ab31  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000ad23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000d12e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000e4b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000f68c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000f84c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000fb42  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000104b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 74 12 	jmp	0x24e8	; 0x24e8 <__vector_1>
       8:	0c 94 a1 12 	jmp	0x2542	; 0x2542 <__vector_2>
       c:	0c 94 ce 12 	jmp	0x259c	; 0x259c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e3       	ldi	r30, 0x3A	; 58
      68:	f7 e4       	ldi	r31, 0x47	; 71
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3a       	cpi	r26, 0xA4	; 164
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 ea       	ldi	r26, 0xA4	; 164
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3b       	cpi	r26, 0xB6	; 182
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <main>
      8a:	0c 94 9b 23 	jmp	0x4736	; 0x4736 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 64 23 	jmp	0x46c8	; 0x46c8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e6       	ldi	r26, 0x6E	; 110
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 80 23 	jmp	0x4700	; 0x4700 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 70 23 	jmp	0x46e0	; 0x46e0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8c 23 	jmp	0x4718	; 0x4718 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 70 23 	jmp	0x46e0	; 0x46e0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8c 23 	jmp	0x4718	; 0x4718 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 64 23 	jmp	0x46c8	; 0x46c8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e6       	ldi	r24, 0x6E	; 110
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 80 23 	jmp	0x4700	; 0x4700 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6c 23 	jmp	0x46d8	; 0x46d8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e e6       	ldi	r22, 0x6E	; 110
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 88 23 	jmp	0x4710	; 0x4710 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 70 23 	jmp	0x46e0	; 0x46e0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 8c 23 	jmp	0x4718	; 0x4718 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 70 23 	jmp	0x46e0	; 0x46e0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 8c 23 	jmp	0x4718	; 0x4718 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 70 23 	jmp	0x46e0	; 0x46e0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 8c 23 	jmp	0x4718	; 0x4718 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 74 23 	jmp	0x46e8	; 0x46e8 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 90 23 	jmp	0x4720	; 0x4720 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 6c 23 	jmp	0x46d8	; 0x46d8 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 88 23 	jmp	0x4710	; 0x4710 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ea 58       	subi	r30, 0x8A	; 138
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <CLCD_voidSendCommand>:
#include "../HAL/CLCD_interface.h"
#include "../HAL/CLCD_private.h"

static u8 iniIsFinich=0;
void CLCD_voidSendCommand(u8 Copy_u8Command)//math
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	ac 97       	sbiw	r28, 0x2c	; 44
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	8c a7       	std	Y+44, r24	; 0x2c
	/*PIN SET  send pulse (E) */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_HIGH);
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_LOW);
#elif CLCD_CHIOCE_MODE==_4_BIT_MODE
	u8 Local_u8Mask = 0b11110000;
     e44:	80 ef       	ldi	r24, 0xF0	; 240
     e46:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_PIN_LOW);
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	40 e0       	ldi	r20, 0x00	; 0
     e4e:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8SetPinValue>
	/*PIN RW SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_PIN_LOW);
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	61 e0       	ldi	r22, 0x01	; 1
     e56:	40 e0       	ldi	r20, 0x00	; 0
     e58:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8SetPinValue>
	/*PORT SET COMMAND*/
	Local_u8Mask &= Copy_u8Command;
     e5c:	9b a5       	ldd	r25, Y+43	; 0x2b
     e5e:	8c a5       	ldd	r24, Y+44	; 0x2c
     e60:	89 23       	and	r24, r25
     e62:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPortValue(CLCD_DATA_PORT, Local_u8Mask);
     e64:	82 e0       	ldi	r24, 0x02	; 2
     e66:	6b a5       	ldd	r22, Y+43	; 0x2b
     e68:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <DIO_u8SetPortValue>
	/*PIN SET  send pulse (E) */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_HIGH);
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	62 e0       	ldi	r22, 0x02	; 2
     e70:	41 e0       	ldi	r20, 0x01	; 1
     e72:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8SetPinValue>
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	a0 e0       	ldi	r26, 0x00	; 0
     e7c:	b0 e4       	ldi	r27, 0x40	; 64
     e7e:	8f a3       	std	Y+39, r24	; 0x27
     e80:	98 a7       	std	Y+40, r25	; 0x28
     e82:	a9 a7       	std	Y+41, r26	; 0x29
     e84:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e86:	6f a1       	ldd	r22, Y+39	; 0x27
     e88:	78 a5       	ldd	r23, Y+40	; 0x28
     e8a:	89 a5       	ldd	r24, Y+41	; 0x29
     e8c:	9a a5       	ldd	r25, Y+42	; 0x2a
     e8e:	20 e0       	ldi	r18, 0x00	; 0
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	4a ef       	ldi	r20, 0xFA	; 250
     e94:	54 e4       	ldi	r21, 0x44	; 68
     e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	8b a3       	std	Y+35, r24	; 0x23
     ea0:	9c a3       	std	Y+36, r25	; 0x24
     ea2:	ad a3       	std	Y+37, r26	; 0x25
     ea4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     ea6:	6b a1       	ldd	r22, Y+35	; 0x23
     ea8:	7c a1       	ldd	r23, Y+36	; 0x24
     eaa:	8d a1       	ldd	r24, Y+37	; 0x25
     eac:	9e a1       	ldd	r25, Y+38	; 0x26
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	40 e8       	ldi	r20, 0x80	; 128
     eb4:	5f e3       	ldi	r21, 0x3F	; 63
     eb6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     eba:	88 23       	and	r24, r24
     ebc:	2c f4       	brge	.+10     	; 0xec8 <CLCD_voidSendCommand+0x9a>
		__ticks = 1;
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	9a a3       	std	Y+34, r25	; 0x22
     ec4:	89 a3       	std	Y+33, r24	; 0x21
     ec6:	3f c0       	rjmp	.+126    	; 0xf46 <CLCD_voidSendCommand+0x118>
	else if (__tmp > 65535)
     ec8:	6b a1       	ldd	r22, Y+35	; 0x23
     eca:	7c a1       	ldd	r23, Y+36	; 0x24
     ecc:	8d a1       	ldd	r24, Y+37	; 0x25
     ece:	9e a1       	ldd	r25, Y+38	; 0x26
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	3f ef       	ldi	r19, 0xFF	; 255
     ed4:	4f e7       	ldi	r20, 0x7F	; 127
     ed6:	57 e4       	ldi	r21, 0x47	; 71
     ed8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     edc:	18 16       	cp	r1, r24
     ede:	4c f5       	brge	.+82     	; 0xf32 <CLCD_voidSendCommand+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ee0:	6f a1       	ldd	r22, Y+39	; 0x27
     ee2:	78 a5       	ldd	r23, Y+40	; 0x28
     ee4:	89 a5       	ldd	r24, Y+41	; 0x29
     ee6:	9a a5       	ldd	r25, Y+42	; 0x2a
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	40 e2       	ldi	r20, 0x20	; 32
     eee:	51 e4       	ldi	r21, 0x41	; 65
     ef0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	bc 01       	movw	r22, r24
     efa:	cd 01       	movw	r24, r26
     efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	9a a3       	std	Y+34, r25	; 0x22
     f06:	89 a3       	std	Y+33, r24	; 0x21
     f08:	0f c0       	rjmp	.+30     	; 0xf28 <CLCD_voidSendCommand+0xfa>
     f0a:	88 ec       	ldi	r24, 0xC8	; 200
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	98 a3       	std	Y+32, r25	; 0x20
     f10:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f12:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f14:	98 a1       	ldd	r25, Y+32	; 0x20
     f16:	01 97       	sbiw	r24, 0x01	; 1
     f18:	f1 f7       	brne	.-4      	; 0xf16 <CLCD_voidSendCommand+0xe8>
     f1a:	98 a3       	std	Y+32, r25	; 0x20
     f1c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f1e:	89 a1       	ldd	r24, Y+33	; 0x21
     f20:	9a a1       	ldd	r25, Y+34	; 0x22
     f22:	01 97       	sbiw	r24, 0x01	; 1
     f24:	9a a3       	std	Y+34, r25	; 0x22
     f26:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f28:	89 a1       	ldd	r24, Y+33	; 0x21
     f2a:	9a a1       	ldd	r25, Y+34	; 0x22
     f2c:	00 97       	sbiw	r24, 0x00	; 0
     f2e:	69 f7       	brne	.-38     	; 0xf0a <CLCD_voidSendCommand+0xdc>
     f30:	14 c0       	rjmp	.+40     	; 0xf5a <CLCD_voidSendCommand+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f32:	6b a1       	ldd	r22, Y+35	; 0x23
     f34:	7c a1       	ldd	r23, Y+36	; 0x24
     f36:	8d a1       	ldd	r24, Y+37	; 0x25
     f38:	9e a1       	ldd	r25, Y+38	; 0x26
     f3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f3e:	dc 01       	movw	r26, r24
     f40:	cb 01       	movw	r24, r22
     f42:	9a a3       	std	Y+34, r25	; 0x22
     f44:	89 a3       	std	Y+33, r24	; 0x21
     f46:	89 a1       	ldd	r24, Y+33	; 0x21
     f48:	9a a1       	ldd	r25, Y+34	; 0x22
     f4a:	9e 8f       	std	Y+30, r25	; 0x1e
     f4c:	8d 8f       	std	Y+29, r24	; 0x1d
     f4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f50:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f52:	01 97       	sbiw	r24, 0x01	; 1
     f54:	f1 f7       	brne	.-4      	; 0xf52 <CLCD_voidSendCommand+0x124>
     f56:	9e 8f       	std	Y+30, r25	; 0x1e
     f58:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	62 e0       	ldi	r22, 0x02	; 2
     f5e:	40 e0       	ldi	r20, 0x00	; 0
     f60:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8SetPinValue>
	if(iniIsFinich)
     f64:	80 91 a4 01 	lds	r24, 0x01A4
     f68:	88 23       	and	r24, r24
     f6a:	09 f4       	brne	.+2      	; 0xf6e <CLCD_voidSendCommand+0x140>
     f6c:	8c c0       	rjmp	.+280    	; 0x1086 <CLCD_voidSendCommand+0x258>
	{
		Local_u8Mask = 0b11110000;
     f6e:	80 ef       	ldi	r24, 0xF0	; 240
     f70:	8b a7       	std	Y+43, r24	; 0x2b
		Local_u8Mask = ~(Local_u8Mask) & Copy_u8Command;
     f72:	8b a5       	ldd	r24, Y+43	; 0x2b
     f74:	98 2f       	mov	r25, r24
     f76:	90 95       	com	r25
     f78:	8c a5       	ldd	r24, Y+44	; 0x2c
     f7a:	89 23       	and	r24, r25
     f7c:	8b a7       	std	Y+43, r24	; 0x2b
		DIO_u8SetPortValue(CLCD_DATA_PORT, (Local_u8Mask << 4));
     f7e:	8b a5       	ldd	r24, Y+43	; 0x2b
     f80:	98 2f       	mov	r25, r24
     f82:	92 95       	swap	r25
     f84:	90 7f       	andi	r25, 0xF0	; 240
     f86:	82 e0       	ldi	r24, 0x02	; 2
     f88:	69 2f       	mov	r22, r25
     f8a:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <DIO_u8SetPortValue>
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_HIGH);
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	62 e0       	ldi	r22, 0x02	; 2
     f92:	41 e0       	ldi	r20, 0x01	; 1
     f94:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8SetPinValue>
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	a0 e0       	ldi	r26, 0x00	; 0
     f9e:	b0 e4       	ldi	r27, 0x40	; 64
     fa0:	89 8f       	std	Y+25, r24	; 0x19
     fa2:	9a 8f       	std	Y+26, r25	; 0x1a
     fa4:	ab 8f       	std	Y+27, r26	; 0x1b
     fa6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fa8:	69 8d       	ldd	r22, Y+25	; 0x19
     faa:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fac:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fae:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	4a ef       	ldi	r20, 0xFA	; 250
     fb6:	54 e4       	ldi	r21, 0x44	; 68
     fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fbc:	dc 01       	movw	r26, r24
     fbe:	cb 01       	movw	r24, r22
     fc0:	8d 8b       	std	Y+21, r24	; 0x15
     fc2:	9e 8b       	std	Y+22, r25	; 0x16
     fc4:	af 8b       	std	Y+23, r26	; 0x17
     fc6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fc8:	6d 89       	ldd	r22, Y+21	; 0x15
     fca:	7e 89       	ldd	r23, Y+22	; 0x16
     fcc:	8f 89       	ldd	r24, Y+23	; 0x17
     fce:	98 8d       	ldd	r25, Y+24	; 0x18
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	40 e8       	ldi	r20, 0x80	; 128
     fd6:	5f e3       	ldi	r21, 0x3F	; 63
     fd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fdc:	88 23       	and	r24, r24
     fde:	2c f4       	brge	.+10     	; 0xfea <CLCD_voidSendCommand+0x1bc>
		__ticks = 1;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	9c 8b       	std	Y+20, r25	; 0x14
     fe6:	8b 8b       	std	Y+19, r24	; 0x13
     fe8:	3f c0       	rjmp	.+126    	; 0x1068 <CLCD_voidSendCommand+0x23a>
	else if (__tmp > 65535)
     fea:	6d 89       	ldd	r22, Y+21	; 0x15
     fec:	7e 89       	ldd	r23, Y+22	; 0x16
     fee:	8f 89       	ldd	r24, Y+23	; 0x17
     ff0:	98 8d       	ldd	r25, Y+24	; 0x18
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	3f ef       	ldi	r19, 0xFF	; 255
     ff6:	4f e7       	ldi	r20, 0x7F	; 127
     ff8:	57 e4       	ldi	r21, 0x47	; 71
     ffa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ffe:	18 16       	cp	r1, r24
    1000:	4c f5       	brge	.+82     	; 0x1054 <CLCD_voidSendCommand+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1002:	69 8d       	ldd	r22, Y+25	; 0x19
    1004:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1006:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1008:	9c 8d       	ldd	r25, Y+28	; 0x1c
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	40 e2       	ldi	r20, 0x20	; 32
    1010:	51 e4       	ldi	r21, 0x41	; 65
    1012:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1016:	dc 01       	movw	r26, r24
    1018:	cb 01       	movw	r24, r22
    101a:	bc 01       	movw	r22, r24
    101c:	cd 01       	movw	r24, r26
    101e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1022:	dc 01       	movw	r26, r24
    1024:	cb 01       	movw	r24, r22
    1026:	9c 8b       	std	Y+20, r25	; 0x14
    1028:	8b 8b       	std	Y+19, r24	; 0x13
    102a:	0f c0       	rjmp	.+30     	; 0x104a <CLCD_voidSendCommand+0x21c>
    102c:	88 ec       	ldi	r24, 0xC8	; 200
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	9a 8b       	std	Y+18, r25	; 0x12
    1032:	89 8b       	std	Y+17, r24	; 0x11
    1034:	89 89       	ldd	r24, Y+17	; 0x11
    1036:	9a 89       	ldd	r25, Y+18	; 0x12
    1038:	01 97       	sbiw	r24, 0x01	; 1
    103a:	f1 f7       	brne	.-4      	; 0x1038 <CLCD_voidSendCommand+0x20a>
    103c:	9a 8b       	std	Y+18, r25	; 0x12
    103e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1040:	8b 89       	ldd	r24, Y+19	; 0x13
    1042:	9c 89       	ldd	r25, Y+20	; 0x14
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	9c 8b       	std	Y+20, r25	; 0x14
    1048:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    104a:	8b 89       	ldd	r24, Y+19	; 0x13
    104c:	9c 89       	ldd	r25, Y+20	; 0x14
    104e:	00 97       	sbiw	r24, 0x00	; 0
    1050:	69 f7       	brne	.-38     	; 0x102c <CLCD_voidSendCommand+0x1fe>
    1052:	14 c0       	rjmp	.+40     	; 0x107c <CLCD_voidSendCommand+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1054:	6d 89       	ldd	r22, Y+21	; 0x15
    1056:	7e 89       	ldd	r23, Y+22	; 0x16
    1058:	8f 89       	ldd	r24, Y+23	; 0x17
    105a:	98 8d       	ldd	r25, Y+24	; 0x18
    105c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	9c 8b       	std	Y+20, r25	; 0x14
    1066:	8b 8b       	std	Y+19, r24	; 0x13
    1068:	8b 89       	ldd	r24, Y+19	; 0x13
    106a:	9c 89       	ldd	r25, Y+20	; 0x14
    106c:	98 8b       	std	Y+16, r25	; 0x10
    106e:	8f 87       	std	Y+15, r24	; 0x0f
    1070:	8f 85       	ldd	r24, Y+15	; 0x0f
    1072:	98 89       	ldd	r25, Y+16	; 0x10
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	f1 f7       	brne	.-4      	; 0x1074 <CLCD_voidSendCommand+0x246>
    1078:	98 8b       	std	Y+16, r25	; 0x10
    107a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	62 e0       	ldi	r22, 0x02	; 2
    1080:	40 e0       	ldi	r20, 0x00	; 0
    1082:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8SetPinValue>
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	a0 e0       	ldi	r26, 0x00	; 0
    108c:	b0 e4       	ldi	r27, 0x40	; 64
    108e:	8b 87       	std	Y+11, r24	; 0x0b
    1090:	9c 87       	std	Y+12, r25	; 0x0c
    1092:	ad 87       	std	Y+13, r26	; 0x0d
    1094:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1096:	6b 85       	ldd	r22, Y+11	; 0x0b
    1098:	7c 85       	ldd	r23, Y+12	; 0x0c
    109a:	8d 85       	ldd	r24, Y+13	; 0x0d
    109c:	9e 85       	ldd	r25, Y+14	; 0x0e
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	4a ef       	ldi	r20, 0xFA	; 250
    10a4:	54 e4       	ldi	r21, 0x44	; 68
    10a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10aa:	dc 01       	movw	r26, r24
    10ac:	cb 01       	movw	r24, r22
    10ae:	8f 83       	std	Y+7, r24	; 0x07
    10b0:	98 87       	std	Y+8, r25	; 0x08
    10b2:	a9 87       	std	Y+9, r26	; 0x09
    10b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10b6:	6f 81       	ldd	r22, Y+7	; 0x07
    10b8:	78 85       	ldd	r23, Y+8	; 0x08
    10ba:	89 85       	ldd	r24, Y+9	; 0x09
    10bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	40 e8       	ldi	r20, 0x80	; 128
    10c4:	5f e3       	ldi	r21, 0x3F	; 63
    10c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10ca:	88 23       	and	r24, r24
    10cc:	2c f4       	brge	.+10     	; 0x10d8 <CLCD_voidSendCommand+0x2aa>
		__ticks = 1;
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	9e 83       	std	Y+6, r25	; 0x06
    10d4:	8d 83       	std	Y+5, r24	; 0x05
    10d6:	3f c0       	rjmp	.+126    	; 0x1156 <CLCD_voidSendCommand+0x328>
	else if (__tmp > 65535)
    10d8:	6f 81       	ldd	r22, Y+7	; 0x07
    10da:	78 85       	ldd	r23, Y+8	; 0x08
    10dc:	89 85       	ldd	r24, Y+9	; 0x09
    10de:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	3f ef       	ldi	r19, 0xFF	; 255
    10e4:	4f e7       	ldi	r20, 0x7F	; 127
    10e6:	57 e4       	ldi	r21, 0x47	; 71
    10e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10ec:	18 16       	cp	r1, r24
    10ee:	4c f5       	brge	.+82     	; 0x1142 <CLCD_voidSendCommand+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    10f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    10f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    10f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	40 e2       	ldi	r20, 0x20	; 32
    10fe:	51 e4       	ldi	r21, 0x41	; 65
    1100:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	bc 01       	movw	r22, r24
    110a:	cd 01       	movw	r24, r26
    110c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1110:	dc 01       	movw	r26, r24
    1112:	cb 01       	movw	r24, r22
    1114:	9e 83       	std	Y+6, r25	; 0x06
    1116:	8d 83       	std	Y+5, r24	; 0x05
    1118:	0f c0       	rjmp	.+30     	; 0x1138 <CLCD_voidSendCommand+0x30a>
    111a:	88 ec       	ldi	r24, 0xC8	; 200
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	9c 83       	std	Y+4, r25	; 0x04
    1120:	8b 83       	std	Y+3, r24	; 0x03
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	9c 81       	ldd	r25, Y+4	; 0x04
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	f1 f7       	brne	.-4      	; 0x1126 <CLCD_voidSendCommand+0x2f8>
    112a:	9c 83       	std	Y+4, r25	; 0x04
    112c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    112e:	8d 81       	ldd	r24, Y+5	; 0x05
    1130:	9e 81       	ldd	r25, Y+6	; 0x06
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	9e 83       	std	Y+6, r25	; 0x06
    1136:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1138:	8d 81       	ldd	r24, Y+5	; 0x05
    113a:	9e 81       	ldd	r25, Y+6	; 0x06
    113c:	00 97       	sbiw	r24, 0x00	; 0
    113e:	69 f7       	brne	.-38     	; 0x111a <CLCD_voidSendCommand+0x2ec>
    1140:	14 c0       	rjmp	.+40     	; 0x116a <CLCD_voidSendCommand+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1142:	6f 81       	ldd	r22, Y+7	; 0x07
    1144:	78 85       	ldd	r23, Y+8	; 0x08
    1146:	89 85       	ldd	r24, Y+9	; 0x09
    1148:	9a 85       	ldd	r25, Y+10	; 0x0a
    114a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    114e:	dc 01       	movw	r26, r24
    1150:	cb 01       	movw	r24, r22
    1152:	9e 83       	std	Y+6, r25	; 0x06
    1154:	8d 83       	std	Y+5, r24	; 0x05
    1156:	8d 81       	ldd	r24, Y+5	; 0x05
    1158:	9e 81       	ldd	r25, Y+6	; 0x06
    115a:	9a 83       	std	Y+2, r25	; 0x02
    115c:	89 83       	std	Y+1, r24	; 0x01
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	9a 81       	ldd	r25, Y+2	; 0x02
    1162:	01 97       	sbiw	r24, 0x01	; 1
    1164:	f1 f7       	brne	.-4      	; 0x1162 <CLCD_voidSendCommand+0x334>
    1166:	9a 83       	std	Y+2, r25	; 0x02
    1168:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
#else
#error "In correct cconfigrtion of LCD_MODE"
#endif

}
    116a:	ac 96       	adiw	r28, 0x2c	; 44
    116c:	0f b6       	in	r0, 0x3f	; 63
    116e:	f8 94       	cli
    1170:	de bf       	out	0x3e, r29	; 62
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	cd bf       	out	0x3d, r28	; 61
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	08 95       	ret

0000117c <CLCD_Read_BF_AC>:
u8 CLCD_Read_BF_AC() {
    117c:	df 93       	push	r29
    117e:	cf 93       	push	r28
    1180:	00 d0       	rcall	.+0      	; 0x1182 <CLCD_Read_BF_AC+0x6>
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Address = 0;
    1186:	1a 82       	std	Y+2, r1	; 0x02
	/*PIN RS SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_PIN_LOW);
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	40 e0       	ldi	r20, 0x00	; 0
    118e:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8SetPinValue>
	/*PIN RW SET HIGH  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_PIN_HIGH);
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	61 e0       	ldi	r22, 0x01	; 1
    1196:	41 e0       	ldi	r20, 0x01	; 1
    1198:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8SetPinValue>
	/*PIN SET  send pulse (E) */
	for (u8 i = 0; i < 7; i++) {
    119c:	19 82       	std	Y+1, r1	; 0x01
    119e:	1c c0       	rjmp	.+56     	; 0x11d8 <CLCD_Read_BF_AC+0x5c>
		DIO_u8GetPinValue(CLCD_DATA_PORT, i, &Local_u8Address);
    11a0:	9e 01       	movw	r18, r28
    11a2:	2e 5f       	subi	r18, 0xFE	; 254
    11a4:	3f 4f       	sbci	r19, 0xFF	; 255
    11a6:	82 e0       	ldi	r24, 0x02	; 2
    11a8:	69 81       	ldd	r22, Y+1	; 0x01
    11aa:	a9 01       	movw	r20, r18
    11ac:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8GetPinValue>
		Local_u8Address += Local_u8Address << i;
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	88 2f       	mov	r24, r24
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	a9 01       	movw	r20, r18
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <CLCD_Read_BF_AC+0x48>
    11c0:	44 0f       	add	r20, r20
    11c2:	55 1f       	adc	r21, r21
    11c4:	8a 95       	dec	r24
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <CLCD_Read_BF_AC+0x44>
    11c8:	ca 01       	movw	r24, r20
    11ca:	98 2f       	mov	r25, r24
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	89 0f       	add	r24, r25
    11d0:	8a 83       	std	Y+2, r24	; 0x02
	/*PIN RS SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_PIN_LOW);
	/*PIN RW SET HIGH  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_PIN_HIGH);
	/*PIN SET  send pulse (E) */
	for (u8 i = 0; i < 7; i++) {
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	8f 5f       	subi	r24, 0xFF	; 255
    11d6:	89 83       	std	Y+1, r24	; 0x01
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	87 30       	cpi	r24, 0x07	; 7
    11dc:	08 f3       	brcs	.-62     	; 0x11a0 <CLCD_Read_BF_AC+0x24>
		DIO_u8GetPinValue(CLCD_DATA_PORT, i, &Local_u8Address);
		Local_u8Address += Local_u8Address << i;
	}
	return Local_u8Address;
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
}
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	cf 91       	pop	r28
    11e6:	df 91       	pop	r29
    11e8:	08 95       	ret

000011ea <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    11ea:	df 93       	push	r29
    11ec:	cf 93       	push	r28
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	ac 97       	sbiw	r28, 0x2c	; 44
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	f8 94       	cli
    11f8:	de bf       	out	0x3e, r29	; 62
    11fa:	0f be       	out	0x3f, r0	; 63
    11fc:	cd bf       	out	0x3d, r28	; 61
    11fe:	8c a7       	std	Y+44, r24	; 0x2c
	if (Local_u8Address > 0x0f)
		CLCD_voidSendCommand(0x0C);
	else
		CLCD_voidSendCommand(0x06);
#elif CLCD_CHIOCE_MODE==_4_BIT_MODE
	u8 Local_u8Mask = 0b11110000;
    1200:	80 ef       	ldi	r24, 0xF0	; 240
    1202:	8b a7       	std	Y+43, r24	; 0x2b
	/*PIN RS SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_PIN_HIGH);
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	41 e0       	ldi	r20, 0x01	; 1
    120a:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8SetPinValue>
	/*PIN RW SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_PIN_LOW);
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	61 e0       	ldi	r22, 0x01	; 1
    1212:	40 e0       	ldi	r20, 0x00	; 0
    1214:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8SetPinValue>
	/*PORT SET COMMAND*/
	Local_u8Mask &= Copy_u8Data;
    1218:	9b a5       	ldd	r25, Y+43	; 0x2b
    121a:	8c a5       	ldd	r24, Y+44	; 0x2c
    121c:	89 23       	and	r24, r25
    121e:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Mask);
    1220:	82 e0       	ldi	r24, 0x02	; 2
    1222:	6b a5       	ldd	r22, Y+43	; 0x2b
    1224:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <DIO_u8SetPortValue>
	/*PIN SET send pulse (E) */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_HIGH);
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	62 e0       	ldi	r22, 0x02	; 2
    122c:	41 e0       	ldi	r20, 0x01	; 1
    122e:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8SetPinValue>
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	a0 e0       	ldi	r26, 0x00	; 0
    1238:	b0 e4       	ldi	r27, 0x40	; 64
    123a:	8f a3       	std	Y+39, r24	; 0x27
    123c:	98 a7       	std	Y+40, r25	; 0x28
    123e:	a9 a7       	std	Y+41, r26	; 0x29
    1240:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1242:	6f a1       	ldd	r22, Y+39	; 0x27
    1244:	78 a5       	ldd	r23, Y+40	; 0x28
    1246:	89 a5       	ldd	r24, Y+41	; 0x29
    1248:	9a a5       	ldd	r25, Y+42	; 0x2a
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	4a ef       	ldi	r20, 0xFA	; 250
    1250:	54 e4       	ldi	r21, 0x44	; 68
    1252:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1256:	dc 01       	movw	r26, r24
    1258:	cb 01       	movw	r24, r22
    125a:	8b a3       	std	Y+35, r24	; 0x23
    125c:	9c a3       	std	Y+36, r25	; 0x24
    125e:	ad a3       	std	Y+37, r26	; 0x25
    1260:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1262:	6b a1       	ldd	r22, Y+35	; 0x23
    1264:	7c a1       	ldd	r23, Y+36	; 0x24
    1266:	8d a1       	ldd	r24, Y+37	; 0x25
    1268:	9e a1       	ldd	r25, Y+38	; 0x26
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	40 e8       	ldi	r20, 0x80	; 128
    1270:	5f e3       	ldi	r21, 0x3F	; 63
    1272:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1276:	88 23       	and	r24, r24
    1278:	2c f4       	brge	.+10     	; 0x1284 <CLCD_voidSendData+0x9a>
		__ticks = 1;
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	9a a3       	std	Y+34, r25	; 0x22
    1280:	89 a3       	std	Y+33, r24	; 0x21
    1282:	3f c0       	rjmp	.+126    	; 0x1302 <CLCD_voidSendData+0x118>
	else if (__tmp > 65535)
    1284:	6b a1       	ldd	r22, Y+35	; 0x23
    1286:	7c a1       	ldd	r23, Y+36	; 0x24
    1288:	8d a1       	ldd	r24, Y+37	; 0x25
    128a:	9e a1       	ldd	r25, Y+38	; 0x26
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	3f ef       	ldi	r19, 0xFF	; 255
    1290:	4f e7       	ldi	r20, 0x7F	; 127
    1292:	57 e4       	ldi	r21, 0x47	; 71
    1294:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1298:	18 16       	cp	r1, r24
    129a:	4c f5       	brge	.+82     	; 0x12ee <CLCD_voidSendData+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    129c:	6f a1       	ldd	r22, Y+39	; 0x27
    129e:	78 a5       	ldd	r23, Y+40	; 0x28
    12a0:	89 a5       	ldd	r24, Y+41	; 0x29
    12a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	40 e2       	ldi	r20, 0x20	; 32
    12aa:	51 e4       	ldi	r21, 0x41	; 65
    12ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b0:	dc 01       	movw	r26, r24
    12b2:	cb 01       	movw	r24, r22
    12b4:	bc 01       	movw	r22, r24
    12b6:	cd 01       	movw	r24, r26
    12b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12bc:	dc 01       	movw	r26, r24
    12be:	cb 01       	movw	r24, r22
    12c0:	9a a3       	std	Y+34, r25	; 0x22
    12c2:	89 a3       	std	Y+33, r24	; 0x21
    12c4:	0f c0       	rjmp	.+30     	; 0x12e4 <CLCD_voidSendData+0xfa>
    12c6:	88 ec       	ldi	r24, 0xC8	; 200
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	98 a3       	std	Y+32, r25	; 0x20
    12cc:	8f 8f       	std	Y+31, r24	; 0x1f
    12ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12d0:	98 a1       	ldd	r25, Y+32	; 0x20
    12d2:	01 97       	sbiw	r24, 0x01	; 1
    12d4:	f1 f7       	brne	.-4      	; 0x12d2 <CLCD_voidSendData+0xe8>
    12d6:	98 a3       	std	Y+32, r25	; 0x20
    12d8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12da:	89 a1       	ldd	r24, Y+33	; 0x21
    12dc:	9a a1       	ldd	r25, Y+34	; 0x22
    12de:	01 97       	sbiw	r24, 0x01	; 1
    12e0:	9a a3       	std	Y+34, r25	; 0x22
    12e2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e4:	89 a1       	ldd	r24, Y+33	; 0x21
    12e6:	9a a1       	ldd	r25, Y+34	; 0x22
    12e8:	00 97       	sbiw	r24, 0x00	; 0
    12ea:	69 f7       	brne	.-38     	; 0x12c6 <CLCD_voidSendData+0xdc>
    12ec:	14 c0       	rjmp	.+40     	; 0x1316 <CLCD_voidSendData+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ee:	6b a1       	ldd	r22, Y+35	; 0x23
    12f0:	7c a1       	ldd	r23, Y+36	; 0x24
    12f2:	8d a1       	ldd	r24, Y+37	; 0x25
    12f4:	9e a1       	ldd	r25, Y+38	; 0x26
    12f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12fa:	dc 01       	movw	r26, r24
    12fc:	cb 01       	movw	r24, r22
    12fe:	9a a3       	std	Y+34, r25	; 0x22
    1300:	89 a3       	std	Y+33, r24	; 0x21
    1302:	89 a1       	ldd	r24, Y+33	; 0x21
    1304:	9a a1       	ldd	r25, Y+34	; 0x22
    1306:	9e 8f       	std	Y+30, r25	; 0x1e
    1308:	8d 8f       	std	Y+29, r24	; 0x1d
    130a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    130c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    130e:	01 97       	sbiw	r24, 0x01	; 1
    1310:	f1 f7       	brne	.-4      	; 0x130e <CLCD_voidSendData+0x124>
    1312:	9e 8f       	std	Y+30, r25	; 0x1e
    1314:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	62 e0       	ldi	r22, 0x02	; 2
    131a:	40 e0       	ldi	r20, 0x00	; 0
    131c:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8SetPinValue>
	Local_u8Mask=0b11110000;
    1320:	80 ef       	ldi	r24, 0xF0	; 240
    1322:	8b a7       	std	Y+43, r24	; 0x2b
	Local_u8Mask = ~(Local_u8Mask) & Copy_u8Data;
    1324:	8b a5       	ldd	r24, Y+43	; 0x2b
    1326:	98 2f       	mov	r25, r24
    1328:	90 95       	com	r25
    132a:	8c a5       	ldd	r24, Y+44	; 0x2c
    132c:	89 23       	and	r24, r25
    132e:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPortValue(CLCD_DATA_PORT, (Local_u8Mask << 4));
    1330:	8b a5       	ldd	r24, Y+43	; 0x2b
    1332:	98 2f       	mov	r25, r24
    1334:	92 95       	swap	r25
    1336:	90 7f       	andi	r25, 0xF0	; 240
    1338:	82 e0       	ldi	r24, 0x02	; 2
    133a:	69 2f       	mov	r22, r25
    133c:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <DIO_u8SetPortValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_HIGH);
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	62 e0       	ldi	r22, 0x02	; 2
    1344:	41 e0       	ldi	r20, 0x01	; 1
    1346:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8SetPinValue>
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	a0 e0       	ldi	r26, 0x00	; 0
    1350:	b0 e4       	ldi	r27, 0x40	; 64
    1352:	89 8f       	std	Y+25, r24	; 0x19
    1354:	9a 8f       	std	Y+26, r25	; 0x1a
    1356:	ab 8f       	std	Y+27, r26	; 0x1b
    1358:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    135a:	69 8d       	ldd	r22, Y+25	; 0x19
    135c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    135e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1360:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	4a ef       	ldi	r20, 0xFA	; 250
    1368:	54 e4       	ldi	r21, 0x44	; 68
    136a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    136e:	dc 01       	movw	r26, r24
    1370:	cb 01       	movw	r24, r22
    1372:	8d 8b       	std	Y+21, r24	; 0x15
    1374:	9e 8b       	std	Y+22, r25	; 0x16
    1376:	af 8b       	std	Y+23, r26	; 0x17
    1378:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    137a:	6d 89       	ldd	r22, Y+21	; 0x15
    137c:	7e 89       	ldd	r23, Y+22	; 0x16
    137e:	8f 89       	ldd	r24, Y+23	; 0x17
    1380:	98 8d       	ldd	r25, Y+24	; 0x18
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	40 e8       	ldi	r20, 0x80	; 128
    1388:	5f e3       	ldi	r21, 0x3F	; 63
    138a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    138e:	88 23       	and	r24, r24
    1390:	2c f4       	brge	.+10     	; 0x139c <CLCD_voidSendData+0x1b2>
		__ticks = 1;
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	9c 8b       	std	Y+20, r25	; 0x14
    1398:	8b 8b       	std	Y+19, r24	; 0x13
    139a:	3f c0       	rjmp	.+126    	; 0x141a <CLCD_voidSendData+0x230>
	else if (__tmp > 65535)
    139c:	6d 89       	ldd	r22, Y+21	; 0x15
    139e:	7e 89       	ldd	r23, Y+22	; 0x16
    13a0:	8f 89       	ldd	r24, Y+23	; 0x17
    13a2:	98 8d       	ldd	r25, Y+24	; 0x18
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	3f ef       	ldi	r19, 0xFF	; 255
    13a8:	4f e7       	ldi	r20, 0x7F	; 127
    13aa:	57 e4       	ldi	r21, 0x47	; 71
    13ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13b0:	18 16       	cp	r1, r24
    13b2:	4c f5       	brge	.+82     	; 0x1406 <CLCD_voidSendData+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13b4:	69 8d       	ldd	r22, Y+25	; 0x19
    13b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	40 e2       	ldi	r20, 0x20	; 32
    13c2:	51 e4       	ldi	r21, 0x41	; 65
    13c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c8:	dc 01       	movw	r26, r24
    13ca:	cb 01       	movw	r24, r22
    13cc:	bc 01       	movw	r22, r24
    13ce:	cd 01       	movw	r24, r26
    13d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	9c 8b       	std	Y+20, r25	; 0x14
    13da:	8b 8b       	std	Y+19, r24	; 0x13
    13dc:	0f c0       	rjmp	.+30     	; 0x13fc <CLCD_voidSendData+0x212>
    13de:	88 ec       	ldi	r24, 0xC8	; 200
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	9a 8b       	std	Y+18, r25	; 0x12
    13e4:	89 8b       	std	Y+17, r24	; 0x11
    13e6:	89 89       	ldd	r24, Y+17	; 0x11
    13e8:	9a 89       	ldd	r25, Y+18	; 0x12
    13ea:	01 97       	sbiw	r24, 0x01	; 1
    13ec:	f1 f7       	brne	.-4      	; 0x13ea <CLCD_voidSendData+0x200>
    13ee:	9a 8b       	std	Y+18, r25	; 0x12
    13f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f2:	8b 89       	ldd	r24, Y+19	; 0x13
    13f4:	9c 89       	ldd	r25, Y+20	; 0x14
    13f6:	01 97       	sbiw	r24, 0x01	; 1
    13f8:	9c 8b       	std	Y+20, r25	; 0x14
    13fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13fc:	8b 89       	ldd	r24, Y+19	; 0x13
    13fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1400:	00 97       	sbiw	r24, 0x00	; 0
    1402:	69 f7       	brne	.-38     	; 0x13de <CLCD_voidSendData+0x1f4>
    1404:	14 c0       	rjmp	.+40     	; 0x142e <CLCD_voidSendData+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1406:	6d 89       	ldd	r22, Y+21	; 0x15
    1408:	7e 89       	ldd	r23, Y+22	; 0x16
    140a:	8f 89       	ldd	r24, Y+23	; 0x17
    140c:	98 8d       	ldd	r25, Y+24	; 0x18
    140e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1412:	dc 01       	movw	r26, r24
    1414:	cb 01       	movw	r24, r22
    1416:	9c 8b       	std	Y+20, r25	; 0x14
    1418:	8b 8b       	std	Y+19, r24	; 0x13
    141a:	8b 89       	ldd	r24, Y+19	; 0x13
    141c:	9c 89       	ldd	r25, Y+20	; 0x14
    141e:	98 8b       	std	Y+16, r25	; 0x10
    1420:	8f 87       	std	Y+15, r24	; 0x0f
    1422:	8f 85       	ldd	r24, Y+15	; 0x0f
    1424:	98 89       	ldd	r25, Y+16	; 0x10
    1426:	01 97       	sbiw	r24, 0x01	; 1
    1428:	f1 f7       	brne	.-4      	; 0x1426 <CLCD_voidSendData+0x23c>
    142a:	98 8b       	std	Y+16, r25	; 0x10
    142c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	62 e0       	ldi	r22, 0x02	; 2
    1432:	40 e0       	ldi	r20, 0x00	; 0
    1434:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8SetPinValue>
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	a0 e0       	ldi	r26, 0x00	; 0
    143e:	b0 e4       	ldi	r27, 0x40	; 64
    1440:	8b 87       	std	Y+11, r24	; 0x0b
    1442:	9c 87       	std	Y+12, r25	; 0x0c
    1444:	ad 87       	std	Y+13, r26	; 0x0d
    1446:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1448:	6b 85       	ldd	r22, Y+11	; 0x0b
    144a:	7c 85       	ldd	r23, Y+12	; 0x0c
    144c:	8d 85       	ldd	r24, Y+13	; 0x0d
    144e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	4a ef       	ldi	r20, 0xFA	; 250
    1456:	54 e4       	ldi	r21, 0x44	; 68
    1458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	8f 83       	std	Y+7, r24	; 0x07
    1462:	98 87       	std	Y+8, r25	; 0x08
    1464:	a9 87       	std	Y+9, r26	; 0x09
    1466:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1468:	6f 81       	ldd	r22, Y+7	; 0x07
    146a:	78 85       	ldd	r23, Y+8	; 0x08
    146c:	89 85       	ldd	r24, Y+9	; 0x09
    146e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	40 e8       	ldi	r20, 0x80	; 128
    1476:	5f e3       	ldi	r21, 0x3F	; 63
    1478:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    147c:	88 23       	and	r24, r24
    147e:	2c f4       	brge	.+10     	; 0x148a <CLCD_voidSendData+0x2a0>
		__ticks = 1;
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	9e 83       	std	Y+6, r25	; 0x06
    1486:	8d 83       	std	Y+5, r24	; 0x05
    1488:	3f c0       	rjmp	.+126    	; 0x1508 <CLCD_voidSendData+0x31e>
	else if (__tmp > 65535)
    148a:	6f 81       	ldd	r22, Y+7	; 0x07
    148c:	78 85       	ldd	r23, Y+8	; 0x08
    148e:	89 85       	ldd	r24, Y+9	; 0x09
    1490:	9a 85       	ldd	r25, Y+10	; 0x0a
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	3f ef       	ldi	r19, 0xFF	; 255
    1496:	4f e7       	ldi	r20, 0x7F	; 127
    1498:	57 e4       	ldi	r21, 0x47	; 71
    149a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    149e:	18 16       	cp	r1, r24
    14a0:	4c f5       	brge	.+82     	; 0x14f4 <CLCD_voidSendData+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    14a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    14a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	40 e2       	ldi	r20, 0x20	; 32
    14b0:	51 e4       	ldi	r21, 0x41	; 65
    14b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b6:	dc 01       	movw	r26, r24
    14b8:	cb 01       	movw	r24, r22
    14ba:	bc 01       	movw	r22, r24
    14bc:	cd 01       	movw	r24, r26
    14be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	9e 83       	std	Y+6, r25	; 0x06
    14c8:	8d 83       	std	Y+5, r24	; 0x05
    14ca:	0f c0       	rjmp	.+30     	; 0x14ea <CLCD_voidSendData+0x300>
    14cc:	88 ec       	ldi	r24, 0xC8	; 200
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	9c 83       	std	Y+4, r25	; 0x04
    14d2:	8b 83       	std	Y+3, r24	; 0x03
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	9c 81       	ldd	r25, Y+4	; 0x04
    14d8:	01 97       	sbiw	r24, 0x01	; 1
    14da:	f1 f7       	brne	.-4      	; 0x14d8 <CLCD_voidSendData+0x2ee>
    14dc:	9c 83       	std	Y+4, r25	; 0x04
    14de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e0:	8d 81       	ldd	r24, Y+5	; 0x05
    14e2:	9e 81       	ldd	r25, Y+6	; 0x06
    14e4:	01 97       	sbiw	r24, 0x01	; 1
    14e6:	9e 83       	std	Y+6, r25	; 0x06
    14e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ea:	8d 81       	ldd	r24, Y+5	; 0x05
    14ec:	9e 81       	ldd	r25, Y+6	; 0x06
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	69 f7       	brne	.-38     	; 0x14cc <CLCD_voidSendData+0x2e2>
    14f2:	14 c0       	rjmp	.+40     	; 0x151c <CLCD_voidSendData+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f4:	6f 81       	ldd	r22, Y+7	; 0x07
    14f6:	78 85       	ldd	r23, Y+8	; 0x08
    14f8:	89 85       	ldd	r24, Y+9	; 0x09
    14fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    14fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	9e 83       	std	Y+6, r25	; 0x06
    1506:	8d 83       	std	Y+5, r24	; 0x05
    1508:	8d 81       	ldd	r24, Y+5	; 0x05
    150a:	9e 81       	ldd	r25, Y+6	; 0x06
    150c:	9a 83       	std	Y+2, r25	; 0x02
    150e:	89 83       	std	Y+1, r24	; 0x01
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	9a 81       	ldd	r25, Y+2	; 0x02
    1514:	01 97       	sbiw	r24, 0x01	; 1
    1516:	f1 f7       	brne	.-4      	; 0x1514 <CLCD_voidSendData+0x32a>
    1518:	9a 83       	std	Y+2, r25	; 0x02
    151a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	CLCD_voidSendCommand(0x06);
    151c:	86 e0       	ldi	r24, 0x06	; 6
    151e:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidSendCommand>
#else
#error "In correct cconfigrtion of LCD_MODE"
#endif
}
    1522:	ac 96       	adiw	r28, 0x2c	; 44
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	08 95       	ret

00001534 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
    153c:	e8 97       	sbiw	r28, 0x38	; 56
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	f8 94       	cli
    1542:	de bf       	out	0x3e, r29	; 62
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	cd bf       	out	0x3d, r28	; 61
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	a0 e2       	ldi	r26, 0x20	; 32
    154e:	b2 e4       	ldi	r27, 0x42	; 66
    1550:	8d ab       	std	Y+53, r24	; 0x35
    1552:	9e ab       	std	Y+54, r25	; 0x36
    1554:	af ab       	std	Y+55, r26	; 0x37
    1556:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1558:	6d a9       	ldd	r22, Y+53	; 0x35
    155a:	7e a9       	ldd	r23, Y+54	; 0x36
    155c:	8f a9       	ldd	r24, Y+55	; 0x37
    155e:	98 ad       	ldd	r25, Y+56	; 0x38
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	4a ef       	ldi	r20, 0xFA	; 250
    1566:	54 e4       	ldi	r21, 0x44	; 68
    1568:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	89 ab       	std	Y+49, r24	; 0x31
    1572:	9a ab       	std	Y+50, r25	; 0x32
    1574:	ab ab       	std	Y+51, r26	; 0x33
    1576:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1578:	69 a9       	ldd	r22, Y+49	; 0x31
    157a:	7a a9       	ldd	r23, Y+50	; 0x32
    157c:	8b a9       	ldd	r24, Y+51	; 0x33
    157e:	9c a9       	ldd	r25, Y+52	; 0x34
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	40 e8       	ldi	r20, 0x80	; 128
    1586:	5f e3       	ldi	r21, 0x3F	; 63
    1588:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    158c:	88 23       	and	r24, r24
    158e:	2c f4       	brge	.+10     	; 0x159a <CLCD_voidInit+0x66>
		__ticks = 1;
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	98 ab       	std	Y+48, r25	; 0x30
    1596:	8f a7       	std	Y+47, r24	; 0x2f
    1598:	3f c0       	rjmp	.+126    	; 0x1618 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    159a:	69 a9       	ldd	r22, Y+49	; 0x31
    159c:	7a a9       	ldd	r23, Y+50	; 0x32
    159e:	8b a9       	ldd	r24, Y+51	; 0x33
    15a0:	9c a9       	ldd	r25, Y+52	; 0x34
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	3f ef       	ldi	r19, 0xFF	; 255
    15a6:	4f e7       	ldi	r20, 0x7F	; 127
    15a8:	57 e4       	ldi	r21, 0x47	; 71
    15aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15ae:	18 16       	cp	r1, r24
    15b0:	4c f5       	brge	.+82     	; 0x1604 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b2:	6d a9       	ldd	r22, Y+53	; 0x35
    15b4:	7e a9       	ldd	r23, Y+54	; 0x36
    15b6:	8f a9       	ldd	r24, Y+55	; 0x37
    15b8:	98 ad       	ldd	r25, Y+56	; 0x38
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	40 e2       	ldi	r20, 0x20	; 32
    15c0:	51 e4       	ldi	r21, 0x41	; 65
    15c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	bc 01       	movw	r22, r24
    15cc:	cd 01       	movw	r24, r26
    15ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d2:	dc 01       	movw	r26, r24
    15d4:	cb 01       	movw	r24, r22
    15d6:	98 ab       	std	Y+48, r25	; 0x30
    15d8:	8f a7       	std	Y+47, r24	; 0x2f
    15da:	0f c0       	rjmp	.+30     	; 0x15fa <CLCD_voidInit+0xc6>
    15dc:	88 ec       	ldi	r24, 0xC8	; 200
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	9e a7       	std	Y+46, r25	; 0x2e
    15e2:	8d a7       	std	Y+45, r24	; 0x2d
    15e4:	8d a5       	ldd	r24, Y+45	; 0x2d
    15e6:	9e a5       	ldd	r25, Y+46	; 0x2e
    15e8:	01 97       	sbiw	r24, 0x01	; 1
    15ea:	f1 f7       	brne	.-4      	; 0x15e8 <CLCD_voidInit+0xb4>
    15ec:	9e a7       	std	Y+46, r25	; 0x2e
    15ee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    15f2:	98 a9       	ldd	r25, Y+48	; 0x30
    15f4:	01 97       	sbiw	r24, 0x01	; 1
    15f6:	98 ab       	std	Y+48, r25	; 0x30
    15f8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    15fc:	98 a9       	ldd	r25, Y+48	; 0x30
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	69 f7       	brne	.-38     	; 0x15dc <CLCD_voidInit+0xa8>
    1602:	14 c0       	rjmp	.+40     	; 0x162c <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1604:	69 a9       	ldd	r22, Y+49	; 0x31
    1606:	7a a9       	ldd	r23, Y+50	; 0x32
    1608:	8b a9       	ldd	r24, Y+51	; 0x33
    160a:	9c a9       	ldd	r25, Y+52	; 0x34
    160c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1610:	dc 01       	movw	r26, r24
    1612:	cb 01       	movw	r24, r22
    1614:	98 ab       	std	Y+48, r25	; 0x30
    1616:	8f a7       	std	Y+47, r24	; 0x2f
    1618:	8f a5       	ldd	r24, Y+47	; 0x2f
    161a:	98 a9       	ldd	r25, Y+48	; 0x30
    161c:	9c a7       	std	Y+44, r25	; 0x2c
    161e:	8b a7       	std	Y+43, r24	; 0x2b
    1620:	8b a5       	ldd	r24, Y+43	; 0x2b
    1622:	9c a5       	ldd	r25, Y+44	; 0x2c
    1624:	01 97       	sbiw	r24, 0x01	; 1
    1626:	f1 f7       	brne	.-4      	; 0x1624 <CLCD_voidInit+0xf0>
    1628:	9c a7       	std	Y+44, r25	; 0x2c
    162a:	8b a7       	std	Y+43, r24	; 0x2b
	CLCD_voidSendCommand(0b00000001);
#elif CLCD_CHIOCE_MODE==_4_BIT_MODE
	/*WAIT FOR MORE THEN 30 MS*/
	_delay_ms(40);
	/*function set command: Set Bit 5 */
	CLCD_voidSendCommand(0b00100000);
    162c:	80 e2       	ldi	r24, 0x20	; 32
    162e:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidSendCommand>
	CLCD_voidSendCommand(0b00100000);
    1632:	80 e2       	ldi	r24, 0x20	; 32
    1634:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidSendCommand>

	/*function set command:(7_Bit) N --> Lines,(6_Bit) F --> 5*8 font */
	CLCD_voidSendCommand(0b10000000);
    1638:	80 e8       	ldi	r24, 0x80	; 128
    163a:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidSendCommand>
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	a0 e8       	ldi	r26, 0x80	; 128
    1644:	bf e3       	ldi	r27, 0x3F	; 63
    1646:	8f a3       	std	Y+39, r24	; 0x27
    1648:	98 a7       	std	Y+40, r25	; 0x28
    164a:	a9 a7       	std	Y+41, r26	; 0x29
    164c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    164e:	6f a1       	ldd	r22, Y+39	; 0x27
    1650:	78 a5       	ldd	r23, Y+40	; 0x28
    1652:	89 a5       	ldd	r24, Y+41	; 0x29
    1654:	9a a5       	ldd	r25, Y+42	; 0x2a
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	4a ef       	ldi	r20, 0xFA	; 250
    165c:	54 e4       	ldi	r21, 0x44	; 68
    165e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1662:	dc 01       	movw	r26, r24
    1664:	cb 01       	movw	r24, r22
    1666:	8b a3       	std	Y+35, r24	; 0x23
    1668:	9c a3       	std	Y+36, r25	; 0x24
    166a:	ad a3       	std	Y+37, r26	; 0x25
    166c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    166e:	6b a1       	ldd	r22, Y+35	; 0x23
    1670:	7c a1       	ldd	r23, Y+36	; 0x24
    1672:	8d a1       	ldd	r24, Y+37	; 0x25
    1674:	9e a1       	ldd	r25, Y+38	; 0x26
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	40 e8       	ldi	r20, 0x80	; 128
    167c:	5f e3       	ldi	r21, 0x3F	; 63
    167e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1682:	88 23       	and	r24, r24
    1684:	2c f4       	brge	.+10     	; 0x1690 <CLCD_voidInit+0x15c>
		__ticks = 1;
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	9a a3       	std	Y+34, r25	; 0x22
    168c:	89 a3       	std	Y+33, r24	; 0x21
    168e:	3f c0       	rjmp	.+126    	; 0x170e <CLCD_voidInit+0x1da>
	else if (__tmp > 65535)
    1690:	6b a1       	ldd	r22, Y+35	; 0x23
    1692:	7c a1       	ldd	r23, Y+36	; 0x24
    1694:	8d a1       	ldd	r24, Y+37	; 0x25
    1696:	9e a1       	ldd	r25, Y+38	; 0x26
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	3f ef       	ldi	r19, 0xFF	; 255
    169c:	4f e7       	ldi	r20, 0x7F	; 127
    169e:	57 e4       	ldi	r21, 0x47	; 71
    16a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16a4:	18 16       	cp	r1, r24
    16a6:	4c f5       	brge	.+82     	; 0x16fa <CLCD_voidInit+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a8:	6f a1       	ldd	r22, Y+39	; 0x27
    16aa:	78 a5       	ldd	r23, Y+40	; 0x28
    16ac:	89 a5       	ldd	r24, Y+41	; 0x29
    16ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e2       	ldi	r20, 0x20	; 32
    16b6:	51 e4       	ldi	r21, 0x41	; 65
    16b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	bc 01       	movw	r22, r24
    16c2:	cd 01       	movw	r24, r26
    16c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	9a a3       	std	Y+34, r25	; 0x22
    16ce:	89 a3       	std	Y+33, r24	; 0x21
    16d0:	0f c0       	rjmp	.+30     	; 0x16f0 <CLCD_voidInit+0x1bc>
    16d2:	88 ec       	ldi	r24, 0xC8	; 200
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	98 a3       	std	Y+32, r25	; 0x20
    16d8:	8f 8f       	std	Y+31, r24	; 0x1f
    16da:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16dc:	98 a1       	ldd	r25, Y+32	; 0x20
    16de:	01 97       	sbiw	r24, 0x01	; 1
    16e0:	f1 f7       	brne	.-4      	; 0x16de <CLCD_voidInit+0x1aa>
    16e2:	98 a3       	std	Y+32, r25	; 0x20
    16e4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e6:	89 a1       	ldd	r24, Y+33	; 0x21
    16e8:	9a a1       	ldd	r25, Y+34	; 0x22
    16ea:	01 97       	sbiw	r24, 0x01	; 1
    16ec:	9a a3       	std	Y+34, r25	; 0x22
    16ee:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f0:	89 a1       	ldd	r24, Y+33	; 0x21
    16f2:	9a a1       	ldd	r25, Y+34	; 0x22
    16f4:	00 97       	sbiw	r24, 0x00	; 0
    16f6:	69 f7       	brne	.-38     	; 0x16d2 <CLCD_voidInit+0x19e>
    16f8:	14 c0       	rjmp	.+40     	; 0x1722 <CLCD_voidInit+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16fa:	6b a1       	ldd	r22, Y+35	; 0x23
    16fc:	7c a1       	ldd	r23, Y+36	; 0x24
    16fe:	8d a1       	ldd	r24, Y+37	; 0x25
    1700:	9e a1       	ldd	r25, Y+38	; 0x26
    1702:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	9a a3       	std	Y+34, r25	; 0x22
    170c:	89 a3       	std	Y+33, r24	; 0x21
    170e:	89 a1       	ldd	r24, Y+33	; 0x21
    1710:	9a a1       	ldd	r25, Y+34	; 0x22
    1712:	9e 8f       	std	Y+30, r25	; 0x1e
    1714:	8d 8f       	std	Y+29, r24	; 0x1d
    1716:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1718:	9e 8d       	ldd	r25, Y+30	; 0x1e
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	f1 f7       	brne	.-4      	; 0x171a <CLCD_voidInit+0x1e6>
    171e:	9e 8f       	std	Y+30, r25	; 0x1e
    1720:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	CLCD_voidSendCommand(0b0000);
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidSendCommand>
	/*Display No/00f ctrl  */
	/*Set Bit 7 ,(6_Bit) D --> display enable ,C --> disable cursor ,B --> no blink cursor*/
	CLCD_voidSendCommand(0b11000000);
    1728:	80 ec       	ldi	r24, 0xC0	; 192
    172a:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidSendCommand>
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	a0 e8       	ldi	r26, 0x80	; 128
    1734:	bf e3       	ldi	r27, 0x3F	; 63
    1736:	89 8f       	std	Y+25, r24	; 0x19
    1738:	9a 8f       	std	Y+26, r25	; 0x1a
    173a:	ab 8f       	std	Y+27, r26	; 0x1b
    173c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    173e:	69 8d       	ldd	r22, Y+25	; 0x19
    1740:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1742:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1744:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	4a ef       	ldi	r20, 0xFA	; 250
    174c:	54 e4       	ldi	r21, 0x44	; 68
    174e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	8d 8b       	std	Y+21, r24	; 0x15
    1758:	9e 8b       	std	Y+22, r25	; 0x16
    175a:	af 8b       	std	Y+23, r26	; 0x17
    175c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    175e:	6d 89       	ldd	r22, Y+21	; 0x15
    1760:	7e 89       	ldd	r23, Y+22	; 0x16
    1762:	8f 89       	ldd	r24, Y+23	; 0x17
    1764:	98 8d       	ldd	r25, Y+24	; 0x18
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	40 e8       	ldi	r20, 0x80	; 128
    176c:	5f e3       	ldi	r21, 0x3F	; 63
    176e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1772:	88 23       	and	r24, r24
    1774:	2c f4       	brge	.+10     	; 0x1780 <CLCD_voidInit+0x24c>
		__ticks = 1;
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	9c 8b       	std	Y+20, r25	; 0x14
    177c:	8b 8b       	std	Y+19, r24	; 0x13
    177e:	3f c0       	rjmp	.+126    	; 0x17fe <CLCD_voidInit+0x2ca>
	else if (__tmp > 65535)
    1780:	6d 89       	ldd	r22, Y+21	; 0x15
    1782:	7e 89       	ldd	r23, Y+22	; 0x16
    1784:	8f 89       	ldd	r24, Y+23	; 0x17
    1786:	98 8d       	ldd	r25, Y+24	; 0x18
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	3f ef       	ldi	r19, 0xFF	; 255
    178c:	4f e7       	ldi	r20, 0x7F	; 127
    178e:	57 e4       	ldi	r21, 0x47	; 71
    1790:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1794:	18 16       	cp	r1, r24
    1796:	4c f5       	brge	.+82     	; 0x17ea <CLCD_voidInit+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1798:	69 8d       	ldd	r22, Y+25	; 0x19
    179a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    179c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    179e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	40 e2       	ldi	r20, 0x20	; 32
    17a6:	51 e4       	ldi	r21, 0x41	; 65
    17a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	bc 01       	movw	r22, r24
    17b2:	cd 01       	movw	r24, r26
    17b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	9c 8b       	std	Y+20, r25	; 0x14
    17be:	8b 8b       	std	Y+19, r24	; 0x13
    17c0:	0f c0       	rjmp	.+30     	; 0x17e0 <CLCD_voidInit+0x2ac>
    17c2:	88 ec       	ldi	r24, 0xC8	; 200
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	9a 8b       	std	Y+18, r25	; 0x12
    17c8:	89 8b       	std	Y+17, r24	; 0x11
    17ca:	89 89       	ldd	r24, Y+17	; 0x11
    17cc:	9a 89       	ldd	r25, Y+18	; 0x12
    17ce:	01 97       	sbiw	r24, 0x01	; 1
    17d0:	f1 f7       	brne	.-4      	; 0x17ce <CLCD_voidInit+0x29a>
    17d2:	9a 8b       	std	Y+18, r25	; 0x12
    17d4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d6:	8b 89       	ldd	r24, Y+19	; 0x13
    17d8:	9c 89       	ldd	r25, Y+20	; 0x14
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	9c 8b       	std	Y+20, r25	; 0x14
    17de:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e0:	8b 89       	ldd	r24, Y+19	; 0x13
    17e2:	9c 89       	ldd	r25, Y+20	; 0x14
    17e4:	00 97       	sbiw	r24, 0x00	; 0
    17e6:	69 f7       	brne	.-38     	; 0x17c2 <CLCD_voidInit+0x28e>
    17e8:	14 c0       	rjmp	.+40     	; 0x1812 <CLCD_voidInit+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ea:	6d 89       	ldd	r22, Y+21	; 0x15
    17ec:	7e 89       	ldd	r23, Y+22	; 0x16
    17ee:	8f 89       	ldd	r24, Y+23	; 0x17
    17f0:	98 8d       	ldd	r25, Y+24	; 0x18
    17f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	9c 8b       	std	Y+20, r25	; 0x14
    17fc:	8b 8b       	std	Y+19, r24	; 0x13
    17fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1800:	9c 89       	ldd	r25, Y+20	; 0x14
    1802:	98 8b       	std	Y+16, r25	; 0x10
    1804:	8f 87       	std	Y+15, r24	; 0x0f
    1806:	8f 85       	ldd	r24, Y+15	; 0x0f
    1808:	98 89       	ldd	r25, Y+16	; 0x10
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	f1 f7       	brne	.-4      	; 0x180a <CLCD_voidInit+0x2d6>
    180e:	98 8b       	std	Y+16, r25	; 0x10
    1810:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLCD_voidSendCommand(0b0000);
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidSendCommand>
	/*Display Clear */
	CLCD_voidSendCommand(0b00010000);
    1818:	80 e1       	ldi	r24, 0x10	; 16
    181a:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidSendCommand>
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	a0 e0       	ldi	r26, 0x00	; 0
    1824:	b0 e4       	ldi	r27, 0x40	; 64
    1826:	8b 87       	std	Y+11, r24	; 0x0b
    1828:	9c 87       	std	Y+12, r25	; 0x0c
    182a:	ad 87       	std	Y+13, r26	; 0x0d
    182c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    182e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1830:	7c 85       	ldd	r23, Y+12	; 0x0c
    1832:	8d 85       	ldd	r24, Y+13	; 0x0d
    1834:	9e 85       	ldd	r25, Y+14	; 0x0e
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	4a ef       	ldi	r20, 0xFA	; 250
    183c:	54 e4       	ldi	r21, 0x44	; 68
    183e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	8f 83       	std	Y+7, r24	; 0x07
    1848:	98 87       	std	Y+8, r25	; 0x08
    184a:	a9 87       	std	Y+9, r26	; 0x09
    184c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    184e:	6f 81       	ldd	r22, Y+7	; 0x07
    1850:	78 85       	ldd	r23, Y+8	; 0x08
    1852:	89 85       	ldd	r24, Y+9	; 0x09
    1854:	9a 85       	ldd	r25, Y+10	; 0x0a
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	40 e8       	ldi	r20, 0x80	; 128
    185c:	5f e3       	ldi	r21, 0x3F	; 63
    185e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1862:	88 23       	and	r24, r24
    1864:	2c f4       	brge	.+10     	; 0x1870 <CLCD_voidInit+0x33c>
		__ticks = 1;
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	9e 83       	std	Y+6, r25	; 0x06
    186c:	8d 83       	std	Y+5, r24	; 0x05
    186e:	3f c0       	rjmp	.+126    	; 0x18ee <CLCD_voidInit+0x3ba>
	else if (__tmp > 65535)
    1870:	6f 81       	ldd	r22, Y+7	; 0x07
    1872:	78 85       	ldd	r23, Y+8	; 0x08
    1874:	89 85       	ldd	r24, Y+9	; 0x09
    1876:	9a 85       	ldd	r25, Y+10	; 0x0a
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	3f ef       	ldi	r19, 0xFF	; 255
    187c:	4f e7       	ldi	r20, 0x7F	; 127
    187e:	57 e4       	ldi	r21, 0x47	; 71
    1880:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1884:	18 16       	cp	r1, r24
    1886:	4c f5       	brge	.+82     	; 0x18da <CLCD_voidInit+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1888:	6b 85       	ldd	r22, Y+11	; 0x0b
    188a:	7c 85       	ldd	r23, Y+12	; 0x0c
    188c:	8d 85       	ldd	r24, Y+13	; 0x0d
    188e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	40 e2       	ldi	r20, 0x20	; 32
    1896:	51 e4       	ldi	r21, 0x41	; 65
    1898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	bc 01       	movw	r22, r24
    18a2:	cd 01       	movw	r24, r26
    18a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	9e 83       	std	Y+6, r25	; 0x06
    18ae:	8d 83       	std	Y+5, r24	; 0x05
    18b0:	0f c0       	rjmp	.+30     	; 0x18d0 <CLCD_voidInit+0x39c>
    18b2:	88 ec       	ldi	r24, 0xC8	; 200
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	9c 83       	std	Y+4, r25	; 0x04
    18b8:	8b 83       	std	Y+3, r24	; 0x03
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	9c 81       	ldd	r25, Y+4	; 0x04
    18be:	01 97       	sbiw	r24, 0x01	; 1
    18c0:	f1 f7       	brne	.-4      	; 0x18be <CLCD_voidInit+0x38a>
    18c2:	9c 83       	std	Y+4, r25	; 0x04
    18c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c6:	8d 81       	ldd	r24, Y+5	; 0x05
    18c8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	9e 83       	std	Y+6, r25	; 0x06
    18ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d0:	8d 81       	ldd	r24, Y+5	; 0x05
    18d2:	9e 81       	ldd	r25, Y+6	; 0x06
    18d4:	00 97       	sbiw	r24, 0x00	; 0
    18d6:	69 f7       	brne	.-38     	; 0x18b2 <CLCD_voidInit+0x37e>
    18d8:	14 c0       	rjmp	.+40     	; 0x1902 <CLCD_voidInit+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18da:	6f 81       	ldd	r22, Y+7	; 0x07
    18dc:	78 85       	ldd	r23, Y+8	; 0x08
    18de:	89 85       	ldd	r24, Y+9	; 0x09
    18e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	9e 83       	std	Y+6, r25	; 0x06
    18ec:	8d 83       	std	Y+5, r24	; 0x05
    18ee:	8d 81       	ldd	r24, Y+5	; 0x05
    18f0:	9e 81       	ldd	r25, Y+6	; 0x06
    18f2:	9a 83       	std	Y+2, r25	; 0x02
    18f4:	89 83       	std	Y+1, r24	; 0x01
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
    18f8:	9a 81       	ldd	r25, Y+2	; 0x02
    18fa:	01 97       	sbiw	r24, 0x01	; 1
    18fc:	f1 f7       	brne	.-4      	; 0x18fa <CLCD_voidInit+0x3c6>
    18fe:	9a 83       	std	Y+2, r25	; 0x02
    1900:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	iniIsFinich=1;
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	80 93 a4 01 	sts	0x01A4, r24
#else
#error "In correct cconfigrtion of LCD_MODE"
#endif
}
    1908:	e8 96       	adiw	r28, 0x38	; 56
    190a:	0f b6       	in	r0, 0x3f	; 63
    190c:	f8 94       	cli
    190e:	de bf       	out	0x3e, r29	; 62
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	cd bf       	out	0x3d, r28	; 61
    1914:	cf 91       	pop	r28
    1916:	df 91       	pop	r29
    1918:	08 95       	ret

0000191a <CLCD_voidSendString>:
void CLCD_voidSendString(const char* Copy_pcString)//char ASCII Value Constant not allow the func to change the sent string
{
    191a:	df 93       	push	r29
    191c:	cf 93       	push	r28
    191e:	00 d0       	rcall	.+0      	; 0x1920 <CLCD_voidSendString+0x6>
    1920:	0f 92       	push	r0
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
    1926:	9b 83       	std	Y+3, r25	; 0x03
    1928:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8cnt=0;
    192a:	19 82       	std	Y+1, r1	; 0x01
    192c:	0e c0       	rjmp	.+28     	; 0x194a <CLCD_voidSendString+0x30>
	while(Copy_pcString[Local_u8cnt]!='\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8cnt]);
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	9b 81       	ldd	r25, Y+3	; 0x03
    1938:	fc 01       	movw	r30, r24
    193a:	e2 0f       	add	r30, r18
    193c:	f3 1f       	adc	r31, r19
    193e:	80 81       	ld	r24, Z
    1940:	0e 94 f5 08 	call	0x11ea	; 0x11ea <CLCD_voidSendData>
		Local_u8cnt++;
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	8f 5f       	subi	r24, 0xFF	; 255
    1948:	89 83       	std	Y+1, r24	; 0x01
#endif
}
void CLCD_voidSendString(const char* Copy_pcString)//char ASCII Value Constant not allow the func to change the sent string
{
	u8 Local_u8cnt=0;
	while(Copy_pcString[Local_u8cnt]!='\0')
    194a:	89 81       	ldd	r24, Y+1	; 0x01
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	9b 81       	ldd	r25, Y+3	; 0x03
    1954:	fc 01       	movw	r30, r24
    1956:	e2 0f       	add	r30, r18
    1958:	f3 1f       	adc	r31, r19
    195a:	80 81       	ld	r24, Z
    195c:	88 23       	and	r24, r24
    195e:	39 f7       	brne	.-50     	; 0x192e <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8cnt]);
		Local_u8cnt++;
	}
}
    1960:	0f 90       	pop	r0
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	cf 91       	pop	r28
    1968:	df 91       	pop	r29
    196a:	08 95       	ret

0000196c <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    196c:	df 93       	push	r29
    196e:	cf 93       	push	r28
    1970:	00 d0       	rcall	.+0      	; 0x1972 <CLCD_voidGoToXY+0x6>
    1972:	0f 92       	push	r0
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    1978:	8a 83       	std	Y+2, r24	; 0x02
    197a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
    197c:	8a 81       	ldd	r24, Y+2	; 0x02
    197e:	88 23       	and	r24, r24
    1980:	51 f4       	brne	.+20     	; 0x1996 <CLCD_voidGoToXY+0x2a>
	{
		if (Copy_u8YPos > 15) {
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	80 31       	cpi	r24, 0x10	; 16
    1986:	20 f0       	brcs	.+8      	; 0x1990 <CLCD_voidGoToXY+0x24>
			Local_u8Address = 0x40 + Copy_u8YPos;
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	80 5c       	subi	r24, 0xC0	; 192
    198c:	89 83       	std	Y+1, r24	; 0x01
    198e:	09 c0       	rjmp	.+18     	; 0x19a2 <CLCD_voidGoToXY+0x36>
		} else {
			Local_u8Address = Copy_u8YPos;
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	89 83       	std	Y+1, r24	; 0x01
    1994:	06 c0       	rjmp	.+12     	; 0x19a2 <CLCD_voidGoToXY+0x36>
		}
	}
	else if(Copy_u8XPos==1)
    1996:	8a 81       	ldd	r24, Y+2	; 0x02
    1998:	81 30       	cpi	r24, 0x01	; 1
    199a:	19 f4       	brne	.+6      	; 0x19a2 <CLCD_voidGoToXY+0x36>
	{
		Local_u8Address=0x40+Copy_u8YPos;
    199c:	8b 81       	ldd	r24, Y+3	; 0x03
    199e:	80 5c       	subi	r24, 0xC0	; 192
    19a0:	89 83       	std	Y+1, r24	; 0x01
	}
	//put command from data sheet
	CLCD_voidSendCommand(Local_u8Address+128);
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	80 58       	subi	r24, 0x80	; 128
    19a6:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidSendCommand>
}
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	cf 91       	pop	r28
    19b2:	df 91       	pop	r29
    19b4:	08 95       	ret

000019b6 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNmber,u8 Copy_u8XPos,u8 Copy_u8Ypos)
{
    19b6:	df 93       	push	r29
    19b8:	cf 93       	push	r28
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
    19be:	27 97       	sbiw	r28, 0x07	; 7
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	f8 94       	cli
    19c4:	de bf       	out	0x3e, r29	; 62
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	cd bf       	out	0x3d, r28	; 61
    19ca:	9c 83       	std	Y+4, r25	; 0x04
    19cc:	8b 83       	std	Y+3, r24	; 0x03
    19ce:	6d 83       	std	Y+5, r22	; 0x05
    19d0:	4e 83       	std	Y+6, r20	; 0x06
    19d2:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress=0;
    19d4:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8iterator;
	/*Calculate the CGRAM address whose each block is 8 bytes */
	Local_u8CGRAMAddress= Copy_u8PatternNmber*8;
    19d6:	8d 81       	ldd	r24, Y+5	; 0x05
    19d8:	88 2f       	mov	r24, r24
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	88 0f       	add	r24, r24
    19de:	99 1f       	adc	r25, r25
    19e0:	88 0f       	add	r24, r24
    19e2:	99 1f       	adc	r25, r25
    19e4:	88 0f       	add	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	8a 83       	std	Y+2, r24	; 0x02

	/*Send CGRAM address command to LCD, with setting bit 6 , clear bit 7 */
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
    19ea:	8a 81       	ldd	r24, Y+2	; 0x02
    19ec:	80 5c       	subi	r24, 0xC0	; 192
    19ee:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidSendCommand>

	/*Write the pattern into CGRAM */
	for(Local_u8iterator=0;Local_u8iterator<8;Local_u8iterator++)
    19f2:	19 82       	std	Y+1, r1	; 0x01
    19f4:	0e c0       	rjmp	.+28     	; 0x1a12 <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8iterator]);
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
    19f8:	28 2f       	mov	r18, r24
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1a00:	fc 01       	movw	r30, r24
    1a02:	e2 0f       	add	r30, r18
    1a04:	f3 1f       	adc	r31, r19
    1a06:	80 81       	ld	r24, Z
    1a08:	0e 94 f5 08 	call	0x11ea	; 0x11ea <CLCD_voidSendData>

	/*Send CGRAM address command to LCD, with setting bit 6 , clear bit 7 */
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/*Write the pattern into CGRAM */
	for(Local_u8iterator=0;Local_u8iterator<8;Local_u8iterator++)
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
    1a0e:	8f 5f       	subi	r24, 0xFF	; 255
    1a10:	89 83       	std	Y+1, r24	; 0x01
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	88 30       	cpi	r24, 0x08	; 8
    1a16:	78 f3       	brcs	.-34     	; 0x19f6 <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8iterator]);
	}
	/* Go back to DDRAM to display the pattern */
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8Ypos);
    1a18:	8e 81       	ldd	r24, Y+6	; 0x06
    1a1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a1c:	0e 94 b6 0c 	call	0x196c	; 0x196c <CLCD_voidGoToXY>

	/* Display the pattern written  in the CGRAM */
	CLCD_voidSendData(Copy_u8PatternNmber);
    1a20:	8d 81       	ldd	r24, Y+5	; 0x05
    1a22:	0e 94 f5 08 	call	0x11ea	; 0x11ea <CLCD_voidSendData>

}
    1a26:	27 96       	adiw	r28, 0x07	; 7
    1a28:	0f b6       	in	r0, 0x3f	; 63
    1a2a:	f8 94       	cli
    1a2c:	de bf       	out	0x3e, r29	; 62
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	cd bf       	out	0x3d, r28	; 61
    1a32:	cf 91       	pop	r28
    1a34:	df 91       	pop	r29
    1a36:	08 95       	ret

00001a38 <CLCD_voidWriteNumber>:

void CLCD_voidWriteNumber(u16 Copy_u16Number)
{
    1a38:	df 93       	push	r29
    1a3a:	cf 93       	push	r28
    1a3c:	00 d0       	rcall	.+0      	; 0x1a3e <CLCD_voidWriteNumber+0x6>
    1a3e:	00 d0       	rcall	.+0      	; 0x1a40 <CLCD_voidWriteNumber+0x8>
    1a40:	cd b7       	in	r28, 0x3d	; 61
    1a42:	de b7       	in	r29, 0x3e	; 62
    1a44:	9c 83       	std	Y+4, r25	; 0x04
    1a46:	8b 83       	std	Y+3, r24	; 0x03

	u8 Max_Digits = Num_length(Copy_u16Number);
    1a48:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4c:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <Num_length>
    1a50:	8a 83       	std	Y+2, r24	; 0x02
	for (s8 i = Max_Digits; i > 0; i--) {
    1a52:	8a 81       	ldd	r24, Y+2	; 0x02
    1a54:	89 83       	std	Y+1, r24	; 0x01
    1a56:	1d c0       	rjmp	.+58     	; 0x1a92 <CLCD_voidWriteNumber+0x5a>
		CLCD_voidSendData((Copy_u16Number / Multi_N_10(i - 1)) + '0');
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	81 50       	subi	r24, 0x01	; 1
    1a5c:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <Multi_N_10>
    1a60:	9c 01       	movw	r18, r24
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	9c 81       	ldd	r25, Y+4	; 0x04
    1a66:	b9 01       	movw	r22, r18
    1a68:	0e 94 44 23 	call	0x4688	; 0x4688 <__udivmodhi4>
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	80 5d       	subi	r24, 0xD0	; 208
    1a70:	0e 94 f5 08 	call	0x11ea	; 0x11ea <CLCD_voidSendData>
		Copy_u16Number = (Copy_u16Number % Multi_N_10(i - 1));
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	81 50       	subi	r24, 0x01	; 1
    1a78:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <Multi_N_10>
    1a7c:	9c 01       	movw	r18, r24
    1a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a80:	9c 81       	ldd	r25, Y+4	; 0x04
    1a82:	b9 01       	movw	r22, r18
    1a84:	0e 94 44 23 	call	0x4688	; 0x4688 <__udivmodhi4>
    1a88:	9c 83       	std	Y+4, r25	; 0x04
    1a8a:	8b 83       	std	Y+3, r24	; 0x03

void CLCD_voidWriteNumber(u16 Copy_u16Number)
{

	u8 Max_Digits = Num_length(Copy_u16Number);
	for (s8 i = Max_Digits; i > 0; i--) {
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	81 50       	subi	r24, 0x01	; 1
    1a90:	89 83       	std	Y+1, r24	; 0x01
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	18 16       	cp	r1, r24
    1a96:	04 f3       	brlt	.-64     	; 0x1a58 <CLCD_voidWriteNumber+0x20>
		CLCD_voidSendData((Copy_u16Number / Multi_N_10(i - 1)) + '0');
		Copy_u16Number = (Copy_u16Number % Multi_N_10(i - 1));
	}
}
    1a98:	0f 90       	pop	r0
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	08 95       	ret

00001aa6 <Num_length>:


static u8 Num_length(u16 num) {
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	00 d0       	rcall	.+0      	; 0x1aac <Num_length+0x6>
    1aac:	00 d0       	rcall	.+0      	; 0x1aae <Num_length+0x8>
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    1ab2:	9b 83       	std	Y+3, r25	; 0x03
    1ab4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Cnt = 0;
    1ab6:	19 82       	std	Y+1, r1	; 0x01
	if(num == 0)
    1ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aba:	9b 81       	ldd	r25, Y+3	; 0x03
    1abc:	00 97       	sbiw	r24, 0x00	; 0
    1abe:	81 f4       	brne	.+32     	; 0x1ae0 <Num_length+0x3a>
		return 1;
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	8c 83       	std	Y+4, r24	; 0x04
    1ac4:	13 c0       	rjmp	.+38     	; 0x1aec <Num_length+0x46>
	while (num != 0) {
		num /= 10;
    1ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac8:	9b 81       	ldd	r25, Y+3	; 0x03
    1aca:	2a e0       	ldi	r18, 0x0A	; 10
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	b9 01       	movw	r22, r18
    1ad0:	0e 94 44 23 	call	0x4688	; 0x4688 <__udivmodhi4>
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	9b 83       	std	Y+3, r25	; 0x03
    1ad8:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8Cnt++;
    1ada:	89 81       	ldd	r24, Y+1	; 0x01
    1adc:	8f 5f       	subi	r24, 0xFF	; 255
    1ade:	89 83       	std	Y+1, r24	; 0x01

static u8 Num_length(u16 num) {
	u8 Local_u8Cnt = 0;
	if(num == 0)
		return 1;
	while (num != 0) {
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	79 f7       	brne	.-34     	; 0x1ac6 <Num_length+0x20>
		num /= 10;
		Local_u8Cnt++;
	}
	return Local_u8Cnt;
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
    1aea:	8c 83       	std	Y+4, r24	; 0x04
    1aec:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
    1af4:	0f 90       	pop	r0
    1af6:	cf 91       	pop	r28
    1af8:	df 91       	pop	r29
    1afa:	08 95       	ret

00001afc <Multi_N_10>:
static u16 Multi_N_10(u8 N) {
    1afc:	df 93       	push	r29
    1afe:	cf 93       	push	r28
    1b00:	00 d0       	rcall	.+0      	; 0x1b02 <Multi_N_10+0x6>
    1b02:	00 d0       	rcall	.+0      	; 0x1b04 <Multi_N_10+0x8>
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
    1b08:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8Cnt;
	u16 p = 1;
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	9a 83       	std	Y+2, r25	; 0x02
    1b10:	89 83       	std	Y+1, r24	; 0x01
	for (Local_u8Cnt = 0; Local_u8Cnt < N; Local_u8Cnt++)
    1b12:	1b 82       	std	Y+3, r1	; 0x03
    1b14:	11 c0       	rjmp	.+34     	; 0x1b38 <Multi_N_10+0x3c>
		p *= 10;
    1b16:	89 81       	ldd	r24, Y+1	; 0x01
    1b18:	9a 81       	ldd	r25, Y+2	; 0x02
    1b1a:	9c 01       	movw	r18, r24
    1b1c:	22 0f       	add	r18, r18
    1b1e:	33 1f       	adc	r19, r19
    1b20:	c9 01       	movw	r24, r18
    1b22:	88 0f       	add	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	88 0f       	add	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	82 0f       	add	r24, r18
    1b2c:	93 1f       	adc	r25, r19
    1b2e:	9a 83       	std	Y+2, r25	; 0x02
    1b30:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8Cnt;
}
static u16 Multi_N_10(u8 N) {
	u8 Local_u8Cnt;
	u16 p = 1;
	for (Local_u8Cnt = 0; Local_u8Cnt < N; Local_u8Cnt++)
    1b32:	8b 81       	ldd	r24, Y+3	; 0x03
    1b34:	8f 5f       	subi	r24, 0xFF	; 255
    1b36:	8b 83       	std	Y+3, r24	; 0x03
    1b38:	9b 81       	ldd	r25, Y+3	; 0x03
    1b3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3c:	98 17       	cp	r25, r24
    1b3e:	58 f3       	brcs	.-42     	; 0x1b16 <Multi_N_10+0x1a>
		p *= 10;
	return p;
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	0f 90       	pop	r0
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	08 95       	ret

00001b52 <DIO_u8SetPinValue>:
#include "../MCAL/DIO_config.h"
#include "../MCAL/DIO_interface.h"
#include "../MCAL/DIO_register.h"

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
    1b52:	df 93       	push	r29
    1b54:	cf 93       	push	r28
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
    1b5a:	28 97       	sbiw	r28, 0x08	; 8
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	f8 94       	cli
    1b60:	de bf       	out	0x3e, r29	; 62
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	cd bf       	out	0x3d, r28	; 61
    1b66:	8a 83       	std	Y+2, r24	; 0x02
    1b68:	6b 83       	std	Y+3, r22	; 0x03
    1b6a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1b6c:	19 82       	std	Y+1, r1	; 0x01
	if(DIO_PIN_HIGH==Copy_u8Value)
    1b6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b70:	81 30       	cpi	r24, 0x01	; 1
    1b72:	09 f0       	breq	.+2      	; 0x1b76 <DIO_u8SetPinValue+0x24>
    1b74:	79 c0       	rjmp	.+242    	; 0x1c68 <DIO_u8SetPinValue+0x116>
	{
		if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    1b76:	8b 81       	ldd	r24, Y+3	; 0x03
    1b78:	88 30       	cpi	r24, 0x08	; 8
    1b7a:	08 f0       	brcs	.+2      	; 0x1b7e <DIO_u8SetPinValue+0x2c>
    1b7c:	72 c0       	rjmp	.+228    	; 0x1c62 <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	28 2f       	mov	r18, r24
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	38 87       	std	Y+8, r19	; 0x08
    1b86:	2f 83       	std	Y+7, r18	; 0x07
    1b88:	8f 81       	ldd	r24, Y+7	; 0x07
    1b8a:	98 85       	ldd	r25, Y+8	; 0x08
    1b8c:	81 30       	cpi	r24, 0x01	; 1
    1b8e:	91 05       	cpc	r25, r1
    1b90:	49 f1       	breq	.+82     	; 0x1be4 <DIO_u8SetPinValue+0x92>
    1b92:	2f 81       	ldd	r18, Y+7	; 0x07
    1b94:	38 85       	ldd	r19, Y+8	; 0x08
    1b96:	22 30       	cpi	r18, 0x02	; 2
    1b98:	31 05       	cpc	r19, r1
    1b9a:	2c f4       	brge	.+10     	; 0x1ba6 <DIO_u8SetPinValue+0x54>
    1b9c:	8f 81       	ldd	r24, Y+7	; 0x07
    1b9e:	98 85       	ldd	r25, Y+8	; 0x08
    1ba0:	00 97       	sbiw	r24, 0x00	; 0
    1ba2:	61 f0       	breq	.+24     	; 0x1bbc <DIO_u8SetPinValue+0x6a>
    1ba4:	5b c0       	rjmp	.+182    	; 0x1c5c <DIO_u8SetPinValue+0x10a>
    1ba6:	2f 81       	ldd	r18, Y+7	; 0x07
    1ba8:	38 85       	ldd	r19, Y+8	; 0x08
    1baa:	22 30       	cpi	r18, 0x02	; 2
    1bac:	31 05       	cpc	r19, r1
    1bae:	71 f1       	breq	.+92     	; 0x1c0c <DIO_u8SetPinValue+0xba>
    1bb0:	8f 81       	ldd	r24, Y+7	; 0x07
    1bb2:	98 85       	ldd	r25, Y+8	; 0x08
    1bb4:	83 30       	cpi	r24, 0x03	; 3
    1bb6:	91 05       	cpc	r25, r1
    1bb8:	e9 f1       	breq	.+122    	; 0x1c34 <DIO_u8SetPinValue+0xe2>
    1bba:	50 c0       	rjmp	.+160    	; 0x1c5c <DIO_u8SetPinValue+0x10a>
			{
				case DIO_PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
    1bbc:	ab e3       	ldi	r26, 0x3B	; 59
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	eb e3       	ldi	r30, 0x3B	; 59
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	48 2f       	mov	r20, r24
    1bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bca:	28 2f       	mov	r18, r24
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	02 2e       	mov	r0, r18
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <DIO_u8SetPinValue+0x88>
    1bd6:	88 0f       	add	r24, r24
    1bd8:	99 1f       	adc	r25, r25
    1bda:	0a 94       	dec	r0
    1bdc:	e2 f7       	brpl	.-8      	; 0x1bd6 <DIO_u8SetPinValue+0x84>
    1bde:	84 2b       	or	r24, r20
    1be0:	8c 93       	st	X, r24
    1be2:	c6 c0       	rjmp	.+396    	; 0x1d70 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
    1be4:	a8 e3       	ldi	r26, 0x38	; 56
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	e8 e3       	ldi	r30, 0x38	; 56
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	48 2f       	mov	r20, r24
    1bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf2:	28 2f       	mov	r18, r24
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	02 2e       	mov	r0, r18
    1bfc:	02 c0       	rjmp	.+4      	; 0x1c02 <DIO_u8SetPinValue+0xb0>
    1bfe:	88 0f       	add	r24, r24
    1c00:	99 1f       	adc	r25, r25
    1c02:	0a 94       	dec	r0
    1c04:	e2 f7       	brpl	.-8      	; 0x1bfe <DIO_u8SetPinValue+0xac>
    1c06:	84 2b       	or	r24, r20
    1c08:	8c 93       	st	X, r24
    1c0a:	b2 c0       	rjmp	.+356    	; 0x1d70 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
    1c0c:	a5 e3       	ldi	r26, 0x35	; 53
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	e5 e3       	ldi	r30, 0x35	; 53
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	48 2f       	mov	r20, r24
    1c18:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1a:	28 2f       	mov	r18, r24
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	02 2e       	mov	r0, r18
    1c24:	02 c0       	rjmp	.+4      	; 0x1c2a <DIO_u8SetPinValue+0xd8>
    1c26:	88 0f       	add	r24, r24
    1c28:	99 1f       	adc	r25, r25
    1c2a:	0a 94       	dec	r0
    1c2c:	e2 f7       	brpl	.-8      	; 0x1c26 <DIO_u8SetPinValue+0xd4>
    1c2e:	84 2b       	or	r24, r20
    1c30:	8c 93       	st	X, r24
    1c32:	9e c0       	rjmp	.+316    	; 0x1d70 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
    1c34:	a2 e3       	ldi	r26, 0x32	; 50
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	e2 e3       	ldi	r30, 0x32	; 50
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	48 2f       	mov	r20, r24
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	28 2f       	mov	r18, r24
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	02 2e       	mov	r0, r18
    1c4c:	02 c0       	rjmp	.+4      	; 0x1c52 <DIO_u8SetPinValue+0x100>
    1c4e:	88 0f       	add	r24, r24
    1c50:	99 1f       	adc	r25, r25
    1c52:	0a 94       	dec	r0
    1c54:	e2 f7       	brpl	.-8      	; 0x1c4e <DIO_u8SetPinValue+0xfc>
    1c56:	84 2b       	or	r24, r20
    1c58:	8c 93       	st	X, r24
    1c5a:	8a c0       	rjmp	.+276    	; 0x1d70 <DIO_u8SetPinValue+0x21e>
				default: Local_u8ErrorState=1;				
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	89 83       	std	Y+1, r24	; 0x01
    1c60:	87 c0       	rjmp	.+270    	; 0x1d70 <DIO_u8SetPinValue+0x21e>
			}
		}
		else
			Local_u8ErrorState=1;
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	89 83       	std	Y+1, r24	; 0x01
    1c66:	84 c0       	rjmp	.+264    	; 0x1d70 <DIO_u8SetPinValue+0x21e>
	}
	else if(DIO_PIN_LOW==Copy_u8Value)
    1c68:	8c 81       	ldd	r24, Y+4	; 0x04
    1c6a:	88 23       	and	r24, r24
    1c6c:	09 f0       	breq	.+2      	; 0x1c70 <DIO_u8SetPinValue+0x11e>
    1c6e:	7e c0       	rjmp	.+252    	; 0x1d6c <DIO_u8SetPinValue+0x21a>
	{
		if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    1c70:	8b 81       	ldd	r24, Y+3	; 0x03
    1c72:	88 30       	cpi	r24, 0x08	; 8
    1c74:	08 f0       	brcs	.+2      	; 0x1c78 <DIO_u8SetPinValue+0x126>
    1c76:	77 c0       	rjmp	.+238    	; 0x1d66 <DIO_u8SetPinValue+0x214>
		{
			switch(Copy_u8Port)
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	3e 83       	std	Y+6, r19	; 0x06
    1c80:	2d 83       	std	Y+5, r18	; 0x05
    1c82:	8d 81       	ldd	r24, Y+5	; 0x05
    1c84:	9e 81       	ldd	r25, Y+6	; 0x06
    1c86:	81 30       	cpi	r24, 0x01	; 1
    1c88:	91 05       	cpc	r25, r1
    1c8a:	59 f1       	breq	.+86     	; 0x1ce2 <DIO_u8SetPinValue+0x190>
    1c8c:	2d 81       	ldd	r18, Y+5	; 0x05
    1c8e:	3e 81       	ldd	r19, Y+6	; 0x06
    1c90:	22 30       	cpi	r18, 0x02	; 2
    1c92:	31 05       	cpc	r19, r1
    1c94:	2c f4       	brge	.+10     	; 0x1ca0 <DIO_u8SetPinValue+0x14e>
    1c96:	8d 81       	ldd	r24, Y+5	; 0x05
    1c98:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9a:	00 97       	sbiw	r24, 0x00	; 0
    1c9c:	69 f0       	breq	.+26     	; 0x1cb8 <DIO_u8SetPinValue+0x166>
    1c9e:	60 c0       	rjmp	.+192    	; 0x1d60 <DIO_u8SetPinValue+0x20e>
    1ca0:	2d 81       	ldd	r18, Y+5	; 0x05
    1ca2:	3e 81       	ldd	r19, Y+6	; 0x06
    1ca4:	22 30       	cpi	r18, 0x02	; 2
    1ca6:	31 05       	cpc	r19, r1
    1ca8:	89 f1       	breq	.+98     	; 0x1d0c <DIO_u8SetPinValue+0x1ba>
    1caa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cac:	9e 81       	ldd	r25, Y+6	; 0x06
    1cae:	83 30       	cpi	r24, 0x03	; 3
    1cb0:	91 05       	cpc	r25, r1
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <DIO_u8SetPinValue+0x164>
    1cb4:	40 c0       	rjmp	.+128    	; 0x1d36 <DIO_u8SetPinValue+0x1e4>
    1cb6:	54 c0       	rjmp	.+168    	; 0x1d60 <DIO_u8SetPinValue+0x20e>
			{
				case DIO_PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
    1cb8:	ab e3       	ldi	r26, 0x3B	; 59
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	eb e3       	ldi	r30, 0x3B	; 59
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	48 2f       	mov	r20, r24
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	28 2f       	mov	r18, r24
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	02 2e       	mov	r0, r18
    1cd0:	02 c0       	rjmp	.+4      	; 0x1cd6 <DIO_u8SetPinValue+0x184>
    1cd2:	88 0f       	add	r24, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	0a 94       	dec	r0
    1cd8:	e2 f7       	brpl	.-8      	; 0x1cd2 <DIO_u8SetPinValue+0x180>
    1cda:	80 95       	com	r24
    1cdc:	84 23       	and	r24, r20
    1cde:	8c 93       	st	X, r24
    1ce0:	47 c0       	rjmp	.+142    	; 0x1d70 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
    1ce2:	a8 e3       	ldi	r26, 0x38	; 56
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	e8 e3       	ldi	r30, 0x38	; 56
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	48 2f       	mov	r20, r24
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	28 2f       	mov	r18, r24
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	02 2e       	mov	r0, r18
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <DIO_u8SetPinValue+0x1ae>
    1cfc:	88 0f       	add	r24, r24
    1cfe:	99 1f       	adc	r25, r25
    1d00:	0a 94       	dec	r0
    1d02:	e2 f7       	brpl	.-8      	; 0x1cfc <DIO_u8SetPinValue+0x1aa>
    1d04:	80 95       	com	r24
    1d06:	84 23       	and	r24, r20
    1d08:	8c 93       	st	X, r24
    1d0a:	32 c0       	rjmp	.+100    	; 0x1d70 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
    1d0c:	a5 e3       	ldi	r26, 0x35	; 53
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	e5 e3       	ldi	r30, 0x35	; 53
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	48 2f       	mov	r20, r24
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	02 2e       	mov	r0, r18
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <DIO_u8SetPinValue+0x1d8>
    1d26:	88 0f       	add	r24, r24
    1d28:	99 1f       	adc	r25, r25
    1d2a:	0a 94       	dec	r0
    1d2c:	e2 f7       	brpl	.-8      	; 0x1d26 <DIO_u8SetPinValue+0x1d4>
    1d2e:	80 95       	com	r24
    1d30:	84 23       	and	r24, r20
    1d32:	8c 93       	st	X, r24
    1d34:	1d c0       	rjmp	.+58     	; 0x1d70 <DIO_u8SetPinValue+0x21e>
				case DIO_PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
    1d36:	a2 e3       	ldi	r26, 0x32	; 50
    1d38:	b0 e0       	ldi	r27, 0x00	; 0
    1d3a:	e2 e3       	ldi	r30, 0x32	; 50
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	80 81       	ld	r24, Z
    1d40:	48 2f       	mov	r20, r24
    1d42:	8b 81       	ldd	r24, Y+3	; 0x03
    1d44:	28 2f       	mov	r18, r24
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	02 2e       	mov	r0, r18
    1d4e:	02 c0       	rjmp	.+4      	; 0x1d54 <DIO_u8SetPinValue+0x202>
    1d50:	88 0f       	add	r24, r24
    1d52:	99 1f       	adc	r25, r25
    1d54:	0a 94       	dec	r0
    1d56:	e2 f7       	brpl	.-8      	; 0x1d50 <DIO_u8SetPinValue+0x1fe>
    1d58:	80 95       	com	r24
    1d5a:	84 23       	and	r24, r20
    1d5c:	8c 93       	st	X, r24
    1d5e:	08 c0       	rjmp	.+16     	; 0x1d70 <DIO_u8SetPinValue+0x21e>
				default: Local_u8ErrorState=1;	
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	89 83       	std	Y+1, r24	; 0x01
    1d64:	05 c0       	rjmp	.+10     	; 0x1d70 <DIO_u8SetPinValue+0x21e>
			}
		}
		else
			Local_u8ErrorState=1;	
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	89 83       	std	Y+1, r24	; 0x01
    1d6a:	02 c0       	rjmp	.+4      	; 0x1d70 <DIO_u8SetPinValue+0x21e>
	}
	else
		Local_u8ErrorState=1;	
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    1d70:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d72:	28 96       	adiw	r28, 0x08	; 8
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	f8 94       	cli
    1d78:	de bf       	out	0x3e, r29	; 62
    1d7a:	0f be       	out	0x3f, r0	; 63
    1d7c:	cd bf       	out	0x3d, r28	; 61
    1d7e:	cf 91       	pop	r28
    1d80:	df 91       	pop	r29
    1d82:	08 95       	ret

00001d84 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    1d84:	df 93       	push	r29
    1d86:	cf 93       	push	r28
    1d88:	00 d0       	rcall	.+0      	; 0x1d8a <DIO_u8SetPortValue+0x6>
    1d8a:	00 d0       	rcall	.+0      	; 0x1d8c <DIO_u8SetPortValue+0x8>
    1d8c:	0f 92       	push	r0
    1d8e:	cd b7       	in	r28, 0x3d	; 61
    1d90:	de b7       	in	r29, 0x3e	; 62
    1d92:	8a 83       	std	Y+2, r24	; 0x02
    1d94:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1d96:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port<=7)
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	88 30       	cpi	r24, 0x08	; 8
    1d9c:	b0 f5       	brcc	.+108    	; 0x1e0a <DIO_u8SetPortValue+0x86>
	{
		switch(Copy_u8Port)
    1d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1da0:	28 2f       	mov	r18, r24
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	3d 83       	std	Y+5, r19	; 0x05
    1da6:	2c 83       	std	Y+4, r18	; 0x04
    1da8:	8c 81       	ldd	r24, Y+4	; 0x04
    1daa:	9d 81       	ldd	r25, Y+5	; 0x05
    1dac:	81 30       	cpi	r24, 0x01	; 1
    1dae:	91 05       	cpc	r25, r1
    1db0:	d1 f0       	breq	.+52     	; 0x1de6 <DIO_u8SetPortValue+0x62>
    1db2:	2c 81       	ldd	r18, Y+4	; 0x04
    1db4:	3d 81       	ldd	r19, Y+5	; 0x05
    1db6:	22 30       	cpi	r18, 0x02	; 2
    1db8:	31 05       	cpc	r19, r1
    1dba:	2c f4       	brge	.+10     	; 0x1dc6 <DIO_u8SetPortValue+0x42>
    1dbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dbe:	9d 81       	ldd	r25, Y+5	; 0x05
    1dc0:	00 97       	sbiw	r24, 0x00	; 0
    1dc2:	61 f0       	breq	.+24     	; 0x1ddc <DIO_u8SetPortValue+0x58>
    1dc4:	1f c0       	rjmp	.+62     	; 0x1e04 <DIO_u8SetPortValue+0x80>
    1dc6:	2c 81       	ldd	r18, Y+4	; 0x04
    1dc8:	3d 81       	ldd	r19, Y+5	; 0x05
    1dca:	22 30       	cpi	r18, 0x02	; 2
    1dcc:	31 05       	cpc	r19, r1
    1dce:	81 f0       	breq	.+32     	; 0x1df0 <DIO_u8SetPortValue+0x6c>
    1dd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd2:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd4:	83 30       	cpi	r24, 0x03	; 3
    1dd6:	91 05       	cpc	r25, r1
    1dd8:	81 f0       	breq	.+32     	; 0x1dfa <DIO_u8SetPortValue+0x76>
    1dda:	14 c0       	rjmp	.+40     	; 0x1e04 <DIO_u8SetPortValue+0x80>
		{
			case DIO_PORTA:PORTA=Copy_u8Value;break;
    1ddc:	eb e3       	ldi	r30, 0x3B	; 59
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	8b 81       	ldd	r24, Y+3	; 0x03
    1de2:	80 83       	st	Z, r24
    1de4:	14 c0       	rjmp	.+40     	; 0x1e0e <DIO_u8SetPortValue+0x8a>
			case DIO_PORTB:PORTB=Copy_u8Value;break;
    1de6:	e8 e3       	ldi	r30, 0x38	; 56
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	8b 81       	ldd	r24, Y+3	; 0x03
    1dec:	80 83       	st	Z, r24
    1dee:	0f c0       	rjmp	.+30     	; 0x1e0e <DIO_u8SetPortValue+0x8a>
			case DIO_PORTC:PORTC=Copy_u8Value;break;
    1df0:	e5 e3       	ldi	r30, 0x35	; 53
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	8b 81       	ldd	r24, Y+3	; 0x03
    1df6:	80 83       	st	Z, r24
    1df8:	0a c0       	rjmp	.+20     	; 0x1e0e <DIO_u8SetPortValue+0x8a>
			case DIO_PORTD:PORTD=Copy_u8Value;break;
    1dfa:	e2 e3       	ldi	r30, 0x32	; 50
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	80 83       	st	Z, r24
    1e02:	05 c0       	rjmp	.+10     	; 0x1e0e <DIO_u8SetPortValue+0x8a>
			default: Local_u8ErrorState=1;
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	89 83       	std	Y+1, r24	; 0x01
    1e08:	02 c0       	rjmp	.+4      	; 0x1e0e <DIO_u8SetPortValue+0x8a>
		}
	}
	else
		Local_u8ErrorState = NOTOK;
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    1e0e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e10:	0f 90       	pop	r0
    1e12:	0f 90       	pop	r0
    1e14:	0f 90       	pop	r0
    1e16:	0f 90       	pop	r0
    1e18:	0f 90       	pop	r0
    1e1a:	cf 91       	pop	r28
    1e1c:	df 91       	pop	r29
    1e1e:	08 95       	ret

00001e20 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 *Copy_pu8Value)
{
    1e20:	df 93       	push	r29
    1e22:	cf 93       	push	r28
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
    1e28:	27 97       	sbiw	r28, 0x07	; 7
    1e2a:	0f b6       	in	r0, 0x3f	; 63
    1e2c:	f8 94       	cli
    1e2e:	de bf       	out	0x3e, r29	; 62
    1e30:	0f be       	out	0x3f, r0	; 63
    1e32:	cd bf       	out	0x3d, r28	; 61
    1e34:	8a 83       	std	Y+2, r24	; 0x02
    1e36:	6b 83       	std	Y+3, r22	; 0x03
    1e38:	5d 83       	std	Y+5, r21	; 0x05
    1e3a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1e3c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value!=NULL)
    1e3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e40:	9d 81       	ldd	r25, Y+5	; 0x05
    1e42:	00 97       	sbiw	r24, 0x00	; 0
    1e44:	09 f4       	brne	.+2      	; 0x1e48 <DIO_u8GetPinValue+0x28>
    1e46:	7b c0       	rjmp	.+246    	; 0x1f3e <DIO_u8GetPinValue+0x11e>
	{


		if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    1e48:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4a:	88 30       	cpi	r24, 0x08	; 8
    1e4c:	08 f0       	brcs	.+2      	; 0x1e50 <DIO_u8GetPinValue+0x30>
    1e4e:	74 c0       	rjmp	.+232    	; 0x1f38 <DIO_u8GetPinValue+0x118>
		{
			switch(Copy_u8Port)
    1e50:	8a 81       	ldd	r24, Y+2	; 0x02
    1e52:	28 2f       	mov	r18, r24
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	3f 83       	std	Y+7, r19	; 0x07
    1e58:	2e 83       	std	Y+6, r18	; 0x06
    1e5a:	4e 81       	ldd	r20, Y+6	; 0x06
    1e5c:	5f 81       	ldd	r21, Y+7	; 0x07
    1e5e:	41 30       	cpi	r20, 0x01	; 1
    1e60:	51 05       	cpc	r21, r1
    1e62:	59 f1       	breq	.+86     	; 0x1eba <DIO_u8GetPinValue+0x9a>
    1e64:	8e 81       	ldd	r24, Y+6	; 0x06
    1e66:	9f 81       	ldd	r25, Y+7	; 0x07
    1e68:	82 30       	cpi	r24, 0x02	; 2
    1e6a:	91 05       	cpc	r25, r1
    1e6c:	34 f4       	brge	.+12     	; 0x1e7a <DIO_u8GetPinValue+0x5a>
    1e6e:	2e 81       	ldd	r18, Y+6	; 0x06
    1e70:	3f 81       	ldd	r19, Y+7	; 0x07
    1e72:	21 15       	cp	r18, r1
    1e74:	31 05       	cpc	r19, r1
    1e76:	69 f0       	breq	.+26     	; 0x1e92 <DIO_u8GetPinValue+0x72>
    1e78:	5c c0       	rjmp	.+184    	; 0x1f32 <DIO_u8GetPinValue+0x112>
    1e7a:	4e 81       	ldd	r20, Y+6	; 0x06
    1e7c:	5f 81       	ldd	r21, Y+7	; 0x07
    1e7e:	42 30       	cpi	r20, 0x02	; 2
    1e80:	51 05       	cpc	r21, r1
    1e82:	79 f1       	breq	.+94     	; 0x1ee2 <DIO_u8GetPinValue+0xc2>
    1e84:	8e 81       	ldd	r24, Y+6	; 0x06
    1e86:	9f 81       	ldd	r25, Y+7	; 0x07
    1e88:	83 30       	cpi	r24, 0x03	; 3
    1e8a:	91 05       	cpc	r25, r1
    1e8c:	09 f4       	brne	.+2      	; 0x1e90 <DIO_u8GetPinValue+0x70>
    1e8e:	3d c0       	rjmp	.+122    	; 0x1f0a <DIO_u8GetPinValue+0xea>
    1e90:	50 c0       	rjmp	.+160    	; 0x1f32 <DIO_u8GetPinValue+0x112>
			{
				case DIO_PORTA:*Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin);break;
    1e92:	e9 e3       	ldi	r30, 0x39	; 57
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	28 2f       	mov	r18, r24
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	88 2f       	mov	r24, r24
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	a9 01       	movw	r20, r18
    1ea4:	02 c0       	rjmp	.+4      	; 0x1eaa <DIO_u8GetPinValue+0x8a>
    1ea6:	55 95       	asr	r21
    1ea8:	47 95       	ror	r20
    1eaa:	8a 95       	dec	r24
    1eac:	e2 f7       	brpl	.-8      	; 0x1ea6 <DIO_u8GetPinValue+0x86>
    1eae:	ca 01       	movw	r24, r20
    1eb0:	81 70       	andi	r24, 0x01	; 1
    1eb2:	ec 81       	ldd	r30, Y+4	; 0x04
    1eb4:	fd 81       	ldd	r31, Y+5	; 0x05
    1eb6:	80 83       	st	Z, r24
    1eb8:	44 c0       	rjmp	.+136    	; 0x1f42 <DIO_u8GetPinValue+0x122>
				case DIO_PORTB:*Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin);break;
    1eba:	e6 e3       	ldi	r30, 0x36	; 54
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	28 2f       	mov	r18, r24
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec6:	88 2f       	mov	r24, r24
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	a9 01       	movw	r20, r18
    1ecc:	02 c0       	rjmp	.+4      	; 0x1ed2 <DIO_u8GetPinValue+0xb2>
    1ece:	55 95       	asr	r21
    1ed0:	47 95       	ror	r20
    1ed2:	8a 95       	dec	r24
    1ed4:	e2 f7       	brpl	.-8      	; 0x1ece <DIO_u8GetPinValue+0xae>
    1ed6:	ca 01       	movw	r24, r20
    1ed8:	81 70       	andi	r24, 0x01	; 1
    1eda:	ec 81       	ldd	r30, Y+4	; 0x04
    1edc:	fd 81       	ldd	r31, Y+5	; 0x05
    1ede:	80 83       	st	Z, r24
    1ee0:	30 c0       	rjmp	.+96     	; 0x1f42 <DIO_u8GetPinValue+0x122>
				case DIO_PORTC:*Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin);break;
    1ee2:	e3 e3       	ldi	r30, 0x33	; 51
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	28 2f       	mov	r18, r24
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	8b 81       	ldd	r24, Y+3	; 0x03
    1eee:	88 2f       	mov	r24, r24
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	a9 01       	movw	r20, r18
    1ef4:	02 c0       	rjmp	.+4      	; 0x1efa <DIO_u8GetPinValue+0xda>
    1ef6:	55 95       	asr	r21
    1ef8:	47 95       	ror	r20
    1efa:	8a 95       	dec	r24
    1efc:	e2 f7       	brpl	.-8      	; 0x1ef6 <DIO_u8GetPinValue+0xd6>
    1efe:	ca 01       	movw	r24, r20
    1f00:	81 70       	andi	r24, 0x01	; 1
    1f02:	ec 81       	ldd	r30, Y+4	; 0x04
    1f04:	fd 81       	ldd	r31, Y+5	; 0x05
    1f06:	80 83       	st	Z, r24
    1f08:	1c c0       	rjmp	.+56     	; 0x1f42 <DIO_u8GetPinValue+0x122>
				case DIO_PORTD:*Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin);break;
    1f0a:	e0 e3       	ldi	r30, 0x30	; 48
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	28 2f       	mov	r18, r24
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	8b 81       	ldd	r24, Y+3	; 0x03
    1f16:	88 2f       	mov	r24, r24
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	a9 01       	movw	r20, r18
    1f1c:	02 c0       	rjmp	.+4      	; 0x1f22 <DIO_u8GetPinValue+0x102>
    1f1e:	55 95       	asr	r21
    1f20:	47 95       	ror	r20
    1f22:	8a 95       	dec	r24
    1f24:	e2 f7       	brpl	.-8      	; 0x1f1e <DIO_u8GetPinValue+0xfe>
    1f26:	ca 01       	movw	r24, r20
    1f28:	81 70       	andi	r24, 0x01	; 1
    1f2a:	ec 81       	ldd	r30, Y+4	; 0x04
    1f2c:	fd 81       	ldd	r31, Y+5	; 0x05
    1f2e:	80 83       	st	Z, r24
    1f30:	08 c0       	rjmp	.+16     	; 0x1f42 <DIO_u8GetPinValue+0x122>
				default: Local_u8ErrorState=1;
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	89 83       	std	Y+1, r24	; 0x01
    1f36:	05 c0       	rjmp	.+10     	; 0x1f42 <DIO_u8GetPinValue+0x122>
			}
		}
		else
			Local_u8ErrorState=1;
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	89 83       	std	Y+1, r24	; 0x01
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <DIO_u8GetPinValue+0x122>
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    1f3e:	82 e0       	ldi	r24, 0x02	; 2
    1f40:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f44:	27 96       	adiw	r28, 0x07	; 7
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	f8 94       	cli
    1f4a:	de bf       	out	0x3e, r29	; 62
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	cd bf       	out	0x3d, r28	; 61
    1f50:	cf 91       	pop	r28
    1f52:	df 91       	pop	r29
    1f54:	08 95       	ret

00001f56 <DIO_u8TogglePinValue>:
u8 DIO_u8TogglePinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
{
    1f56:	df 93       	push	r29
    1f58:	cf 93       	push	r28
    1f5a:	00 d0       	rcall	.+0      	; 0x1f5c <DIO_u8TogglePinValue+0x6>
    1f5c:	00 d0       	rcall	.+0      	; 0x1f5e <DIO_u8TogglePinValue+0x8>
    1f5e:	0f 92       	push	r0
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    1f64:	8a 83       	std	Y+2, r24	; 0x02
    1f66:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1f68:	19 82       	std	Y+1, r1	; 0x01
	if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    1f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6c:	88 30       	cpi	r24, 0x08	; 8
    1f6e:	08 f0       	brcs	.+2      	; 0x1f72 <DIO_u8TogglePinValue+0x1c>
    1f70:	72 c0       	rjmp	.+228    	; 0x2056 <DIO_u8TogglePinValue+0x100>
	{
		switch(Copy_u8Port)
    1f72:	8a 81       	ldd	r24, Y+2	; 0x02
    1f74:	28 2f       	mov	r18, r24
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	3d 83       	std	Y+5, r19	; 0x05
    1f7a:	2c 83       	std	Y+4, r18	; 0x04
    1f7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f80:	81 30       	cpi	r24, 0x01	; 1
    1f82:	91 05       	cpc	r25, r1
    1f84:	49 f1       	breq	.+82     	; 0x1fd8 <DIO_u8TogglePinValue+0x82>
    1f86:	2c 81       	ldd	r18, Y+4	; 0x04
    1f88:	3d 81       	ldd	r19, Y+5	; 0x05
    1f8a:	22 30       	cpi	r18, 0x02	; 2
    1f8c:	31 05       	cpc	r19, r1
    1f8e:	2c f4       	brge	.+10     	; 0x1f9a <DIO_u8TogglePinValue+0x44>
    1f90:	8c 81       	ldd	r24, Y+4	; 0x04
    1f92:	9d 81       	ldd	r25, Y+5	; 0x05
    1f94:	00 97       	sbiw	r24, 0x00	; 0
    1f96:	61 f0       	breq	.+24     	; 0x1fb0 <DIO_u8TogglePinValue+0x5a>
    1f98:	5b c0       	rjmp	.+182    	; 0x2050 <DIO_u8TogglePinValue+0xfa>
    1f9a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f9c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f9e:	22 30       	cpi	r18, 0x02	; 2
    1fa0:	31 05       	cpc	r19, r1
    1fa2:	71 f1       	breq	.+92     	; 0x2000 <DIO_u8TogglePinValue+0xaa>
    1fa4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fa8:	83 30       	cpi	r24, 0x03	; 3
    1faa:	91 05       	cpc	r25, r1
    1fac:	e9 f1       	breq	.+122    	; 0x2028 <DIO_u8TogglePinValue+0xd2>
    1fae:	50 c0       	rjmp	.+160    	; 0x2050 <DIO_u8TogglePinValue+0xfa>
		{
			case DIO_PORTA:TOG_BIT(PORTA,Copy_u8Pin);break;
    1fb0:	ab e3       	ldi	r26, 0x3B	; 59
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	eb e3       	ldi	r30, 0x3B	; 59
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	48 2f       	mov	r20, r24
    1fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbe:	28 2f       	mov	r18, r24
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	02 2e       	mov	r0, r18
    1fc8:	02 c0       	rjmp	.+4      	; 0x1fce <DIO_u8TogglePinValue+0x78>
    1fca:	88 0f       	add	r24, r24
    1fcc:	99 1f       	adc	r25, r25
    1fce:	0a 94       	dec	r0
    1fd0:	e2 f7       	brpl	.-8      	; 0x1fca <DIO_u8TogglePinValue+0x74>
    1fd2:	84 27       	eor	r24, r20
    1fd4:	8c 93       	st	X, r24
    1fd6:	41 c0       	rjmp	.+130    	; 0x205a <DIO_u8TogglePinValue+0x104>
			case DIO_PORTB:TOG_BIT(PORTB,Copy_u8Pin);break;
    1fd8:	a8 e3       	ldi	r26, 0x38	; 56
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e8 e3       	ldi	r30, 0x38	; 56
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	48 2f       	mov	r20, r24
    1fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe6:	28 2f       	mov	r18, r24
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	02 2e       	mov	r0, r18
    1ff0:	02 c0       	rjmp	.+4      	; 0x1ff6 <DIO_u8TogglePinValue+0xa0>
    1ff2:	88 0f       	add	r24, r24
    1ff4:	99 1f       	adc	r25, r25
    1ff6:	0a 94       	dec	r0
    1ff8:	e2 f7       	brpl	.-8      	; 0x1ff2 <DIO_u8TogglePinValue+0x9c>
    1ffa:	84 27       	eor	r24, r20
    1ffc:	8c 93       	st	X, r24
    1ffe:	2d c0       	rjmp	.+90     	; 0x205a <DIO_u8TogglePinValue+0x104>
			case DIO_PORTC:TOG_BIT(PORTC,Copy_u8Pin);break;
    2000:	a5 e3       	ldi	r26, 0x35	; 53
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	e5 e3       	ldi	r30, 0x35	; 53
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	48 2f       	mov	r20, r24
    200c:	8b 81       	ldd	r24, Y+3	; 0x03
    200e:	28 2f       	mov	r18, r24
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	02 2e       	mov	r0, r18
    2018:	02 c0       	rjmp	.+4      	; 0x201e <DIO_u8TogglePinValue+0xc8>
    201a:	88 0f       	add	r24, r24
    201c:	99 1f       	adc	r25, r25
    201e:	0a 94       	dec	r0
    2020:	e2 f7       	brpl	.-8      	; 0x201a <DIO_u8TogglePinValue+0xc4>
    2022:	84 27       	eor	r24, r20
    2024:	8c 93       	st	X, r24
    2026:	19 c0       	rjmp	.+50     	; 0x205a <DIO_u8TogglePinValue+0x104>
			case DIO_PORTD:TOG_BIT(PORTD,Copy_u8Pin);break;
    2028:	a2 e3       	ldi	r26, 0x32	; 50
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	e2 e3       	ldi	r30, 0x32	; 50
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	48 2f       	mov	r20, r24
    2034:	8b 81       	ldd	r24, Y+3	; 0x03
    2036:	28 2f       	mov	r18, r24
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	02 2e       	mov	r0, r18
    2040:	02 c0       	rjmp	.+4      	; 0x2046 <DIO_u8TogglePinValue+0xf0>
    2042:	88 0f       	add	r24, r24
    2044:	99 1f       	adc	r25, r25
    2046:	0a 94       	dec	r0
    2048:	e2 f7       	brpl	.-8      	; 0x2042 <DIO_u8TogglePinValue+0xec>
    204a:	84 27       	eor	r24, r20
    204c:	8c 93       	st	X, r24
    204e:	05 c0       	rjmp	.+10     	; 0x205a <DIO_u8TogglePinValue+0x104>
			default: Local_u8ErrorState=1;
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	89 83       	std	Y+1, r24	; 0x01
    2054:	02 c0       	rjmp	.+4      	; 0x205a <DIO_u8TogglePinValue+0x104>
		}
	}
	else
		Local_u8ErrorState=1;
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    205a:	89 81       	ldd	r24, Y+1	; 0x01
}
    205c:	0f 90       	pop	r0
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	cf 91       	pop	r28
    2068:	df 91       	pop	r29
    206a:	08 95       	ret

0000206c <DIO_u8SetLowNibbleValue>:

u8 DIO_u8SetLowNibbleValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    206c:	df 93       	push	r29
    206e:	cf 93       	push	r28
    2070:	00 d0       	rcall	.+0      	; 0x2072 <DIO_u8SetLowNibbleValue+0x6>
    2072:	00 d0       	rcall	.+0      	; 0x2074 <DIO_u8SetLowNibbleValue+0x8>
    2074:	0f 92       	push	r0
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
    207a:	8a 83       	std	Y+2, r24	; 0x02
    207c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    207e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port<=DIO_PORTD){
    2080:	8a 81       	ldd	r24, Y+2	; 0x02
    2082:	84 30       	cpi	r24, 0x04	; 4
    2084:	08 f0       	brcs	.+2      	; 0x2088 <DIO_u8SetLowNibbleValue+0x1c>
    2086:	62 c0       	rjmp	.+196    	; 0x214c <DIO_u8SetLowNibbleValue+0xe0>
		switch(Copy_u8Port)
    2088:	8a 81       	ldd	r24, Y+2	; 0x02
    208a:	28 2f       	mov	r18, r24
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	3d 83       	std	Y+5, r19	; 0x05
    2090:	2c 83       	std	Y+4, r18	; 0x04
    2092:	8c 81       	ldd	r24, Y+4	; 0x04
    2094:	9d 81       	ldd	r25, Y+5	; 0x05
    2096:	81 30       	cpi	r24, 0x01	; 1
    2098:	91 05       	cpc	r25, r1
    209a:	29 f1       	breq	.+74     	; 0x20e6 <DIO_u8SetLowNibbleValue+0x7a>
    209c:	2c 81       	ldd	r18, Y+4	; 0x04
    209e:	3d 81       	ldd	r19, Y+5	; 0x05
    20a0:	22 30       	cpi	r18, 0x02	; 2
    20a2:	31 05       	cpc	r19, r1
    20a4:	2c f4       	brge	.+10     	; 0x20b0 <DIO_u8SetLowNibbleValue+0x44>
    20a6:	8c 81       	ldd	r24, Y+4	; 0x04
    20a8:	9d 81       	ldd	r25, Y+5	; 0x05
    20aa:	00 97       	sbiw	r24, 0x00	; 0
    20ac:	61 f0       	breq	.+24     	; 0x20c6 <DIO_u8SetLowNibbleValue+0x5a>
    20ae:	4b c0       	rjmp	.+150    	; 0x2146 <DIO_u8SetLowNibbleValue+0xda>
    20b0:	2c 81       	ldd	r18, Y+4	; 0x04
    20b2:	3d 81       	ldd	r19, Y+5	; 0x05
    20b4:	22 30       	cpi	r18, 0x02	; 2
    20b6:	31 05       	cpc	r19, r1
    20b8:	31 f1       	breq	.+76     	; 0x2106 <DIO_u8SetLowNibbleValue+0x9a>
    20ba:	8c 81       	ldd	r24, Y+4	; 0x04
    20bc:	9d 81       	ldd	r25, Y+5	; 0x05
    20be:	83 30       	cpi	r24, 0x03	; 3
    20c0:	91 05       	cpc	r25, r1
    20c2:	89 f1       	breq	.+98     	; 0x2126 <DIO_u8SetLowNibbleValue+0xba>
    20c4:	40 c0       	rjmp	.+128    	; 0x2146 <DIO_u8SetLowNibbleValue+0xda>
		{
			case DIO_PORTA:PORTA&=DIO_LOWNIBBLE_MASK;PORTA|=Copy_u8Value;break;
    20c6:	ab e3       	ldi	r26, 0x3B	; 59
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	eb e3       	ldi	r30, 0x3B	; 59
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	80 7f       	andi	r24, 0xF0	; 240
    20d2:	8c 93       	st	X, r24
    20d4:	ab e3       	ldi	r26, 0x3B	; 59
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	eb e3       	ldi	r30, 0x3B	; 59
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	90 81       	ld	r25, Z
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	89 2b       	or	r24, r25
    20e2:	8c 93       	st	X, r24
    20e4:	35 c0       	rjmp	.+106    	; 0x2150 <DIO_u8SetLowNibbleValue+0xe4>
			case DIO_PORTB:PORTB&=DIO_LOWNIBBLE_MASK;PORTB|=Copy_u8Value;break;
    20e6:	a8 e3       	ldi	r26, 0x38	; 56
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	e8 e3       	ldi	r30, 0x38	; 56
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	80 81       	ld	r24, Z
    20f0:	80 7f       	andi	r24, 0xF0	; 240
    20f2:	8c 93       	st	X, r24
    20f4:	a8 e3       	ldi	r26, 0x38	; 56
    20f6:	b0 e0       	ldi	r27, 0x00	; 0
    20f8:	e8 e3       	ldi	r30, 0x38	; 56
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	90 81       	ld	r25, Z
    20fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2100:	89 2b       	or	r24, r25
    2102:	8c 93       	st	X, r24
    2104:	25 c0       	rjmp	.+74     	; 0x2150 <DIO_u8SetLowNibbleValue+0xe4>
			case DIO_PORTC:PORTC&=DIO_LOWNIBBLE_MASK;PORTC|=Copy_u8Value;break;
    2106:	a5 e3       	ldi	r26, 0x35	; 53
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	e5 e3       	ldi	r30, 0x35	; 53
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	80 7f       	andi	r24, 0xF0	; 240
    2112:	8c 93       	st	X, r24
    2114:	a5 e3       	ldi	r26, 0x35	; 53
    2116:	b0 e0       	ldi	r27, 0x00	; 0
    2118:	e5 e3       	ldi	r30, 0x35	; 53
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	90 81       	ld	r25, Z
    211e:	8b 81       	ldd	r24, Y+3	; 0x03
    2120:	89 2b       	or	r24, r25
    2122:	8c 93       	st	X, r24
    2124:	15 c0       	rjmp	.+42     	; 0x2150 <DIO_u8SetLowNibbleValue+0xe4>
			case DIO_PORTD:PORTD&=DIO_LOWNIBBLE_MASK;PORTD|=Copy_u8Value;break;
    2126:	a2 e3       	ldi	r26, 0x32	; 50
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	e2 e3       	ldi	r30, 0x32	; 50
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	80 7f       	andi	r24, 0xF0	; 240
    2132:	8c 93       	st	X, r24
    2134:	a2 e3       	ldi	r26, 0x32	; 50
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	e2 e3       	ldi	r30, 0x32	; 50
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	90 81       	ld	r25, Z
    213e:	8b 81       	ldd	r24, Y+3	; 0x03
    2140:	89 2b       	or	r24, r25
    2142:	8c 93       	st	X, r24
    2144:	05 c0       	rjmp	.+10     	; 0x2150 <DIO_u8SetLowNibbleValue+0xe4>
			default: Local_u8ErrorState=1;
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	89 83       	std	Y+1, r24	; 0x01
    214a:	02 c0       	rjmp	.+4      	; 0x2150 <DIO_u8SetLowNibbleValue+0xe4>
		}
	}
	else
		Local_u8ErrorState=1;
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2150:	89 81       	ldd	r24, Y+1	; 0x01
}
    2152:	0f 90       	pop	r0
    2154:	0f 90       	pop	r0
    2156:	0f 90       	pop	r0
    2158:	0f 90       	pop	r0
    215a:	0f 90       	pop	r0
    215c:	cf 91       	pop	r28
    215e:	df 91       	pop	r29
    2160:	08 95       	ret

00002162 <DIO_u8SetHighNibbleValue>:
u8 DIO_u8SetHighNibbleValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    2162:	df 93       	push	r29
    2164:	cf 93       	push	r28
    2166:	00 d0       	rcall	.+0      	; 0x2168 <DIO_u8SetHighNibbleValue+0x6>
    2168:	00 d0       	rcall	.+0      	; 0x216a <DIO_u8SetHighNibbleValue+0x8>
    216a:	0f 92       	push	r0
    216c:	cd b7       	in	r28, 0x3d	; 61
    216e:	de b7       	in	r29, 0x3e	; 62
    2170:	8a 83       	std	Y+2, r24	; 0x02
    2172:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    2174:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port<=DIO_PORTD){
    2176:	8a 81       	ldd	r24, Y+2	; 0x02
    2178:	84 30       	cpi	r24, 0x04	; 4
    217a:	08 f0       	brcs	.+2      	; 0x217e <DIO_u8SetHighNibbleValue+0x1c>
    217c:	87 c0       	rjmp	.+270    	; 0x228c <DIO_u8SetHighNibbleValue+0x12a>
		switch(Copy_u8Port)
    217e:	8a 81       	ldd	r24, Y+2	; 0x02
    2180:	28 2f       	mov	r18, r24
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	3d 83       	std	Y+5, r19	; 0x05
    2186:	2c 83       	std	Y+4, r18	; 0x04
    2188:	8c 81       	ldd	r24, Y+4	; 0x04
    218a:	9d 81       	ldd	r25, Y+5	; 0x05
    218c:	81 30       	cpi	r24, 0x01	; 1
    218e:	91 05       	cpc	r25, r1
    2190:	79 f1       	breq	.+94     	; 0x21f0 <DIO_u8SetHighNibbleValue+0x8e>
    2192:	2c 81       	ldd	r18, Y+4	; 0x04
    2194:	3d 81       	ldd	r19, Y+5	; 0x05
    2196:	22 30       	cpi	r18, 0x02	; 2
    2198:	31 05       	cpc	r19, r1
    219a:	2c f4       	brge	.+10     	; 0x21a6 <DIO_u8SetHighNibbleValue+0x44>
    219c:	8c 81       	ldd	r24, Y+4	; 0x04
    219e:	9d 81       	ldd	r25, Y+5	; 0x05
    21a0:	00 97       	sbiw	r24, 0x00	; 0
    21a2:	69 f0       	breq	.+26     	; 0x21be <DIO_u8SetHighNibbleValue+0x5c>
    21a4:	70 c0       	rjmp	.+224    	; 0x2286 <DIO_u8SetHighNibbleValue+0x124>
    21a6:	2c 81       	ldd	r18, Y+4	; 0x04
    21a8:	3d 81       	ldd	r19, Y+5	; 0x05
    21aa:	22 30       	cpi	r18, 0x02	; 2
    21ac:	31 05       	cpc	r19, r1
    21ae:	c9 f1       	breq	.+114    	; 0x2222 <DIO_u8SetHighNibbleValue+0xc0>
    21b0:	8c 81       	ldd	r24, Y+4	; 0x04
    21b2:	9d 81       	ldd	r25, Y+5	; 0x05
    21b4:	83 30       	cpi	r24, 0x03	; 3
    21b6:	91 05       	cpc	r25, r1
    21b8:	09 f4       	brne	.+2      	; 0x21bc <DIO_u8SetHighNibbleValue+0x5a>
    21ba:	4c c0       	rjmp	.+152    	; 0x2254 <DIO_u8SetHighNibbleValue+0xf2>
    21bc:	64 c0       	rjmp	.+200    	; 0x2286 <DIO_u8SetHighNibbleValue+0x124>
		{
			case DIO_PORTA:PORTA &= DIO_HIGHNIBBLE_MASK;PORTA |= (Copy_u8Value<<4);break;
    21be:	ab e3       	ldi	r26, 0x3B	; 59
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	eb e3       	ldi	r30, 0x3B	; 59
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	8f 70       	andi	r24, 0x0F	; 15
    21ca:	8c 93       	st	X, r24
    21cc:	ab e3       	ldi	r26, 0x3B	; 59
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	eb e3       	ldi	r30, 0x3B	; 59
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	28 2f       	mov	r18, r24
    21d8:	8b 81       	ldd	r24, Y+3	; 0x03
    21da:	88 2f       	mov	r24, r24
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	82 95       	swap	r24
    21e0:	92 95       	swap	r25
    21e2:	90 7f       	andi	r25, 0xF0	; 240
    21e4:	98 27       	eor	r25, r24
    21e6:	80 7f       	andi	r24, 0xF0	; 240
    21e8:	98 27       	eor	r25, r24
    21ea:	82 2b       	or	r24, r18
    21ec:	8c 93       	st	X, r24
    21ee:	50 c0       	rjmp	.+160    	; 0x2290 <DIO_u8SetHighNibbleValue+0x12e>
			case DIO_PORTB:PORTB &= DIO_HIGHNIBBLE_MASK;PORTB |= (Copy_u8Value<<4);break;
    21f0:	a8 e3       	ldi	r26, 0x38	; 56
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	e8 e3       	ldi	r30, 0x38	; 56
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 81       	ld	r24, Z
    21fa:	8f 70       	andi	r24, 0x0F	; 15
    21fc:	8c 93       	st	X, r24
    21fe:	a8 e3       	ldi	r26, 0x38	; 56
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	e8 e3       	ldi	r30, 0x38	; 56
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	28 2f       	mov	r18, r24
    220a:	8b 81       	ldd	r24, Y+3	; 0x03
    220c:	88 2f       	mov	r24, r24
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	82 95       	swap	r24
    2212:	92 95       	swap	r25
    2214:	90 7f       	andi	r25, 0xF0	; 240
    2216:	98 27       	eor	r25, r24
    2218:	80 7f       	andi	r24, 0xF0	; 240
    221a:	98 27       	eor	r25, r24
    221c:	82 2b       	or	r24, r18
    221e:	8c 93       	st	X, r24
    2220:	37 c0       	rjmp	.+110    	; 0x2290 <DIO_u8SetHighNibbleValue+0x12e>
			case DIO_PORTC:PORTC &= DIO_HIGHNIBBLE_MASK;PORTC |= (Copy_u8Value<<4);break;
    2222:	a5 e3       	ldi	r26, 0x35	; 53
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	e5 e3       	ldi	r30, 0x35	; 53
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	8f 70       	andi	r24, 0x0F	; 15
    222e:	8c 93       	st	X, r24
    2230:	a5 e3       	ldi	r26, 0x35	; 53
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	e5 e3       	ldi	r30, 0x35	; 53
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	28 2f       	mov	r18, r24
    223c:	8b 81       	ldd	r24, Y+3	; 0x03
    223e:	88 2f       	mov	r24, r24
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	82 95       	swap	r24
    2244:	92 95       	swap	r25
    2246:	90 7f       	andi	r25, 0xF0	; 240
    2248:	98 27       	eor	r25, r24
    224a:	80 7f       	andi	r24, 0xF0	; 240
    224c:	98 27       	eor	r25, r24
    224e:	82 2b       	or	r24, r18
    2250:	8c 93       	st	X, r24
    2252:	1e c0       	rjmp	.+60     	; 0x2290 <DIO_u8SetHighNibbleValue+0x12e>
			case DIO_PORTD:PORTD &= DIO_HIGHNIBBLE_MASK;PORTD |= (Copy_u8Value<<4);break;
    2254:	a2 e3       	ldi	r26, 0x32	; 50
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	e2 e3       	ldi	r30, 0x32	; 50
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 81       	ld	r24, Z
    225e:	8f 70       	andi	r24, 0x0F	; 15
    2260:	8c 93       	st	X, r24
    2262:	a2 e3       	ldi	r26, 0x32	; 50
    2264:	b0 e0       	ldi	r27, 0x00	; 0
    2266:	e2 e3       	ldi	r30, 0x32	; 50
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 81       	ld	r24, Z
    226c:	28 2f       	mov	r18, r24
    226e:	8b 81       	ldd	r24, Y+3	; 0x03
    2270:	88 2f       	mov	r24, r24
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	82 95       	swap	r24
    2276:	92 95       	swap	r25
    2278:	90 7f       	andi	r25, 0xF0	; 240
    227a:	98 27       	eor	r25, r24
    227c:	80 7f       	andi	r24, 0xF0	; 240
    227e:	98 27       	eor	r25, r24
    2280:	82 2b       	or	r24, r18
    2282:	8c 93       	st	X, r24
    2284:	05 c0       	rjmp	.+10     	; 0x2290 <DIO_u8SetHighNibbleValue+0x12e>
			default: Local_u8ErrorState=1;
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	89 83       	std	Y+1, r24	; 0x01
    228a:	02 c0       	rjmp	.+4      	; 0x2290 <DIO_u8SetHighNibbleValue+0x12e>
		}
	}
	else
		Local_u8ErrorState=1;
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2290:	89 81       	ldd	r24, Y+1	; 0x01
}
    2292:	0f 90       	pop	r0
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	cf 91       	pop	r28
    229e:	df 91       	pop	r29
    22a0:	08 95       	ret

000022a2 <EXTI_voidInt0Init>:

static void (*EXTI_voidCallBack[3])() = {NULL};


void EXTI_voidInt0Init()
{
    22a2:	df 93       	push	r29
    22a4:	cf 93       	push	r28
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62
	MCUCR &= MASK_SENCE_INT0;
    22aa:	a5 e5       	ldi	r26, 0x55	; 85
    22ac:	b0 e0       	ldi	r27, 0x00	; 0
    22ae:	e5 e5       	ldi	r30, 0x55	; 85
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
    22b4:	8c 7f       	andi	r24, 0xFC	; 252
    22b6:	8c 93       	st	X, r24
	MCUCR |= EXTI0_SENCECONTROL<<MCUCR_ISC00;
    22b8:	a5 e5       	ldi	r26, 0x55	; 85
    22ba:	b0 e0       	ldi	r27, 0x00	; 0
    22bc:	e5 e5       	ldi	r30, 0x55	; 85
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	80 81       	ld	r24, Z
    22c2:	82 60       	ori	r24, 0x02	; 2
    22c4:	8c 93       	st	X, r24

	SET_BIT(GICR,GICR_INT0);
    22c6:	ab e5       	ldi	r26, 0x5B	; 91
    22c8:	b0 e0       	ldi	r27, 0x00	; 0
    22ca:	eb e5       	ldi	r30, 0x5B	; 91
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	80 81       	ld	r24, Z
    22d0:	80 64       	ori	r24, 0x40	; 64
    22d2:	8c 93       	st	X, r24
}
    22d4:	cf 91       	pop	r28
    22d6:	df 91       	pop	r29
    22d8:	08 95       	ret

000022da <EXTI_u8Int0CallBack>:

u8 EXTI_u8Int0CallBack(void (*Notification)())
{
    22da:	df 93       	push	r29
    22dc:	cf 93       	push	r28
    22de:	00 d0       	rcall	.+0      	; 0x22e0 <EXTI_u8Int0CallBack+0x6>
    22e0:	0f 92       	push	r0
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
    22e6:	9b 83       	std	Y+3, r25	; 0x03
    22e8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    22ea:	19 82       	std	Y+1, r1	; 0x01
	if(Notification != NULL )
    22ec:	8a 81       	ldd	r24, Y+2	; 0x02
    22ee:	9b 81       	ldd	r25, Y+3	; 0x03
    22f0:	00 97       	sbiw	r24, 0x00	; 0
    22f2:	39 f0       	breq	.+14     	; 0x2302 <EXTI_u8Int0CallBack+0x28>
	{
		EXTI_voidCallBack[EXTI0] = Notification;
    22f4:	8a 81       	ldd	r24, Y+2	; 0x02
    22f6:	9b 81       	ldd	r25, Y+3	; 0x03
    22f8:	90 93 a6 01 	sts	0x01A6, r25
    22fc:	80 93 a5 01 	sts	0x01A5, r24
    2300:	02 c0       	rjmp	.+4      	; 0x2306 <EXTI_u8Int0CallBack+0x2c>
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    2302:	82 e0       	ldi	r24, 0x02	; 2
    2304:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2306:	89 81       	ldd	r24, Y+1	; 0x01
}
    2308:	0f 90       	pop	r0
    230a:	0f 90       	pop	r0
    230c:	0f 90       	pop	r0
    230e:	cf 91       	pop	r28
    2310:	df 91       	pop	r29
    2312:	08 95       	ret

00002314 <EXTI_voidInt0ChangeSence>:

u8 EXTI_voidInt0ChangeSence(u8 Copy_u8Sence)
{
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	00 d0       	rcall	.+0      	; 0x231a <EXTI_voidInt0ChangeSence+0x6>
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62
    231e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2320:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Sence<=EXTI0_RISING_ADGE)
    2322:	8a 81       	ldd	r24, Y+2	; 0x02
    2324:	84 30       	cpi	r24, 0x04	; 4
    2326:	80 f4       	brcc	.+32     	; 0x2348 <EXTI_voidInt0ChangeSence+0x34>
	{
		MCUCR &= MASK_SENCE_INT0;
    2328:	a5 e5       	ldi	r26, 0x55	; 85
    232a:	b0 e0       	ldi	r27, 0x00	; 0
    232c:	e5 e5       	ldi	r30, 0x55	; 85
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	80 81       	ld	r24, Z
    2332:	8c 7f       	andi	r24, 0xFC	; 252
    2334:	8c 93       	st	X, r24
		MCUCR |= Copy_u8Sence<<MCUCR_ISC00;
    2336:	a5 e5       	ldi	r26, 0x55	; 85
    2338:	b0 e0       	ldi	r27, 0x00	; 0
    233a:	e5 e5       	ldi	r30, 0x55	; 85
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	90 81       	ld	r25, Z
    2340:	8a 81       	ldd	r24, Y+2	; 0x02
    2342:	89 2b       	or	r24, r25
    2344:	8c 93       	st	X, r24
    2346:	02 c0       	rjmp	.+4      	; 0x234c <EXTI_voidInt0ChangeSence+0x38>
	}
	else
		Local_u8ErrorState = NOTOK;
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    234c:	89 81       	ldd	r24, Y+1	; 0x01
}
    234e:	0f 90       	pop	r0
    2350:	0f 90       	pop	r0
    2352:	cf 91       	pop	r28
    2354:	df 91       	pop	r29
    2356:	08 95       	ret

00002358 <EXTI_voidInt1Init>:
void EXTI_voidInt1Init()
{
    2358:	df 93       	push	r29
    235a:	cf 93       	push	r28
    235c:	cd b7       	in	r28, 0x3d	; 61
    235e:	de b7       	in	r29, 0x3e	; 62
	MCUCR &= MASK_SENCE_INT1;
    2360:	a5 e5       	ldi	r26, 0x55	; 85
    2362:	b0 e0       	ldi	r27, 0x00	; 0
    2364:	e5 e5       	ldi	r30, 0x55	; 85
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	83 7f       	andi	r24, 0xF3	; 243
    236c:	8c 93       	st	X, r24
	MCUCR |= EXTI1_SENCECONTROL<<MCUCR_ISC10;
    236e:	a5 e5       	ldi	r26, 0x55	; 85
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	e5 e5       	ldi	r30, 0x55	; 85
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	88 60       	ori	r24, 0x08	; 8
    237a:	8c 93       	st	X, r24

	SET_BIT(GICR,GICR_INT1);
    237c:	ab e5       	ldi	r26, 0x5B	; 91
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	eb e5       	ldi	r30, 0x5B	; 91
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	80 68       	ori	r24, 0x80	; 128
    2388:	8c 93       	st	X, r24
}
    238a:	cf 91       	pop	r28
    238c:	df 91       	pop	r29
    238e:	08 95       	ret

00002390 <EXTI_u8Int1CallBack>:

u8 EXTI_u8Int1CallBack(void (*Notification)())
{
    2390:	df 93       	push	r29
    2392:	cf 93       	push	r28
    2394:	00 d0       	rcall	.+0      	; 0x2396 <EXTI_u8Int1CallBack+0x6>
    2396:	0f 92       	push	r0
    2398:	cd b7       	in	r28, 0x3d	; 61
    239a:	de b7       	in	r29, 0x3e	; 62
    239c:	9b 83       	std	Y+3, r25	; 0x03
    239e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    23a0:	19 82       	std	Y+1, r1	; 0x01
	if(Notification != NULL )
    23a2:	8a 81       	ldd	r24, Y+2	; 0x02
    23a4:	9b 81       	ldd	r25, Y+3	; 0x03
    23a6:	00 97       	sbiw	r24, 0x00	; 0
    23a8:	39 f0       	breq	.+14     	; 0x23b8 <EXTI_u8Int1CallBack+0x28>
	{
		EXTI_voidCallBack[EXTI1] = Notification;
    23aa:	8a 81       	ldd	r24, Y+2	; 0x02
    23ac:	9b 81       	ldd	r25, Y+3	; 0x03
    23ae:	90 93 a8 01 	sts	0x01A8, r25
    23b2:	80 93 a7 01 	sts	0x01A7, r24
    23b6:	02 c0       	rjmp	.+4      	; 0x23bc <EXTI_u8Int1CallBack+0x2c>
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    23b8:	82 e0       	ldi	r24, 0x02	; 2
    23ba:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    23bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    23be:	0f 90       	pop	r0
    23c0:	0f 90       	pop	r0
    23c2:	0f 90       	pop	r0
    23c4:	cf 91       	pop	r28
    23c6:	df 91       	pop	r29
    23c8:	08 95       	ret

000023ca <EXTI_voidInt1ChangeSence>:
u8 EXTI_voidInt1ChangeSence(u8 Copy_u8Sence)
{
    23ca:	df 93       	push	r29
    23cc:	cf 93       	push	r28
    23ce:	00 d0       	rcall	.+0      	; 0x23d0 <EXTI_voidInt1ChangeSence+0x6>
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
    23d4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    23d6:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Sence<=EXTI1_RISING_ADGE)
    23d8:	8a 81       	ldd	r24, Y+2	; 0x02
    23da:	84 30       	cpi	r24, 0x04	; 4
    23dc:	b8 f4       	brcc	.+46     	; 0x240c <EXTI_voidInt1ChangeSence+0x42>
	{
		MCUCR &= MASK_SENCE_INT1;
    23de:	a5 e5       	ldi	r26, 0x55	; 85
    23e0:	b0 e0       	ldi	r27, 0x00	; 0
    23e2:	e5 e5       	ldi	r30, 0x55	; 85
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	80 81       	ld	r24, Z
    23e8:	83 7f       	andi	r24, 0xF3	; 243
    23ea:	8c 93       	st	X, r24
		MCUCR |= Copy_u8Sence<<MCUCR_ISC10;
    23ec:	a5 e5       	ldi	r26, 0x55	; 85
    23ee:	b0 e0       	ldi	r27, 0x00	; 0
    23f0:	e5 e5       	ldi	r30, 0x55	; 85
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	28 2f       	mov	r18, r24
    23f8:	8a 81       	ldd	r24, Y+2	; 0x02
    23fa:	88 2f       	mov	r24, r24
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	88 0f       	add	r24, r24
    2400:	99 1f       	adc	r25, r25
    2402:	88 0f       	add	r24, r24
    2404:	99 1f       	adc	r25, r25
    2406:	82 2b       	or	r24, r18
    2408:	8c 93       	st	X, r24
    240a:	02 c0       	rjmp	.+4      	; 0x2410 <EXTI_voidInt1ChangeSence+0x46>
	}
	else
		Local_u8ErrorState = NOTOK;
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2410:	89 81       	ldd	r24, Y+1	; 0x01
}
    2412:	0f 90       	pop	r0
    2414:	0f 90       	pop	r0
    2416:	cf 91       	pop	r28
    2418:	df 91       	pop	r29
    241a:	08 95       	ret

0000241c <EXTI_voidInt2Init>:
void EXTI_voidInt2Init()
{
    241c:	df 93       	push	r29
    241e:	cf 93       	push	r28
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
	MCUCSR &= MASK_SENCE_INT2;
    2424:	a4 e5       	ldi	r26, 0x54	; 84
    2426:	b0 e0       	ldi	r27, 0x00	; 0
    2428:	e4 e5       	ldi	r30, 0x54	; 84
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	80 81       	ld	r24, Z
    242e:	8f 7b       	andi	r24, 0xBF	; 191
    2430:	8c 93       	st	X, r24
	MCUCSR |= EXTI2_SENCECONTROL<<MCUCSR_ISC2;
    2432:	a4 e5       	ldi	r26, 0x54	; 84
    2434:	b0 e0       	ldi	r27, 0x00	; 0
    2436:	e4 e5       	ldi	r30, 0x54	; 84
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	80 81       	ld	r24, Z
    243c:	8c 93       	st	X, r24

	SET_BIT(GICR,GICR_INT2);
    243e:	ab e5       	ldi	r26, 0x5B	; 91
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	eb e5       	ldi	r30, 0x5B	; 91
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	80 81       	ld	r24, Z
    2448:	80 62       	ori	r24, 0x20	; 32
    244a:	8c 93       	st	X, r24
}
    244c:	cf 91       	pop	r28
    244e:	df 91       	pop	r29
    2450:	08 95       	ret

00002452 <EXTI_u8Int2CallBack>:

u8 EXTI_u8Int2CallBack(void (*Notification)())
{
    2452:	df 93       	push	r29
    2454:	cf 93       	push	r28
    2456:	00 d0       	rcall	.+0      	; 0x2458 <EXTI_u8Int2CallBack+0x6>
    2458:	0f 92       	push	r0
    245a:	cd b7       	in	r28, 0x3d	; 61
    245c:	de b7       	in	r29, 0x3e	; 62
    245e:	9b 83       	std	Y+3, r25	; 0x03
    2460:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2462:	19 82       	std	Y+1, r1	; 0x01
	if(Notification != NULL )
    2464:	8a 81       	ldd	r24, Y+2	; 0x02
    2466:	9b 81       	ldd	r25, Y+3	; 0x03
    2468:	00 97       	sbiw	r24, 0x00	; 0
    246a:	39 f0       	breq	.+14     	; 0x247a <EXTI_u8Int2CallBack+0x28>
	{
		EXTI_voidCallBack[EXTI2] = Notification;
    246c:	8a 81       	ldd	r24, Y+2	; 0x02
    246e:	9b 81       	ldd	r25, Y+3	; 0x03
    2470:	90 93 aa 01 	sts	0x01AA, r25
    2474:	80 93 a9 01 	sts	0x01A9, r24
    2478:	02 c0       	rjmp	.+4      	; 0x247e <EXTI_u8Int2CallBack+0x2c>
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    247a:	82 e0       	ldi	r24, 0x02	; 2
    247c:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    247e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2480:	0f 90       	pop	r0
    2482:	0f 90       	pop	r0
    2484:	0f 90       	pop	r0
    2486:	cf 91       	pop	r28
    2488:	df 91       	pop	r29
    248a:	08 95       	ret

0000248c <EXTI_voidInt2ChangeSence>:

u8 EXTI_voidInt2ChangeSence(u8 Copy_u8Sence)
{
    248c:	df 93       	push	r29
    248e:	cf 93       	push	r28
    2490:	00 d0       	rcall	.+0      	; 0x2492 <EXTI_voidInt2ChangeSence+0x6>
    2492:	cd b7       	in	r28, 0x3d	; 61
    2494:	de b7       	in	r29, 0x3e	; 62
    2496:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2498:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Sence<=EXTI2_RISING_ADGE)
    249a:	8a 81       	ldd	r24, Y+2	; 0x02
    249c:	82 30       	cpi	r24, 0x02	; 2
    249e:	e0 f4       	brcc	.+56     	; 0x24d8 <EXTI_voidInt2ChangeSence+0x4c>
	{
		MCUCSR &= MASK_SENCE_INT2;
    24a0:	a4 e5       	ldi	r26, 0x54	; 84
    24a2:	b0 e0       	ldi	r27, 0x00	; 0
    24a4:	e4 e5       	ldi	r30, 0x54	; 84
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	80 81       	ld	r24, Z
    24aa:	8f 7b       	andi	r24, 0xBF	; 191
    24ac:	8c 93       	st	X, r24
		MCUCSR |= Copy_u8Sence<<MCUCSR_ISC2;
    24ae:	a4 e5       	ldi	r26, 0x54	; 84
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	e4 e5       	ldi	r30, 0x54	; 84
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	80 81       	ld	r24, Z
    24b8:	28 2f       	mov	r18, r24
    24ba:	8a 81       	ldd	r24, Y+2	; 0x02
    24bc:	88 2f       	mov	r24, r24
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	00 24       	eor	r0, r0
    24c2:	96 95       	lsr	r25
    24c4:	87 95       	ror	r24
    24c6:	07 94       	ror	r0
    24c8:	96 95       	lsr	r25
    24ca:	87 95       	ror	r24
    24cc:	07 94       	ror	r0
    24ce:	98 2f       	mov	r25, r24
    24d0:	80 2d       	mov	r24, r0
    24d2:	82 2b       	or	r24, r18
    24d4:	8c 93       	st	X, r24
    24d6:	02 c0       	rjmp	.+4      	; 0x24dc <EXTI_voidInt2ChangeSence+0x50>
	}
	else
		Local_u8ErrorState = NOTOK;
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    24dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    24de:	0f 90       	pop	r0
    24e0:	0f 90       	pop	r0
    24e2:	cf 91       	pop	r28
    24e4:	df 91       	pop	r29
    24e6:	08 95       	ret

000024e8 <__vector_1>:
void __vector_1 (void)	__attribute__((signal));
void __vector_1 (void)
{
    24e8:	1f 92       	push	r1
    24ea:	0f 92       	push	r0
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	0f 92       	push	r0
    24f0:	11 24       	eor	r1, r1
    24f2:	2f 93       	push	r18
    24f4:	3f 93       	push	r19
    24f6:	4f 93       	push	r20
    24f8:	5f 93       	push	r21
    24fa:	6f 93       	push	r22
    24fc:	7f 93       	push	r23
    24fe:	8f 93       	push	r24
    2500:	9f 93       	push	r25
    2502:	af 93       	push	r26
    2504:	bf 93       	push	r27
    2506:	ef 93       	push	r30
    2508:	ff 93       	push	r31
    250a:	df 93       	push	r29
    250c:	cf 93       	push	r28
    250e:	cd b7       	in	r28, 0x3d	; 61
    2510:	de b7       	in	r29, 0x3e	; 62
	EXTI_voidCallBack[EXTI0]();
    2512:	e0 91 a5 01 	lds	r30, 0x01A5
    2516:	f0 91 a6 01 	lds	r31, 0x01A6
    251a:	09 95       	icall
}
    251c:	cf 91       	pop	r28
    251e:	df 91       	pop	r29
    2520:	ff 91       	pop	r31
    2522:	ef 91       	pop	r30
    2524:	bf 91       	pop	r27
    2526:	af 91       	pop	r26
    2528:	9f 91       	pop	r25
    252a:	8f 91       	pop	r24
    252c:	7f 91       	pop	r23
    252e:	6f 91       	pop	r22
    2530:	5f 91       	pop	r21
    2532:	4f 91       	pop	r20
    2534:	3f 91       	pop	r19
    2536:	2f 91       	pop	r18
    2538:	0f 90       	pop	r0
    253a:	0f be       	out	0x3f, r0	; 63
    253c:	0f 90       	pop	r0
    253e:	1f 90       	pop	r1
    2540:	18 95       	reti

00002542 <__vector_2>:

void __vector_2 (void)	__attribute__((signal));
void __vector_2 (void)
{
    2542:	1f 92       	push	r1
    2544:	0f 92       	push	r0
    2546:	0f b6       	in	r0, 0x3f	; 63
    2548:	0f 92       	push	r0
    254a:	11 24       	eor	r1, r1
    254c:	2f 93       	push	r18
    254e:	3f 93       	push	r19
    2550:	4f 93       	push	r20
    2552:	5f 93       	push	r21
    2554:	6f 93       	push	r22
    2556:	7f 93       	push	r23
    2558:	8f 93       	push	r24
    255a:	9f 93       	push	r25
    255c:	af 93       	push	r26
    255e:	bf 93       	push	r27
    2560:	ef 93       	push	r30
    2562:	ff 93       	push	r31
    2564:	df 93       	push	r29
    2566:	cf 93       	push	r28
    2568:	cd b7       	in	r28, 0x3d	; 61
    256a:	de b7       	in	r29, 0x3e	; 62
	EXTI_voidCallBack[EXTI1]();
    256c:	e0 91 a7 01 	lds	r30, 0x01A7
    2570:	f0 91 a8 01 	lds	r31, 0x01A8
    2574:	09 95       	icall
}
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	ff 91       	pop	r31
    257c:	ef 91       	pop	r30
    257e:	bf 91       	pop	r27
    2580:	af 91       	pop	r26
    2582:	9f 91       	pop	r25
    2584:	8f 91       	pop	r24
    2586:	7f 91       	pop	r23
    2588:	6f 91       	pop	r22
    258a:	5f 91       	pop	r21
    258c:	4f 91       	pop	r20
    258e:	3f 91       	pop	r19
    2590:	2f 91       	pop	r18
    2592:	0f 90       	pop	r0
    2594:	0f be       	out	0x3f, r0	; 63
    2596:	0f 90       	pop	r0
    2598:	1f 90       	pop	r1
    259a:	18 95       	reti

0000259c <__vector_3>:

void __vector_3 (void)	__attribute__((signal));
void __vector_3 (void)
{
    259c:	1f 92       	push	r1
    259e:	0f 92       	push	r0
    25a0:	0f b6       	in	r0, 0x3f	; 63
    25a2:	0f 92       	push	r0
    25a4:	11 24       	eor	r1, r1
    25a6:	2f 93       	push	r18
    25a8:	3f 93       	push	r19
    25aa:	4f 93       	push	r20
    25ac:	5f 93       	push	r21
    25ae:	6f 93       	push	r22
    25b0:	7f 93       	push	r23
    25b2:	8f 93       	push	r24
    25b4:	9f 93       	push	r25
    25b6:	af 93       	push	r26
    25b8:	bf 93       	push	r27
    25ba:	ef 93       	push	r30
    25bc:	ff 93       	push	r31
    25be:	df 93       	push	r29
    25c0:	cf 93       	push	r28
    25c2:	cd b7       	in	r28, 0x3d	; 61
    25c4:	de b7       	in	r29, 0x3e	; 62
	EXTI_voidCallBack[EXTI2]();
    25c6:	e0 91 a9 01 	lds	r30, 0x01A9
    25ca:	f0 91 aa 01 	lds	r31, 0x01AA
    25ce:	09 95       	icall
}
    25d0:	cf 91       	pop	r28
    25d2:	df 91       	pop	r29
    25d4:	ff 91       	pop	r31
    25d6:	ef 91       	pop	r30
    25d8:	bf 91       	pop	r27
    25da:	af 91       	pop	r26
    25dc:	9f 91       	pop	r25
    25de:	8f 91       	pop	r24
    25e0:	7f 91       	pop	r23
    25e2:	6f 91       	pop	r22
    25e4:	5f 91       	pop	r21
    25e6:	4f 91       	pop	r20
    25e8:	3f 91       	pop	r19
    25ea:	2f 91       	pop	r18
    25ec:	0f 90       	pop	r0
    25ee:	0f be       	out	0x3f, r0	; 63
    25f0:	0f 90       	pop	r0
    25f2:	1f 90       	pop	r1
    25f4:	18 95       	reti

000025f6 <GIE_voidEnable>:
#include "../MCAL/GIE_interface.h"
#include "../MCAL/GIE_register.h"


void GIE_voidEnable()
{
    25f6:	df 93       	push	r29
    25f8:	cf 93       	push	r28
    25fa:	cd b7       	in	r28, 0x3d	; 61
    25fc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    25fe:	af e5       	ldi	r26, 0x5F	; 95
    2600:	b0 e0       	ldi	r27, 0x00	; 0
    2602:	ef e5       	ldi	r30, 0x5F	; 95
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	80 81       	ld	r24, Z
    2608:	80 68       	ori	r24, 0x80	; 128
    260a:	8c 93       	st	X, r24
}
    260c:	cf 91       	pop	r28
    260e:	df 91       	pop	r29
    2610:	08 95       	ret

00002612 <GIE_voidDisable>:

void GIE_voidDisable()
{
    2612:	df 93       	push	r29
    2614:	cf 93       	push	r28
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    261a:	af e5       	ldi	r26, 0x5F	; 95
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	ef e5       	ldi	r30, 0x5F	; 95
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	8f 77       	andi	r24, 0x7F	; 127
    2626:	8c 93       	st	X, r24
}
    2628:	cf 91       	pop	r28
    262a:	df 91       	pop	r29
    262c:	08 95       	ret

0000262e <KPD_u8Key_pressed>:
#include "../HAL/KPD_config.h"
#include "../HAL/KPD_interface.h"
#include "../HAL/KPD_private.h"

u8 KPD_u8Key_pressed()
{
    262e:	df 93       	push	r29
    2630:	cf 93       	push	r28
    2632:	00 d0       	rcall	.+0      	; 0x2634 <KPD_u8Key_pressed+0x6>
    2634:	00 d0       	rcall	.+0      	; 0x2636 <KPD_u8Key_pressed+0x8>
    2636:	0f 92       	push	r0
    2638:	cd b7       	in	r28, 0x3d	; 61
    263a:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8RowItrator;
	u8 Local_u8ColItrator;
	u8 Local_u8GetState;
	u8 Local_u8KeyPressed = KPD_NO_PRESSED_KEY;
    263c:	8f ef       	ldi	r24, 0xFF	; 255
    263e:	89 83       	std	Y+1, r24	; 0x01
	static u8 Local_u8KPD_ROW_PINS[Max_Rows] = { KPD_ROW_PIN0, KPD_ROW_PIN1,
			KPD_ROW_PIN2, KPD_ROW_PIN3 };
	static u8 Local_u8KPD_COL_PINS[Max_Cols] = { KPD_COL_PIN0, KPD_COL_PIN1,
			KPD_COL_PIN2, KPD_COL_PIN3 };
	static u8 Local_u8KPD_Nums[Max_Rows][Max_Cols] = KPD_u8ARR;
	for (Local_u8ColItrator = 0; Local_u8ColItrator < Max_Cols;
    2640:	1a 82       	std	Y+2, r1	; 0x02
    2642:	5e c0       	rjmp	.+188    	; 0x2700 <KPD_u8Key_pressed+0xd2>
			Local_u8ColItrator++) {
		DIO_u8SetPinValue(KPD_INPUT_PORT,
    2644:	8a 81       	ldd	r24, Y+2	; 0x02
    2646:	88 2f       	mov	r24, r24
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	fc 01       	movw	r30, r24
    264c:	ea 57       	subi	r30, 0x7A	; 122
    264e:	fe 4f       	sbci	r31, 0xFE	; 254
    2650:	90 81       	ld	r25, Z
    2652:	83 e0       	ldi	r24, 0x03	; 3
    2654:	69 2f       	mov	r22, r25
    2656:	40 e0       	ldi	r20, 0x00	; 0
    2658:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8SetPinValue>
				Local_u8KPD_COL_PINS[Local_u8ColItrator], DIO_PIN_LOW);
		/*Read the current Row*/
		for (Local_u8RowItrator = 0; Local_u8RowItrator < Max_Rows;
    265c:	1b 82       	std	Y+3, r1	; 0x03
    265e:	3d c0       	rjmp	.+122    	; 0x26da <KPD_u8Key_pressed+0xac>
				Local_u8RowItrator++) {
			DIO_u8GetPinValue(KPD_INPUT_PORT,
    2660:	8b 81       	ldd	r24, Y+3	; 0x03
    2662:	88 2f       	mov	r24, r24
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	fc 01       	movw	r30, r24
    2668:	e6 57       	subi	r30, 0x76	; 118
    266a:	fe 4f       	sbci	r31, 0xFE	; 254
    266c:	90 81       	ld	r25, Z
    266e:	9e 01       	movw	r18, r28
    2670:	2c 5f       	subi	r18, 0xFC	; 252
    2672:	3f 4f       	sbci	r19, 0xFF	; 255
    2674:	83 e0       	ldi	r24, 0x03	; 3
    2676:	69 2f       	mov	r22, r25
    2678:	a9 01       	movw	r20, r18
    267a:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8GetPinValue>
					Local_u8KPD_ROW_PINS[Local_u8RowItrator],
					&Local_u8GetState);
			/*chick switch id pressed */
			if (Local_u8GetState == DIO_PIN_LOW) {
    267e:	8c 81       	ldd	r24, Y+4	; 0x04
    2680:	88 23       	and	r24, r24
    2682:	41 f5       	brne	.+80     	; 0x26d4 <KPD_u8Key_pressed+0xa6>
				Local_u8KeyPressed =
    2684:	8b 81       	ldd	r24, Y+3	; 0x03
    2686:	48 2f       	mov	r20, r24
    2688:	50 e0       	ldi	r21, 0x00	; 0
    268a:	8a 81       	ldd	r24, Y+2	; 0x02
    268c:	28 2f       	mov	r18, r24
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	ca 01       	movw	r24, r20
    2692:	88 0f       	add	r24, r24
    2694:	99 1f       	adc	r25, r25
    2696:	88 0f       	add	r24, r24
    2698:	99 1f       	adc	r25, r25
    269a:	82 0f       	add	r24, r18
    269c:	93 1f       	adc	r25, r19
    269e:	fc 01       	movw	r30, r24
    26a0:	ea 58       	subi	r30, 0x8A	; 138
    26a2:	fe 4f       	sbci	r31, 0xFE	; 254
    26a4:	80 81       	ld	r24, Z
    26a6:	89 83       	std	Y+1, r24	; 0x01
    26a8:	0f c0       	rjmp	.+30     	; 0x26c8 <KPD_u8Key_pressed+0x9a>
						Local_u8KPD_Nums[Local_u8RowItrator][Local_u8ColItrator];
				/*polling busy waiting until the key is released*/
				while (Local_u8GetState == DIO_PIN_LOW) {
					DIO_u8GetPinValue(KPD_INPUT_PORT,
    26aa:	8b 81       	ldd	r24, Y+3	; 0x03
    26ac:	88 2f       	mov	r24, r24
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	fc 01       	movw	r30, r24
    26b2:	e6 57       	subi	r30, 0x76	; 118
    26b4:	fe 4f       	sbci	r31, 0xFE	; 254
    26b6:	90 81       	ld	r25, Z
    26b8:	9e 01       	movw	r18, r28
    26ba:	2c 5f       	subi	r18, 0xFC	; 252
    26bc:	3f 4f       	sbci	r19, 0xFF	; 255
    26be:	83 e0       	ldi	r24, 0x03	; 3
    26c0:	69 2f       	mov	r22, r25
    26c2:	a9 01       	movw	r20, r18
    26c4:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8GetPinValue>
			/*chick switch id pressed */
			if (Local_u8GetState == DIO_PIN_LOW) {
				Local_u8KeyPressed =
						Local_u8KPD_Nums[Local_u8RowItrator][Local_u8ColItrator];
				/*polling busy waiting until the key is released*/
				while (Local_u8GetState == DIO_PIN_LOW) {
    26c8:	8c 81       	ldd	r24, Y+4	; 0x04
    26ca:	88 23       	and	r24, r24
    26cc:	71 f3       	breq	.-36     	; 0x26aa <KPD_u8Key_pressed+0x7c>
					DIO_u8GetPinValue(KPD_INPUT_PORT,
							Local_u8KPD_ROW_PINS[Local_u8RowItrator],
							&Local_u8GetState);
				}
				return Local_u8KeyPressed;
    26ce:	89 81       	ldd	r24, Y+1	; 0x01
    26d0:	8d 83       	std	Y+5, r24	; 0x05
    26d2:	1c c0       	rjmp	.+56     	; 0x270c <KPD_u8Key_pressed+0xde>
			Local_u8ColItrator++) {
		DIO_u8SetPinValue(KPD_INPUT_PORT,
				Local_u8KPD_COL_PINS[Local_u8ColItrator], DIO_PIN_LOW);
		/*Read the current Row*/
		for (Local_u8RowItrator = 0; Local_u8RowItrator < Max_Rows;
				Local_u8RowItrator++) {
    26d4:	8b 81       	ldd	r24, Y+3	; 0x03
    26d6:	8f 5f       	subi	r24, 0xFF	; 255
    26d8:	8b 83       	std	Y+3, r24	; 0x03
	for (Local_u8ColItrator = 0; Local_u8ColItrator < Max_Cols;
			Local_u8ColItrator++) {
		DIO_u8SetPinValue(KPD_INPUT_PORT,
				Local_u8KPD_COL_PINS[Local_u8ColItrator], DIO_PIN_LOW);
		/*Read the current Row*/
		for (Local_u8RowItrator = 0; Local_u8RowItrator < Max_Rows;
    26da:	8b 81       	ldd	r24, Y+3	; 0x03
    26dc:	84 30       	cpi	r24, 0x04	; 4
    26de:	08 f4       	brcc	.+2      	; 0x26e2 <KPD_u8Key_pressed+0xb4>
    26e0:	bf cf       	rjmp	.-130    	; 0x2660 <KPD_u8Key_pressed+0x32>
							&Local_u8GetState);
				}
				return Local_u8KeyPressed;
			}
		}
		DIO_u8SetPinValue(KPD_INPUT_PORT,
    26e2:	8a 81       	ldd	r24, Y+2	; 0x02
    26e4:	88 2f       	mov	r24, r24
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	fc 01       	movw	r30, r24
    26ea:	ea 57       	subi	r30, 0x7A	; 122
    26ec:	fe 4f       	sbci	r31, 0xFE	; 254
    26ee:	90 81       	ld	r25, Z
    26f0:	83 e0       	ldi	r24, 0x03	; 3
    26f2:	69 2f       	mov	r22, r25
    26f4:	41 e0       	ldi	r20, 0x01	; 1
    26f6:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8SetPinValue>
			KPD_ROW_PIN2, KPD_ROW_PIN3 };
	static u8 Local_u8KPD_COL_PINS[Max_Cols] = { KPD_COL_PIN0, KPD_COL_PIN1,
			KPD_COL_PIN2, KPD_COL_PIN3 };
	static u8 Local_u8KPD_Nums[Max_Rows][Max_Cols] = KPD_u8ARR;
	for (Local_u8ColItrator = 0; Local_u8ColItrator < Max_Cols;
			Local_u8ColItrator++) {
    26fa:	8a 81       	ldd	r24, Y+2	; 0x02
    26fc:	8f 5f       	subi	r24, 0xFF	; 255
    26fe:	8a 83       	std	Y+2, r24	; 0x02
	static u8 Local_u8KPD_ROW_PINS[Max_Rows] = { KPD_ROW_PIN0, KPD_ROW_PIN1,
			KPD_ROW_PIN2, KPD_ROW_PIN3 };
	static u8 Local_u8KPD_COL_PINS[Max_Cols] = { KPD_COL_PIN0, KPD_COL_PIN1,
			KPD_COL_PIN2, KPD_COL_PIN3 };
	static u8 Local_u8KPD_Nums[Max_Rows][Max_Cols] = KPD_u8ARR;
	for (Local_u8ColItrator = 0; Local_u8ColItrator < Max_Cols;
    2700:	8a 81       	ldd	r24, Y+2	; 0x02
    2702:	84 30       	cpi	r24, 0x04	; 4
    2704:	08 f4       	brcc	.+2      	; 0x2708 <KPD_u8Key_pressed+0xda>
    2706:	9e cf       	rjmp	.-196    	; 0x2644 <KPD_u8Key_pressed+0x16>
			}
		}
		DIO_u8SetPinValue(KPD_INPUT_PORT,
				Local_u8KPD_COL_PINS[Local_u8ColItrator], DIO_PIN_HIGH);
	}
	return Local_u8KeyPressed;
    2708:	89 81       	ldd	r24, Y+1	; 0x01
    270a:	8d 83       	std	Y+5, r24	; 0x05
    270c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    270e:	0f 90       	pop	r0
    2710:	0f 90       	pop	r0
    2712:	0f 90       	pop	r0
    2714:	0f 90       	pop	r0
    2716:	0f 90       	pop	r0
    2718:	cf 91       	pop	r28
    271a:	df 91       	pop	r29
    271c:	08 95       	ret

0000271e <LED_u8TurnOn>:
#include "../HAL/LED_private.h"
#include "../HAL/LED_config.h"
#include "../HAL/LED_interface.h"

u8 LED_u8TurnOn(LED_t * Copy_LED)
{
    271e:	df 93       	push	r29
    2720:	cf 93       	push	r28
    2722:	00 d0       	rcall	.+0      	; 0x2724 <LED_u8TurnOn+0x6>
    2724:	0f 92       	push	r0
    2726:	cd b7       	in	r28, 0x3d	; 61
    2728:	de b7       	in	r29, 0x3e	; 62
    272a:	9b 83       	std	Y+3, r25	; 0x03
    272c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    272e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_LED->ConnType==LED_SOUCE)
    2730:	ea 81       	ldd	r30, Y+2	; 0x02
    2732:	fb 81       	ldd	r31, Y+3	; 0x03
    2734:	82 81       	ldd	r24, Z+2	; 0x02
    2736:	81 30       	cpi	r24, 0x01	; 1
    2738:	59 f4       	brne	.+22     	; 0x2750 <LED_u8TurnOn+0x32>
	{
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,DIO_PIN_HIGH);
    273a:	ea 81       	ldd	r30, Y+2	; 0x02
    273c:	fb 81       	ldd	r31, Y+3	; 0x03
    273e:	80 81       	ld	r24, Z
    2740:	ea 81       	ldd	r30, Y+2	; 0x02
    2742:	fb 81       	ldd	r31, Y+3	; 0x03
    2744:	91 81       	ldd	r25, Z+1	; 0x01
    2746:	69 2f       	mov	r22, r25
    2748:	41 e0       	ldi	r20, 0x01	; 1
    274a:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8SetPinValue>
    274e:	12 c0       	rjmp	.+36     	; 0x2774 <LED_u8TurnOn+0x56>
	}
	else if(Copy_LED->ConnType==LED_SINK)
    2750:	ea 81       	ldd	r30, Y+2	; 0x02
    2752:	fb 81       	ldd	r31, Y+3	; 0x03
    2754:	82 81       	ldd	r24, Z+2	; 0x02
    2756:	88 23       	and	r24, r24
    2758:	59 f4       	brne	.+22     	; 0x2770 <LED_u8TurnOn+0x52>
	{
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,DIO_PIN_LOW);
    275a:	ea 81       	ldd	r30, Y+2	; 0x02
    275c:	fb 81       	ldd	r31, Y+3	; 0x03
    275e:	80 81       	ld	r24, Z
    2760:	ea 81       	ldd	r30, Y+2	; 0x02
    2762:	fb 81       	ldd	r31, Y+3	; 0x03
    2764:	91 81       	ldd	r25, Z+1	; 0x01
    2766:	69 2f       	mov	r22, r25
    2768:	40 e0       	ldi	r20, 0x00	; 0
    276a:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8SetPinValue>
    276e:	02 c0       	rjmp	.+4      	; 0x2774 <LED_u8TurnOn+0x56>
	}
	else
		Local_u8ErrorState = NOTOK;
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    2774:	89 81       	ldd	r24, Y+1	; 0x01
}
    2776:	0f 90       	pop	r0
    2778:	0f 90       	pop	r0
    277a:	0f 90       	pop	r0
    277c:	cf 91       	pop	r28
    277e:	df 91       	pop	r29
    2780:	08 95       	ret

00002782 <LED_u8TurnOff>:
u8 LED_u8TurnOff(LED_t * Copy_LED)
{
    2782:	df 93       	push	r29
    2784:	cf 93       	push	r28
    2786:	00 d0       	rcall	.+0      	; 0x2788 <LED_u8TurnOff+0x6>
    2788:	0f 92       	push	r0
    278a:	cd b7       	in	r28, 0x3d	; 61
    278c:	de b7       	in	r29, 0x3e	; 62
    278e:	9b 83       	std	Y+3, r25	; 0x03
    2790:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2792:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_LED->ConnType==LED_SOUCE)
    2794:	ea 81       	ldd	r30, Y+2	; 0x02
    2796:	fb 81       	ldd	r31, Y+3	; 0x03
    2798:	82 81       	ldd	r24, Z+2	; 0x02
    279a:	81 30       	cpi	r24, 0x01	; 1
    279c:	59 f4       	brne	.+22     	; 0x27b4 <LED_u8TurnOff+0x32>
	{
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,DIO_PIN_LOW);
    279e:	ea 81       	ldd	r30, Y+2	; 0x02
    27a0:	fb 81       	ldd	r31, Y+3	; 0x03
    27a2:	80 81       	ld	r24, Z
    27a4:	ea 81       	ldd	r30, Y+2	; 0x02
    27a6:	fb 81       	ldd	r31, Y+3	; 0x03
    27a8:	91 81       	ldd	r25, Z+1	; 0x01
    27aa:	69 2f       	mov	r22, r25
    27ac:	40 e0       	ldi	r20, 0x00	; 0
    27ae:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8SetPinValue>
    27b2:	12 c0       	rjmp	.+36     	; 0x27d8 <LED_u8TurnOff+0x56>
	}
	else if(Copy_LED->ConnType==LED_SINK)
    27b4:	ea 81       	ldd	r30, Y+2	; 0x02
    27b6:	fb 81       	ldd	r31, Y+3	; 0x03
    27b8:	82 81       	ldd	r24, Z+2	; 0x02
    27ba:	88 23       	and	r24, r24
    27bc:	59 f4       	brne	.+22     	; 0x27d4 <LED_u8TurnOff+0x52>
	{
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,DIO_PIN_HIGH);
    27be:	ea 81       	ldd	r30, Y+2	; 0x02
    27c0:	fb 81       	ldd	r31, Y+3	; 0x03
    27c2:	80 81       	ld	r24, Z
    27c4:	ea 81       	ldd	r30, Y+2	; 0x02
    27c6:	fb 81       	ldd	r31, Y+3	; 0x03
    27c8:	91 81       	ldd	r25, Z+1	; 0x01
    27ca:	69 2f       	mov	r22, r25
    27cc:	41 e0       	ldi	r20, 0x01	; 1
    27ce:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8SetPinValue>
    27d2:	02 c0       	rjmp	.+4      	; 0x27d8 <LED_u8TurnOff+0x56>
	}
	else
		Local_u8ErrorState = NOTOK;
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    27d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    27da:	0f 90       	pop	r0
    27dc:	0f 90       	pop	r0
    27de:	0f 90       	pop	r0
    27e0:	cf 91       	pop	r28
    27e2:	df 91       	pop	r29
    27e4:	08 95       	ret

000027e6 <LED_u8TogLed>:
u8 LED_u8TogLed(LED_t *Copy_LED)
{
    27e6:	df 93       	push	r29
    27e8:	cf 93       	push	r28
    27ea:	00 d0       	rcall	.+0      	; 0x27ec <LED_u8TogLed+0x6>
    27ec:	0f 92       	push	r0
    27ee:	cd b7       	in	r28, 0x3d	; 61
    27f0:	de b7       	in	r29, 0x3e	; 62
    27f2:	9b 83       	std	Y+3, r25	; 0x03
    27f4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    27f6:	19 82       	std	Y+1, r1	; 0x01
	static u8 Local_u8State = 0;
	if(Copy_LED->ConnType==LED_SOUCE)
    27f8:	ea 81       	ldd	r30, Y+2	; 0x02
    27fa:	fb 81       	ldd	r31, Y+3	; 0x03
    27fc:	82 81       	ldd	r24, Z+2	; 0x02
    27fe:	81 30       	cpi	r24, 0x01	; 1
    2800:	99 f4       	brne	.+38     	; 0x2828 <LED_u8TogLed+0x42>
	{
		TOG_BIT(Local_u8State,0);
    2802:	90 91 ab 01 	lds	r25, 0x01AB
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	89 27       	eor	r24, r25
    280a:	80 93 ab 01 	sts	0x01AB, r24
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,Local_u8State);
    280e:	ea 81       	ldd	r30, Y+2	; 0x02
    2810:	fb 81       	ldd	r31, Y+3	; 0x03
    2812:	80 81       	ld	r24, Z
    2814:	ea 81       	ldd	r30, Y+2	; 0x02
    2816:	fb 81       	ldd	r31, Y+3	; 0x03
    2818:	91 81       	ldd	r25, Z+1	; 0x01
    281a:	20 91 ab 01 	lds	r18, 0x01AB
    281e:	69 2f       	mov	r22, r25
    2820:	42 2f       	mov	r20, r18
    2822:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8SetPinValue>
    2826:	1a c0       	rjmp	.+52     	; 0x285c <LED_u8TogLed+0x76>
	}
	else if(Copy_LED->ConnType==LED_SINK)
    2828:	ea 81       	ldd	r30, Y+2	; 0x02
    282a:	fb 81       	ldd	r31, Y+3	; 0x03
    282c:	82 81       	ldd	r24, Z+2	; 0x02
    282e:	88 23       	and	r24, r24
    2830:	99 f4       	brne	.+38     	; 0x2858 <LED_u8TogLed+0x72>
	{
		TOG_BIT(Local_u8State,0);
    2832:	90 91 ab 01 	lds	r25, 0x01AB
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	89 27       	eor	r24, r25
    283a:	80 93 ab 01 	sts	0x01AB, r24
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,Local_u8State);
    283e:	ea 81       	ldd	r30, Y+2	; 0x02
    2840:	fb 81       	ldd	r31, Y+3	; 0x03
    2842:	80 81       	ld	r24, Z
    2844:	ea 81       	ldd	r30, Y+2	; 0x02
    2846:	fb 81       	ldd	r31, Y+3	; 0x03
    2848:	91 81       	ldd	r25, Z+1	; 0x01
    284a:	20 91 ab 01 	lds	r18, 0x01AB
    284e:	69 2f       	mov	r22, r25
    2850:	42 2f       	mov	r20, r18
    2852:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8SetPinValue>
    2856:	02 c0       	rjmp	.+4      	; 0x285c <LED_u8TogLed+0x76>
	}
	else
		Local_u8ErrorState = NOTOK;
    2858:	81 e0       	ldi	r24, 0x01	; 1
    285a:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    285c:	89 81       	ldd	r24, Y+1	; 0x01
}
    285e:	0f 90       	pop	r0
    2860:	0f 90       	pop	r0
    2862:	0f 90       	pop	r0
    2864:	cf 91       	pop	r28
    2866:	df 91       	pop	r29
    2868:	08 95       	ret

0000286a <PORT_voidInit>:
#include "../MCAL/PORT_config.h"
#include "../MCAL/PORT_register.h"
#include "../MCAL/PORT_interface.h"

void PORT_voidInit()
{
    286a:	df 93       	push	r29
    286c:	cf 93       	push	r28
    286e:	cd b7       	in	r28, 0x3d	; 61
    2870:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;	
    2872:	ea e3       	ldi	r30, 0x3A	; 58
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	87 e0       	ldi	r24, 0x07	; 7
    2878:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    287a:	e7 e3       	ldi	r30, 0x37	; 55
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	83 e0       	ldi	r24, 0x03	; 3
    2880:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    2882:	e4 e3       	ldi	r30, 0x34	; 52
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	80 ef       	ldi	r24, 0xF0	; 240
    2888:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    288a:	e1 e3       	ldi	r30, 0x31	; 49
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	80 ef       	ldi	r24, 0xF0	; 240
    2890:	80 83       	st	Z, r24
	
	PORTA =PORTA_INIT_VALUE;
    2892:	eb e3       	ldi	r30, 0x3B	; 59
    2894:	f0 e0       	ldi	r31, 0x00	; 0
    2896:	10 82       	st	Z, r1
	PORTB =PORTB_INIT_VALUE;
    2898:	e8 e3       	ldi	r30, 0x38	; 56
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	84 e0       	ldi	r24, 0x04	; 4
    289e:	80 83       	st	Z, r24
	PORTC =PORTC_INIT_VALUE;
    28a0:	e5 e3       	ldi	r30, 0x35	; 53
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	10 82       	st	Z, r1
	PORTD =PORTD_INIT_VALUE;
    28a6:	e2 e3       	ldi	r30, 0x32	; 50
    28a8:	f0 e0       	ldi	r31, 0x00	; 0
    28aa:	8f ef       	ldi	r24, 0xFF	; 255
    28ac:	80 83       	st	Z, r24
	
}
    28ae:	cf 91       	pop	r28
    28b0:	df 91       	pop	r29
    28b2:	08 95       	ret

000028b4 <SSD_u8SetNumber>:
#include "../HAL/SSD_private.h"
#include "../HAL/SSD_config.h"
#include "../HAL/SSD_interface.h"

u8 SSD_u8SetNumber(u8 Copy_u8Number,SSD_t *Copy_SSD)
{
    28b4:	df 93       	push	r29
    28b6:	cf 93       	push	r28
    28b8:	00 d0       	rcall	.+0      	; 0x28ba <SSD_u8SetNumber+0x6>
    28ba:	00 d0       	rcall	.+0      	; 0x28bc <SSD_u8SetNumber+0x8>
    28bc:	cd b7       	in	r28, 0x3d	; 61
    28be:	de b7       	in	r29, 0x3e	; 62
    28c0:	8a 83       	std	Y+2, r24	; 0x02
    28c2:	7c 83       	std	Y+4, r23	; 0x04
    28c4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState= OK;
    28c6:	19 82       	std	Y+1, r1	; 0x01
	static u8 SSD_Arr[10] = SSD_ARR_OF_NUM;
	if(Copy_SSD->ComType==ANODE)
    28c8:	eb 81       	ldd	r30, Y+3	; 0x03
    28ca:	fc 81       	ldd	r31, Y+4	; 0x04
    28cc:	80 81       	ld	r24, Z
    28ce:	88 23       	and	r24, r24
    28d0:	91 f4       	brne	.+36     	; 0x28f6 <SSD_u8SetNumber+0x42>
	{
		Local_u8ErrorState = DIO_u8SetPortValue(Copy_SSD->Port,~SSD_Arr[Copy_u8Number]);
    28d2:	eb 81       	ldd	r30, Y+3	; 0x03
    28d4:	fc 81       	ldd	r31, Y+4	; 0x04
    28d6:	21 81       	ldd	r18, Z+1	; 0x01
    28d8:	8a 81       	ldd	r24, Y+2	; 0x02
    28da:	88 2f       	mov	r24, r24
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	fc 01       	movw	r30, r24
    28e0:	e2 57       	subi	r30, 0x72	; 114
    28e2:	fe 4f       	sbci	r31, 0xFE	; 254
    28e4:	80 81       	ld	r24, Z
    28e6:	98 2f       	mov	r25, r24
    28e8:	90 95       	com	r25
    28ea:	82 2f       	mov	r24, r18
    28ec:	69 2f       	mov	r22, r25
    28ee:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <DIO_u8SetPortValue>
    28f2:	89 83       	std	Y+1, r24	; 0x01
    28f4:	17 c0       	rjmp	.+46     	; 0x2924 <SSD_u8SetNumber+0x70>
	}
	else if(Copy_SSD->ComType==CATHODE )
    28f6:	eb 81       	ldd	r30, Y+3	; 0x03
    28f8:	fc 81       	ldd	r31, Y+4	; 0x04
    28fa:	80 81       	ld	r24, Z
    28fc:	81 30       	cpi	r24, 0x01	; 1
    28fe:	81 f4       	brne	.+32     	; 0x2920 <SSD_u8SetNumber+0x6c>
	{
		Local_u8ErrorState = DIO_u8SetPortValue(Copy_SSD->Port,SSD_Arr[Copy_u8Number]);
    2900:	eb 81       	ldd	r30, Y+3	; 0x03
    2902:	fc 81       	ldd	r31, Y+4	; 0x04
    2904:	21 81       	ldd	r18, Z+1	; 0x01
    2906:	8a 81       	ldd	r24, Y+2	; 0x02
    2908:	88 2f       	mov	r24, r24
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	fc 01       	movw	r30, r24
    290e:	e2 57       	subi	r30, 0x72	; 114
    2910:	fe 4f       	sbci	r31, 0xFE	; 254
    2912:	90 81       	ld	r25, Z
    2914:	82 2f       	mov	r24, r18
    2916:	69 2f       	mov	r22, r25
    2918:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <DIO_u8SetPortValue>
    291c:	89 83       	std	Y+1, r24	; 0x01
    291e:	02 c0       	rjmp	.+4      	; 0x2924 <SSD_u8SetNumber+0x70>
	}
	else
		Local_u8ErrorState = NOTOK;
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2924:	89 81       	ldd	r24, Y+1	; 0x01

}
    2926:	0f 90       	pop	r0
    2928:	0f 90       	pop	r0
    292a:	0f 90       	pop	r0
    292c:	0f 90       	pop	r0
    292e:	cf 91       	pop	r28
    2930:	df 91       	pop	r29
    2932:	08 95       	ret

00002934 <SSD_u8Enable>:
u8 SSD_u8Enable(SSD_t *Copy_SSD)
{
    2934:	df 93       	push	r29
    2936:	cf 93       	push	r28
    2938:	00 d0       	rcall	.+0      	; 0x293a <SSD_u8Enable+0x6>
    293a:	0f 92       	push	r0
    293c:	cd b7       	in	r28, 0x3d	; 61
    293e:	de b7       	in	r29, 0x3e	; 62
    2940:	9b 83       	std	Y+3, r25	; 0x03
    2942:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState= OK;
    2944:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_SSD->ComType==ANODE)
    2946:	ea 81       	ldd	r30, Y+2	; 0x02
    2948:	fb 81       	ldd	r31, Y+3	; 0x03
    294a:	80 81       	ld	r24, Z
    294c:	88 23       	and	r24, r24
    294e:	61 f4       	brne	.+24     	; 0x2968 <SSD_u8Enable+0x34>
	{
		Local_u8ErrorState = DIO_u8SetPinValue(Copy_SSD->EnablePort,Copy_SSD->EnablePin,DIO_PIN_HIGH);
    2950:	ea 81       	ldd	r30, Y+2	; 0x02
    2952:	fb 81       	ldd	r31, Y+3	; 0x03
    2954:	82 81       	ldd	r24, Z+2	; 0x02
    2956:	ea 81       	ldd	r30, Y+2	; 0x02
    2958:	fb 81       	ldd	r31, Y+3	; 0x03
    295a:	93 81       	ldd	r25, Z+3	; 0x03
    295c:	69 2f       	mov	r22, r25
    295e:	41 e0       	ldi	r20, 0x01	; 1
    2960:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8SetPinValue>
    2964:	89 83       	std	Y+1, r24	; 0x01
    2966:	13 c0       	rjmp	.+38     	; 0x298e <SSD_u8Enable+0x5a>
	}
	else if(Copy_SSD->ComType==CATHODE )
    2968:	ea 81       	ldd	r30, Y+2	; 0x02
    296a:	fb 81       	ldd	r31, Y+3	; 0x03
    296c:	80 81       	ld	r24, Z
    296e:	81 30       	cpi	r24, 0x01	; 1
    2970:	61 f4       	brne	.+24     	; 0x298a <SSD_u8Enable+0x56>
	{
		Local_u8ErrorState = DIO_u8SetPinValue(Copy_SSD->EnablePort,Copy_SSD->EnablePin,DIO_PIN_LOW);
    2972:	ea 81       	ldd	r30, Y+2	; 0x02
    2974:	fb 81       	ldd	r31, Y+3	; 0x03
    2976:	82 81       	ldd	r24, Z+2	; 0x02
    2978:	ea 81       	ldd	r30, Y+2	; 0x02
    297a:	fb 81       	ldd	r31, Y+3	; 0x03
    297c:	93 81       	ldd	r25, Z+3	; 0x03
    297e:	69 2f       	mov	r22, r25
    2980:	40 e0       	ldi	r20, 0x00	; 0
    2982:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8SetPinValue>
    2986:	89 83       	std	Y+1, r24	; 0x01
    2988:	02 c0       	rjmp	.+4      	; 0x298e <SSD_u8Enable+0x5a>
	}
	else
		Local_u8ErrorState = NOTOK;
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    298e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2990:	0f 90       	pop	r0
    2992:	0f 90       	pop	r0
    2994:	0f 90       	pop	r0
    2996:	cf 91       	pop	r28
    2998:	df 91       	pop	r29
    299a:	08 95       	ret

0000299c <SSD_u8Disable>:

u8 SSD_u8Disable(SSD_t *Copy_SSD)
{
    299c:	df 93       	push	r29
    299e:	cf 93       	push	r28
    29a0:	00 d0       	rcall	.+0      	; 0x29a2 <SSD_u8Disable+0x6>
    29a2:	0f 92       	push	r0
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
    29a8:	9b 83       	std	Y+3, r25	; 0x03
    29aa:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState= OK;
    29ac:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_SSD->ComType==ANODE)
    29ae:	ea 81       	ldd	r30, Y+2	; 0x02
    29b0:	fb 81       	ldd	r31, Y+3	; 0x03
    29b2:	80 81       	ld	r24, Z
    29b4:	88 23       	and	r24, r24
    29b6:	61 f4       	brne	.+24     	; 0x29d0 <SSD_u8Disable+0x34>
	{
		Local_u8ErrorState = DIO_u8SetPinValue(Copy_SSD->EnablePort,Copy_SSD->EnablePin,DIO_PIN_LOW);
    29b8:	ea 81       	ldd	r30, Y+2	; 0x02
    29ba:	fb 81       	ldd	r31, Y+3	; 0x03
    29bc:	82 81       	ldd	r24, Z+2	; 0x02
    29be:	ea 81       	ldd	r30, Y+2	; 0x02
    29c0:	fb 81       	ldd	r31, Y+3	; 0x03
    29c2:	93 81       	ldd	r25, Z+3	; 0x03
    29c4:	69 2f       	mov	r22, r25
    29c6:	40 e0       	ldi	r20, 0x00	; 0
    29c8:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8SetPinValue>
    29cc:	89 83       	std	Y+1, r24	; 0x01
    29ce:	13 c0       	rjmp	.+38     	; 0x29f6 <SSD_u8Disable+0x5a>
	}
	else if(Copy_SSD->ComType==CATHODE )
    29d0:	ea 81       	ldd	r30, Y+2	; 0x02
    29d2:	fb 81       	ldd	r31, Y+3	; 0x03
    29d4:	80 81       	ld	r24, Z
    29d6:	81 30       	cpi	r24, 0x01	; 1
    29d8:	61 f4       	brne	.+24     	; 0x29f2 <SSD_u8Disable+0x56>
	{
		Local_u8ErrorState = DIO_u8SetPinValue(Copy_SSD->EnablePort,Copy_SSD->EnablePin,DIO_PIN_HIGH);
    29da:	ea 81       	ldd	r30, Y+2	; 0x02
    29dc:	fb 81       	ldd	r31, Y+3	; 0x03
    29de:	82 81       	ldd	r24, Z+2	; 0x02
    29e0:	ea 81       	ldd	r30, Y+2	; 0x02
    29e2:	fb 81       	ldd	r31, Y+3	; 0x03
    29e4:	93 81       	ldd	r25, Z+3	; 0x03
    29e6:	69 2f       	mov	r22, r25
    29e8:	41 e0       	ldi	r20, 0x01	; 1
    29ea:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8SetPinValue>
    29ee:	89 83       	std	Y+1, r24	; 0x01
    29f0:	02 c0       	rjmp	.+4      	; 0x29f6 <SSD_u8Disable+0x5a>
	}
	else
		Local_u8ErrorState = NOTOK;
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    29f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    29f8:	0f 90       	pop	r0
    29fa:	0f 90       	pop	r0
    29fc:	0f 90       	pop	r0
    29fe:	cf 91       	pop	r28
    2a00:	df 91       	pop	r29
    2a02:	08 95       	ret

00002a04 <STEP_MOTORu8StartFullMode>:
#include "../HAL/STEP_MOTOR_config.h"
#include "../HAL/STEP_MOTOR_private.h"
#include "../HAL/STEP_MOTOR_interface.h"
#include "../HAL/CLCD_interface.h"
u8 STEP_MOTORu8StartFullMode(STEP_t *Copy_pStep)
{
    2a04:	df 93       	push	r29
    2a06:	cf 93       	push	r28
    2a08:	cd b7       	in	r28, 0x3d	; 61
    2a0a:	de b7       	in	r29, 0x3e	; 62
    2a0c:	c2 54       	subi	r28, 0x42	; 66
    2a0e:	d0 40       	sbci	r29, 0x00	; 0
    2a10:	0f b6       	in	r0, 0x3f	; 63
    2a12:	f8 94       	cli
    2a14:	de bf       	out	0x3e, r29	; 62
    2a16:	0f be       	out	0x3f, r0	; 63
    2a18:	cd bf       	out	0x3d, r28	; 61
    2a1a:	fe 01       	movw	r30, r28
    2a1c:	ef 5b       	subi	r30, 0xBF	; 191
    2a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a20:	91 83       	std	Z+1, r25	; 0x01
    2a22:	80 83       	st	Z, r24
	u8 Local_u8ErrorState = OK;
    2a24:	fe 01       	movw	r30, r28
    2a26:	e0 5c       	subi	r30, 0xC0	; 192
    2a28:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2a:	10 82       	st	Z, r1
	u16 Local_u16NumOfSteps = (u16)((((f32)Copy_pStep->AngleDegree)/11.2)*64.0);
    2a2c:	fe 01       	movw	r30, r28
    2a2e:	ef 5b       	subi	r30, 0xBF	; 191
    2a30:	ff 4f       	sbci	r31, 0xFF	; 255
    2a32:	01 90       	ld	r0, Z+
    2a34:	f0 81       	ld	r31, Z
    2a36:	e0 2d       	mov	r30, r0
    2a38:	83 81       	ldd	r24, Z+3	; 0x03
    2a3a:	94 81       	ldd	r25, Z+4	; 0x04
    2a3c:	cc 01       	movw	r24, r24
    2a3e:	a0 e0       	ldi	r26, 0x00	; 0
    2a40:	b0 e0       	ldi	r27, 0x00	; 0
    2a42:	bc 01       	movw	r22, r24
    2a44:	cd 01       	movw	r24, r26
    2a46:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	bc 01       	movw	r22, r24
    2a50:	cd 01       	movw	r24, r26
    2a52:	23 e3       	ldi	r18, 0x33	; 51
    2a54:	33 e3       	ldi	r19, 0x33	; 51
    2a56:	43 e3       	ldi	r20, 0x33	; 51
    2a58:	51 e4       	ldi	r21, 0x41	; 65
    2a5a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	bc 01       	movw	r22, r24
    2a64:	cd 01       	movw	r24, r26
    2a66:	20 e0       	ldi	r18, 0x00	; 0
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	40 e8       	ldi	r20, 0x80	; 128
    2a6c:	52 e4       	ldi	r21, 0x42	; 66
    2a6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a72:	dc 01       	movw	r26, r24
    2a74:	cb 01       	movw	r24, r22
    2a76:	bc 01       	movw	r22, r24
    2a78:	cd 01       	movw	r24, r26
    2a7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7e:	dc 01       	movw	r26, r24
    2a80:	cb 01       	movw	r24, r22
    2a82:	9f af       	std	Y+63, r25	; 0x3f
    2a84:	8e af       	std	Y+62, r24	; 0x3e
	u16 Local_u16MaxItration = (Local_u16NumOfSteps/MAX_FULL_STEP );
    2a86:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a88:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a8a:	96 95       	lsr	r25
    2a8c:	87 95       	ror	r24
    2a8e:	96 95       	lsr	r25
    2a90:	87 95       	ror	r24
    2a92:	9d af       	std	Y+61, r25	; 0x3d
    2a94:	8c af       	std	Y+60, r24	; 0x3c
	u16 Local_u16Counter = 0;
    2a96:	1b ae       	std	Y+59, r1	; 0x3b
    2a98:	1a ae       	std	Y+58, r1	; 0x3a
	u8 Local_u8ItrateStep = 0;
    2a9a:	19 ae       	std	Y+57, r1	; 0x39
	if(STEP_LOWER_NIBBLE == Copy_pStep->Nibble)
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	ef 5b       	subi	r30, 0xBF	; 191
    2aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa2:	01 90       	ld	r0, Z+
    2aa4:	f0 81       	ld	r31, Z
    2aa6:	e0 2d       	mov	r30, r0
    2aa8:	81 81       	ldd	r24, Z+1	; 0x01
    2aaa:	88 23       	and	r24, r24
    2aac:	09 f0       	breq	.+2      	; 0x2ab0 <STEP_MOTORu8StartFullMode+0xac>
    2aae:	5e c1       	rjmp	.+700    	; 0x2d6c <STEP_MOTORu8StartFullMode+0x368>
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
    2ab0:	fe 01       	movw	r30, r28
    2ab2:	ef 5b       	subi	r30, 0xBF	; 191
    2ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab6:	01 90       	ld	r0, Z+
    2ab8:	f0 81       	ld	r31, Z
    2aba:	e0 2d       	mov	r30, r0
    2abc:	82 81       	ldd	r24, Z+2	; 0x02
    2abe:	88 23       	and	r24, r24
    2ac0:	09 f0       	breq	.+2      	; 0x2ac4 <STEP_MOTORu8StartFullMode+0xc0>
    2ac2:	a2 c0       	rjmp	.+324    	; 0x2c08 <STEP_MOTORu8StartFullMode+0x204>
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    2ac4:	1b ae       	std	Y+59, r1	; 0x3b
    2ac6:	1a ae       	std	Y+58, r1	; 0x3a
    2ac8:	96 c0       	rjmp	.+300    	; 0x2bf6 <STEP_MOTORu8StartFullMode+0x1f2>
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    2aca:	19 ae       	std	Y+57, r1	; 0x39
    2acc:	8b c0       	rjmp	.+278    	; 0x2be4 <STEP_MOTORu8StartFullMode+0x1e0>
				{
					DIO_u8SetLowNibbleValue(Copy_pStep->Port,(MASK_CW<<Local_u8ItrateStep));
    2ace:	fe 01       	movw	r30, r28
    2ad0:	ef 5b       	subi	r30, 0xBF	; 191
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	01 90       	ld	r0, Z+
    2ad6:	f0 81       	ld	r31, Z
    2ad8:	e0 2d       	mov	r30, r0
    2ada:	40 81       	ld	r20, Z
    2adc:	89 ad       	ldd	r24, Y+57	; 0x39
    2ade:	28 2f       	mov	r18, r24
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	02 c0       	rjmp	.+4      	; 0x2aec <STEP_MOTORu8StartFullMode+0xe8>
    2ae8:	88 0f       	add	r24, r24
    2aea:	99 1f       	adc	r25, r25
    2aec:	2a 95       	dec	r18
    2aee:	e2 f7       	brpl	.-8      	; 0x2ae8 <STEP_MOTORu8StartFullMode+0xe4>
    2af0:	98 2f       	mov	r25, r24
    2af2:	84 2f       	mov	r24, r20
    2af4:	69 2f       	mov	r22, r25
    2af6:	0e 94 36 10 	call	0x206c	; 0x206c <DIO_u8SetLowNibbleValue>
    2afa:	80 e0       	ldi	r24, 0x00	; 0
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	a0 e0       	ldi	r26, 0x00	; 0
    2b00:	b0 e4       	ldi	r27, 0x40	; 64
    2b02:	8d ab       	std	Y+53, r24	; 0x35
    2b04:	9e ab       	std	Y+54, r25	; 0x36
    2b06:	af ab       	std	Y+55, r26	; 0x37
    2b08:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b0a:	6d a9       	ldd	r22, Y+53	; 0x35
    2b0c:	7e a9       	ldd	r23, Y+54	; 0x36
    2b0e:	8f a9       	ldd	r24, Y+55	; 0x37
    2b10:	98 ad       	ldd	r25, Y+56	; 0x38
    2b12:	20 e0       	ldi	r18, 0x00	; 0
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	4a ef       	ldi	r20, 0xFA	; 250
    2b18:	54 e4       	ldi	r21, 0x44	; 68
    2b1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1e:	dc 01       	movw	r26, r24
    2b20:	cb 01       	movw	r24, r22
    2b22:	89 ab       	std	Y+49, r24	; 0x31
    2b24:	9a ab       	std	Y+50, r25	; 0x32
    2b26:	ab ab       	std	Y+51, r26	; 0x33
    2b28:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b2a:	69 a9       	ldd	r22, Y+49	; 0x31
    2b2c:	7a a9       	ldd	r23, Y+50	; 0x32
    2b2e:	8b a9       	ldd	r24, Y+51	; 0x33
    2b30:	9c a9       	ldd	r25, Y+52	; 0x34
    2b32:	20 e0       	ldi	r18, 0x00	; 0
    2b34:	30 e0       	ldi	r19, 0x00	; 0
    2b36:	40 e8       	ldi	r20, 0x80	; 128
    2b38:	5f e3       	ldi	r21, 0x3F	; 63
    2b3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b3e:	88 23       	and	r24, r24
    2b40:	2c f4       	brge	.+10     	; 0x2b4c <STEP_MOTORu8StartFullMode+0x148>
		__ticks = 1;
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	98 ab       	std	Y+48, r25	; 0x30
    2b48:	8f a7       	std	Y+47, r24	; 0x2f
    2b4a:	3f c0       	rjmp	.+126    	; 0x2bca <STEP_MOTORu8StartFullMode+0x1c6>
	else if (__tmp > 65535)
    2b4c:	69 a9       	ldd	r22, Y+49	; 0x31
    2b4e:	7a a9       	ldd	r23, Y+50	; 0x32
    2b50:	8b a9       	ldd	r24, Y+51	; 0x33
    2b52:	9c a9       	ldd	r25, Y+52	; 0x34
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	3f ef       	ldi	r19, 0xFF	; 255
    2b58:	4f e7       	ldi	r20, 0x7F	; 127
    2b5a:	57 e4       	ldi	r21, 0x47	; 71
    2b5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b60:	18 16       	cp	r1, r24
    2b62:	4c f5       	brge	.+82     	; 0x2bb6 <STEP_MOTORu8StartFullMode+0x1b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b64:	6d a9       	ldd	r22, Y+53	; 0x35
    2b66:	7e a9       	ldd	r23, Y+54	; 0x36
    2b68:	8f a9       	ldd	r24, Y+55	; 0x37
    2b6a:	98 ad       	ldd	r25, Y+56	; 0x38
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	40 e2       	ldi	r20, 0x20	; 32
    2b72:	51 e4       	ldi	r21, 0x41	; 65
    2b74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	bc 01       	movw	r22, r24
    2b7e:	cd 01       	movw	r24, r26
    2b80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	98 ab       	std	Y+48, r25	; 0x30
    2b8a:	8f a7       	std	Y+47, r24	; 0x2f
    2b8c:	0f c0       	rjmp	.+30     	; 0x2bac <STEP_MOTORu8StartFullMode+0x1a8>
    2b8e:	88 ec       	ldi	r24, 0xC8	; 200
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	9e a7       	std	Y+46, r25	; 0x2e
    2b94:	8d a7       	std	Y+45, r24	; 0x2d
    2b96:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b98:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b9a:	01 97       	sbiw	r24, 0x01	; 1
    2b9c:	f1 f7       	brne	.-4      	; 0x2b9a <STEP_MOTORu8StartFullMode+0x196>
    2b9e:	9e a7       	std	Y+46, r25	; 0x2e
    2ba0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ba2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ba4:	98 a9       	ldd	r25, Y+48	; 0x30
    2ba6:	01 97       	sbiw	r24, 0x01	; 1
    2ba8:	98 ab       	std	Y+48, r25	; 0x30
    2baa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bac:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bae:	98 a9       	ldd	r25, Y+48	; 0x30
    2bb0:	00 97       	sbiw	r24, 0x00	; 0
    2bb2:	69 f7       	brne	.-38     	; 0x2b8e <STEP_MOTORu8StartFullMode+0x18a>
    2bb4:	14 c0       	rjmp	.+40     	; 0x2bde <STEP_MOTORu8StartFullMode+0x1da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb6:	69 a9       	ldd	r22, Y+49	; 0x31
    2bb8:	7a a9       	ldd	r23, Y+50	; 0x32
    2bba:	8b a9       	ldd	r24, Y+51	; 0x33
    2bbc:	9c a9       	ldd	r25, Y+52	; 0x34
    2bbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	cb 01       	movw	r24, r22
    2bc6:	98 ab       	std	Y+48, r25	; 0x30
    2bc8:	8f a7       	std	Y+47, r24	; 0x2f
    2bca:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bcc:	98 a9       	ldd	r25, Y+48	; 0x30
    2bce:	9c a7       	std	Y+44, r25	; 0x2c
    2bd0:	8b a7       	std	Y+43, r24	; 0x2b
    2bd2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bd4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2bd6:	01 97       	sbiw	r24, 0x01	; 1
    2bd8:	f1 f7       	brne	.-4      	; 0x2bd6 <STEP_MOTORu8StartFullMode+0x1d2>
    2bda:	9c a7       	std	Y+44, r25	; 0x2c
    2bdc:	8b a7       	std	Y+43, r24	; 0x2b
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    2bde:	89 ad       	ldd	r24, Y+57	; 0x39
    2be0:	8f 5f       	subi	r24, 0xFF	; 255
    2be2:	89 af       	std	Y+57, r24	; 0x39
    2be4:	89 ad       	ldd	r24, Y+57	; 0x39
    2be6:	84 30       	cpi	r24, 0x04	; 4
    2be8:	08 f4       	brcc	.+2      	; 0x2bec <STEP_MOTORu8StartFullMode+0x1e8>
    2bea:	71 cf       	rjmp	.-286    	; 0x2ace <STEP_MOTORu8StartFullMode+0xca>
	u8 Local_u8ItrateStep = 0;
	if(STEP_LOWER_NIBBLE == Copy_pStep->Nibble)
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    2bec:	8a ad       	ldd	r24, Y+58	; 0x3a
    2bee:	9b ad       	ldd	r25, Y+59	; 0x3b
    2bf0:	01 96       	adiw	r24, 0x01	; 1
    2bf2:	9b af       	std	Y+59, r25	; 0x3b
    2bf4:	8a af       	std	Y+58, r24	; 0x3a
    2bf6:	2a ad       	ldd	r18, Y+58	; 0x3a
    2bf8:	3b ad       	ldd	r19, Y+59	; 0x3b
    2bfa:	8c ad       	ldd	r24, Y+60	; 0x3c
    2bfc:	9d ad       	ldd	r25, Y+61	; 0x3d
    2bfe:	28 17       	cp	r18, r24
    2c00:	39 07       	cpc	r19, r25
    2c02:	08 f4       	brcc	.+2      	; 0x2c06 <STEP_MOTORu8StartFullMode+0x202>
    2c04:	62 cf       	rjmp	.-316    	; 0x2aca <STEP_MOTORu8StartFullMode+0xc6>
    2c06:	1f c2       	rjmp	.+1086   	; 0x3046 <STEP_MOTORu8StartFullMode+0x642>
					DIO_u8SetLowNibbleValue(Copy_pStep->Port,(MASK_CW<<Local_u8ItrateStep));
					_delay_ms(2);
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
    2c08:	fe 01       	movw	r30, r28
    2c0a:	ef 5b       	subi	r30, 0xBF	; 191
    2c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0e:	01 90       	ld	r0, Z+
    2c10:	f0 81       	ld	r31, Z
    2c12:	e0 2d       	mov	r30, r0
    2c14:	82 81       	ldd	r24, Z+2	; 0x02
    2c16:	81 30       	cpi	r24, 0x01	; 1
    2c18:	09 f0       	breq	.+2      	; 0x2c1c <STEP_MOTORu8StartFullMode+0x218>
    2c1a:	a2 c0       	rjmp	.+324    	; 0x2d60 <STEP_MOTORu8StartFullMode+0x35c>
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    2c1c:	1b ae       	std	Y+59, r1	; 0x3b
    2c1e:	1a ae       	std	Y+58, r1	; 0x3a
    2c20:	96 c0       	rjmp	.+300    	; 0x2d4e <STEP_MOTORu8StartFullMode+0x34a>
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    2c22:	19 ae       	std	Y+57, r1	; 0x39
    2c24:	8b c0       	rjmp	.+278    	; 0x2d3c <STEP_MOTORu8StartFullMode+0x338>
				{
					DIO_u8SetLowNibbleValue(Copy_pStep->Port,(MASK_CCW>>Local_u8ItrateStep));
    2c26:	fe 01       	movw	r30, r28
    2c28:	ef 5b       	subi	r30, 0xBF	; 191
    2c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2c:	01 90       	ld	r0, Z+
    2c2e:	f0 81       	ld	r31, Z
    2c30:	e0 2d       	mov	r30, r0
    2c32:	40 81       	ld	r20, Z
    2c34:	89 ad       	ldd	r24, Y+57	; 0x39
    2c36:	28 2f       	mov	r18, r24
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	88 e0       	ldi	r24, 0x08	; 8
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	02 c0       	rjmp	.+4      	; 0x2c44 <STEP_MOTORu8StartFullMode+0x240>
    2c40:	95 95       	asr	r25
    2c42:	87 95       	ror	r24
    2c44:	2a 95       	dec	r18
    2c46:	e2 f7       	brpl	.-8      	; 0x2c40 <STEP_MOTORu8StartFullMode+0x23c>
    2c48:	98 2f       	mov	r25, r24
    2c4a:	84 2f       	mov	r24, r20
    2c4c:	69 2f       	mov	r22, r25
    2c4e:	0e 94 36 10 	call	0x206c	; 0x206c <DIO_u8SetLowNibbleValue>
    2c52:	80 e0       	ldi	r24, 0x00	; 0
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	a0 e0       	ldi	r26, 0x00	; 0
    2c58:	b0 e4       	ldi	r27, 0x40	; 64
    2c5a:	8f a3       	std	Y+39, r24	; 0x27
    2c5c:	98 a7       	std	Y+40, r25	; 0x28
    2c5e:	a9 a7       	std	Y+41, r26	; 0x29
    2c60:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c62:	6f a1       	ldd	r22, Y+39	; 0x27
    2c64:	78 a5       	ldd	r23, Y+40	; 0x28
    2c66:	89 a5       	ldd	r24, Y+41	; 0x29
    2c68:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	4a ef       	ldi	r20, 0xFA	; 250
    2c70:	54 e4       	ldi	r21, 0x44	; 68
    2c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c76:	dc 01       	movw	r26, r24
    2c78:	cb 01       	movw	r24, r22
    2c7a:	8b a3       	std	Y+35, r24	; 0x23
    2c7c:	9c a3       	std	Y+36, r25	; 0x24
    2c7e:	ad a3       	std	Y+37, r26	; 0x25
    2c80:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c82:	6b a1       	ldd	r22, Y+35	; 0x23
    2c84:	7c a1       	ldd	r23, Y+36	; 0x24
    2c86:	8d a1       	ldd	r24, Y+37	; 0x25
    2c88:	9e a1       	ldd	r25, Y+38	; 0x26
    2c8a:	20 e0       	ldi	r18, 0x00	; 0
    2c8c:	30 e0       	ldi	r19, 0x00	; 0
    2c8e:	40 e8       	ldi	r20, 0x80	; 128
    2c90:	5f e3       	ldi	r21, 0x3F	; 63
    2c92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c96:	88 23       	and	r24, r24
    2c98:	2c f4       	brge	.+10     	; 0x2ca4 <STEP_MOTORu8StartFullMode+0x2a0>
		__ticks = 1;
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	9a a3       	std	Y+34, r25	; 0x22
    2ca0:	89 a3       	std	Y+33, r24	; 0x21
    2ca2:	3f c0       	rjmp	.+126    	; 0x2d22 <STEP_MOTORu8StartFullMode+0x31e>
	else if (__tmp > 65535)
    2ca4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ca6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ca8:	8d a1       	ldd	r24, Y+37	; 0x25
    2caa:	9e a1       	ldd	r25, Y+38	; 0x26
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	3f ef       	ldi	r19, 0xFF	; 255
    2cb0:	4f e7       	ldi	r20, 0x7F	; 127
    2cb2:	57 e4       	ldi	r21, 0x47	; 71
    2cb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cb8:	18 16       	cp	r1, r24
    2cba:	4c f5       	brge	.+82     	; 0x2d0e <STEP_MOTORu8StartFullMode+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cbc:	6f a1       	ldd	r22, Y+39	; 0x27
    2cbe:	78 a5       	ldd	r23, Y+40	; 0x28
    2cc0:	89 a5       	ldd	r24, Y+41	; 0x29
    2cc2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	40 e2       	ldi	r20, 0x20	; 32
    2cca:	51 e4       	ldi	r21, 0x41	; 65
    2ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd0:	dc 01       	movw	r26, r24
    2cd2:	cb 01       	movw	r24, r22
    2cd4:	bc 01       	movw	r22, r24
    2cd6:	cd 01       	movw	r24, r26
    2cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cdc:	dc 01       	movw	r26, r24
    2cde:	cb 01       	movw	r24, r22
    2ce0:	9a a3       	std	Y+34, r25	; 0x22
    2ce2:	89 a3       	std	Y+33, r24	; 0x21
    2ce4:	0f c0       	rjmp	.+30     	; 0x2d04 <STEP_MOTORu8StartFullMode+0x300>
    2ce6:	88 ec       	ldi	r24, 0xC8	; 200
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	98 a3       	std	Y+32, r25	; 0x20
    2cec:	8f 8f       	std	Y+31, r24	; 0x1f
    2cee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cf0:	98 a1       	ldd	r25, Y+32	; 0x20
    2cf2:	01 97       	sbiw	r24, 0x01	; 1
    2cf4:	f1 f7       	brne	.-4      	; 0x2cf2 <STEP_MOTORu8StartFullMode+0x2ee>
    2cf6:	98 a3       	std	Y+32, r25	; 0x20
    2cf8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cfa:	89 a1       	ldd	r24, Y+33	; 0x21
    2cfc:	9a a1       	ldd	r25, Y+34	; 0x22
    2cfe:	01 97       	sbiw	r24, 0x01	; 1
    2d00:	9a a3       	std	Y+34, r25	; 0x22
    2d02:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d04:	89 a1       	ldd	r24, Y+33	; 0x21
    2d06:	9a a1       	ldd	r25, Y+34	; 0x22
    2d08:	00 97       	sbiw	r24, 0x00	; 0
    2d0a:	69 f7       	brne	.-38     	; 0x2ce6 <STEP_MOTORu8StartFullMode+0x2e2>
    2d0c:	14 c0       	rjmp	.+40     	; 0x2d36 <STEP_MOTORu8StartFullMode+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d0e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d10:	7c a1       	ldd	r23, Y+36	; 0x24
    2d12:	8d a1       	ldd	r24, Y+37	; 0x25
    2d14:	9e a1       	ldd	r25, Y+38	; 0x26
    2d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	9a a3       	std	Y+34, r25	; 0x22
    2d20:	89 a3       	std	Y+33, r24	; 0x21
    2d22:	89 a1       	ldd	r24, Y+33	; 0x21
    2d24:	9a a1       	ldd	r25, Y+34	; 0x22
    2d26:	9e 8f       	std	Y+30, r25	; 0x1e
    2d28:	8d 8f       	std	Y+29, r24	; 0x1d
    2d2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d2c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d2e:	01 97       	sbiw	r24, 0x01	; 1
    2d30:	f1 f7       	brne	.-4      	; 0x2d2e <STEP_MOTORu8StartFullMode+0x32a>
    2d32:	9e 8f       	std	Y+30, r25	; 0x1e
    2d34:	8d 8f       	std	Y+29, r24	; 0x1d
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    2d36:	89 ad       	ldd	r24, Y+57	; 0x39
    2d38:	8f 5f       	subi	r24, 0xFF	; 255
    2d3a:	89 af       	std	Y+57, r24	; 0x39
    2d3c:	89 ad       	ldd	r24, Y+57	; 0x39
    2d3e:	84 30       	cpi	r24, 0x04	; 4
    2d40:	08 f4       	brcc	.+2      	; 0x2d44 <STEP_MOTORu8StartFullMode+0x340>
    2d42:	71 cf       	rjmp	.-286    	; 0x2c26 <STEP_MOTORu8StartFullMode+0x222>
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    2d44:	8a ad       	ldd	r24, Y+58	; 0x3a
    2d46:	9b ad       	ldd	r25, Y+59	; 0x3b
    2d48:	01 96       	adiw	r24, 0x01	; 1
    2d4a:	9b af       	std	Y+59, r25	; 0x3b
    2d4c:	8a af       	std	Y+58, r24	; 0x3a
    2d4e:	2a ad       	ldd	r18, Y+58	; 0x3a
    2d50:	3b ad       	ldd	r19, Y+59	; 0x3b
    2d52:	8c ad       	ldd	r24, Y+60	; 0x3c
    2d54:	9d ad       	ldd	r25, Y+61	; 0x3d
    2d56:	28 17       	cp	r18, r24
    2d58:	39 07       	cpc	r19, r25
    2d5a:	08 f4       	brcc	.+2      	; 0x2d5e <STEP_MOTORu8StartFullMode+0x35a>
    2d5c:	62 cf       	rjmp	.-316    	; 0x2c22 <STEP_MOTORu8StartFullMode+0x21e>
    2d5e:	73 c1       	rjmp	.+742    	; 0x3046 <STEP_MOTORu8StartFullMode+0x642>
					_delay_ms(2);
				}
			}
		}
		else
			Local_u8ErrorState = NOTOK;
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	fe 01       	movw	r30, r28
    2d64:	e0 5c       	subi	r30, 0xC0	; 192
    2d66:	ff 4f       	sbci	r31, 0xFF	; 255
    2d68:	80 83       	st	Z, r24
    2d6a:	6d c1       	rjmp	.+730    	; 0x3046 <STEP_MOTORu8StartFullMode+0x642>
	}
	else if(STEP_UPPER_NIBBLE == Copy_pStep->Nibble)
    2d6c:	fe 01       	movw	r30, r28
    2d6e:	ef 5b       	subi	r30, 0xBF	; 191
    2d70:	ff 4f       	sbci	r31, 0xFF	; 255
    2d72:	01 90       	ld	r0, Z+
    2d74:	f0 81       	ld	r31, Z
    2d76:	e0 2d       	mov	r30, r0
    2d78:	81 81       	ldd	r24, Z+1	; 0x01
    2d7a:	81 30       	cpi	r24, 0x01	; 1
    2d7c:	09 f0       	breq	.+2      	; 0x2d80 <STEP_MOTORu8StartFullMode+0x37c>
    2d7e:	5e c1       	rjmp	.+700    	; 0x303c <STEP_MOTORu8StartFullMode+0x638>
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
    2d80:	fe 01       	movw	r30, r28
    2d82:	ef 5b       	subi	r30, 0xBF	; 191
    2d84:	ff 4f       	sbci	r31, 0xFF	; 255
    2d86:	01 90       	ld	r0, Z+
    2d88:	f0 81       	ld	r31, Z
    2d8a:	e0 2d       	mov	r30, r0
    2d8c:	82 81       	ldd	r24, Z+2	; 0x02
    2d8e:	88 23       	and	r24, r24
    2d90:	09 f0       	breq	.+2      	; 0x2d94 <STEP_MOTORu8StartFullMode+0x390>
    2d92:	a2 c0       	rjmp	.+324    	; 0x2ed8 <STEP_MOTORu8StartFullMode+0x4d4>
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    2d94:	1b ae       	std	Y+59, r1	; 0x3b
    2d96:	1a ae       	std	Y+58, r1	; 0x3a
    2d98:	96 c0       	rjmp	.+300    	; 0x2ec6 <STEP_MOTORu8StartFullMode+0x4c2>
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    2d9a:	19 ae       	std	Y+57, r1	; 0x39
    2d9c:	8b c0       	rjmp	.+278    	; 0x2eb4 <STEP_MOTORu8StartFullMode+0x4b0>
				{
					DIO_u8SetHighNibbleValue(Copy_pStep->Port,(MASK_CW<<Local_u8ItrateStep));
    2d9e:	fe 01       	movw	r30, r28
    2da0:	ef 5b       	subi	r30, 0xBF	; 191
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
    2da4:	01 90       	ld	r0, Z+
    2da6:	f0 81       	ld	r31, Z
    2da8:	e0 2d       	mov	r30, r0
    2daa:	40 81       	ld	r20, Z
    2dac:	89 ad       	ldd	r24, Y+57	; 0x39
    2dae:	28 2f       	mov	r18, r24
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	02 c0       	rjmp	.+4      	; 0x2dbc <STEP_MOTORu8StartFullMode+0x3b8>
    2db8:	88 0f       	add	r24, r24
    2dba:	99 1f       	adc	r25, r25
    2dbc:	2a 95       	dec	r18
    2dbe:	e2 f7       	brpl	.-8      	; 0x2db8 <STEP_MOTORu8StartFullMode+0x3b4>
    2dc0:	98 2f       	mov	r25, r24
    2dc2:	84 2f       	mov	r24, r20
    2dc4:	69 2f       	mov	r22, r25
    2dc6:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetHighNibbleValue>
    2dca:	80 e0       	ldi	r24, 0x00	; 0
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	a0 e0       	ldi	r26, 0x00	; 0
    2dd0:	b0 e4       	ldi	r27, 0x40	; 64
    2dd2:	89 8f       	std	Y+25, r24	; 0x19
    2dd4:	9a 8f       	std	Y+26, r25	; 0x1a
    2dd6:	ab 8f       	std	Y+27, r26	; 0x1b
    2dd8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dda:	69 8d       	ldd	r22, Y+25	; 0x19
    2ddc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2de0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2de2:	20 e0       	ldi	r18, 0x00	; 0
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	4a ef       	ldi	r20, 0xFA	; 250
    2de8:	54 e4       	ldi	r21, 0x44	; 68
    2dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dee:	dc 01       	movw	r26, r24
    2df0:	cb 01       	movw	r24, r22
    2df2:	8d 8b       	std	Y+21, r24	; 0x15
    2df4:	9e 8b       	std	Y+22, r25	; 0x16
    2df6:	af 8b       	std	Y+23, r26	; 0x17
    2df8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2dfa:	6d 89       	ldd	r22, Y+21	; 0x15
    2dfc:	7e 89       	ldd	r23, Y+22	; 0x16
    2dfe:	8f 89       	ldd	r24, Y+23	; 0x17
    2e00:	98 8d       	ldd	r25, Y+24	; 0x18
    2e02:	20 e0       	ldi	r18, 0x00	; 0
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	40 e8       	ldi	r20, 0x80	; 128
    2e08:	5f e3       	ldi	r21, 0x3F	; 63
    2e0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e0e:	88 23       	and	r24, r24
    2e10:	2c f4       	brge	.+10     	; 0x2e1c <STEP_MOTORu8StartFullMode+0x418>
		__ticks = 1;
    2e12:	81 e0       	ldi	r24, 0x01	; 1
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	9c 8b       	std	Y+20, r25	; 0x14
    2e18:	8b 8b       	std	Y+19, r24	; 0x13
    2e1a:	3f c0       	rjmp	.+126    	; 0x2e9a <STEP_MOTORu8StartFullMode+0x496>
	else if (__tmp > 65535)
    2e1c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e1e:	7e 89       	ldd	r23, Y+22	; 0x16
    2e20:	8f 89       	ldd	r24, Y+23	; 0x17
    2e22:	98 8d       	ldd	r25, Y+24	; 0x18
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	3f ef       	ldi	r19, 0xFF	; 255
    2e28:	4f e7       	ldi	r20, 0x7F	; 127
    2e2a:	57 e4       	ldi	r21, 0x47	; 71
    2e2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e30:	18 16       	cp	r1, r24
    2e32:	4c f5       	brge	.+82     	; 0x2e86 <STEP_MOTORu8StartFullMode+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e34:	69 8d       	ldd	r22, Y+25	; 0x19
    2e36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e3c:	20 e0       	ldi	r18, 0x00	; 0
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	40 e2       	ldi	r20, 0x20	; 32
    2e42:	51 e4       	ldi	r21, 0x41	; 65
    2e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e48:	dc 01       	movw	r26, r24
    2e4a:	cb 01       	movw	r24, r22
    2e4c:	bc 01       	movw	r22, r24
    2e4e:	cd 01       	movw	r24, r26
    2e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e54:	dc 01       	movw	r26, r24
    2e56:	cb 01       	movw	r24, r22
    2e58:	9c 8b       	std	Y+20, r25	; 0x14
    2e5a:	8b 8b       	std	Y+19, r24	; 0x13
    2e5c:	0f c0       	rjmp	.+30     	; 0x2e7c <STEP_MOTORu8StartFullMode+0x478>
    2e5e:	88 ec       	ldi	r24, 0xC8	; 200
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	9a 8b       	std	Y+18, r25	; 0x12
    2e64:	89 8b       	std	Y+17, r24	; 0x11
    2e66:	89 89       	ldd	r24, Y+17	; 0x11
    2e68:	9a 89       	ldd	r25, Y+18	; 0x12
    2e6a:	01 97       	sbiw	r24, 0x01	; 1
    2e6c:	f1 f7       	brne	.-4      	; 0x2e6a <STEP_MOTORu8StartFullMode+0x466>
    2e6e:	9a 8b       	std	Y+18, r25	; 0x12
    2e70:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e72:	8b 89       	ldd	r24, Y+19	; 0x13
    2e74:	9c 89       	ldd	r25, Y+20	; 0x14
    2e76:	01 97       	sbiw	r24, 0x01	; 1
    2e78:	9c 8b       	std	Y+20, r25	; 0x14
    2e7a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e7c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e7e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e80:	00 97       	sbiw	r24, 0x00	; 0
    2e82:	69 f7       	brne	.-38     	; 0x2e5e <STEP_MOTORu8StartFullMode+0x45a>
    2e84:	14 c0       	rjmp	.+40     	; 0x2eae <STEP_MOTORu8StartFullMode+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e86:	6d 89       	ldd	r22, Y+21	; 0x15
    2e88:	7e 89       	ldd	r23, Y+22	; 0x16
    2e8a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e8c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	9c 8b       	std	Y+20, r25	; 0x14
    2e98:	8b 8b       	std	Y+19, r24	; 0x13
    2e9a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e9c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e9e:	98 8b       	std	Y+16, r25	; 0x10
    2ea0:	8f 87       	std	Y+15, r24	; 0x0f
    2ea2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ea4:	98 89       	ldd	r25, Y+16	; 0x10
    2ea6:	01 97       	sbiw	r24, 0x01	; 1
    2ea8:	f1 f7       	brne	.-4      	; 0x2ea6 <STEP_MOTORu8StartFullMode+0x4a2>
    2eaa:	98 8b       	std	Y+16, r25	; 0x10
    2eac:	8f 87       	std	Y+15, r24	; 0x0f
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    2eae:	89 ad       	ldd	r24, Y+57	; 0x39
    2eb0:	8f 5f       	subi	r24, 0xFF	; 255
    2eb2:	89 af       	std	Y+57, r24	; 0x39
    2eb4:	89 ad       	ldd	r24, Y+57	; 0x39
    2eb6:	84 30       	cpi	r24, 0x04	; 4
    2eb8:	08 f4       	brcc	.+2      	; 0x2ebc <STEP_MOTORu8StartFullMode+0x4b8>
    2eba:	71 cf       	rjmp	.-286    	; 0x2d9e <STEP_MOTORu8StartFullMode+0x39a>
	}
	else if(STEP_UPPER_NIBBLE == Copy_pStep->Nibble)
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    2ebc:	8a ad       	ldd	r24, Y+58	; 0x3a
    2ebe:	9b ad       	ldd	r25, Y+59	; 0x3b
    2ec0:	01 96       	adiw	r24, 0x01	; 1
    2ec2:	9b af       	std	Y+59, r25	; 0x3b
    2ec4:	8a af       	std	Y+58, r24	; 0x3a
    2ec6:	2a ad       	ldd	r18, Y+58	; 0x3a
    2ec8:	3b ad       	ldd	r19, Y+59	; 0x3b
    2eca:	8c ad       	ldd	r24, Y+60	; 0x3c
    2ecc:	9d ad       	ldd	r25, Y+61	; 0x3d
    2ece:	28 17       	cp	r18, r24
    2ed0:	39 07       	cpc	r19, r25
    2ed2:	08 f4       	brcc	.+2      	; 0x2ed6 <STEP_MOTORu8StartFullMode+0x4d2>
    2ed4:	62 cf       	rjmp	.-316    	; 0x2d9a <STEP_MOTORu8StartFullMode+0x396>
    2ed6:	b7 c0       	rjmp	.+366    	; 0x3046 <STEP_MOTORu8StartFullMode+0x642>
					DIO_u8SetHighNibbleValue(Copy_pStep->Port,(MASK_CW<<Local_u8ItrateStep));
					_delay_ms(2);
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
    2ed8:	fe 01       	movw	r30, r28
    2eda:	ef 5b       	subi	r30, 0xBF	; 191
    2edc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ede:	01 90       	ld	r0, Z+
    2ee0:	f0 81       	ld	r31, Z
    2ee2:	e0 2d       	mov	r30, r0
    2ee4:	82 81       	ldd	r24, Z+2	; 0x02
    2ee6:	81 30       	cpi	r24, 0x01	; 1
    2ee8:	09 f0       	breq	.+2      	; 0x2eec <STEP_MOTORu8StartFullMode+0x4e8>
    2eea:	a2 c0       	rjmp	.+324    	; 0x3030 <STEP_MOTORu8StartFullMode+0x62c>
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    2eec:	1b ae       	std	Y+59, r1	; 0x3b
    2eee:	1a ae       	std	Y+58, r1	; 0x3a
    2ef0:	96 c0       	rjmp	.+300    	; 0x301e <STEP_MOTORu8StartFullMode+0x61a>
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    2ef2:	19 ae       	std	Y+57, r1	; 0x39
    2ef4:	8b c0       	rjmp	.+278    	; 0x300c <STEP_MOTORu8StartFullMode+0x608>
				{
					DIO_u8SetHighNibbleValue(Copy_pStep->Port,(MASK_CCW>>Local_u8ItrateStep));
    2ef6:	fe 01       	movw	r30, r28
    2ef8:	ef 5b       	subi	r30, 0xBF	; 191
    2efa:	ff 4f       	sbci	r31, 0xFF	; 255
    2efc:	01 90       	ld	r0, Z+
    2efe:	f0 81       	ld	r31, Z
    2f00:	e0 2d       	mov	r30, r0
    2f02:	40 81       	ld	r20, Z
    2f04:	89 ad       	ldd	r24, Y+57	; 0x39
    2f06:	28 2f       	mov	r18, r24
    2f08:	30 e0       	ldi	r19, 0x00	; 0
    2f0a:	88 e0       	ldi	r24, 0x08	; 8
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	02 c0       	rjmp	.+4      	; 0x2f14 <STEP_MOTORu8StartFullMode+0x510>
    2f10:	95 95       	asr	r25
    2f12:	87 95       	ror	r24
    2f14:	2a 95       	dec	r18
    2f16:	e2 f7       	brpl	.-8      	; 0x2f10 <STEP_MOTORu8StartFullMode+0x50c>
    2f18:	98 2f       	mov	r25, r24
    2f1a:	84 2f       	mov	r24, r20
    2f1c:	69 2f       	mov	r22, r25
    2f1e:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetHighNibbleValue>
    2f22:	80 e0       	ldi	r24, 0x00	; 0
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	a0 e0       	ldi	r26, 0x00	; 0
    2f28:	b0 e4       	ldi	r27, 0x40	; 64
    2f2a:	8b 87       	std	Y+11, r24	; 0x0b
    2f2c:	9c 87       	std	Y+12, r25	; 0x0c
    2f2e:	ad 87       	std	Y+13, r26	; 0x0d
    2f30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f32:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f34:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f36:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f38:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f3a:	20 e0       	ldi	r18, 0x00	; 0
    2f3c:	30 e0       	ldi	r19, 0x00	; 0
    2f3e:	4a ef       	ldi	r20, 0xFA	; 250
    2f40:	54 e4       	ldi	r21, 0x44	; 68
    2f42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f46:	dc 01       	movw	r26, r24
    2f48:	cb 01       	movw	r24, r22
    2f4a:	8f 83       	std	Y+7, r24	; 0x07
    2f4c:	98 87       	std	Y+8, r25	; 0x08
    2f4e:	a9 87       	std	Y+9, r26	; 0x09
    2f50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f52:	6f 81       	ldd	r22, Y+7	; 0x07
    2f54:	78 85       	ldd	r23, Y+8	; 0x08
    2f56:	89 85       	ldd	r24, Y+9	; 0x09
    2f58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f5a:	20 e0       	ldi	r18, 0x00	; 0
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	40 e8       	ldi	r20, 0x80	; 128
    2f60:	5f e3       	ldi	r21, 0x3F	; 63
    2f62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f66:	88 23       	and	r24, r24
    2f68:	2c f4       	brge	.+10     	; 0x2f74 <STEP_MOTORu8StartFullMode+0x570>
		__ticks = 1;
    2f6a:	81 e0       	ldi	r24, 0x01	; 1
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	9e 83       	std	Y+6, r25	; 0x06
    2f70:	8d 83       	std	Y+5, r24	; 0x05
    2f72:	3f c0       	rjmp	.+126    	; 0x2ff2 <STEP_MOTORu8StartFullMode+0x5ee>
	else if (__tmp > 65535)
    2f74:	6f 81       	ldd	r22, Y+7	; 0x07
    2f76:	78 85       	ldd	r23, Y+8	; 0x08
    2f78:	89 85       	ldd	r24, Y+9	; 0x09
    2f7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	3f ef       	ldi	r19, 0xFF	; 255
    2f80:	4f e7       	ldi	r20, 0x7F	; 127
    2f82:	57 e4       	ldi	r21, 0x47	; 71
    2f84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f88:	18 16       	cp	r1, r24
    2f8a:	4c f5       	brge	.+82     	; 0x2fde <STEP_MOTORu8StartFullMode+0x5da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f90:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f92:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	40 e2       	ldi	r20, 0x20	; 32
    2f9a:	51 e4       	ldi	r21, 0x41	; 65
    2f9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa0:	dc 01       	movw	r26, r24
    2fa2:	cb 01       	movw	r24, r22
    2fa4:	bc 01       	movw	r22, r24
    2fa6:	cd 01       	movw	r24, r26
    2fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	9e 83       	std	Y+6, r25	; 0x06
    2fb2:	8d 83       	std	Y+5, r24	; 0x05
    2fb4:	0f c0       	rjmp	.+30     	; 0x2fd4 <STEP_MOTORu8StartFullMode+0x5d0>
    2fb6:	88 ec       	ldi	r24, 0xC8	; 200
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	9c 83       	std	Y+4, r25	; 0x04
    2fbc:	8b 83       	std	Y+3, r24	; 0x03
    2fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2fc2:	01 97       	sbiw	r24, 0x01	; 1
    2fc4:	f1 f7       	brne	.-4      	; 0x2fc2 <STEP_MOTORu8StartFullMode+0x5be>
    2fc6:	9c 83       	std	Y+4, r25	; 0x04
    2fc8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fca:	8d 81       	ldd	r24, Y+5	; 0x05
    2fcc:	9e 81       	ldd	r25, Y+6	; 0x06
    2fce:	01 97       	sbiw	r24, 0x01	; 1
    2fd0:	9e 83       	std	Y+6, r25	; 0x06
    2fd2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fd4:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd6:	9e 81       	ldd	r25, Y+6	; 0x06
    2fd8:	00 97       	sbiw	r24, 0x00	; 0
    2fda:	69 f7       	brne	.-38     	; 0x2fb6 <STEP_MOTORu8StartFullMode+0x5b2>
    2fdc:	14 c0       	rjmp	.+40     	; 0x3006 <STEP_MOTORu8StartFullMode+0x602>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fde:	6f 81       	ldd	r22, Y+7	; 0x07
    2fe0:	78 85       	ldd	r23, Y+8	; 0x08
    2fe2:	89 85       	ldd	r24, Y+9	; 0x09
    2fe4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	9e 83       	std	Y+6, r25	; 0x06
    2ff0:	8d 83       	std	Y+5, r24	; 0x05
    2ff2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff6:	9a 83       	std	Y+2, r25	; 0x02
    2ff8:	89 83       	std	Y+1, r24	; 0x01
    2ffa:	89 81       	ldd	r24, Y+1	; 0x01
    2ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ffe:	01 97       	sbiw	r24, 0x01	; 1
    3000:	f1 f7       	brne	.-4      	; 0x2ffe <STEP_MOTORu8StartFullMode+0x5fa>
    3002:	9a 83       	std	Y+2, r25	; 0x02
    3004:	89 83       	std	Y+1, r24	; 0x01
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				for(Local_u8ItrateStep = 0;Local_u8ItrateStep<MAX_FULL_STEP ;Local_u8ItrateStep++)
    3006:	89 ad       	ldd	r24, Y+57	; 0x39
    3008:	8f 5f       	subi	r24, 0xFF	; 255
    300a:	89 af       	std	Y+57, r24	; 0x39
    300c:	89 ad       	ldd	r24, Y+57	; 0x39
    300e:	84 30       	cpi	r24, 0x04	; 4
    3010:	08 f4       	brcc	.+2      	; 0x3014 <STEP_MOTORu8StartFullMode+0x610>
    3012:	71 cf       	rjmp	.-286    	; 0x2ef6 <STEP_MOTORu8StartFullMode+0x4f2>
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{
			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3014:	8a ad       	ldd	r24, Y+58	; 0x3a
    3016:	9b ad       	ldd	r25, Y+59	; 0x3b
    3018:	01 96       	adiw	r24, 0x01	; 1
    301a:	9b af       	std	Y+59, r25	; 0x3b
    301c:	8a af       	std	Y+58, r24	; 0x3a
    301e:	2a ad       	ldd	r18, Y+58	; 0x3a
    3020:	3b ad       	ldd	r19, Y+59	; 0x3b
    3022:	8c ad       	ldd	r24, Y+60	; 0x3c
    3024:	9d ad       	ldd	r25, Y+61	; 0x3d
    3026:	28 17       	cp	r18, r24
    3028:	39 07       	cpc	r19, r25
    302a:	08 f4       	brcc	.+2      	; 0x302e <STEP_MOTORu8StartFullMode+0x62a>
    302c:	62 cf       	rjmp	.-316    	; 0x2ef2 <STEP_MOTORu8StartFullMode+0x4ee>
    302e:	0b c0       	rjmp	.+22     	; 0x3046 <STEP_MOTORu8StartFullMode+0x642>
					_delay_ms(2);
				}
			}
		}
		else
			Local_u8ErrorState = NOTOK;
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	fe 01       	movw	r30, r28
    3034:	e0 5c       	subi	r30, 0xC0	; 192
    3036:	ff 4f       	sbci	r31, 0xFF	; 255
    3038:	80 83       	st	Z, r24
    303a:	05 c0       	rjmp	.+10     	; 0x3046 <STEP_MOTORu8StartFullMode+0x642>
	}
	else
		Local_u8ErrorState = NOTOK;
    303c:	81 e0       	ldi	r24, 0x01	; 1
    303e:	fe 01       	movw	r30, r28
    3040:	e0 5c       	subi	r30, 0xC0	; 192
    3042:	ff 4f       	sbci	r31, 0xFF	; 255
    3044:	80 83       	st	Z, r24
	return Local_u8ErrorState;
    3046:	fe 01       	movw	r30, r28
    3048:	e0 5c       	subi	r30, 0xC0	; 192
    304a:	ff 4f       	sbci	r31, 0xFF	; 255
    304c:	80 81       	ld	r24, Z
}
    304e:	ce 5b       	subi	r28, 0xBE	; 190
    3050:	df 4f       	sbci	r29, 0xFF	; 255
    3052:	0f b6       	in	r0, 0x3f	; 63
    3054:	f8 94       	cli
    3056:	de bf       	out	0x3e, r29	; 62
    3058:	0f be       	out	0x3f, r0	; 63
    305a:	cd bf       	out	0x3d, r28	; 61
    305c:	cf 91       	pop	r28
    305e:	df 91       	pop	r29
    3060:	08 95       	ret

00003062 <STEP_MOTORu8StartHalfMode>:

u8 STEP_MOTORu8StartHalfMode(STEP_t *Copy_pStep)
{
    3062:	df 93       	push	r29
    3064:	cf 93       	push	r28
    3066:	cd b7       	in	r28, 0x3d	; 61
    3068:	de b7       	in	r29, 0x3e	; 62
    306a:	c4 54       	subi	r28, 0x44	; 68
    306c:	d0 40       	sbci	r29, 0x00	; 0
    306e:	0f b6       	in	r0, 0x3f	; 63
    3070:	f8 94       	cli
    3072:	de bf       	out	0x3e, r29	; 62
    3074:	0f be       	out	0x3f, r0	; 63
    3076:	cd bf       	out	0x3d, r28	; 61
    3078:	fe 01       	movw	r30, r28
    307a:	ed 5b       	subi	r30, 0xBD	; 189
    307c:	ff 4f       	sbci	r31, 0xFF	; 255
    307e:	91 83       	std	Z+1, r25	; 0x01
    3080:	80 83       	st	Z, r24
	u8 Local_u8ErrorState = OK;
    3082:	fe 01       	movw	r30, r28
    3084:	ee 5b       	subi	r30, 0xBE	; 190
    3086:	ff 4f       	sbci	r31, 0xFF	; 255
    3088:	10 82       	st	Z, r1
	u16 Local_u16Counter=0;
    308a:	fe 01       	movw	r30, r28
    308c:	e0 5c       	subi	r30, 0xC0	; 192
    308e:	ff 4f       	sbci	r31, 0xFF	; 255
    3090:	11 82       	std	Z+1, r1	; 0x01
    3092:	10 82       	st	Z, r1
	u16 Local_u16NumOfSteps = (u16)((((f32)Copy_pStep->AngleDegree)/5.625)*64.0);
    3094:	fe 01       	movw	r30, r28
    3096:	ed 5b       	subi	r30, 0xBD	; 189
    3098:	ff 4f       	sbci	r31, 0xFF	; 255
    309a:	01 90       	ld	r0, Z+
    309c:	f0 81       	ld	r31, Z
    309e:	e0 2d       	mov	r30, r0
    30a0:	83 81       	ldd	r24, Z+3	; 0x03
    30a2:	94 81       	ldd	r25, Z+4	; 0x04
    30a4:	cc 01       	movw	r24, r24
    30a6:	a0 e0       	ldi	r26, 0x00	; 0
    30a8:	b0 e0       	ldi	r27, 0x00	; 0
    30aa:	bc 01       	movw	r22, r24
    30ac:	cd 01       	movw	r24, r26
    30ae:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    30b2:	dc 01       	movw	r26, r24
    30b4:	cb 01       	movw	r24, r22
    30b6:	bc 01       	movw	r22, r24
    30b8:	cd 01       	movw	r24, r26
    30ba:	20 e0       	ldi	r18, 0x00	; 0
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	44 eb       	ldi	r20, 0xB4	; 180
    30c0:	50 e4       	ldi	r21, 0x40	; 64
    30c2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    30c6:	dc 01       	movw	r26, r24
    30c8:	cb 01       	movw	r24, r22
    30ca:	bc 01       	movw	r22, r24
    30cc:	cd 01       	movw	r24, r26
    30ce:	20 e0       	ldi	r18, 0x00	; 0
    30d0:	30 e0       	ldi	r19, 0x00	; 0
    30d2:	40 e8       	ldi	r20, 0x80	; 128
    30d4:	52 e4       	ldi	r21, 0x42	; 66
    30d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30da:	dc 01       	movw	r26, r24
    30dc:	cb 01       	movw	r24, r22
    30de:	bc 01       	movw	r22, r24
    30e0:	cd 01       	movw	r24, r26
    30e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e6:	dc 01       	movw	r26, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	9f af       	std	Y+63, r25	; 0x3f
    30ec:	8e af       	std	Y+62, r24	; 0x3e
	u16 Local_u16MaxItration = Local_u16NumOfSteps/8;
    30ee:	8e ad       	ldd	r24, Y+62	; 0x3e
    30f0:	9f ad       	ldd	r25, Y+63	; 0x3f
    30f2:	96 95       	lsr	r25
    30f4:	87 95       	ror	r24
    30f6:	96 95       	lsr	r25
    30f8:	87 95       	ror	r24
    30fa:	96 95       	lsr	r25
    30fc:	87 95       	ror	r24
    30fe:	9d af       	std	Y+61, r25	; 0x3d
    3100:	8c af       	std	Y+60, r24	; 0x3c
	u8 Local_u8ItrateStep = 0,con1,con2 ;
    3102:	1b ae       	std	Y+59, r1	; 0x3b
	if(STEP_LOWER_NIBBLE == Copy_pStep->Nibble)
    3104:	fe 01       	movw	r30, r28
    3106:	ed 5b       	subi	r30, 0xBD	; 189
    3108:	ff 4f       	sbci	r31, 0xFF	; 255
    310a:	01 90       	ld	r0, Z+
    310c:	f0 81       	ld	r31, Z
    310e:	e0 2d       	mov	r30, r0
    3110:	81 81       	ldd	r24, Z+1	; 0x01
    3112:	88 23       	and	r24, r24
    3114:	09 f0       	breq	.+2      	; 0x3118 <STEP_MOTORu8StartHalfMode+0xb6>
    3116:	96 c1       	rjmp	.+812    	; 0x3444 <STEP_MOTORu8StartHalfMode+0x3e2>
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
    3118:	fe 01       	movw	r30, r28
    311a:	ed 5b       	subi	r30, 0xBD	; 189
    311c:	ff 4f       	sbci	r31, 0xFF	; 255
    311e:	01 90       	ld	r0, Z+
    3120:	f0 81       	ld	r31, Z
    3122:	e0 2d       	mov	r30, r0
    3124:	82 81       	ldd	r24, Z+2	; 0x02
    3126:	88 23       	and	r24, r24
    3128:	09 f0       	breq	.+2      	; 0x312c <STEP_MOTORu8StartHalfMode+0xca>
    312a:	c1 c0       	rjmp	.+386    	; 0x32ae <STEP_MOTORu8StartHalfMode+0x24c>
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    312c:	fe 01       	movw	r30, r28
    312e:	e0 5c       	subi	r30, 0xC0	; 192
    3130:	ff 4f       	sbci	r31, 0xFF	; 255
    3132:	11 82       	std	Z+1, r1	; 0x01
    3134:	10 82       	st	Z, r1
    3136:	af c0       	rjmp	.+350    	; 0x3296 <STEP_MOTORu8StartHalfMode+0x234>
			{
				con1 = 0x01;
    3138:	81 e0       	ldi	r24, 0x01	; 1
    313a:	8a af       	std	Y+58, r24	; 0x3a
				con2 = 0x03;
    313c:	83 e0       	ldi	r24, 0x03	; 3
    313e:	89 af       	std	Y+57, r24	; 0x39
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3140:	81 e0       	ldi	r24, 0x01	; 1
    3142:	8b af       	std	Y+59, r24	; 0x3b
    3144:	98 c0       	rjmp	.+304    	; 0x3276 <STEP_MOTORu8StartHalfMode+0x214>
				{

					if(Local_u8ItrateStep%2==1)
    3146:	8b ad       	ldd	r24, Y+59	; 0x3b
    3148:	88 2f       	mov	r24, r24
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	81 70       	andi	r24, 0x01	; 1
    314e:	90 70       	andi	r25, 0x00	; 0
    3150:	88 23       	and	r24, r24
    3152:	71 f0       	breq	.+28     	; 0x3170 <STEP_MOTORu8StartHalfMode+0x10e>
					{
						DIO_u8SetLowNibbleValue(Copy_pStep->Port,con1);
    3154:	fe 01       	movw	r30, r28
    3156:	ed 5b       	subi	r30, 0xBD	; 189
    3158:	ff 4f       	sbci	r31, 0xFF	; 255
    315a:	01 90       	ld	r0, Z+
    315c:	f0 81       	ld	r31, Z
    315e:	e0 2d       	mov	r30, r0
    3160:	80 81       	ld	r24, Z
    3162:	6a ad       	ldd	r22, Y+58	; 0x3a
    3164:	0e 94 36 10 	call	0x206c	; 0x206c <DIO_u8SetLowNibbleValue>
						con1<<=1;
    3168:	8a ad       	ldd	r24, Y+58	; 0x3a
    316a:	88 0f       	add	r24, r24
    316c:	8a af       	std	Y+58, r24	; 0x3a
    316e:	0e c0       	rjmp	.+28     	; 0x318c <STEP_MOTORu8StartHalfMode+0x12a>
					}
					else
					{
						DIO_u8SetLowNibbleValue(Copy_pStep->Port,con2);
    3170:	fe 01       	movw	r30, r28
    3172:	ed 5b       	subi	r30, 0xBD	; 189
    3174:	ff 4f       	sbci	r31, 0xFF	; 255
    3176:	01 90       	ld	r0, Z+
    3178:	f0 81       	ld	r31, Z
    317a:	e0 2d       	mov	r30, r0
    317c:	80 81       	ld	r24, Z
    317e:	69 ad       	ldd	r22, Y+57	; 0x39
    3180:	0e 94 36 10 	call	0x206c	; 0x206c <DIO_u8SetLowNibbleValue>
						con2 = RotateLeftLowNibble(con2);
    3184:	89 ad       	ldd	r24, Y+57	; 0x39
    3186:	0e 94 23 1c 	call	0x3846	; 0x3846 <RotateLeftLowNibble>
    318a:	89 af       	std	Y+57, r24	; 0x39
    318c:	80 e0       	ldi	r24, 0x00	; 0
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	a0 e0       	ldi	r26, 0x00	; 0
    3192:	b0 e4       	ldi	r27, 0x40	; 64
    3194:	8d ab       	std	Y+53, r24	; 0x35
    3196:	9e ab       	std	Y+54, r25	; 0x36
    3198:	af ab       	std	Y+55, r26	; 0x37
    319a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    319c:	6d a9       	ldd	r22, Y+53	; 0x35
    319e:	7e a9       	ldd	r23, Y+54	; 0x36
    31a0:	8f a9       	ldd	r24, Y+55	; 0x37
    31a2:	98 ad       	ldd	r25, Y+56	; 0x38
    31a4:	20 e0       	ldi	r18, 0x00	; 0
    31a6:	30 e0       	ldi	r19, 0x00	; 0
    31a8:	4a ef       	ldi	r20, 0xFA	; 250
    31aa:	54 e4       	ldi	r21, 0x44	; 68
    31ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b0:	dc 01       	movw	r26, r24
    31b2:	cb 01       	movw	r24, r22
    31b4:	89 ab       	std	Y+49, r24	; 0x31
    31b6:	9a ab       	std	Y+50, r25	; 0x32
    31b8:	ab ab       	std	Y+51, r26	; 0x33
    31ba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    31bc:	69 a9       	ldd	r22, Y+49	; 0x31
    31be:	7a a9       	ldd	r23, Y+50	; 0x32
    31c0:	8b a9       	ldd	r24, Y+51	; 0x33
    31c2:	9c a9       	ldd	r25, Y+52	; 0x34
    31c4:	20 e0       	ldi	r18, 0x00	; 0
    31c6:	30 e0       	ldi	r19, 0x00	; 0
    31c8:	40 e8       	ldi	r20, 0x80	; 128
    31ca:	5f e3       	ldi	r21, 0x3F	; 63
    31cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31d0:	88 23       	and	r24, r24
    31d2:	2c f4       	brge	.+10     	; 0x31de <STEP_MOTORu8StartHalfMode+0x17c>
		__ticks = 1;
    31d4:	81 e0       	ldi	r24, 0x01	; 1
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	98 ab       	std	Y+48, r25	; 0x30
    31da:	8f a7       	std	Y+47, r24	; 0x2f
    31dc:	3f c0       	rjmp	.+126    	; 0x325c <STEP_MOTORu8StartHalfMode+0x1fa>
	else if (__tmp > 65535)
    31de:	69 a9       	ldd	r22, Y+49	; 0x31
    31e0:	7a a9       	ldd	r23, Y+50	; 0x32
    31e2:	8b a9       	ldd	r24, Y+51	; 0x33
    31e4:	9c a9       	ldd	r25, Y+52	; 0x34
    31e6:	20 e0       	ldi	r18, 0x00	; 0
    31e8:	3f ef       	ldi	r19, 0xFF	; 255
    31ea:	4f e7       	ldi	r20, 0x7F	; 127
    31ec:	57 e4       	ldi	r21, 0x47	; 71
    31ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31f2:	18 16       	cp	r1, r24
    31f4:	4c f5       	brge	.+82     	; 0x3248 <STEP_MOTORu8StartHalfMode+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31f6:	6d a9       	ldd	r22, Y+53	; 0x35
    31f8:	7e a9       	ldd	r23, Y+54	; 0x36
    31fa:	8f a9       	ldd	r24, Y+55	; 0x37
    31fc:	98 ad       	ldd	r25, Y+56	; 0x38
    31fe:	20 e0       	ldi	r18, 0x00	; 0
    3200:	30 e0       	ldi	r19, 0x00	; 0
    3202:	40 e2       	ldi	r20, 0x20	; 32
    3204:	51 e4       	ldi	r21, 0x41	; 65
    3206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    320a:	dc 01       	movw	r26, r24
    320c:	cb 01       	movw	r24, r22
    320e:	bc 01       	movw	r22, r24
    3210:	cd 01       	movw	r24, r26
    3212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3216:	dc 01       	movw	r26, r24
    3218:	cb 01       	movw	r24, r22
    321a:	98 ab       	std	Y+48, r25	; 0x30
    321c:	8f a7       	std	Y+47, r24	; 0x2f
    321e:	0f c0       	rjmp	.+30     	; 0x323e <STEP_MOTORu8StartHalfMode+0x1dc>
    3220:	88 ec       	ldi	r24, 0xC8	; 200
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	9e a7       	std	Y+46, r25	; 0x2e
    3226:	8d a7       	std	Y+45, r24	; 0x2d
    3228:	8d a5       	ldd	r24, Y+45	; 0x2d
    322a:	9e a5       	ldd	r25, Y+46	; 0x2e
    322c:	01 97       	sbiw	r24, 0x01	; 1
    322e:	f1 f7       	brne	.-4      	; 0x322c <STEP_MOTORu8StartHalfMode+0x1ca>
    3230:	9e a7       	std	Y+46, r25	; 0x2e
    3232:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3234:	8f a5       	ldd	r24, Y+47	; 0x2f
    3236:	98 a9       	ldd	r25, Y+48	; 0x30
    3238:	01 97       	sbiw	r24, 0x01	; 1
    323a:	98 ab       	std	Y+48, r25	; 0x30
    323c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    323e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3240:	98 a9       	ldd	r25, Y+48	; 0x30
    3242:	00 97       	sbiw	r24, 0x00	; 0
    3244:	69 f7       	brne	.-38     	; 0x3220 <STEP_MOTORu8StartHalfMode+0x1be>
    3246:	14 c0       	rjmp	.+40     	; 0x3270 <STEP_MOTORu8StartHalfMode+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3248:	69 a9       	ldd	r22, Y+49	; 0x31
    324a:	7a a9       	ldd	r23, Y+50	; 0x32
    324c:	8b a9       	ldd	r24, Y+51	; 0x33
    324e:	9c a9       	ldd	r25, Y+52	; 0x34
    3250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	98 ab       	std	Y+48, r25	; 0x30
    325a:	8f a7       	std	Y+47, r24	; 0x2f
    325c:	8f a5       	ldd	r24, Y+47	; 0x2f
    325e:	98 a9       	ldd	r25, Y+48	; 0x30
    3260:	9c a7       	std	Y+44, r25	; 0x2c
    3262:	8b a7       	std	Y+43, r24	; 0x2b
    3264:	8b a5       	ldd	r24, Y+43	; 0x2b
    3266:	9c a5       	ldd	r25, Y+44	; 0x2c
    3268:	01 97       	sbiw	r24, 0x01	; 1
    326a:	f1 f7       	brne	.-4      	; 0x3268 <STEP_MOTORu8StartHalfMode+0x206>
    326c:	9c a7       	std	Y+44, r25	; 0x2c
    326e:	8b a7       	std	Y+43, r24	; 0x2b

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				con1 = 0x01;
				con2 = 0x03;
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3270:	8b ad       	ldd	r24, Y+59	; 0x3b
    3272:	8f 5f       	subi	r24, 0xFF	; 255
    3274:	8b af       	std	Y+59, r24	; 0x3b
    3276:	8b ad       	ldd	r24, Y+59	; 0x3b
    3278:	89 30       	cpi	r24, 0x09	; 9
    327a:	08 f4       	brcc	.+2      	; 0x327e <STEP_MOTORu8StartHalfMode+0x21c>
    327c:	64 cf       	rjmp	.-312    	; 0x3146 <STEP_MOTORu8StartHalfMode+0xe4>
	if(STEP_LOWER_NIBBLE == Copy_pStep->Nibble)
	{
		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    327e:	de 01       	movw	r26, r28
    3280:	a0 5c       	subi	r26, 0xC0	; 192
    3282:	bf 4f       	sbci	r27, 0xFF	; 255
    3284:	fe 01       	movw	r30, r28
    3286:	e0 5c       	subi	r30, 0xC0	; 192
    3288:	ff 4f       	sbci	r31, 0xFF	; 255
    328a:	80 81       	ld	r24, Z
    328c:	91 81       	ldd	r25, Z+1	; 0x01
    328e:	01 96       	adiw	r24, 0x01	; 1
    3290:	11 96       	adiw	r26, 0x01	; 1
    3292:	9c 93       	st	X, r25
    3294:	8e 93       	st	-X, r24
    3296:	fe 01       	movw	r30, r28
    3298:	e0 5c       	subi	r30, 0xC0	; 192
    329a:	ff 4f       	sbci	r31, 0xFF	; 255
    329c:	20 81       	ld	r18, Z
    329e:	31 81       	ldd	r19, Z+1	; 0x01
    32a0:	8c ad       	ldd	r24, Y+60	; 0x3c
    32a2:	9d ad       	ldd	r25, Y+61	; 0x3d
    32a4:	28 17       	cp	r18, r24
    32a6:	39 07       	cpc	r19, r25
    32a8:	08 f4       	brcc	.+2      	; 0x32ac <STEP_MOTORu8StartHalfMode+0x24a>
    32aa:	46 cf       	rjmp	.-372    	; 0x3138 <STEP_MOTORu8StartHalfMode+0xd6>
    32ac:	7e c2       	rjmp	.+1276   	; 0x37aa <STEP_MOTORu8StartHalfMode+0x748>
					}
					_delay_ms(2);
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
    32ae:	fe 01       	movw	r30, r28
    32b0:	ed 5b       	subi	r30, 0xBD	; 189
    32b2:	ff 4f       	sbci	r31, 0xFF	; 255
    32b4:	01 90       	ld	r0, Z+
    32b6:	f0 81       	ld	r31, Z
    32b8:	e0 2d       	mov	r30, r0
    32ba:	82 81       	ldd	r24, Z+2	; 0x02
    32bc:	81 30       	cpi	r24, 0x01	; 1
    32be:	09 f0       	breq	.+2      	; 0x32c2 <STEP_MOTORu8StartHalfMode+0x260>
    32c0:	74 c2       	rjmp	.+1256   	; 0x37aa <STEP_MOTORu8StartHalfMode+0x748>
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    32c2:	fe 01       	movw	r30, r28
    32c4:	e0 5c       	subi	r30, 0xC0	; 192
    32c6:	ff 4f       	sbci	r31, 0xFF	; 255
    32c8:	11 82       	std	Z+1, r1	; 0x01
    32ca:	10 82       	st	Z, r1
    32cc:	af c0       	rjmp	.+350    	; 0x342c <STEP_MOTORu8StartHalfMode+0x3ca>
			{
				con1 = 0x08;
    32ce:	88 e0       	ldi	r24, 0x08	; 8
    32d0:	8a af       	std	Y+58, r24	; 0x3a
				con2 = 0x0c;
    32d2:	8c e0       	ldi	r24, 0x0C	; 12
    32d4:	89 af       	std	Y+57, r24	; 0x39
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    32d6:	81 e0       	ldi	r24, 0x01	; 1
    32d8:	8b af       	std	Y+59, r24	; 0x3b
    32da:	98 c0       	rjmp	.+304    	; 0x340c <STEP_MOTORu8StartHalfMode+0x3aa>
				{

					if(Local_u8ItrateStep%2==1)
    32dc:	8b ad       	ldd	r24, Y+59	; 0x3b
    32de:	88 2f       	mov	r24, r24
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	81 70       	andi	r24, 0x01	; 1
    32e4:	90 70       	andi	r25, 0x00	; 0
    32e6:	88 23       	and	r24, r24
    32e8:	71 f0       	breq	.+28     	; 0x3306 <STEP_MOTORu8StartHalfMode+0x2a4>
					{
						DIO_u8SetLowNibbleValue(Copy_pStep->Port,con1);
    32ea:	fe 01       	movw	r30, r28
    32ec:	ed 5b       	subi	r30, 0xBD	; 189
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	01 90       	ld	r0, Z+
    32f2:	f0 81       	ld	r31, Z
    32f4:	e0 2d       	mov	r30, r0
    32f6:	80 81       	ld	r24, Z
    32f8:	6a ad       	ldd	r22, Y+58	; 0x3a
    32fa:	0e 94 36 10 	call	0x206c	; 0x206c <DIO_u8SetLowNibbleValue>
						con1>>=1;
    32fe:	8a ad       	ldd	r24, Y+58	; 0x3a
    3300:	86 95       	lsr	r24
    3302:	8a af       	std	Y+58, r24	; 0x3a
    3304:	0e c0       	rjmp	.+28     	; 0x3322 <STEP_MOTORu8StartHalfMode+0x2c0>
					}
					else
					{
						DIO_u8SetLowNibbleValue(Copy_pStep->Port,con2);
    3306:	fe 01       	movw	r30, r28
    3308:	ed 5b       	subi	r30, 0xBD	; 189
    330a:	ff 4f       	sbci	r31, 0xFF	; 255
    330c:	01 90       	ld	r0, Z+
    330e:	f0 81       	ld	r31, Z
    3310:	e0 2d       	mov	r30, r0
    3312:	80 81       	ld	r24, Z
    3314:	69 ad       	ldd	r22, Y+57	; 0x39
    3316:	0e 94 36 10 	call	0x206c	; 0x206c <DIO_u8SetLowNibbleValue>
						con2 = RotateRightLowNibble(con2);
    331a:	89 ad       	ldd	r24, Y+57	; 0x39
    331c:	0e 94 06 1c 	call	0x380c	; 0x380c <RotateRightLowNibble>
    3320:	89 af       	std	Y+57, r24	; 0x39
    3322:	80 e0       	ldi	r24, 0x00	; 0
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	a0 e0       	ldi	r26, 0x00	; 0
    3328:	b0 e4       	ldi	r27, 0x40	; 64
    332a:	8f a3       	std	Y+39, r24	; 0x27
    332c:	98 a7       	std	Y+40, r25	; 0x28
    332e:	a9 a7       	std	Y+41, r26	; 0x29
    3330:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3332:	6f a1       	ldd	r22, Y+39	; 0x27
    3334:	78 a5       	ldd	r23, Y+40	; 0x28
    3336:	89 a5       	ldd	r24, Y+41	; 0x29
    3338:	9a a5       	ldd	r25, Y+42	; 0x2a
    333a:	20 e0       	ldi	r18, 0x00	; 0
    333c:	30 e0       	ldi	r19, 0x00	; 0
    333e:	4a ef       	ldi	r20, 0xFA	; 250
    3340:	54 e4       	ldi	r21, 0x44	; 68
    3342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3346:	dc 01       	movw	r26, r24
    3348:	cb 01       	movw	r24, r22
    334a:	8b a3       	std	Y+35, r24	; 0x23
    334c:	9c a3       	std	Y+36, r25	; 0x24
    334e:	ad a3       	std	Y+37, r26	; 0x25
    3350:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3352:	6b a1       	ldd	r22, Y+35	; 0x23
    3354:	7c a1       	ldd	r23, Y+36	; 0x24
    3356:	8d a1       	ldd	r24, Y+37	; 0x25
    3358:	9e a1       	ldd	r25, Y+38	; 0x26
    335a:	20 e0       	ldi	r18, 0x00	; 0
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	40 e8       	ldi	r20, 0x80	; 128
    3360:	5f e3       	ldi	r21, 0x3F	; 63
    3362:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3366:	88 23       	and	r24, r24
    3368:	2c f4       	brge	.+10     	; 0x3374 <STEP_MOTORu8StartHalfMode+0x312>
		__ticks = 1;
    336a:	81 e0       	ldi	r24, 0x01	; 1
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	9a a3       	std	Y+34, r25	; 0x22
    3370:	89 a3       	std	Y+33, r24	; 0x21
    3372:	3f c0       	rjmp	.+126    	; 0x33f2 <STEP_MOTORu8StartHalfMode+0x390>
	else if (__tmp > 65535)
    3374:	6b a1       	ldd	r22, Y+35	; 0x23
    3376:	7c a1       	ldd	r23, Y+36	; 0x24
    3378:	8d a1       	ldd	r24, Y+37	; 0x25
    337a:	9e a1       	ldd	r25, Y+38	; 0x26
    337c:	20 e0       	ldi	r18, 0x00	; 0
    337e:	3f ef       	ldi	r19, 0xFF	; 255
    3380:	4f e7       	ldi	r20, 0x7F	; 127
    3382:	57 e4       	ldi	r21, 0x47	; 71
    3384:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3388:	18 16       	cp	r1, r24
    338a:	4c f5       	brge	.+82     	; 0x33de <STEP_MOTORu8StartHalfMode+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    338c:	6f a1       	ldd	r22, Y+39	; 0x27
    338e:	78 a5       	ldd	r23, Y+40	; 0x28
    3390:	89 a5       	ldd	r24, Y+41	; 0x29
    3392:	9a a5       	ldd	r25, Y+42	; 0x2a
    3394:	20 e0       	ldi	r18, 0x00	; 0
    3396:	30 e0       	ldi	r19, 0x00	; 0
    3398:	40 e2       	ldi	r20, 0x20	; 32
    339a:	51 e4       	ldi	r21, 0x41	; 65
    339c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33a0:	dc 01       	movw	r26, r24
    33a2:	cb 01       	movw	r24, r22
    33a4:	bc 01       	movw	r22, r24
    33a6:	cd 01       	movw	r24, r26
    33a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ac:	dc 01       	movw	r26, r24
    33ae:	cb 01       	movw	r24, r22
    33b0:	9a a3       	std	Y+34, r25	; 0x22
    33b2:	89 a3       	std	Y+33, r24	; 0x21
    33b4:	0f c0       	rjmp	.+30     	; 0x33d4 <STEP_MOTORu8StartHalfMode+0x372>
    33b6:	88 ec       	ldi	r24, 0xC8	; 200
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	98 a3       	std	Y+32, r25	; 0x20
    33bc:	8f 8f       	std	Y+31, r24	; 0x1f
    33be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33c0:	98 a1       	ldd	r25, Y+32	; 0x20
    33c2:	01 97       	sbiw	r24, 0x01	; 1
    33c4:	f1 f7       	brne	.-4      	; 0x33c2 <STEP_MOTORu8StartHalfMode+0x360>
    33c6:	98 a3       	std	Y+32, r25	; 0x20
    33c8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ca:	89 a1       	ldd	r24, Y+33	; 0x21
    33cc:	9a a1       	ldd	r25, Y+34	; 0x22
    33ce:	01 97       	sbiw	r24, 0x01	; 1
    33d0:	9a a3       	std	Y+34, r25	; 0x22
    33d2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33d4:	89 a1       	ldd	r24, Y+33	; 0x21
    33d6:	9a a1       	ldd	r25, Y+34	; 0x22
    33d8:	00 97       	sbiw	r24, 0x00	; 0
    33da:	69 f7       	brne	.-38     	; 0x33b6 <STEP_MOTORu8StartHalfMode+0x354>
    33dc:	14 c0       	rjmp	.+40     	; 0x3406 <STEP_MOTORu8StartHalfMode+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33de:	6b a1       	ldd	r22, Y+35	; 0x23
    33e0:	7c a1       	ldd	r23, Y+36	; 0x24
    33e2:	8d a1       	ldd	r24, Y+37	; 0x25
    33e4:	9e a1       	ldd	r25, Y+38	; 0x26
    33e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ea:	dc 01       	movw	r26, r24
    33ec:	cb 01       	movw	r24, r22
    33ee:	9a a3       	std	Y+34, r25	; 0x22
    33f0:	89 a3       	std	Y+33, r24	; 0x21
    33f2:	89 a1       	ldd	r24, Y+33	; 0x21
    33f4:	9a a1       	ldd	r25, Y+34	; 0x22
    33f6:	9e 8f       	std	Y+30, r25	; 0x1e
    33f8:	8d 8f       	std	Y+29, r24	; 0x1d
    33fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33fe:	01 97       	sbiw	r24, 0x01	; 1
    3400:	f1 f7       	brne	.-4      	; 0x33fe <STEP_MOTORu8StartHalfMode+0x39c>
    3402:	9e 8f       	std	Y+30, r25	; 0x1e
    3404:	8d 8f       	std	Y+29, r24	; 0x1d

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				con1 = 0x08;
				con2 = 0x0c;
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3406:	8b ad       	ldd	r24, Y+59	; 0x3b
    3408:	8f 5f       	subi	r24, 0xFF	; 255
    340a:	8b af       	std	Y+59, r24	; 0x3b
    340c:	8b ad       	ldd	r24, Y+59	; 0x3b
    340e:	89 30       	cpi	r24, 0x09	; 9
    3410:	08 f4       	brcc	.+2      	; 0x3414 <STEP_MOTORu8StartHalfMode+0x3b2>
    3412:	64 cf       	rjmp	.-312    	; 0x32dc <STEP_MOTORu8StartHalfMode+0x27a>
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3414:	de 01       	movw	r26, r28
    3416:	a0 5c       	subi	r26, 0xC0	; 192
    3418:	bf 4f       	sbci	r27, 0xFF	; 255
    341a:	fe 01       	movw	r30, r28
    341c:	e0 5c       	subi	r30, 0xC0	; 192
    341e:	ff 4f       	sbci	r31, 0xFF	; 255
    3420:	80 81       	ld	r24, Z
    3422:	91 81       	ldd	r25, Z+1	; 0x01
    3424:	01 96       	adiw	r24, 0x01	; 1
    3426:	11 96       	adiw	r26, 0x01	; 1
    3428:	9c 93       	st	X, r25
    342a:	8e 93       	st	-X, r24
    342c:	fe 01       	movw	r30, r28
    342e:	e0 5c       	subi	r30, 0xC0	; 192
    3430:	ff 4f       	sbci	r31, 0xFF	; 255
    3432:	20 81       	ld	r18, Z
    3434:	31 81       	ldd	r19, Z+1	; 0x01
    3436:	8c ad       	ldd	r24, Y+60	; 0x3c
    3438:	9d ad       	ldd	r25, Y+61	; 0x3d
    343a:	28 17       	cp	r18, r24
    343c:	39 07       	cpc	r19, r25
    343e:	08 f4       	brcc	.+2      	; 0x3442 <STEP_MOTORu8StartHalfMode+0x3e0>
    3440:	46 cf       	rjmp	.-372    	; 0x32ce <STEP_MOTORu8StartHalfMode+0x26c>
    3442:	b3 c1       	rjmp	.+870    	; 0x37aa <STEP_MOTORu8StartHalfMode+0x748>
				}
			}
		}

	}
	else if(STEP_UPPER_NIBBLE == Copy_pStep->Nibble)
    3444:	fe 01       	movw	r30, r28
    3446:	ed 5b       	subi	r30, 0xBD	; 189
    3448:	ff 4f       	sbci	r31, 0xFF	; 255
    344a:	01 90       	ld	r0, Z+
    344c:	f0 81       	ld	r31, Z
    344e:	e0 2d       	mov	r30, r0
    3450:	81 81       	ldd	r24, Z+1	; 0x01
    3452:	81 30       	cpi	r24, 0x01	; 1
    3454:	09 f0       	breq	.+2      	; 0x3458 <STEP_MOTORu8StartHalfMode+0x3f6>
    3456:	a4 c1       	rjmp	.+840    	; 0x37a0 <STEP_MOTORu8StartHalfMode+0x73e>
	{

		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
    3458:	fe 01       	movw	r30, r28
    345a:	ed 5b       	subi	r30, 0xBD	; 189
    345c:	ff 4f       	sbci	r31, 0xFF	; 255
    345e:	01 90       	ld	r0, Z+
    3460:	f0 81       	ld	r31, Z
    3462:	e0 2d       	mov	r30, r0
    3464:	82 81       	ldd	r24, Z+2	; 0x02
    3466:	88 23       	and	r24, r24
    3468:	09 f0       	breq	.+2      	; 0x346c <STEP_MOTORu8StartHalfMode+0x40a>
    346a:	c9 c0       	rjmp	.+402    	; 0x35fe <STEP_MOTORu8StartHalfMode+0x59c>
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    346c:	fe 01       	movw	r30, r28
    346e:	e0 5c       	subi	r30, 0xC0	; 192
    3470:	ff 4f       	sbci	r31, 0xFF	; 255
    3472:	11 82       	std	Z+1, r1	; 0x01
    3474:	10 82       	st	Z, r1
    3476:	b7 c0       	rjmp	.+366    	; 0x35e6 <STEP_MOTORu8StartHalfMode+0x584>
			{
				con1 = 0x01;
    3478:	81 e0       	ldi	r24, 0x01	; 1
    347a:	8a af       	std	Y+58, r24	; 0x3a
				con2 = 0x03;
    347c:	83 e0       	ldi	r24, 0x03	; 3
    347e:	89 af       	std	Y+57, r24	; 0x39
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3480:	81 e0       	ldi	r24, 0x01	; 1
    3482:	8b af       	std	Y+59, r24	; 0x3b
    3484:	a0 c0       	rjmp	.+320    	; 0x35c6 <STEP_MOTORu8StartHalfMode+0x564>
				{

					if(Local_u8ItrateStep%2==1)
    3486:	8b ad       	ldd	r24, Y+59	; 0x3b
    3488:	88 2f       	mov	r24, r24
    348a:	90 e0       	ldi	r25, 0x00	; 0
    348c:	81 70       	andi	r24, 0x01	; 1
    348e:	90 70       	andi	r25, 0x00	; 0
    3490:	88 23       	and	r24, r24
    3492:	71 f0       	breq	.+28     	; 0x34b0 <STEP_MOTORu8StartHalfMode+0x44e>
					{
						DIO_u8SetHighNibbleValue(Copy_pStep->Port,con1);
    3494:	fe 01       	movw	r30, r28
    3496:	ed 5b       	subi	r30, 0xBD	; 189
    3498:	ff 4f       	sbci	r31, 0xFF	; 255
    349a:	01 90       	ld	r0, Z+
    349c:	f0 81       	ld	r31, Z
    349e:	e0 2d       	mov	r30, r0
    34a0:	80 81       	ld	r24, Z
    34a2:	6a ad       	ldd	r22, Y+58	; 0x3a
    34a4:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetHighNibbleValue>
						con1<<=1;
    34a8:	8a ad       	ldd	r24, Y+58	; 0x3a
    34aa:	88 0f       	add	r24, r24
    34ac:	8a af       	std	Y+58, r24	; 0x3a
    34ae:	16 c0       	rjmp	.+44     	; 0x34dc <STEP_MOTORu8StartHalfMode+0x47a>
					}
					else
					{
						DIO_u8SetHighNibbleValue(Copy_pStep->Port,con2);
    34b0:	fe 01       	movw	r30, r28
    34b2:	ed 5b       	subi	r30, 0xBD	; 189
    34b4:	ff 4f       	sbci	r31, 0xFF	; 255
    34b6:	01 90       	ld	r0, Z+
    34b8:	f0 81       	ld	r31, Z
    34ba:	e0 2d       	mov	r30, r0
    34bc:	80 81       	ld	r24, Z
    34be:	69 ad       	ldd	r22, Y+57	; 0x39
    34c0:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetHighNibbleValue>
						CLCD_voidWriteNumber(con2);
    34c4:	89 ad       	ldd	r24, Y+57	; 0x39
    34c6:	88 2f       	mov	r24, r24
    34c8:	90 e0       	ldi	r25, 0x00	; 0
    34ca:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <CLCD_voidWriteNumber>
						CLCD_voidSendData(' ');
    34ce:	80 e2       	ldi	r24, 0x20	; 32
    34d0:	0e 94 f5 08 	call	0x11ea	; 0x11ea <CLCD_voidSendData>
						con2 = RotateLeftLowNibble(con2);
    34d4:	89 ad       	ldd	r24, Y+57	; 0x39
    34d6:	0e 94 23 1c 	call	0x3846	; 0x3846 <RotateLeftLowNibble>
    34da:	89 af       	std	Y+57, r24	; 0x39
    34dc:	80 e0       	ldi	r24, 0x00	; 0
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	a0 e0       	ldi	r26, 0x00	; 0
    34e2:	b0 e4       	ldi	r27, 0x40	; 64
    34e4:	89 8f       	std	Y+25, r24	; 0x19
    34e6:	9a 8f       	std	Y+26, r25	; 0x1a
    34e8:	ab 8f       	std	Y+27, r26	; 0x1b
    34ea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ec:	69 8d       	ldd	r22, Y+25	; 0x19
    34ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34f4:	20 e0       	ldi	r18, 0x00	; 0
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	4a ef       	ldi	r20, 0xFA	; 250
    34fa:	54 e4       	ldi	r21, 0x44	; 68
    34fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3500:	dc 01       	movw	r26, r24
    3502:	cb 01       	movw	r24, r22
    3504:	8d 8b       	std	Y+21, r24	; 0x15
    3506:	9e 8b       	std	Y+22, r25	; 0x16
    3508:	af 8b       	std	Y+23, r26	; 0x17
    350a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    350c:	6d 89       	ldd	r22, Y+21	; 0x15
    350e:	7e 89       	ldd	r23, Y+22	; 0x16
    3510:	8f 89       	ldd	r24, Y+23	; 0x17
    3512:	98 8d       	ldd	r25, Y+24	; 0x18
    3514:	20 e0       	ldi	r18, 0x00	; 0
    3516:	30 e0       	ldi	r19, 0x00	; 0
    3518:	40 e8       	ldi	r20, 0x80	; 128
    351a:	5f e3       	ldi	r21, 0x3F	; 63
    351c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3520:	88 23       	and	r24, r24
    3522:	2c f4       	brge	.+10     	; 0x352e <STEP_MOTORu8StartHalfMode+0x4cc>
		__ticks = 1;
    3524:	81 e0       	ldi	r24, 0x01	; 1
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	9c 8b       	std	Y+20, r25	; 0x14
    352a:	8b 8b       	std	Y+19, r24	; 0x13
    352c:	3f c0       	rjmp	.+126    	; 0x35ac <STEP_MOTORu8StartHalfMode+0x54a>
	else if (__tmp > 65535)
    352e:	6d 89       	ldd	r22, Y+21	; 0x15
    3530:	7e 89       	ldd	r23, Y+22	; 0x16
    3532:	8f 89       	ldd	r24, Y+23	; 0x17
    3534:	98 8d       	ldd	r25, Y+24	; 0x18
    3536:	20 e0       	ldi	r18, 0x00	; 0
    3538:	3f ef       	ldi	r19, 0xFF	; 255
    353a:	4f e7       	ldi	r20, 0x7F	; 127
    353c:	57 e4       	ldi	r21, 0x47	; 71
    353e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3542:	18 16       	cp	r1, r24
    3544:	4c f5       	brge	.+82     	; 0x3598 <STEP_MOTORu8StartHalfMode+0x536>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3546:	69 8d       	ldd	r22, Y+25	; 0x19
    3548:	7a 8d       	ldd	r23, Y+26	; 0x1a
    354a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    354c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    354e:	20 e0       	ldi	r18, 0x00	; 0
    3550:	30 e0       	ldi	r19, 0x00	; 0
    3552:	40 e2       	ldi	r20, 0x20	; 32
    3554:	51 e4       	ldi	r21, 0x41	; 65
    3556:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    355a:	dc 01       	movw	r26, r24
    355c:	cb 01       	movw	r24, r22
    355e:	bc 01       	movw	r22, r24
    3560:	cd 01       	movw	r24, r26
    3562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3566:	dc 01       	movw	r26, r24
    3568:	cb 01       	movw	r24, r22
    356a:	9c 8b       	std	Y+20, r25	; 0x14
    356c:	8b 8b       	std	Y+19, r24	; 0x13
    356e:	0f c0       	rjmp	.+30     	; 0x358e <STEP_MOTORu8StartHalfMode+0x52c>
    3570:	88 ec       	ldi	r24, 0xC8	; 200
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	9a 8b       	std	Y+18, r25	; 0x12
    3576:	89 8b       	std	Y+17, r24	; 0x11
    3578:	89 89       	ldd	r24, Y+17	; 0x11
    357a:	9a 89       	ldd	r25, Y+18	; 0x12
    357c:	01 97       	sbiw	r24, 0x01	; 1
    357e:	f1 f7       	brne	.-4      	; 0x357c <STEP_MOTORu8StartHalfMode+0x51a>
    3580:	9a 8b       	std	Y+18, r25	; 0x12
    3582:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3584:	8b 89       	ldd	r24, Y+19	; 0x13
    3586:	9c 89       	ldd	r25, Y+20	; 0x14
    3588:	01 97       	sbiw	r24, 0x01	; 1
    358a:	9c 8b       	std	Y+20, r25	; 0x14
    358c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    358e:	8b 89       	ldd	r24, Y+19	; 0x13
    3590:	9c 89       	ldd	r25, Y+20	; 0x14
    3592:	00 97       	sbiw	r24, 0x00	; 0
    3594:	69 f7       	brne	.-38     	; 0x3570 <STEP_MOTORu8StartHalfMode+0x50e>
    3596:	14 c0       	rjmp	.+40     	; 0x35c0 <STEP_MOTORu8StartHalfMode+0x55e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3598:	6d 89       	ldd	r22, Y+21	; 0x15
    359a:	7e 89       	ldd	r23, Y+22	; 0x16
    359c:	8f 89       	ldd	r24, Y+23	; 0x17
    359e:	98 8d       	ldd	r25, Y+24	; 0x18
    35a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a4:	dc 01       	movw	r26, r24
    35a6:	cb 01       	movw	r24, r22
    35a8:	9c 8b       	std	Y+20, r25	; 0x14
    35aa:	8b 8b       	std	Y+19, r24	; 0x13
    35ac:	8b 89       	ldd	r24, Y+19	; 0x13
    35ae:	9c 89       	ldd	r25, Y+20	; 0x14
    35b0:	98 8b       	std	Y+16, r25	; 0x10
    35b2:	8f 87       	std	Y+15, r24	; 0x0f
    35b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    35b6:	98 89       	ldd	r25, Y+16	; 0x10
    35b8:	01 97       	sbiw	r24, 0x01	; 1
    35ba:	f1 f7       	brne	.-4      	; 0x35b8 <STEP_MOTORu8StartHalfMode+0x556>
    35bc:	98 8b       	std	Y+16, r25	; 0x10
    35be:	8f 87       	std	Y+15, r24	; 0x0f

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				con1 = 0x01;
				con2 = 0x03;
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    35c0:	8b ad       	ldd	r24, Y+59	; 0x3b
    35c2:	8f 5f       	subi	r24, 0xFF	; 255
    35c4:	8b af       	std	Y+59, r24	; 0x3b
    35c6:	8b ad       	ldd	r24, Y+59	; 0x3b
    35c8:	89 30       	cpi	r24, 0x09	; 9
    35ca:	08 f4       	brcc	.+2      	; 0x35ce <STEP_MOTORu8StartHalfMode+0x56c>
    35cc:	5c cf       	rjmp	.-328    	; 0x3486 <STEP_MOTORu8StartHalfMode+0x424>
	{

		if(Copy_pStep->Diraction == STEP_CLOCKWISE)
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    35ce:	de 01       	movw	r26, r28
    35d0:	a0 5c       	subi	r26, 0xC0	; 192
    35d2:	bf 4f       	sbci	r27, 0xFF	; 255
    35d4:	fe 01       	movw	r30, r28
    35d6:	e0 5c       	subi	r30, 0xC0	; 192
    35d8:	ff 4f       	sbci	r31, 0xFF	; 255
    35da:	80 81       	ld	r24, Z
    35dc:	91 81       	ldd	r25, Z+1	; 0x01
    35de:	01 96       	adiw	r24, 0x01	; 1
    35e0:	11 96       	adiw	r26, 0x01	; 1
    35e2:	9c 93       	st	X, r25
    35e4:	8e 93       	st	-X, r24
    35e6:	fe 01       	movw	r30, r28
    35e8:	e0 5c       	subi	r30, 0xC0	; 192
    35ea:	ff 4f       	sbci	r31, 0xFF	; 255
    35ec:	20 81       	ld	r18, Z
    35ee:	31 81       	ldd	r19, Z+1	; 0x01
    35f0:	8c ad       	ldd	r24, Y+60	; 0x3c
    35f2:	9d ad       	ldd	r25, Y+61	; 0x3d
    35f4:	28 17       	cp	r18, r24
    35f6:	39 07       	cpc	r19, r25
    35f8:	08 f4       	brcc	.+2      	; 0x35fc <STEP_MOTORu8StartHalfMode+0x59a>
    35fa:	3e cf       	rjmp	.-388    	; 0x3478 <STEP_MOTORu8StartHalfMode+0x416>
    35fc:	d6 c0       	rjmp	.+428    	; 0x37aa <STEP_MOTORu8StartHalfMode+0x748>
					}
					_delay_ms(2);
				}
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
    35fe:	fe 01       	movw	r30, r28
    3600:	ed 5b       	subi	r30, 0xBD	; 189
    3602:	ff 4f       	sbci	r31, 0xFF	; 255
    3604:	01 90       	ld	r0, Z+
    3606:	f0 81       	ld	r31, Z
    3608:	e0 2d       	mov	r30, r0
    360a:	82 81       	ldd	r24, Z+2	; 0x02
    360c:	81 30       	cpi	r24, 0x01	; 1
    360e:	09 f0       	breq	.+2      	; 0x3612 <STEP_MOTORu8StartHalfMode+0x5b0>
    3610:	c1 c0       	rjmp	.+386    	; 0x3794 <STEP_MOTORu8StartHalfMode+0x732>
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3612:	fe 01       	movw	r30, r28
    3614:	e0 5c       	subi	r30, 0xC0	; 192
    3616:	ff 4f       	sbci	r31, 0xFF	; 255
    3618:	11 82       	std	Z+1, r1	; 0x01
    361a:	10 82       	st	Z, r1
    361c:	af c0       	rjmp	.+350    	; 0x377c <STEP_MOTORu8StartHalfMode+0x71a>
			{
				con1 = 0x08;
    361e:	88 e0       	ldi	r24, 0x08	; 8
    3620:	8a af       	std	Y+58, r24	; 0x3a
				con2 = 0x0c;
    3622:	8c e0       	ldi	r24, 0x0C	; 12
    3624:	89 af       	std	Y+57, r24	; 0x39
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3626:	81 e0       	ldi	r24, 0x01	; 1
    3628:	8b af       	std	Y+59, r24	; 0x3b
    362a:	98 c0       	rjmp	.+304    	; 0x375c <STEP_MOTORu8StartHalfMode+0x6fa>
				{

					if(Local_u8ItrateStep%2==1)
    362c:	8b ad       	ldd	r24, Y+59	; 0x3b
    362e:	88 2f       	mov	r24, r24
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	81 70       	andi	r24, 0x01	; 1
    3634:	90 70       	andi	r25, 0x00	; 0
    3636:	88 23       	and	r24, r24
    3638:	71 f0       	breq	.+28     	; 0x3656 <STEP_MOTORu8StartHalfMode+0x5f4>
					{
						DIO_u8SetHighNibbleValue(Copy_pStep->Port,con1);
    363a:	fe 01       	movw	r30, r28
    363c:	ed 5b       	subi	r30, 0xBD	; 189
    363e:	ff 4f       	sbci	r31, 0xFF	; 255
    3640:	01 90       	ld	r0, Z+
    3642:	f0 81       	ld	r31, Z
    3644:	e0 2d       	mov	r30, r0
    3646:	80 81       	ld	r24, Z
    3648:	6a ad       	ldd	r22, Y+58	; 0x3a
    364a:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetHighNibbleValue>
						con1>>=1;
    364e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3650:	86 95       	lsr	r24
    3652:	8a af       	std	Y+58, r24	; 0x3a
    3654:	0e c0       	rjmp	.+28     	; 0x3672 <STEP_MOTORu8StartHalfMode+0x610>
					}
					else
					{
						DIO_u8SetHighNibbleValue(Copy_pStep->Port,con2);
    3656:	fe 01       	movw	r30, r28
    3658:	ed 5b       	subi	r30, 0xBD	; 189
    365a:	ff 4f       	sbci	r31, 0xFF	; 255
    365c:	01 90       	ld	r0, Z+
    365e:	f0 81       	ld	r31, Z
    3660:	e0 2d       	mov	r30, r0
    3662:	80 81       	ld	r24, Z
    3664:	69 ad       	ldd	r22, Y+57	; 0x39
    3666:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetHighNibbleValue>
						con2 = RotateRightLowNibble(con2);
    366a:	89 ad       	ldd	r24, Y+57	; 0x39
    366c:	0e 94 06 1c 	call	0x380c	; 0x380c <RotateRightLowNibble>
    3670:	89 af       	std	Y+57, r24	; 0x39
    3672:	80 e0       	ldi	r24, 0x00	; 0
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	a0 e0       	ldi	r26, 0x00	; 0
    3678:	b0 e4       	ldi	r27, 0x40	; 64
    367a:	8b 87       	std	Y+11, r24	; 0x0b
    367c:	9c 87       	std	Y+12, r25	; 0x0c
    367e:	ad 87       	std	Y+13, r26	; 0x0d
    3680:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3682:	6b 85       	ldd	r22, Y+11	; 0x0b
    3684:	7c 85       	ldd	r23, Y+12	; 0x0c
    3686:	8d 85       	ldd	r24, Y+13	; 0x0d
    3688:	9e 85       	ldd	r25, Y+14	; 0x0e
    368a:	20 e0       	ldi	r18, 0x00	; 0
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	4a ef       	ldi	r20, 0xFA	; 250
    3690:	54 e4       	ldi	r21, 0x44	; 68
    3692:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3696:	dc 01       	movw	r26, r24
    3698:	cb 01       	movw	r24, r22
    369a:	8f 83       	std	Y+7, r24	; 0x07
    369c:	98 87       	std	Y+8, r25	; 0x08
    369e:	a9 87       	std	Y+9, r26	; 0x09
    36a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36a2:	6f 81       	ldd	r22, Y+7	; 0x07
    36a4:	78 85       	ldd	r23, Y+8	; 0x08
    36a6:	89 85       	ldd	r24, Y+9	; 0x09
    36a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    36aa:	20 e0       	ldi	r18, 0x00	; 0
    36ac:	30 e0       	ldi	r19, 0x00	; 0
    36ae:	40 e8       	ldi	r20, 0x80	; 128
    36b0:	5f e3       	ldi	r21, 0x3F	; 63
    36b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36b6:	88 23       	and	r24, r24
    36b8:	2c f4       	brge	.+10     	; 0x36c4 <STEP_MOTORu8StartHalfMode+0x662>
		__ticks = 1;
    36ba:	81 e0       	ldi	r24, 0x01	; 1
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	9e 83       	std	Y+6, r25	; 0x06
    36c0:	8d 83       	std	Y+5, r24	; 0x05
    36c2:	3f c0       	rjmp	.+126    	; 0x3742 <STEP_MOTORu8StartHalfMode+0x6e0>
	else if (__tmp > 65535)
    36c4:	6f 81       	ldd	r22, Y+7	; 0x07
    36c6:	78 85       	ldd	r23, Y+8	; 0x08
    36c8:	89 85       	ldd	r24, Y+9	; 0x09
    36ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    36cc:	20 e0       	ldi	r18, 0x00	; 0
    36ce:	3f ef       	ldi	r19, 0xFF	; 255
    36d0:	4f e7       	ldi	r20, 0x7F	; 127
    36d2:	57 e4       	ldi	r21, 0x47	; 71
    36d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36d8:	18 16       	cp	r1, r24
    36da:	4c f5       	brge	.+82     	; 0x372e <STEP_MOTORu8StartHalfMode+0x6cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    36de:	7c 85       	ldd	r23, Y+12	; 0x0c
    36e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    36e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    36e4:	20 e0       	ldi	r18, 0x00	; 0
    36e6:	30 e0       	ldi	r19, 0x00	; 0
    36e8:	40 e2       	ldi	r20, 0x20	; 32
    36ea:	51 e4       	ldi	r21, 0x41	; 65
    36ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36f0:	dc 01       	movw	r26, r24
    36f2:	cb 01       	movw	r24, r22
    36f4:	bc 01       	movw	r22, r24
    36f6:	cd 01       	movw	r24, r26
    36f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36fc:	dc 01       	movw	r26, r24
    36fe:	cb 01       	movw	r24, r22
    3700:	9e 83       	std	Y+6, r25	; 0x06
    3702:	8d 83       	std	Y+5, r24	; 0x05
    3704:	0f c0       	rjmp	.+30     	; 0x3724 <STEP_MOTORu8StartHalfMode+0x6c2>
    3706:	88 ec       	ldi	r24, 0xC8	; 200
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	9c 83       	std	Y+4, r25	; 0x04
    370c:	8b 83       	std	Y+3, r24	; 0x03
    370e:	8b 81       	ldd	r24, Y+3	; 0x03
    3710:	9c 81       	ldd	r25, Y+4	; 0x04
    3712:	01 97       	sbiw	r24, 0x01	; 1
    3714:	f1 f7       	brne	.-4      	; 0x3712 <STEP_MOTORu8StartHalfMode+0x6b0>
    3716:	9c 83       	std	Y+4, r25	; 0x04
    3718:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    371a:	8d 81       	ldd	r24, Y+5	; 0x05
    371c:	9e 81       	ldd	r25, Y+6	; 0x06
    371e:	01 97       	sbiw	r24, 0x01	; 1
    3720:	9e 83       	std	Y+6, r25	; 0x06
    3722:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3724:	8d 81       	ldd	r24, Y+5	; 0x05
    3726:	9e 81       	ldd	r25, Y+6	; 0x06
    3728:	00 97       	sbiw	r24, 0x00	; 0
    372a:	69 f7       	brne	.-38     	; 0x3706 <STEP_MOTORu8StartHalfMode+0x6a4>
    372c:	14 c0       	rjmp	.+40     	; 0x3756 <STEP_MOTORu8StartHalfMode+0x6f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    372e:	6f 81       	ldd	r22, Y+7	; 0x07
    3730:	78 85       	ldd	r23, Y+8	; 0x08
    3732:	89 85       	ldd	r24, Y+9	; 0x09
    3734:	9a 85       	ldd	r25, Y+10	; 0x0a
    3736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    373a:	dc 01       	movw	r26, r24
    373c:	cb 01       	movw	r24, r22
    373e:	9e 83       	std	Y+6, r25	; 0x06
    3740:	8d 83       	std	Y+5, r24	; 0x05
    3742:	8d 81       	ldd	r24, Y+5	; 0x05
    3744:	9e 81       	ldd	r25, Y+6	; 0x06
    3746:	9a 83       	std	Y+2, r25	; 0x02
    3748:	89 83       	std	Y+1, r24	; 0x01
    374a:	89 81       	ldd	r24, Y+1	; 0x01
    374c:	9a 81       	ldd	r25, Y+2	; 0x02
    374e:	01 97       	sbiw	r24, 0x01	; 1
    3750:	f1 f7       	brne	.-4      	; 0x374e <STEP_MOTORu8StartHalfMode+0x6ec>
    3752:	9a 83       	std	Y+2, r25	; 0x02
    3754:	89 83       	std	Y+1, r24	; 0x01

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
			{
				con1 = 0x08;
				con2 = 0x0c;
				for(Local_u8ItrateStep = 1;Local_u8ItrateStep<=MAX_HALF_STEP;Local_u8ItrateStep++)
    3756:	8b ad       	ldd	r24, Y+59	; 0x3b
    3758:	8f 5f       	subi	r24, 0xFF	; 255
    375a:	8b af       	std	Y+59, r24	; 0x3b
    375c:	8b ad       	ldd	r24, Y+59	; 0x3b
    375e:	89 30       	cpi	r24, 0x09	; 9
    3760:	08 f4       	brcc	.+2      	; 0x3764 <STEP_MOTORu8StartHalfMode+0x702>
    3762:	64 cf       	rjmp	.-312    	; 0x362c <STEP_MOTORu8StartHalfMode+0x5ca>
			}
		}
		else if(Copy_pStep->Diraction == STEP_COUNTER_CLOCKWISE)
		{

			for(Local_u16Counter = 0; Local_u16Counter<Local_u16MaxItration;Local_u16Counter++)
    3764:	de 01       	movw	r26, r28
    3766:	a0 5c       	subi	r26, 0xC0	; 192
    3768:	bf 4f       	sbci	r27, 0xFF	; 255
    376a:	fe 01       	movw	r30, r28
    376c:	e0 5c       	subi	r30, 0xC0	; 192
    376e:	ff 4f       	sbci	r31, 0xFF	; 255
    3770:	80 81       	ld	r24, Z
    3772:	91 81       	ldd	r25, Z+1	; 0x01
    3774:	01 96       	adiw	r24, 0x01	; 1
    3776:	11 96       	adiw	r26, 0x01	; 1
    3778:	9c 93       	st	X, r25
    377a:	8e 93       	st	-X, r24
    377c:	fe 01       	movw	r30, r28
    377e:	e0 5c       	subi	r30, 0xC0	; 192
    3780:	ff 4f       	sbci	r31, 0xFF	; 255
    3782:	20 81       	ld	r18, Z
    3784:	31 81       	ldd	r19, Z+1	; 0x01
    3786:	8c ad       	ldd	r24, Y+60	; 0x3c
    3788:	9d ad       	ldd	r25, Y+61	; 0x3d
    378a:	28 17       	cp	r18, r24
    378c:	39 07       	cpc	r19, r25
    378e:	08 f4       	brcc	.+2      	; 0x3792 <STEP_MOTORu8StartHalfMode+0x730>
    3790:	46 cf       	rjmp	.-372    	; 0x361e <STEP_MOTORu8StartHalfMode+0x5bc>
    3792:	0b c0       	rjmp	.+22     	; 0x37aa <STEP_MOTORu8StartHalfMode+0x748>
					_delay_ms(2);
				}
			}
		}
		else
			Local_u8ErrorState = NOTOK;
    3794:	fe 01       	movw	r30, r28
    3796:	ee 5b       	subi	r30, 0xBE	; 190
    3798:	ff 4f       	sbci	r31, 0xFF	; 255
    379a:	81 e0       	ldi	r24, 0x01	; 1
    379c:	80 83       	st	Z, r24
    379e:	05 c0       	rjmp	.+10     	; 0x37aa <STEP_MOTORu8StartHalfMode+0x748>
	}
	else
		Local_u8ErrorState = NOTOK;
    37a0:	fe 01       	movw	r30, r28
    37a2:	ee 5b       	subi	r30, 0xBE	; 190
    37a4:	ff 4f       	sbci	r31, 0xFF	; 255
    37a6:	81 e0       	ldi	r24, 0x01	; 1
    37a8:	80 83       	st	Z, r24
	return Local_u8ErrorState;
    37aa:	fe 01       	movw	r30, r28
    37ac:	ee 5b       	subi	r30, 0xBE	; 190
    37ae:	ff 4f       	sbci	r31, 0xFF	; 255
    37b0:	80 81       	ld	r24, Z
}
    37b2:	cc 5b       	subi	r28, 0xBC	; 188
    37b4:	df 4f       	sbci	r29, 0xFF	; 255
    37b6:	0f b6       	in	r0, 0x3f	; 63
    37b8:	f8 94       	cli
    37ba:	de bf       	out	0x3e, r29	; 62
    37bc:	0f be       	out	0x3f, r0	; 63
    37be:	cd bf       	out	0x3d, r28	; 61
    37c0:	cf 91       	pop	r28
    37c2:	df 91       	pop	r29
    37c4:	08 95       	ret

000037c6 <STEP_MOTORvStop>:

void STEP_MOTORvStop(STEP_t *Copy_pStep)
{
    37c6:	df 93       	push	r29
    37c8:	cf 93       	push	r28
    37ca:	00 d0       	rcall	.+0      	; 0x37cc <STEP_MOTORvStop+0x6>
    37cc:	cd b7       	in	r28, 0x3d	; 61
    37ce:	de b7       	in	r29, 0x3e	; 62
    37d0:	9a 83       	std	Y+2, r25	; 0x02
    37d2:	89 83       	std	Y+1, r24	; 0x01
	if(STEP_LOWER_NIBBLE == Copy_pStep->Nibble)
    37d4:	e9 81       	ldd	r30, Y+1	; 0x01
    37d6:	fa 81       	ldd	r31, Y+2	; 0x02
    37d8:	81 81       	ldd	r24, Z+1	; 0x01
    37da:	88 23       	and	r24, r24
    37dc:	39 f4       	brne	.+14     	; 0x37ec <STEP_MOTORvStop+0x26>
	{
		DIO_u8SetLowNibbleValue(Copy_pStep->Port,0);
    37de:	e9 81       	ldd	r30, Y+1	; 0x01
    37e0:	fa 81       	ldd	r31, Y+2	; 0x02
    37e2:	80 81       	ld	r24, Z
    37e4:	60 e0       	ldi	r22, 0x00	; 0
    37e6:	0e 94 36 10 	call	0x206c	; 0x206c <DIO_u8SetLowNibbleValue>
    37ea:	0b c0       	rjmp	.+22     	; 0x3802 <STEP_MOTORvStop+0x3c>
	}
	else if(STEP_UPPER_NIBBLE == Copy_pStep->Nibble)
    37ec:	e9 81       	ldd	r30, Y+1	; 0x01
    37ee:	fa 81       	ldd	r31, Y+2	; 0x02
    37f0:	81 81       	ldd	r24, Z+1	; 0x01
    37f2:	81 30       	cpi	r24, 0x01	; 1
    37f4:	31 f4       	brne	.+12     	; 0x3802 <STEP_MOTORvStop+0x3c>
	{
		DIO_u8SetHighNibbleValue(Copy_pStep->Port,0);
    37f6:	e9 81       	ldd	r30, Y+1	; 0x01
    37f8:	fa 81       	ldd	r31, Y+2	; 0x02
    37fa:	80 81       	ld	r24, Z
    37fc:	60 e0       	ldi	r22, 0x00	; 0
    37fe:	0e 94 b1 10 	call	0x2162	; 0x2162 <DIO_u8SetHighNibbleValue>
	}
}
    3802:	0f 90       	pop	r0
    3804:	0f 90       	pop	r0
    3806:	cf 91       	pop	r28
    3808:	df 91       	pop	r29
    380a:	08 95       	ret

0000380c <RotateRightLowNibble>:


static u8 RotateRightLowNibble(u8 Val)
{
    380c:	df 93       	push	r29
    380e:	cf 93       	push	r28
    3810:	00 d0       	rcall	.+0      	; 0x3812 <RotateRightLowNibble+0x6>
    3812:	cd b7       	in	r28, 0x3d	; 61
    3814:	de b7       	in	r29, 0x3e	; 62
    3816:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_xVal = 0;
    3818:	19 82       	std	Y+1, r1	; 0x01
	Local_xVal = GET_BIT(Val,0);
    381a:	8a 81       	ldd	r24, Y+2	; 0x02
    381c:	81 70       	andi	r24, 0x01	; 1
    381e:	89 83       	std	Y+1, r24	; 0x01
	Val>>=1;
    3820:	8a 81       	ldd	r24, Y+2	; 0x02
    3822:	86 95       	lsr	r24
    3824:	8a 83       	std	Y+2, r24	; 0x02
	Local_xVal?SET_BIT(Val,3):CLR_BIT(Val,3);
    3826:	89 81       	ldd	r24, Y+1	; 0x01
    3828:	88 23       	and	r24, r24
    382a:	21 f0       	breq	.+8      	; 0x3834 <RotateRightLowNibble+0x28>
    382c:	8a 81       	ldd	r24, Y+2	; 0x02
    382e:	88 60       	ori	r24, 0x08	; 8
    3830:	8a 83       	std	Y+2, r24	; 0x02
    3832:	03 c0       	rjmp	.+6      	; 0x383a <RotateRightLowNibble+0x2e>
    3834:	8a 81       	ldd	r24, Y+2	; 0x02
    3836:	87 7f       	andi	r24, 0xF7	; 247
    3838:	8a 83       	std	Y+2, r24	; 0x02
	return Val;
    383a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    383c:	0f 90       	pop	r0
    383e:	0f 90       	pop	r0
    3840:	cf 91       	pop	r28
    3842:	df 91       	pop	r29
    3844:	08 95       	ret

00003846 <RotateLeftLowNibble>:

static u8 RotateLeftLowNibble(u8 Val)
{
    3846:	df 93       	push	r29
    3848:	cf 93       	push	r28
    384a:	00 d0       	rcall	.+0      	; 0x384c <RotateLeftLowNibble+0x6>
    384c:	cd b7       	in	r28, 0x3d	; 61
    384e:	de b7       	in	r29, 0x3e	; 62
    3850:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_xVal = 0;
    3852:	19 82       	std	Y+1, r1	; 0x01
	Local_xVal = GET_BIT(Val,3);
    3854:	8a 81       	ldd	r24, Y+2	; 0x02
    3856:	86 95       	lsr	r24
    3858:	86 95       	lsr	r24
    385a:	86 95       	lsr	r24
    385c:	81 70       	andi	r24, 0x01	; 1
    385e:	89 83       	std	Y+1, r24	; 0x01
	Val<<=1;
    3860:	8a 81       	ldd	r24, Y+2	; 0x02
    3862:	88 0f       	add	r24, r24
    3864:	8a 83       	std	Y+2, r24	; 0x02
	Local_xVal?SET_BIT(Val,0):CLR_BIT(Val,0);
    3866:	89 81       	ldd	r24, Y+1	; 0x01
    3868:	88 23       	and	r24, r24
    386a:	21 f0       	breq	.+8      	; 0x3874 <RotateLeftLowNibble+0x2e>
    386c:	8a 81       	ldd	r24, Y+2	; 0x02
    386e:	81 60       	ori	r24, 0x01	; 1
    3870:	8a 83       	std	Y+2, r24	; 0x02
    3872:	03 c0       	rjmp	.+6      	; 0x387a <RotateLeftLowNibble+0x34>
    3874:	8a 81       	ldd	r24, Y+2	; 0x02
    3876:	8e 7f       	andi	r24, 0xFE	; 254
    3878:	8a 83       	std	Y+2, r24	; 0x02
	return Val;
    387a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    387c:	0f 90       	pop	r0
    387e:	0f 90       	pop	r0
    3880:	cf 91       	pop	r28
    3882:	df 91       	pop	r29
    3884:	08 95       	ret

00003886 <SW_u8GetState>:
 * 			Copy_SW     : Full with Port,Pin,SelfType,switch function
 * 			Copy_u8State: return State of switch as (0) Pressed , (1) Not pressed
 * use for: Get Switch by delay debouncing of switch as (0) Pressed , (1) Not pressed
 *  */
u8 SW_u8GetState(SW_t* Copy_SW,u8 *Copy_u8State)
{
    3886:	df 93       	push	r29
    3888:	cf 93       	push	r28
    388a:	cd b7       	in	r28, 0x3d	; 61
    388c:	de b7       	in	r29, 0x3e	; 62
    388e:	a1 97       	sbiw	r28, 0x21	; 33
    3890:	0f b6       	in	r0, 0x3f	; 63
    3892:	f8 94       	cli
    3894:	de bf       	out	0x3e, r29	; 62
    3896:	0f be       	out	0x3f, r0	; 63
    3898:	cd bf       	out	0x3d, r28	; 61
    389a:	9f 8f       	std	Y+31, r25	; 0x1f
    389c:	8e 8f       	std	Y+30, r24	; 0x1e
    389e:	79 a3       	std	Y+33, r23	; 0x21
    38a0:	68 a3       	std	Y+32, r22	; 0x20
	u8 Local_u8ErrorState = OK;
    38a2:	1d 8e       	std	Y+29, r1	; 0x1d
	//static u8 pressed_conf_level = 0;
	//static u8 released_conf_level = 0;
	//static u8 pressed = 0;
	//static u8 pressed2 = 0;
	*Copy_u8State = SW_NOT_PRESSED;
    38a4:	e8 a1       	ldd	r30, Y+32	; 0x20
    38a6:	f9 a1       	ldd	r31, Y+33	; 0x21
    38a8:	81 e0       	ldi	r24, 0x01	; 1
    38aa:	80 83       	st	Z, r24
	static u8 Local_u8SwState;
	if(Copy_SW->Pulltype == SW_PULL_UP)
    38ac:	ee 8d       	ldd	r30, Y+30	; 0x1e
    38ae:	ff 8d       	ldd	r31, Y+31	; 0x1f
    38b0:	82 81       	ldd	r24, Z+2	; 0x02
    38b2:	88 23       	and	r24, r24
    38b4:	09 f0       	breq	.+2      	; 0x38b8 <SW_u8GetState+0x32>
    38b6:	c3 c0       	rjmp	.+390    	; 0x3a3e <SW_u8GetState+0x1b8>
	{
		if(Copy_SW->SelfLockType == SW_SELF_LOCK)
    38b8:	ee 8d       	ldd	r30, Y+30	; 0x1e
    38ba:	ff 8d       	ldd	r31, Y+31	; 0x1f
    38bc:	83 81       	ldd	r24, Z+3	; 0x03
    38be:	81 30       	cpi	r24, 0x01	; 1
    38c0:	09 f0       	breq	.+2      	; 0x38c4 <SW_u8GetState+0x3e>
    38c2:	9c c0       	rjmp	.+312    	; 0x39fc <SW_u8GetState+0x176>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    38c4:	ee 8d       	ldd	r30, Y+30	; 0x1e
    38c6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    38c8:	80 81       	ld	r24, Z
    38ca:	ee 8d       	ldd	r30, Y+30	; 0x1e
    38cc:	ff 8d       	ldd	r31, Y+31	; 0x1f
    38ce:	91 81       	ldd	r25, Z+1	; 0x01
    38d0:	2c ea       	ldi	r18, 0xAC	; 172
    38d2:	31 e0       	ldi	r19, 0x01	; 1
    38d4:	69 2f       	mov	r22, r25
    38d6:	a9 01       	movw	r20, r18
    38d8:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8GetPinValue>
			if(Local_u8SwState == DIO_PIN_LOW)
    38dc:	80 91 ac 01 	lds	r24, 0x01AC
    38e0:	88 23       	and	r24, r24
    38e2:	09 f0       	breq	.+2      	; 0x38e6 <SW_u8GetState+0x60>
    38e4:	6d c1       	rjmp	.+730    	; 0x3bc0 <SW_u8GetState+0x33a>
    38e6:	80 e0       	ldi	r24, 0x00	; 0
    38e8:	90 e0       	ldi	r25, 0x00	; 0
    38ea:	a6 e1       	ldi	r26, 0x16	; 22
    38ec:	b3 e4       	ldi	r27, 0x43	; 67
    38ee:	89 8f       	std	Y+25, r24	; 0x19
    38f0:	9a 8f       	std	Y+26, r25	; 0x1a
    38f2:	ab 8f       	std	Y+27, r26	; 0x1b
    38f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38f6:	69 8d       	ldd	r22, Y+25	; 0x19
    38f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38fe:	20 e0       	ldi	r18, 0x00	; 0
    3900:	30 e0       	ldi	r19, 0x00	; 0
    3902:	4a ef       	ldi	r20, 0xFA	; 250
    3904:	54 e4       	ldi	r21, 0x44	; 68
    3906:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    390a:	dc 01       	movw	r26, r24
    390c:	cb 01       	movw	r24, r22
    390e:	8d 8b       	std	Y+21, r24	; 0x15
    3910:	9e 8b       	std	Y+22, r25	; 0x16
    3912:	af 8b       	std	Y+23, r26	; 0x17
    3914:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3916:	6d 89       	ldd	r22, Y+21	; 0x15
    3918:	7e 89       	ldd	r23, Y+22	; 0x16
    391a:	8f 89       	ldd	r24, Y+23	; 0x17
    391c:	98 8d       	ldd	r25, Y+24	; 0x18
    391e:	20 e0       	ldi	r18, 0x00	; 0
    3920:	30 e0       	ldi	r19, 0x00	; 0
    3922:	40 e8       	ldi	r20, 0x80	; 128
    3924:	5f e3       	ldi	r21, 0x3F	; 63
    3926:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    392a:	88 23       	and	r24, r24
    392c:	2c f4       	brge	.+10     	; 0x3938 <SW_u8GetState+0xb2>
		__ticks = 1;
    392e:	81 e0       	ldi	r24, 0x01	; 1
    3930:	90 e0       	ldi	r25, 0x00	; 0
    3932:	9c 8b       	std	Y+20, r25	; 0x14
    3934:	8b 8b       	std	Y+19, r24	; 0x13
    3936:	3f c0       	rjmp	.+126    	; 0x39b6 <SW_u8GetState+0x130>
	else if (__tmp > 65535)
    3938:	6d 89       	ldd	r22, Y+21	; 0x15
    393a:	7e 89       	ldd	r23, Y+22	; 0x16
    393c:	8f 89       	ldd	r24, Y+23	; 0x17
    393e:	98 8d       	ldd	r25, Y+24	; 0x18
    3940:	20 e0       	ldi	r18, 0x00	; 0
    3942:	3f ef       	ldi	r19, 0xFF	; 255
    3944:	4f e7       	ldi	r20, 0x7F	; 127
    3946:	57 e4       	ldi	r21, 0x47	; 71
    3948:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    394c:	18 16       	cp	r1, r24
    394e:	4c f5       	brge	.+82     	; 0x39a2 <SW_u8GetState+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3950:	69 8d       	ldd	r22, Y+25	; 0x19
    3952:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3954:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3956:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3958:	20 e0       	ldi	r18, 0x00	; 0
    395a:	30 e0       	ldi	r19, 0x00	; 0
    395c:	40 e2       	ldi	r20, 0x20	; 32
    395e:	51 e4       	ldi	r21, 0x41	; 65
    3960:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3964:	dc 01       	movw	r26, r24
    3966:	cb 01       	movw	r24, r22
    3968:	bc 01       	movw	r22, r24
    396a:	cd 01       	movw	r24, r26
    396c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3970:	dc 01       	movw	r26, r24
    3972:	cb 01       	movw	r24, r22
    3974:	9c 8b       	std	Y+20, r25	; 0x14
    3976:	8b 8b       	std	Y+19, r24	; 0x13
    3978:	0f c0       	rjmp	.+30     	; 0x3998 <SW_u8GetState+0x112>
    397a:	88 ec       	ldi	r24, 0xC8	; 200
    397c:	90 e0       	ldi	r25, 0x00	; 0
    397e:	9a 8b       	std	Y+18, r25	; 0x12
    3980:	89 8b       	std	Y+17, r24	; 0x11
    3982:	89 89       	ldd	r24, Y+17	; 0x11
    3984:	9a 89       	ldd	r25, Y+18	; 0x12
    3986:	01 97       	sbiw	r24, 0x01	; 1
    3988:	f1 f7       	brne	.-4      	; 0x3986 <SW_u8GetState+0x100>
    398a:	9a 8b       	std	Y+18, r25	; 0x12
    398c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    398e:	8b 89       	ldd	r24, Y+19	; 0x13
    3990:	9c 89       	ldd	r25, Y+20	; 0x14
    3992:	01 97       	sbiw	r24, 0x01	; 1
    3994:	9c 8b       	std	Y+20, r25	; 0x14
    3996:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3998:	8b 89       	ldd	r24, Y+19	; 0x13
    399a:	9c 89       	ldd	r25, Y+20	; 0x14
    399c:	00 97       	sbiw	r24, 0x00	; 0
    399e:	69 f7       	brne	.-38     	; 0x397a <SW_u8GetState+0xf4>
    39a0:	14 c0       	rjmp	.+40     	; 0x39ca <SW_u8GetState+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39a2:	6d 89       	ldd	r22, Y+21	; 0x15
    39a4:	7e 89       	ldd	r23, Y+22	; 0x16
    39a6:	8f 89       	ldd	r24, Y+23	; 0x17
    39a8:	98 8d       	ldd	r25, Y+24	; 0x18
    39aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ae:	dc 01       	movw	r26, r24
    39b0:	cb 01       	movw	r24, r22
    39b2:	9c 8b       	std	Y+20, r25	; 0x14
    39b4:	8b 8b       	std	Y+19, r24	; 0x13
    39b6:	8b 89       	ldd	r24, Y+19	; 0x13
    39b8:	9c 89       	ldd	r25, Y+20	; 0x14
    39ba:	98 8b       	std	Y+16, r25	; 0x10
    39bc:	8f 87       	std	Y+15, r24	; 0x0f
    39be:	8f 85       	ldd	r24, Y+15	; 0x0f
    39c0:	98 89       	ldd	r25, Y+16	; 0x10
    39c2:	01 97       	sbiw	r24, 0x01	; 1
    39c4:	f1 f7       	brne	.-4      	; 0x39c2 <SW_u8GetState+0x13c>
    39c6:	98 8b       	std	Y+16, r25	; 0x10
    39c8:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(150);
				DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    39ca:	ee 8d       	ldd	r30, Y+30	; 0x1e
    39cc:	ff 8d       	ldd	r31, Y+31	; 0x1f
    39ce:	80 81       	ld	r24, Z
    39d0:	ee 8d       	ldd	r30, Y+30	; 0x1e
    39d2:	ff 8d       	ldd	r31, Y+31	; 0x1f
    39d4:	91 81       	ldd	r25, Z+1	; 0x01
    39d6:	2c ea       	ldi	r18, 0xAC	; 172
    39d8:	31 e0       	ldi	r19, 0x01	; 1
    39da:	69 2f       	mov	r22, r25
    39dc:	a9 01       	movw	r20, r18
    39de:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8GetPinValue>
				if(Local_u8SwState == DIO_PIN_LOW )
    39e2:	80 91 ac 01 	lds	r24, 0x01AC
    39e6:	88 23       	and	r24, r24
    39e8:	21 f4       	brne	.+8      	; 0x39f2 <SW_u8GetState+0x16c>
				{
					*Copy_u8State = SW_PRESSED;
    39ea:	e8 a1       	ldd	r30, Y+32	; 0x20
    39ec:	f9 a1       	ldd	r31, Y+33	; 0x21
    39ee:	10 82       	st	Z, r1
    39f0:	e7 c0       	rjmp	.+462    	; 0x3bc0 <SW_u8GetState+0x33a>
				}
				else
				{
					*Copy_u8State = SW_NOT_PRESSED;
    39f2:	e8 a1       	ldd	r30, Y+32	; 0x20
    39f4:	f9 a1       	ldd	r31, Y+33	; 0x21
    39f6:	81 e0       	ldi	r24, 0x01	; 1
    39f8:	80 83       	st	Z, r24
    39fa:	e2 c0       	rjmp	.+452    	; 0x3bc0 <SW_u8GetState+0x33a>
				}
			}
		}
		else if(Copy_SW->SelfLockType == SW_NOT_SELF_LOCK)
    39fc:	ee 8d       	ldd	r30, Y+30	; 0x1e
    39fe:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3a00:	83 81       	ldd	r24, Z+3	; 0x03
    3a02:	88 23       	and	r24, r24
    3a04:	c9 f4       	brne	.+50     	; 0x3a38 <SW_u8GetState+0x1b2>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,Copy_u8State);
    3a06:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3a08:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3a0a:	80 81       	ld	r24, Z
    3a0c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3a0e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3a10:	91 81       	ldd	r25, Z+1	; 0x01
    3a12:	28 a1       	ldd	r18, Y+32	; 0x20
    3a14:	39 a1       	ldd	r19, Y+33	; 0x21
    3a16:	69 2f       	mov	r22, r25
    3a18:	a9 01       	movw	r20, r18
    3a1a:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8GetPinValue>
			if (Local_u8SwState == DIO_PIN_LOW)
    3a1e:	80 91 ac 01 	lds	r24, 0x01AC
    3a22:	88 23       	and	r24, r24
    3a24:	21 f4       	brne	.+8      	; 0x3a2e <SW_u8GetState+0x1a8>
				*Copy_u8State = SW_PRESSED;
    3a26:	e8 a1       	ldd	r30, Y+32	; 0x20
    3a28:	f9 a1       	ldd	r31, Y+33	; 0x21
    3a2a:	10 82       	st	Z, r1
    3a2c:	c9 c0       	rjmp	.+402    	; 0x3bc0 <SW_u8GetState+0x33a>
			else
				*Copy_u8State = SW_NOT_PRESSED;
    3a2e:	e8 a1       	ldd	r30, Y+32	; 0x20
    3a30:	f9 a1       	ldd	r31, Y+33	; 0x21
    3a32:	81 e0       	ldi	r24, 0x01	; 1
    3a34:	80 83       	st	Z, r24
    3a36:	c4 c0       	rjmp	.+392    	; 0x3bc0 <SW_u8GetState+0x33a>
		}
		else
			Local_u8ErrorState = NOTOK;
    3a38:	81 e0       	ldi	r24, 0x01	; 1
    3a3a:	8d 8f       	std	Y+29, r24	; 0x1d
    3a3c:	c1 c0       	rjmp	.+386    	; 0x3bc0 <SW_u8GetState+0x33a>
	}
	else if(Copy_SW->Pulltype == SW_PULL_DOWN)
    3a3e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3a40:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3a42:	82 81       	ldd	r24, Z+2	; 0x02
    3a44:	81 30       	cpi	r24, 0x01	; 1
    3a46:	09 f0       	breq	.+2      	; 0x3a4a <SW_u8GetState+0x1c4>
    3a48:	b9 c0       	rjmp	.+370    	; 0x3bbc <SW_u8GetState+0x336>
	{

		if(Copy_SW->SelfLockType == SW_SELF_LOCK)
    3a4a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3a4c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3a4e:	83 81       	ldd	r24, Z+3	; 0x03
    3a50:	81 30       	cpi	r24, 0x01	; 1
    3a52:	09 f0       	breq	.+2      	; 0x3a56 <SW_u8GetState+0x1d0>
    3a54:	97 c0       	rjmp	.+302    	; 0x3b84 <SW_u8GetState+0x2fe>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    3a56:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3a58:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3a5a:	80 81       	ld	r24, Z
    3a5c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3a5e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3a60:	91 81       	ldd	r25, Z+1	; 0x01
    3a62:	2c ea       	ldi	r18, 0xAC	; 172
    3a64:	31 e0       	ldi	r19, 0x01	; 1
    3a66:	69 2f       	mov	r22, r25
    3a68:	a9 01       	movw	r20, r18
    3a6a:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8GetPinValue>
			if(Local_u8SwState == DIO_PIN_HIGH)
    3a6e:	80 91 ac 01 	lds	r24, 0x01AC
    3a72:	81 30       	cpi	r24, 0x01	; 1
    3a74:	09 f0       	breq	.+2      	; 0x3a78 <SW_u8GetState+0x1f2>
    3a76:	a4 c0       	rjmp	.+328    	; 0x3bc0 <SW_u8GetState+0x33a>
    3a78:	80 e0       	ldi	r24, 0x00	; 0
    3a7a:	90 e0       	ldi	r25, 0x00	; 0
    3a7c:	a6 e1       	ldi	r26, 0x16	; 22
    3a7e:	b3 e4       	ldi	r27, 0x43	; 67
    3a80:	8b 87       	std	Y+11, r24	; 0x0b
    3a82:	9c 87       	std	Y+12, r25	; 0x0c
    3a84:	ad 87       	std	Y+13, r26	; 0x0d
    3a86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a88:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a90:	20 e0       	ldi	r18, 0x00	; 0
    3a92:	30 e0       	ldi	r19, 0x00	; 0
    3a94:	4a ef       	ldi	r20, 0xFA	; 250
    3a96:	54 e4       	ldi	r21, 0x44	; 68
    3a98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a9c:	dc 01       	movw	r26, r24
    3a9e:	cb 01       	movw	r24, r22
    3aa0:	8f 83       	std	Y+7, r24	; 0x07
    3aa2:	98 87       	std	Y+8, r25	; 0x08
    3aa4:	a9 87       	std	Y+9, r26	; 0x09
    3aa6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3aa8:	6f 81       	ldd	r22, Y+7	; 0x07
    3aaa:	78 85       	ldd	r23, Y+8	; 0x08
    3aac:	89 85       	ldd	r24, Y+9	; 0x09
    3aae:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ab0:	20 e0       	ldi	r18, 0x00	; 0
    3ab2:	30 e0       	ldi	r19, 0x00	; 0
    3ab4:	40 e8       	ldi	r20, 0x80	; 128
    3ab6:	5f e3       	ldi	r21, 0x3F	; 63
    3ab8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3abc:	88 23       	and	r24, r24
    3abe:	2c f4       	brge	.+10     	; 0x3aca <SW_u8GetState+0x244>
		__ticks = 1;
    3ac0:	81 e0       	ldi	r24, 0x01	; 1
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
    3ac4:	9e 83       	std	Y+6, r25	; 0x06
    3ac6:	8d 83       	std	Y+5, r24	; 0x05
    3ac8:	3f c0       	rjmp	.+126    	; 0x3b48 <SW_u8GetState+0x2c2>
	else if (__tmp > 65535)
    3aca:	6f 81       	ldd	r22, Y+7	; 0x07
    3acc:	78 85       	ldd	r23, Y+8	; 0x08
    3ace:	89 85       	ldd	r24, Y+9	; 0x09
    3ad0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ad2:	20 e0       	ldi	r18, 0x00	; 0
    3ad4:	3f ef       	ldi	r19, 0xFF	; 255
    3ad6:	4f e7       	ldi	r20, 0x7F	; 127
    3ad8:	57 e4       	ldi	r21, 0x47	; 71
    3ada:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ade:	18 16       	cp	r1, r24
    3ae0:	4c f5       	brge	.+82     	; 0x3b34 <SW_u8GetState+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ae2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ae4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ae6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ae8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3aea:	20 e0       	ldi	r18, 0x00	; 0
    3aec:	30 e0       	ldi	r19, 0x00	; 0
    3aee:	40 e2       	ldi	r20, 0x20	; 32
    3af0:	51 e4       	ldi	r21, 0x41	; 65
    3af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3af6:	dc 01       	movw	r26, r24
    3af8:	cb 01       	movw	r24, r22
    3afa:	bc 01       	movw	r22, r24
    3afc:	cd 01       	movw	r24, r26
    3afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b02:	dc 01       	movw	r26, r24
    3b04:	cb 01       	movw	r24, r22
    3b06:	9e 83       	std	Y+6, r25	; 0x06
    3b08:	8d 83       	std	Y+5, r24	; 0x05
    3b0a:	0f c0       	rjmp	.+30     	; 0x3b2a <SW_u8GetState+0x2a4>
    3b0c:	88 ec       	ldi	r24, 0xC8	; 200
    3b0e:	90 e0       	ldi	r25, 0x00	; 0
    3b10:	9c 83       	std	Y+4, r25	; 0x04
    3b12:	8b 83       	std	Y+3, r24	; 0x03
    3b14:	8b 81       	ldd	r24, Y+3	; 0x03
    3b16:	9c 81       	ldd	r25, Y+4	; 0x04
    3b18:	01 97       	sbiw	r24, 0x01	; 1
    3b1a:	f1 f7       	brne	.-4      	; 0x3b18 <SW_u8GetState+0x292>
    3b1c:	9c 83       	std	Y+4, r25	; 0x04
    3b1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b20:	8d 81       	ldd	r24, Y+5	; 0x05
    3b22:	9e 81       	ldd	r25, Y+6	; 0x06
    3b24:	01 97       	sbiw	r24, 0x01	; 1
    3b26:	9e 83       	std	Y+6, r25	; 0x06
    3b28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b2a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b2c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b2e:	00 97       	sbiw	r24, 0x00	; 0
    3b30:	69 f7       	brne	.-38     	; 0x3b0c <SW_u8GetState+0x286>
    3b32:	14 c0       	rjmp	.+40     	; 0x3b5c <SW_u8GetState+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b34:	6f 81       	ldd	r22, Y+7	; 0x07
    3b36:	78 85       	ldd	r23, Y+8	; 0x08
    3b38:	89 85       	ldd	r24, Y+9	; 0x09
    3b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b40:	dc 01       	movw	r26, r24
    3b42:	cb 01       	movw	r24, r22
    3b44:	9e 83       	std	Y+6, r25	; 0x06
    3b46:	8d 83       	std	Y+5, r24	; 0x05
    3b48:	8d 81       	ldd	r24, Y+5	; 0x05
    3b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b4c:	9a 83       	std	Y+2, r25	; 0x02
    3b4e:	89 83       	std	Y+1, r24	; 0x01
    3b50:	89 81       	ldd	r24, Y+1	; 0x01
    3b52:	9a 81       	ldd	r25, Y+2	; 0x02
    3b54:	01 97       	sbiw	r24, 0x01	; 1
    3b56:	f1 f7       	brne	.-4      	; 0x3b54 <SW_u8GetState+0x2ce>
    3b58:	9a 83       	std	Y+2, r25	; 0x02
    3b5a:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(150);
				DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    3b5c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3b5e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3b60:	80 81       	ld	r24, Z
    3b62:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3b64:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3b66:	91 81       	ldd	r25, Z+1	; 0x01
    3b68:	2c ea       	ldi	r18, 0xAC	; 172
    3b6a:	31 e0       	ldi	r19, 0x01	; 1
    3b6c:	69 2f       	mov	r22, r25
    3b6e:	a9 01       	movw	r20, r18
    3b70:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8GetPinValue>
				if(Local_u8SwState == DIO_PIN_HIGH )
    3b74:	80 91 ac 01 	lds	r24, 0x01AC
    3b78:	81 30       	cpi	r24, 0x01	; 1
    3b7a:	11 f5       	brne	.+68     	; 0x3bc0 <SW_u8GetState+0x33a>
				{
					*Copy_u8State = SW_PRESSED;
    3b7c:	e8 a1       	ldd	r30, Y+32	; 0x20
    3b7e:	f9 a1       	ldd	r31, Y+33	; 0x21
    3b80:	10 82       	st	Z, r1
    3b82:	1e c0       	rjmp	.+60     	; 0x3bc0 <SW_u8GetState+0x33a>
				}
			}
		}
		else if(Copy_SW->SelfLockType == SW_NOT_SELF_LOCK)
    3b84:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3b86:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3b88:	83 81       	ldd	r24, Z+3	; 0x03
    3b8a:	88 23       	and	r24, r24
    3b8c:	a1 f4       	brne	.+40     	; 0x3bb6 <SW_u8GetState+0x330>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,Copy_u8State);
    3b8e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3b90:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3b92:	80 81       	ld	r24, Z
    3b94:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3b96:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3b98:	91 81       	ldd	r25, Z+1	; 0x01
    3b9a:	28 a1       	ldd	r18, Y+32	; 0x20
    3b9c:	39 a1       	ldd	r19, Y+33	; 0x21
    3b9e:	69 2f       	mov	r22, r25
    3ba0:	a9 01       	movw	r20, r18
    3ba2:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8GetPinValue>
			if (Local_u8SwState == DIO_PIN_HIGH)
    3ba6:	80 91 ac 01 	lds	r24, 0x01AC
    3baa:	81 30       	cpi	r24, 0x01	; 1
    3bac:	49 f4       	brne	.+18     	; 0x3bc0 <SW_u8GetState+0x33a>
				*Copy_u8State = SW_PRESSED;
    3bae:	e8 a1       	ldd	r30, Y+32	; 0x20
    3bb0:	f9 a1       	ldd	r31, Y+33	; 0x21
    3bb2:	10 82       	st	Z, r1
    3bb4:	05 c0       	rjmp	.+10     	; 0x3bc0 <SW_u8GetState+0x33a>
		}
		else
			Local_u8ErrorState = NOTOK;
    3bb6:	81 e0       	ldi	r24, 0x01	; 1
    3bb8:	8d 8f       	std	Y+29, r24	; 0x1d
    3bba:	02 c0       	rjmp	.+4      	; 0x3bc0 <SW_u8GetState+0x33a>
	}
	else
		Local_u8ErrorState = NOTOK;
    3bbc:	81 e0       	ldi	r24, 0x01	; 1
    3bbe:	8d 8f       	std	Y+29, r24	; 0x1d

	return Local_u8ErrorState;
    3bc0:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    3bc2:	a1 96       	adiw	r28, 0x21	; 33
    3bc4:	0f b6       	in	r0, 0x3f	; 63
    3bc6:	f8 94       	cli
    3bc8:	de bf       	out	0x3e, r29	; 62
    3bca:	0f be       	out	0x3f, r0	; 63
    3bcc:	cd bf       	out	0x3d, r28	; 61
    3bce:	cf 91       	pop	r28
    3bd0:	df 91       	pop	r29
    3bd2:	08 95       	ret

00003bd4 <SW_u8GetState2>:
 * 			Copy_SW     : Full with Port,Pin,SelfType,switch function
 * 			Copy_u8State: return State of switch as (0) Pressed , (1) Not pressed
 * use for: Get Switch by Function Call Back i.e (switch function )
 *  */
u8 SW_u8GetState2(SW_t* Copy_SW,u8 *Copy_u8State)
{
    3bd4:	df 93       	push	r29
    3bd6:	cf 93       	push	r28
    3bd8:	00 d0       	rcall	.+0      	; 0x3bda <SW_u8GetState2+0x6>
    3bda:	00 d0       	rcall	.+0      	; 0x3bdc <SW_u8GetState2+0x8>
    3bdc:	0f 92       	push	r0
    3bde:	cd b7       	in	r28, 0x3d	; 61
    3be0:	de b7       	in	r29, 0x3e	; 62
    3be2:	9b 83       	std	Y+3, r25	; 0x03
    3be4:	8a 83       	std	Y+2, r24	; 0x02
    3be6:	7d 83       	std	Y+5, r23	; 0x05
    3be8:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK;
    3bea:	19 82       	std	Y+1, r1	; 0x01
	static u8 pressed_conf_level = 0;
	static u8 released_conf_level = 0;
	static u8 pressed = 0;
	*Copy_u8State = SW_NOT_PRESSED;
    3bec:	ec 81       	ldd	r30, Y+4	; 0x04
    3bee:	fd 81       	ldd	r31, Y+5	; 0x05
    3bf0:	81 e0       	ldi	r24, 0x01	; 1
    3bf2:	80 83       	st	Z, r24
	static u8 Local_u8SwState;
	if(Copy_SW->Pulltype == SW_PULL_UP)
    3bf4:	ea 81       	ldd	r30, Y+2	; 0x02
    3bf6:	fb 81       	ldd	r31, Y+3	; 0x03
    3bf8:	82 81       	ldd	r24, Z+2	; 0x02
    3bfa:	88 23       	and	r24, r24
    3bfc:	09 f0       	breq	.+2      	; 0x3c00 <SW_u8GetState2+0x2c>
    3bfe:	76 c0       	rjmp	.+236    	; 0x3cec <SW_u8GetState2+0x118>
	{
		pressed = 0;
    3c00:	10 92 ae 01 	sts	0x01AE, r1
		if(Copy_SW->SelfLockType == SW_SELF_LOCK)
    3c04:	ea 81       	ldd	r30, Y+2	; 0x02
    3c06:	fb 81       	ldd	r31, Y+3	; 0x03
    3c08:	83 81       	ldd	r24, Z+3	; 0x03
    3c0a:	81 30       	cpi	r24, 0x01	; 1
    3c0c:	09 f0       	breq	.+2      	; 0x3c10 <SW_u8GetState2+0x3c>
    3c0e:	4d c0       	rjmp	.+154    	; 0x3caa <SW_u8GetState2+0xd6>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    3c10:	ea 81       	ldd	r30, Y+2	; 0x02
    3c12:	fb 81       	ldd	r31, Y+3	; 0x03
    3c14:	80 81       	ld	r24, Z
    3c16:	ea 81       	ldd	r30, Y+2	; 0x02
    3c18:	fb 81       	ldd	r31, Y+3	; 0x03
    3c1a:	91 81       	ldd	r25, Z+1	; 0x01
    3c1c:	2d ea       	ldi	r18, 0xAD	; 173
    3c1e:	31 e0       	ldi	r19, 0x01	; 1
    3c20:	69 2f       	mov	r22, r25
    3c22:	a9 01       	movw	r20, r18
    3c24:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8GetPinValue>
			if(Local_u8SwState == DIO_PIN_LOW)
    3c28:	80 91 ad 01 	lds	r24, 0x01AD
    3c2c:	88 23       	and	r24, r24
    3c2e:	09 f0       	breq	.+2      	; 0x3c32 <SW_u8GetState2+0x5e>
    3c30:	c4 c0       	rjmp	.+392    	; 0x3dba <SW_u8GetState2+0x1e6>
			{
				DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    3c32:	ea 81       	ldd	r30, Y+2	; 0x02
    3c34:	fb 81       	ldd	r31, Y+3	; 0x03
    3c36:	80 81       	ld	r24, Z
    3c38:	ea 81       	ldd	r30, Y+2	; 0x02
    3c3a:	fb 81       	ldd	r31, Y+3	; 0x03
    3c3c:	91 81       	ldd	r25, Z+1	; 0x01
    3c3e:	2d ea       	ldi	r18, 0xAD	; 173
    3c40:	31 e0       	ldi	r19, 0x01	; 1
    3c42:	69 2f       	mov	r22, r25
    3c44:	a9 01       	movw	r20, r18
    3c46:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8GetPinValue>
				if(Local_u8SwState == DIO_PIN_LOW)
    3c4a:	80 91 ad 01 	lds	r24, 0x01AD
    3c4e:	88 23       	and	r24, r24
    3c50:	09 f0       	breq	.+2      	; 0x3c54 <SW_u8GetState2+0x80>
    3c52:	b3 c0       	rjmp	.+358    	; 0x3dba <SW_u8GetState2+0x1e6>
				{
					pressed_conf_level++;
    3c54:	80 91 b0 01 	lds	r24, 0x01B0
    3c58:	8f 5f       	subi	r24, 0xFF	; 255
    3c5a:	80 93 b0 01 	sts	0x01B0, r24
					if(pressed_conf_level>20)
    3c5e:	80 91 b0 01 	lds	r24, 0x01B0
    3c62:	85 31       	cpi	r24, 0x15	; 21
    3c64:	98 f0       	brcs	.+38     	; 0x3c8c <SW_u8GetState2+0xb8>
					{
						if(pressed==0)
    3c66:	80 91 ae 01 	lds	r24, 0x01AE
    3c6a:	88 23       	and	r24, r24
    3c6c:	61 f4       	brne	.+24     	; 0x3c86 <SW_u8GetState2+0xb2>
						{
							*Copy_u8State = SW_PRESSED;
    3c6e:	ec 81       	ldd	r30, Y+4	; 0x04
    3c70:	fd 81       	ldd	r31, Y+5	; 0x05
    3c72:	10 82       	st	Z, r1
							Copy_SW->Notification();
    3c74:	ea 81       	ldd	r30, Y+2	; 0x02
    3c76:	fb 81       	ldd	r31, Y+3	; 0x03
    3c78:	04 80       	ldd	r0, Z+4	; 0x04
    3c7a:	f5 81       	ldd	r31, Z+5	; 0x05
    3c7c:	e0 2d       	mov	r30, r0
    3c7e:	09 95       	icall
							pressed=1;
    3c80:	81 e0       	ldi	r24, 0x01	; 1
    3c82:	80 93 ae 01 	sts	0x01AE, r24
						}
						pressed_conf_level=0;
    3c86:	10 92 b0 01 	sts	0x01B0, r1
    3c8a:	97 c0       	rjmp	.+302    	; 0x3dba <SW_u8GetState2+0x1e6>
					}
					else
					{
						released_conf_level++;
    3c8c:	80 91 af 01 	lds	r24, 0x01AF
    3c90:	8f 5f       	subi	r24, 0xFF	; 255
    3c92:	80 93 af 01 	sts	0x01AF, r24
						if(released_conf_level>20)
    3c96:	80 91 af 01 	lds	r24, 0x01AF
    3c9a:	85 31       	cpi	r24, 0x15	; 21
    3c9c:	08 f4       	brcc	.+2      	; 0x3ca0 <SW_u8GetState2+0xcc>
    3c9e:	8d c0       	rjmp	.+282    	; 0x3dba <SW_u8GetState2+0x1e6>
						{
							pressed = 0;
    3ca0:	10 92 ae 01 	sts	0x01AE, r1
							released_conf_level = 0;
    3ca4:	10 92 af 01 	sts	0x01AF, r1
    3ca8:	88 c0       	rjmp	.+272    	; 0x3dba <SW_u8GetState2+0x1e6>
						}
					}
				}
			}
		}
		else if(Copy_SW->SelfLockType == SW_NOT_SELF_LOCK)
    3caa:	ea 81       	ldd	r30, Y+2	; 0x02
    3cac:	fb 81       	ldd	r31, Y+3	; 0x03
    3cae:	83 81       	ldd	r24, Z+3	; 0x03
    3cb0:	88 23       	and	r24, r24
    3cb2:	c9 f4       	brne	.+50     	; 0x3ce6 <SW_u8GetState2+0x112>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,Copy_u8State);
    3cb4:	ea 81       	ldd	r30, Y+2	; 0x02
    3cb6:	fb 81       	ldd	r31, Y+3	; 0x03
    3cb8:	80 81       	ld	r24, Z
    3cba:	ea 81       	ldd	r30, Y+2	; 0x02
    3cbc:	fb 81       	ldd	r31, Y+3	; 0x03
    3cbe:	91 81       	ldd	r25, Z+1	; 0x01
    3cc0:	2c 81       	ldd	r18, Y+4	; 0x04
    3cc2:	3d 81       	ldd	r19, Y+5	; 0x05
    3cc4:	69 2f       	mov	r22, r25
    3cc6:	a9 01       	movw	r20, r18
    3cc8:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8GetPinValue>
			if (Local_u8SwState == DIO_PIN_LOW)
    3ccc:	80 91 ad 01 	lds	r24, 0x01AD
    3cd0:	88 23       	and	r24, r24
    3cd2:	21 f4       	brne	.+8      	; 0x3cdc <SW_u8GetState2+0x108>
				*Copy_u8State = SW_PRESSED;
    3cd4:	ec 81       	ldd	r30, Y+4	; 0x04
    3cd6:	fd 81       	ldd	r31, Y+5	; 0x05
    3cd8:	10 82       	st	Z, r1
    3cda:	6f c0       	rjmp	.+222    	; 0x3dba <SW_u8GetState2+0x1e6>
			else
				*Copy_u8State = SW_NOT_PRESSED;
    3cdc:	ec 81       	ldd	r30, Y+4	; 0x04
    3cde:	fd 81       	ldd	r31, Y+5	; 0x05
    3ce0:	81 e0       	ldi	r24, 0x01	; 1
    3ce2:	80 83       	st	Z, r24
    3ce4:	6a c0       	rjmp	.+212    	; 0x3dba <SW_u8GetState2+0x1e6>
		}
		else
			Local_u8ErrorState = NOTOK;
    3ce6:	81 e0       	ldi	r24, 0x01	; 1
    3ce8:	89 83       	std	Y+1, r24	; 0x01
    3cea:	67 c0       	rjmp	.+206    	; 0x3dba <SW_u8GetState2+0x1e6>
	}
	else if(Copy_SW->Pulltype == SW_PULL_DOWN)
    3cec:	ea 81       	ldd	r30, Y+2	; 0x02
    3cee:	fb 81       	ldd	r31, Y+3	; 0x03
    3cf0:	82 81       	ldd	r24, Z+2	; 0x02
    3cf2:	81 30       	cpi	r24, 0x01	; 1
    3cf4:	09 f0       	breq	.+2      	; 0x3cf8 <SW_u8GetState2+0x124>
    3cf6:	5f c0       	rjmp	.+190    	; 0x3db6 <SW_u8GetState2+0x1e2>
	{
		pressed = 1;
    3cf8:	81 e0       	ldi	r24, 0x01	; 1
    3cfa:	80 93 ae 01 	sts	0x01AE, r24
		if(Copy_SW->SelfLockType == SW_SELF_LOCK)
    3cfe:	ea 81       	ldd	r30, Y+2	; 0x02
    3d00:	fb 81       	ldd	r31, Y+3	; 0x03
    3d02:	83 81       	ldd	r24, Z+3	; 0x03
    3d04:	81 30       	cpi	r24, 0x01	; 1
    3d06:	d9 f5       	brne	.+118    	; 0x3d7e <SW_u8GetState2+0x1aa>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    3d08:	ea 81       	ldd	r30, Y+2	; 0x02
    3d0a:	fb 81       	ldd	r31, Y+3	; 0x03
    3d0c:	80 81       	ld	r24, Z
    3d0e:	ea 81       	ldd	r30, Y+2	; 0x02
    3d10:	fb 81       	ldd	r31, Y+3	; 0x03
    3d12:	91 81       	ldd	r25, Z+1	; 0x01
    3d14:	2d ea       	ldi	r18, 0xAD	; 173
    3d16:	31 e0       	ldi	r19, 0x01	; 1
    3d18:	69 2f       	mov	r22, r25
    3d1a:	a9 01       	movw	r20, r18
    3d1c:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8GetPinValue>
			if(Local_u8SwState == DIO_PIN_HIGH)
    3d20:	80 91 ad 01 	lds	r24, 0x01AD
    3d24:	81 30       	cpi	r24, 0x01	; 1
    3d26:	09 f0       	breq	.+2      	; 0x3d2a <SW_u8GetState2+0x156>
    3d28:	48 c0       	rjmp	.+144    	; 0x3dba <SW_u8GetState2+0x1e6>
			{
				pressed_conf_level++;
    3d2a:	80 91 b0 01 	lds	r24, 0x01B0
    3d2e:	8f 5f       	subi	r24, 0xFF	; 255
    3d30:	80 93 b0 01 	sts	0x01B0, r24
				if(pressed_conf_level>20)
    3d34:	80 91 b0 01 	lds	r24, 0x01B0
    3d38:	85 31       	cpi	r24, 0x15	; 21
    3d3a:	90 f0       	brcs	.+36     	; 0x3d60 <SW_u8GetState2+0x18c>
				{
					if(pressed==1)
    3d3c:	80 91 ae 01 	lds	r24, 0x01AE
    3d40:	81 30       	cpi	r24, 0x01	; 1
    3d42:	59 f4       	brne	.+22     	; 0x3d5a <SW_u8GetState2+0x186>
					{
						*Copy_u8State = SW_PRESSED;
    3d44:	ec 81       	ldd	r30, Y+4	; 0x04
    3d46:	fd 81       	ldd	r31, Y+5	; 0x05
    3d48:	10 82       	st	Z, r1
						Copy_SW->Notification();
    3d4a:	ea 81       	ldd	r30, Y+2	; 0x02
    3d4c:	fb 81       	ldd	r31, Y+3	; 0x03
    3d4e:	04 80       	ldd	r0, Z+4	; 0x04
    3d50:	f5 81       	ldd	r31, Z+5	; 0x05
    3d52:	e0 2d       	mov	r30, r0
    3d54:	09 95       	icall
						pressed=0;
    3d56:	10 92 ae 01 	sts	0x01AE, r1
					}
					pressed_conf_level=0;
    3d5a:	10 92 b0 01 	sts	0x01B0, r1
    3d5e:	2d c0       	rjmp	.+90     	; 0x3dba <SW_u8GetState2+0x1e6>
				}
				else
				{
					released_conf_level++;
    3d60:	80 91 af 01 	lds	r24, 0x01AF
    3d64:	8f 5f       	subi	r24, 0xFF	; 255
    3d66:	80 93 af 01 	sts	0x01AF, r24
					if(released_conf_level>20)
    3d6a:	80 91 af 01 	lds	r24, 0x01AF
    3d6e:	85 31       	cpi	r24, 0x15	; 21
    3d70:	20 f1       	brcs	.+72     	; 0x3dba <SW_u8GetState2+0x1e6>
					{
						pressed = 1;
    3d72:	81 e0       	ldi	r24, 0x01	; 1
    3d74:	80 93 ae 01 	sts	0x01AE, r24
						released_conf_level = 0;
    3d78:	10 92 af 01 	sts	0x01AF, r1
    3d7c:	1e c0       	rjmp	.+60     	; 0x3dba <SW_u8GetState2+0x1e6>
					}
				}
			}
		}
		else if(Copy_SW->SelfLockType == SW_NOT_SELF_LOCK)
    3d7e:	ea 81       	ldd	r30, Y+2	; 0x02
    3d80:	fb 81       	ldd	r31, Y+3	; 0x03
    3d82:	83 81       	ldd	r24, Z+3	; 0x03
    3d84:	88 23       	and	r24, r24
    3d86:	a1 f4       	brne	.+40     	; 0x3db0 <SW_u8GetState2+0x1dc>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,Copy_u8State);
    3d88:	ea 81       	ldd	r30, Y+2	; 0x02
    3d8a:	fb 81       	ldd	r31, Y+3	; 0x03
    3d8c:	80 81       	ld	r24, Z
    3d8e:	ea 81       	ldd	r30, Y+2	; 0x02
    3d90:	fb 81       	ldd	r31, Y+3	; 0x03
    3d92:	91 81       	ldd	r25, Z+1	; 0x01
    3d94:	2c 81       	ldd	r18, Y+4	; 0x04
    3d96:	3d 81       	ldd	r19, Y+5	; 0x05
    3d98:	69 2f       	mov	r22, r25
    3d9a:	a9 01       	movw	r20, r18
    3d9c:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <DIO_u8GetPinValue>
			if (Local_u8SwState == DIO_PIN_HIGH)
    3da0:	80 91 ad 01 	lds	r24, 0x01AD
    3da4:	81 30       	cpi	r24, 0x01	; 1
    3da6:	49 f4       	brne	.+18     	; 0x3dba <SW_u8GetState2+0x1e6>
				*Copy_u8State = SW_PRESSED;
    3da8:	ec 81       	ldd	r30, Y+4	; 0x04
    3daa:	fd 81       	ldd	r31, Y+5	; 0x05
    3dac:	10 82       	st	Z, r1
    3dae:	05 c0       	rjmp	.+10     	; 0x3dba <SW_u8GetState2+0x1e6>
		}
		else
			Local_u8ErrorState = NOTOK;
    3db0:	81 e0       	ldi	r24, 0x01	; 1
    3db2:	89 83       	std	Y+1, r24	; 0x01
    3db4:	02 c0       	rjmp	.+4      	; 0x3dba <SW_u8GetState2+0x1e6>
	}
	else
		Local_u8ErrorState = NOTOK;
    3db6:	81 e0       	ldi	r24, 0x01	; 1
    3db8:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    3dba:	89 81       	ldd	r24, Y+1	; 0x01
}
    3dbc:	0f 90       	pop	r0
    3dbe:	0f 90       	pop	r0
    3dc0:	0f 90       	pop	r0
    3dc2:	0f 90       	pop	r0
    3dc4:	0f 90       	pop	r0
    3dc6:	cf 91       	pop	r28
    3dc8:	df 91       	pop	r29
    3dca:	08 95       	ret

00003dcc <main>:
s8 hrs=0,mins=0,secs=0;
u8 curser[8]= Pattern;
void OutSwitch();

void main()
{
    3dcc:	df 93       	push	r29
    3dce:	cf 93       	push	r28
    3dd0:	cd b7       	in	r28, 0x3d	; 61
    3dd2:	de b7       	in	r29, 0x3e	; 62
    3dd4:	ac 97       	sbiw	r28, 0x2c	; 44
    3dd6:	0f b6       	in	r0, 0x3f	; 63
    3dd8:	f8 94       	cli
    3dda:	de bf       	out	0x3e, r29	; 62
    3ddc:	0f be       	out	0x3f, r0	; 63
    3dde:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
    3de0:	0e 94 35 14 	call	0x286a	; 0x286a <PORT_voidInit>
	CLCD_voidInit();
    3de4:	0e 94 9a 0a 	call	0x1534	; 0x1534 <CLCD_voidInit>
	GIE_voidEnable();
    3de8:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <GIE_voidEnable>
	EXTI_voidInt2Init();
    3dec:	0e 94 0e 12 	call	0x241c	; 0x241c <EXTI_voidInt2Init>
	EXTI_u8Int2CallBack(OutSwitch);
    3df0:	8c ea       	ldi	r24, 0xAC	; 172
    3df2:	91 e2       	ldi	r25, 0x21	; 33
    3df4:	0e 94 29 12 	call	0x2452	; 0x2452 <EXTI_u8Int2CallBack>

	u8 buzzer = 0;
    3df8:	1e 8e       	std	Y+30, r1	; 0x1e
	u8 Key;
	LED_t led1 = {
		DIO_PORTB,
		DIO_PIN0,
		LED_SOUCE
	};
    3dfa:	9e 01       	movw	r18, r28
    3dfc:	21 5e       	subi	r18, 0xE1	; 225
    3dfe:	3f 4f       	sbci	r19, 0xFF	; 255
    3e00:	39 a7       	std	Y+41, r19	; 0x29
    3e02:	28 a7       	std	Y+40, r18	; 0x28
    3e04:	80 ea       	ldi	r24, 0xA0	; 160
    3e06:	91 e0       	ldi	r25, 0x01	; 1
    3e08:	9b a7       	std	Y+43, r25	; 0x2b
    3e0a:	8a a7       	std	Y+42, r24	; 0x2a
    3e0c:	93 e0       	ldi	r25, 0x03	; 3
    3e0e:	9c a7       	std	Y+44, r25	; 0x2c
    3e10:	ea a5       	ldd	r30, Y+42	; 0x2a
    3e12:	fb a5       	ldd	r31, Y+43	; 0x2b
    3e14:	00 80       	ld	r0, Z
    3e16:	2a a5       	ldd	r18, Y+42	; 0x2a
    3e18:	3b a5       	ldd	r19, Y+43	; 0x2b
    3e1a:	2f 5f       	subi	r18, 0xFF	; 255
    3e1c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e1e:	3b a7       	std	Y+43, r19	; 0x2b
    3e20:	2a a7       	std	Y+42, r18	; 0x2a
    3e22:	e8 a5       	ldd	r30, Y+40	; 0x28
    3e24:	f9 a5       	ldd	r31, Y+41	; 0x29
    3e26:	00 82       	st	Z, r0
    3e28:	28 a5       	ldd	r18, Y+40	; 0x28
    3e2a:	39 a5       	ldd	r19, Y+41	; 0x29
    3e2c:	2f 5f       	subi	r18, 0xFF	; 255
    3e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    3e30:	39 a7       	std	Y+41, r19	; 0x29
    3e32:	28 a7       	std	Y+40, r18	; 0x28
    3e34:	3c a5       	ldd	r19, Y+44	; 0x2c
    3e36:	31 50       	subi	r19, 0x01	; 1
    3e38:	3c a7       	std	Y+44, r19	; 0x2c
    3e3a:	8c a5       	ldd	r24, Y+44	; 0x2c
    3e3c:	88 23       	and	r24, r24
    3e3e:	41 f7       	brne	.-48     	; 0x3e10 <main+0x44>

	CLCD_voidWriteSpecialCharacter(curser,0,1,1);
    3e40:	88 e9       	ldi	r24, 0x98	; 152
    3e42:	91 e0       	ldi	r25, 0x01	; 1
    3e44:	60 e0       	ldi	r22, 0x00	; 0
    3e46:	41 e0       	ldi	r20, 0x01	; 1
    3e48:	21 e0       	ldi	r18, 0x01	; 1
    3e4a:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <CLCD_voidWriteSpecialCharacter>
	while(1)
	{
		StopWatchDisp(hrs,mins,secs);
    3e4e:	80 91 b3 01 	lds	r24, 0x01B3
    3e52:	90 91 b4 01 	lds	r25, 0x01B4
    3e56:	20 91 b5 01 	lds	r18, 0x01B5
    3e5a:	69 2f       	mov	r22, r25
    3e5c:	42 2f       	mov	r20, r18
    3e5e:	0e 94 d7 22 	call	0x45ae	; 0x45ae <StopWatchDisp>
		do{
			Key = KPD_u8Key_pressed();
    3e62:	0e 94 17 13 	call	0x262e	; 0x262e <KPD_u8Key_pressed>
    3e66:	8d 8f       	std	Y+29, r24	; 0x1d
		}while(Key == KPD_NO_PRESSED_KEY);
    3e68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e6a:	8f 3f       	cpi	r24, 0xFF	; 255
    3e6c:	d1 f3       	breq	.-12     	; 0x3e62 <main+0x96>
		switch(Key)
    3e6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e70:	e8 2f       	mov	r30, r24
    3e72:	f0 e0       	ldi	r31, 0x00	; 0
    3e74:	ff a3       	std	Y+39, r31	; 0x27
    3e76:	ee a3       	std	Y+38, r30	; 0x26
    3e78:	2e a1       	ldd	r18, Y+38	; 0x26
    3e7a:	3f a1       	ldd	r19, Y+39	; 0x27
    3e7c:	2b 32       	cpi	r18, 0x2B	; 43
    3e7e:	31 05       	cpc	r19, r1
    3e80:	09 f4       	brne	.+2      	; 0x3e84 <main+0xb8>
    3e82:	7f c0       	rjmp	.+254    	; 0x3f82 <main+0x1b6>
    3e84:	8e a1       	ldd	r24, Y+38	; 0x26
    3e86:	9f a1       	ldd	r25, Y+39	; 0x27
    3e88:	8c 32       	cpi	r24, 0x2C	; 44
    3e8a:	91 05       	cpc	r25, r1
    3e8c:	8c f4       	brge	.+34     	; 0x3eb0 <main+0xe4>
    3e8e:	ee a1       	ldd	r30, Y+38	; 0x26
    3e90:	ff a1       	ldd	r31, Y+39	; 0x27
    3e92:	e2 30       	cpi	r30, 0x02	; 2
    3e94:	f1 05       	cpc	r31, r1
    3e96:	d9 f1       	breq	.+118    	; 0x3f0e <main+0x142>
    3e98:	2e a1       	ldd	r18, Y+38	; 0x26
    3e9a:	3f a1       	ldd	r19, Y+39	; 0x27
    3e9c:	23 30       	cpi	r18, 0x03	; 3
    3e9e:	31 05       	cpc	r19, r1
    3ea0:	09 f4       	brne	.+2      	; 0x3ea4 <main+0xd8>
    3ea2:	52 c0       	rjmp	.+164    	; 0x3f48 <main+0x17c>
    3ea4:	8e a1       	ldd	r24, Y+38	; 0x26
    3ea6:	9f a1       	ldd	r25, Y+39	; 0x27
    3ea8:	81 30       	cpi	r24, 0x01	; 1
    3eaa:	91 05       	cpc	r25, r1
    3eac:	a1 f0       	breq	.+40     	; 0x3ed6 <main+0x10a>
    3eae:	cf cf       	rjmp	.-98     	; 0x3e4e <main+0x82>
    3eb0:	ee a1       	ldd	r30, Y+38	; 0x26
    3eb2:	ff a1       	ldd	r31, Y+39	; 0x27
    3eb4:	ed 33       	cpi	r30, 0x3D	; 61
    3eb6:	f1 05       	cpc	r31, r1
    3eb8:	09 f4       	brne	.+2      	; 0x3ebc <main+0xf0>
    3eba:	df c0       	rjmp	.+446    	; 0x407a <main+0x2ae>
    3ebc:	2e a1       	ldd	r18, Y+38	; 0x26
    3ebe:	3f a1       	ldd	r19, Y+39	; 0x27
    3ec0:	23 34       	cpi	r18, 0x43	; 67
    3ec2:	31 05       	cpc	r19, r1
    3ec4:	09 f4       	brne	.+2      	; 0x3ec8 <main+0xfc>
    3ec6:	2b c2       	rjmp	.+1110   	; 0x431e <main+0x552>
    3ec8:	8e a1       	ldd	r24, Y+38	; 0x26
    3eca:	9f a1       	ldd	r25, Y+39	; 0x27
    3ecc:	8d 32       	cpi	r24, 0x2D	; 45
    3ece:	91 05       	cpc	r25, r1
    3ed0:	09 f4       	brne	.+2      	; 0x3ed4 <main+0x108>
    3ed2:	93 c0       	rjmp	.+294    	; 0x3ffa <main+0x22e>
    3ed4:	bc cf       	rjmp	.-136    	; 0x3e4e <main+0x82>
		{
		case 1:
			CLCD_voidGoToXY(1,7);
    3ed6:	81 e0       	ldi	r24, 0x01	; 1
    3ed8:	67 e0       	ldi	r22, 0x07	; 7
    3eda:	0e 94 b6 0c 	call	0x196c	; 0x196c <CLCD_voidGoToXY>
			CLCD_voidSendData(' ');
    3ede:	80 e2       	ldi	r24, 0x20	; 32
    3ee0:	0e 94 f5 08 	call	0x11ea	; 0x11ea <CLCD_voidSendData>
			CLCD_voidGoToXY(1,4);
    3ee4:	81 e0       	ldi	r24, 0x01	; 1
    3ee6:	64 e0       	ldi	r22, 0x04	; 4
    3ee8:	0e 94 b6 0c 	call	0x196c	; 0x196c <CLCD_voidGoToXY>
			CLCD_voidSendData(' ');
    3eec:	80 e2       	ldi	r24, 0x20	; 32
    3eee:	0e 94 f5 08 	call	0x11ea	; 0x11ea <CLCD_voidSendData>
			CLCD_voidWriteSpecialCharacter(curser,0,1,1);
    3ef2:	88 e9       	ldi	r24, 0x98	; 152
    3ef4:	91 e0       	ldi	r25, 0x01	; 1
    3ef6:	60 e0       	ldi	r22, 0x00	; 0
    3ef8:	41 e0       	ldi	r20, 0x01	; 1
    3efa:	21 e0       	ldi	r18, 0x01	; 1
    3efc:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <CLCD_voidWriteSpecialCharacter>
			CLCD_voidGoToXY(0,1);
    3f00:	80 e0       	ldi	r24, 0x00	; 0
    3f02:	61 e0       	ldi	r22, 0x01	; 1
    3f04:	0e 94 b6 0c 	call	0x196c	; 0x196c <CLCD_voidGoToXY>
			postion = 0;
    3f08:	10 92 b2 01 	sts	0x01B2, r1
    3f0c:	a0 cf       	rjmp	.-192    	; 0x3e4e <main+0x82>
			break;
		case 2:
			CLCD_voidGoToXY(1,1);
    3f0e:	81 e0       	ldi	r24, 0x01	; 1
    3f10:	61 e0       	ldi	r22, 0x01	; 1
    3f12:	0e 94 b6 0c 	call	0x196c	; 0x196c <CLCD_voidGoToXY>
			CLCD_voidSendData(' ');
    3f16:	80 e2       	ldi	r24, 0x20	; 32
    3f18:	0e 94 f5 08 	call	0x11ea	; 0x11ea <CLCD_voidSendData>
			CLCD_voidGoToXY(1,7);
    3f1c:	81 e0       	ldi	r24, 0x01	; 1
    3f1e:	67 e0       	ldi	r22, 0x07	; 7
    3f20:	0e 94 b6 0c 	call	0x196c	; 0x196c <CLCD_voidGoToXY>
			CLCD_voidSendData(' ');
    3f24:	80 e2       	ldi	r24, 0x20	; 32
    3f26:	0e 94 f5 08 	call	0x11ea	; 0x11ea <CLCD_voidSendData>
			CLCD_voidWriteSpecialCharacter(curser,0,1,4);
    3f2a:	88 e9       	ldi	r24, 0x98	; 152
    3f2c:	91 e0       	ldi	r25, 0x01	; 1
    3f2e:	60 e0       	ldi	r22, 0x00	; 0
    3f30:	41 e0       	ldi	r20, 0x01	; 1
    3f32:	24 e0       	ldi	r18, 0x04	; 4
    3f34:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <CLCD_voidWriteSpecialCharacter>
			CLCD_voidGoToXY(0,4);
    3f38:	80 e0       	ldi	r24, 0x00	; 0
    3f3a:	64 e0       	ldi	r22, 0x04	; 4
    3f3c:	0e 94 b6 0c 	call	0x196c	; 0x196c <CLCD_voidGoToXY>
			postion = 1;
    3f40:	81 e0       	ldi	r24, 0x01	; 1
    3f42:	80 93 b2 01 	sts	0x01B2, r24
    3f46:	83 cf       	rjmp	.-250    	; 0x3e4e <main+0x82>
			break;
		case 3:
			CLCD_voidGoToXY(1,1);
    3f48:	81 e0       	ldi	r24, 0x01	; 1
    3f4a:	61 e0       	ldi	r22, 0x01	; 1
    3f4c:	0e 94 b6 0c 	call	0x196c	; 0x196c <CLCD_voidGoToXY>
			CLCD_voidSendData(' ');
    3f50:	80 e2       	ldi	r24, 0x20	; 32
    3f52:	0e 94 f5 08 	call	0x11ea	; 0x11ea <CLCD_voidSendData>
			CLCD_voidGoToXY(1,4);
    3f56:	81 e0       	ldi	r24, 0x01	; 1
    3f58:	64 e0       	ldi	r22, 0x04	; 4
    3f5a:	0e 94 b6 0c 	call	0x196c	; 0x196c <CLCD_voidGoToXY>
			CLCD_voidSendData(' ');
    3f5e:	80 e2       	ldi	r24, 0x20	; 32
    3f60:	0e 94 f5 08 	call	0x11ea	; 0x11ea <CLCD_voidSendData>
			CLCD_voidWriteSpecialCharacter(curser,0,1,7);
    3f64:	88 e9       	ldi	r24, 0x98	; 152
    3f66:	91 e0       	ldi	r25, 0x01	; 1
    3f68:	60 e0       	ldi	r22, 0x00	; 0
    3f6a:	41 e0       	ldi	r20, 0x01	; 1
    3f6c:	27 e0       	ldi	r18, 0x07	; 7
    3f6e:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <CLCD_voidWriteSpecialCharacter>
			CLCD_voidGoToXY(0,6);
    3f72:	80 e0       	ldi	r24, 0x00	; 0
    3f74:	66 e0       	ldi	r22, 0x06	; 6
    3f76:	0e 94 b6 0c 	call	0x196c	; 0x196c <CLCD_voidGoToXY>
			postion = 2;
    3f7a:	82 e0       	ldi	r24, 0x02	; 2
    3f7c:	80 93 b2 01 	sts	0x01B2, r24
    3f80:	66 cf       	rjmp	.-308    	; 0x3e4e <main+0x82>
			break;
		case '+':
			switch(postion)
    3f82:	80 91 b2 01 	lds	r24, 0x01B2
    3f86:	e8 2f       	mov	r30, r24
    3f88:	f0 e0       	ldi	r31, 0x00	; 0
    3f8a:	fd a3       	std	Y+37, r31	; 0x25
    3f8c:	ec a3       	std	Y+36, r30	; 0x24
    3f8e:	2c a1       	ldd	r18, Y+36	; 0x24
    3f90:	3d a1       	ldd	r19, Y+37	; 0x25
    3f92:	21 30       	cpi	r18, 0x01	; 1
    3f94:	31 05       	cpc	r19, r1
    3f96:	b9 f0       	breq	.+46     	; 0x3fc6 <main+0x1fa>
    3f98:	8c a1       	ldd	r24, Y+36	; 0x24
    3f9a:	9d a1       	ldd	r25, Y+37	; 0x25
    3f9c:	82 30       	cpi	r24, 0x02	; 2
    3f9e:	91 05       	cpc	r25, r1
    3fa0:	f9 f0       	breq	.+62     	; 0x3fe0 <main+0x214>
    3fa2:	ec a1       	ldd	r30, Y+36	; 0x24
    3fa4:	fd a1       	ldd	r31, Y+37	; 0x25
    3fa6:	30 97       	sbiw	r30, 0x00	; 0
    3fa8:	09 f0       	breq	.+2      	; 0x3fac <main+0x1e0>
    3faa:	51 cf       	rjmp	.-350    	; 0x3e4e <main+0x82>
			{
			case 0:
				hrs++;
    3fac:	80 91 b3 01 	lds	r24, 0x01B3
    3fb0:	8f 5f       	subi	r24, 0xFF	; 255
    3fb2:	80 93 b3 01 	sts	0x01B3, r24
				if(hrs==24)
    3fb6:	80 91 b3 01 	lds	r24, 0x01B3
    3fba:	88 31       	cpi	r24, 0x18	; 24
    3fbc:	09 f0       	breq	.+2      	; 0x3fc0 <main+0x1f4>
    3fbe:	47 cf       	rjmp	.-370    	; 0x3e4e <main+0x82>
					hrs = 0;
    3fc0:	10 92 b3 01 	sts	0x01B3, r1
    3fc4:	44 cf       	rjmp	.-376    	; 0x3e4e <main+0x82>
				break;
			case 1:
				mins++;
    3fc6:	80 91 b4 01 	lds	r24, 0x01B4
    3fca:	8f 5f       	subi	r24, 0xFF	; 255
    3fcc:	80 93 b4 01 	sts	0x01B4, r24
				if(mins==60)
    3fd0:	80 91 b4 01 	lds	r24, 0x01B4
    3fd4:	8c 33       	cpi	r24, 0x3C	; 60
    3fd6:	09 f0       	breq	.+2      	; 0x3fda <main+0x20e>
    3fd8:	3a cf       	rjmp	.-396    	; 0x3e4e <main+0x82>
					mins = 0;
    3fda:	10 92 b4 01 	sts	0x01B4, r1
    3fde:	37 cf       	rjmp	.-402    	; 0x3e4e <main+0x82>
				break;
			case 2:
				secs++;
    3fe0:	80 91 b5 01 	lds	r24, 0x01B5
    3fe4:	8f 5f       	subi	r24, 0xFF	; 255
    3fe6:	80 93 b5 01 	sts	0x01B5, r24
				if(secs==60)
    3fea:	80 91 b5 01 	lds	r24, 0x01B5
    3fee:	8c 33       	cpi	r24, 0x3C	; 60
    3ff0:	09 f0       	breq	.+2      	; 0x3ff4 <main+0x228>
    3ff2:	2d cf       	rjmp	.-422    	; 0x3e4e <main+0x82>
					secs = 0;
    3ff4:	10 92 b5 01 	sts	0x01B5, r1
    3ff8:	2a cf       	rjmp	.-428    	; 0x3e4e <main+0x82>
				break;
			}
			break;
		case '-':
			switch(postion)
    3ffa:	80 91 b2 01 	lds	r24, 0x01B2
    3ffe:	28 2f       	mov	r18, r24
    4000:	30 e0       	ldi	r19, 0x00	; 0
    4002:	3b a3       	std	Y+35, r19	; 0x23
    4004:	2a a3       	std	Y+34, r18	; 0x22
    4006:	8a a1       	ldd	r24, Y+34	; 0x22
    4008:	9b a1       	ldd	r25, Y+35	; 0x23
    400a:	81 30       	cpi	r24, 0x01	; 1
    400c:	91 05       	cpc	r25, r1
    400e:	c9 f0       	breq	.+50     	; 0x4042 <main+0x276>
    4010:	ea a1       	ldd	r30, Y+34	; 0x22
    4012:	fb a1       	ldd	r31, Y+35	; 0x23
    4014:	e2 30       	cpi	r30, 0x02	; 2
    4016:	f1 05       	cpc	r31, r1
    4018:	11 f1       	breq	.+68     	; 0x405e <main+0x292>
    401a:	2a a1       	ldd	r18, Y+34	; 0x22
    401c:	3b a1       	ldd	r19, Y+35	; 0x23
    401e:	21 15       	cp	r18, r1
    4020:	31 05       	cpc	r19, r1
    4022:	09 f0       	breq	.+2      	; 0x4026 <main+0x25a>
    4024:	14 cf       	rjmp	.-472    	; 0x3e4e <main+0x82>
			{
			case 0:
				hrs--;
    4026:	80 91 b3 01 	lds	r24, 0x01B3
    402a:	81 50       	subi	r24, 0x01	; 1
    402c:	80 93 b3 01 	sts	0x01B3, r24
				if(hrs==-1)
    4030:	80 91 b3 01 	lds	r24, 0x01B3
    4034:	8f 3f       	cpi	r24, 0xFF	; 255
    4036:	09 f0       	breq	.+2      	; 0x403a <main+0x26e>
    4038:	0a cf       	rjmp	.-492    	; 0x3e4e <main+0x82>
					hrs = 23;
    403a:	87 e1       	ldi	r24, 0x17	; 23
    403c:	80 93 b3 01 	sts	0x01B3, r24
    4040:	06 cf       	rjmp	.-500    	; 0x3e4e <main+0x82>
				break;
			case 1:
				mins--;
    4042:	80 91 b4 01 	lds	r24, 0x01B4
    4046:	81 50       	subi	r24, 0x01	; 1
    4048:	80 93 b4 01 	sts	0x01B4, r24
				if(mins==-1)
    404c:	80 91 b4 01 	lds	r24, 0x01B4
    4050:	8f 3f       	cpi	r24, 0xFF	; 255
    4052:	09 f0       	breq	.+2      	; 0x4056 <main+0x28a>
    4054:	fc ce       	rjmp	.-520    	; 0x3e4e <main+0x82>
					mins = 59;
    4056:	8b e3       	ldi	r24, 0x3B	; 59
    4058:	80 93 b4 01 	sts	0x01B4, r24
    405c:	f8 ce       	rjmp	.-528    	; 0x3e4e <main+0x82>
				break;
			case 2:
				secs--;
    405e:	80 91 b5 01 	lds	r24, 0x01B5
    4062:	81 50       	subi	r24, 0x01	; 1
    4064:	80 93 b5 01 	sts	0x01B5, r24
				if(secs==-1)
    4068:	80 91 b5 01 	lds	r24, 0x01B5
    406c:	8f 3f       	cpi	r24, 0xFF	; 255
    406e:	09 f0       	breq	.+2      	; 0x4072 <main+0x2a6>
    4070:	ee ce       	rjmp	.-548    	; 0x3e4e <main+0x82>
					secs = 59;
    4072:	8b e3       	ldi	r24, 0x3B	; 59
    4074:	80 93 b5 01 	sts	0x01B5, r24
    4078:	ea ce       	rjmp	.-556    	; 0x3e4e <main+0x82>
				break;
			}
			break;
		case '=':
			CLCD_voidSendCommand(1);
    407a:	81 e0       	ldi	r24, 0x01	; 1
    407c:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidSendCommand>
			SecSeqance(hrs,mins,secs);
    4080:	80 91 b3 01 	lds	r24, 0x01B3
    4084:	90 91 b4 01 	lds	r25, 0x01B4
    4088:	20 91 b5 01 	lds	r18, 0x01B5
    408c:	69 2f       	mov	r22, r25
    408e:	42 2f       	mov	r20, r18
    4090:	0e 94 b6 21 	call	0x436c	; 0x436c <SecSeqance>
			if(OutFlag == 1){
    4094:	80 91 b1 01 	lds	r24, 0x01B1
    4098:	81 30       	cpi	r24, 0x01	; 1
    409a:	19 f4       	brne	.+6      	; 0x40a2 <main+0x2d6>
				OutFlag = 0;
    409c:	10 92 b1 01 	sts	0x01B1, r1
    40a0:	d6 ce       	rjmp	.-596    	; 0x3e4e <main+0x82>
				break ;
			}
			minSeqance(hrs,mins,secs);
    40a2:	80 91 b3 01 	lds	r24, 0x01B3
    40a6:	90 91 b4 01 	lds	r25, 0x01B4
    40aa:	20 91 b5 01 	lds	r18, 0x01B5
    40ae:	69 2f       	mov	r22, r25
    40b0:	42 2f       	mov	r20, r18
    40b2:	0e 94 68 22 	call	0x44d0	; 0x44d0 <minSeqance>
			if(OutFlag == 1){
    40b6:	80 91 b1 01 	lds	r24, 0x01B1
    40ba:	81 30       	cpi	r24, 0x01	; 1
    40bc:	19 f4       	brne	.+6      	; 0x40c4 <main+0x2f8>
				OutFlag = 0;
    40be:	10 92 b1 01 	sts	0x01B1, r1
    40c2:	c5 ce       	rjmp	.-630    	; 0x3e4e <main+0x82>
				break ;
			}
			hourSeqance(hrs,mins,secs);
    40c4:	80 91 b3 01 	lds	r24, 0x01B3
    40c8:	90 91 b4 01 	lds	r25, 0x01B4
    40cc:	20 91 b5 01 	lds	r18, 0x01B5
    40d0:	69 2f       	mov	r22, r25
    40d2:	42 2f       	mov	r20, r18
    40d4:	0e 94 a1 22 	call	0x4542	; 0x4542 <hourSeqance>
			if(OutFlag == 1){
    40d8:	80 91 b1 01 	lds	r24, 0x01B1
    40dc:	81 30       	cpi	r24, 0x01	; 1
    40de:	19 f4       	brne	.+6      	; 0x40e6 <main+0x31a>
				OutFlag = 0;
    40e0:	10 92 b1 01 	sts	0x01B1, r1
    40e4:	b4 ce       	rjmp	.-664    	; 0x3e4e <main+0x82>
				break ;
			}
			CLCD_voidGoToXY(1,0);
    40e6:	81 e0       	ldi	r24, 0x01	; 1
    40e8:	60 e0       	ldi	r22, 0x00	; 0
    40ea:	0e 94 b6 0c 	call	0x196c	; 0x196c <CLCD_voidGoToXY>
			CLCD_voidSendString("It's time!...");
    40ee:	80 e6       	ldi	r24, 0x60	; 96
    40f0:	90 e0       	ldi	r25, 0x00	; 0
    40f2:	0e 94 8d 0c 	call	0x191a	; 0x191a <CLCD_voidSendString>
			for(buzzer = 0;buzzer<3;buzzer++)
    40f6:	1e 8e       	std	Y+30, r1	; 0x1e
    40f8:	01 c1       	rjmp	.+514    	; 0x42fc <main+0x530>
			{
				DIO_u8SetPinValue(DIO_PORTB,DIO_PIN1,DIO_PIN_HIGH);
    40fa:	81 e0       	ldi	r24, 0x01	; 1
    40fc:	61 e0       	ldi	r22, 0x01	; 1
    40fe:	41 e0       	ldi	r20, 0x01	; 1
    4100:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8SetPinValue>
				LED_u8TurnOn(&led1);
    4104:	ce 01       	movw	r24, r28
    4106:	4f 96       	adiw	r24, 0x1f	; 31
    4108:	0e 94 8f 13 	call	0x271e	; 0x271e <LED_u8TurnOn>
    410c:	80 e0       	ldi	r24, 0x00	; 0
    410e:	90 e0       	ldi	r25, 0x00	; 0
    4110:	a6 e1       	ldi	r26, 0x16	; 22
    4112:	b4 e4       	ldi	r27, 0x44	; 68
    4114:	89 8f       	std	Y+25, r24	; 0x19
    4116:	9a 8f       	std	Y+26, r25	; 0x1a
    4118:	ab 8f       	std	Y+27, r26	; 0x1b
    411a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    411c:	69 8d       	ldd	r22, Y+25	; 0x19
    411e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4120:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4122:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4124:	20 e0       	ldi	r18, 0x00	; 0
    4126:	30 e0       	ldi	r19, 0x00	; 0
    4128:	4a ef       	ldi	r20, 0xFA	; 250
    412a:	54 e4       	ldi	r21, 0x44	; 68
    412c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4130:	dc 01       	movw	r26, r24
    4132:	cb 01       	movw	r24, r22
    4134:	8d 8b       	std	Y+21, r24	; 0x15
    4136:	9e 8b       	std	Y+22, r25	; 0x16
    4138:	af 8b       	std	Y+23, r26	; 0x17
    413a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    413c:	6d 89       	ldd	r22, Y+21	; 0x15
    413e:	7e 89       	ldd	r23, Y+22	; 0x16
    4140:	8f 89       	ldd	r24, Y+23	; 0x17
    4142:	98 8d       	ldd	r25, Y+24	; 0x18
    4144:	20 e0       	ldi	r18, 0x00	; 0
    4146:	30 e0       	ldi	r19, 0x00	; 0
    4148:	40 e8       	ldi	r20, 0x80	; 128
    414a:	5f e3       	ldi	r21, 0x3F	; 63
    414c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4150:	88 23       	and	r24, r24
    4152:	2c f4       	brge	.+10     	; 0x415e <main+0x392>
		__ticks = 1;
    4154:	81 e0       	ldi	r24, 0x01	; 1
    4156:	90 e0       	ldi	r25, 0x00	; 0
    4158:	9c 8b       	std	Y+20, r25	; 0x14
    415a:	8b 8b       	std	Y+19, r24	; 0x13
    415c:	3f c0       	rjmp	.+126    	; 0x41dc <main+0x410>
	else if (__tmp > 65535)
    415e:	6d 89       	ldd	r22, Y+21	; 0x15
    4160:	7e 89       	ldd	r23, Y+22	; 0x16
    4162:	8f 89       	ldd	r24, Y+23	; 0x17
    4164:	98 8d       	ldd	r25, Y+24	; 0x18
    4166:	20 e0       	ldi	r18, 0x00	; 0
    4168:	3f ef       	ldi	r19, 0xFF	; 255
    416a:	4f e7       	ldi	r20, 0x7F	; 127
    416c:	57 e4       	ldi	r21, 0x47	; 71
    416e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4172:	18 16       	cp	r1, r24
    4174:	4c f5       	brge	.+82     	; 0x41c8 <main+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4176:	69 8d       	ldd	r22, Y+25	; 0x19
    4178:	7a 8d       	ldd	r23, Y+26	; 0x1a
    417a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    417c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    417e:	20 e0       	ldi	r18, 0x00	; 0
    4180:	30 e0       	ldi	r19, 0x00	; 0
    4182:	40 e2       	ldi	r20, 0x20	; 32
    4184:	51 e4       	ldi	r21, 0x41	; 65
    4186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    418a:	dc 01       	movw	r26, r24
    418c:	cb 01       	movw	r24, r22
    418e:	bc 01       	movw	r22, r24
    4190:	cd 01       	movw	r24, r26
    4192:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4196:	dc 01       	movw	r26, r24
    4198:	cb 01       	movw	r24, r22
    419a:	9c 8b       	std	Y+20, r25	; 0x14
    419c:	8b 8b       	std	Y+19, r24	; 0x13
    419e:	0f c0       	rjmp	.+30     	; 0x41be <main+0x3f2>
    41a0:	88 ec       	ldi	r24, 0xC8	; 200
    41a2:	90 e0       	ldi	r25, 0x00	; 0
    41a4:	9a 8b       	std	Y+18, r25	; 0x12
    41a6:	89 8b       	std	Y+17, r24	; 0x11
    41a8:	89 89       	ldd	r24, Y+17	; 0x11
    41aa:	9a 89       	ldd	r25, Y+18	; 0x12
    41ac:	01 97       	sbiw	r24, 0x01	; 1
    41ae:	f1 f7       	brne	.-4      	; 0x41ac <main+0x3e0>
    41b0:	9a 8b       	std	Y+18, r25	; 0x12
    41b2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41b4:	8b 89       	ldd	r24, Y+19	; 0x13
    41b6:	9c 89       	ldd	r25, Y+20	; 0x14
    41b8:	01 97       	sbiw	r24, 0x01	; 1
    41ba:	9c 8b       	std	Y+20, r25	; 0x14
    41bc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41be:	8b 89       	ldd	r24, Y+19	; 0x13
    41c0:	9c 89       	ldd	r25, Y+20	; 0x14
    41c2:	00 97       	sbiw	r24, 0x00	; 0
    41c4:	69 f7       	brne	.-38     	; 0x41a0 <main+0x3d4>
    41c6:	14 c0       	rjmp	.+40     	; 0x41f0 <main+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41c8:	6d 89       	ldd	r22, Y+21	; 0x15
    41ca:	7e 89       	ldd	r23, Y+22	; 0x16
    41cc:	8f 89       	ldd	r24, Y+23	; 0x17
    41ce:	98 8d       	ldd	r25, Y+24	; 0x18
    41d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41d4:	dc 01       	movw	r26, r24
    41d6:	cb 01       	movw	r24, r22
    41d8:	9c 8b       	std	Y+20, r25	; 0x14
    41da:	8b 8b       	std	Y+19, r24	; 0x13
    41dc:	8b 89       	ldd	r24, Y+19	; 0x13
    41de:	9c 89       	ldd	r25, Y+20	; 0x14
    41e0:	98 8b       	std	Y+16, r25	; 0x10
    41e2:	8f 87       	std	Y+15, r24	; 0x0f
    41e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    41e6:	98 89       	ldd	r25, Y+16	; 0x10
    41e8:	01 97       	sbiw	r24, 0x01	; 1
    41ea:	f1 f7       	brne	.-4      	; 0x41e8 <main+0x41c>
    41ec:	98 8b       	std	Y+16, r25	; 0x10
    41ee:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(600);
				LED_u8TurnOff(&led1);
    41f0:	ce 01       	movw	r24, r28
    41f2:	4f 96       	adiw	r24, 0x1f	; 31
    41f4:	0e 94 c1 13 	call	0x2782	; 0x2782 <LED_u8TurnOff>
				DIO_u8SetPinValue(DIO_PORTB,DIO_PIN1,DIO_PIN_LOW);
    41f8:	81 e0       	ldi	r24, 0x01	; 1
    41fa:	61 e0       	ldi	r22, 0x01	; 1
    41fc:	40 e0       	ldi	r20, 0x00	; 0
    41fe:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8SetPinValue>
				LED_u8TurnOn(&led1);
    4202:	ce 01       	movw	r24, r28
    4204:	4f 96       	adiw	r24, 0x1f	; 31
    4206:	0e 94 8f 13 	call	0x271e	; 0x271e <LED_u8TurnOn>
    420a:	80 e0       	ldi	r24, 0x00	; 0
    420c:	90 e0       	ldi	r25, 0x00	; 0
    420e:	a6 e1       	ldi	r26, 0x16	; 22
    4210:	b4 e4       	ldi	r27, 0x44	; 68
    4212:	8b 87       	std	Y+11, r24	; 0x0b
    4214:	9c 87       	std	Y+12, r25	; 0x0c
    4216:	ad 87       	std	Y+13, r26	; 0x0d
    4218:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    421a:	6b 85       	ldd	r22, Y+11	; 0x0b
    421c:	7c 85       	ldd	r23, Y+12	; 0x0c
    421e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4220:	9e 85       	ldd	r25, Y+14	; 0x0e
    4222:	20 e0       	ldi	r18, 0x00	; 0
    4224:	30 e0       	ldi	r19, 0x00	; 0
    4226:	4a ef       	ldi	r20, 0xFA	; 250
    4228:	54 e4       	ldi	r21, 0x44	; 68
    422a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    422e:	dc 01       	movw	r26, r24
    4230:	cb 01       	movw	r24, r22
    4232:	8f 83       	std	Y+7, r24	; 0x07
    4234:	98 87       	std	Y+8, r25	; 0x08
    4236:	a9 87       	std	Y+9, r26	; 0x09
    4238:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    423a:	6f 81       	ldd	r22, Y+7	; 0x07
    423c:	78 85       	ldd	r23, Y+8	; 0x08
    423e:	89 85       	ldd	r24, Y+9	; 0x09
    4240:	9a 85       	ldd	r25, Y+10	; 0x0a
    4242:	20 e0       	ldi	r18, 0x00	; 0
    4244:	30 e0       	ldi	r19, 0x00	; 0
    4246:	40 e8       	ldi	r20, 0x80	; 128
    4248:	5f e3       	ldi	r21, 0x3F	; 63
    424a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    424e:	88 23       	and	r24, r24
    4250:	2c f4       	brge	.+10     	; 0x425c <main+0x490>
		__ticks = 1;
    4252:	81 e0       	ldi	r24, 0x01	; 1
    4254:	90 e0       	ldi	r25, 0x00	; 0
    4256:	9e 83       	std	Y+6, r25	; 0x06
    4258:	8d 83       	std	Y+5, r24	; 0x05
    425a:	3f c0       	rjmp	.+126    	; 0x42da <main+0x50e>
	else if (__tmp > 65535)
    425c:	6f 81       	ldd	r22, Y+7	; 0x07
    425e:	78 85       	ldd	r23, Y+8	; 0x08
    4260:	89 85       	ldd	r24, Y+9	; 0x09
    4262:	9a 85       	ldd	r25, Y+10	; 0x0a
    4264:	20 e0       	ldi	r18, 0x00	; 0
    4266:	3f ef       	ldi	r19, 0xFF	; 255
    4268:	4f e7       	ldi	r20, 0x7F	; 127
    426a:	57 e4       	ldi	r21, 0x47	; 71
    426c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4270:	18 16       	cp	r1, r24
    4272:	4c f5       	brge	.+82     	; 0x42c6 <main+0x4fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4274:	6b 85       	ldd	r22, Y+11	; 0x0b
    4276:	7c 85       	ldd	r23, Y+12	; 0x0c
    4278:	8d 85       	ldd	r24, Y+13	; 0x0d
    427a:	9e 85       	ldd	r25, Y+14	; 0x0e
    427c:	20 e0       	ldi	r18, 0x00	; 0
    427e:	30 e0       	ldi	r19, 0x00	; 0
    4280:	40 e2       	ldi	r20, 0x20	; 32
    4282:	51 e4       	ldi	r21, 0x41	; 65
    4284:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4288:	dc 01       	movw	r26, r24
    428a:	cb 01       	movw	r24, r22
    428c:	bc 01       	movw	r22, r24
    428e:	cd 01       	movw	r24, r26
    4290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4294:	dc 01       	movw	r26, r24
    4296:	cb 01       	movw	r24, r22
    4298:	9e 83       	std	Y+6, r25	; 0x06
    429a:	8d 83       	std	Y+5, r24	; 0x05
    429c:	0f c0       	rjmp	.+30     	; 0x42bc <main+0x4f0>
    429e:	88 ec       	ldi	r24, 0xC8	; 200
    42a0:	90 e0       	ldi	r25, 0x00	; 0
    42a2:	9c 83       	std	Y+4, r25	; 0x04
    42a4:	8b 83       	std	Y+3, r24	; 0x03
    42a6:	8b 81       	ldd	r24, Y+3	; 0x03
    42a8:	9c 81       	ldd	r25, Y+4	; 0x04
    42aa:	01 97       	sbiw	r24, 0x01	; 1
    42ac:	f1 f7       	brne	.-4      	; 0x42aa <main+0x4de>
    42ae:	9c 83       	std	Y+4, r25	; 0x04
    42b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42b2:	8d 81       	ldd	r24, Y+5	; 0x05
    42b4:	9e 81       	ldd	r25, Y+6	; 0x06
    42b6:	01 97       	sbiw	r24, 0x01	; 1
    42b8:	9e 83       	std	Y+6, r25	; 0x06
    42ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42bc:	8d 81       	ldd	r24, Y+5	; 0x05
    42be:	9e 81       	ldd	r25, Y+6	; 0x06
    42c0:	00 97       	sbiw	r24, 0x00	; 0
    42c2:	69 f7       	brne	.-38     	; 0x429e <main+0x4d2>
    42c4:	14 c0       	rjmp	.+40     	; 0x42ee <main+0x522>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42c6:	6f 81       	ldd	r22, Y+7	; 0x07
    42c8:	78 85       	ldd	r23, Y+8	; 0x08
    42ca:	89 85       	ldd	r24, Y+9	; 0x09
    42cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    42ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42d2:	dc 01       	movw	r26, r24
    42d4:	cb 01       	movw	r24, r22
    42d6:	9e 83       	std	Y+6, r25	; 0x06
    42d8:	8d 83       	std	Y+5, r24	; 0x05
    42da:	8d 81       	ldd	r24, Y+5	; 0x05
    42dc:	9e 81       	ldd	r25, Y+6	; 0x06
    42de:	9a 83       	std	Y+2, r25	; 0x02
    42e0:	89 83       	std	Y+1, r24	; 0x01
    42e2:	89 81       	ldd	r24, Y+1	; 0x01
    42e4:	9a 81       	ldd	r25, Y+2	; 0x02
    42e6:	01 97       	sbiw	r24, 0x01	; 1
    42e8:	f1 f7       	brne	.-4      	; 0x42e6 <main+0x51a>
    42ea:	9a 83       	std	Y+2, r25	; 0x02
    42ec:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(600);
				LED_u8TurnOff(&led1);
    42ee:	ce 01       	movw	r24, r28
    42f0:	4f 96       	adiw	r24, 0x1f	; 31
    42f2:	0e 94 c1 13 	call	0x2782	; 0x2782 <LED_u8TurnOff>
				OutFlag = 0;
				break ;
			}
			CLCD_voidGoToXY(1,0);
			CLCD_voidSendString("It's time!...");
			for(buzzer = 0;buzzer<3;buzzer++)
    42f6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    42f8:	8f 5f       	subi	r24, 0xFF	; 255
    42fa:	8e 8f       	std	Y+30, r24	; 0x1e
    42fc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    42fe:	83 30       	cpi	r24, 0x03	; 3
    4300:	08 f4       	brcc	.+2      	; 0x4304 <main+0x538>
    4302:	fb ce       	rjmp	.-522    	; 0x40fa <main+0x32e>
				LED_u8TurnOn(&led1);
				_delay_ms(600);
				LED_u8TurnOff(&led1);
			}

			CLCD_voidSendCommand(1);
    4304:	81 e0       	ldi	r24, 0x01	; 1
    4306:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidSendCommand>
			postion = 0;
    430a:	10 92 b2 01 	sts	0x01B2, r1
			CLCD_voidWriteSpecialCharacter(curser,0,1,1);
    430e:	88 e9       	ldi	r24, 0x98	; 152
    4310:	91 e0       	ldi	r25, 0x01	; 1
    4312:	60 e0       	ldi	r22, 0x00	; 0
    4314:	41 e0       	ldi	r20, 0x01	; 1
    4316:	21 e0       	ldi	r18, 0x01	; 1
    4318:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <CLCD_voidWriteSpecialCharacter>
    431c:	98 cd       	rjmp	.-1232   	; 0x3e4e <main+0x82>
			break;
		case 'C':
			CLCD_voidSendCommand(1);
    431e:	81 e0       	ldi	r24, 0x01	; 1
    4320:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidSendCommand>
			hrs = 0;
    4324:	10 92 b3 01 	sts	0x01B3, r1
			mins = 0;
    4328:	10 92 b4 01 	sts	0x01B4, r1
			secs = 0;
    432c:	10 92 b5 01 	sts	0x01B5, r1
			StopWatchDisp(hrs,mins,secs);
    4330:	80 91 b3 01 	lds	r24, 0x01B3
    4334:	90 91 b4 01 	lds	r25, 0x01B4
    4338:	20 91 b5 01 	lds	r18, 0x01B5
    433c:	69 2f       	mov	r22, r25
    433e:	42 2f       	mov	r20, r18
    4340:	0e 94 d7 22 	call	0x45ae	; 0x45ae <StopWatchDisp>
			postion = 0;
    4344:	10 92 b2 01 	sts	0x01B2, r1
			CLCD_voidWriteSpecialCharacter(curser,0,1,1);
    4348:	88 e9       	ldi	r24, 0x98	; 152
    434a:	91 e0       	ldi	r25, 0x01	; 1
    434c:	60 e0       	ldi	r22, 0x00	; 0
    434e:	41 e0       	ldi	r20, 0x01	; 1
    4350:	21 e0       	ldi	r18, 0x01	; 1
    4352:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <CLCD_voidWriteSpecialCharacter>
    4356:	7b cd       	rjmp	.-1290   	; 0x3e4e <main+0x82>

00004358 <OutSwitch>:
	}
	while(1);
}

void OutSwitch()
{
    4358:	df 93       	push	r29
    435a:	cf 93       	push	r28
    435c:	cd b7       	in	r28, 0x3d	; 61
    435e:	de b7       	in	r29, 0x3e	; 62
	OutFlag = 1;
    4360:	81 e0       	ldi	r24, 0x01	; 1
    4362:	80 93 b1 01 	sts	0x01B1, r24
}
    4366:	cf 91       	pop	r28
    4368:	df 91       	pop	r29
    436a:	08 95       	ret

0000436c <SecSeqance>:
void SecSeqance(s8 x,s8 y,s8 z)
{
    436c:	df 93       	push	r29
    436e:	cf 93       	push	r28
    4370:	cd b7       	in	r28, 0x3d	; 61
    4372:	de b7       	in	r29, 0x3e	; 62
    4374:	61 97       	sbiw	r28, 0x11	; 17
    4376:	0f b6       	in	r0, 0x3f	; 63
    4378:	f8 94       	cli
    437a:	de bf       	out	0x3e, r29	; 62
    437c:	0f be       	out	0x3f, r0	; 63
    437e:	cd bf       	out	0x3d, r28	; 61
    4380:	8f 87       	std	Y+15, r24	; 0x0f
    4382:	68 8b       	std	Y+16, r22	; 0x10
    4384:	49 8b       	std	Y+17, r20	; 0x11
	if(z == 59)
    4386:	89 89       	ldd	r24, Y+17	; 0x11
    4388:	8b 33       	cpi	r24, 0x3B	; 59
    438a:	09 f0       	breq	.+2      	; 0x438e <SecSeqance+0x22>
    438c:	94 c0       	rjmp	.+296    	; 0x44b6 <SecSeqance+0x14a>
		z = 60;
    438e:	8c e3       	ldi	r24, 0x3C	; 60
    4390:	89 8b       	std	Y+17, r24	; 0x11
    4392:	91 c0       	rjmp	.+290    	; 0x44b6 <SecSeqance+0x14a>
	while(z != 0)
	{
		z--;
    4394:	89 89       	ldd	r24, Y+17	; 0x11
    4396:	81 50       	subi	r24, 0x01	; 1
    4398:	89 8b       	std	Y+17, r24	; 0x11
		StopWatchDisp(x,y,z);
    439a:	8f 85       	ldd	r24, Y+15	; 0x0f
    439c:	68 89       	ldd	r22, Y+16	; 0x10
    439e:	49 89       	ldd	r20, Y+17	; 0x11
    43a0:	0e 94 d7 22 	call	0x45ae	; 0x45ae <StopWatchDisp>
		if(OutFlag == 1)
    43a4:	80 91 b1 01 	lds	r24, 0x01B1
    43a8:	81 30       	cpi	r24, 0x01	; 1
    43aa:	99 f4       	brne	.+38     	; 0x43d2 <SecSeqance+0x66>
		{
			hrs=x;mins=y;secs=z;
    43ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    43ae:	80 93 b3 01 	sts	0x01B3, r24
    43b2:	88 89       	ldd	r24, Y+16	; 0x10
    43b4:	80 93 b4 01 	sts	0x01B4, r24
    43b8:	89 89       	ldd	r24, Y+17	; 0x11
    43ba:	80 93 b5 01 	sts	0x01B5, r24
			postion = 0;
    43be:	10 92 b2 01 	sts	0x01B2, r1
			CLCD_voidWriteSpecialCharacter(curser,0,1,1);
    43c2:	88 e9       	ldi	r24, 0x98	; 152
    43c4:	91 e0       	ldi	r25, 0x01	; 1
    43c6:	60 e0       	ldi	r22, 0x00	; 0
    43c8:	41 e0       	ldi	r20, 0x01	; 1
    43ca:	21 e0       	ldi	r18, 0x01	; 1
    43cc:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <CLCD_voidWriteSpecialCharacter>
    43d0:	76 c0       	rjmp	.+236    	; 0x44be <SecSeqance+0x152>
			return ;
    43d2:	80 e0       	ldi	r24, 0x00	; 0
    43d4:	90 e0       	ldi	r25, 0x00	; 0
    43d6:	aa ef       	ldi	r26, 0xFA	; 250
    43d8:	b3 e4       	ldi	r27, 0x43	; 67
    43da:	8b 87       	std	Y+11, r24	; 0x0b
    43dc:	9c 87       	std	Y+12, r25	; 0x0c
    43de:	ad 87       	std	Y+13, r26	; 0x0d
    43e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    43e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    43e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    43e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    43ea:	20 e0       	ldi	r18, 0x00	; 0
    43ec:	30 e0       	ldi	r19, 0x00	; 0
    43ee:	4a ef       	ldi	r20, 0xFA	; 250
    43f0:	54 e4       	ldi	r21, 0x44	; 68
    43f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43f6:	dc 01       	movw	r26, r24
    43f8:	cb 01       	movw	r24, r22
    43fa:	8f 83       	std	Y+7, r24	; 0x07
    43fc:	98 87       	std	Y+8, r25	; 0x08
    43fe:	a9 87       	std	Y+9, r26	; 0x09
    4400:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4402:	6f 81       	ldd	r22, Y+7	; 0x07
    4404:	78 85       	ldd	r23, Y+8	; 0x08
    4406:	89 85       	ldd	r24, Y+9	; 0x09
    4408:	9a 85       	ldd	r25, Y+10	; 0x0a
    440a:	20 e0       	ldi	r18, 0x00	; 0
    440c:	30 e0       	ldi	r19, 0x00	; 0
    440e:	40 e8       	ldi	r20, 0x80	; 128
    4410:	5f e3       	ldi	r21, 0x3F	; 63
    4412:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4416:	88 23       	and	r24, r24
    4418:	2c f4       	brge	.+10     	; 0x4424 <SecSeqance+0xb8>
		__ticks = 1;
    441a:	81 e0       	ldi	r24, 0x01	; 1
    441c:	90 e0       	ldi	r25, 0x00	; 0
    441e:	9e 83       	std	Y+6, r25	; 0x06
    4420:	8d 83       	std	Y+5, r24	; 0x05
    4422:	3f c0       	rjmp	.+126    	; 0x44a2 <SecSeqance+0x136>
	else if (__tmp > 65535)
    4424:	6f 81       	ldd	r22, Y+7	; 0x07
    4426:	78 85       	ldd	r23, Y+8	; 0x08
    4428:	89 85       	ldd	r24, Y+9	; 0x09
    442a:	9a 85       	ldd	r25, Y+10	; 0x0a
    442c:	20 e0       	ldi	r18, 0x00	; 0
    442e:	3f ef       	ldi	r19, 0xFF	; 255
    4430:	4f e7       	ldi	r20, 0x7F	; 127
    4432:	57 e4       	ldi	r21, 0x47	; 71
    4434:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4438:	18 16       	cp	r1, r24
    443a:	4c f5       	brge	.+82     	; 0x448e <SecSeqance+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    443c:	6b 85       	ldd	r22, Y+11	; 0x0b
    443e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4440:	8d 85       	ldd	r24, Y+13	; 0x0d
    4442:	9e 85       	ldd	r25, Y+14	; 0x0e
    4444:	20 e0       	ldi	r18, 0x00	; 0
    4446:	30 e0       	ldi	r19, 0x00	; 0
    4448:	40 e2       	ldi	r20, 0x20	; 32
    444a:	51 e4       	ldi	r21, 0x41	; 65
    444c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4450:	dc 01       	movw	r26, r24
    4452:	cb 01       	movw	r24, r22
    4454:	bc 01       	movw	r22, r24
    4456:	cd 01       	movw	r24, r26
    4458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    445c:	dc 01       	movw	r26, r24
    445e:	cb 01       	movw	r24, r22
    4460:	9e 83       	std	Y+6, r25	; 0x06
    4462:	8d 83       	std	Y+5, r24	; 0x05
    4464:	0f c0       	rjmp	.+30     	; 0x4484 <SecSeqance+0x118>
    4466:	88 ec       	ldi	r24, 0xC8	; 200
    4468:	90 e0       	ldi	r25, 0x00	; 0
    446a:	9c 83       	std	Y+4, r25	; 0x04
    446c:	8b 83       	std	Y+3, r24	; 0x03
    446e:	8b 81       	ldd	r24, Y+3	; 0x03
    4470:	9c 81       	ldd	r25, Y+4	; 0x04
    4472:	01 97       	sbiw	r24, 0x01	; 1
    4474:	f1 f7       	brne	.-4      	; 0x4472 <SecSeqance+0x106>
    4476:	9c 83       	std	Y+4, r25	; 0x04
    4478:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    447a:	8d 81       	ldd	r24, Y+5	; 0x05
    447c:	9e 81       	ldd	r25, Y+6	; 0x06
    447e:	01 97       	sbiw	r24, 0x01	; 1
    4480:	9e 83       	std	Y+6, r25	; 0x06
    4482:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4484:	8d 81       	ldd	r24, Y+5	; 0x05
    4486:	9e 81       	ldd	r25, Y+6	; 0x06
    4488:	00 97       	sbiw	r24, 0x00	; 0
    448a:	69 f7       	brne	.-38     	; 0x4466 <SecSeqance+0xfa>
    448c:	14 c0       	rjmp	.+40     	; 0x44b6 <SecSeqance+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    448e:	6f 81       	ldd	r22, Y+7	; 0x07
    4490:	78 85       	ldd	r23, Y+8	; 0x08
    4492:	89 85       	ldd	r24, Y+9	; 0x09
    4494:	9a 85       	ldd	r25, Y+10	; 0x0a
    4496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    449a:	dc 01       	movw	r26, r24
    449c:	cb 01       	movw	r24, r22
    449e:	9e 83       	std	Y+6, r25	; 0x06
    44a0:	8d 83       	std	Y+5, r24	; 0x05
    44a2:	8d 81       	ldd	r24, Y+5	; 0x05
    44a4:	9e 81       	ldd	r25, Y+6	; 0x06
    44a6:	9a 83       	std	Y+2, r25	; 0x02
    44a8:	89 83       	std	Y+1, r24	; 0x01
    44aa:	89 81       	ldd	r24, Y+1	; 0x01
    44ac:	9a 81       	ldd	r25, Y+2	; 0x02
    44ae:	01 97       	sbiw	r24, 0x01	; 1
    44b0:	f1 f7       	brne	.-4      	; 0x44ae <SecSeqance+0x142>
    44b2:	9a 83       	std	Y+2, r25	; 0x02
    44b4:	89 83       	std	Y+1, r24	; 0x01
}
void SecSeqance(s8 x,s8 y,s8 z)
{
	if(z == 59)
		z = 60;
	while(z != 0)
    44b6:	89 89       	ldd	r24, Y+17	; 0x11
    44b8:	88 23       	and	r24, r24
    44ba:	09 f0       	breq	.+2      	; 0x44be <SecSeqance+0x152>
    44bc:	6b cf       	rjmp	.-298    	; 0x4394 <SecSeqance+0x28>
			CLCD_voidWriteSpecialCharacter(curser,0,1,1);
			return ;
		}
		_delay_ms(500);
	}
}
    44be:	61 96       	adiw	r28, 0x11	; 17
    44c0:	0f b6       	in	r0, 0x3f	; 63
    44c2:	f8 94       	cli
    44c4:	de bf       	out	0x3e, r29	; 62
    44c6:	0f be       	out	0x3f, r0	; 63
    44c8:	cd bf       	out	0x3d, r28	; 61
    44ca:	cf 91       	pop	r28
    44cc:	df 91       	pop	r29
    44ce:	08 95       	ret

000044d0 <minSeqance>:
void minSeqance(s8 x,s8 y,s8 z)
{
    44d0:	df 93       	push	r29
    44d2:	cf 93       	push	r28
    44d4:	00 d0       	rcall	.+0      	; 0x44d6 <minSeqance+0x6>
    44d6:	0f 92       	push	r0
    44d8:	cd b7       	in	r28, 0x3d	; 61
    44da:	de b7       	in	r29, 0x3e	; 62
    44dc:	89 83       	std	Y+1, r24	; 0x01
    44de:	6a 83       	std	Y+2, r22	; 0x02
    44e0:	4b 83       	std	Y+3, r20	; 0x03
	if(y == 59)
    44e2:	8a 81       	ldd	r24, Y+2	; 0x02
    44e4:	8b 33       	cpi	r24, 0x3B	; 59
    44e6:	21 f5       	brne	.+72     	; 0x4530 <minSeqance+0x60>
		y = 60;
    44e8:	8c e3       	ldi	r24, 0x3C	; 60
    44ea:	8a 83       	std	Y+2, r24	; 0x02
    44ec:	21 c0       	rjmp	.+66     	; 0x4530 <minSeqance+0x60>
	while(y != 0)
	{
		z = 59;
    44ee:	8b e3       	ldi	r24, 0x3B	; 59
    44f0:	8b 83       	std	Y+3, r24	; 0x03
		y--;
    44f2:	8a 81       	ldd	r24, Y+2	; 0x02
    44f4:	81 50       	subi	r24, 0x01	; 1
    44f6:	8a 83       	std	Y+2, r24	; 0x02
		SecSeqance(x,y,z);
    44f8:	89 81       	ldd	r24, Y+1	; 0x01
    44fa:	6a 81       	ldd	r22, Y+2	; 0x02
    44fc:	4b 81       	ldd	r20, Y+3	; 0x03
    44fe:	0e 94 b6 21 	call	0x436c	; 0x436c <SecSeqance>
		if(OutFlag == 1)
    4502:	80 91 b1 01 	lds	r24, 0x01B1
    4506:	81 30       	cpi	r24, 0x01	; 1
    4508:	99 f4       	brne	.+38     	; 0x4530 <minSeqance+0x60>
		{
			hrs=x;mins=y;secs=z;
    450a:	89 81       	ldd	r24, Y+1	; 0x01
    450c:	80 93 b3 01 	sts	0x01B3, r24
    4510:	8a 81       	ldd	r24, Y+2	; 0x02
    4512:	80 93 b4 01 	sts	0x01B4, r24
    4516:	8b 81       	ldd	r24, Y+3	; 0x03
    4518:	80 93 b5 01 	sts	0x01B5, r24
			postion = 0;
    451c:	10 92 b2 01 	sts	0x01B2, r1
			CLCD_voidWriteSpecialCharacter(curser,0,1,1);
    4520:	88 e9       	ldi	r24, 0x98	; 152
    4522:	91 e0       	ldi	r25, 0x01	; 1
    4524:	60 e0       	ldi	r22, 0x00	; 0
    4526:	41 e0       	ldi	r20, 0x01	; 1
    4528:	21 e0       	ldi	r18, 0x01	; 1
    452a:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <CLCD_voidWriteSpecialCharacter>
    452e:	03 c0       	rjmp	.+6      	; 0x4536 <minSeqance+0x66>
}
void minSeqance(s8 x,s8 y,s8 z)
{
	if(y == 59)
		y = 60;
	while(y != 0)
    4530:	8a 81       	ldd	r24, Y+2	; 0x02
    4532:	88 23       	and	r24, r24
    4534:	e1 f6       	brne	.-72     	; 0x44ee <minSeqance+0x1e>
			postion = 0;
			CLCD_voidWriteSpecialCharacter(curser,0,1,1);
			return ;
		}
	}
}
    4536:	0f 90       	pop	r0
    4538:	0f 90       	pop	r0
    453a:	0f 90       	pop	r0
    453c:	cf 91       	pop	r28
    453e:	df 91       	pop	r29
    4540:	08 95       	ret

00004542 <hourSeqance>:
void hourSeqance(s8 x,s8 y,s8 z)
{
    4542:	df 93       	push	r29
    4544:	cf 93       	push	r28
    4546:	00 d0       	rcall	.+0      	; 0x4548 <hourSeqance+0x6>
    4548:	0f 92       	push	r0
    454a:	cd b7       	in	r28, 0x3d	; 61
    454c:	de b7       	in	r29, 0x3e	; 62
    454e:	89 83       	std	Y+1, r24	; 0x01
    4550:	6a 83       	std	Y+2, r22	; 0x02
    4552:	4b 83       	std	Y+3, r20	; 0x03
    4554:	23 c0       	rjmp	.+70     	; 0x459c <hourSeqance+0x5a>
	while(x != 0)
	{
		z = 59;
    4556:	8b e3       	ldi	r24, 0x3B	; 59
    4558:	8b 83       	std	Y+3, r24	; 0x03
		y = 59;
    455a:	8b e3       	ldi	r24, 0x3B	; 59
    455c:	8a 83       	std	Y+2, r24	; 0x02
		x--;
    455e:	89 81       	ldd	r24, Y+1	; 0x01
    4560:	81 50       	subi	r24, 0x01	; 1
    4562:	89 83       	std	Y+1, r24	; 0x01
		minSeqance(x,y,z);
    4564:	89 81       	ldd	r24, Y+1	; 0x01
    4566:	6a 81       	ldd	r22, Y+2	; 0x02
    4568:	4b 81       	ldd	r20, Y+3	; 0x03
    456a:	0e 94 68 22 	call	0x44d0	; 0x44d0 <minSeqance>
		if(OutFlag == 1)
    456e:	80 91 b1 01 	lds	r24, 0x01B1
    4572:	81 30       	cpi	r24, 0x01	; 1
    4574:	99 f4       	brne	.+38     	; 0x459c <hourSeqance+0x5a>
		{
			hrs=x;mins=y;secs=z;
    4576:	89 81       	ldd	r24, Y+1	; 0x01
    4578:	80 93 b3 01 	sts	0x01B3, r24
    457c:	8a 81       	ldd	r24, Y+2	; 0x02
    457e:	80 93 b4 01 	sts	0x01B4, r24
    4582:	8b 81       	ldd	r24, Y+3	; 0x03
    4584:	80 93 b5 01 	sts	0x01B5, r24
			postion = 0;
    4588:	10 92 b2 01 	sts	0x01B2, r1
			CLCD_voidWriteSpecialCharacter(curser,0,1,1);
    458c:	88 e9       	ldi	r24, 0x98	; 152
    458e:	91 e0       	ldi	r25, 0x01	; 1
    4590:	60 e0       	ldi	r22, 0x00	; 0
    4592:	41 e0       	ldi	r20, 0x01	; 1
    4594:	21 e0       	ldi	r18, 0x01	; 1
    4596:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <CLCD_voidWriteSpecialCharacter>
    459a:	03 c0       	rjmp	.+6      	; 0x45a2 <hourSeqance+0x60>
		}
	}
}
void hourSeqance(s8 x,s8 y,s8 z)
{
	while(x != 0)
    459c:	89 81       	ldd	r24, Y+1	; 0x01
    459e:	88 23       	and	r24, r24
    45a0:	d1 f6       	brne	.-76     	; 0x4556 <hourSeqance+0x14>
			postion = 0;
			CLCD_voidWriteSpecialCharacter(curser,0,1,1);
			return ;
		}
	}
}
    45a2:	0f 90       	pop	r0
    45a4:	0f 90       	pop	r0
    45a6:	0f 90       	pop	r0
    45a8:	cf 91       	pop	r28
    45aa:	df 91       	pop	r29
    45ac:	08 95       	ret

000045ae <StopWatchDisp>:
void StopWatchDisp(s8 x,s8 y,s8 z)
{
    45ae:	df 93       	push	r29
    45b0:	cf 93       	push	r28
    45b2:	00 d0       	rcall	.+0      	; 0x45b4 <StopWatchDisp+0x6>
    45b4:	0f 92       	push	r0
    45b6:	cd b7       	in	r28, 0x3d	; 61
    45b8:	de b7       	in	r29, 0x3e	; 62
    45ba:	89 83       	std	Y+1, r24	; 0x01
    45bc:	6a 83       	std	Y+2, r22	; 0x02
    45be:	4b 83       	std	Y+3, r20	; 0x03
	CLCD_voidGoToXY(0,0);
    45c0:	80 e0       	ldi	r24, 0x00	; 0
    45c2:	60 e0       	ldi	r22, 0x00	; 0
    45c4:	0e 94 b6 0c 	call	0x196c	; 0x196c <CLCD_voidGoToXY>
	CLCD_voidWriteNumber(x/10);
    45c8:	89 81       	ldd	r24, Y+1	; 0x01
    45ca:	9a e0       	ldi	r25, 0x0A	; 10
    45cc:	69 2f       	mov	r22, r25
    45ce:	0e 94 37 23 	call	0x466e	; 0x466e <__divmodqi4>
    45d2:	99 27       	eor	r25, r25
    45d4:	87 fd       	sbrc	r24, 7
    45d6:	90 95       	com	r25
    45d8:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <CLCD_voidWriteNumber>
	CLCD_voidWriteNumber(x%10);
    45dc:	89 81       	ldd	r24, Y+1	; 0x01
    45de:	9a e0       	ldi	r25, 0x0A	; 10
    45e0:	69 2f       	mov	r22, r25
    45e2:	0e 94 37 23 	call	0x466e	; 0x466e <__divmodqi4>
    45e6:	89 2f       	mov	r24, r25
    45e8:	99 27       	eor	r25, r25
    45ea:	87 fd       	sbrc	r24, 7
    45ec:	90 95       	com	r25
    45ee:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <CLCD_voidWriteNumber>
	CLCD_voidSendData(':');
    45f2:	8a e3       	ldi	r24, 0x3A	; 58
    45f4:	0e 94 f5 08 	call	0x11ea	; 0x11ea <CLCD_voidSendData>
	CLCD_voidGoToXY(0,3);
    45f8:	80 e0       	ldi	r24, 0x00	; 0
    45fa:	63 e0       	ldi	r22, 0x03	; 3
    45fc:	0e 94 b6 0c 	call	0x196c	; 0x196c <CLCD_voidGoToXY>
	CLCD_voidWriteNumber(y/10);
    4600:	8a 81       	ldd	r24, Y+2	; 0x02
    4602:	9a e0       	ldi	r25, 0x0A	; 10
    4604:	69 2f       	mov	r22, r25
    4606:	0e 94 37 23 	call	0x466e	; 0x466e <__divmodqi4>
    460a:	99 27       	eor	r25, r25
    460c:	87 fd       	sbrc	r24, 7
    460e:	90 95       	com	r25
    4610:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <CLCD_voidWriteNumber>
	CLCD_voidWriteNumber(y%10);
    4614:	8a 81       	ldd	r24, Y+2	; 0x02
    4616:	9a e0       	ldi	r25, 0x0A	; 10
    4618:	69 2f       	mov	r22, r25
    461a:	0e 94 37 23 	call	0x466e	; 0x466e <__divmodqi4>
    461e:	89 2f       	mov	r24, r25
    4620:	99 27       	eor	r25, r25
    4622:	87 fd       	sbrc	r24, 7
    4624:	90 95       	com	r25
    4626:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <CLCD_voidWriteNumber>
	CLCD_voidSendData(':');
    462a:	8a e3       	ldi	r24, 0x3A	; 58
    462c:	0e 94 f5 08 	call	0x11ea	; 0x11ea <CLCD_voidSendData>
	CLCD_voidGoToXY(0,6);
    4630:	80 e0       	ldi	r24, 0x00	; 0
    4632:	66 e0       	ldi	r22, 0x06	; 6
    4634:	0e 94 b6 0c 	call	0x196c	; 0x196c <CLCD_voidGoToXY>
	CLCD_voidWriteNumber(z/10);
    4638:	8b 81       	ldd	r24, Y+3	; 0x03
    463a:	9a e0       	ldi	r25, 0x0A	; 10
    463c:	69 2f       	mov	r22, r25
    463e:	0e 94 37 23 	call	0x466e	; 0x466e <__divmodqi4>
    4642:	99 27       	eor	r25, r25
    4644:	87 fd       	sbrc	r24, 7
    4646:	90 95       	com	r25
    4648:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <CLCD_voidWriteNumber>
	CLCD_voidWriteNumber(z%10);
    464c:	8b 81       	ldd	r24, Y+3	; 0x03
    464e:	9a e0       	ldi	r25, 0x0A	; 10
    4650:	69 2f       	mov	r22, r25
    4652:	0e 94 37 23 	call	0x466e	; 0x466e <__divmodqi4>
    4656:	89 2f       	mov	r24, r25
    4658:	99 27       	eor	r25, r25
    465a:	87 fd       	sbrc	r24, 7
    465c:	90 95       	com	r25
    465e:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <CLCD_voidWriteNumber>
}
    4662:	0f 90       	pop	r0
    4664:	0f 90       	pop	r0
    4666:	0f 90       	pop	r0
    4668:	cf 91       	pop	r28
    466a:	df 91       	pop	r29
    466c:	08 95       	ret

0000466e <__divmodqi4>:
    466e:	87 fb       	bst	r24, 7
    4670:	08 2e       	mov	r0, r24
    4672:	06 26       	eor	r0, r22
    4674:	87 fd       	sbrc	r24, 7
    4676:	81 95       	neg	r24
    4678:	67 fd       	sbrc	r22, 7
    467a:	61 95       	neg	r22
    467c:	19 d0       	rcall	.+50     	; 0x46b0 <__udivmodqi4>
    467e:	0e f4       	brtc	.+2      	; 0x4682 <__divmodqi4_1>
    4680:	91 95       	neg	r25

00004682 <__divmodqi4_1>:
    4682:	07 fc       	sbrc	r0, 7
    4684:	81 95       	neg	r24

00004686 <__divmodqi4_exit>:
    4686:	08 95       	ret

00004688 <__udivmodhi4>:
    4688:	aa 1b       	sub	r26, r26
    468a:	bb 1b       	sub	r27, r27
    468c:	51 e1       	ldi	r21, 0x11	; 17
    468e:	07 c0       	rjmp	.+14     	; 0x469e <__udivmodhi4_ep>

00004690 <__udivmodhi4_loop>:
    4690:	aa 1f       	adc	r26, r26
    4692:	bb 1f       	adc	r27, r27
    4694:	a6 17       	cp	r26, r22
    4696:	b7 07       	cpc	r27, r23
    4698:	10 f0       	brcs	.+4      	; 0x469e <__udivmodhi4_ep>
    469a:	a6 1b       	sub	r26, r22
    469c:	b7 0b       	sbc	r27, r23

0000469e <__udivmodhi4_ep>:
    469e:	88 1f       	adc	r24, r24
    46a0:	99 1f       	adc	r25, r25
    46a2:	5a 95       	dec	r21
    46a4:	a9 f7       	brne	.-22     	; 0x4690 <__udivmodhi4_loop>
    46a6:	80 95       	com	r24
    46a8:	90 95       	com	r25
    46aa:	bc 01       	movw	r22, r24
    46ac:	cd 01       	movw	r24, r26
    46ae:	08 95       	ret

000046b0 <__udivmodqi4>:
    46b0:	99 1b       	sub	r25, r25
    46b2:	79 e0       	ldi	r23, 0x09	; 9
    46b4:	04 c0       	rjmp	.+8      	; 0x46be <__udivmodqi4_ep>

000046b6 <__udivmodqi4_loop>:
    46b6:	99 1f       	adc	r25, r25
    46b8:	96 17       	cp	r25, r22
    46ba:	08 f0       	brcs	.+2      	; 0x46be <__udivmodqi4_ep>
    46bc:	96 1b       	sub	r25, r22

000046be <__udivmodqi4_ep>:
    46be:	88 1f       	adc	r24, r24
    46c0:	7a 95       	dec	r23
    46c2:	c9 f7       	brne	.-14     	; 0x46b6 <__udivmodqi4_loop>
    46c4:	80 95       	com	r24
    46c6:	08 95       	ret

000046c8 <__prologue_saves__>:
    46c8:	2f 92       	push	r2
    46ca:	3f 92       	push	r3
    46cc:	4f 92       	push	r4
    46ce:	5f 92       	push	r5
    46d0:	6f 92       	push	r6
    46d2:	7f 92       	push	r7
    46d4:	8f 92       	push	r8
    46d6:	9f 92       	push	r9
    46d8:	af 92       	push	r10
    46da:	bf 92       	push	r11
    46dc:	cf 92       	push	r12
    46de:	df 92       	push	r13
    46e0:	ef 92       	push	r14
    46e2:	ff 92       	push	r15
    46e4:	0f 93       	push	r16
    46e6:	1f 93       	push	r17
    46e8:	cf 93       	push	r28
    46ea:	df 93       	push	r29
    46ec:	cd b7       	in	r28, 0x3d	; 61
    46ee:	de b7       	in	r29, 0x3e	; 62
    46f0:	ca 1b       	sub	r28, r26
    46f2:	db 0b       	sbc	r29, r27
    46f4:	0f b6       	in	r0, 0x3f	; 63
    46f6:	f8 94       	cli
    46f8:	de bf       	out	0x3e, r29	; 62
    46fa:	0f be       	out	0x3f, r0	; 63
    46fc:	cd bf       	out	0x3d, r28	; 61
    46fe:	09 94       	ijmp

00004700 <__epilogue_restores__>:
    4700:	2a 88       	ldd	r2, Y+18	; 0x12
    4702:	39 88       	ldd	r3, Y+17	; 0x11
    4704:	48 88       	ldd	r4, Y+16	; 0x10
    4706:	5f 84       	ldd	r5, Y+15	; 0x0f
    4708:	6e 84       	ldd	r6, Y+14	; 0x0e
    470a:	7d 84       	ldd	r7, Y+13	; 0x0d
    470c:	8c 84       	ldd	r8, Y+12	; 0x0c
    470e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4710:	aa 84       	ldd	r10, Y+10	; 0x0a
    4712:	b9 84       	ldd	r11, Y+9	; 0x09
    4714:	c8 84       	ldd	r12, Y+8	; 0x08
    4716:	df 80       	ldd	r13, Y+7	; 0x07
    4718:	ee 80       	ldd	r14, Y+6	; 0x06
    471a:	fd 80       	ldd	r15, Y+5	; 0x05
    471c:	0c 81       	ldd	r16, Y+4	; 0x04
    471e:	1b 81       	ldd	r17, Y+3	; 0x03
    4720:	aa 81       	ldd	r26, Y+2	; 0x02
    4722:	b9 81       	ldd	r27, Y+1	; 0x01
    4724:	ce 0f       	add	r28, r30
    4726:	d1 1d       	adc	r29, r1
    4728:	0f b6       	in	r0, 0x3f	; 63
    472a:	f8 94       	cli
    472c:	de bf       	out	0x3e, r29	; 62
    472e:	0f be       	out	0x3f, r0	; 63
    4730:	cd bf       	out	0x3d, r28	; 61
    4732:	ed 01       	movw	r28, r26
    4734:	08 95       	ret

00004736 <_exit>:
    4736:	f8 94       	cli

00004738 <__stop_program>:
    4738:	ff cf       	rjmp	.-2      	; 0x4738 <__stop_program>
